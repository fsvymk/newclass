
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000140  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        0000000c  0000000000000000  0000000000000000  0000014c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        0000000c  0000000000000000  0000000000000000  00000178  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        0000000c  0000000000000000  0000000000000000  000001d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        0000000c  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000cac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .group        00000008  0000000000000000  0000000000000000  00000cc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
398 .group        00000008  0000000000000000  0000000000000000  00000ccc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
399 .group        00000008  0000000000000000  0000000000000000  00000cd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
400 .group        00000008  0000000000000000  0000000000000000  00000cdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
401 .group        00000008  0000000000000000  0000000000000000  00000ce4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
402 .group        00000008  0000000000000000  0000000000000000  00000cec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
403 .group        00000008  0000000000000000  0000000000000000  00000cf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
404 .group        00000008  0000000000000000  0000000000000000  00000cfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
405 .group        00000008  0000000000000000  0000000000000000  00000d04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
406 .group        00000008  0000000000000000  0000000000000000  00000d0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
407 .group        00000008  0000000000000000  0000000000000000  00000d14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
408 .group        00000008  0000000000000000  0000000000000000  00000d1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
409 .group        00000008  0000000000000000  0000000000000000  00000d24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
410 .group        00000008  0000000000000000  0000000000000000  00000d2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
411 .group        00000008  0000000000000000  0000000000000000  00000d34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
412 .text         00007d54  0000000000000000  0000000000000000  00000d3c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .data         00000000  0000000000000000  0000000000000000  00008a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
414 .bss          00000000  0000000000000000  0000000000000000  00008a90  2**0
                  ALLOC
415 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008a90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008aa2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
417 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008ab1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
418 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008ab8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
419 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00008ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
420 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00008ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
421 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00008af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
422 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00008b0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
423 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00008b2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008b6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00008bb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .rodata       0000061c  0000000000000000  0000000000000000  00008be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
427 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00009204  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009268  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000092cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  000092dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
431 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  000092f0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  0000930e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00009342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
434 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00009356  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  000093b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
436 .text._ZN10QByteArrayC2ERKS_ 00000030  0000000000000000  0000000000000000  00009426  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  00009456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000947e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  000094fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009574  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000959a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
442 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  000095c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
443 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  000095d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
444 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  0000961e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  00009646  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  0000966b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  000096d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00009720  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  000097b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
450 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  000097ca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
451 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  0000985e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
452 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009874  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  0000989a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
454 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  000098ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  000098cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
456 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  000098ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
457 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  0000997c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
458 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009990  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  000099e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009a10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009a9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009aba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009aee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009b64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009bb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00009c3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
467 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00009c4c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00009d06  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
469 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00009d21  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00009dab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
471 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00009dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
472 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00009dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00009dda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00009e24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00009e3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00009e78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00009ecc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00009eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  00009f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00009f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
481 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00009f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  00009f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
483 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  00009fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  00009fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
485 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  00009fcc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  00009fe8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a00e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a054  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a07e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
491 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a08c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a0ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a0da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
494 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a0ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
495 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a12e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
496 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a158  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  0000a19e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  0000a25c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
499 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
500 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a2cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a324  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a396  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN11QDataStreamlsEh 00000028  0000000000000000  0000000000000000  0000a3b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .gcc_except_table 00001204  0000000000000000  0000000000000000  0000a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
505 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000b5e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000b600  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000b62a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000b646  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000b702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
510 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000b71c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000b736  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
512 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000b750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000b76a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
514 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b78c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b797  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000b7bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000b7d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b7f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b7fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000b820  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000b848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000b854  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000b87e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000b8e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000ba02  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000bae0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000bb80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000bcac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
529 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000bcc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000bd26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000bd62  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000be6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
533 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000be7a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000bea4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000bf0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
536 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000bf22  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000bf62  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000bfa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
539 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000bfc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000bfe4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZN4QMapI7QStringhE4takeERKS0_ 0000006b  0000000000000000  0000000000000000  0000c002  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN4QMapIhhE4takeERKh 0000006b  0000000000000000  0000000000000000  0000c06e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZN5QListI10QByteArrayE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000c0da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000c1f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c370  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000c4e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
548 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000c66a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000c69e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
550 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c6d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
551 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000c6f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
552 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c714  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000c732  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000c760  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000c8d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000c932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
557 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000c950  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c9b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
559 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000c9d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000c9ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
561 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000ca00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
562 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000ca1a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
563 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000ca4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000ca68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000cada  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000cb2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
567 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000cb48  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000cb88  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000cc94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
570 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000ccaa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000cd0c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000cd64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
573 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000cd86  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
574 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000cdb2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
575 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000cdd4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000cdf6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000ce80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000cee6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
579 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000cff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZN5QHashI7QString11QStringListE4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000d008  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
581 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d15d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d1a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
584 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000d202  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
585 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000d3d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
586 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000d440  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
587 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000d460  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000d52a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000d550  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
590 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000d56a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
591 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000d590  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
592 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000d5ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
593 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000d614  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
594 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000d646  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000d780  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000d842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
597 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d85c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
598 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000d8ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
599 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d8e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000d902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d910  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
602 .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000d93e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE 00000036  0000000000000000  0000000000000000  0000d9be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
604 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d9f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZNK8QMapDataIhhE8findNodeERKh 00000080  0000000000000000  0000000000000000  0000da22  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE 00000026  0000000000000000  0000000000000000  0000daa2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN5QListI10QByteArrayE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000dac8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000dc9e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
609 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000dd06  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
610 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000dd26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
611 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000dd54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
612 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000dd66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
613 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000dd78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
614 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000dd8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
615 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000dd9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
616 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000ddb6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000deea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
618 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000defc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
619 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000df0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
620 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000df20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
621 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000df32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
622 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000df4c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000e03c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
624 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000e04e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
625 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
626 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
627 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
628 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000e0a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
629 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000e0c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
631 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000e16c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000e18a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e1c6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000e246  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000e274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
636 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000e286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
637 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
638 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e2aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
639 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000e2bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
640 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000e2d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000e3c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000e3fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000e460  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000e4a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000e4d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000e502  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000e63c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000e6fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
649 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000e718  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
650 .text._ZNK5QHashI7QString11QStringListE7isEmptyEv 00000019  0000000000000000  0000000000000000  0000e726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
651 .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E 00000035  0000000000000000  0000000000000000  0000e740  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
652 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e776  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
653 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000e7aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
654 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000e7d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
655 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000e807  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
656 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e82c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e8a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
658 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e8f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
659 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000e942  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e9c8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000e9fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
662 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ea24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
663 .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000eacc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
664 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000eb44  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
665 .text._ZN8QMapNodeIhhE10lowerBoundERKh 00000077  0000000000000000  0000000000000000  0000ebec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
666 .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000ec64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
667 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ed2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
668 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000edd6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000edf0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
670 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ee68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
671 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000ef10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
672 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000ef72  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
673 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000ef92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
674 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000efb6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
675 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000f032  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
676 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000f07a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
677 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000f0cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
678 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000f152  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
679 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000f1a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
680 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000f1c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
681 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000f1fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
682 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000f288  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
683 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000f2dc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
684 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000f300  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
685 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000f32a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
686 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000f3fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
687 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000f406  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
688 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000f51a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
689 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000f57b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
690 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000f586  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
691 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000f69a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
692 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000f6fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
693 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000f706  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
694 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000f81a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
695 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000f87b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
696 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000f886  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
697 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000f999  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
698 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000f9a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
699 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000fa34  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
700 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000fa5d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
701 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000fa6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
702 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000face  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
703 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000fada  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
704 .debug_info   00024f04  0000000000000000  0000000000000000  0000fb4b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_abbrev 00000cc9  0000000000000000  0000000000000000  00034a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
706 .debug_aranges 000011b0  0000000000000000  0000000000000000  00035718  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_ranges 00001730  0000000000000000  0000000000000000  000368c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  00000d47  0000000000000000  0000000000000000  00037ff8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  0000061c  0000000000000000  0000000000000000  00038d3f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  00000022  0000000000000000  0000000000000000  0003935b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  00000136  0000000000000000  0000000000000000  0003937d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  00000010  0000000000000000  0000000000000000  000394b3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000275  0000000000000000  0000000000000000  000394c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  0000016f  0000000000000000  0000000000000000  00039738  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  00000016  0000000000000000  0000000000000000  000398a7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000035  0000000000000000  0000000000000000  000398bd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  00000058  0000000000000000  0000000000000000  000398f2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  000005b4  0000000000000000  0000000000000000  0003994a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  0000016d  0000000000000000  0000000000000000  00039efe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  00000016  0000000000000000  0000000000000000  0003a06b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  0000009a  0000000000000000  0000000000000000  0003a081  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  00000016  0000000000000000  0000000000000000  0003a11b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000018  0000000000000000  0000000000000000  0003a131  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000032  0000000000000000  0000000000000000  0003a149  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  000000c0  0000000000000000  0000000000000000  0003a17b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  00000028  0000000000000000  0000000000000000  0003a23b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  00000012  0000000000000000  0000000000000000  0003a263  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  000000cf  0000000000000000  0000000000000000  0003a275  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  0000001c  0000000000000000  0000000000000000  0003a344  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  00000018  0000000000000000  0000000000000000  0003a360  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  0000006e  0000000000000000  0000000000000000  0003a378  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  00000082  0000000000000000  0000000000000000  0003a3e6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  00000012  0000000000000000  0000000000000000  0003a468  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  00000012  0000000000000000  0000000000000000  0003a47a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  00000016  0000000000000000  0000000000000000  0003a48c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  00000035  0000000000000000  0000000000000000  0003a4a2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000052  0000000000000000  0000000000000000  0003a4d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  0000004c  0000000000000000  0000000000000000  0003a529  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  0000001c  0000000000000000  0000000000000000  0003a575  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  00000028  0000000000000000  0000000000000000  0003a591  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  0000005e  0000000000000000  0000000000000000  0003a5b9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  000000e2  0000000000000000  0000000000000000  0003a617  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000010  0000000000000000  0000000000000000  0003a6f9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  0000004c  0000000000000000  0000000000000000  0003a709  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  00000022  0000000000000000  0000000000000000  0003a755  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  00000068  0000000000000000  0000000000000000  0003a777  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  0000007f  0000000000000000  0000000000000000  0003a7df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  0000003a  0000000000000000  0000000000000000  0003a85e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  00000019  0000000000000000  0000000000000000  0003a898  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000020  0000000000000000  0000000000000000  0003a8b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  00000022  0000000000000000  0000000000000000  0003a8d1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  00000010  0000000000000000  0000000000000000  0003a8f3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000016  0000000000000000  0000000000000000  0003a903  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000028  0000000000000000  0000000000000000  0003a919  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000010  0000000000000000  0000000000000000  0003a941  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000046  0000000000000000  0000000000000000  0003a951  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  0000001c  0000000000000000  0000000000000000  0003a997  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000020  0000000000000000  0000000000000000  0003a9b3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  0000005a  0000000000000000  0000000000000000  0003a9d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000010  0000000000000000  0000000000000000  0003aa2d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000010  0000000000000000  0000000000000000  0003aa3d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  000000e4  0000000000000000  0000000000000000  0003aa4d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  0000025a  0000000000000000  0000000000000000  0003ab31  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  0000002d  0000000000000000  0000000000000000  0003ad8b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000016  0000000000000000  0000000000000000  0003adb8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000050  0000000000000000  0000000000000000  0003adce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000019  0000000000000000  0000000000000000  0003ae1e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  00000011  0000000000000000  0000000000000000  0003ae37  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  0000014b  0000000000000000  0000000000000000  0003ae48  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  0000001e  0000000000000000  0000000000000000  0003af93  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  0000001c  0000000000000000  0000000000000000  0003afb1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000024  0000000000000000  0000000000000000  0003afcd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  00000016  0000000000000000  0000000000000000  0003aff1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  00000018  0000000000000000  0000000000000000  0003b007  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000019  0000000000000000  0000000000000000  0003b01f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000058  0000000000000000  0000000000000000  0003b038  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000016  0000000000000000  0000000000000000  0003b090  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  0000001c  0000000000000000  0000000000000000  0003b0a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000016  0000000000000000  0000000000000000  0003b0c2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000022  0000000000000000  0000000000000000  0003b0d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  00000043  0000000000000000  0000000000000000  0003b0fa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  0000003c  0000000000000000  0000000000000000  0003b13d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  00000173  0000000000000000  0000000000000000  0003b179  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000012  0000000000000000  0000000000000000  0003b2ec  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  00000010  0000000000000000  0000000000000000  0003b2fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  00000058  0000000000000000  0000000000000000  0003b30e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  000000b4  0000000000000000  0000000000000000  0003b366  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  00000016  0000000000000000  0000000000000000  0003b41a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000010  0000000000000000  0000000000000000  0003b430  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000037  0000000000000000  0000000000000000  0003b440  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  00000058  0000000000000000  0000000000000000  0003b477  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  00000011  0000000000000000  0000000000000000  0003b4cf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  00000016  0000000000000000  0000000000000000  0003b4e0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000010  0000000000000000  0000000000000000  0003b4f6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  00000010  0000000000000000  0000000000000000  0003b506  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000022  0000000000000000  0000000000000000  0003b516  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  00000122  0000000000000000  0000000000000000  0003b538  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  0000008e  0000000000000000  0000000000000000  0003b65a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000016  0000000000000000  0000000000000000  0003b6e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000058  0000000000000000  0000000000000000  0003b6fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  000000fa  0000000000000000  0000000000000000  0003b756  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000030  0000000000000000  0000000000000000  0003b850  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  000000c1  0000000000000000  0000000000000000  0003b880  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  0000004d  0000000000000000  0000000000000000  0003b941  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  00000010  0000000000000000  0000000000000000  0003b98e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  00000019  0000000000000000  0000000000000000  0003b99e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  00000020  0000000000000000  0000000000000000  0003b9b7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  00000018  0000000000000000  0000000000000000  0003b9d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_macro  00000023  0000000000000000  0000000000000000  0003b9ef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_macro  00000010  0000000000000000  0000000000000000  0003ba12  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
811 .debug_macro  00000016  0000000000000000  0000000000000000  0003ba22  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
812 .debug_macro  00000076  0000000000000000  0000000000000000  0003ba38  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
813 .debug_macro  00000016  0000000000000000  0000000000000000  0003baae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
814 .debug_macro  00000025  0000000000000000  0000000000000000  0003bac4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
815 .debug_macro  000000de  0000000000000000  0000000000000000  0003bae9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
816 .debug_macro  0000001c  0000000000000000  0000000000000000  0003bbc7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
817 .debug_macro  00000058  0000000000000000  0000000000000000  0003bbe3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
818 .debug_macro  00000088  0000000000000000  0000000000000000  0003bc3b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
819 .debug_macro  00000076  0000000000000000  0000000000000000  0003bcc3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
820 .debug_macro  00000010  0000000000000000  0000000000000000  0003bd39  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
821 .debug_macro  00000041  0000000000000000  0000000000000000  0003bd49  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
822 .debug_macro  000000ee  0000000000000000  0000000000000000  0003bd8a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
823 .debug_macro  000000fc  0000000000000000  0000000000000000  0003be78  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
824 .debug_macro  00000010  0000000000000000  0000000000000000  0003bf74  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
825 .debug_macro  000000e5  0000000000000000  0000000000000000  0003bf84  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
826 .debug_macro  00000012  0000000000000000  0000000000000000  0003c069  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
827 .debug_macro  00000016  0000000000000000  0000000000000000  0003c07b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
828 .debug_macro  00000022  0000000000000000  0000000000000000  0003c091  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
829 .debug_macro  00000016  0000000000000000  0000000000000000  0003c0b3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
830 .debug_macro  00000028  0000000000000000  0000000000000000  0003c0c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
831 .debug_macro  00000216  0000000000000000  0000000000000000  0003c0f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
832 .debug_macro  00000046  0000000000000000  0000000000000000  0003c307  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
833 .debug_macro  0000002e  0000000000000000  0000000000000000  0003c34d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
834 .debug_macro  00000027  0000000000000000  0000000000000000  0003c37b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
835 .debug_macro  0000001f  0000000000000000  0000000000000000  0003c3a2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
836 .debug_macro  00000016  0000000000000000  0000000000000000  0003c3c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
837 .debug_macro  00000010  0000000000000000  0000000000000000  0003c3d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
838 .debug_macro  00000126  0000000000000000  0000000000000000  0003c3e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
839 .debug_line   00004868  0000000000000000  0000000000000000  0003c50d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
840 .debug_str    0003bc5f  0000000000000000  0000000000000000  00040d75  2**0
                  CONTENTS, READONLY, DEBUGGING
841 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  0007c9d8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
842 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  0007c9e0  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
843 .comment      0000002e  0000000000000000  0000000000000000  0007c9e8  2**0
                  CONTENTS, READONLY
844 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0007ca16  2**0
                  CONTENTS, READONLY
845 .eh_frame     00002968  0000000000000000  0000000000000000  0007ca18  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhP13varParameters>:

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	41 57                	push   %r15
     322:	41 56                	push   %r14
     324:	41 55                	push   %r13
     326:	41 54                	push   %r12
     328:	53                   	push   %rbx
     329:	48 83 ec 68          	sub    $0x68,%rsp
     32d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     331:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     335:	89 c8                	mov    %ecx,%eax
     337:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
     33e:	88 95 7c ff ff ff    	mov    %dl,-0x84(%rbp)
     344:	88 85 78 ff ff ff    	mov    %al,-0x88(%rbp)
     34a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     351:	00 00 
     353:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
     357:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     359:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     35d:	48 89 c7             	mov    %rax,%rdi
     360:	e8 00 00 00 00       	callq  365 <_ZN6Parser12packVariableEhhP13varParameters+0x49>
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     365:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     369:	be 02 00 00 00       	mov    $0x2,%esi
     36e:	48 89 c7             	mov    %rax,%rdi
     371:	e8 00 00 00 00       	callq  376 <_ZN6Parser12packVariableEhhP13varParameters+0x5a>
     376:	8b 55 90             	mov    -0x70(%rbp),%edx
     379:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
     37d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     381:	48 89 ce             	mov    %rcx,%rsi
     384:	48 89 c7             	mov    %rax,%rdi
     387:	e8 00 00 00 00       	callq  38c <_ZN6Parser12packVariableEhhP13varParameters+0x70>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
     38c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     393:	48 83 c0 06          	add    $0x6,%rax
     397:	48 85 c0             	test   %rax,%rax
     39a:	0f 95 c0             	setne  %al
     39d:	0f b6 d8             	movzbl %al,%ebx
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
     3a0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3a7:	48 83 c0 04          	add    $0x4,%rax
     3ab:	48 85 c0             	test   %rax,%rax
     3ae:	0f 95 c0             	setne  %al
     3b1:	44 0f b6 e0          	movzbl %al,%r12d
QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
     3b5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3bc:	48 83 c0 02          	add    $0x2,%rax
     3c0:	48 85 c0             	test   %rax,%rax
     3c3:	0f 95 c0             	setne  %al
     3c6:	44 0f b6 e8          	movzbl %al,%r13d

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
     3ca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3d1:	48 85 c0             	test   %rax,%rax
     3d4:	0f 95 c0             	setne  %al
     3d7:	44 0f b6 f0          	movzbl %al,%r14d
     3db:	44 0f b6 bd 78 ff ff 	movzbl -0x88(%rbp),%r15d
     3e2:	ff 
     3e3:	0f b6 95 7c ff ff ff 	movzbl -0x84(%rbp),%edx
     3ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3ee:	89 d6                	mov    %edx,%esi
     3f0:	48 89 c7             	mov    %rax,%rdi
     3f3:	e8 00 00 00 00       	callq  3f8 <_ZN6Parser12packVariableEhhP13varParameters+0xdc>
     3f8:	44 89 fe             	mov    %r15d,%esi
     3fb:	48 89 c7             	mov    %rax,%rdi
     3fe:	e8 00 00 00 00       	callq  403 <_ZN6Parser12packVariableEhhP13varParameters+0xe7>
     403:	44 89 f6             	mov    %r14d,%esi
     406:	48 89 c7             	mov    %rax,%rdi
     409:	e8 00 00 00 00       	callq  40e <_ZN6Parser12packVariableEhhP13varParameters+0xf2>
                              << &VP->eventSET
     40e:	44 89 ee             	mov    %r13d,%esi
     411:	48 89 c7             	mov    %rax,%rdi
     414:	e8 00 00 00 00       	callq  419 <_ZN6Parser12packVariableEhhP13varParameters+0xfd>
                              << &VP->eventZERO
     419:	44 89 e6             	mov    %r12d,%esi
     41c:	48 89 c7             	mov    %rax,%rdi
     41f:	e8 00 00 00 00       	callq  424 <_ZN6Parser12packVariableEhhP13varParameters+0x108>
                              << &VP->eventCHANGE;
     424:	89 de                	mov    %ebx,%esi
     426:	48 89 c7             	mov    %rax,%rdi
     429:	e8 00 00 00 00       	callq  42e <_ZN6Parser12packVariableEhhP13varParameters+0x112>
    return result;
     42e:	90                   	nop
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     42f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     433:	48 89 c7             	mov    %rax,%rdi
     436:	e8 00 00 00 00       	callq  43b <_ZN6Parser12packVariableEhhP13varParameters+0x11f>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
    return result;
     43b:	eb 2b                	jmp    468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     43d:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     440:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     444:	48 89 c7             	mov    %rax,%rdi
     447:	e8 00 00 00 00       	callq  44c <_ZN6Parser12packVariableEhhP13varParameters+0x130>
     44c:	eb 03                	jmp    451 <_ZN6Parser12packVariableEhhP13varParameters+0x135>
     44e:	48 89 c3             	mov    %rax,%rbx
     451:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     455:	48 89 c7             	mov    %rax,%rdi
     458:	e8 00 00 00 00       	callq  45d <_ZN6Parser12packVariableEhhP13varParameters+0x141>
     45d:	48 89 d8             	mov    %rbx,%rax
     460:	48 89 c7             	mov    %rax,%rdi
     463:	e8 00 00 00 00       	callq  468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     * It is able to compile        - ok
     * Data stream                  - ok
     * var Parameters as argument   - ok
     * return result                - ok
     */
}
     468:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     46c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
     470:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     477:	00 00 
     479:	74 05                	je     480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     47b:	e8 00 00 00 00       	callq  480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     480:	48 83 c4 68          	add    $0x68,%rsp
     484:	5b                   	pop    %rbx
     485:	41 5c                	pop    %r12
     487:	41 5d                	pop    %r13
     489:	41 5e                	pop    %r14
     48b:	41 5f                	pop    %r15
     48d:	5d                   	pop    %rbp
     48e:	c3                   	retq   
     48f:	90                   	nop

0000000000000490 <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     490:	55                   	push   %rbp
     491:	48 89 e5             	mov    %rsp,%rbp
     494:	53                   	push   %rbx
     495:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
     49c:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
     4a3:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
     4aa:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
     4b1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     4b8:	00 00 
     4ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     4be:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     4c0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     4cf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     4de:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     4e5:	48 89 c7             	mov    %rax,%rdi
     4e8:	e8 00 00 00 00       	callq  4ed <_ZN6Parser16compileVariablesEP11QStringList+0x5d>
    QStringList       code = *str;
     4ed:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
     4f4:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     4fb:	48 89 d6             	mov    %rdx,%rsi
     4fe:	48 89 c7             	mov    %rax,%rdi
     501:	e8 00 00 00 00       	callq  506 <_ZN6Parser16compileVariablesEP11QStringList+0x76>

    // копирование из checkVariables

    int varCount      = 0;
     506:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%rbp)
     50d:	00 00 00 
    int index         = 0;
     510:	c7 85 ac fd ff ff 00 	movl   $0x0,-0x254(%rbp)
     517:	00 00 00 

    VarTypes VT;
     51a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     521:	48 89 c7             	mov    %rax,%rdi
     524:	e8 00 00 00 00       	callq  529 <_ZN6Parser16compileVariablesEP11QStringList+0x99>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     529:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     530:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     537:	48 89 d6             	mov    %rdx,%rsi
     53a:	48 89 c7             	mov    %rax,%rdi
     53d:	e8 00 00 00 00       	callq  542 <_ZN6Parser16compileVariablesEP11QStringList+0xb2>
     542:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     549:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     550:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 557 <_ZN6Parser16compileVariablesEP11QStringList+0xc7>
     557:	48 89 ce             	mov    %rcx,%rsi
     55a:	48 89 c7             	mov    %rax,%rdi
     55d:	e8 00 00 00 00       	callq  562 <_ZN6Parser16compileVariablesEP11QStringList+0xd2>
     562:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     569:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     570:	b9 00 00 00 00       	mov    $0x0,%ecx
     575:	ba 01 00 00 00       	mov    $0x1,%edx
     57a:	48 89 c7             	mov    %rax,%rdi
     57d:	e8 00 00 00 00       	callq  582 <_ZN6Parser16compileVariablesEP11QStringList+0xf2>
     582:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     589:	48 89 c7             	mov    %rax,%rdi
     58c:	e8 00 00 00 00       	callq  591 <_ZN6Parser16compileVariablesEP11QStringList+0x101>
     591:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     598:	48 89 c7             	mov    %rax,%rdi
     59b:	e8 00 00 00 00       	callq  5a0 <_ZN6Parser16compileVariablesEP11QStringList+0x110>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     5a0:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     5a7:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     5ae:	48 89 d6             	mov    %rdx,%rsi
     5b1:	48 89 c7             	mov    %rax,%rdi
     5b4:	e8 00 00 00 00       	callq  5b9 <_ZN6Parser16compileVariablesEP11QStringList+0x129>
     5b9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     5c0:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     5c7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5ce <_ZN6Parser16compileVariablesEP11QStringList+0x13e>
     5ce:	48 89 ce             	mov    %rcx,%rsi
     5d1:	48 89 c7             	mov    %rax,%rdi
     5d4:	e8 00 00 00 00       	callq  5d9 <_ZN6Parser16compileVariablesEP11QStringList+0x149>
     5d9:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     5e0:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     5e7:	b9 00 00 00 00       	mov    $0x0,%ecx
     5ec:	ba 01 00 00 00       	mov    $0x1,%edx
     5f1:	48 89 c7             	mov    %rax,%rdi
     5f4:	e8 00 00 00 00       	callq  5f9 <_ZN6Parser16compileVariablesEP11QStringList+0x169>
     5f9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     600:	48 89 c7             	mov    %rax,%rdi
     603:	e8 00 00 00 00       	callq  608 <_ZN6Parser16compileVariablesEP11QStringList+0x178>
     608:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     60f:	48 89 c7             	mov    %rax,%rdi
     612:	e8 00 00 00 00       	callq  617 <_ZN6Parser16compileVariablesEP11QStringList+0x187>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     617:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     61e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 625 <_ZN6Parser16compileVariablesEP11QStringList+0x195>
     625:	48 89 c7             	mov    %rax,%rdi
     628:	e8 00 00 00 00       	callq  62d <_ZN6Parser16compileVariablesEP11QStringList+0x19d>
     62d:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
     634:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     63b:	b9 00 00 00 00       	mov    $0x0,%ecx
     640:	ba 01 00 00 00       	mov    $0x1,%edx
     645:	48 89 c7             	mov    %rax,%rdi
     648:	e8 00 00 00 00       	callq  64d <_ZN6Parser16compileVariablesEP11QStringList+0x1bd>
     64d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     654:	48 89 c7             	mov    %rax,%rdi
     657:	e8 00 00 00 00       	callq  65c <_ZN6Parser16compileVariablesEP11QStringList+0x1cc>
    QRegExp erxVarName("\\w+");                              // имя
     65c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     663:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 66a <_ZN6Parser16compileVariablesEP11QStringList+0x1da>
     66a:	48 89 c7             	mov    %rax,%rdi
     66d:	e8 00 00 00 00       	callq  672 <_ZN6Parser16compileVariablesEP11QStringList+0x1e2>
     672:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
     679:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     680:	b9 00 00 00 00       	mov    $0x0,%ecx
     685:	ba 01 00 00 00       	mov    $0x1,%edx
     68a:	48 89 c7             	mov    %rax,%rdi
     68d:	e8 00 00 00 00       	callq  692 <_ZN6Parser16compileVariablesEP11QStringList+0x202>
     692:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     699:	48 89 c7             	mov    %rax,%rdi
     69c:	e8 00 00 00 00       	callq  6a1 <_ZN6Parser16compileVariablesEP11QStringList+0x211>

    QStringList types;
     6a1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     6a8:	48 89 c7             	mov    %rax,%rdi
     6ab:	e8 00 00 00 00       	callq  6b0 <_ZN6Parser16compileVariablesEP11QStringList+0x220>
    QStringList list;
     6b0:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     6b7:	48 89 c7             	mov    %rax,%rdi
     6ba:	e8 00 00 00 00       	callq  6bf <_ZN6Parser16compileVariablesEP11QStringList+0x22f>
    QStringList vars;
     6bf:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     6c6:	48 89 c7             	mov    %rax,%rdi
     6c9:	e8 00 00 00 00       	callq  6ce <_ZN6Parser16compileVariablesEP11QStringList+0x23e>

    int pos = 0;
     6ce:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%rbp)
     6d5:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     6d8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6df:	48 89 c7             	mov    %rax,%rdi
     6e2:	e8 00 00 00 00       	callq  6e7 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
    for(sit = code.begin(); sit != code.end(); ++sit){
     6e7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     6ee:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     6f5:	48 89 d6             	mov    %rdx,%rsi
     6f8:	48 89 c7             	mov    %rax,%rdi
     6fb:	e8 00 00 00 00       	callq  700 <_ZN6Parser16compileVariablesEP11QStringList+0x270>
     700:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
     707:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
     70e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     715:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     71c:	48 89 d6             	mov    %rdx,%rsi
     71f:	48 89 c7             	mov    %rax,%rdi
     722:	e8 00 00 00 00       	callq  727 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     727:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     72e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     735:	48 89 d6             	mov    %rdx,%rsi
     738:	48 89 c7             	mov    %rax,%rdi
     73b:	e8 00 00 00 00       	callq  740 <_ZN6Parser16compileVariablesEP11QStringList+0x2b0>
     740:	84 c0                	test   %al,%al
     742:	0f 84 9b 01 00 00    	je     8e3 <_ZN6Parser16compileVariablesEP11QStringList+0x453>
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
     748:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     74f:	48 89 c7             	mov    %rax,%rdi
     752:	e8 00 00 00 00       	callq  757 <_ZN6Parser16compileVariablesEP11QStringList+0x2c7>
     757:	48 89 c6             	mov    %rax,%rsi
     75a:	8b 95 a4 fd ff ff    	mov    -0x25c(%rbp),%edx
     760:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     767:	b9 00 00 00 00       	mov    $0x0,%ecx
     76c:	48 89 c7             	mov    %rax,%rdi
     76f:	e8 00 00 00 00       	callq  774 <_ZN6Parser16compileVariablesEP11QStringList+0x2e4>
     774:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%rbp)
     77a:	83 bd a4 fd ff ff ff 	cmpl   $0xffffffff,-0x25c(%rbp)
     781:	0f 95 c0             	setne  %al
     784:	84 c0                	test   %al,%al
     786:	0f 84 43 01 00 00    	je     8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
             types << erx.cap(1);
     78c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     793:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     79a:	ba 01 00 00 00       	mov    $0x1,%edx
     79f:	48 89 ce             	mov    %rcx,%rsi
     7a2:	48 89 c7             	mov    %rax,%rdi
     7a5:	e8 00 00 00 00       	callq  7aa <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     7aa:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     7b1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     7b8:	48 89 d6             	mov    %rdx,%rsi
     7bb:	48 89 c7             	mov    %rax,%rdi
     7be:	e8 00 00 00 00       	callq  7c3 <_ZN6Parser16compileVariablesEP11QStringList+0x333>
     7c3:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7ca:	48 89 c7             	mov    %rax,%rdi
     7cd:	e8 00 00 00 00       	callq  7d2 <_ZN6Parser16compileVariablesEP11QStringList+0x342>
             list << erx.cap(2);
     7d2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     7d9:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     7e0:	ba 02 00 00 00       	mov    $0x2,%edx
     7e5:	48 89 ce             	mov    %rcx,%rsi
     7e8:	48 89 c7             	mov    %rax,%rdi
     7eb:	e8 00 00 00 00       	callq  7f0 <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     7f0:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     7f7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     7fe:	48 89 d6             	mov    %rdx,%rsi
     801:	48 89 c7             	mov    %rax,%rdi
     804:	e8 00 00 00 00       	callq  809 <_ZN6Parser16compileVariablesEP11QStringList+0x379>
     809:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     810:	48 89 c7             	mov    %rax,%rdi
     813:	e8 00 00 00 00       	callq  818 <_ZN6Parser16compileVariablesEP11QStringList+0x388>
             pos += erx.matchedLength();
     818:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     81f:	48 89 c7             	mov    %rax,%rdi
     822:	e8 00 00 00 00       	callq  827 <_ZN6Parser16compileVariablesEP11QStringList+0x397>
     827:	01 85 a4 fd ff ff    	add    %eax,-0x25c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     82d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     834:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 83b <_ZN6Parser16compileVariablesEP11QStringList+0x3ab>
     83b:	48 89 c7             	mov    %rax,%rdi
     83e:	e8 00 00 00 00       	callq  843 <_ZN6Parser16compileVariablesEP11QStringList+0x3b3>
     843:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     84a:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     851:	ba 02 00 00 00       	mov    $0x2,%edx
     856:	48 89 ce             	mov    %rcx,%rsi
     859:	48 89 c7             	mov    %rax,%rdi
     85c:	e8 00 00 00 00       	callq  861 <_ZN6Parser16compileVariablesEP11QStringList+0x3d1>
     861:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     868:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
     86f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
     876:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     87c:	b9 00 00 00 00       	mov    $0x0,%ecx
     881:	48 89 c7             	mov    %rax,%rdi
     884:	e8 00 00 00 00       	callq  889 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     889:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     890:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     897:	48 89 d6             	mov    %rdx,%rsi
     89a:	48 89 c7             	mov    %rax,%rdi
     89d:	e8 00 00 00 00       	callq  8a2 <_ZN6Parser16compileVariablesEP11QStringList+0x412>
     8a2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     8a9:	48 89 c7             	mov    %rax,%rdi
     8ac:	e8 00 00 00 00       	callq  8b1 <_ZN6Parser16compileVariablesEP11QStringList+0x421>
     8b1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8b8:	48 89 c7             	mov    %rax,%rdi
     8bb:	e8 00 00 00 00       	callq  8c0 <_ZN6Parser16compileVariablesEP11QStringList+0x430>
     8c0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     8c7:	48 89 c7             	mov    %rax,%rdi
     8ca:	e8 00 00 00 00       	callq  8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
     8cf:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     8d6:	48 89 c7             	mov    %rax,%rdi
     8d9:	e8 00 00 00 00       	callq  8de <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
     8de:	e9 2b fe ff ff       	jmpq   70e <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     8e3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     8ea:	48 89 c7             	mov    %rax,%rdi
     8ed:	e8 00 00 00 00       	callq  8f2 <_ZN6Parser16compileVariablesEP11QStringList+0x462>
    QString name, type, value;
     8f2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     8f9:	48 89 c7             	mov    %rax,%rdi
     8fc:	e8 00 00 00 00       	callq  901 <_ZN6Parser16compileVariablesEP11QStringList+0x471>
     901:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     908:	48 89 c7             	mov    %rax,%rdi
     90b:	e8 00 00 00 00       	callq  910 <_ZN6Parser16compileVariablesEP11QStringList+0x480>
     910:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     917:	48 89 c7             	mov    %rax,%rdi
     91a:	e8 00 00 00 00       	callq  91f <_ZN6Parser16compileVariablesEP11QStringList+0x48f>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;
     91f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     923:	48 89 c7             	mov    %rax,%rdi
     926:	e8 00 00 00 00       	callq  92b <_ZN6Parser16compileVariablesEP11QStringList+0x49b>

    for(it=vars.begin(); it!=vars.end(); ++it){
     92b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     92f:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     936:	48 89 d6             	mov    %rdx,%rsi
     939:	48 89 c7             	mov    %rax,%rdi
     93c:	e8 00 00 00 00       	callq  941 <_ZN6Parser16compileVariablesEP11QStringList+0x4b1>
     941:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     945:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
     94c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     950:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     957:	48 89 d6             	mov    %rdx,%rsi
     95a:	48 89 c7             	mov    %rax,%rdi
     95d:	e8 00 00 00 00       	callq  962 <_ZN6Parser16compileVariablesEP11QStringList+0x4d2>
     962:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     966:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     96d:	48 89 d6             	mov    %rdx,%rsi
     970:	48 89 c7             	mov    %rax,%rdi
     973:	e8 00 00 00 00       	callq  978 <_ZN6Parser16compileVariablesEP11QStringList+0x4e8>
     978:	84 c0                	test   %al,%al
     97a:	0f 84 f3 01 00 00    	je     b73 <_ZN6Parser16compileVariablesEP11QStringList+0x6e3>
        QString all = *it;
     980:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     987:	48 89 c7             	mov    %rax,%rdi
     98a:	e8 00 00 00 00       	callq  98f <_ZN6Parser16compileVariablesEP11QStringList+0x4ff>
     98f:	48 89 c2             	mov    %rax,%rdx
     992:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     996:	48 89 d6             	mov    %rdx,%rsi
     999:	48 89 c7             	mov    %rax,%rdi
     99c:	e8 00 00 00 00       	callq  9a1 <_ZN6Parser16compileVariablesEP11QStringList+0x511>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     9a1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9a8:	48 89 c7             	mov    %rax,%rdi
     9ab:	e8 00 00 00 00       	callq  9b0 <_ZN6Parser16compileVariablesEP11QStringList+0x520>
     9b0:	48 89 c6             	mov    %rax,%rsi
     9b3:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     9ba:	b9 00 00 00 00       	mov    $0x0,%ecx
     9bf:	ba 00 00 00 00       	mov    $0x0,%edx
     9c4:	48 89 c7             	mov    %rax,%rdi
     9c7:	e8 00 00 00 00       	callq  9cc <_ZN6Parser16compileVariablesEP11QStringList+0x53c>
     9cc:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%rbp)

        int indexVarName = erxVarName.indexIn(*it);
     9d2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9d9:	48 89 c7             	mov    %rax,%rdi
     9dc:	e8 00 00 00 00       	callq  9e1 <_ZN6Parser16compileVariablesEP11QStringList+0x551>
     9e1:	48 89 c6             	mov    %rax,%rsi
     9e4:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     9eb:	b9 00 00 00 00       	mov    $0x0,%ecx
     9f0:	ba 00 00 00 00       	mov    $0x0,%edx
     9f5:	48 89 c7             	mov    %rax,%rdi
     9f8:	e8 00 00 00 00       	callq  9fd <_ZN6Parser16compileVariablesEP11QStringList+0x56d>
     9fd:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     a03:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     a0a:	48 89 c7             	mov    %rax,%rdi
     a0d:	e8 00 00 00 00       	callq  a12 <_ZN6Parser16compileVariablesEP11QStringList+0x582>
     a12:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%rbp)
        int countVarName = erxVarName.captureCount();
     a18:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     a1f:	48 89 c7             	mov    %rax,%rdi
     a22:	e8 00 00 00 00       	callq  a27 <_ZN6Parser16compileVariablesEP11QStringList+0x597>
     a27:	89 85 bc fd ff ff    	mov    %eax,-0x244(%rbp)

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     a2d:	83 bd b0 fd ff ff 00 	cmpl   $0x0,-0x250(%rbp)
     a34:	78 3f                	js     a75 <_ZN6Parser16compileVariablesEP11QStringList+0x5e5>
     a36:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a3a:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     a41:	ba 01 00 00 00       	mov    $0x1,%edx
     a46:	48 89 ce             	mov    %rcx,%rsi
     a49:	48 89 c7             	mov    %rax,%rdi
     a4c:	e8 00 00 00 00       	callq  a51 <_ZN6Parser16compileVariablesEP11QStringList+0x5c1>
     a51:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     a55:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a5c:	48 89 d6             	mov    %rdx,%rsi
     a5f:	48 89 c7             	mov    %rax,%rdi
     a62:	e8 00 00 00 00       	callq  a67 <_ZN6Parser16compileVariablesEP11QStringList+0x5d7>
     a67:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a6b:	48 89 c7             	mov    %rax,%rdi
     a6e:	e8 00 00 00 00       	callq  a73 <_ZN6Parser16compileVariablesEP11QStringList+0x5e3>
     a73:	eb 3d                	jmp    ab2 <_ZN6Parser16compileVariablesEP11QStringList+0x622>
        }else{name = erxVarName.cap(0);}
     a75:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a79:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
     a80:	ba 00 00 00 00       	mov    $0x0,%edx
     a85:	48 89 ce             	mov    %rcx,%rsi
     a88:	48 89 c7             	mov    %rax,%rdi
     a8b:	e8 00 00 00 00       	callq  a90 <_ZN6Parser16compileVariablesEP11QStringList+0x600>
     a90:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a94:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a9b:	48 89 d6             	mov    %rdx,%rsi
     a9e:	48 89 c7             	mov    %rax,%rdi
     aa1:	e8 00 00 00 00       	callq  aa6 <_ZN6Parser16compileVariablesEP11QStringList+0x616>
     aa6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     aaa:	48 89 c7             	mov    %rax,%rdi
     aad:	e8 00 00 00 00       	callq  ab2 <_ZN6Parser16compileVariablesEP11QStringList+0x622>

        index        = this->varIndexes.take(name);
     ab2:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     ab9:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
     ac0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     ac7:	48 89 c6             	mov    %rax,%rsi
     aca:	48 89 d7             	mov    %rdx,%rdi
     acd:	e8 00 00 00 00       	callq  ad2 <_ZN6Parser16compileVariablesEP11QStringList+0x642>
     ad2:	0f b6 c0             	movzbl %al,%eax
     ad5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)
        assignment   = this->varTypes.take(index);
     adb:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     ae1:	88 45 d0             	mov    %al,-0x30(%rbp)
     ae4:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     aeb:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx
     af2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     af6:	48 89 c6             	mov    %rax,%rsi
     af9:	48 89 d7             	mov    %rdx,%rdi
     afc:	e8 00 00 00 00       	callq  b01 <_ZN6Parser16compileVariablesEP11QStringList+0x671>
     b01:	88 85 a1 fd ff ff    	mov    %al,-0x25f(%rbp)
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     b07:	0f b6 8d a1 fd ff ff 	movzbl -0x25f(%rbp),%ecx
     b0e:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     b14:	0f b6 d0             	movzbl %al,%edx
     b17:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b1b:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
     b1f:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
     b26:	49 89 f8             	mov    %rdi,%r8
     b29:	48 89 c7             	mov    %rax,%rdi
     b2c:	e8 00 00 00 00       	callq  b31 <_ZN6Parser16compileVariablesEP11QStringList+0x6a1>
     b31:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     b35:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     b3c:	48 89 d6             	mov    %rdx,%rsi
     b3f:	48 89 c7             	mov    %rax,%rdi
     b42:	e8 00 00 00 00       	callq  b47 <_ZN6Parser16compileVariablesEP11QStringList+0x6b7>
     b47:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b4b:	48 89 c7             	mov    %rax,%rdi
     b4e:	e8 00 00 00 00       	callq  b53 <_ZN6Parser16compileVariablesEP11QStringList+0x6c3>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     b53:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b57:	48 89 c7             	mov    %rax,%rdi
     b5a:	e8 00 00 00 00       	callq  b5f <_ZN6Parser16compileVariablesEP11QStringList+0x6cf>
    QString name, type, value;
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
     b5f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     b66:	48 89 c7             	mov    %rax,%rdi
     b69:	e8 00 00 00 00       	callq  b6e <_ZN6Parser16compileVariablesEP11QStringList+0x6de>
     b6e:	e9 d9 fd ff ff       	jmpq   94c <_ZN6Parser16compileVariablesEP11QStringList+0x4bc>
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
     b73:	66 c7 85 a2 fd ff ff 	movw   $0xff,-0x25e(%rbp)
     b7a:	ff 00 
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     b7c:	0f b7 85 a2 fd ff ff 	movzwl -0x25e(%rbp),%eax
     b83:	0f b6 d0             	movzbl %al,%edx
     b86:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b8a:	48 8d 8d c0 fd ff ff 	lea    -0x240(%rbp),%rcx
     b91:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
     b98:	49 89 c9             	mov    %rcx,%r9
     b9b:	41 89 d0             	mov    %edx,%r8d
     b9e:	b9 11 00 00 00       	mov    $0x11,%ecx
     ba3:	ba ff 00 00 00       	mov    $0xff,%edx
     ba8:	48 89 c7             	mov    %rax,%rdi
     bab:	e8 00 00 00 00       	callq  bb0 <_ZN6Parser16compileVariablesEP11QStringList+0x720>
     bb0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     bb4:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     bbb:	48 89 d6             	mov    %rdx,%rsi
     bbe:	48 89 c7             	mov    %rax,%rdi
     bc1:	e8 00 00 00 00       	callq  bc6 <_ZN6Parser16compileVariablesEP11QStringList+0x736>
     bc6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bca:	48 89 c7             	mov    %rax,%rdi
     bcd:	e8 00 00 00 00       	callq  bd2 <_ZN6Parser16compileVariablesEP11QStringList+0x742>

    return result;
     bd2:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     bd3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     bda:	48 89 c7             	mov    %rax,%rdi
     bdd:	e8 00 00 00 00       	callq  be2 <_ZN6Parser16compileVariablesEP11QStringList+0x752>
     be2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     be9:	48 89 c7             	mov    %rax,%rdi
     bec:	e8 00 00 00 00       	callq  bf1 <_ZN6Parser16compileVariablesEP11QStringList+0x761>
     bf1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     bf8:	48 89 c7             	mov    %rax,%rdi
     bfb:	e8 00 00 00 00       	callq  c00 <_ZN6Parser16compileVariablesEP11QStringList+0x770>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     c00:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     c07:	48 89 c7             	mov    %rax,%rdi
     c0a:	e8 00 00 00 00       	callq  c0f <_ZN6Parser16compileVariablesEP11QStringList+0x77f>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c0f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     c16:	48 89 c7             	mov    %rax,%rdi
     c19:	e8 00 00 00 00       	callq  c1e <_ZN6Parser16compileVariablesEP11QStringList+0x78e>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c1e:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     c25:	48 89 c7             	mov    %rax,%rdi
     c28:	e8 00 00 00 00       	callq  c2d <_ZN6Parser16compileVariablesEP11QStringList+0x79d>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     c2d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     c34:	48 89 c7             	mov    %rax,%rdi
     c37:	e8 00 00 00 00       	callq  c3c <_ZN6Parser16compileVariablesEP11QStringList+0x7ac>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     c3c:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     c43:	48 89 c7             	mov    %rax,%rdi
     c46:	e8 00 00 00 00       	callq  c4b <_ZN6Parser16compileVariablesEP11QStringList+0x7bb>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     c4b:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     c52:	48 89 c7             	mov    %rax,%rdi
     c55:	e8 00 00 00 00       	callq  c5a <_ZN6Parser16compileVariablesEP11QStringList+0x7ca>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     c5a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c61:	48 89 c7             	mov    %rax,%rdi
     c64:	e8 00 00 00 00       	callq  c69 <_ZN6Parser16compileVariablesEP11QStringList+0x7d9>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     c69:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     c70:	48 89 c7             	mov    %rax,%rdi
     c73:	e8 00 00 00 00       	callq  c78 <_ZN6Parser16compileVariablesEP11QStringList+0x7e8>

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     c78:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     c7f:	48 89 c7             	mov    %rax,%rdi
     c82:	e8 00 00 00 00       	callq  c87 <_ZN6Parser16compileVariablesEP11QStringList+0x7f7>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     c87:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     c8e:	48 89 c7             	mov    %rax,%rdi
     c91:	e8 00 00 00 00       	callq  c96 <_ZN6Parser16compileVariablesEP11QStringList+0x806>
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
     c96:	e9 eb 02 00 00       	jmpq   f86 <_ZN6Parser16compileVariablesEP11QStringList+0xaf6>
     c9b:	48 89 c3             	mov    %rax,%rbx
     c9e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     ca5:	48 89 c7             	mov    %rax,%rdi
     ca8:	e8 00 00 00 00       	callq  cad <_ZN6Parser16compileVariablesEP11QStringList+0x81d>
     cad:	eb 17                	jmp    cc6 <_ZN6Parser16compileVariablesEP11QStringList+0x836>
     caf:	48 89 c3             	mov    %rax,%rbx
     cb2:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     cb9:	48 89 c7             	mov    %rax,%rdi
     cbc:	e8 00 00 00 00       	callq  cc1 <_ZN6Parser16compileVariablesEP11QStringList+0x831>
     cc1:	eb 03                	jmp    cc6 <_ZN6Parser16compileVariablesEP11QStringList+0x836>
     cc3:	48 89 c3             	mov    %rax,%rbx
     cc6:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     ccd:	48 89 c7             	mov    %rax,%rdi
     cd0:	e8 00 00 00 00       	callq  cd5 <_ZN6Parser16compileVariablesEP11QStringList+0x845>
     cd5:	e9 56 02 00 00       	jmpq   f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     cda:	48 89 c3             	mov    %rax,%rbx
     cdd:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     ce4:	48 89 c7             	mov    %rax,%rdi
     ce7:	e8 00 00 00 00       	callq  cec <_ZN6Parser16compileVariablesEP11QStringList+0x85c>
     cec:	e9 3f 02 00 00       	jmpq   f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     cf1:	48 89 c3             	mov    %rax,%rbx
     cf4:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     cfb:	48 89 c7             	mov    %rax,%rdi
     cfe:	e8 00 00 00 00       	callq  d03 <_ZN6Parser16compileVariablesEP11QStringList+0x873>
     d03:	eb 17                	jmp    d1c <_ZN6Parser16compileVariablesEP11QStringList+0x88c>
     d05:	48 89 c3             	mov    %rax,%rbx
     d08:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d0f:	48 89 c7             	mov    %rax,%rdi
     d12:	e8 00 00 00 00       	callq  d17 <_ZN6Parser16compileVariablesEP11QStringList+0x887>
     d17:	eb 03                	jmp    d1c <_ZN6Parser16compileVariablesEP11QStringList+0x88c>
     d19:	48 89 c3             	mov    %rax,%rbx
     d1c:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     d23:	48 89 c7             	mov    %rax,%rdi
     d26:	e8 00 00 00 00       	callq  d2b <_ZN6Parser16compileVariablesEP11QStringList+0x89b>
     d2b:	e9 ec 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     d30:	48 89 c3             	mov    %rax,%rbx
     d33:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d3a:	48 89 c7             	mov    %rax,%rdi
     d3d:	e8 00 00 00 00       	callq  d42 <_ZN6Parser16compileVariablesEP11QStringList+0x8b2>
     d42:	e9 d5 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     d47:	48 89 c3             	mov    %rax,%rbx
     d4a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     d51:	48 89 c7             	mov    %rax,%rdi
     d54:	e8 00 00 00 00       	callq  d59 <_ZN6Parser16compileVariablesEP11QStringList+0x8c9>
     d59:	e9 aa 01 00 00       	jmpq   f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     d5e:	48 89 c3             	mov    %rax,%rbx
     d61:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     d68:	48 89 c7             	mov    %rax,%rdi
     d6b:	e8 00 00 00 00       	callq  d70 <_ZN6Parser16compileVariablesEP11QStringList+0x8e0>
     d70:	e9 93 01 00 00       	jmpq   f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     d75:	48 89 c3             	mov    %rax,%rbx
     d78:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     d7f:	48 89 c7             	mov    %rax,%rdi
     d82:	e8 00 00 00 00       	callq  d87 <_ZN6Parser16compileVariablesEP11QStringList+0x8f7>
     d87:	e9 68 01 00 00       	jmpq   ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     d8c:	48 89 c3             	mov    %rax,%rbx
     d8f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     d96:	48 89 c7             	mov    %rax,%rdi
     d99:	e8 00 00 00 00       	callq  d9e <_ZN6Parser16compileVariablesEP11QStringList+0x90e>
     d9e:	e9 51 01 00 00       	jmpq   ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     da3:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     da6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     dad:	48 89 c7             	mov    %rax,%rdi
     db0:	e8 00 00 00 00       	callq  db5 <_ZN6Parser16compileVariablesEP11QStringList+0x925>
     db5:	e9 ea 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     dba:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     dbd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     dc4:	48 89 c7             	mov    %rax,%rdi
     dc7:	e8 00 00 00 00       	callq  dcc <_ZN6Parser16compileVariablesEP11QStringList+0x93c>
     dcc:	e9 d3 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     dd1:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     dd4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     ddb:	48 89 c7             	mov    %rax,%rdi
     dde:	e8 00 00 00 00       	callq  de3 <_ZN6Parser16compileVariablesEP11QStringList+0x953>
     de3:	eb 03                	jmp    de8 <_ZN6Parser16compileVariablesEP11QStringList+0x958>
     de5:	48 89 c3             	mov    %rax,%rbx
     de8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     def:	48 89 c7             	mov    %rax,%rdi
     df2:	e8 00 00 00 00       	callq  df7 <_ZN6Parser16compileVariablesEP11QStringList+0x967>
     df7:	eb 03                	jmp    dfc <_ZN6Parser16compileVariablesEP11QStringList+0x96c>
     df9:	48 89 c3             	mov    %rax,%rbx
     dfc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     e03:	48 89 c7             	mov    %rax,%rdi
     e06:	e8 00 00 00 00       	callq  e0b <_ZN6Parser16compileVariablesEP11QStringList+0x97b>
     e0b:	e9 94 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     e10:	48 89 c3             	mov    %rax,%rbx

        int indexVarName = erxVarName.indexIn(*it);
        int countRgPort  = erx_rgPort.captureCount();
        int countVarName = erxVarName.captureCount();

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     e13:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     e17:	48 89 c7             	mov    %rax,%rdi
     e1a:	e8 00 00 00 00       	callq  e1f <_ZN6Parser16compileVariablesEP11QStringList+0x98f>
     e1f:	eb 25                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e21:	48 89 c3             	mov    %rax,%rbx
        }else{name = erxVarName.cap(0);}
     e24:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e28:	48 89 c7             	mov    %rax,%rdi
     e2b:	e8 00 00 00 00       	callq  e30 <_ZN6Parser16compileVariablesEP11QStringList+0x9a0>
     e30:	eb 14                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e32:	48 89 c3             	mov    %rax,%rbx

        index        = this->varIndexes.take(name);
        assignment   = this->varTypes.take(index);
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     e35:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e39:	48 89 c7             	mov    %rax,%rdi
     e3c:	e8 00 00 00 00       	callq  e41 <_ZN6Parser16compileVariablesEP11QStringList+0x9b1>
     e41:	eb 03                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e43:	48 89 c3             	mov    %rax,%rbx
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     e46:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e4a:	48 89 c7             	mov    %rax,%rdi
     e4d:	e8 00 00 00 00       	callq  e52 <_ZN6Parser16compileVariablesEP11QStringList+0x9c2>
     e52:	eb 14                	jmp    e68 <_ZN6Parser16compileVariablesEP11QStringList+0x9d8>
     e54:	48 89 c3             	mov    %rax,%rbx

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     e57:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e5b:	48 89 c7             	mov    %rax,%rdi
     e5e:	e8 00 00 00 00       	callq  e63 <_ZN6Parser16compileVariablesEP11QStringList+0x9d3>
     e63:	eb 03                	jmp    e68 <_ZN6Parser16compileVariablesEP11QStringList+0x9d8>
     e65:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     e68:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     e6f:	48 89 c7             	mov    %rax,%rdi
     e72:	e8 00 00 00 00       	callq  e77 <_ZN6Parser16compileVariablesEP11QStringList+0x9e7>
     e77:	eb 03                	jmp    e7c <_ZN6Parser16compileVariablesEP11QStringList+0x9ec>
     e79:	48 89 c3             	mov    %rax,%rbx
     e7c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     e83:	48 89 c7             	mov    %rax,%rdi
     e86:	e8 00 00 00 00       	callq  e8b <_ZN6Parser16compileVariablesEP11QStringList+0x9fb>
     e8b:	eb 03                	jmp    e90 <_ZN6Parser16compileVariablesEP11QStringList+0xa00>
     e8d:	48 89 c3             	mov    %rax,%rbx
     e90:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     e97:	48 89 c7             	mov    %rax,%rdi
     e9a:	e8 00 00 00 00       	callq  e9f <_ZN6Parser16compileVariablesEP11QStringList+0xa0f>
     e9f:	eb 03                	jmp    ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     ea1:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     ea4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     eab:	48 89 c7             	mov    %rax,%rdi
     eae:	e8 00 00 00 00       	callq  eb3 <_ZN6Parser16compileVariablesEP11QStringList+0xa23>
     eb3:	eb 03                	jmp    eb8 <_ZN6Parser16compileVariablesEP11QStringList+0xa28>
     eb5:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     eb8:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     ebf:	48 89 c7             	mov    %rax,%rdi
     ec2:	e8 00 00 00 00       	callq  ec7 <_ZN6Parser16compileVariablesEP11QStringList+0xa37>
     ec7:	eb 03                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xa3c>
     ec9:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     ecc:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     ed3:	48 89 c7             	mov    %rax,%rdi
     ed6:	e8 00 00 00 00       	callq  edb <_ZN6Parser16compileVariablesEP11QStringList+0xa4b>
     edb:	eb 03                	jmp    ee0 <_ZN6Parser16compileVariablesEP11QStringList+0xa50>
     edd:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     ee0:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     ee7:	48 89 c7             	mov    %rax,%rdi
     eea:	e8 00 00 00 00       	callq  eef <_ZN6Parser16compileVariablesEP11QStringList+0xa5f>
     eef:	eb 03                	jmp    ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     ef1:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     ef4:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     efb:	48 89 c7             	mov    %rax,%rdi
     efe:	e8 00 00 00 00       	callq  f03 <_ZN6Parser16compileVariablesEP11QStringList+0xa73>
     f03:	eb 03                	jmp    f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     f05:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     f08:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     f0f:	48 89 c7             	mov    %rax,%rdi
     f12:	e8 00 00 00 00       	callq  f17 <_ZN6Parser16compileVariablesEP11QStringList+0xa87>
     f17:	eb 03                	jmp    f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     f19:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     f1c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     f23:	48 89 c7             	mov    %rax,%rdi
     f26:	e8 00 00 00 00       	callq  f2b <_ZN6Parser16compileVariablesEP11QStringList+0xa9b>
     f2b:	eb 03                	jmp    f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     f2d:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     f30:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     f37:	48 89 c7             	mov    %rax,%rdi
     f3a:	e8 00 00 00 00       	callq  f3f <_ZN6Parser16compileVariablesEP11QStringList+0xaaf>
     f3f:	eb 03                	jmp    f44 <_ZN6Parser16compileVariablesEP11QStringList+0xab4>
     f41:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     f44:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     f4b:	48 89 c7             	mov    %rax,%rdi
     f4e:	e8 00 00 00 00       	callq  f53 <_ZN6Parser16compileVariablesEP11QStringList+0xac3>
     f53:	eb 03                	jmp    f58 <_ZN6Parser16compileVariablesEP11QStringList+0xac8>
     f55:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     f58:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     f5f:	48 89 c7             	mov    %rax,%rdi
     f62:	e8 00 00 00 00       	callq  f67 <_ZN6Parser16compileVariablesEP11QStringList+0xad7>
     f67:	eb 03                	jmp    f6c <_ZN6Parser16compileVariablesEP11QStringList+0xadc>
     f69:	48 89 c3             	mov    %rax,%rbx
     f6c:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f73:	48 89 c7             	mov    %rax,%rdi
     f76:	e8 00 00 00 00       	callq  f7b <_ZN6Parser16compileVariablesEP11QStringList+0xaeb>
     f7b:	48 89 d8             	mov    %rbx,%rax
     f7e:	48 89 c7             	mov    %rax,%rdi
     f81:	e8 00 00 00 00       	callq  f86 <_ZN6Parser16compileVariablesEP11QStringList+0xaf6>

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
}
     f86:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f8d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     f91:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     f98:	00 00 
     f9a:	74 05                	je     fa1 <_ZN6Parser16compileVariablesEP11QStringList+0xb11>
     f9c:	e8 00 00 00 00       	callq  fa1 <_ZN6Parser16compileVariablesEP11QStringList+0xb11>
     fa1:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
     fa8:	5b                   	pop    %rbx
     fa9:	5d                   	pop    %rbp
     faa:	c3                   	retq   
     fab:	90                   	nop

0000000000000fac <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     fac:	55                   	push   %rbp
     fad:	48 89 e5             	mov    %rsp,%rbp
     fb0:	53                   	push   %rbx
     fb1:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     fb8:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     fbf:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     fc6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fcd:	00 00 
     fcf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     fd3:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     fd5:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     fdc:	00 00 00 
    int index   = 0;
     fdf:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     fe6:	00 00 00 

    VarTypes VT;
     fe9:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     ff0:	48 89 c7             	mov    %rax,%rdi
     ff3:	e8 00 00 00 00       	callq  ff8 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     ff8:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     fff:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1006:	48 89 d6             	mov    %rdx,%rsi
    1009:	48 89 c7             	mov    %rax,%rdi
    100c:	e8 00 00 00 00       	callq  1011 <_ZN6Parser14checkVariablesEP7QString+0x65>
    1011:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1018:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    101f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1026 <_ZN6Parser14checkVariablesEP7QString+0x7a>
    1026:	48 89 ce             	mov    %rcx,%rsi
    1029:	48 89 c7             	mov    %rax,%rdi
    102c:	e8 00 00 00 00       	callq  1031 <_ZN6Parser14checkVariablesEP7QString+0x85>
    1031:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    1038:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    103f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1044:	ba 01 00 00 00       	mov    $0x1,%edx
    1049:	48 89 c7             	mov    %rax,%rdi
    104c:	e8 00 00 00 00       	callq  1051 <_ZN6Parser14checkVariablesEP7QString+0xa5>
    1051:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1058:	48 89 c7             	mov    %rax,%rdi
    105b:	e8 00 00 00 00       	callq  1060 <_ZN6Parser14checkVariablesEP7QString+0xb4>
    1060:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1067:	48 89 c7             	mov    %rax,%rdi
    106a:	e8 00 00 00 00       	callq  106f <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    106f:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1076:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    107d:	48 89 d6             	mov    %rdx,%rsi
    1080:	48 89 c7             	mov    %rax,%rdi
    1083:	e8 00 00 00 00       	callq  1088 <_ZN6Parser14checkVariablesEP7QString+0xdc>
    1088:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    108f:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    1096:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 109d <_ZN6Parser14checkVariablesEP7QString+0xf1>
    109d:	48 89 ce             	mov    %rcx,%rsi
    10a0:	48 89 c7             	mov    %rax,%rdi
    10a3:	e8 00 00 00 00       	callq  10a8 <_ZN6Parser14checkVariablesEP7QString+0xfc>
    10a8:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    10af:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    10b6:	b9 00 00 00 00       	mov    $0x0,%ecx
    10bb:	ba 01 00 00 00       	mov    $0x1,%edx
    10c0:	48 89 c7             	mov    %rax,%rdi
    10c3:	e8 00 00 00 00       	callq  10c8 <_ZN6Parser14checkVariablesEP7QString+0x11c>
    10c8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    10cf:	48 89 c7             	mov    %rax,%rdi
    10d2:	e8 00 00 00 00       	callq  10d7 <_ZN6Parser14checkVariablesEP7QString+0x12b>
    10d7:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    10de:	48 89 c7             	mov    %rax,%rdi
    10e1:	e8 00 00 00 00       	callq  10e6 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    10e6:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    10ed:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10f4 <_ZN6Parser14checkVariablesEP7QString+0x148>
    10f4:	48 89 c7             	mov    %rax,%rdi
    10f7:	e8 00 00 00 00       	callq  10fc <_ZN6Parser14checkVariablesEP7QString+0x150>
    10fc:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    1103:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    110a:	b9 00 00 00 00       	mov    $0x0,%ecx
    110f:	ba 01 00 00 00       	mov    $0x1,%edx
    1114:	48 89 c7             	mov    %rax,%rdi
    1117:	e8 00 00 00 00       	callq  111c <_ZN6Parser14checkVariablesEP7QString+0x170>
    111c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1123:	48 89 c7             	mov    %rax,%rdi
    1126:	e8 00 00 00 00       	callq  112b <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    112b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1132:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1139 <_ZN6Parser14checkVariablesEP7QString+0x18d>
    1139:	48 89 c7             	mov    %rax,%rdi
    113c:	e8 00 00 00 00       	callq  1141 <_ZN6Parser14checkVariablesEP7QString+0x195>
    1141:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    1148:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    114f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1154:	ba 01 00 00 00       	mov    $0x1,%edx
    1159:	48 89 c7             	mov    %rax,%rdi
    115c:	e8 00 00 00 00       	callq  1161 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    1161:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1168:	48 89 c7             	mov    %rax,%rdi
    116b:	e8 00 00 00 00       	callq  1170 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    1170:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1177:	48 89 c7             	mov    %rax,%rdi
    117a:	e8 00 00 00 00       	callq  117f <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    117f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1186:	48 89 c7             	mov    %rax,%rdi
    1189:	e8 00 00 00 00       	callq  118e <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    118e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1195:	48 89 c7             	mov    %rax,%rdi
    1198:	e8 00 00 00 00       	callq  119d <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    119d:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    11a4:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    11a7:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    11ad:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    11b4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    11bb:	b9 00 00 00 00       	mov    $0x0,%ecx
    11c0:	48 89 c7             	mov    %rax,%rdi
    11c3:	e8 00 00 00 00       	callq  11c8 <_ZN6Parser14checkVariablesEP7QString+0x21c>
    11c8:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    11ce:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    11d5:	0f 95 c0             	setne  %al
    11d8:	84 c0                	test   %al,%al
    11da:	0f 84 68 01 00 00    	je     1348 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    11e0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    11e7:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    11ee:	ba 01 00 00 00       	mov    $0x1,%edx
    11f3:	48 89 ce             	mov    %rcx,%rsi
    11f6:	48 89 c7             	mov    %rax,%rdi
    11f9:	e8 00 00 00 00       	callq  11fe <_ZN6Parser14checkVariablesEP7QString+0x252>
    11fe:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    1205:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    120c:	48 89 d6             	mov    %rdx,%rsi
    120f:	48 89 c7             	mov    %rax,%rdi
    1212:	e8 00 00 00 00       	callq  1217 <_ZN6Parser14checkVariablesEP7QString+0x26b>
    1217:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    121e:	48 89 c7             	mov    %rax,%rdi
    1221:	e8 00 00 00 00       	callq  1226 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    1226:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    122d:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1234:	ba 02 00 00 00       	mov    $0x2,%edx
    1239:	48 89 ce             	mov    %rcx,%rsi
    123c:	48 89 c7             	mov    %rax,%rdi
    123f:	e8 00 00 00 00       	callq  1244 <_ZN6Parser14checkVariablesEP7QString+0x298>
    1244:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    124b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1252:	48 89 d6             	mov    %rdx,%rsi
    1255:	48 89 c7             	mov    %rax,%rdi
    1258:	e8 00 00 00 00       	callq  125d <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    125d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1264:	48 89 c7             	mov    %rax,%rdi
    1267:	e8 00 00 00 00       	callq  126c <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    126c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1273:	48 89 c7             	mov    %rax,%rdi
    1276:	e8 00 00 00 00       	callq  127b <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    127b:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    1281:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1288:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 128f <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    128f:	48 89 c7             	mov    %rax,%rdi
    1292:	e8 00 00 00 00       	callq  1297 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    1297:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    129e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    12a5:	ba 02 00 00 00       	mov    $0x2,%edx
    12aa:	48 89 ce             	mov    %rcx,%rsi
    12ad:	48 89 c7             	mov    %rax,%rdi
    12b0:	e8 00 00 00 00       	callq  12b5 <_ZN6Parser14checkVariablesEP7QString+0x309>
    12b5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12bc:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    12c3:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    12ca:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    12d0:	b9 00 00 00 00       	mov    $0x0,%ecx
    12d5:	48 89 c7             	mov    %rax,%rdi
    12d8:	e8 00 00 00 00       	callq  12dd <_ZN6Parser14checkVariablesEP7QString+0x331>
    12dd:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    12e4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    12eb:	48 89 d6             	mov    %rdx,%rsi
    12ee:	48 89 c7             	mov    %rax,%rdi
    12f1:	e8 00 00 00 00       	callq  12f6 <_ZN6Parser14checkVariablesEP7QString+0x34a>
    12f6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12fd:	48 89 c7             	mov    %rax,%rdi
    1300:	e8 00 00 00 00       	callq  1305 <_ZN6Parser14checkVariablesEP7QString+0x359>
    1305:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    130c:	48 89 c7             	mov    %rax,%rdi
    130f:	e8 00 00 00 00       	callq  1314 <_ZN6Parser14checkVariablesEP7QString+0x368>
    1314:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    131b:	48 89 c7             	mov    %rax,%rdi
    131e:	e8 00 00 00 00       	callq  1323 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    1323:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    132a:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1331:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1338:	48 89 c6             	mov    %rax,%rsi
    133b:	48 89 d7             	mov    %rdx,%rdi
    133e:	e8 00 00 00 00       	callq  1343 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    1343:	e9 5f fe ff ff       	jmpq   11a7 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    1348:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    134f:	48 05 98 00 00 00    	add    $0x98,%rax
    1355:	48 89 c7             	mov    %rax,%rdi
    1358:	e8 00 00 00 00       	callq  135d <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    135d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1364:	48 89 c7             	mov    %rax,%rdi
    1367:	e8 00 00 00 00       	callq  136c <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    136c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1373:	48 89 c7             	mov    %rax,%rdi
    1376:	e8 00 00 00 00       	callq  137b <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    137b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1382:	48 89 c7             	mov    %rax,%rdi
    1385:	e8 00 00 00 00       	callq  138a <_ZN6Parser14checkVariablesEP7QString+0x3de>
    138a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1391:	48 89 c7             	mov    %rax,%rdi
    1394:	e8 00 00 00 00       	callq  1399 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1399:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13a0:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    13a7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13ae:	48 89 d6             	mov    %rdx,%rsi
    13b1:	48 89 c7             	mov    %rax,%rdi
    13b4:	e8 00 00 00 00       	callq  13b9 <_ZN6Parser14checkVariablesEP7QString+0x40d>
    13b9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    13c0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    13c7:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13ce:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    13d5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    13dc:	48 89 d6             	mov    %rdx,%rsi
    13df:	48 89 c7             	mov    %rax,%rdi
    13e2:	e8 00 00 00 00       	callq  13e7 <_ZN6Parser14checkVariablesEP7QString+0x43b>
    13e7:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    13ee:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    13f5:	48 89 d6             	mov    %rdx,%rsi
    13f8:	48 89 c7             	mov    %rax,%rdi
    13fb:	e8 00 00 00 00       	callq  1400 <_ZN6Parser14checkVariablesEP7QString+0x454>
    1400:	84 c0                	test   %al,%al
    1402:	0f 84 de 03 00 00    	je     17e6 <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
    1408:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    140f:	48 89 c7             	mov    %rax,%rdi
    1412:	e8 00 00 00 00       	callq  1417 <_ZN6Parser14checkVariablesEP7QString+0x46b>
    1417:	48 89 c2             	mov    %rax,%rdx
    141a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1421:	48 89 d6             	mov    %rdx,%rsi
    1424:	48 89 c7             	mov    %rax,%rdi
    1427:	e8 00 00 00 00       	callq  142c <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    142c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1433:	48 89 c7             	mov    %rax,%rdi
    1436:	e8 00 00 00 00       	callq  143b <_ZN6Parser14checkVariablesEP7QString+0x48f>
    143b:	48 89 c6             	mov    %rax,%rsi
    143e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1445:	b9 00 00 00 00       	mov    $0x0,%ecx
    144a:	ba 00 00 00 00       	mov    $0x0,%edx
    144f:	48 89 c7             	mov    %rax,%rdi
    1452:	e8 00 00 00 00       	callq  1457 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    1457:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    145d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1464:	48 89 c7             	mov    %rax,%rdi
    1467:	e8 00 00 00 00       	callq  146c <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    146c:	48 89 c6             	mov    %rax,%rsi
    146f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1476:	b9 00 00 00 00       	mov    $0x0,%ecx
    147b:	ba 00 00 00 00       	mov    $0x0,%edx
    1480:	48 89 c7             	mov    %rax,%rdi
    1483:	e8 00 00 00 00       	callq  1488 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    1488:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    148e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1495:	48 89 c7             	mov    %rax,%rdi
    1498:	e8 00 00 00 00       	callq  149d <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    149d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    14a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14aa:	48 89 c7             	mov    %rax,%rdi
    14ad:	e8 00 00 00 00       	callq  14b2 <_ZN6Parser14checkVariablesEP7QString+0x506>
    14b2:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    14b8:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    14bf:	00 00 00 

        if(ZZ>=0)
    14c2:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    14c9:	0f 88 0d 02 00 00    	js     16dc <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
    14cf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    14d6:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    14dd:	ba 01 00 00 00       	mov    $0x1,%edx
    14e2:	48 89 ce             	mov    %rcx,%rsi
    14e5:	48 89 c7             	mov    %rax,%rdi
    14e8:	e8 00 00 00 00       	callq  14ed <_ZN6Parser14checkVariablesEP7QString+0x541>
    14ed:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    14f4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14fb:	48 89 d6             	mov    %rdx,%rsi
    14fe:	48 89 c7             	mov    %rax,%rdi
    1501:	e8 00 00 00 00       	callq  1506 <_ZN6Parser14checkVariablesEP7QString+0x55a>
    1506:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    150d:	48 89 c7             	mov    %rax,%rdi
    1510:	e8 00 00 00 00       	callq  1515 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    1515:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1519:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1520:	ba 02 00 00 00       	mov    $0x2,%edx
    1525:	48 89 ce             	mov    %rcx,%rsi
    1528:	48 89 c7             	mov    %rax,%rdi
    152b:	e8 00 00 00 00       	callq  1530 <_ZN6Parser14checkVariablesEP7QString+0x584>
    1530:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    1534:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    153b:	48 89 d6             	mov    %rdx,%rsi
    153e:	48 89 c7             	mov    %rax,%rdi
    1541:	e8 00 00 00 00       	callq  1546 <_ZN6Parser14checkVariablesEP7QString+0x59a>
    1546:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    154a:	48 89 c7             	mov    %rax,%rdi
    154d:	e8 00 00 00 00       	callq  1552 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    1552:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1556:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    155d:	ba 03 00 00 00       	mov    $0x3,%edx
    1562:	48 89 ce             	mov    %rcx,%rsi
    1565:	48 89 c7             	mov    %rax,%rdi
    1568:	e8 00 00 00 00       	callq  156d <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    156d:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1571:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1578:	48 89 d6             	mov    %rdx,%rsi
    157b:	48 89 c7             	mov    %rax,%rdi
    157e:	e8 00 00 00 00       	callq  1583 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    1583:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1587:	48 89 c7             	mov    %rax,%rdi
    158a:	e8 00 00 00 00       	callq  158f <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    158f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1593:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    159a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15a1 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    15a1:	48 89 ce             	mov    %rcx,%rsi
    15a4:	48 89 c7             	mov    %rax,%rdi
    15a7:	e8 00 00 00 00       	callq  15ac <_ZN6Parser14checkVariablesEP7QString+0x600>
    15ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    15b0:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    15b7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    15bb:	48 89 ce             	mov    %rcx,%rsi
    15be:	48 89 c7             	mov    %rax,%rdi
    15c1:	e8 00 00 00 00       	callq  15c6 <_ZN6Parser14checkVariablesEP7QString+0x61a>
    15c6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    15ca:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    15ce:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15d5 <_ZN6Parser14checkVariablesEP7QString+0x629>
    15d5:	48 89 ce             	mov    %rcx,%rsi
    15d8:	48 89 c7             	mov    %rax,%rdi
    15db:	e8 00 00 00 00       	callq  15e0 <_ZN6Parser14checkVariablesEP7QString+0x634>
    15e0:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    15e7:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    15ee:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    15f2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15f9:	48 89 c6             	mov    %rax,%rsi
    15fc:	48 89 cf             	mov    %rcx,%rdi
    15ff:	e8 00 00 00 00       	callq  1604 <_ZN6Parser14checkVariablesEP7QString+0x658>
    1604:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1608:	48 89 c7             	mov    %rax,%rdi
    160b:	e8 00 00 00 00       	callq  1610 <_ZN6Parser14checkVariablesEP7QString+0x664>
    1610:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1614:	48 89 c7             	mov    %rax,%rdi
    1617:	e8 00 00 00 00       	callq  161c <_ZN6Parser14checkVariablesEP7QString+0x670>
    161c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1620:	48 89 c7             	mov    %rax,%rdi
    1623:	e8 00 00 00 00       	callq  1628 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    1628:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    162f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1636 <_ZN6Parser14checkVariablesEP7QString+0x68a>
    1636:	48 89 c7             	mov    %rax,%rdi
    1639:	e8 00 00 00 00       	callq  163e <_ZN6Parser14checkVariablesEP7QString+0x692>
    163e:	84 c0                	test   %al,%al
    1640:	74 0a                	je     164c <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    1642:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    1649:	00 00 00 
            if(type=="port")    iType = 80;
    164c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1653:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 165a <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    165a:	48 89 c7             	mov    %rax,%rdi
    165d:	e8 00 00 00 00       	callq  1662 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    1662:	84 c0                	test   %al,%al
    1664:	74 0a                	je     1670 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    1666:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    166d:	00 00 00 

            index++;
    1670:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    1677:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    167d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1680:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1687:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    168e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1692:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1699:	48 89 c6             	mov    %rax,%rsi
    169c:	48 89 cf             	mov    %rcx,%rdi
    169f:	e8 00 00 00 00       	callq  16a4 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
    16a4:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    16aa:	88 45 e0             	mov    %al,-0x20(%rbp)
    16ad:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    16b3:	88 45 d0             	mov    %al,-0x30(%rbp)
    16b6:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16bd:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    16c4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16c8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16cc:	48 89 c6             	mov    %rax,%rsi
    16cf:	48 89 cf             	mov    %rcx,%rdi
    16d2:	e8 00 00 00 00       	callq  16d7 <_ZN6Parser14checkVariablesEP7QString+0x72b>
    16d7:	e9 e7 00 00 00       	jmpq   17c3 <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
    16dc:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    16e3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16e7:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    16ee:	ba 00 00 00 00       	mov    $0x0,%edx
    16f3:	48 89 ce             	mov    %rcx,%rsi
    16f6:	48 89 c7             	mov    %rax,%rdi
    16f9:	e8 00 00 00 00       	callq  16fe <_ZN6Parser14checkVariablesEP7QString+0x752>
    16fe:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1702:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1709:	48 89 d6             	mov    %rdx,%rsi
    170c:	48 89 c7             	mov    %rax,%rdi
    170f:	e8 00 00 00 00       	callq  1714 <_ZN6Parser14checkVariablesEP7QString+0x768>
    1714:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1718:	48 89 c7             	mov    %rax,%rdi
    171b:	e8 00 00 00 00       	callq  1720 <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
    1720:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1724:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 172b <_ZN6Parser14checkVariablesEP7QString+0x77f>
    172b:	48 89 c7             	mov    %rax,%rdi
    172e:	e8 00 00 00 00       	callq  1733 <_ZN6Parser14checkVariablesEP7QString+0x787>
    1733:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    173a:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    1741:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1745:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    174c:	48 89 c6             	mov    %rax,%rsi
    174f:	48 89 cf             	mov    %rcx,%rdi
    1752:	e8 00 00 00 00       	callq  1757 <_ZN6Parser14checkVariablesEP7QString+0x7ab>
    1757:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    175b:	48 89 c7             	mov    %rax,%rdi
    175e:	e8 00 00 00 00       	callq  1763 <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
    1763:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1769:	88 45 e0             	mov    %al,-0x20(%rbp)
    176c:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1773:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    177a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    177e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1785:	48 89 c6             	mov    %rax,%rsi
    1788:	48 89 cf             	mov    %rcx,%rdi
    178b:	e8 00 00 00 00       	callq  1790 <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
    1790:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    1796:	88 45 e0             	mov    %al,-0x20(%rbp)
    1799:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    179f:	88 45 d0             	mov    %al,-0x30(%rbp)
    17a2:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17a9:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    17b0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17b4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17b8:	48 89 c6             	mov    %rax,%rsi
    17bb:	48 89 cf             	mov    %rcx,%rdi
    17be:	e8 00 00 00 00       	callq  17c3 <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    17c3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    17ca:	48 89 c7             	mov    %rax,%rdi
    17cd:	e8 00 00 00 00       	callq  17d2 <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    17d2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    17d9:	48 89 c7             	mov    %rax,%rdi
    17dc:	e8 00 00 00 00       	callq  17e1 <_ZN6Parser14checkVariablesEP7QString+0x835>
    17e1:	e9 e1 fb ff ff       	jmpq   13c7 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    17e6:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    17ec:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    17f3:	48 89 c7             	mov    %rax,%rdi
    17f6:	e8 00 00 00 00       	callq  17fb <_ZN6Parser14checkVariablesEP7QString+0x84f>
    17fb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1802:	48 89 c7             	mov    %rax,%rdi
    1805:	e8 00 00 00 00       	callq  180a <_ZN6Parser14checkVariablesEP7QString+0x85e>
    180a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1811:	48 89 c7             	mov    %rax,%rdi
    1814:	e8 00 00 00 00       	callq  1819 <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1819:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1820:	48 89 c7             	mov    %rax,%rdi
    1823:	e8 00 00 00 00       	callq  1828 <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1828:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    182f:	48 89 c7             	mov    %rax,%rdi
    1832:	e8 00 00 00 00       	callq  1837 <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1837:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    183e:	48 89 c7             	mov    %rax,%rdi
    1841:	e8 00 00 00 00       	callq  1846 <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1846:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    184d:	48 89 c7             	mov    %rax,%rdi
    1850:	e8 00 00 00 00       	callq  1855 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1855:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    185c:	48 89 c7             	mov    %rax,%rdi
    185f:	e8 00 00 00 00       	callq  1864 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1864:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    186b:	48 89 c7             	mov    %rax,%rdi
    186e:	e8 00 00 00 00       	callq  1873 <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1873:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    187a:	48 89 c7             	mov    %rax,%rdi
    187d:	e8 00 00 00 00       	callq  1882 <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1882:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1889:	48 89 c7             	mov    %rax,%rdi
    188c:	e8 00 00 00 00       	callq  1891 <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    1891:	89 d8                	mov    %ebx,%eax
}
    1893:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1897:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    189e:	00 00 
    18a0:	0f 84 03 03 00 00    	je     1ba9 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    18a6:	e9 f9 02 00 00       	jmpq   1ba4 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
    18ab:	48 89 c3             	mov    %rax,%rbx
    18ae:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    18b5:	48 89 c7             	mov    %rax,%rdi
    18b8:	e8 00 00 00 00       	callq  18bd <_ZN6Parser14checkVariablesEP7QString+0x911>
    18bd:	eb 17                	jmp    18d6 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    18bf:	48 89 c3             	mov    %rax,%rbx
    18c2:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18c9:	48 89 c7             	mov    %rax,%rdi
    18cc:	e8 00 00 00 00       	callq  18d1 <_ZN6Parser14checkVariablesEP7QString+0x925>
    18d1:	eb 03                	jmp    18d6 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    18d3:	48 89 c3             	mov    %rax,%rbx
    18d6:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    18dd:	48 89 c7             	mov    %rax,%rdi
    18e0:	e8 00 00 00 00       	callq  18e5 <_ZN6Parser14checkVariablesEP7QString+0x939>
    18e5:	e9 a0 02 00 00       	jmpq   1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    18ea:	48 89 c3             	mov    %rax,%rbx
    18ed:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18f4:	48 89 c7             	mov    %rax,%rdi
    18f7:	e8 00 00 00 00       	callq  18fc <_ZN6Parser14checkVariablesEP7QString+0x950>
    18fc:	e9 89 02 00 00       	jmpq   1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1901:	48 89 c3             	mov    %rax,%rbx
    1904:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    190b:	48 89 c7             	mov    %rax,%rdi
    190e:	e8 00 00 00 00       	callq  1913 <_ZN6Parser14checkVariablesEP7QString+0x967>
    1913:	eb 17                	jmp    192c <_ZN6Parser14checkVariablesEP7QString+0x980>
    1915:	48 89 c3             	mov    %rax,%rbx
    1918:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    191f:	48 89 c7             	mov    %rax,%rdi
    1922:	e8 00 00 00 00       	callq  1927 <_ZN6Parser14checkVariablesEP7QString+0x97b>
    1927:	eb 03                	jmp    192c <_ZN6Parser14checkVariablesEP7QString+0x980>
    1929:	48 89 c3             	mov    %rax,%rbx
    192c:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1933:	48 89 c7             	mov    %rax,%rdi
    1936:	e8 00 00 00 00       	callq  193b <_ZN6Parser14checkVariablesEP7QString+0x98f>
    193b:	e9 36 02 00 00       	jmpq   1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1940:	48 89 c3             	mov    %rax,%rbx
    1943:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    194a:	48 89 c7             	mov    %rax,%rdi
    194d:	e8 00 00 00 00       	callq  1952 <_ZN6Parser14checkVariablesEP7QString+0x9a6>
    1952:	e9 1f 02 00 00       	jmpq   1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1957:	48 89 c3             	mov    %rax,%rbx
    195a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1961:	48 89 c7             	mov    %rax,%rdi
    1964:	e8 00 00 00 00       	callq  1969 <_ZN6Parser14checkVariablesEP7QString+0x9bd>
    1969:	e9 f4 01 00 00       	jmpq   1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    196e:	48 89 c3             	mov    %rax,%rbx
    1971:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1978:	48 89 c7             	mov    %rax,%rdi
    197b:	e8 00 00 00 00       	callq  1980 <_ZN6Parser14checkVariablesEP7QString+0x9d4>
    1980:	e9 dd 01 00 00       	jmpq   1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1985:	48 89 c3             	mov    %rax,%rbx
    1988:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    198f:	48 89 c7             	mov    %rax,%rdi
    1992:	e8 00 00 00 00       	callq  1997 <_ZN6Parser14checkVariablesEP7QString+0x9eb>
    1997:	e9 b2 01 00 00       	jmpq   1b4e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    199c:	48 89 c3             	mov    %rax,%rbx
    199f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    19a6:	48 89 c7             	mov    %rax,%rdi
    19a9:	e8 00 00 00 00       	callq  19ae <_ZN6Parser14checkVariablesEP7QString+0xa02>
    19ae:	e9 9b 01 00 00       	jmpq   1b4e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    19b3:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    19b6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    19bd:	48 89 c7             	mov    %rax,%rdi
    19c0:	e8 00 00 00 00       	callq  19c5 <_ZN6Parser14checkVariablesEP7QString+0xa19>
    19c5:	e9 34 01 00 00       	jmpq   1afe <_ZN6Parser14checkVariablesEP7QString+0xb52>
    19ca:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    19cd:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19d4:	48 89 c7             	mov    %rax,%rdi
    19d7:	e8 00 00 00 00       	callq  19dc <_ZN6Parser14checkVariablesEP7QString+0xa30>
    19dc:	e9 1d 01 00 00       	jmpq   1afe <_ZN6Parser14checkVariablesEP7QString+0xb52>
    19e1:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    19e4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19eb:	48 89 c7             	mov    %rax,%rdi
    19ee:	e8 00 00 00 00       	callq  19f3 <_ZN6Parser14checkVariablesEP7QString+0xa47>
    19f3:	eb 03                	jmp    19f8 <_ZN6Parser14checkVariablesEP7QString+0xa4c>
    19f5:	48 89 c3             	mov    %rax,%rbx
    19f8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    19ff:	48 89 c7             	mov    %rax,%rdi
    1a02:	e8 00 00 00 00       	callq  1a07 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1a07:	eb 03                	jmp    1a0c <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1a09:	48 89 c3             	mov    %rax,%rbx
    1a0c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1a13:	48 89 c7             	mov    %rax,%rdi
    1a16:	e8 00 00 00 00       	callq  1a1b <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1a1b:	e9 de 00 00 00       	jmpq   1afe <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1a20:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1a23:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a2a:	48 89 c7             	mov    %rax,%rdi
    1a2d:	e8 00 00 00 00       	callq  1a32 <_ZN6Parser14checkVariablesEP7QString+0xa86>
    1a32:	eb 7a                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a34:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1a37:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a3b:	48 89 c7             	mov    %rax,%rdi
    1a3e:	e8 00 00 00 00       	callq  1a43 <_ZN6Parser14checkVariablesEP7QString+0xa97>
    1a43:	eb 69                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a45:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1a48:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a4c:	48 89 c7             	mov    %rax,%rdi
    1a4f:	e8 00 00 00 00       	callq  1a54 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
    1a54:	eb 58                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a56:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1a59:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a5d:	48 89 c7             	mov    %rax,%rdi
    1a60:	e8 00 00 00 00       	callq  1a65 <_ZN6Parser14checkVariablesEP7QString+0xab9>
    1a65:	eb 03                	jmp    1a6a <_ZN6Parser14checkVariablesEP7QString+0xabe>
    1a67:	48 89 c3             	mov    %rax,%rbx
    1a6a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a6e:	48 89 c7             	mov    %rax,%rdi
    1a71:	e8 00 00 00 00       	callq  1a76 <_ZN6Parser14checkVariablesEP7QString+0xaca>
    1a76:	eb 03                	jmp    1a7b <_ZN6Parser14checkVariablesEP7QString+0xacf>
    1a78:	48 89 c3             	mov    %rax,%rbx
    1a7b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1a7f:	48 89 c7             	mov    %rax,%rdi
    1a82:	e8 00 00 00 00       	callq  1a87 <_ZN6Parser14checkVariablesEP7QString+0xadb>
    1a87:	eb 25                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a89:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1a8c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a90:	48 89 c7             	mov    %rax,%rdi
    1a93:	e8 00 00 00 00       	callq  1a98 <_ZN6Parser14checkVariablesEP7QString+0xaec>
    1a98:	eb 14                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a9a:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1a9d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1aa1:	48 89 c7             	mov    %rax,%rdi
    1aa4:	e8 00 00 00 00       	callq  1aa9 <_ZN6Parser14checkVariablesEP7QString+0xafd>
    1aa9:	eb 03                	jmp    1aae <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1aab:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1aae:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1ab5:	48 89 c7             	mov    %rax,%rdi
    1ab8:	e8 00 00 00 00       	callq  1abd <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1abd:	eb 03                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1abf:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1ac2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1ac9:	48 89 c7             	mov    %rax,%rdi
    1acc:	e8 00 00 00 00       	callq  1ad1 <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1ad1:	eb 03                	jmp    1ad6 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1ad3:	48 89 c3             	mov    %rax,%rbx
    1ad6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1add:	48 89 c7             	mov    %rax,%rdi
    1ae0:	e8 00 00 00 00       	callq  1ae5 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1ae5:	eb 03                	jmp    1aea <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1ae7:	48 89 c3             	mov    %rax,%rbx
    1aea:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1af1:	48 89 c7             	mov    %rax,%rdi
    1af4:	e8 00 00 00 00       	callq  1af9 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1af9:	eb 03                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1afb:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1afe:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1b05:	48 89 c7             	mov    %rax,%rdi
    1b08:	e8 00 00 00 00       	callq  1b0d <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1b0d:	eb 03                	jmp    1b12 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1b0f:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1b12:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1b19:	48 89 c7             	mov    %rax,%rdi
    1b1c:	e8 00 00 00 00       	callq  1b21 <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1b21:	eb 03                	jmp    1b26 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1b23:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1b26:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1b2d:	48 89 c7             	mov    %rax,%rdi
    1b30:	e8 00 00 00 00       	callq  1b35 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1b35:	eb 03                	jmp    1b3a <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1b37:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1b3a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1b41:	48 89 c7             	mov    %rax,%rdi
    1b44:	e8 00 00 00 00       	callq  1b49 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1b49:	eb 03                	jmp    1b4e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1b4b:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1b4e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1b55:	48 89 c7             	mov    %rax,%rdi
    1b58:	e8 00 00 00 00       	callq  1b5d <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1b5d:	eb 03                	jmp    1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1b5f:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1b62:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1b69:	48 89 c7             	mov    %rax,%rdi
    1b6c:	e8 00 00 00 00       	callq  1b71 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1b71:	eb 03                	jmp    1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1b73:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1b76:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1b7d:	48 89 c7             	mov    %rax,%rdi
    1b80:	e8 00 00 00 00       	callq  1b85 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1b85:	eb 03                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1b87:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1b8a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1b91:	48 89 c7             	mov    %rax,%rdi
    1b94:	e8 00 00 00 00       	callq  1b99 <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1b99:	48 89 d8             	mov    %rbx,%rax
    1b9c:	48 89 c7             	mov    %rax,%rdi
    1b9f:	e8 00 00 00 00       	callq  1ba4 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
    1ba4:	e8 00 00 00 00       	callq  1ba9 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    1ba9:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1bb0:	5b                   	pop    %rbx
    1bb1:	5d                   	pop    %rbp
    1bb2:	c3                   	retq   
    1bb3:	90                   	nop

0000000000001bb4 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1bb4:	55                   	push   %rbp
    1bb5:	48 89 e5             	mov    %rsp,%rbp
    1bb8:	53                   	push   %rbx
    1bb9:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1bc0:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1bc7:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1bce:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1bd5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1bdc:	00 00 
    1bde:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1be2:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1be4:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1beb:	00 00 00 
    QString result;
    1bee:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1bf5:	48 89 c7             	mov    %rax,%rdi
    1bf8:	e8 00 00 00 00       	callq  1bfd <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1bfd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c01:	48 89 c7             	mov    %rax,%rdi
    1c04:	e8 00 00 00 00       	callq  1c09 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1c09:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c10:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c14:	48 89 d6             	mov    %rdx,%rsi
    1c17:	48 89 c7             	mov    %rax,%rdi
    1c1a:	e8 00 00 00 00       	callq  1c1f <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1c1f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1c23:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1c27:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c2e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1c32:	48 89 d6             	mov    %rdx,%rsi
    1c35:	48 89 c7             	mov    %rax,%rdi
    1c38:	e8 00 00 00 00       	callq  1c3d <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1c3d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1c41:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c45:	48 89 d6             	mov    %rdx,%rsi
    1c48:	48 89 c7             	mov    %rax,%rdi
    1c4b:	e8 00 00 00 00       	callq  1c50 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1c50:	84 c0                	test   %al,%al
    1c52:	0f 84 e0 00 00 00    	je     1d38 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1c58:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c5c:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1c62:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c67:	89 ce                	mov    %ecx,%esi
    1c69:	48 89 c7             	mov    %rax,%rdi
    1c6c:	e8 00 00 00 00       	callq  1c71 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1c71:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c75:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1c79:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c80 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1c80:	48 89 c7             	mov    %rax,%rdi
    1c83:	e8 00 00 00 00       	callq  1c88 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1c88:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c8c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1c90:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1c97 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1c97:	48 89 ce             	mov    %rcx,%rsi
    1c9a:	48 89 c7             	mov    %rax,%rdi
    1c9d:	e8 00 00 00 00       	callq  1ca2 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1ca2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1ca6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cad:	48 89 d6             	mov    %rdx,%rsi
    1cb0:	48 89 c7             	mov    %rax,%rdi
    1cb3:	e8 00 00 00 00       	callq  1cb8 <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1cb8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cbc:	48 89 c7             	mov    %rax,%rdi
    1cbf:	e8 00 00 00 00       	callq  1cc4 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1cc4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1cc8:	48 89 c7             	mov    %rax,%rdi
    1ccb:	e8 00 00 00 00       	callq  1cd0 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1cd0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1cd4:	48 89 c7             	mov    %rax,%rdi
    1cd7:	e8 00 00 00 00       	callq  1cdc <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1cdc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ce0:	48 89 c7             	mov    %rax,%rdi
    1ce3:	e8 00 00 00 00       	callq  1ce8 <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1ce8:	48 89 c2             	mov    %rax,%rdx
    1ceb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1cef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1cf6 <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1cf6:	48 89 c7             	mov    %rax,%rdi
    1cf9:	e8 00 00 00 00       	callq  1cfe <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1cfe:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1d02:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d09:	48 89 d6             	mov    %rdx,%rsi
    1d0c:	48 89 c7             	mov    %rax,%rdi
    1d0f:	e8 00 00 00 00       	callq  1d14 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1d14:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d18:	48 89 c7             	mov    %rax,%rdi
    1d1b:	e8 00 00 00 00       	callq  1d20 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1d20:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1d27:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d2b:	48 89 c7             	mov    %rax,%rdi
    1d2e:	e8 00 00 00 00       	callq  1d33 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1d33:	e9 ef fe ff ff       	jmpq   1c27 <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1d38:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d3f:	48 89 c7             	mov    %rax,%rdi
    1d42:	e8 00 00 00 00       	callq  1d47 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1d47:	90                   	nop
    1d48:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1d4f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1d53:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1d5a:	00 00 
    1d5c:	74 68                	je     1dc6 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1d5e:	eb 61                	jmp    1dc1 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1d60:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1d63:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d67:	48 89 c7             	mov    %rax,%rdi
    1d6a:	e8 00 00 00 00       	callq  1d6f <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1d6f:	eb 03                	jmp    1d74 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1d71:	48 89 c3             	mov    %rax,%rbx
    1d74:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d78:	48 89 c7             	mov    %rax,%rdi
    1d7b:	e8 00 00 00 00       	callq  1d80 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1d80:	eb 03                	jmp    1d85 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1d82:	48 89 c3             	mov    %rax,%rbx
    1d85:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d89:	48 89 c7             	mov    %rax,%rdi
    1d8c:	e8 00 00 00 00       	callq  1d91 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1d91:	eb 14                	jmp    1da7 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1d93:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1d96:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d9a:	48 89 c7             	mov    %rax,%rdi
    1d9d:	e8 00 00 00 00       	callq  1da2 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1da2:	eb 03                	jmp    1da7 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1da4:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1da7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1dae:	48 89 c7             	mov    %rax,%rdi
    1db1:	e8 00 00 00 00       	callq  1db6 <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1db6:	48 89 d8             	mov    %rbx,%rax
    1db9:	48 89 c7             	mov    %rax,%rdi
    1dbc:	e8 00 00 00 00       	callq  1dc1 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1dc1:	e8 00 00 00 00       	callq  1dc6 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1dc6:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1dcd:	5b                   	pop    %rbx
    1dce:	5d                   	pop    %rbp
    1dcf:	c3                   	retq   

0000000000001dd0 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1dd0:	55                   	push   %rbp
    1dd1:	48 89 e5             	mov    %rsp,%rbp
    1dd4:	48 83 ec 10          	sub    $0x10,%rsp
    1dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1ddc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1de4:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1de8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1dec:	ba 01 00 00 00       	mov    $0x1,%edx
    1df1:	48 89 c6             	mov    %rax,%rsi
    1df4:	48 89 cf             	mov    %rcx,%rdi
    1df7:	e8 00 00 00 00       	callq  1dfc <_ZN6Parser14addIncludeFileE7QString+0x2c>
    1dfc:	83 f0 01             	xor    $0x1,%eax
    1dff:	84 c0                	test   %al,%al
    1e01:	74 17                	je     1e1a <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e07:	48 8d 50 58          	lea    0x58(%rax),%rdx
    1e0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e0f:	48 89 c6             	mov    %rax,%rsi
    1e12:	48 89 d7             	mov    %rdx,%rdi
    1e15:	e8 00 00 00 00       	callq  1e1a <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    1e1a:	90                   	nop
    1e1b:	c9                   	leaveq 
    1e1c:	c3                   	retq   
    1e1d:	90                   	nop

0000000000001e1e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1e1e:	55                   	push   %rbp
    1e1f:	48 89 e5             	mov    %rsp,%rbp
    1e22:	41 55                	push   %r13
    1e24:	41 54                	push   %r12
    1e26:	53                   	push   %rbx
    1e27:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1e2e:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1e35:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1e3c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1e43:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e4a:	00 00 
    1e4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1e50:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1e52:	bb 00 00 00 00       	mov    $0x0,%ebx
    1e57:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1e5e:	48 89 c7             	mov    %rax,%rdi
    1e61:	e8 00 00 00 00       	callq  1e66 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1e66:	83 f8 04             	cmp    $0x4,%eax
    1e69:	74 3a                	je     1ea5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1e6b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e6f:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e76:	48 89 d6             	mov    %rdx,%rsi
    1e79:	48 89 c7             	mov    %rax,%rdi
    1e7c:	e8 00 00 00 00       	callq  1e81 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1e81:	bb 01 00 00 00       	mov    $0x1,%ebx
    1e86:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e8a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1e91 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1e91:	48 89 c7             	mov    %rax,%rdi
    1e94:	e8 00 00 00 00       	callq  1e99 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1e99:	84 c0                	test   %al,%al
    1e9b:	74 08                	je     1ea5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1e9d:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1ea3:	eb 06                	jmp    1eab <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1ea5:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1eab:	84 db                	test   %bl,%bl
    1ead:	74 0d                	je     1ebc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1eaf:	90                   	nop
    1eb0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1eb4:	48 89 c7             	mov    %rax,%rdi
    1eb7:	e8 00 00 00 00       	callq  1ebc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ebc:	45 84 ed             	test   %r13b,%r13b
    1ebf:	74 0b                	je     1ecc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1ec1:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1ec7:	e9 87 02 00 00       	jmpq   2153 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1ecc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1ed3:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1eda:	48 89 d6             	mov    %rdx,%rsi
    1edd:	48 89 c7             	mov    %rax,%rdi
    1ee0:	e8 00 00 00 00       	callq  1ee5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1ee5:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1eec:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1eef:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1ef6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1efd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1efd:	48 89 c7             	mov    %rax,%rdi
    1f00:	e8 00 00 00 00       	callq  1f05 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1f05:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1f0c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f13:	48 89 d6             	mov    %rdx,%rsi
    1f16:	48 89 c7             	mov    %rax,%rdi
    1f19:	e8 00 00 00 00       	callq  1f1e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1f1e:	89 c3                	mov    %eax,%ebx
    1f20:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f27:	48 89 c7             	mov    %rax,%rdi
    1f2a:	e8 00 00 00 00       	callq  1f2f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1f2f:	84 db                	test   %bl,%bl
    1f31:	74 6c                	je     1f9f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1f33:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f3a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f41 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1f41:	48 89 c7             	mov    %rax,%rdi
    1f44:	e8 00 00 00 00       	callq  1f49 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1f49:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f4d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1f54:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1f5b:	48 89 ce             	mov    %rcx,%rsi
    1f5e:	48 89 c7             	mov    %rax,%rdi
    1f61:	e8 00 00 00 00       	callq  1f66 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1f66:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f6a:	ba 0a 00 00 00       	mov    $0xa,%edx
    1f6f:	be 00 00 00 00       	mov    $0x0,%esi
    1f74:	48 89 c7             	mov    %rax,%rdi
    1f77:	e8 00 00 00 00       	callq  1f7c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1f7c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1f82:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f86:	48 89 c7             	mov    %rax,%rdi
    1f89:	e8 00 00 00 00       	callq  1f8e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1f8e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f95:	48 89 c7             	mov    %rax,%rdi
    1f98:	e8 00 00 00 00       	callq  1f9d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1f9d:	eb 0b                	jmp    1faa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1f9f:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1fa5:	e9 9a 01 00 00       	jmpq   2144 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1faa:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fb1:	48 89 c7             	mov    %rax,%rdi
    1fb4:	e8 00 00 00 00       	callq  1fb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1fb9:	bb 00 00 00 00       	mov    $0x0,%ebx
    1fbe:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fc5:	48 89 c7             	mov    %rax,%rdi
    1fc8:	e8 00 00 00 00       	callq  1fcd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    1fcd:	83 f8 05             	cmp    $0x5,%eax
    1fd0:	75 35                	jne    2007 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1fd2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1fd6:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1fdd:	48 89 d6             	mov    %rdx,%rsi
    1fe0:	48 89 c7             	mov    %rax,%rdi
    1fe3:	e8 00 00 00 00       	callq  1fe8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    1fe8:	bb 01 00 00 00       	mov    $0x1,%ebx
    1fed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1ff1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ff8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    1ff8:	48 89 c7             	mov    %rax,%rdi
    1ffb:	e8 00 00 00 00       	callq  2000 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    2000:	83 f0 01             	xor    $0x1,%eax
    2003:	84 c0                	test   %al,%al
    2005:	74 08                	je     200f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    2007:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    200d:	eb 06                	jmp    2015 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    200f:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    2015:	84 db                	test   %bl,%bl
    2017:	74 0d                	je     2026 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2019:	90                   	nop
    201a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    201e:	48 89 c7             	mov    %rax,%rdi
    2021:	e8 00 00 00 00       	callq  2026 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2026:	45 84 ed             	test   %r13b,%r13b
    2029:	0f 84 0f 01 00 00    	je     213e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    202f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2036:	48 89 c7             	mov    %rax,%rdi
    2039:	e8 00 00 00 00       	callq  203e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    203e:	83 f8 04             	cmp    $0x4,%eax
    2041:	0f 94 c0             	sete   %al
    2044:	84 c0                	test   %al,%al
    2046:	0f 84 de 00 00 00    	je     212a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    204c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2050:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    2057:	48 89 d6             	mov    %rdx,%rsi
    205a:	48 89 c7             	mov    %rax,%rdi
    205d:	e8 00 00 00 00       	callq  2062 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    2062:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2066:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 206d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    206d:	48 89 c7             	mov    %rax,%rdi
    2070:	e8 00 00 00 00       	callq  2075 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    2075:	89 c3                	mov    %eax,%ebx
    2077:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    207b:	48 89 c7             	mov    %rax,%rdi
    207e:	e8 00 00 00 00       	callq  2083 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    2083:	84 db                	test   %bl,%bl
    2085:	0f 84 9f 00 00 00    	je     212a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    208b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2092:	48 89 c7             	mov    %rax,%rdi
    2095:	e8 00 00 00 00       	callq  209a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    209a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    209e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20a5:	48 89 d6             	mov    %rdx,%rsi
    20a8:	48 89 c7             	mov    %rax,%rdi
    20ab:	e8 00 00 00 00       	callq  20b0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    20b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20b4:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    20b8:	48 89 d6             	mov    %rdx,%rsi
    20bb:	48 89 c7             	mov    %rax,%rdi
    20be:	e8 00 00 00 00       	callq  20c3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    20c3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20c7:	48 89 c7             	mov    %rax,%rdi
    20ca:	e8 00 00 00 00       	callq  20cf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    20cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    20d3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    20da:	48 89 d6             	mov    %rdx,%rsi
    20dd:	48 89 c7             	mov    %rax,%rdi
    20e0:	e8 00 00 00 00       	callq  20e5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    20e5:	84 c0                	test   %al,%al
    20e7:	74 0d                	je     20f6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    20e9:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    20ef:	bb 00 00 00 00       	mov    $0x0,%ebx
    20f4:	eb 22                	jmp    2118 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    20f6:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    20fd:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    2101:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2108:	48 89 ce             	mov    %rcx,%rsi
    210b:	48 89 c7             	mov    %rax,%rdi
    210e:	e8 00 00 00 00       	callq  2113 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    2113:	bb 01 00 00 00       	mov    $0x1,%ebx
    2118:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    211c:	48 89 c7             	mov    %rax,%rdi
    211f:	e8 00 00 00 00       	callq  2124 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    2124:	83 fb 01             	cmp    $0x1,%ebx
    2127:	75 1b                	jne    2144 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    2129:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    212a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2131:	48 89 c7             	mov    %rax,%rdi
    2134:	e8 00 00 00 00       	callq  2139 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2139:	e9 7b fe ff ff       	jmpq   1fb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    213e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2144:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    214b:	48 89 c7             	mov    %rax,%rdi
    214e:	e8 00 00 00 00       	callq  2153 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    2153:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    2156:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    215a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2161:	00 00 
    2163:	0f 84 d1 00 00 00    	je     223a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    2169:	e9 c7 00 00 00       	jmpq   2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    216e:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    2171:	84 db                	test   %bl,%bl
    2173:	74 0f                	je     2184 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    2175:	90                   	nop
    2176:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    217a:	48 89 c7             	mov    %rax,%rdi
    217d:	e8 00 00 00 00       	callq  2182 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    2182:	eb 01                	jmp    2185 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    2184:	90                   	nop
    2185:	4c 89 e0             	mov    %r12,%rax
    2188:	48 89 c7             	mov    %rax,%rdi
    218b:	e8 00 00 00 00       	callq  2190 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    2190:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    2193:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    219a:	48 89 c7             	mov    %rax,%rdi
    219d:	e8 00 00 00 00       	callq  21a2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    21a2:	eb 77                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21a4:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    21a7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21ab:	48 89 c7             	mov    %rax,%rdi
    21ae:	e8 00 00 00 00       	callq  21b3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    21b3:	eb 03                	jmp    21b8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    21b5:	48 89 c3             	mov    %rax,%rbx
    21b8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    21bf:	48 89 c7             	mov    %rax,%rdi
    21c2:	e8 00 00 00 00       	callq  21c7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    21c7:	eb 52                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21c9:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    21cc:	84 db                	test   %bl,%bl
    21ce:	74 0f                	je     21df <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    21d0:	90                   	nop
    21d1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21d5:	48 89 c7             	mov    %rax,%rdi
    21d8:	e8 00 00 00 00       	callq  21dd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    21dd:	eb 01                	jmp    21e0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    21df:	90                   	nop
    21e0:	4c 89 e3             	mov    %r12,%rbx
    21e3:	eb 36                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21e5:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    21e8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21ec:	48 89 c7             	mov    %rax,%rdi
    21ef:	e8 00 00 00 00       	callq  21f4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    21f4:	eb 25                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21f6:	48 89 c3             	mov    %rax,%rbx
    21f9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    21fd:	48 89 c7             	mov    %rax,%rdi
    2200:	e8 00 00 00 00       	callq  2205 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    2205:	eb 14                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2207:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    220a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    220e:	48 89 c7             	mov    %rax,%rdi
    2211:	e8 00 00 00 00       	callq  2216 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    2216:	eb 03                	jmp    221b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2218:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    221b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2222:	48 89 c7             	mov    %rax,%rdi
    2225:	e8 00 00 00 00       	callq  222a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    222a:	48 89 d8             	mov    %rbx,%rax
    222d:	48 89 c7             	mov    %rax,%rdi
    2230:	e8 00 00 00 00       	callq  2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    2235:	e8 00 00 00 00       	callq  223a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    223a:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    2241:	5b                   	pop    %rbx
    2242:	41 5c                	pop    %r12
    2244:	41 5d                	pop    %r13
    2246:	5d                   	pop    %rbp
    2247:	c3                   	retq   

0000000000002248 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    2248:	55                   	push   %rbp
    2249:	48 89 e5             	mov    %rsp,%rbp
    224c:	53                   	push   %rbx
    224d:	48 83 ec 68          	sub    $0x68,%rsp
    2251:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    2255:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    2259:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    225d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2264:	00 00 
    2266:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    226a:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    226c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2270:	48 89 c7             	mov    %rax,%rdi
    2273:	e8 00 00 00 00       	callq  2278 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    2278:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    227c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2280:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2284:	48 89 d6             	mov    %rdx,%rsi
    2287:	48 89 c7             	mov    %rax,%rdi
    228a:	e8 00 00 00 00       	callq  228f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    228f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2293:	48 89 c7             	mov    %rax,%rdi
    2296:	e8 00 00 00 00       	callq  229b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    229b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    229f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    22a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22a7:	48 89 d6             	mov    %rdx,%rsi
    22aa:	48 89 c7             	mov    %rax,%rdi
    22ad:	e8 00 00 00 00       	callq  22b2 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    22b2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22b6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22ba:	48 89 d6             	mov    %rdx,%rsi
    22bd:	48 89 c7             	mov    %rax,%rdi
    22c0:	e8 00 00 00 00       	callq  22c5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    22c5:	84 c0                	test   %al,%al
    22c7:	0f 84 d7 00 00 00    	je     23a4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    22cd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22d1:	48 89 c7             	mov    %rax,%rdi
    22d4:	e8 00 00 00 00       	callq  22d9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    22d9:	8b 08                	mov    (%rax),%ecx
    22db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22df:	ba 0a 00 00 00       	mov    $0xa,%edx
    22e4:	89 ce                	mov    %ecx,%esi
    22e6:	48 89 c7             	mov    %rax,%rdi
    22e9:	e8 00 00 00 00       	callq  22ee <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    22ee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22f2:	48 89 c7             	mov    %rax,%rdi
    22f5:	e8 00 00 00 00       	callq  22fa <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    22fa:	48 89 c2             	mov    %rax,%rdx
    22fd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2301:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2308 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    2308:	48 89 c7             	mov    %rax,%rdi
    230b:	e8 00 00 00 00       	callq  2310 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    2310:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2314:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    2318:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 231f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    231f:	48 89 ce             	mov    %rcx,%rsi
    2322:	48 89 c7             	mov    %rax,%rdi
    2325:	e8 00 00 00 00       	callq  232a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    232a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    232e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2332:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    2336:	48 89 ce             	mov    %rcx,%rsi
    2339:	48 89 c7             	mov    %rax,%rdi
    233c:	e8 00 00 00 00       	callq  2341 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    2341:	90                   	nop
    2342:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2346:	48 89 c7             	mov    %rax,%rdi
    2349:	e8 00 00 00 00       	callq  234e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    234e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2352:	48 89 c7             	mov    %rax,%rdi
    2355:	e8 00 00 00 00       	callq  235a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    235a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    235e:	48 89 c7             	mov    %rax,%rdi
    2361:	e8 00 00 00 00       	callq  2366 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    2366:	eb 3d                	jmp    23a5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    2368:	48 89 c3             	mov    %rax,%rbx
    236b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    236f:	48 89 c7             	mov    %rax,%rdi
    2372:	e8 00 00 00 00       	callq  2377 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    2377:	eb 03                	jmp    237c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    2379:	48 89 c3             	mov    %rax,%rbx
    237c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2380:	48 89 c7             	mov    %rax,%rdi
    2383:	e8 00 00 00 00       	callq  2388 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    2388:	eb 03                	jmp    238d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    238a:	48 89 c3             	mov    %rax,%rbx
    238d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2391:	48 89 c7             	mov    %rax,%rdi
    2394:	e8 00 00 00 00       	callq  2399 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    2399:	48 89 d8             	mov    %rbx,%rax
    239c:	48 89 c7             	mov    %rax,%rdi
    239f:	e8 00 00 00 00       	callq  23a4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    23a4:	90                   	nop
    23a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    23a9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    23ad:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    23b4:	00 00 
    23b6:	74 05                	je     23bd <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23b8:	e8 00 00 00 00       	callq  23bd <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23bd:	48 83 c4 68          	add    $0x68,%rsp
    23c1:	5b                   	pop    %rbx
    23c2:	5d                   	pop    %rbp
    23c3:	c3                   	retq   

00000000000023c4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    23c4:	55                   	push   %rbp
    23c5:	48 89 e5             	mov    %rsp,%rbp
    23c8:	53                   	push   %rbx
    23c9:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    23d0:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    23d4:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    23d8:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    23df:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    23e6:	00 00 
    23e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    23ec:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    23ee:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    23f2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    23f6:	48 89 d6             	mov    %rdx,%rsi
    23f9:	48 89 c7             	mov    %rax,%rdi
    23fc:	e8 00 00 00 00       	callq  2401 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    2401:	be 10 00 00 00       	mov    $0x10,%esi
    2406:	bf 01 00 00 00       	mov    $0x1,%edi
    240b:	e8 00 00 00 00       	callq  2410 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    2410:	89 c2                	mov    %eax,%edx
    2412:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2416:	89 d6                	mov    %edx,%esi
    2418:	48 89 c7             	mov    %rax,%rdi
    241b:	e8 00 00 00 00       	callq  2420 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    2420:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2424:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2428:	48 89 d6             	mov    %rdx,%rsi
    242b:	48 89 c7             	mov    %rax,%rdi
    242e:	e8 00 00 00 00       	callq  2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    2433:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2437:	48 89 c7             	mov    %rax,%rdi
    243a:	e8 00 00 00 00       	callq  243f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    243f:	83 f0 01             	xor    $0x1,%eax
    2442:	84 c0                	test   %al,%al
    2444:	74 1a                	je     2460 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2446:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    244a:	48 89 c7             	mov    %rax,%rdi
    244d:	e8 00 00 00 00       	callq  2452 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    2452:	83 f0 01             	xor    $0x1,%eax
    2455:	84 c0                	test   %al,%al
    2457:	74 07                	je     2460 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2459:	b8 01 00 00 00       	mov    $0x1,%eax
    245e:	eb 05                	jmp    2465 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    2460:	b8 00 00 00 00       	mov    $0x0,%eax
    2465:	84 c0                	test   %al,%al
    2467:	0f 84 cb 00 00 00    	je     2538 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    246d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2471:	48 89 c7             	mov    %rax,%rdi
    2474:	e8 00 00 00 00       	callq  2479 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    2479:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    247c:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    2480:	0f 84 a6 00 00 00    	je     252c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    2486:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    248a:	75 a7                	jne    2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    248c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2490:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2494:	48 89 d6             	mov    %rdx,%rsi
    2497:	48 89 c7             	mov    %rax,%rdi
    249a:	e8 00 00 00 00       	callq  249f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    249f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24aa <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    24aa:	48 89 c7             	mov    %rax,%rdi
    24ad:	e8 00 00 00 00       	callq  24b2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    24b2:	89 c3                	mov    %eax,%ebx
    24b4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24b8:	48 89 c7             	mov    %rax,%rdi
    24bb:	e8 00 00 00 00       	callq  24c0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    24c0:	84 db                	test   %bl,%bl
    24c2:	75 6e                	jne    2532 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    24c4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24c8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24cc:	48 89 d6             	mov    %rdx,%rsi
    24cf:	48 89 c7             	mov    %rax,%rdi
    24d2:	e8 00 00 00 00       	callq  24d7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    24d7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24db:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24e2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    24e2:	48 89 c7             	mov    %rax,%rdi
    24e5:	e8 00 00 00 00       	callq  24ea <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    24ea:	89 c3                	mov    %eax,%ebx
    24ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24f0:	48 89 c7             	mov    %rax,%rdi
    24f3:	e8 00 00 00 00       	callq  24f8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    24f8:	84 db                	test   %bl,%bl
    24fa:	0f 84 33 ff ff ff    	je     2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    2500:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    2507:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    250b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    250f:	48 89 ce             	mov    %rcx,%rsi
    2512:	48 89 c7             	mov    %rax,%rdi
    2515:	e8 00 00 00 00       	callq  251a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    251a:	83 f0 01             	xor    $0x1,%eax
    251d:	84 c0                	test   %al,%al
    251f:	0f 84 0e ff ff ff    	je     2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2525:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    252a:	eb 11                	jmp    253d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    252c:	90                   	nop
    252d:	e9 01 ff ff ff       	jmpq   2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    2532:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    2533:	e9 fb fe ff ff       	jmpq   2433 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2538:	bb 01 00 00 00       	mov    $0x1,%ebx
    253d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2541:	48 89 c7             	mov    %rax,%rdi
    2544:	e8 00 00 00 00       	callq  2549 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    2549:	83 fb 01             	cmp    $0x1,%ebx
    254c:	74 07                	je     2555 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    254e:	bb 00 00 00 00       	mov    $0x0,%ebx
    2553:	eb 06                	jmp    255b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2555:	90                   	nop
    2556:	bb 01 00 00 00       	mov    $0x1,%ebx
    255b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    255f:	48 89 c7             	mov    %rax,%rdi
    2562:	e8 00 00 00 00       	callq  2567 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    2567:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    256a:	90                   	nop
                    return;
                }
            }
        }
    }
}
    256b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    256f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2576:	00 00 
    2578:	74 54                	je     25ce <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    257a:	eb 4d                	jmp    25c9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    257c:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    257f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2583:	48 89 c7             	mov    %rax,%rdi
    2586:	e8 00 00 00 00       	callq  258b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    258b:	eb 14                	jmp    25a1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    258d:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    2590:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2594:	48 89 c7             	mov    %rax,%rdi
    2597:	e8 00 00 00 00       	callq  259c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    259c:	eb 03                	jmp    25a1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    259e:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25a1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25a5:	48 89 c7             	mov    %rax,%rdi
    25a8:	e8 00 00 00 00       	callq  25ad <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    25ad:	eb 03                	jmp    25b2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    25af:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    25b2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25b6:	48 89 c7             	mov    %rax,%rdi
    25b9:	e8 00 00 00 00       	callq  25be <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    25be:	48 89 d8             	mov    %rbx,%rax
    25c1:	48 89 c7             	mov    %rax,%rdi
    25c4:	e8 00 00 00 00       	callq  25c9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    25c9:	e8 00 00 00 00       	callq  25ce <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    25ce:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    25d5:	5b                   	pop    %rbx
    25d6:	5d                   	pop    %rbp
    25d7:	c3                   	retq   

00000000000025d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    25d8:	55                   	push   %rbp
    25d9:	48 89 e5             	mov    %rsp,%rbp
    25dc:	53                   	push   %rbx
    25dd:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    25e4:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    25eb:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    25f2:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    25f9:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    25ff:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2606:	00 00 
    2608:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    260c:	31 c0                	xor    %eax,%eax


    QString str = Block;
    260e:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    2615:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    261c:	48 89 d6             	mov    %rdx,%rsi
    261f:	48 89 c7             	mov    %rax,%rdi
    2622:	e8 00 00 00 00       	callq  2627 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    2627:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    262e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2635:	48 89 d6             	mov    %rdx,%rsi
    2638:	48 89 c7             	mov    %rax,%rdi
    263b:	e8 00 00 00 00       	callq  2640 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    2640:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2647:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 264e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    264e:	48 89 c7             	mov    %rax,%rdi
    2651:	e8 00 00 00 00       	callq  2656 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    2656:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    265d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2664:	b9 00 00 00 00       	mov    $0x0,%ecx
    2669:	ba 01 00 00 00       	mov    $0x1,%edx
    266e:	48 89 c7             	mov    %rax,%rdi
    2671:	e8 00 00 00 00       	callq  2676 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    2676:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    267d:	48 89 c7             	mov    %rax,%rdi
    2680:	e8 00 00 00 00       	callq  2685 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    2685:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    268c:	be 01 00 00 00       	mov    $0x1,%esi
    2691:	48 89 c7             	mov    %rax,%rdi
    2694:	e8 00 00 00 00       	callq  2699 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    2699:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    26a0:	48 89 c7             	mov    %rax,%rdi
    26a3:	e8 00 00 00 00       	callq  26a8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    26a8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 26b6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    26b6:	48 89 c7             	mov    %rax,%rdi
    26b9:	e8 00 00 00 00       	callq  26be <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    26be:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    26c5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    26cc:	b9 00 00 00 00       	mov    $0x0,%ecx
    26d1:	ba 01 00 00 00       	mov    $0x1,%edx
    26d6:	48 89 c7             	mov    %rax,%rdi
    26d9:	e8 00 00 00 00       	callq  26de <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    26de:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26e5:	48 89 c7             	mov    %rax,%rdi
    26e8:	e8 00 00 00 00       	callq  26ed <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    26ed:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    26f4:	48 89 c7             	mov    %rax,%rdi
    26f7:	e8 00 00 00 00       	callq  26fc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    26fc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2703:	48 89 c7             	mov    %rax,%rdi
    2706:	e8 00 00 00 00       	callq  270b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    270b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2712:	48 89 c7             	mov    %rax,%rdi
    2715:	e8 00 00 00 00       	callq  271a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    271a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2721:	48 89 c7             	mov    %rax,%rdi
    2724:	e8 00 00 00 00       	callq  2729 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    2729:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2730:	00 00 00 
    int lineInner = 0;
    2733:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    273a:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    273d:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2744:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    274b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2750:	ba 00 00 00 00       	mov    $0x0,%edx
    2755:	48 89 c7             	mov    %rax,%rdi
    2758:	e8 00 00 00 00       	callq  275d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    275d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    2763:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    276a:	0f 88 35 03 00 00    	js     2aa5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    2770:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    2776:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    277c:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    277f:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    2786:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    278a:	48 89 d6             	mov    %rdx,%rsi
    278d:	48 89 c7             	mov    %rax,%rdi
    2790:	e8 00 00 00 00       	callq  2795 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    2795:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    2799:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    27a0:	89 da                	mov    %ebx,%edx
    27a2:	48 89 ce             	mov    %rcx,%rsi
    27a5:	48 89 c7             	mov    %rax,%rdi
    27a8:	e8 00 00 00 00       	callq  27ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    27ad:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    27b3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27b7:	48 89 c7             	mov    %rax,%rdi
    27ba:	e8 00 00 00 00       	callq  27bf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    27bf:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    27c6:	75 0c                	jne    27d4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    27c8:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    27ce:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    27d4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    27d8:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    27df:	ba 00 00 00 00       	mov    $0x0,%edx
    27e4:	48 89 ce             	mov    %rcx,%rsi
    27e7:	48 89 c7             	mov    %rax,%rdi
    27ea:	e8 00 00 00 00       	callq  27ef <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    27ef:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    27f3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    27fa:	48 89 d6             	mov    %rdx,%rsi
    27fd:	48 89 c7             	mov    %rax,%rdi
    2800:	e8 00 00 00 00       	callq  2805 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    2805:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2809:	48 89 c7             	mov    %rax,%rdi
    280c:	e8 00 00 00 00       	callq  2811 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    2811:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2818:	48 89 c7             	mov    %rax,%rdi
    281b:	e8 00 00 00 00       	callq  2820 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    2820:	89 c3                	mov    %eax,%ebx
    2822:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2829:	48 89 c7             	mov    %rax,%rdi
    282c:	e8 00 00 00 00       	callq  2831 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    2831:	89 da                	mov    %ebx,%edx
    2833:	29 c2                	sub    %eax,%edx
    2835:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2839:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2840:	48 89 ce             	mov    %rcx,%rsi
    2843:	48 89 c7             	mov    %rax,%rdi
    2846:	e8 00 00 00 00       	callq  284b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    284b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    284f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2856:	48 89 d6             	mov    %rdx,%rsi
    2859:	48 89 c7             	mov    %rax,%rdi
    285c:	e8 00 00 00 00       	callq  2861 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    2861:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2865:	48 89 c7             	mov    %rax,%rdi
    2868:	e8 00 00 00 00       	callq  286d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    286d:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2874:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    287b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2880:	ba 00 00 00 00       	mov    $0x0,%edx
    2885:	48 89 c7             	mov    %rax,%rdi
    2888:	e8 00 00 00 00       	callq  288d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    288d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2891:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2898:	ba 00 00 00 00       	mov    $0x0,%edx
    289d:	48 89 ce             	mov    %rcx,%rsi
    28a0:	48 89 c7             	mov    %rax,%rdi
    28a3:	e8 00 00 00 00       	callq  28a8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    28a8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    28ac:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    28b3:	48 89 d6             	mov    %rdx,%rsi
    28b6:	48 89 c7             	mov    %rax,%rdi
    28b9:	e8 00 00 00 00       	callq  28be <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    28be:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28c2:	48 89 c7             	mov    %rax,%rdi
    28c5:	e8 00 00 00 00       	callq  28ca <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    28ca:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    28ce:	be 7b 00 00 00       	mov    $0x7b,%esi
    28d3:	48 89 c7             	mov    %rax,%rdi
    28d6:	e8 00 00 00 00       	callq  28db <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    28db:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    28e1:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    28e5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    28ec:	b9 01 00 00 00       	mov    $0x1,%ecx
    28f1:	48 89 c7             	mov    %rax,%rdi
    28f4:	e8 00 00 00 00       	callq  28f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    28f9:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    28ff:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2905:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    290c:	89 d6                	mov    %edx,%esi
    290e:	48 89 c7             	mov    %rax,%rdi
    2911:	e8 00 00 00 00       	callq  2916 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    2916:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    291a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    291e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2922:	48 89 c7             	mov    %rax,%rdi
    2925:	e8 00 00 00 00       	callq  292a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    292a:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    2931:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    2938:	00 00 00 
        int br=0;
    293b:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    2942:	00 00 00 

        while(bl != br)
    2945:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    294b:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    2951:	0f 84 a2 00 00 00    	je     29f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    2957:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    295e:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2964:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    296b:	89 d6                	mov    %edx,%esi
    296d:	48 89 c7             	mov    %rax,%rdi
    2970:	e8 00 00 00 00       	callq  2975 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    2975:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2979:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    297d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2981:	48 89 c7             	mov    %rax,%rdi
    2984:	e8 00 00 00 00       	callq  2989 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    2989:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    2990:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2994:	be 7b 00 00 00       	mov    $0x7b,%esi
    2999:	48 89 c7             	mov    %rax,%rdi
    299c:	e8 00 00 00 00       	callq  29a1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    29a1:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29a5:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29ac:	89 d6                	mov    %edx,%esi
    29ae:	89 c7                	mov    %eax,%edi
    29b0:	e8 00 00 00 00       	callq  29b5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    29b5:	84 c0                	test   %al,%al
    29b7:	74 07                	je     29c0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    29b9:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    29c0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29c4:	be 7d 00 00 00       	mov    $0x7d,%esi
    29c9:	48 89 c7             	mov    %rax,%rdi
    29cc:	e8 00 00 00 00       	callq  29d1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    29d1:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29d5:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29dc:	89 d6                	mov    %edx,%esi
    29de:	89 c7                	mov    %eax,%edi
    29e0:	e8 00 00 00 00       	callq  29e5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    29e5:	84 c0                	test   %al,%al
    29e7:	0f 84 58 ff ff ff    	je     2945 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    29ed:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    29f4:	e9 4c ff ff ff       	jmpq   2945 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    29f9:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    29ff:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2a05:	89 c1                	mov    %eax,%ecx
    2a07:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a0b:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2a11:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2a18:	48 89 c7             	mov    %rax,%rdi
    2a1b:	e8 00 00 00 00       	callq  2a20 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2a20:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a24:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2a2b:	48 89 d6             	mov    %rdx,%rsi
    2a2e:	48 89 c7             	mov    %rax,%rdi
    2a31:	e8 00 00 00 00       	callq  2a36 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2a36:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a3a:	48 89 c7             	mov    %rax,%rdi
    2a3d:	e8 00 00 00 00       	callq  2a42 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2a42:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a49:	48 89 c7             	mov    %rax,%rdi
    2a4c:	e8 00 00 00 00       	callq  2a51 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2a51:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2a57:	89 c2                	mov    %eax,%edx
    2a59:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a5d:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2a64:	48 89 ce             	mov    %rcx,%rsi
    2a67:	48 89 c7             	mov    %rax,%rdi
    2a6a:	e8 00 00 00 00       	callq  2a6f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2a6f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a73:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a7a:	48 89 d6             	mov    %rdx,%rsi
    2a7d:	48 89 c7             	mov    %rax,%rdi
    2a80:	e8 00 00 00 00       	callq  2a85 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2a85:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a89:	48 89 c7             	mov    %rax,%rdi
    2a8c:	e8 00 00 00 00       	callq  2a91 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2a91:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a97:	83 c0 01             	add    $0x1,%eax
    2a9a:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2aa0:	e9 98 fc ff ff       	jmpq   273d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2aa5:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2aa6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2aad:	48 89 c7             	mov    %rax,%rdi
    2ab0:	e8 00 00 00 00       	callq  2ab5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2ab5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2abc:	48 89 c7             	mov    %rax,%rdi
    2abf:	e8 00 00 00 00       	callq  2ac4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2ac4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2acb:	48 89 c7             	mov    %rax,%rdi
    2ace:	e8 00 00 00 00       	callq  2ad3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2ad3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ada:	48 89 c7             	mov    %rax,%rdi
    2add:	e8 00 00 00 00       	callq  2ae2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2ae2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2ae9:	48 89 c7             	mov    %rax,%rdi
    2aec:	e8 00 00 00 00       	callq  2af1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2af1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2af8:	48 89 c7             	mov    %rax,%rdi
    2afb:	e8 00 00 00 00       	callq  2b00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2b00:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b07:	48 89 c7             	mov    %rax,%rdi
    2b0a:	e8 00 00 00 00       	callq  2b0f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2b0f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b16:	48 89 c7             	mov    %rax,%rdi
    2b19:	e8 00 00 00 00       	callq  2b1e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b1e:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2b1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b23:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2b2a:	00 00 
    2b2c:	0f 84 75 01 00 00    	je     2ca7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2b32:	e9 6b 01 00 00       	jmpq   2ca2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2b37:	48 89 c3             	mov    %rax,%rbx
    2b3a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b41:	48 89 c7             	mov    %rax,%rdi
    2b44:	e8 00 00 00 00       	callq  2b49 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2b49:	e9 26 01 00 00       	jmpq   2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b4e:	48 89 c3             	mov    %rax,%rbx
    2b51:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b58:	48 89 c7             	mov    %rax,%rdi
    2b5b:	e8 00 00 00 00       	callq  2b60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2b60:	e9 0f 01 00 00       	jmpq   2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b65:	48 89 c3             	mov    %rax,%rbx
    2b68:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2b6f:	48 89 c7             	mov    %rax,%rdi
    2b72:	e8 00 00 00 00       	callq  2b77 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2b77:	e9 e4 00 00 00       	jmpq   2c60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b7c:	48 89 c3             	mov    %rax,%rbx
    2b7f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2b86:	48 89 c7             	mov    %rax,%rdi
    2b89:	e8 00 00 00 00       	callq  2b8e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2b8e:	e9 cd 00 00 00       	jmpq   2c60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b93:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2b96:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2b9a:	48 89 c7             	mov    %rax,%rdi
    2b9d:	e8 00 00 00 00       	callq  2ba2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2ba2:	eb 58                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2ba4:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2ba7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2bab:	48 89 c7             	mov    %rax,%rdi
    2bae:	e8 00 00 00 00       	callq  2bb3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2bb3:	eb 47                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bb5:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2bb8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2bbc:	48 89 c7             	mov    %rax,%rdi
    2bbf:	e8 00 00 00 00       	callq  2bc4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2bc4:	eb 36                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bc6:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2bc9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2bcd:	48 89 c7             	mov    %rax,%rdi
    2bd0:	e8 00 00 00 00       	callq  2bd5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2bd5:	eb 25                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bd7:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2bda:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2bde:	48 89 c7             	mov    %rax,%rdi
    2be1:	e8 00 00 00 00       	callq  2be6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2be6:	eb 14                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2be8:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2beb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2bef:	48 89 c7             	mov    %rax,%rdi
    2bf2:	e8 00 00 00 00       	callq  2bf7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2bf7:	eb 03                	jmp    2bfc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bf9:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2bfc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c03:	48 89 c7             	mov    %rax,%rdi
    2c06:	e8 00 00 00 00       	callq  2c0b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2c0b:	eb 03                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2c0d:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2c10:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2c17:	48 89 c7             	mov    %rax,%rdi
    2c1a:	e8 00 00 00 00       	callq  2c1f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2c1f:	eb 03                	jmp    2c24 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2c21:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2c24:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c2b:	48 89 c7             	mov    %rax,%rdi
    2c2e:	e8 00 00 00 00       	callq  2c33 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2c33:	eb 03                	jmp    2c38 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2c35:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2c38:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c3f:	48 89 c7             	mov    %rax,%rdi
    2c42:	e8 00 00 00 00       	callq  2c47 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2c47:	eb 03                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2c49:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2c4c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c53:	48 89 c7             	mov    %rax,%rdi
    2c56:	e8 00 00 00 00       	callq  2c5b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2c5b:	eb 03                	jmp    2c60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c5d:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2c60:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2c67:	48 89 c7             	mov    %rax,%rdi
    2c6a:	e8 00 00 00 00       	callq  2c6f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2c6f:	eb 03                	jmp    2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c71:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2c74:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2c7b:	48 89 c7             	mov    %rax,%rdi
    2c7e:	e8 00 00 00 00       	callq  2c83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2c83:	eb 03                	jmp    2c88 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2c85:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2c88:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2c8f:	48 89 c7             	mov    %rax,%rdi
    2c92:	e8 00 00 00 00       	callq  2c97 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2c97:	48 89 d8             	mov    %rbx,%rax
    2c9a:	48 89 c7             	mov    %rax,%rdi
    2c9d:	e8 00 00 00 00       	callq  2ca2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2ca2:	e8 00 00 00 00       	callq  2ca7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2ca7:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2cae:	5b                   	pop    %rbx
    2caf:	5d                   	pop    %rbp
    2cb0:	c3                   	retq   
    2cb1:	90                   	nop

0000000000002cb2 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2cb2:	55                   	push   %rbp
    2cb3:	48 89 e5             	mov    %rsp,%rbp
    2cb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2cba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2cbe:	90                   	nop
    2cbf:	5d                   	pop    %rbp
    2cc0:	c3                   	retq   
    2cc1:	90                   	nop

0000000000002cc2 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2cc2:	55                   	push   %rbp
    2cc3:	48 89 e5             	mov    %rsp,%rbp
    2cc6:	53                   	push   %rbx
    2cc7:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2cce:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2cd5:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2cdc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2ce3:	00 00 
    2ce5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2ce9:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2ceb:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2cf2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2cf9:	48 89 d6             	mov    %rdx,%rsi
    2cfc:	48 89 c7             	mov    %rax,%rdi
    2cff:	e8 00 00 00 00       	callq  2d04 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2d04:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2d0b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d12:	48 89 d6             	mov    %rdx,%rsi
    2d15:	48 89 c7             	mov    %rax,%rdi
    2d18:	e8 00 00 00 00       	callq  2d1d <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2d1d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d24:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d2b <_ZN6Parser11splitBlocksE7QString+0x69>
    2d2b:	48 89 c7             	mov    %rax,%rdi
    2d2e:	e8 00 00 00 00       	callq  2d33 <_ZN6Parser11splitBlocksE7QString+0x71>
    2d33:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2d3a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d41:	ba 01 00 00 00       	mov    $0x1,%edx
    2d46:	48 89 ce             	mov    %rcx,%rsi
    2d49:	48 89 c7             	mov    %rax,%rdi
    2d4c:	e8 00 00 00 00       	callq  2d51 <_ZN6Parser11splitBlocksE7QString+0x8f>
    2d51:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2d57:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d5e:	48 89 c7             	mov    %rax,%rdi
    2d61:	e8 00 00 00 00       	callq  2d66 <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2d66:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2d6d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d74 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2d74:	48 89 c7             	mov    %rax,%rdi
    2d77:	e8 00 00 00 00       	callq  2d7c <_ZN6Parser11splitBlocksE7QString+0xba>
    2d7c:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2d83:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d8a:	ba 01 00 00 00       	mov    $0x1,%edx
    2d8f:	48 89 ce             	mov    %rcx,%rsi
    2d92:	48 89 c7             	mov    %rax,%rdi
    2d95:	e8 00 00 00 00       	callq  2d9a <_ZN6Parser11splitBlocksE7QString+0xd8>
    2d9a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2da0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2da7:	48 89 c7             	mov    %rax,%rdi
    2daa:	e8 00 00 00 00       	callq  2daf <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2daf:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2db6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dbd <_ZN6Parser11splitBlocksE7QString+0xfb>
    2dbd:	48 89 c7             	mov    %rax,%rdi
    2dc0:	e8 00 00 00 00       	callq  2dc5 <_ZN6Parser11splitBlocksE7QString+0x103>
    2dc5:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2dcc:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2dd3:	ba 01 00 00 00       	mov    $0x1,%edx
    2dd8:	48 89 ce             	mov    %rcx,%rsi
    2ddb:	48 89 c7             	mov    %rax,%rdi
    2dde:	e8 00 00 00 00       	callq  2de3 <_ZN6Parser11splitBlocksE7QString+0x121>
    2de3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2de9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2df0:	48 89 c7             	mov    %rax,%rdi
    2df3:	e8 00 00 00 00       	callq  2df8 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2df8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2dff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e06 <_ZN6Parser11splitBlocksE7QString+0x144>
    2e06:	48 89 c7             	mov    %rax,%rdi
    2e09:	e8 00 00 00 00       	callq  2e0e <_ZN6Parser11splitBlocksE7QString+0x14c>
    2e0e:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2e15:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e1c:	ba 01 00 00 00       	mov    $0x1,%edx
    2e21:	48 89 ce             	mov    %rcx,%rsi
    2e24:	48 89 c7             	mov    %rax,%rdi
    2e27:	e8 00 00 00 00       	callq  2e2c <_ZN6Parser11splitBlocksE7QString+0x16a>
    2e2c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2e32:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e39:	48 89 c7             	mov    %rax,%rdi
    2e3c:	e8 00 00 00 00       	callq  2e41 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2e41:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2e47:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2e4d:	74 43                	je     2e92 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2e4f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e56:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e5d <_ZN6Parser11splitBlocksE7QString+0x19b>
    2e5d:	48 89 c7             	mov    %rax,%rdi
    2e60:	e8 00 00 00 00       	callq  2e65 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2e65:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2e6c:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2e73:	48 89 d6             	mov    %rdx,%rsi
    2e76:	48 89 c7             	mov    %rax,%rdi
    2e79:	e8 00 00 00 00       	callq  2e7e <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2e7e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e85:	48 89 c7             	mov    %rax,%rdi
    2e88:	e8 00 00 00 00       	callq  2e8d <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2e8d:	e9 cf 03 00 00       	jmpq   3261 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2e92:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2e98:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2e9e:	74 43                	je     2ee3 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2ea0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ea7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2eae <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2eae:	48 89 c7             	mov    %rax,%rdi
    2eb1:	e8 00 00 00 00       	callq  2eb6 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2eb6:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2ebd:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ec4:	48 89 d6             	mov    %rdx,%rsi
    2ec7:	48 89 c7             	mov    %rax,%rdi
    2eca:	e8 00 00 00 00       	callq  2ecf <_ZN6Parser11splitBlocksE7QString+0x20d>
    2ecf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ed6:	48 89 c7             	mov    %rax,%rdi
    2ed9:	e8 00 00 00 00       	callq  2ede <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2ede:	e9 7e 03 00 00       	jmpq   3261 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2ee3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2eea:	48 89 c7             	mov    %rax,%rdi
    2eed:	e8 00 00 00 00       	callq  2ef2 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2ef2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ef9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f00 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2f00:	48 89 c7             	mov    %rax,%rdi
    2f03:	e8 00 00 00 00       	callq  2f08 <_ZN6Parser11splitBlocksE7QString+0x246>
    2f08:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2f0f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f16:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f1b:	ba 01 00 00 00       	mov    $0x1,%edx
    2f20:	48 89 c7             	mov    %rax,%rdi
    2f23:	e8 00 00 00 00       	callq  2f28 <_ZN6Parser11splitBlocksE7QString+0x266>
    2f28:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f2f:	48 89 c7             	mov    %rax,%rdi
    2f32:	e8 00 00 00 00       	callq  2f37 <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2f37:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2f3e:	00 00 00 
    QString blockName;
    2f41:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2f45:	48 89 c7             	mov    %rax,%rdi
    2f48:	e8 00 00 00 00       	callq  2f4d <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2f4d:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2f54:	48 89 c7             	mov    %rax,%rdi
    2f57:	e8 00 00 00 00       	callq  2f5c <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2f5c:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2f63:	00 00 00 
    int     line     = 0;
    2f66:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2f6d:	00 00 00 
    QString block;
    2f70:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2f74:	48 89 c7             	mov    %rax,%rdi
    2f77:	e8 00 00 00 00       	callq  2f7c <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2f7c:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2f83:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f8a:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f8f:	ba 00 00 00 00       	mov    $0x0,%edx
    2f94:	48 89 c7             	mov    %rax,%rdi
    2f97:	e8 00 00 00 00       	callq  2f9c <_ZN6Parser11splitBlocksE7QString+0x2da>
    2f9c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2fa2:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2fa9:	0f 88 7b 02 00 00    	js     322a <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    2faf:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2fb5:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    2fbb:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2fbe:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2fc5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2fc9:	48 89 d6             	mov    %rdx,%rsi
    2fcc:	48 89 c7             	mov    %rax,%rdi
    2fcf:	e8 00 00 00 00       	callq  2fd4 <_ZN6Parser11splitBlocksE7QString+0x312>
    2fd4:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2fd8:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2fdf:	89 da                	mov    %ebx,%edx
    2fe1:	48 89 ce             	mov    %rcx,%rsi
    2fe4:	48 89 c7             	mov    %rax,%rdi
    2fe7:	e8 00 00 00 00       	callq  2fec <_ZN6Parser11splitBlocksE7QString+0x32a>
    2fec:	83 c0 01             	add    $0x1,%eax
    2fef:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    2ff5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2ff9:	48 89 c7             	mov    %rax,%rdi
    2ffc:	e8 00 00 00 00       	callq  3001 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    3001:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3005:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    300c:	ba 01 00 00 00       	mov    $0x1,%edx
    3011:	48 89 ce             	mov    %rcx,%rsi
    3014:	48 89 c7             	mov    %rax,%rdi
    3017:	e8 00 00 00 00       	callq  301c <_ZN6Parser11splitBlocksE7QString+0x35a>
    301c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3020:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3024:	48 89 d6             	mov    %rdx,%rsi
    3027:	48 89 c7             	mov    %rax,%rdi
    302a:	e8 00 00 00 00       	callq  302f <_ZN6Parser11splitBlocksE7QString+0x36d>
    302f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3033:	48 89 c7             	mov    %rax,%rdi
    3036:	e8 00 00 00 00       	callq  303b <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    303b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    303f:	be 7b 00 00 00       	mov    $0x7b,%esi
    3044:	48 89 c7             	mov    %rax,%rdi
    3047:	e8 00 00 00 00       	callq  304c <_ZN6Parser11splitBlocksE7QString+0x38a>
    304c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3052:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    3056:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    305d:	b9 01 00 00 00       	mov    $0x1,%ecx
    3062:	48 89 c7             	mov    %rax,%rdi
    3065:	e8 00 00 00 00       	callq  306a <_ZN6Parser11splitBlocksE7QString+0x3a8>
    306a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    3070:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    3076:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    307d:	89 d6                	mov    %edx,%esi
    307f:	48 89 c7             	mov    %rax,%rdi
    3082:	e8 00 00 00 00       	callq  3087 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    3087:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    308b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    308f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3093:	48 89 c7             	mov    %rax,%rdi
    3096:	e8 00 00 00 00       	callq  309b <_ZN6Parser11splitBlocksE7QString+0x3d9>
    309b:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    30a2:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    30a9:	00 00 00 
        int br=0;
    30ac:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    30b3:	00 00 00 

        while(bl != br)
    30b6:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    30bc:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    30c2:	0f 84 a2 00 00 00    	je     316a <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    30c8:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    30cf:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    30d5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30dc:	89 d6                	mov    %edx,%esi
    30de:	48 89 c7             	mov    %rax,%rdi
    30e1:	e8 00 00 00 00       	callq  30e6 <_ZN6Parser11splitBlocksE7QString+0x424>
    30e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    30ea:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    30ee:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    30f2:	48 89 c7             	mov    %rax,%rdi
    30f5:	e8 00 00 00 00       	callq  30fa <_ZN6Parser11splitBlocksE7QString+0x438>
    30fa:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    3101:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3105:	be 7b 00 00 00       	mov    $0x7b,%esi
    310a:	48 89 c7             	mov    %rax,%rdi
    310d:	e8 00 00 00 00       	callq  3112 <_ZN6Parser11splitBlocksE7QString+0x450>
    3112:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3116:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    311d:	89 d6                	mov    %edx,%esi
    311f:	89 c7                	mov    %eax,%edi
    3121:	e8 00 00 00 00       	callq  3126 <_ZN6Parser11splitBlocksE7QString+0x464>
    3126:	84 c0                	test   %al,%al
    3128:	74 07                	je     3131 <_ZN6Parser11splitBlocksE7QString+0x46f>
    312a:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    3131:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3135:	be 7d 00 00 00       	mov    $0x7d,%esi
    313a:	48 89 c7             	mov    %rax,%rdi
    313d:	e8 00 00 00 00       	callq  3142 <_ZN6Parser11splitBlocksE7QString+0x480>
    3142:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3146:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    314d:	89 d6                	mov    %edx,%esi
    314f:	89 c7                	mov    %eax,%edi
    3151:	e8 00 00 00 00       	callq  3156 <_ZN6Parser11splitBlocksE7QString+0x494>
    3156:	84 c0                	test   %al,%al
    3158:	0f 84 58 ff ff ff    	je     30b6 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    315e:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    3165:	e9 4c ff ff ff       	jmpq   30b6 <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    316a:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3170:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    3176:	89 c1                	mov    %eax,%ecx
    3178:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    317c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3182:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3189:	48 89 c7             	mov    %rax,%rdi
    318c:	e8 00 00 00 00       	callq  3191 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    3191:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3195:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3199:	48 89 d6             	mov    %rdx,%rsi
    319c:	48 89 c7             	mov    %rax,%rdi
    319f:	e8 00 00 00 00       	callq  31a4 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    31a4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31a8:	48 89 c7             	mov    %rax,%rdi
    31ab:	e8 00 00 00 00       	callq  31b0 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    31b0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31b7:	48 89 c7             	mov    %rax,%rdi
    31ba:	e8 00 00 00 00       	callq  31bf <_ZN6Parser11splitBlocksE7QString+0x4fd>
    31bf:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    31c5:	89 c2                	mov    %eax,%edx
    31c7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31cb:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    31d2:	48 89 ce             	mov    %rcx,%rsi
    31d5:	48 89 c7             	mov    %rax,%rdi
    31d8:	e8 00 00 00 00       	callq  31dd <_ZN6Parser11splitBlocksE7QString+0x51b>
    31dd:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    31e1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31e8:	48 89 d6             	mov    %rdx,%rsi
    31eb:	48 89 c7             	mov    %rax,%rdi
    31ee:	e8 00 00 00 00       	callq  31f3 <_ZN6Parser11splitBlocksE7QString+0x531>
    31f3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31f7:	48 89 c7             	mov    %rax,%rdi
    31fa:	e8 00 00 00 00       	callq  31ff <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    31ff:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3205:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    320b:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    3212:	48 8d 50 70          	lea    0x70(%rax),%rdx
    3216:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    321a:	48 89 c6             	mov    %rax,%rsi
    321d:	48 89 d7             	mov    %rdx,%rdi
    3220:	e8 00 00 00 00       	callq  3225 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    3225:	e9 52 fd ff ff       	jmpq   2f7c <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    322a:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    322b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    322f:	48 89 c7             	mov    %rax,%rdi
    3232:	e8 00 00 00 00       	callq  3237 <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3237:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    323b:	48 89 c7             	mov    %rax,%rdi
    323e:	e8 00 00 00 00       	callq  3243 <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3243:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    324a:	48 89 c7             	mov    %rax,%rdi
    324d:	e8 00 00 00 00       	callq  3252 <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    3252:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3259:	48 89 c7             	mov    %rax,%rdi
    325c:	e8 00 00 00 00       	callq  3261 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    3261:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3268:	48 89 c7             	mov    %rax,%rdi
    326b:	e8 00 00 00 00       	callq  3270 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3270:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3277:	48 89 c7             	mov    %rax,%rdi
    327a:	e8 00 00 00 00       	callq  327f <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    327f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3283:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    328a:	00 00 
    328c:	0f 84 7e 01 00 00    	je     3410 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3292:	e9 74 01 00 00       	jmpq   340b <_ZN6Parser11splitBlocksE7QString+0x749>
    3297:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    329a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    32a1:	48 89 c7             	mov    %rax,%rdi
    32a4:	e8 00 00 00 00       	callq  32a9 <_ZN6Parser11splitBlocksE7QString+0x5e7>
    32a9:	e9 2f 01 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    32ae:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    32b1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    32b8:	48 89 c7             	mov    %rax,%rdi
    32bb:	e8 00 00 00 00       	callq  32c0 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    32c0:	e9 18 01 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    32c5:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    32c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    32cf:	48 89 c7             	mov    %rax,%rdi
    32d2:	e8 00 00 00 00       	callq  32d7 <_ZN6Parser11splitBlocksE7QString+0x615>
    32d7:	e9 01 01 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    32dc:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    32df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    32e6:	48 89 c7             	mov    %rax,%rdi
    32e9:	e8 00 00 00 00       	callq  32ee <_ZN6Parser11splitBlocksE7QString+0x62c>
    32ee:	e9 ea 00 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    32f3:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    32f6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    32fd:	48 89 c7             	mov    %rax,%rdi
    3300:	e8 00 00 00 00       	callq  3305 <_ZN6Parser11splitBlocksE7QString+0x643>
    3305:	e9 d3 00 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    330a:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    330d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3314:	48 89 c7             	mov    %rax,%rdi
    3317:	e8 00 00 00 00       	callq  331c <_ZN6Parser11splitBlocksE7QString+0x65a>
    331c:	e9 bc 00 00 00       	jmpq   33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    3321:	48 89 c3             	mov    %rax,%rbx
    3324:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    332b:	48 89 c7             	mov    %rax,%rdi
    332e:	e8 00 00 00 00       	callq  3333 <_ZN6Parser11splitBlocksE7QString+0x671>
    3333:	e9 91 00 00 00       	jmpq   33c9 <_ZN6Parser11splitBlocksE7QString+0x707>
    3338:	48 89 c3             	mov    %rax,%rbx
    333b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3342:	48 89 c7             	mov    %rax,%rdi
    3345:	e8 00 00 00 00       	callq  334a <_ZN6Parser11splitBlocksE7QString+0x688>
    334a:	eb 7d                	jmp    33c9 <_ZN6Parser11splitBlocksE7QString+0x707>
    334c:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    334f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3353:	48 89 c7             	mov    %rax,%rdi
    3356:	e8 00 00 00 00       	callq  335b <_ZN6Parser11splitBlocksE7QString+0x699>
    335b:	eb 36                	jmp    3393 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    335d:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    3360:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3364:	48 89 c7             	mov    %rax,%rdi
    3367:	e8 00 00 00 00       	callq  336c <_ZN6Parser11splitBlocksE7QString+0x6aa>
    336c:	eb 25                	jmp    3393 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    336e:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3371:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3375:	48 89 c7             	mov    %rax,%rdi
    3378:	e8 00 00 00 00       	callq  337d <_ZN6Parser11splitBlocksE7QString+0x6bb>
    337d:	eb 14                	jmp    3393 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    337f:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    3382:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3386:	48 89 c7             	mov    %rax,%rdi
    3389:	e8 00 00 00 00       	callq  338e <_ZN6Parser11splitBlocksE7QString+0x6cc>
    338e:	eb 03                	jmp    3393 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3390:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3393:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3397:	48 89 c7             	mov    %rax,%rdi
    339a:	e8 00 00 00 00       	callq  339f <_ZN6Parser11splitBlocksE7QString+0x6dd>
    339f:	eb 03                	jmp    33a4 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    33a1:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    33a4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33a8:	48 89 c7             	mov    %rax,%rdi
    33ab:	e8 00 00 00 00       	callq  33b0 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    33b0:	eb 03                	jmp    33b5 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    33b2:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    33b5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33bc:	48 89 c7             	mov    %rax,%rdi
    33bf:	e8 00 00 00 00       	callq  33c4 <_ZN6Parser11splitBlocksE7QString+0x702>
    33c4:	eb 03                	jmp    33c9 <_ZN6Parser11splitBlocksE7QString+0x707>
    33c6:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    33c9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    33d0:	48 89 c7             	mov    %rax,%rdi
    33d3:	e8 00 00 00 00       	callq  33d8 <_ZN6Parser11splitBlocksE7QString+0x716>
    33d8:	eb 03                	jmp    33dd <_ZN6Parser11splitBlocksE7QString+0x71b>
    33da:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    33dd:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    33e4:	48 89 c7             	mov    %rax,%rdi
    33e7:	e8 00 00 00 00       	callq  33ec <_ZN6Parser11splitBlocksE7QString+0x72a>
    33ec:	eb 03                	jmp    33f1 <_ZN6Parser11splitBlocksE7QString+0x72f>
    33ee:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    33f1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    33f8:	48 89 c7             	mov    %rax,%rdi
    33fb:	e8 00 00 00 00       	callq  3400 <_ZN6Parser11splitBlocksE7QString+0x73e>
    3400:	48 89 d8             	mov    %rbx,%rax
    3403:	48 89 c7             	mov    %rax,%rdi
    3406:	e8 00 00 00 00       	callq  340b <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    340b:	e8 00 00 00 00       	callq  3410 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3410:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    3417:	5b                   	pop    %rbx
    3418:	5d                   	pop    %rbp
    3419:	c3                   	retq   

000000000000341a <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    341a:	55                   	push   %rbp
    341b:	48 89 e5             	mov    %rsp,%rbp
    341e:	53                   	push   %rbx
    341f:	48 83 ec 48          	sub    $0x48,%rsp
    3423:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    3427:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    342e:	00 00 
    3430:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3434:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    3436:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    343a:	48 89 c7             	mov    %rax,%rdi
    343d:	e8 00 00 00 00       	callq  3442 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    3442:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3446:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 344d <_ZN6Parser10globalSemsEv+0x33>
    344d:	48 89 c7             	mov    %rax,%rdi
    3450:	e8 00 00 00 00       	callq  3455 <_ZN6Parser10globalSemsEv+0x3b>
    3455:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3459:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    345d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3461:	48 89 ce             	mov    %rcx,%rsi
    3464:	48 89 c7             	mov    %rax,%rdi
    3467:	e8 00 00 00 00       	callq  346c <_ZN6Parser10globalSemsEv+0x52>
    346c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3470:	48 89 c7             	mov    %rax,%rdi
    3473:	e8 00 00 00 00       	callq  3478 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    3478:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    347c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3480:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    3484:	48 89 ce             	mov    %rcx,%rsi
    3487:	48 89 c7             	mov    %rax,%rdi
    348a:	e8 00 00 00 00       	callq  348f <_ZN6Parser10globalSemsEv+0x75>
    348f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3493:	48 89 c7             	mov    %rax,%rdi
    3496:	e8 00 00 00 00       	callq  349b <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    349b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    349f:	48 89 c7             	mov    %rax,%rdi
    34a2:	e8 00 00 00 00       	callq  34a7 <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34a7:	90                   	nop
    34a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34ac:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    34b3:	00 00 
    34b5:	74 32                	je     34e9 <_ZN6Parser10globalSemsEv+0xcf>
    34b7:	eb 2b                	jmp    34e4 <_ZN6Parser10globalSemsEv+0xca>
    34b9:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    34bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    34c0:	48 89 c7             	mov    %rax,%rdi
    34c3:	e8 00 00 00 00       	callq  34c8 <_ZN6Parser10globalSemsEv+0xae>
    34c8:	eb 03                	jmp    34cd <_ZN6Parser10globalSemsEv+0xb3>
    34ca:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34cd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34d1:	48 89 c7             	mov    %rax,%rdi
    34d4:	e8 00 00 00 00       	callq  34d9 <_ZN6Parser10globalSemsEv+0xbf>
    34d9:	48 89 d8             	mov    %rbx,%rax
    34dc:	48 89 c7             	mov    %rax,%rdi
    34df:	e8 00 00 00 00       	callq  34e4 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34e4:	e8 00 00 00 00       	callq  34e9 <_ZN6Parser10globalSemsEv+0xcf>
    34e9:	48 83 c4 48          	add    $0x48,%rsp
    34ed:	5b                   	pop    %rbx
    34ee:	5d                   	pop    %rbp
    34ef:	c3                   	retq   

00000000000034f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    34f0:	55                   	push   %rbp
    34f1:	48 89 e5             	mov    %rsp,%rbp
    34f4:	53                   	push   %rbx
    34f5:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    34fc:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    3503:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    350a:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    3510:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    3517:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    351e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3525:	00 00 
    3527:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    352b:	31 c0                	xor    %eax,%eax
        QByteArray result;
    352d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3534:	48 89 c7             	mov    %rax,%rdi
    3537:	e8 00 00 00 00       	callq  353c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    353c:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    3542:	0f be d0             	movsbl %al,%edx
    3545:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    354c:	89 d6                	mov    %edx,%esi
    354e:	48 89 c7             	mov    %rax,%rdi
    3551:	e8 00 00 00 00       	callq  3556 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    3556:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    355d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3564 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    3564:	48 89 c7             	mov    %rax,%rdi
    3567:	e8 00 00 00 00       	callq  356c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    356c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3573:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 357a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    357a:	48 89 c7             	mov    %rax,%rdi
    357d:	e8 00 00 00 00       	callq  3582 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    3582:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    3589:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    3590:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3597:	b9 01 00 00 00       	mov    $0x1,%ecx
    359c:	48 89 c7             	mov    %rax,%rdi
    359f:	e8 00 00 00 00       	callq  35a4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    35a4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35ab:	48 89 c7             	mov    %rax,%rdi
    35ae:	e8 00 00 00 00       	callq  35b3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    35b3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    35ba:	48 89 c7             	mov    %rax,%rdi
    35bd:	e8 00 00 00 00       	callq  35c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    35c2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    35c9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35d0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    35d0:	48 89 c7             	mov    %rax,%rdi
    35d3:	e8 00 00 00 00       	callq  35d8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    35d8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    35df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35e6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    35e6:	48 89 c7             	mov    %rax,%rdi
    35e9:	e8 00 00 00 00       	callq  35ee <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    35ee:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    35f5:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    35fc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3603:	b9 01 00 00 00       	mov    $0x1,%ecx
    3608:	48 89 c7             	mov    %rax,%rdi
    360b:	e8 00 00 00 00       	callq  3610 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    3610:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3617:	48 89 c7             	mov    %rax,%rdi
    361a:	e8 00 00 00 00       	callq  361f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    361f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3626:	48 89 c7             	mov    %rax,%rdi
    3629:	e8 00 00 00 00       	callq  362e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    362e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3635:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 363c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    363c:	48 89 c7             	mov    %rax,%rdi
    363f:	e8 00 00 00 00       	callq  3644 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    3644:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    364b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3652 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    3652:	48 89 c7             	mov    %rax,%rdi
    3655:	e8 00 00 00 00       	callq  365a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    365a:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    3661:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    3668:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    366f:	b9 01 00 00 00       	mov    $0x1,%ecx
    3674:	48 89 c7             	mov    %rax,%rdi
    3677:	e8 00 00 00 00       	callq  367c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    367c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3683:	48 89 c7             	mov    %rax,%rdi
    3686:	e8 00 00 00 00       	callq  368b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    368b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3692:	48 89 c7             	mov    %rax,%rdi
    3695:	e8 00 00 00 00       	callq  369a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    369a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    369e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36a5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    36a5:	48 89 c7             	mov    %rax,%rdi
    36a8:	e8 00 00 00 00       	callq  36ad <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    36ad:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36b1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36b8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    36b8:	48 89 c7             	mov    %rax,%rdi
    36bb:	e8 00 00 00 00       	callq  36c0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    36c0:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    36c4:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    36c8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36cf:	b9 00 00 00 00       	mov    $0x0,%ecx
    36d4:	48 89 c7             	mov    %rax,%rdi
    36d7:	e8 00 00 00 00       	callq  36dc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    36dc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36e0:	48 89 c7             	mov    %rax,%rdi
    36e3:	e8 00 00 00 00       	callq  36e8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    36e8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36ec:	48 89 c7             	mov    %rax,%rdi
    36ef:	e8 00 00 00 00       	callq  36f4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    36f4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    36f8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36ff <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    36ff:	48 89 c7             	mov    %rax,%rdi
    3702:	e8 00 00 00 00       	callq  3707 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    3707:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    370b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3712 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    3712:	48 89 c7             	mov    %rax,%rdi
    3715:	e8 00 00 00 00       	callq  371a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    371a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    371e:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3722:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3729:	b9 00 00 00 00       	mov    $0x0,%ecx
    372e:	48 89 c7             	mov    %rax,%rdi
    3731:	e8 00 00 00 00       	callq  3736 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    3736:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    373a:	48 89 c7             	mov    %rax,%rdi
    373d:	e8 00 00 00 00       	callq  3742 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    3742:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3746:	48 89 c7             	mov    %rax,%rdi
    3749:	e8 00 00 00 00       	callq  374e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    374e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3752:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3759 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    3759:	48 89 c7             	mov    %rax,%rdi
    375c:	e8 00 00 00 00       	callq  3761 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    3761:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3765:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3769:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    3770:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3776:	b9 00 00 00 00       	mov    $0x0,%ecx
    377b:	48 89 c7             	mov    %rax,%rdi
    377e:	e8 00 00 00 00       	callq  3783 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    3783:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3787:	48 89 c7             	mov    %rax,%rdi
    378a:	e8 00 00 00 00       	callq  378f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    378f:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    3796:	00 00 00 
    3799:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    379d:	48 89 c7             	mov    %rax,%rdi
    37a0:	e8 00 00 00 00       	callq  37a5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    37a5:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    37ab:	0f 9f c0             	setg   %al
    37ae:	84 c0                	test   %al,%al
    37b0:	74 6e                	je     3820 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    37b2:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    37b8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37bc:	89 d6                	mov    %edx,%esi
    37be:	48 89 c7             	mov    %rax,%rdi
    37c1:	e8 00 00 00 00       	callq  37c6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    37c6:	48 89 c7             	mov    %rax,%rdi
    37c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    37cd:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    37d3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    37da:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    37e1:	41 89 c8             	mov    %ecx,%r8d
    37e4:	48 89 d1             	mov    %rdx,%rcx
    37e7:	48 89 fa             	mov    %rdi,%rdx
    37ea:	48 89 c7             	mov    %rax,%rdi
    37ed:	e8 00 00 00 00       	callq  37f2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    37f2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    37f6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    37fd:	48 89 d6             	mov    %rdx,%rsi
    3800:	48 89 c7             	mov    %rax,%rdi
    3803:	e8 00 00 00 00       	callq  3808 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    3808:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    380c:	48 89 c7             	mov    %rax,%rdi
    380f:	e8 00 00 00 00       	callq  3814 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    3814:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    381b:	e9 79 ff ff ff       	jmpq   3799 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    3820:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3827:	48 89 c7             	mov    %rax,%rdi
    382a:	e8 00 00 00 00       	callq  382f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    382f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    3835:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    383c:	00 00 00 
    383f:	b8 1f 00 00 00       	mov    $0x1f,%eax
    3844:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    384a:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    3850:	7e 1d                	jle    386f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    3852:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3859:	be 00 00 00 00       	mov    $0x0,%esi
    385e:	48 89 c7             	mov    %rax,%rdi
    3861:	e8 00 00 00 00       	callq  3866 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    3866:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    386d:	eb d0                	jmp    383f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    386f:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    3875:	0f be d0             	movsbl %al,%edx
    3878:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    387f:	89 d6                	mov    %edx,%esi
    3881:	48 89 c7             	mov    %rax,%rdi
    3884:	e8 00 00 00 00       	callq  3889 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    3889:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    3890:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    3897:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    389e:	48 89 c6             	mov    %rax,%rsi
    38a1:	48 89 d7             	mov    %rdx,%rdi
    38a4:	e8 00 00 00 00       	callq  38a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    38a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    38ad:	48 89 c7             	mov    %rax,%rdi
    38b0:	e8 00 00 00 00       	callq  38b5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    38b5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38bc:	48 89 c7             	mov    %rax,%rdi
    38bf:	e8 00 00 00 00       	callq  38c4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    38c4:	90                   	nop
    38c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38c9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    38d0:	00 00 
    38d2:	0f 84 30 01 00 00    	je     3a08 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    38d8:	e9 26 01 00 00       	jmpq   3a03 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    38dd:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    38e0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    38e7:	48 89 c7             	mov    %rax,%rdi
    38ea:	e8 00 00 00 00       	callq  38ef <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    38ef:	eb 03                	jmp    38f4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    38f1:	48 89 c3             	mov    %rax,%rbx
    38f4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    38fb:	48 89 c7             	mov    %rax,%rdi
    38fe:	e8 00 00 00 00       	callq  3903 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    3903:	e9 e1 00 00 00       	jmpq   39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3908:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    390b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3912:	48 89 c7             	mov    %rax,%rdi
    3915:	e8 00 00 00 00       	callq  391a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    391a:	eb 03                	jmp    391f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    391c:	48 89 c3             	mov    %rax,%rbx
    391f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3926:	48 89 c7             	mov    %rax,%rdi
    3929:	e8 00 00 00 00       	callq  392e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    392e:	e9 b6 00 00 00       	jmpq   39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3933:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    3936:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    393d:	48 89 c7             	mov    %rax,%rdi
    3940:	e8 00 00 00 00       	callq  3945 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    3945:	eb 03                	jmp    394a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    3947:	48 89 c3             	mov    %rax,%rbx
    394a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3951:	48 89 c7             	mov    %rax,%rdi
    3954:	e8 00 00 00 00       	callq  3959 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    3959:	e9 8b 00 00 00       	jmpq   39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    395e:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3961:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3965:	48 89 c7             	mov    %rax,%rdi
    3968:	e8 00 00 00 00       	callq  396d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    396d:	eb 03                	jmp    3972 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    396f:	48 89 c3             	mov    %rax,%rbx
    3972:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3976:	48 89 c7             	mov    %rax,%rdi
    3979:	e8 00 00 00 00       	callq  397e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    397e:	eb 69                	jmp    39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3980:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3983:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3987:	48 89 c7             	mov    %rax,%rdi
    398a:	e8 00 00 00 00       	callq  398f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    398f:	eb 03                	jmp    3994 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    3991:	48 89 c3             	mov    %rax,%rbx
    3994:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3998:	48 89 c7             	mov    %rax,%rdi
    399b:	e8 00 00 00 00       	callq  39a0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    39a0:	eb 47                	jmp    39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39a2:	48 89 c3             	mov    %rax,%rbx
    39a5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39a9:	48 89 c7             	mov    %rax,%rdi
    39ac:	e8 00 00 00 00       	callq  39b1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    39b1:	eb 36                	jmp    39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39b3:	48 89 c3             	mov    %rax,%rbx
    39b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39ba:	48 89 c7             	mov    %rax,%rdi
    39bd:	e8 00 00 00 00       	callq  39c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    39c2:	eb 25                	jmp    39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39c4:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    39c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    39cb:	48 89 c7             	mov    %rax,%rdi
    39ce:	e8 00 00 00 00       	callq  39d3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    39d3:	eb 03                	jmp    39d8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    39d5:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    39d8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39dc:	48 89 c7             	mov    %rax,%rdi
    39df:	e8 00 00 00 00       	callq  39e4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    39e4:	eb 03                	jmp    39e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39e6:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    39e9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    39f0:	48 89 c7             	mov    %rax,%rdi
    39f3:	e8 00 00 00 00       	callq  39f8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    39f8:	48 89 d8             	mov    %rbx,%rax
    39fb:	48 89 c7             	mov    %rax,%rdi
    39fe:	e8 00 00 00 00       	callq  3a03 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3a03:	e8 00 00 00 00       	callq  3a08 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3a08:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3a0f:	5b                   	pop    %rbx
    3a10:	5d                   	pop    %rbp
    3a11:	c3                   	retq   

0000000000003a12 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3a12:	55                   	push   %rbp
    3a13:	48 89 e5             	mov    %rsp,%rbp
    3a16:	53                   	push   %rbx
    3a17:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3a1e:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3a25:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3a2c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3a33:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3a3a:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3a41:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a48:	00 00 
    3a4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a4e:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3a50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3a54:	be 20 00 00 00       	mov    $0x20,%esi
    3a59:	48 89 c7             	mov    %rax,%rdi
    3a5c:	e8 00 00 00 00       	callq  3a61 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3a61:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3a65:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3a6c:	b9 01 00 00 00       	mov    $0x1,%ecx
    3a71:	ba 00 00 00 00       	mov    $0x0,%edx
    3a76:	48 89 c7             	mov    %rax,%rdi
    3a79:	e8 00 00 00 00       	callq  3a7e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3a7e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3a84:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a8b:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3a91:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3a98:	89 d1                	mov    %edx,%ecx
    3a9a:	ba 00 00 00 00       	mov    $0x0,%edx
    3a9f:	48 89 c7             	mov    %rax,%rdi
    3aa2:	e8 00 00 00 00       	callq  3aa7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3aa7:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3aae:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3ab1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ab5:	be 28 00 00 00       	mov    $0x28,%esi
    3aba:	48 89 c7             	mov    %rax,%rdi
    3abd:	e8 00 00 00 00       	callq  3ac2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3ac2:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3ac8:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3acc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3ad3:	b9 01 00 00 00       	mov    $0x1,%ecx
    3ad8:	48 89 c7             	mov    %rax,%rdi
    3adb:	e8 00 00 00 00       	callq  3ae0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3ae0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3ae6:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3aec:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3af2:	89 c1                	mov    %eax,%ecx
    3af4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3af8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3afe:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b05:	48 89 c7             	mov    %rax,%rdi
    3b08:	e8 00 00 00 00       	callq  3b0d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3b0d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b11:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b15:	48 89 d6             	mov    %rdx,%rsi
    3b18:	48 89 c7             	mov    %rax,%rdi
    3b1b:	e8 00 00 00 00       	callq  3b20 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3b20:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b24:	48 89 c7             	mov    %rax,%rdi
    3b27:	e8 00 00 00 00       	callq  3b2c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3b2c:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b32:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3b38:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b3c:	be 29 00 00 00       	mov    $0x29,%esi
    3b41:	48 89 c7             	mov    %rax,%rdi
    3b44:	e8 00 00 00 00       	callq  3b49 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3b49:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b4f:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b53:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b5a:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b5f:	48 89 c7             	mov    %rax,%rdi
    3b62:	e8 00 00 00 00       	callq  3b67 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3b67:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3b6d:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b73:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b79:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3b7c:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3b82:	8d 50 01             	lea    0x1(%rax),%edx
    3b85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3b89:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b90:	48 89 c7             	mov    %rax,%rdi
    3b93:	e8 00 00 00 00       	callq  3b98 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3b98:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3b9c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ba3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3ba3:	48 89 c7             	mov    %rax,%rdi
    3ba6:	e8 00 00 00 00       	callq  3bab <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3bab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3baf:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3bb3:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3bb7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3bbd:	b9 01 00 00 00       	mov    $0x1,%ecx
    3bc2:	48 89 c7             	mov    %rax,%rdi
    3bc5:	e8 00 00 00 00       	callq  3bca <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3bca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bce:	48 89 c7             	mov    %rax,%rdi
    3bd1:	e8 00 00 00 00       	callq  3bd6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3bd6:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3bda:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3bde:	48 89 d6             	mov    %rdx,%rsi
    3be1:	48 89 c7             	mov    %rax,%rdi
    3be4:	e8 00 00 00 00       	callq  3be9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3be9:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3bed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3bf1:	48 89 d6             	mov    %rdx,%rsi
    3bf4:	48 89 c7             	mov    %rax,%rdi
    3bf7:	e8 00 00 00 00       	callq  3bfc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3bfc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c03:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3c0a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3c11:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3c15:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c19:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3c20:	45 89 c1             	mov    %r8d,%r9d
    3c23:	49 89 f8             	mov    %rdi,%r8
    3c26:	48 89 c7             	mov    %rax,%rdi
    3c29:	e8 00 00 00 00       	callq  3c2e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3c2e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c32:	48 89 c7             	mov    %rax,%rdi
    3c35:	e8 00 00 00 00       	callq  3c3a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3c3a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c3e:	48 89 c7             	mov    %rax,%rdi
    3c41:	e8 00 00 00 00       	callq  3c46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3c46:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c47:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c4b:	48 89 c7             	mov    %rax,%rdi
    3c4e:	e8 00 00 00 00       	callq  3c53 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3c53:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3c57:	48 89 c7             	mov    %rax,%rdi
    3c5a:	e8 00 00 00 00       	callq  3c5f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3c5f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3c63:	48 89 c7             	mov    %rax,%rdi
    3c66:	e8 00 00 00 00       	callq  3c6b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3c6b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3c72:	48 89 c7             	mov    %rax,%rdi
    3c75:	e8 00 00 00 00       	callq  3c7a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3c7a:	90                   	nop
}
    3c7b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3c86:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3c8d:	00 00 
    3c8f:	0f 84 ee 00 00 00    	je     3d83 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3c95:	e9 e4 00 00 00       	jmpq   3d7e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3c9a:	48 89 c3             	mov    %rax,%rbx
    3c9d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ca1:	48 89 c7             	mov    %rax,%rdi
    3ca4:	e8 00 00 00 00       	callq  3ca9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3ca9:	e9 b6 00 00 00       	jmpq   3d64 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cae:	48 89 c3             	mov    %rax,%rbx
    3cb1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3cb5:	48 89 c7             	mov    %rax,%rdi
    3cb8:	e8 00 00 00 00       	callq  3cbd <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3cbd:	e9 a2 00 00 00       	jmpq   3d64 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cc2:	48 89 c3             	mov    %rax,%rbx
    3cc5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3cc9:	48 89 c7             	mov    %rax,%rdi
    3ccc:	e8 00 00 00 00       	callq  3cd1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3cd1:	eb 6f                	jmp    3d42 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3cd3:	48 89 c3             	mov    %rax,%rbx
    3cd6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3cda:	48 89 c7             	mov    %rax,%rdi
    3cdd:	e8 00 00 00 00       	callq  3ce2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3ce2:	eb 5e                	jmp    3d42 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3ce4:	48 89 c3             	mov    %rax,%rbx
    3ce7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3ceb:	48 89 c7             	mov    %rax,%rdi
    3cee:	e8 00 00 00 00       	callq  3cf3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3cf3:	eb 17                	jmp    3d0c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3cf5:	48 89 c3             	mov    %rax,%rbx
    3cf8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3cff:	48 89 c7             	mov    %rax,%rdi
    3d02:	e8 00 00 00 00       	callq  3d07 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3d07:	eb 03                	jmp    3d0c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d09:	48 89 c3             	mov    %rax,%rbx
    3d0c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d10:	48 89 c7             	mov    %rax,%rdi
    3d13:	e8 00 00 00 00       	callq  3d18 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3d18:	eb 17                	jmp    3d31 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d1a:	48 89 c3             	mov    %rax,%rbx
    3d1d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d24:	48 89 c7             	mov    %rax,%rdi
    3d27:	e8 00 00 00 00       	callq  3d2c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3d2c:	eb 03                	jmp    3d31 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d2e:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d31:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d35:	48 89 c7             	mov    %rax,%rdi
    3d38:	e8 00 00 00 00       	callq  3d3d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3d3d:	eb 03                	jmp    3d42 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d3f:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d42:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d46:	48 89 c7             	mov    %rax,%rdi
    3d49:	e8 00 00 00 00       	callq  3d4e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3d4e:	eb 03                	jmp    3d53 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3d50:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3d53:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d57:	48 89 c7             	mov    %rax,%rdi
    3d5a:	e8 00 00 00 00       	callq  3d5f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3d5f:	eb 03                	jmp    3d64 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d61:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3d64:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d6b:	48 89 c7             	mov    %rax,%rdi
    3d6e:	e8 00 00 00 00       	callq  3d73 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3d73:	48 89 d8             	mov    %rbx,%rax
    3d76:	48 89 c7             	mov    %rax,%rdi
    3d79:	e8 00 00 00 00       	callq  3d7e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3d7e:	e8 00 00 00 00       	callq  3d83 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3d83:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3d8a:	5b                   	pop    %rbx
    3d8b:	5d                   	pop    %rbp
    3d8c:	c3                   	retq   
    3d8d:	90                   	nop

0000000000003d8e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3d8e:	55                   	push   %rbp
    3d8f:	48 89 e5             	mov    %rsp,%rbp
    3d92:	53                   	push   %rbx
    3d93:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3d9a:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3da1:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3da8:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3daf:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3db6:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3dbd:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3dc4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3dcb:	00 00 
    3dcd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3dd1:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3dd3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3dda:	48 89 c7             	mov    %rax,%rdi
    3ddd:	e8 00 00 00 00       	callq  3de2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3de2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3de9:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3def:	ba 0a 00 00 00       	mov    $0xa,%edx
    3df4:	89 ce                	mov    %ecx,%esi
    3df6:	48 89 c7             	mov    %rax,%rdi
    3df9:	e8 00 00 00 00       	callq  3dfe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3dfe:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e05:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e0c:	48 89 d6             	mov    %rdx,%rsi
    3e0f:	48 89 c7             	mov    %rax,%rdi
    3e12:	e8 00 00 00 00       	callq  3e17 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3e17:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3e1e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e25:	48 89 d6             	mov    %rdx,%rsi
    3e28:	48 89 c7             	mov    %rax,%rdi
    3e2b:	e8 00 00 00 00       	callq  3e30 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3e30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e37:	48 89 c7             	mov    %rax,%rdi
    3e3a:	e8 00 00 00 00       	callq  3e3f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3e3f:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e46:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e4d:	48 89 d6             	mov    %rdx,%rsi
    3e50:	48 89 c7             	mov    %rax,%rdi
    3e53:	e8 00 00 00 00       	callq  3e58 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3e58:	83 f0 01             	xor    $0x1,%eax
    3e5b:	84 c0                	test   %al,%al
    3e5d:	0f 84 b5 00 00 00    	je     3f18 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3e63:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e6a:	48 89 c7             	mov    %rax,%rdi
    3e6d:	e8 00 00 00 00       	callq  3e72 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3e72:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3e78:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3e7f:	0f 8e c0 00 00 00    	jle    3f45 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3e85:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3e8c:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e93:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e9a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3e9a:	48 89 c7             	mov    %rax,%rdi
    3e9d:	e8 00 00 00 00       	callq  3ea2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3ea2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ea6:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3ead:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3eb4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3eb4:	48 89 ce             	mov    %rcx,%rsi
    3eb7:	48 89 c7             	mov    %rax,%rdi
    3eba:	e8 00 00 00 00       	callq  3ebf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3ebf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ec3:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3eca:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3ece:	48 89 ce             	mov    %rcx,%rsi
    3ed1:	48 89 c7             	mov    %rax,%rdi
    3ed4:	e8 00 00 00 00       	callq  3ed9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3ed9:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3edd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3ee4:	48 89 d6             	mov    %rdx,%rsi
    3ee7:	48 89 c7             	mov    %rax,%rdi
    3eea:	e8 00 00 00 00       	callq  3eef <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3eef:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ef3:	48 89 c7             	mov    %rax,%rdi
    3ef6:	e8 00 00 00 00       	callq  3efb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3efb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3eff:	48 89 c7             	mov    %rax,%rdi
    3f02:	e8 00 00 00 00       	callq  3f07 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3f07:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f0e:	48 89 c7             	mov    %rax,%rdi
    3f11:	e8 00 00 00 00       	callq  3f16 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3f16:	eb 2d                	jmp    3f45 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3f18:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f1f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f26:	48 89 d6             	mov    %rdx,%rsi
    3f29:	48 89 c7             	mov    %rax,%rdi
    3f2c:	e8 00 00 00 00       	callq  3f31 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3f31:	0f be d0             	movsbl %al,%edx
    3f34:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f3b:	89 d6                	mov    %edx,%esi
    3f3d:	48 89 c7             	mov    %rax,%rdi
    3f40:	e8 00 00 00 00       	callq  3f45 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3f45:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3f4c:	00 00 00 
    3f4f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f56:	48 89 c7             	mov    %rax,%rdi
    3f59:	e8 00 00 00 00       	callq  3f5e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3f5e:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3f64:	0f 9f c0             	setg   %al
    3f67:	84 c0                	test   %al,%al
    3f69:	0f 84 e2 02 00 00    	je     4251 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3f6f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f76:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3f7c:	89 d6                	mov    %edx,%esi
    3f7e:	48 89 c7             	mov    %rax,%rdi
    3f81:	e8 00 00 00 00       	callq  3f86 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3f86:	48 89 c2             	mov    %rax,%rdx
    3f89:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f90:	48 89 d6             	mov    %rdx,%rsi
    3f93:	48 89 c7             	mov    %rax,%rdi
    3f96:	e8 00 00 00 00       	callq  3f9b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3f9b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fa2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fa9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3fa9:	48 89 c7             	mov    %rax,%rdi
    3fac:	e8 00 00 00 00       	callq  3fb1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3fb1:	84 c0                	test   %al,%al
    3fb3:	74 19                	je     3fce <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3fb5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3fbc:	be 19 00 00 00       	mov    $0x19,%esi
    3fc1:	48 89 c7             	mov    %rax,%rdi
    3fc4:	e8 00 00 00 00       	callq  3fc9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3fc9:	e9 68 02 00 00       	jmpq   4236 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    3fce:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3fd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3fd9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fe0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3fe0:	48 89 c7             	mov    %rax,%rdi
    3fe3:	e8 00 00 00 00       	callq  3fe8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    3fe8:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3fec:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ff3:	b9 01 00 00 00       	mov    $0x1,%ecx
    3ff8:	ba 00 00 00 00       	mov    $0x0,%edx
    3ffd:	48 89 c7             	mov    %rax,%rdi
    4000:	e8 00 00 00 00       	callq  4005 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    4005:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    400b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    400f:	48 89 c7             	mov    %rax,%rdi
    4012:	e8 00 00 00 00       	callq  4017 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    4017:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    401b:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    4021:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4028:	48 89 ce             	mov    %rcx,%rsi
    402b:	48 89 c7             	mov    %rax,%rdi
    402e:	e8 00 00 00 00       	callq  4033 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    4033:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4037:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    403b:	48 89 d6             	mov    %rdx,%rsi
    403e:	48 89 c7             	mov    %rax,%rdi
    4041:	e8 00 00 00 00       	callq  4046 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    4046:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    404a:	48 89 c7             	mov    %rax,%rdi
    404d:	e8 00 00 00 00       	callq  4052 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4052:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4059:	48 89 c7             	mov    %rax,%rdi
    405c:	e8 00 00 00 00       	callq  4061 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    4061:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    4067:	8d 50 ff             	lea    -0x1(%rax),%edx
    406a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    406e:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4075:	48 89 ce             	mov    %rcx,%rsi
    4078:	48 89 c7             	mov    %rax,%rdi
    407b:	e8 00 00 00 00       	callq  4080 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    4080:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4084:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    4088:	48 89 d6             	mov    %rdx,%rsi
    408b:	48 89 c7             	mov    %rax,%rdi
    408e:	e8 00 00 00 00       	callq  4093 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    4093:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4097:	48 89 c7             	mov    %rax,%rdi
    409a:	e8 00 00 00 00       	callq  409f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    409f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40aa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    40aa:	48 89 c7             	mov    %rax,%rdi
    40ad:	e8 00 00 00 00       	callq  40b2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    40b2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40b6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40bd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    40bd:	48 89 c7             	mov    %rax,%rdi
    40c0:	e8 00 00 00 00       	callq  40c5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    40c5:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40c9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    40d0:	48 89 d6             	mov    %rdx,%rsi
    40d3:	48 89 c7             	mov    %rax,%rdi
    40d6:	e8 00 00 00 00       	callq  40db <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    40db:	83 f0 01             	xor    $0x1,%eax
    40de:	84 c0                	test   %al,%al
    40e0:	74 38                	je     411a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    40e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    40e6:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40f1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    40f1:	48 89 c7             	mov    %rax,%rdi
    40f4:	e8 00 00 00 00       	callq  40f9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    40f9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    40fd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4101:	48 89 d6             	mov    %rdx,%rsi
    4104:	48 89 c7             	mov    %rax,%rdi
    4107:	e8 00 00 00 00       	callq  410c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    410c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4110:	48 89 c7             	mov    %rax,%rdi
    4113:	e8 00 00 00 00       	callq  4118 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    4118:	eb 74                	jmp    418e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    411a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    411e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4125:	48 89 d6             	mov    %rdx,%rsi
    4128:	48 89 c7             	mov    %rax,%rdi
    412b:	e8 00 00 00 00       	callq  4130 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    4130:	0f be d0             	movsbl %al,%edx
    4133:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    413a:	89 d6                	mov    %edx,%esi
    413c:	48 89 c7             	mov    %rax,%rdi
    413f:	e8 00 00 00 00       	callq  4144 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    4144:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4148:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    414f:	48 89 d6             	mov    %rdx,%rsi
    4152:	48 89 c7             	mov    %rax,%rdi
    4155:	e8 00 00 00 00       	callq  415a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    415a:	89 c1                	mov    %eax,%ecx
    415c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4160:	ba 0a 00 00 00       	mov    $0xa,%edx
    4165:	89 ce                	mov    %ecx,%esi
    4167:	48 89 c7             	mov    %rax,%rdi
    416a:	e8 00 00 00 00       	callq  416f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    416f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4173:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4177:	48 89 d6             	mov    %rdx,%rsi
    417a:	48 89 c7             	mov    %rax,%rdi
    417d:	e8 00 00 00 00       	callq  4182 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    4182:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4186:	48 89 c7             	mov    %rax,%rdi
    4189:	e8 00 00 00 00       	callq  418e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    418e:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    4192:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4199:	48 89 d6             	mov    %rdx,%rsi
    419c:	48 89 c7             	mov    %rax,%rdi
    419f:	e8 00 00 00 00       	callq  41a4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    41a4:	83 f0 01             	xor    $0x1,%eax
    41a7:	84 c0                	test   %al,%al
    41a9:	74 31                	je     41dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    41ab:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    41b2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    41b6:	ba 0a 00 00 00       	mov    $0xa,%edx
    41bb:	48 89 ce             	mov    %rcx,%rsi
    41be:	48 89 c7             	mov    %rax,%rdi
    41c1:	e8 00 00 00 00       	callq  41c6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    41c6:	0f be d0             	movsbl %al,%edx
    41c9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    41d0:	89 d6                	mov    %edx,%esi
    41d2:	48 89 c7             	mov    %rax,%rdi
    41d5:	e8 00 00 00 00       	callq  41da <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    41da:	eb 2a                	jmp    4206 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    41dc:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41e0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41e7:	48 89 d6             	mov    %rdx,%rsi
    41ea:	48 89 c7             	mov    %rax,%rdi
    41ed:	e8 00 00 00 00       	callq  41f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    41f2:	0f be d0             	movsbl %al,%edx
    41f5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    41fc:	89 d6                	mov    %edx,%esi
    41fe:	48 89 c7             	mov    %rax,%rdi
    4201:	e8 00 00 00 00       	callq  4206 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4206:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    420a:	48 89 c7             	mov    %rax,%rdi
    420d:	e8 00 00 00 00       	callq  4212 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4212:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4216:	48 89 c7             	mov    %rax,%rdi
    4219:	e8 00 00 00 00       	callq  421e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    421e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4222:	48 89 c7             	mov    %rax,%rdi
    4225:	e8 00 00 00 00       	callq  422a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    422a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    422e:	48 89 c7             	mov    %rax,%rdi
    4231:	e8 00 00 00 00       	callq  4236 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4236:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    423d:	48 89 c7             	mov    %rax,%rdi
    4240:	e8 00 00 00 00       	callq  4245 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4245:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    424c:	e9 fe fc ff ff       	jmpq   3f4f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4251:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4252:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4259:	48 89 c7             	mov    %rax,%rdi
    425c:	e8 00 00 00 00       	callq  4261 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4261:	e9 59 01 00 00       	jmpq   43bf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    4266:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    4269:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4270:	48 89 c7             	mov    %rax,%rdi
    4273:	e8 00 00 00 00       	callq  4278 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    4278:	e9 14 01 00 00       	jmpq   4391 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    427d:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    4280:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4284:	48 89 c7             	mov    %rax,%rdi
    4287:	e8 00 00 00 00       	callq  428c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    428c:	eb 03                	jmp    4291 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    428e:	48 89 c3             	mov    %rax,%rbx
    4291:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4295:	48 89 c7             	mov    %rax,%rdi
    4298:	e8 00 00 00 00       	callq  429d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    429d:	eb 03                	jmp    42a2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    429f:	48 89 c3             	mov    %rax,%rbx
    42a2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42a9:	48 89 c7             	mov    %rax,%rdi
    42ac:	e8 00 00 00 00       	callq  42b1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    42b1:	e9 db 00 00 00       	jmpq   4391 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    42b6:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    42b9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    42bd:	48 89 c7             	mov    %rax,%rdi
    42c0:	e8 00 00 00 00       	callq  42c5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    42c5:	e9 b3 00 00 00       	jmpq   437d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42ca:	48 89 c3             	mov    %rax,%rbx
    42cd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42d1:	48 89 c7             	mov    %rax,%rdi
    42d4:	e8 00 00 00 00       	callq  42d9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    42d9:	e9 9f 00 00 00       	jmpq   437d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42de:	48 89 c3             	mov    %rax,%rbx
    42e1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42e5:	48 89 c7             	mov    %rax,%rdi
    42e8:	e8 00 00 00 00       	callq  42ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    42ed:	e9 8b 00 00 00       	jmpq   437d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42f2:	48 89 c3             	mov    %rax,%rbx
    42f5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    42f9:	48 89 c7             	mov    %rax,%rdi
    42fc:	e8 00 00 00 00       	callq  4301 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    4301:	eb 69                	jmp    436c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4303:	48 89 c3             	mov    %rax,%rbx
    4306:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    430a:	48 89 c7             	mov    %rax,%rdi
    430d:	e8 00 00 00 00       	callq  4312 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    4312:	eb 58                	jmp    436c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4314:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    4317:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    431b:	48 89 c7             	mov    %rax,%rdi
    431e:	e8 00 00 00 00       	callq  4323 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    4323:	eb 14                	jmp    4339 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4325:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    4328:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    432c:	48 89 c7             	mov    %rax,%rdi
    432f:	e8 00 00 00 00       	callq  4334 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    4334:	eb 03                	jmp    4339 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4336:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4339:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    433d:	48 89 c7             	mov    %rax,%rdi
    4340:	e8 00 00 00 00       	callq  4345 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    4345:	eb 03                	jmp    434a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    4347:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    434a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    434e:	48 89 c7             	mov    %rax,%rdi
    4351:	e8 00 00 00 00       	callq  4356 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    4356:	eb 03                	jmp    435b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    4358:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    435b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    435f:	48 89 c7             	mov    %rax,%rdi
    4362:	e8 00 00 00 00       	callq  4367 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    4367:	eb 03                	jmp    436c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4369:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    436c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4370:	48 89 c7             	mov    %rax,%rdi
    4373:	e8 00 00 00 00       	callq  4378 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    4378:	eb 03                	jmp    437d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    437a:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    437d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4384:	48 89 c7             	mov    %rax,%rdi
    4387:	e8 00 00 00 00       	callq  438c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    438c:	eb 03                	jmp    4391 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    438e:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4391:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4398:	48 89 c7             	mov    %rax,%rdi
    439b:	e8 00 00 00 00       	callq  43a0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    43a0:	eb 03                	jmp    43a5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    43a2:	48 89 c3             	mov    %rax,%rbx
    43a5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43ac:	48 89 c7             	mov    %rax,%rdi
    43af:	e8 00 00 00 00       	callq  43b4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    43b4:	48 89 d8             	mov    %rbx,%rax
    43b7:	48 89 c7             	mov    %rax,%rdi
    43ba:	e8 00 00 00 00       	callq  43bf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    43bf:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    43ca:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    43d1:	00 00 
    43d3:	74 05                	je     43da <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43d5:	e8 00 00 00 00       	callq  43da <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43da:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    43e1:	5b                   	pop    %rbx
    43e2:	5d                   	pop    %rbp
    43e3:	c3                   	retq   

00000000000043e4 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    43e4:	55                   	push   %rbp
    43e5:	48 89 e5             	mov    %rsp,%rbp
    43e8:	53                   	push   %rbx
    43e9:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    43f0:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    43f7:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    43fe:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    4405:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    440c:	00 00 
    440e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4412:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4414:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    441b:	48 89 c7             	mov    %rax,%rdi
    441e:	e8 00 00 00 00       	callq  4423 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4423:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    442a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4431 <_ZN6Parser11compileAtomE7QString+0x4d>
    4431:	48 89 c7             	mov    %rax,%rdi
    4434:	e8 00 00 00 00       	callq  4439 <_ZN6Parser11compileAtomE7QString+0x55>
    4439:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    4440:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4447:	b9 00 00 00 00       	mov    $0x0,%ecx
    444c:	ba 01 00 00 00       	mov    $0x1,%edx
    4451:	48 89 c7             	mov    %rax,%rdi
    4454:	e8 00 00 00 00       	callq  4459 <_ZN6Parser11compileAtomE7QString+0x75>
    4459:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4460:	48 89 c7             	mov    %rax,%rdi
    4463:	e8 00 00 00 00       	callq  4468 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    4468:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    446f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4476 <_ZN6Parser11compileAtomE7QString+0x92>
    4476:	48 89 c7             	mov    %rax,%rdi
    4479:	e8 00 00 00 00       	callq  447e <_ZN6Parser11compileAtomE7QString+0x9a>
    447e:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    4485:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    448c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4491:	ba 01 00 00 00       	mov    $0x1,%edx
    4496:	48 89 c7             	mov    %rax,%rdi
    4499:	e8 00 00 00 00       	callq  449e <_ZN6Parser11compileAtomE7QString+0xba>
    449e:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44a5:	48 89 c7             	mov    %rax,%rdi
    44a8:	e8 00 00 00 00       	callq  44ad <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    44ad:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 44bb <_ZN6Parser11compileAtomE7QString+0xd7>
    44bb:	48 89 c7             	mov    %rax,%rdi
    44be:	e8 00 00 00 00       	callq  44c3 <_ZN6Parser11compileAtomE7QString+0xdf>
    44c3:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    44ca:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    44d1:	b9 00 00 00 00       	mov    $0x0,%ecx
    44d6:	ba 01 00 00 00       	mov    $0x1,%edx
    44db:	48 89 c7             	mov    %rax,%rdi
    44de:	e8 00 00 00 00       	callq  44e3 <_ZN6Parser11compileAtomE7QString+0xff>
    44e3:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44ea:	48 89 c7             	mov    %rax,%rdi
    44ed:	e8 00 00 00 00       	callq  44f2 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    44f2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    44f6:	48 89 c7             	mov    %rax,%rdi
    44f9:	e8 00 00 00 00       	callq  44fe <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    44fe:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4505:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4509:	48 89 d6             	mov    %rdx,%rsi
    450c:	48 89 c7             	mov    %rax,%rdi
    450f:	e8 00 00 00 00       	callq  4514 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    4514:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    451b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    451f:	48 89 d6             	mov    %rdx,%rsi
    4522:	48 89 c7             	mov    %rax,%rdi
    4525:	e8 00 00 00 00       	callq  452a <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    452a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4531:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4538 <_ZN6Parser11compileAtomE7QString+0x154>
    4538:	48 89 c7             	mov    %rax,%rdi
    453b:	e8 00 00 00 00       	callq  4540 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    4540:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    4547:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    454e:	b9 00 00 00 00       	mov    $0x0,%ecx
    4553:	ba 01 00 00 00       	mov    $0x1,%edx
    4558:	48 89 c7             	mov    %rax,%rdi
    455b:	e8 00 00 00 00       	callq  4560 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4560:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4567:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 456e <_ZN6Parser11compileAtomE7QString+0x18a>
    456e:	48 89 c7             	mov    %rax,%rdi
    4571:	e8 00 00 00 00       	callq  4576 <_ZN6Parser11compileAtomE7QString+0x192>
    4576:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    457d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4584:	b9 00 00 00 00       	mov    $0x0,%ecx
    4589:	ba 01 00 00 00       	mov    $0x1,%edx
    458e:	48 89 c7             	mov    %rax,%rdi
    4591:	e8 00 00 00 00       	callq  4596 <_ZN6Parser11compileAtomE7QString+0x1b2>
    4596:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    459d:	48 89 c7             	mov    %rax,%rdi
    45a0:	e8 00 00 00 00       	callq  45a5 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    45a5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45ac:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45b3 <_ZN6Parser11compileAtomE7QString+0x1cf>
    45b3:	48 89 c7             	mov    %rax,%rdi
    45b6:	e8 00 00 00 00       	callq  45bb <_ZN6Parser11compileAtomE7QString+0x1d7>
    45bb:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    45c2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    45c9:	b9 00 00 00 00       	mov    $0x0,%ecx
    45ce:	ba 01 00 00 00       	mov    $0x1,%edx
    45d3:	48 89 c7             	mov    %rax,%rdi
    45d6:	e8 00 00 00 00       	callq  45db <_ZN6Parser11compileAtomE7QString+0x1f7>
    45db:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45e2:	48 89 c7             	mov    %rax,%rdi
    45e5:	e8 00 00 00 00       	callq  45ea <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    45ea:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    45f1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45f8 <_ZN6Parser11compileAtomE7QString+0x214>
    45f8:	48 89 c7             	mov    %rax,%rdi
    45fb:	e8 00 00 00 00       	callq  4600 <_ZN6Parser11compileAtomE7QString+0x21c>
    4600:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    4607:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    460e:	b9 00 00 00 00       	mov    $0x0,%ecx
    4613:	ba 01 00 00 00       	mov    $0x1,%edx
    4618:	48 89 c7             	mov    %rax,%rdi
    461b:	e8 00 00 00 00       	callq  4620 <_ZN6Parser11compileAtomE7QString+0x23c>
    4620:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4627:	48 89 c7             	mov    %rax,%rdi
    462a:	e8 00 00 00 00       	callq  462f <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    462f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4636:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 463d <_ZN6Parser11compileAtomE7QString+0x259>
    463d:	48 89 c7             	mov    %rax,%rdi
    4640:	e8 00 00 00 00       	callq  4645 <_ZN6Parser11compileAtomE7QString+0x261>
    4645:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    464c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4653:	b9 00 00 00 00       	mov    $0x0,%ecx
    4658:	ba 01 00 00 00       	mov    $0x1,%edx
    465d:	48 89 c7             	mov    %rax,%rdi
    4660:	e8 00 00 00 00       	callq  4665 <_ZN6Parser11compileAtomE7QString+0x281>
    4665:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    466c:	48 89 c7             	mov    %rax,%rdi
    466f:	e8 00 00 00 00       	callq  4674 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4674:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4678:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    467f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4686 <_ZN6Parser11compileAtomE7QString+0x2a2>
    4686:	48 89 c7             	mov    %rax,%rdi
    4689:	e8 00 00 00 00       	callq  468e <_ZN6Parser11compileAtomE7QString+0x2aa>
    468e:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    4692:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4699:	b9 00 00 00 00       	mov    $0x0,%ecx
    469e:	ba 01 00 00 00       	mov    $0x1,%edx
    46a3:	48 89 c7             	mov    %rax,%rdi
    46a6:	e8 00 00 00 00       	callq  46ab <_ZN6Parser11compileAtomE7QString+0x2c7>
    46ab:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46af:	48 89 c7             	mov    %rax,%rdi
    46b2:	e8 00 00 00 00       	callq  46b7 <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    46b7:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    46be:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    46c2:	b9 00 00 00 00       	mov    $0x0,%ecx
    46c7:	ba 01 00 00 00       	mov    $0x1,%edx
    46cc:	48 89 c7             	mov    %rax,%rdi
    46cf:	e8 00 00 00 00       	callq  46d4 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    46d4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    46d8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46df <_ZN6Parser11compileAtomE7QString+0x2fb>
    46df:	48 89 c7             	mov    %rax,%rdi
    46e2:	e8 00 00 00 00       	callq  46e7 <_ZN6Parser11compileAtomE7QString+0x303>
    46e7:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    46eb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    46ef:	b9 00 00 00 00       	mov    $0x0,%ecx
    46f4:	ba 01 00 00 00       	mov    $0x1,%edx
    46f9:	48 89 c7             	mov    %rax,%rdi
    46fc:	e8 00 00 00 00       	callq  4701 <_ZN6Parser11compileAtomE7QString+0x31d>
    4701:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4705:	48 89 c7             	mov    %rax,%rdi
    4708:	e8 00 00 00 00       	callq  470d <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    470d:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    470e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4712:	48 89 c7             	mov    %rax,%rdi
    4715:	e8 00 00 00 00       	callq  471a <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    471a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    471e:	48 89 c7             	mov    %rax,%rdi
    4721:	e8 00 00 00 00       	callq  4726 <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4726:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    472d:	48 89 c7             	mov    %rax,%rdi
    4730:	e8 00 00 00 00       	callq  4735 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4735:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    473c:	48 89 c7             	mov    %rax,%rdi
    473f:	e8 00 00 00 00       	callq  4744 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4744:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    474b:	48 89 c7             	mov    %rax,%rdi
    474e:	e8 00 00 00 00       	callq  4753 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4753:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    475a:	48 89 c7             	mov    %rax,%rdi
    475d:	e8 00 00 00 00       	callq  4762 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4762:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4769:	48 89 c7             	mov    %rax,%rdi
    476c:	e8 00 00 00 00       	callq  4771 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4771:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4778:	48 89 c7             	mov    %rax,%rdi
    477b:	e8 00 00 00 00       	callq  4780 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4780:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4787:	48 89 c7             	mov    %rax,%rdi
    478a:	e8 00 00 00 00       	callq  478f <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    478f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4796:	48 89 c7             	mov    %rax,%rdi
    4799:	e8 00 00 00 00       	callq  479e <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    479e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47a5:	48 89 c7             	mov    %rax,%rdi
    47a8:	e8 00 00 00 00       	callq  47ad <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47ad:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47b1:	48 89 c7             	mov    %rax,%rdi
    47b4:	e8 00 00 00 00       	callq  47b9 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    47b9:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    47c0:	48 89 c7             	mov    %rax,%rdi
    47c3:	e8 00 00 00 00       	callq  47c8 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    47c8:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    47cf:	48 89 c7             	mov    %rax,%rdi
    47d2:	e8 00 00 00 00       	callq  47d7 <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    47d7:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    47de:	48 89 c7             	mov    %rax,%rdi
    47e1:	e8 00 00 00 00       	callq  47e6 <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    47e6:	e9 b8 02 00 00       	jmpq   4aa3 <_ZN6Parser11compileAtomE7QString+0x6bf>
    47eb:	48 89 c3             	mov    %rax,%rbx
    47ee:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    47f5:	48 89 c7             	mov    %rax,%rdi
    47f8:	e8 00 00 00 00       	callq  47fd <_ZN6Parser11compileAtomE7QString+0x419>
    47fd:	e9 87 02 00 00       	jmpq   4a89 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4802:	48 89 c3             	mov    %rax,%rbx
    4805:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    480c:	48 89 c7             	mov    %rax,%rdi
    480f:	e8 00 00 00 00       	callq  4814 <_ZN6Parser11compileAtomE7QString+0x430>
    4814:	e9 70 02 00 00       	jmpq   4a89 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4819:	48 89 c3             	mov    %rax,%rbx
    481c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4823:	48 89 c7             	mov    %rax,%rdi
    4826:	e8 00 00 00 00       	callq  482b <_ZN6Parser11compileAtomE7QString+0x447>
    482b:	e9 45 02 00 00       	jmpq   4a75 <_ZN6Parser11compileAtomE7QString+0x691>
    4830:	48 89 c3             	mov    %rax,%rbx
    4833:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    483a:	48 89 c7             	mov    %rax,%rdi
    483d:	e8 00 00 00 00       	callq  4842 <_ZN6Parser11compileAtomE7QString+0x45e>
    4842:	e9 2e 02 00 00       	jmpq   4a75 <_ZN6Parser11compileAtomE7QString+0x691>
    4847:	48 89 c3             	mov    %rax,%rbx
    484a:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4851:	48 89 c7             	mov    %rax,%rdi
    4854:	e8 00 00 00 00       	callq  4859 <_ZN6Parser11compileAtomE7QString+0x475>
    4859:	e9 03 02 00 00       	jmpq   4a61 <_ZN6Parser11compileAtomE7QString+0x67d>
    485e:	48 89 c3             	mov    %rax,%rbx
    4861:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4868:	48 89 c7             	mov    %rax,%rdi
    486b:	e8 00 00 00 00       	callq  4870 <_ZN6Parser11compileAtomE7QString+0x48c>
    4870:	e9 ec 01 00 00       	jmpq   4a61 <_ZN6Parser11compileAtomE7QString+0x67d>
    4875:	48 89 c3             	mov    %rax,%rbx
    4878:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    487f:	48 89 c7             	mov    %rax,%rdi
    4882:	e8 00 00 00 00       	callq  4887 <_ZN6Parser11compileAtomE7QString+0x4a3>
    4887:	e9 60 01 00 00       	jmpq   49ec <_ZN6Parser11compileAtomE7QString+0x608>
    488c:	48 89 c3             	mov    %rax,%rbx
    488f:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4896:	48 89 c7             	mov    %rax,%rdi
    4899:	e8 00 00 00 00       	callq  489e <_ZN6Parser11compileAtomE7QString+0x4ba>
    489e:	e9 49 01 00 00       	jmpq   49ec <_ZN6Parser11compileAtomE7QString+0x608>
    48a3:	48 89 c3             	mov    %rax,%rbx
    48a6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    48ad:	48 89 c7             	mov    %rax,%rdi
    48b0:	e8 00 00 00 00       	callq  48b5 <_ZN6Parser11compileAtomE7QString+0x4d1>
    48b5:	e9 1e 01 00 00       	jmpq   49d8 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48ba:	48 89 c3             	mov    %rax,%rbx
    48bd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    48c4:	48 89 c7             	mov    %rax,%rdi
    48c7:	e8 00 00 00 00       	callq  48cc <_ZN6Parser11compileAtomE7QString+0x4e8>
    48cc:	e9 07 01 00 00       	jmpq   49d8 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48d1:	48 89 c3             	mov    %rax,%rbx
    48d4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    48db:	48 89 c7             	mov    %rax,%rdi
    48de:	e8 00 00 00 00       	callq  48e3 <_ZN6Parser11compileAtomE7QString+0x4ff>
    48e3:	e9 dc 00 00 00       	jmpq   49c4 <_ZN6Parser11compileAtomE7QString+0x5e0>
    48e8:	48 89 c3             	mov    %rax,%rbx
    48eb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    48f2:	48 89 c7             	mov    %rax,%rdi
    48f5:	e8 00 00 00 00       	callq  48fa <_ZN6Parser11compileAtomE7QString+0x516>
    48fa:	e9 c5 00 00 00       	jmpq   49c4 <_ZN6Parser11compileAtomE7QString+0x5e0>
    48ff:	48 89 c3             	mov    %rax,%rbx
    4902:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4909:	48 89 c7             	mov    %rax,%rdi
    490c:	e8 00 00 00 00       	callq  4911 <_ZN6Parser11compileAtomE7QString+0x52d>
    4911:	e9 9a 00 00 00       	jmpq   49b0 <_ZN6Parser11compileAtomE7QString+0x5cc>
    4916:	48 89 c3             	mov    %rax,%rbx
    4919:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4920:	48 89 c7             	mov    %rax,%rdi
    4923:	e8 00 00 00 00       	callq  4928 <_ZN6Parser11compileAtomE7QString+0x544>
    4928:	e9 83 00 00 00       	jmpq   49b0 <_ZN6Parser11compileAtomE7QString+0x5cc>
    492d:	48 89 c3             	mov    %rax,%rbx
    4930:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4934:	48 89 c7             	mov    %rax,%rdi
    4937:	e8 00 00 00 00       	callq  493c <_ZN6Parser11compileAtomE7QString+0x558>
    493c:	eb 5e                	jmp    499c <_ZN6Parser11compileAtomE7QString+0x5b8>
    493e:	48 89 c3             	mov    %rax,%rbx
    4941:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4948:	48 89 c7             	mov    %rax,%rdi
    494b:	e8 00 00 00 00       	callq  4950 <_ZN6Parser11compileAtomE7QString+0x56c>
    4950:	eb 4a                	jmp    499c <_ZN6Parser11compileAtomE7QString+0x5b8>
    4952:	48 89 c3             	mov    %rax,%rbx
    4955:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4959:	48 89 c7             	mov    %rax,%rdi
    495c:	e8 00 00 00 00       	callq  4961 <_ZN6Parser11compileAtomE7QString+0x57d>
    4961:	eb 14                	jmp    4977 <_ZN6Parser11compileAtomE7QString+0x593>
    4963:	48 89 c3             	mov    %rax,%rbx
    4966:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    496a:	48 89 c7             	mov    %rax,%rdi
    496d:	e8 00 00 00 00       	callq  4972 <_ZN6Parser11compileAtomE7QString+0x58e>
    4972:	eb 03                	jmp    4977 <_ZN6Parser11compileAtomE7QString+0x593>
    4974:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    4977:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    497b:	48 89 c7             	mov    %rax,%rdi
    497e:	e8 00 00 00 00       	callq  4983 <_ZN6Parser11compileAtomE7QString+0x59f>
    4983:	eb 03                	jmp    4988 <_ZN6Parser11compileAtomE7QString+0x5a4>
    4985:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4988:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    498f:	48 89 c7             	mov    %rax,%rdi
    4992:	e8 00 00 00 00       	callq  4997 <_ZN6Parser11compileAtomE7QString+0x5b3>
    4997:	eb 03                	jmp    499c <_ZN6Parser11compileAtomE7QString+0x5b8>
    4999:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    499c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49a3:	48 89 c7             	mov    %rax,%rdi
    49a6:	e8 00 00 00 00       	callq  49ab <_ZN6Parser11compileAtomE7QString+0x5c7>
    49ab:	eb 03                	jmp    49b0 <_ZN6Parser11compileAtomE7QString+0x5cc>
    49ad:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    49b0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    49b7:	48 89 c7             	mov    %rax,%rdi
    49ba:	e8 00 00 00 00       	callq  49bf <_ZN6Parser11compileAtomE7QString+0x5db>
    49bf:	eb 03                	jmp    49c4 <_ZN6Parser11compileAtomE7QString+0x5e0>
    49c1:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    49c4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    49cb:	48 89 c7             	mov    %rax,%rdi
    49ce:	e8 00 00 00 00       	callq  49d3 <_ZN6Parser11compileAtomE7QString+0x5ef>
    49d3:	eb 03                	jmp    49d8 <_ZN6Parser11compileAtomE7QString+0x5f4>
    49d5:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    49d8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    49df:	48 89 c7             	mov    %rax,%rdi
    49e2:	e8 00 00 00 00       	callq  49e7 <_ZN6Parser11compileAtomE7QString+0x603>
    49e7:	eb 03                	jmp    49ec <_ZN6Parser11compileAtomE7QString+0x608>
    49e9:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    49ec:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    49f3:	48 89 c7             	mov    %rax,%rdi
    49f6:	e8 00 00 00 00       	callq  49fb <_ZN6Parser11compileAtomE7QString+0x617>
    49fb:	eb 03                	jmp    4a00 <_ZN6Parser11compileAtomE7QString+0x61c>
    49fd:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4a00:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a07:	48 89 c7             	mov    %rax,%rdi
    4a0a:	e8 00 00 00 00       	callq  4a0f <_ZN6Parser11compileAtomE7QString+0x62b>
    4a0f:	eb 03                	jmp    4a14 <_ZN6Parser11compileAtomE7QString+0x630>
    4a11:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4a14:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4a1b:	48 89 c7             	mov    %rax,%rdi
    4a1e:	e8 00 00 00 00       	callq  4a23 <_ZN6Parser11compileAtomE7QString+0x63f>
    4a23:	eb 03                	jmp    4a28 <_ZN6Parser11compileAtomE7QString+0x644>
    4a25:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4a28:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a2f:	48 89 c7             	mov    %rax,%rdi
    4a32:	e8 00 00 00 00       	callq  4a37 <_ZN6Parser11compileAtomE7QString+0x653>
    4a37:	eb 03                	jmp    4a3c <_ZN6Parser11compileAtomE7QString+0x658>
    4a39:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4a3c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a40:	48 89 c7             	mov    %rax,%rdi
    4a43:	e8 00 00 00 00       	callq  4a48 <_ZN6Parser11compileAtomE7QString+0x664>
    4a48:	eb 03                	jmp    4a4d <_ZN6Parser11compileAtomE7QString+0x669>
    4a4a:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4a4d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4a54:	48 89 c7             	mov    %rax,%rdi
    4a57:	e8 00 00 00 00       	callq  4a5c <_ZN6Parser11compileAtomE7QString+0x678>
    4a5c:	eb 03                	jmp    4a61 <_ZN6Parser11compileAtomE7QString+0x67d>
    4a5e:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4a61:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4a68:	48 89 c7             	mov    %rax,%rdi
    4a6b:	e8 00 00 00 00       	callq  4a70 <_ZN6Parser11compileAtomE7QString+0x68c>
    4a70:	eb 03                	jmp    4a75 <_ZN6Parser11compileAtomE7QString+0x691>
    4a72:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4a75:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4a7c:	48 89 c7             	mov    %rax,%rdi
    4a7f:	e8 00 00 00 00       	callq  4a84 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4a84:	eb 03                	jmp    4a89 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4a86:	48 89 c3             	mov    %rax,%rbx
    4a89:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4a90:	48 89 c7             	mov    %rax,%rdi
    4a93:	e8 00 00 00 00       	callq  4a98 <_ZN6Parser11compileAtomE7QString+0x6b4>
    4a98:	48 89 d8             	mov    %rbx,%rax
    4a9b:	48 89 c7             	mov    %rax,%rdi
    4a9e:	e8 00 00 00 00       	callq  4aa3 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4aa3:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4aaa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4aae:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4ab5:	00 00 
    4ab7:	74 05                	je     4abe <_ZN6Parser11compileAtomE7QString+0x6da>
    4ab9:	e8 00 00 00 00       	callq  4abe <_ZN6Parser11compileAtomE7QString+0x6da>
    4abe:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4ac5:	5b                   	pop    %rbx
    4ac6:	5d                   	pop    %rbp
    4ac7:	c3                   	retq   

0000000000004ac8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4ac8:	55                   	push   %rbp
    4ac9:	48 89 e5             	mov    %rsp,%rbp
    4acc:	53                   	push   %rbx
    4acd:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4ad4:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4adb:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4ae2:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4ae9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4af0:	00 00 
    4af2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4af6:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4af8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4afc:	48 89 c7             	mov    %rax,%rdi
    4aff:	e8 00 00 00 00       	callq  4b04 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4b04:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4b0b:	48 89 c7             	mov    %rax,%rdi
    4b0e:	e8 00 00 00 00       	callq  4b13 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4b13:	85 c0                	test   %eax,%eax
    4b15:	0f 9e c0             	setle  %al
    4b18:	84 c0                	test   %al,%al
    4b1a:	74 0a                	je     4b26 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4b1c:	bb 00 00 00 00       	mov    $0x0,%ebx
    4b21:	e9 27 01 00 00       	jmpq   4c4d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4b26:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b2a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b31 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4b31:	48 89 c7             	mov    %rax,%rdi
    4b34:	e8 00 00 00 00       	callq  4b39 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4b39:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4b3d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b41:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b46:	ba 00 00 00 00       	mov    $0x0,%edx
    4b4b:	48 89 c7             	mov    %rax,%rdi
    4b4e:	e8 00 00 00 00       	callq  4b53 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4b53:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b57:	48 89 c7             	mov    %rax,%rdi
    4b5a:	e8 00 00 00 00       	callq  4b5f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4b5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b63:	be 00 00 00 00       	mov    $0x0,%esi
    4b68:	48 89 c7             	mov    %rax,%rdi
    4b6b:	e8 00 00 00 00       	callq  4b70 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4b70:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4b77:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4b7a:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4b81:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b85:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b8a:	48 89 c7             	mov    %rax,%rdi
    4b8d:	e8 00 00 00 00       	callq  4b92 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4b92:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4b95:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4b99:	0f 95 c0             	setne  %al
    4b9c:	84 c0                	test   %al,%al
    4b9e:	0f 84 98 00 00 00    	je     4c3c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4ba4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4ba8:	48 89 c7             	mov    %rax,%rdi
    4bab:	e8 00 00 00 00       	callq  4bb0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4bb0:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4bb3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bb7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bbb:	ba 00 00 00 00       	mov    $0x0,%edx
    4bc0:	48 89 ce             	mov    %rcx,%rsi
    4bc3:	48 89 c7             	mov    %rax,%rdi
    4bc6:	e8 00 00 00 00       	callq  4bcb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4bcb:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4bcf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4bd6:	48 89 d6             	mov    %rdx,%rsi
    4bd9:	48 89 c7             	mov    %rax,%rdi
    4bdc:	e8 00 00 00 00       	callq  4be1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4be1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4be5:	48 89 c7             	mov    %rax,%rdi
    4be8:	e8 00 00 00 00       	callq  4bed <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4bed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4bf1:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bf5:	ba 00 00 00 00       	mov    $0x0,%edx
    4bfa:	48 89 ce             	mov    %rcx,%rsi
    4bfd:	48 89 c7             	mov    %rax,%rdi
    4c00:	e8 00 00 00 00       	callq  4c05 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4c05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c09:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4c0d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c14:	48 89 ce             	mov    %rcx,%rsi
    4c17:	48 89 c7             	mov    %rax,%rdi
    4c1a:	e8 00 00 00 00       	callq  4c1f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4c1f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c23:	48 89 c7             	mov    %rax,%rdi
    4c26:	e8 00 00 00 00       	callq  4c2b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4c2b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c2f:	48 89 c7             	mov    %rax,%rdi
    4c32:	e8 00 00 00 00       	callq  4c37 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c37:	e9 3b ff ff ff       	jmpq   4b77 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c40:	48 89 c7             	mov    %rax,%rdi
    4c43:	e8 00 00 00 00       	callq  4c48 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4c48:	bb 01 00 00 00       	mov    $0x1,%ebx
    4c4d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4c51:	48 89 c7             	mov    %rax,%rdi
    4c54:	e8 00 00 00 00       	callq  4c59 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4c59:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4c5c:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4c5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c61:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4c68:	00 00 
    4c6a:	74 76                	je     4ce2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4c6c:	eb 6f                	jmp    4cdd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4c6e:	48 89 c3             	mov    %rax,%rbx
    4c71:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c75:	48 89 c7             	mov    %rax,%rdi
    4c78:	e8 00 00 00 00       	callq  4c7d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4c7d:	eb 47                	jmp    4cc6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c7f:	48 89 c3             	mov    %rax,%rbx
    4c82:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c86:	48 89 c7             	mov    %rax,%rdi
    4c89:	e8 00 00 00 00       	callq  4c8e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4c8e:	eb 36                	jmp    4cc6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c90:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4c93:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c97:	48 89 c7             	mov    %rax,%rdi
    4c9a:	e8 00 00 00 00       	callq  4c9f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4c9f:	eb 14                	jmp    4cb5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4ca1:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4ca4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4ca8:	48 89 c7             	mov    %rax,%rdi
    4cab:	e8 00 00 00 00       	callq  4cb0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4cb0:	eb 03                	jmp    4cb5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cb2:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4cb5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4cb9:	48 89 c7             	mov    %rax,%rdi
    4cbc:	e8 00 00 00 00       	callq  4cc1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4cc1:	eb 03                	jmp    4cc6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4cc3:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4cc6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4cca:	48 89 c7             	mov    %rax,%rdi
    4ccd:	e8 00 00 00 00       	callq  4cd2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4cd2:	48 89 d8             	mov    %rbx,%rax
    4cd5:	48 89 c7             	mov    %rax,%rdi
    4cd8:	e8 00 00 00 00       	callq  4cdd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4cdd:	e8 00 00 00 00       	callq  4ce2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4ce2:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4ce9:	5b                   	pop    %rbx
    4cea:	5d                   	pop    %rbp
    4ceb:	c3                   	retq   

0000000000004cec <_ZN6Parser12compileBlockER11QStringList>:

QByteArray Parser::compileBlock(QStringList &block){
    4cec:	55                   	push   %rbp
    4ced:	48 89 e5             	mov    %rsp,%rbp
    4cf0:	48 83 ec 30          	sub    $0x30,%rsp
    4cf4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4cf8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4cfc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4d00:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d07:	00 00 
    4d09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d0d:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4d0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d13:	48 89 c7             	mov    %rax,%rdi
    4d16:	e8 00 00 00 00       	callq  4d1b <_ZN6Parser12compileBlockER11QStringList+0x2f>

    return result;
    4d1b:	90                   	nop
}
    4d1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d20:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4d24:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d2b:	00 00 
    4d2d:	74 05                	je     4d34 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d2f:	e8 00 00 00 00       	callq  4d34 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d34:	c9                   	leaveq 
    4d35:	c3                   	retq   

0000000000004d36 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4d36:	55                   	push   %rbp
    4d37:	48 89 e5             	mov    %rsp,%rbp
    4d3a:	53                   	push   %rbx
    4d3b:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4d42:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4d49:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4d50:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4d57:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4d5e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d65:	00 00 
    4d67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4d6b:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4d6d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4d74:	48 89 c7             	mov    %rax,%rdi
    4d77:	e8 00 00 00 00       	callq  4d7c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4d7c:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4d83:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4d8a:	b9 00 00 00 00       	mov    $0x0,%ecx
    4d8f:	ba 01 00 00 00       	mov    $0x1,%edx
    4d94:	48 89 c7             	mov    %rax,%rdi
    4d97:	e8 00 00 00 00       	callq  4d9c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4d9c:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4da3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4daa:	48 89 d6             	mov    %rdx,%rsi
    4dad:	48 89 c7             	mov    %rax,%rdi
    4db0:	e8 00 00 00 00       	callq  4db5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4db5:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4dbc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4dc3:	48 89 d6             	mov    %rdx,%rsi
    4dc6:	48 89 c7             	mov    %rax,%rdi
    4dc9:	e8 00 00 00 00       	callq  4dce <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4dce:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4dd5:	48 89 c7             	mov    %rax,%rdi
    4dd8:	e8 00 00 00 00       	callq  4ddd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4ddd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4de4:	48 89 c7             	mov    %rax,%rdi
    4de7:	e8 00 00 00 00       	callq  4dec <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4dec:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4df3:	48 89 c7             	mov    %rax,%rdi
    4df6:	e8 00 00 00 00       	callq  4dfb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4dfb:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4e02:	48 89 c7             	mov    %rax,%rdi
    4e05:	e8 00 00 00 00       	callq  4e0a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4e0a:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4e11:	00 00 00 
    int     lineBase = 0;
    4e14:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4e1b:	00 00 00 
    int     line     = 0;
    4e1e:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4e25:	00 00 00 

    unsigned int BFL = str.count("{");
    4e28:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e2f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e36 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4e36:	48 89 c7             	mov    %rax,%rdi
    4e39:	e8 00 00 00 00       	callq  4e3e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4e3e:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4e45:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e4c:	ba 01 00 00 00       	mov    $0x1,%edx
    4e51:	48 89 ce             	mov    %rcx,%rsi
    4e54:	48 89 c7             	mov    %rax,%rdi
    4e57:	e8 00 00 00 00       	callq  4e5c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4e5c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4e62:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e69:	48 89 c7             	mov    %rax,%rdi
    4e6c:	e8 00 00 00 00       	callq  4e71 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4e71:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4e78:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e7f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4e7f:	48 89 c7             	mov    %rax,%rdi
    4e82:	e8 00 00 00 00       	callq  4e87 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4e87:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4e8e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e95:	ba 01 00 00 00       	mov    $0x1,%edx
    4e9a:	48 89 ce             	mov    %rcx,%rsi
    4e9d:	48 89 c7             	mov    %rax,%rdi
    4ea0:	e8 00 00 00 00       	callq  4ea5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4ea5:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4eab:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4eb2:	48 89 c7             	mov    %rax,%rdi
    4eb5:	e8 00 00 00 00       	callq  4eba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4eba:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4ec1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ec8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4ec8:	48 89 c7             	mov    %rax,%rdi
    4ecb:	e8 00 00 00 00       	callq  4ed0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4ed0:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4ed7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ede:	ba 01 00 00 00       	mov    $0x1,%edx
    4ee3:	48 89 ce             	mov    %rcx,%rsi
    4ee6:	48 89 c7             	mov    %rax,%rdi
    4ee9:	e8 00 00 00 00       	callq  4eee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4eee:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4ef4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4efb:	48 89 c7             	mov    %rax,%rdi
    4efe:	e8 00 00 00 00       	callq  4f03 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4f03:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f0a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f11 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4f11:	48 89 c7             	mov    %rax,%rdi
    4f14:	e8 00 00 00 00       	callq  4f19 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4f19:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4f20:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f27:	ba 01 00 00 00       	mov    $0x1,%edx
    4f2c:	48 89 ce             	mov    %rcx,%rsi
    4f2f:	48 89 c7             	mov    %rax,%rdi
    4f32:	e8 00 00 00 00       	callq  4f37 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4f37:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4f3d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f44:	48 89 c7             	mov    %rax,%rdi
    4f47:	e8 00 00 00 00       	callq  4f4c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4f4c:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4f52:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4f58:	74 43                	je     4f9d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4f5a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f61:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4f68:	48 89 c7             	mov    %rax,%rdi
    4f6b:	e8 00 00 00 00       	callq  4f70 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4f70:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4f77:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4f7e:	48 89 d6             	mov    %rdx,%rsi
    4f81:	48 89 c7             	mov    %rax,%rdi
    4f84:	e8 00 00 00 00       	callq  4f89 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4f89:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f90:	48 89 c7             	mov    %rax,%rdi
    4f93:	e8 00 00 00 00       	callq  4f98 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4f98:	e9 6f 03 00 00       	jmpq   530c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4f9d:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4fa3:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4fa9:	74 43                	je     4fee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4fab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fb2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fb9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4fb9:	48 89 c7             	mov    %rax,%rdi
    4fbc:	e8 00 00 00 00       	callq  4fc1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    4fc1:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4fc8:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4fcf:	48 89 d6             	mov    %rdx,%rsi
    4fd2:	48 89 c7             	mov    %rax,%rdi
    4fd5:	e8 00 00 00 00       	callq  4fda <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4fda:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fe1:	48 89 c7             	mov    %rax,%rdi
    4fe4:	e8 00 00 00 00       	callq  4fe9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    4fe9:	e9 1e 03 00 00       	jmpq   530c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    4fee:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4ff5:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4ffc:	b9 00 00 00 00       	mov    $0x0,%ecx
    5001:	ba 00 00 00 00       	mov    $0x0,%edx
    5006:	48 89 c7             	mov    %rax,%rdi
    5009:	e8 00 00 00 00       	callq  500e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    500e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    5014:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    501b:	0f 88 ea 02 00 00    	js     530b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    5021:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    5027:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    502d:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    5030:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    5037:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    503b:	48 89 d6             	mov    %rdx,%rsi
    503e:	48 89 c7             	mov    %rax,%rdi
    5041:	e8 00 00 00 00       	callq  5046 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    5046:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    504a:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    5051:	89 da                	mov    %ebx,%edx
    5053:	48 89 ce             	mov    %rcx,%rsi
    5056:	48 89 c7             	mov    %rax,%rdi
    5059:	e8 00 00 00 00       	callq  505e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    505e:	83 c0 01             	add    $0x1,%eax
    5061:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    5067:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    506b:	48 89 c7             	mov    %rax,%rdi
    506e:	e8 00 00 00 00       	callq  5073 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    5073:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5077:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    507e:	ba 01 00 00 00       	mov    $0x1,%edx
    5083:	48 89 ce             	mov    %rcx,%rsi
    5086:	48 89 c7             	mov    %rax,%rdi
    5089:	e8 00 00 00 00       	callq  508e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    508e:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5092:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5099:	48 89 d6             	mov    %rdx,%rsi
    509c:	48 89 c7             	mov    %rax,%rdi
    509f:	e8 00 00 00 00       	callq  50a4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    50a4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50a8:	48 89 c7             	mov    %rax,%rdi
    50ab:	e8 00 00 00 00       	callq  50b0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    50b0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    50b4:	be 7b 00 00 00       	mov    $0x7b,%esi
    50b9:	48 89 c7             	mov    %rax,%rdi
    50bc:	e8 00 00 00 00       	callq  50c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    50c1:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    50c7:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    50cb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50d2:	b9 01 00 00 00       	mov    $0x1,%ecx
    50d7:	48 89 c7             	mov    %rax,%rdi
    50da:	e8 00 00 00 00       	callq  50df <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    50df:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    50e5:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    50eb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50f2:	89 d6                	mov    %edx,%esi
    50f4:	48 89 c7             	mov    %rax,%rdi
    50f7:	e8 00 00 00 00       	callq  50fc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    50fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5100:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5104:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5108:	48 89 c7             	mov    %rax,%rdi
    510b:	e8 00 00 00 00       	callq  5110 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    5110:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    5117:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    511e:	00 00 00 
        int br=0;
    5121:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    5128:	00 00 00 

        while(bl != br)
    512b:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    5131:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    5137:	0f 84 a2 00 00 00    	je     51df <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    513d:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    5144:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    514a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5151:	89 d6                	mov    %edx,%esi
    5153:	48 89 c7             	mov    %rax,%rdi
    5156:	e8 00 00 00 00       	callq  515b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    515b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    515f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5163:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5167:	48 89 c7             	mov    %rax,%rdi
    516a:	e8 00 00 00 00       	callq  516f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    516f:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    5176:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    517a:	be 7b 00 00 00       	mov    $0x7b,%esi
    517f:	48 89 c7             	mov    %rax,%rdi
    5182:	e8 00 00 00 00       	callq  5187 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    5187:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    518b:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    5192:	89 d6                	mov    %edx,%esi
    5194:	89 c7                	mov    %eax,%edi
    5196:	e8 00 00 00 00       	callq  519b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    519b:	84 c0                	test   %al,%al
    519d:	74 07                	je     51a6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    519f:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    51a6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51aa:	be 7d 00 00 00       	mov    $0x7d,%esi
    51af:	48 89 c7             	mov    %rax,%rdi
    51b2:	e8 00 00 00 00       	callq  51b7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    51b7:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51bb:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51c2:	89 d6                	mov    %edx,%esi
    51c4:	89 c7                	mov    %eax,%edi
    51c6:	e8 00 00 00 00       	callq  51cb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    51cb:	84 c0                	test   %al,%al
    51cd:	0f 84 58 ff ff ff    	je     512b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    51d3:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    51da:	e9 4c ff ff ff       	jmpq   512b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    51df:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    51e5:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    51eb:	89 c1                	mov    %eax,%ecx
    51ed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    51f1:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    51f7:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    51fe:	48 89 c7             	mov    %rax,%rdi
    5201:	e8 00 00 00 00       	callq  5206 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    5206:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    520a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5211:	48 89 d6             	mov    %rdx,%rsi
    5214:	48 89 c7             	mov    %rax,%rdi
    5217:	e8 00 00 00 00       	callq  521c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    521c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5220:	48 89 c7             	mov    %rax,%rdi
    5223:	e8 00 00 00 00       	callq  5228 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    5228:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    522c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5233 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    5233:	48 89 c7             	mov    %rax,%rdi
    5236:	e8 00 00 00 00       	callq  523b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    523b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    523f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5243:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    524a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5250:	b9 00 00 00 00       	mov    $0x0,%ecx
    5255:	48 89 c7             	mov    %rax,%rdi
    5258:	e8 00 00 00 00       	callq  525d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    525d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5261:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5268:	48 89 d6             	mov    %rdx,%rsi
    526b:	48 89 c7             	mov    %rax,%rdi
    526e:	e8 00 00 00 00       	callq  5273 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    5273:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5277:	48 89 c7             	mov    %rax,%rdi
    527a:	e8 00 00 00 00       	callq  527f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    527f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5283:	48 89 c7             	mov    %rax,%rdi
    5286:	e8 00 00 00 00       	callq  528b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    528b:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5292:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    5299:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    52a0:	48 89 ce             	mov    %rcx,%rsi
    52a3:	48 89 c7             	mov    %rax,%rdi
    52a6:	e8 00 00 00 00       	callq  52ab <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    52ab:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52b2:	48 89 c7             	mov    %rax,%rdi
    52b5:	e8 00 00 00 00       	callq  52ba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    52ba:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    52c0:	89 c2                	mov    %eax,%edx
    52c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52c6:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    52cd:	48 89 ce             	mov    %rcx,%rsi
    52d0:	48 89 c7             	mov    %rax,%rdi
    52d3:	e8 00 00 00 00       	callq  52d8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    52d8:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    52dc:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52e3:	48 89 d6             	mov    %rdx,%rsi
    52e6:	48 89 c7             	mov    %rax,%rdi
    52e9:	e8 00 00 00 00       	callq  52ee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    52ee:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52f2:	48 89 c7             	mov    %rax,%rdi
    52f5:	e8 00 00 00 00       	callq  52fa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    52fa:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    5300:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    5306:	e9 e3 fc ff ff       	jmpq   4fee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    530b:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    530c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5313:	48 89 c7             	mov    %rax,%rdi
    5316:	e8 00 00 00 00       	callq  531b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    531b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5322:	48 89 c7             	mov    %rax,%rdi
    5325:	e8 00 00 00 00       	callq  532a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    532a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5331:	48 89 c7             	mov    %rax,%rdi
    5334:	e8 00 00 00 00       	callq  5339 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5339:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5340:	48 89 c7             	mov    %rax,%rdi
    5343:	e8 00 00 00 00       	callq  5348 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5348:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    534f:	48 89 c7             	mov    %rax,%rdi
    5352:	e8 00 00 00 00       	callq  5357 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    5357:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    535e:	48 89 c7             	mov    %rax,%rdi
    5361:	e8 00 00 00 00       	callq  5366 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    5366:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    536d:	48 89 c7             	mov    %rax,%rdi
    5370:	e8 00 00 00 00       	callq  5375 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5375:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5379:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5380:	00 00 
    5382:	0f 84 89 01 00 00    	je     5511 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5388:	e9 7f 01 00 00       	jmpq   550c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    538d:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    5390:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5397:	48 89 c7             	mov    %rax,%rdi
    539a:	e8 00 00 00 00       	callq  539f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    539f:	e9 d6 00 00 00       	jmpq   547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53a4:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    53a7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    53ae:	48 89 c7             	mov    %rax,%rdi
    53b1:	e8 00 00 00 00       	callq  53b6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    53b6:	e9 bf 00 00 00       	jmpq   547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53bb:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    53be:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    53c5:	48 89 c7             	mov    %rax,%rdi
    53c8:	e8 00 00 00 00       	callq  53cd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    53cd:	e9 a8 00 00 00       	jmpq   547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53d2:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    53d5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    53dc:	48 89 c7             	mov    %rax,%rdi
    53df:	e8 00 00 00 00       	callq  53e4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    53e4:	e9 91 00 00 00       	jmpq   547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53e9:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    53ec:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    53f3:	48 89 c7             	mov    %rax,%rdi
    53f6:	e8 00 00 00 00       	callq  53fb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    53fb:	eb 7d                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53fd:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    5400:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5407:	48 89 c7             	mov    %rax,%rdi
    540a:	e8 00 00 00 00       	callq  540f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    540f:	eb 69                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5411:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    5414:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5418:	48 89 c7             	mov    %rax,%rdi
    541b:	e8 00 00 00 00       	callq  5420 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    5420:	eb 58                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5422:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    5425:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5429:	48 89 c7             	mov    %rax,%rdi
    542c:	e8 00 00 00 00       	callq  5431 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    5431:	eb 47                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5433:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    5436:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    543a:	48 89 c7             	mov    %rax,%rdi
    543d:	e8 00 00 00 00       	callq  5442 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    5442:	eb 36                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5444:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    5447:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    544b:	48 89 c7             	mov    %rax,%rdi
    544e:	e8 00 00 00 00       	callq  5453 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    5453:	eb 03                	jmp    5458 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    5455:	48 89 c3             	mov    %rax,%rbx
    5458:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    545c:	48 89 c7             	mov    %rax,%rdi
    545f:	e8 00 00 00 00       	callq  5464 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    5464:	eb 14                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5466:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    5469:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    546d:	48 89 c7             	mov    %rax,%rdi
    5470:	e8 00 00 00 00       	callq  5475 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    5475:	eb 03                	jmp    547a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5477:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    547a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5481:	48 89 c7             	mov    %rax,%rdi
    5484:	e8 00 00 00 00       	callq  5489 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    5489:	eb 03                	jmp    548e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    548b:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    548e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5495:	48 89 c7             	mov    %rax,%rdi
    5498:	e8 00 00 00 00       	callq  549d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    549d:	eb 03                	jmp    54a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    549f:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    54a2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54a9:	48 89 c7             	mov    %rax,%rdi
    54ac:	e8 00 00 00 00       	callq  54b1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    54b1:	eb 03                	jmp    54b6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    54b3:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    54b6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    54bd:	48 89 c7             	mov    %rax,%rdi
    54c0:	e8 00 00 00 00       	callq  54c5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    54c5:	eb 03                	jmp    54ca <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    54c7:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    54ca:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    54d1:	48 89 c7             	mov    %rax,%rdi
    54d4:	e8 00 00 00 00       	callq  54d9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    54d9:	eb 03                	jmp    54de <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    54db:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    54de:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    54e5:	48 89 c7             	mov    %rax,%rdi
    54e8:	e8 00 00 00 00       	callq  54ed <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    54ed:	eb 03                	jmp    54f2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    54ef:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    54f2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    54f9:	48 89 c7             	mov    %rax,%rdi
    54fc:	e8 00 00 00 00       	callq  5501 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    5501:	48 89 d8             	mov    %rbx,%rax
    5504:	48 89 c7             	mov    %rax,%rdi
    5507:	e8 00 00 00 00       	callq  550c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    550c:	e8 00 00 00 00       	callq  5511 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5511:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    5518:	5b                   	pop    %rbx
    5519:	5d                   	pop    %rbp
    551a:	c3                   	retq   
    551b:	90                   	nop

000000000000551c <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    551c:	55                   	push   %rbp
    551d:	48 89 e5             	mov    %rsp,%rbp
    5520:	53                   	push   %rbx
    5521:	48 83 ec 38          	sub    $0x38,%rsp
    5525:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5529:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    552d:	89 55 cc             	mov    %edx,-0x34(%rbp)
    5530:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5537:	00 00 
    5539:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    553d:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    553f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5543:	8b 55 cc             	mov    -0x34(%rbp),%edx
    5546:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    554a:	48 89 ce             	mov    %rcx,%rsi
    554d:	48 89 c7             	mov    %rax,%rdi
    5550:	e8 00 00 00 00       	callq  5555 <_ZN6Parser8whatLineE7QStringi+0x39>
    5555:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5559:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    555d:	48 89 d6             	mov    %rdx,%rsi
    5560:	48 89 c7             	mov    %rax,%rdi
    5563:	e8 00 00 00 00       	callq  5568 <_ZN6Parser8whatLineE7QStringi+0x4c>
    5568:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    556c:	48 89 c7             	mov    %rax,%rdi
    556f:	e8 00 00 00 00       	callq  5574 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    5574:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5578:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 557f <_ZN6Parser8whatLineE7QStringi+0x63>
    557f:	48 89 c7             	mov    %rax,%rdi
    5582:	e8 00 00 00 00       	callq  5587 <_ZN6Parser8whatLineE7QStringi+0x6b>
    5587:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    558b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    558f:	ba 01 00 00 00       	mov    $0x1,%edx
    5594:	48 89 ce             	mov    %rcx,%rsi
    5597:	48 89 c7             	mov    %rax,%rdi
    559a:	e8 00 00 00 00       	callq  559f <_ZN6Parser8whatLineE7QStringi+0x83>
    559f:	89 c3                	mov    %eax,%ebx
    55a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55a5:	48 89 c7             	mov    %rax,%rdi
    55a8:	e8 00 00 00 00       	callq  55ad <_ZN6Parser8whatLineE7QStringi+0x91>
    55ad:	89 d8                	mov    %ebx,%eax
}
    55af:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    55b3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    55ba:	00 00 
    55bc:	74 3b                	je     55f9 <_ZN6Parser8whatLineE7QStringi+0xdd>
    55be:	eb 34                	jmp    55f4 <_ZN6Parser8whatLineE7QStringi+0xd8>
    55c0:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    55c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55c7:	48 89 c7             	mov    %rax,%rdi
    55ca:	e8 00 00 00 00       	callq  55cf <_ZN6Parser8whatLineE7QStringi+0xb3>
    55cf:	48 89 d8             	mov    %rbx,%rax
    55d2:	48 89 c7             	mov    %rax,%rdi
    55d5:	e8 00 00 00 00       	callq  55da <_ZN6Parser8whatLineE7QStringi+0xbe>
    55da:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    55dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55e1:	48 89 c7             	mov    %rax,%rdi
    55e4:	e8 00 00 00 00       	callq  55e9 <_ZN6Parser8whatLineE7QStringi+0xcd>
    55e9:	48 89 d8             	mov    %rbx,%rax
    55ec:	48 89 c7             	mov    %rax,%rdi
    55ef:	e8 00 00 00 00       	callq  55f4 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    55f4:	e8 00 00 00 00       	callq  55f9 <_ZN6Parser8whatLineE7QStringi+0xdd>
    55f9:	48 83 c4 38          	add    $0x38,%rsp
    55fd:	5b                   	pop    %rbx
    55fe:	5d                   	pop    %rbp
    55ff:	c3                   	retq   

0000000000005600 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    5600:	55                   	push   %rbp
    5601:	48 89 e5             	mov    %rsp,%rbp
    5604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    5608:	90                   	nop
    5609:	5d                   	pop    %rbp
    560a:	c3                   	retq   
    560b:	90                   	nop

000000000000560c <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    560c:	55                   	push   %rbp
    560d:	48 89 e5             	mov    %rsp,%rbp
    5610:	53                   	push   %rbx
    5611:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    5618:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    561f:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    5626:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    562d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5634:	00 00 
    5636:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    563a:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    563c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5643:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 564a <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    564a:	48 89 c7             	mov    %rax,%rdi
    564d:	e8 00 00 00 00       	callq  5652 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    5652:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5659:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5660 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    5660:	48 89 c7             	mov    %rax,%rdi
    5663:	e8 00 00 00 00       	callq  5668 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    5668:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    566f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5676:	48 89 d6             	mov    %rdx,%rsi
    5679:	48 89 c7             	mov    %rax,%rdi
    567c:	e8 00 00 00 00       	callq  5681 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    5681:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    5688:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    568f:	48 89 d6             	mov    %rdx,%rsi
    5692:	48 89 c7             	mov    %rax,%rdi
    5695:	e8 00 00 00 00       	callq  569a <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    569a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56a1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56a8 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    56a8:	48 89 c7             	mov    %rax,%rdi
    56ab:	e8 00 00 00 00       	callq  56b0 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    56b0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56be <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    56be:	48 89 c7             	mov    %rax,%rdi
    56c1:	e8 00 00 00 00       	callq  56c6 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    56c6:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    56cd:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    56d4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    56db:	b9 01 00 00 00       	mov    $0x1,%ecx
    56e0:	48 89 c7             	mov    %rax,%rdi
    56e3:	e8 00 00 00 00       	callq  56e8 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    56e8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56ef:	48 89 c7             	mov    %rax,%rdi
    56f2:	e8 00 00 00 00       	callq  56f7 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    56f7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56fe:	48 89 c7             	mov    %rax,%rdi
    5701:	e8 00 00 00 00       	callq  5706 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    5706:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    570d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5714 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    5714:	48 89 c7             	mov    %rax,%rdi
    5717:	e8 00 00 00 00       	callq  571c <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    571c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5723:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 572a <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    572a:	48 89 c7             	mov    %rax,%rdi
    572d:	e8 00 00 00 00       	callq  5732 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    5732:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    5739:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5740:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5747:	b9 01 00 00 00       	mov    $0x1,%ecx
    574c:	48 89 c7             	mov    %rax,%rdi
    574f:	e8 00 00 00 00       	callq  5754 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    5754:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    575b:	48 89 c7             	mov    %rax,%rdi
    575e:	e8 00 00 00 00       	callq  5763 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    5763:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    576a:	48 89 c7             	mov    %rax,%rdi
    576d:	e8 00 00 00 00       	callq  5772 <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    5772:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    5779:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    577d:	48 89 d6             	mov    %rdx,%rsi
    5780:	48 89 c7             	mov    %rax,%rdi
    5783:	e8 00 00 00 00       	callq  5788 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    5788:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    578f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5793:	48 89 d6             	mov    %rdx,%rsi
    5796:	48 89 c7             	mov    %rax,%rdi
    5799:	e8 00 00 00 00       	callq  579e <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    579e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    57a5:	be 02 00 00 00       	mov    $0x2,%esi
    57aa:	48 89 c7             	mov    %rax,%rdi
    57ad:	e8 00 00 00 00       	callq  57b2 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    57b2:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    57b9:	be 02 00 00 00       	mov    $0x2,%esi
    57be:	48 89 c7             	mov    %rax,%rdi
    57c1:	e8 00 00 00 00       	callq  57c6 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    57c6:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    57cd:	48 89 c7             	mov    %rax,%rdi
    57d0:	e8 00 00 00 00       	callq  57d5 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    57d5:	84 c0                	test   %al,%al
    57d7:	74 1a                	je     57f3 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    57d9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    57dd:	be 04 00 00 00       	mov    $0x4,%esi
    57e2:	48 89 c7             	mov    %rax,%rdi
    57e5:	e8 00 00 00 00       	callq  57ea <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    57ea:	8b 45 d0             	mov    -0x30(%rbp),%eax
    57ed:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    57f3:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    57fa:	48 89 c7             	mov    %rax,%rdi
    57fd:	e8 00 00 00 00       	callq  5802 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    5802:	84 c0                	test   %al,%al
    5804:	74 1a                	je     5820 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    5806:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    580a:	be 04 00 00 00       	mov    $0x4,%esi
    580f:	48 89 c7             	mov    %rax,%rdi
    5812:	e8 00 00 00 00       	callq  5817 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    5817:	8b 45 d0             	mov    -0x30(%rbp),%eax
    581a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    5820:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    5826:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    582a:	89 d6                	mov    %edx,%esi
    582c:	48 89 c7             	mov    %rax,%rdi
    582f:	e8 00 00 00 00       	callq  5834 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    5834:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    583a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    583e:	89 d6                	mov    %edx,%esi
    5840:	48 89 c7             	mov    %rax,%rdi
    5843:	e8 00 00 00 00       	callq  5848 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    5848:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    584c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5850:	48 89 d6             	mov    %rdx,%rsi
    5853:	48 89 c7             	mov    %rax,%rdi
    5856:	e8 00 00 00 00       	callq  585b <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    585b:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    585f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5863:	48 89 d6             	mov    %rdx,%rsi
    5866:	48 89 c7             	mov    %rax,%rdi
    5869:	e8 00 00 00 00       	callq  586e <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    586e:	e8 00 00 00 00       	callq  5873 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    5873:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    587a:	e8 00 00 00 00       	callq  587f <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    587f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    5885:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    588c:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    5893:	ba 00 00 00 00       	mov    $0x0,%edx
    5898:	48 89 ce             	mov    %rcx,%rsi
    589b:	48 89 c7             	mov    %rax,%rdi
    589e:	e8 00 00 00 00       	callq  58a3 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    58a3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    58aa:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    58b1:	ba 00 00 00 00       	mov    $0x0,%edx
    58b6:	48 89 ce             	mov    %rcx,%rsi
    58b9:	48 89 c7             	mov    %rax,%rdi
    58bc:	e8 00 00 00 00       	callq  58c1 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    58c1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    58c8:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    58cf:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 58d6 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    58d6:	48 89 ce             	mov    %rcx,%rsi
    58d9:	48 89 c7             	mov    %rax,%rdi
    58dc:	e8 00 00 00 00       	callq  58e1 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    58e1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    58e8:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    58ef:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    58f6:	48 89 ce             	mov    %rcx,%rsi
    58f9:	48 89 c7             	mov    %rax,%rdi
    58fc:	e8 00 00 00 00       	callq  5901 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    5901:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5908:	48 89 c7             	mov    %rax,%rdi
    590b:	e8 00 00 00 00       	callq  5910 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    5910:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5917:	48 89 c7             	mov    %rax,%rdi
    591a:	e8 00 00 00 00       	callq  591f <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    591f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5926:	48 89 c7             	mov    %rax,%rdi
    5929:	e8 00 00 00 00       	callq  592e <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    592e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5935:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    593c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5943 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    5943:	48 89 c7             	mov    %rax,%rdi
    5946:	e8 00 00 00 00       	callq  594b <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    594b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5952:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    5959:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5960 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    5960:	48 89 ce             	mov    %rcx,%rsi
    5963:	48 89 c7             	mov    %rax,%rdi
    5966:	e8 00 00 00 00       	callq  596b <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    596b:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5972:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5976:	48 89 d6             	mov    %rdx,%rsi
    5979:	48 89 c7             	mov    %rax,%rdi
    597c:	e8 00 00 00 00       	callq  5981 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    5981:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5988:	48 89 c7             	mov    %rax,%rdi
    598b:	e8 00 00 00 00       	callq  5990 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    5990:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5997:	48 89 c7             	mov    %rax,%rdi
    599a:	e8 00 00 00 00       	callq  599f <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    599f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59a3:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    59aa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59b1 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    59b1:	48 89 c7             	mov    %rax,%rdi
    59b4:	e8 00 00 00 00       	callq  59b9 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    59b9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59bd:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    59c1:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59c8 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    59c8:	48 89 ce             	mov    %rcx,%rsi
    59cb:	48 89 c7             	mov    %rax,%rdi
    59ce:	e8 00 00 00 00       	callq  59d3 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    59d3:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    59d7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59db:	48 89 d6             	mov    %rdx,%rsi
    59de:	48 89 c7             	mov    %rax,%rdi
    59e1:	e8 00 00 00 00       	callq  59e6 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    59e6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59ea:	48 89 c7             	mov    %rax,%rdi
    59ed:	e8 00 00 00 00       	callq  59f2 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    59f2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59f6:	48 89 c7             	mov    %rax,%rdi
    59f9:	e8 00 00 00 00       	callq  59fe <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    59fe:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5a05:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a09:	48 89 d6             	mov    %rdx,%rsi
    5a0c:	48 89 c7             	mov    %rax,%rdi
    5a0f:	e8 00 00 00 00       	callq  5a14 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5a14:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5a1b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a1f:	48 89 d6             	mov    %rdx,%rsi
    5a22:	48 89 c7             	mov    %rax,%rdi
    5a25:	e8 00 00 00 00       	callq  5a2a <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5a2a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a2e:	48 89 c7             	mov    %rax,%rdi
    5a31:	e8 00 00 00 00       	callq  5a36 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5a36:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a3a:	48 89 c7             	mov    %rax,%rdi
    5a3d:	e8 00 00 00 00       	callq  5a42 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5a42:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5a49:	48 89 c7             	mov    %rax,%rdi
    5a4c:	e8 00 00 00 00       	callq  5a51 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5a51:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a55:	48 89 c7             	mov    %rax,%rdi
    5a58:	e8 00 00 00 00       	callq  5a5d <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5a5d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a61:	48 89 c7             	mov    %rax,%rdi
    5a64:	e8 00 00 00 00       	callq  5a69 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5a69:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a6d:	48 89 c7             	mov    %rax,%rdi
    5a70:	e8 00 00 00 00       	callq  5a75 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5a75:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a79:	48 89 c7             	mov    %rax,%rdi
    5a7c:	e8 00 00 00 00       	callq  5a81 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5a81:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5a88:	48 89 c7             	mov    %rax,%rdi
    5a8b:	e8 00 00 00 00       	callq  5a90 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5a90:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5a97:	48 89 c7             	mov    %rax,%rdi
    5a9a:	e8 00 00 00 00       	callq  5a9f <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5a9f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5aa6:	48 89 c7             	mov    %rax,%rdi
    5aa9:	e8 00 00 00 00       	callq  5aae <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5aae:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5ab5:	48 89 c7             	mov    %rax,%rdi
    5ab8:	e8 00 00 00 00       	callq  5abd <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5abd:	90                   	nop
    5abe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ac2:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ac9:	00 00 
    5acb:	0f 84 d3 01 00 00    	je     5ca4 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ad1:	e9 c9 01 00 00       	jmpq   5c9f <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5ad6:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5ad9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5ae0:	48 89 c7             	mov    %rax,%rdi
    5ae3:	e8 00 00 00 00       	callq  5ae8 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5ae8:	eb 03                	jmp    5aed <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5aea:	48 89 c3             	mov    %rax,%rbx
    5aed:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5af4:	48 89 c7             	mov    %rax,%rdi
    5af7:	e8 00 00 00 00       	callq  5afc <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5afc:	e9 48 01 00 00       	jmpq   5c49 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b01:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5b04:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5b0b:	48 89 c7             	mov    %rax,%rdi
    5b0e:	e8 00 00 00 00       	callq  5b13 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5b13:	eb 03                	jmp    5b18 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5b15:	48 89 c3             	mov    %rax,%rbx
    5b18:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5b1f:	48 89 c7             	mov    %rax,%rdi
    5b22:	e8 00 00 00 00       	callq  5b27 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5b27:	e9 1d 01 00 00       	jmpq   5c49 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b2c:	48 89 c3             	mov    %rax,%rbx
    5b2f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b36:	48 89 c7             	mov    %rax,%rdi
    5b39:	e8 00 00 00 00       	callq  5b3e <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5b3e:	eb 17                	jmp    5b57 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b40:	48 89 c3             	mov    %rax,%rbx
    5b43:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b4a:	48 89 c7             	mov    %rax,%rdi
    5b4d:	e8 00 00 00 00       	callq  5b52 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5b52:	eb 03                	jmp    5b57 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b54:	48 89 c3             	mov    %rax,%rbx
    5b57:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5b5e:	48 89 c7             	mov    %rax,%rdi
    5b61:	e8 00 00 00 00       	callq  5b66 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5b66:	eb 17                	jmp    5b7f <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b68:	48 89 c3             	mov    %rax,%rbx
    5b6b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b72:	48 89 c7             	mov    %rax,%rdi
    5b75:	e8 00 00 00 00       	callq  5b7a <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5b7a:	eb 03                	jmp    5b7f <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b7c:	48 89 c3             	mov    %rax,%rbx
    5b7f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5b86:	48 89 c7             	mov    %rax,%rdi
    5b89:	e8 00 00 00 00       	callq  5b8e <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5b8e:	eb 75                	jmp    5c05 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5b90:	48 89 c3             	mov    %rax,%rbx
    5b93:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b9a:	48 89 c7             	mov    %rax,%rdi
    5b9d:	e8 00 00 00 00       	callq  5ba2 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5ba2:	eb 61                	jmp    5c05 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5ba4:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5ba7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5bae:	48 89 c7             	mov    %rax,%rdi
    5bb1:	e8 00 00 00 00       	callq  5bb6 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5bb6:	eb 03                	jmp    5bbb <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5bb8:	48 89 c3             	mov    %rax,%rbx
    5bbb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5bc2:	48 89 c7             	mov    %rax,%rdi
    5bc5:	e8 00 00 00 00       	callq  5bca <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5bca:	eb 25                	jmp    5bf1 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5bcc:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5bcf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5bd3:	48 89 c7             	mov    %rax,%rdi
    5bd6:	e8 00 00 00 00       	callq  5bdb <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5bdb:	eb 03                	jmp    5be0 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5bdd:	48 89 c3             	mov    %rax,%rbx
    5be0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5be4:	48 89 c7             	mov    %rax,%rdi
    5be7:	e8 00 00 00 00       	callq  5bec <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5bec:	eb 03                	jmp    5bf1 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5bee:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5bf1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5bf8:	48 89 c7             	mov    %rax,%rdi
    5bfb:	e8 00 00 00 00       	callq  5c00 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5c00:	eb 03                	jmp    5c05 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c02:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5c05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c09:	48 89 c7             	mov    %rax,%rdi
    5c0c:	e8 00 00 00 00       	callq  5c11 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5c11:	eb 03                	jmp    5c16 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5c13:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5c16:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c1a:	48 89 c7             	mov    %rax,%rdi
    5c1d:	e8 00 00 00 00       	callq  5c22 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5c22:	eb 03                	jmp    5c27 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5c24:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5c27:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5c2b:	48 89 c7             	mov    %rax,%rdi
    5c2e:	e8 00 00 00 00       	callq  5c33 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5c33:	eb 03                	jmp    5c38 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5c35:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5c38:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5c3c:	48 89 c7             	mov    %rax,%rdi
    5c3f:	e8 00 00 00 00       	callq  5c44 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5c44:	eb 03                	jmp    5c49 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c46:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5c49:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5c50:	48 89 c7             	mov    %rax,%rdi
    5c53:	e8 00 00 00 00       	callq  5c58 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5c58:	eb 03                	jmp    5c5d <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5c5a:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5c5d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5c64:	48 89 c7             	mov    %rax,%rdi
    5c67:	e8 00 00 00 00       	callq  5c6c <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5c6c:	eb 03                	jmp    5c71 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5c6e:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5c71:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5c78:	48 89 c7             	mov    %rax,%rdi
    5c7b:	e8 00 00 00 00       	callq  5c80 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5c80:	eb 03                	jmp    5c85 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5c82:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5c85:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5c8c:	48 89 c7             	mov    %rax,%rdi
    5c8f:	e8 00 00 00 00       	callq  5c94 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5c94:	48 89 d8             	mov    %rbx,%rax
    5c97:	48 89 c7             	mov    %rax,%rdi
    5c9a:	e8 00 00 00 00       	callq  5c9f <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5c9f:	e8 00 00 00 00       	callq  5ca4 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ca4:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5cab:	5b                   	pop    %rbx
    5cac:	5d                   	pop    %rbp
    5cad:	c3                   	retq   

0000000000005cae <_ZN6Parser4initEv>:

void Parser::init(){
    5cae:	55                   	push   %rbp
    5caf:	48 89 e5             	mov    %rsp,%rbp
    5cb2:	48 83 ec 10          	sub    $0x10,%rsp
    5cb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cbe:	48 83 c0 30          	add    $0x30,%rax
    5cc2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5cc9 <_ZN6Parser4initEv+0x1b>
    5cc9:	48 89 c7             	mov    %rax,%rdi
    5ccc:	e8 00 00 00 00       	callq  5cd1 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cd5:	48 83 c0 38          	add    $0x38,%rax
    5cd9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ce0 <_ZN6Parser4initEv+0x32>
    5ce0:	48 89 c7             	mov    %rax,%rdi
    5ce3:	e8 00 00 00 00       	callq  5ce8 <_ZN6Parser4initEv+0x3a>
}
    5ce8:	90                   	nop
    5ce9:	c9                   	leaveq 
    5cea:	c3                   	retq   
    5ceb:	90                   	nop

0000000000005cec <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5cec:	55                   	push   %rbp
    5ced:	48 89 e5             	mov    %rsp,%rbp
    5cf0:	53                   	push   %rbx
    5cf1:	48 83 ec 38          	sub    $0x38,%rsp
    5cf5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5cf9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d00:	00 00 
    5d02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5d06:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5d08:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d0f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d13:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d1a <_ZN6Parser8initSemsEv+0x2e>
    5d1a:	48 89 c7             	mov    %rax,%rdi
    5d1d:	e8 00 00 00 00       	callq  5d22 <_ZN6Parser8initSemsEv+0x36>
    5d22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d26:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d2d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d31:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d35:	48 89 c6             	mov    %rax,%rsi
    5d38:	48 89 cf             	mov    %rcx,%rdi
    5d3b:	e8 00 00 00 00       	callq  5d40 <_ZN6Parser8initSemsEv+0x54>
    5d40:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d44:	48 89 c7             	mov    %rax,%rdi
    5d47:	e8 00 00 00 00       	callq  5d4c <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5d4c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d53:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d57:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d5e <_ZN6Parser8initSemsEv+0x72>
    5d5e:	48 89 c7             	mov    %rax,%rdi
    5d61:	e8 00 00 00 00       	callq  5d66 <_ZN6Parser8initSemsEv+0x7a>
    5d66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d6a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d71:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d75:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d79:	48 89 c6             	mov    %rax,%rsi
    5d7c:	48 89 cf             	mov    %rcx,%rdi
    5d7f:	e8 00 00 00 00       	callq  5d84 <_ZN6Parser8initSemsEv+0x98>
    5d84:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d88:	48 89 c7             	mov    %rax,%rdi
    5d8b:	e8 00 00 00 00       	callq  5d90 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5d90:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5d97:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d9b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5da2 <_ZN6Parser8initSemsEv+0xb6>
    5da2:	48 89 c7             	mov    %rax,%rdi
    5da5:	e8 00 00 00 00       	callq  5daa <_ZN6Parser8initSemsEv+0xbe>
    5daa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dae:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5db5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5db9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dbd:	48 89 c6             	mov    %rax,%rsi
    5dc0:	48 89 cf             	mov    %rcx,%rdi
    5dc3:	e8 00 00 00 00       	callq  5dc8 <_ZN6Parser8initSemsEv+0xdc>
    5dc8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dcc:	48 89 c7             	mov    %rax,%rdi
    5dcf:	e8 00 00 00 00       	callq  5dd4 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5dd4:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5ddb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ddf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5de6 <_ZN6Parser8initSemsEv+0xfa>
    5de6:	48 89 c7             	mov    %rax,%rdi
    5de9:	e8 00 00 00 00       	callq  5dee <_ZN6Parser8initSemsEv+0x102>
    5dee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5df2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5df9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dfd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e01:	48 89 c6             	mov    %rax,%rsi
    5e04:	48 89 cf             	mov    %rcx,%rdi
    5e07:	e8 00 00 00 00       	callq  5e0c <_ZN6Parser8initSemsEv+0x120>
    5e0c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e10:	48 89 c7             	mov    %rax,%rdi
    5e13:	e8 00 00 00 00       	callq  5e18 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5e18:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5e1f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e23:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e2a <_ZN6Parser8initSemsEv+0x13e>
    5e2a:	48 89 c7             	mov    %rax,%rdi
    5e2d:	e8 00 00 00 00       	callq  5e32 <_ZN6Parser8initSemsEv+0x146>
    5e32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e36:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e3d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e41:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e45:	48 89 c6             	mov    %rax,%rsi
    5e48:	48 89 cf             	mov    %rcx,%rdi
    5e4b:	e8 00 00 00 00       	callq  5e50 <_ZN6Parser8initSemsEv+0x164>
    5e50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e54:	48 89 c7             	mov    %rax,%rdi
    5e57:	e8 00 00 00 00       	callq  5e5c <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5e5c:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5e63:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e67:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e6e <_ZN6Parser8initSemsEv+0x182>
    5e6e:	48 89 c7             	mov    %rax,%rdi
    5e71:	e8 00 00 00 00       	callq  5e76 <_ZN6Parser8initSemsEv+0x18a>
    5e76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e7a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e81:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e85:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e89:	48 89 c6             	mov    %rax,%rsi
    5e8c:	48 89 cf             	mov    %rcx,%rdi
    5e8f:	e8 00 00 00 00       	callq  5e94 <_ZN6Parser8initSemsEv+0x1a8>
    5e94:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e98:	48 89 c7             	mov    %rax,%rdi
    5e9b:	e8 00 00 00 00       	callq  5ea0 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5ea0:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5ea7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5eb2 <_ZN6Parser8initSemsEv+0x1c6>
    5eb2:	48 89 c7             	mov    %rax,%rdi
    5eb5:	e8 00 00 00 00       	callq  5eba <_ZN6Parser8initSemsEv+0x1ce>
    5eba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ebe:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ec5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ec9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ecd:	48 89 c6             	mov    %rax,%rsi
    5ed0:	48 89 cf             	mov    %rcx,%rdi
    5ed3:	e8 00 00 00 00       	callq  5ed8 <_ZN6Parser8initSemsEv+0x1ec>
    5ed8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5edc:	48 89 c7             	mov    %rax,%rdi
    5edf:	e8 00 00 00 00       	callq  5ee4 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5ee4:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5eeb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ef6 <_ZN6Parser8initSemsEv+0x20a>
    5ef6:	48 89 c7             	mov    %rax,%rdi
    5ef9:	e8 00 00 00 00       	callq  5efe <_ZN6Parser8initSemsEv+0x212>
    5efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f02:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f09:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f0d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f11:	48 89 c6             	mov    %rax,%rsi
    5f14:	48 89 cf             	mov    %rcx,%rdi
    5f17:	e8 00 00 00 00       	callq  5f1c <_ZN6Parser8initSemsEv+0x230>
    5f1c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f20:	48 89 c7             	mov    %rax,%rdi
    5f23:	e8 00 00 00 00       	callq  5f28 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5f28:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5f2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f33:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f3a <_ZN6Parser8initSemsEv+0x24e>
    5f3a:	48 89 c7             	mov    %rax,%rdi
    5f3d:	e8 00 00 00 00       	callq  5f42 <_ZN6Parser8initSemsEv+0x256>
    5f42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f46:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f4d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f51:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f55:	48 89 c6             	mov    %rax,%rsi
    5f58:	48 89 cf             	mov    %rcx,%rdi
    5f5b:	e8 00 00 00 00       	callq  5f60 <_ZN6Parser8initSemsEv+0x274>
    5f60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f64:	48 89 c7             	mov    %rax,%rdi
    5f67:	e8 00 00 00 00       	callq  5f6c <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5f6c:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5f73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f77:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f7e <_ZN6Parser8initSemsEv+0x292>
    5f7e:	48 89 c7             	mov    %rax,%rdi
    5f81:	e8 00 00 00 00       	callq  5f86 <_ZN6Parser8initSemsEv+0x29a>
    5f86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f8a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f91:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f95:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f99:	48 89 c6             	mov    %rax,%rsi
    5f9c:	48 89 cf             	mov    %rcx,%rdi
    5f9f:	e8 00 00 00 00       	callq  5fa4 <_ZN6Parser8initSemsEv+0x2b8>
    5fa4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fa8:	48 89 c7             	mov    %rax,%rdi
    5fab:	e8 00 00 00 00       	callq  5fb0 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5fb0:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5fb7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fbb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fc2 <_ZN6Parser8initSemsEv+0x2d6>
    5fc2:	48 89 c7             	mov    %rax,%rdi
    5fc5:	e8 00 00 00 00       	callq  5fca <_ZN6Parser8initSemsEv+0x2de>
    5fca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fce:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fd5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fd9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fdd:	48 89 c6             	mov    %rax,%rsi
    5fe0:	48 89 cf             	mov    %rcx,%rdi
    5fe3:	e8 00 00 00 00       	callq  5fe8 <_ZN6Parser8initSemsEv+0x2fc>
    5fe8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fec:	48 89 c7             	mov    %rax,%rdi
    5fef:	e8 00 00 00 00       	callq  5ff4 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    5ff4:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    5ffb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6006 <_ZN6Parser8initSemsEv+0x31a>
    6006:	48 89 c7             	mov    %rax,%rdi
    6009:	e8 00 00 00 00       	callq  600e <_ZN6Parser8initSemsEv+0x322>
    600e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6012:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6019:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    601d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6021:	48 89 c6             	mov    %rax,%rsi
    6024:	48 89 cf             	mov    %rcx,%rdi
    6027:	e8 00 00 00 00       	callq  602c <_ZN6Parser8initSemsEv+0x340>
    602c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6030:	48 89 c7             	mov    %rax,%rdi
    6033:	e8 00 00 00 00       	callq  6038 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    6038:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    603f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6043:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 604a <_ZN6Parser8initSemsEv+0x35e>
    604a:	48 89 c7             	mov    %rax,%rdi
    604d:	e8 00 00 00 00       	callq  6052 <_ZN6Parser8initSemsEv+0x366>
    6052:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6056:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    605d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6061:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6065:	48 89 c6             	mov    %rax,%rsi
    6068:	48 89 cf             	mov    %rcx,%rdi
    606b:	e8 00 00 00 00       	callq  6070 <_ZN6Parser8initSemsEv+0x384>
    6070:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6074:	48 89 c7             	mov    %rax,%rdi
    6077:	e8 00 00 00 00       	callq  607c <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    607c:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    6083:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6087:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 608e <_ZN6Parser8initSemsEv+0x3a2>
    608e:	48 89 c7             	mov    %rax,%rdi
    6091:	e8 00 00 00 00       	callq  6096 <_ZN6Parser8initSemsEv+0x3aa>
    6096:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    609a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60a1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60a9:	48 89 c6             	mov    %rax,%rsi
    60ac:	48 89 cf             	mov    %rcx,%rdi
    60af:	e8 00 00 00 00       	callq  60b4 <_ZN6Parser8initSemsEv+0x3c8>
    60b4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60b8:	48 89 c7             	mov    %rax,%rdi
    60bb:	e8 00 00 00 00       	callq  60c0 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    60c0:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    60c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60cb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60d2 <_ZN6Parser8initSemsEv+0x3e6>
    60d2:	48 89 c7             	mov    %rax,%rdi
    60d5:	e8 00 00 00 00       	callq  60da <_ZN6Parser8initSemsEv+0x3ee>
    60da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60de:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60e5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60e9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60ed:	48 89 c6             	mov    %rax,%rsi
    60f0:	48 89 cf             	mov    %rcx,%rdi
    60f3:	e8 00 00 00 00       	callq  60f8 <_ZN6Parser8initSemsEv+0x40c>
    60f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60fc:	48 89 c7             	mov    %rax,%rdi
    60ff:	e8 00 00 00 00       	callq  6104 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    6104:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    610b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    610f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6116 <_ZN6Parser8initSemsEv+0x42a>
    6116:	48 89 c7             	mov    %rax,%rdi
    6119:	e8 00 00 00 00       	callq  611e <_ZN6Parser8initSemsEv+0x432>
    611e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6122:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6129:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    612d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6131:	48 89 c6             	mov    %rax,%rsi
    6134:	48 89 cf             	mov    %rcx,%rdi
    6137:	e8 00 00 00 00       	callq  613c <_ZN6Parser8initSemsEv+0x450>
    613c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6140:	48 89 c7             	mov    %rax,%rdi
    6143:	e8 00 00 00 00       	callq  6148 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6148:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    614f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6153:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 615a <_ZN6Parser8initSemsEv+0x46e>
    615a:	48 89 c7             	mov    %rax,%rdi
    615d:	e8 00 00 00 00       	callq  6162 <_ZN6Parser8initSemsEv+0x476>
    6162:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6166:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    616d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6171:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6175:	48 89 c6             	mov    %rax,%rsi
    6178:	48 89 cf             	mov    %rcx,%rdi
    617b:	e8 00 00 00 00       	callq  6180 <_ZN6Parser8initSemsEv+0x494>
    6180:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6184:	48 89 c7             	mov    %rax,%rdi
    6187:	e8 00 00 00 00       	callq  618c <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    618c:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    6193:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6197:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 619e <_ZN6Parser8initSemsEv+0x4b2>
    619e:	48 89 c7             	mov    %rax,%rdi
    61a1:	e8 00 00 00 00       	callq  61a6 <_ZN6Parser8initSemsEv+0x4ba>
    61a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61aa:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61b1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61b9:	48 89 c6             	mov    %rax,%rsi
    61bc:	48 89 cf             	mov    %rcx,%rdi
    61bf:	e8 00 00 00 00       	callq  61c4 <_ZN6Parser8initSemsEv+0x4d8>
    61c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61c8:	48 89 c7             	mov    %rax,%rdi
    61cb:	e8 00 00 00 00       	callq  61d0 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    61d0:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    61d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61db:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61e2 <_ZN6Parser8initSemsEv+0x4f6>
    61e2:	48 89 c7             	mov    %rax,%rdi
    61e5:	e8 00 00 00 00       	callq  61ea <_ZN6Parser8initSemsEv+0x4fe>
    61ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61ee:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61f5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61fd:	48 89 c6             	mov    %rax,%rsi
    6200:	48 89 cf             	mov    %rcx,%rdi
    6203:	e8 00 00 00 00       	callq  6208 <_ZN6Parser8initSemsEv+0x51c>
    6208:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    620c:	48 89 c7             	mov    %rax,%rdi
    620f:	e8 00 00 00 00       	callq  6214 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    6214:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    621b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    621f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6226 <_ZN6Parser8initSemsEv+0x53a>
    6226:	48 89 c7             	mov    %rax,%rdi
    6229:	e8 00 00 00 00       	callq  622e <_ZN6Parser8initSemsEv+0x542>
    622e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6232:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6239:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    623d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6241:	48 89 c6             	mov    %rax,%rsi
    6244:	48 89 cf             	mov    %rcx,%rdi
    6247:	e8 00 00 00 00       	callq  624c <_ZN6Parser8initSemsEv+0x560>
    624c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6250:	48 89 c7             	mov    %rax,%rdi
    6253:	e8 00 00 00 00       	callq  6258 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    6258:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    625f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6263:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 626a <_ZN6Parser8initSemsEv+0x57e>
    626a:	48 89 c7             	mov    %rax,%rdi
    626d:	e8 00 00 00 00       	callq  6272 <_ZN6Parser8initSemsEv+0x586>
    6272:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6276:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    627d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6281:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6285:	48 89 c6             	mov    %rax,%rsi
    6288:	48 89 cf             	mov    %rcx,%rdi
    628b:	e8 00 00 00 00       	callq  6290 <_ZN6Parser8initSemsEv+0x5a4>
    6290:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6294:	48 89 c7             	mov    %rax,%rdi
    6297:	e8 00 00 00 00       	callq  629c <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    629c:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    62a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62ae <_ZN6Parser8initSemsEv+0x5c2>
    62ae:	48 89 c7             	mov    %rax,%rdi
    62b1:	e8 00 00 00 00       	callq  62b6 <_ZN6Parser8initSemsEv+0x5ca>
    62b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62ba:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    62c1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62c9:	48 89 c6             	mov    %rax,%rsi
    62cc:	48 89 cf             	mov    %rcx,%rdi
    62cf:	e8 00 00 00 00       	callq  62d4 <_ZN6Parser8initSemsEv+0x5e8>
    62d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62d8:	48 89 c7             	mov    %rax,%rdi
    62db:	e8 00 00 00 00       	callq  62e0 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    62e0:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    62e7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62f2 <_ZN6Parser8initSemsEv+0x606>
    62f2:	48 89 c7             	mov    %rax,%rdi
    62f5:	e8 00 00 00 00       	callq  62fa <_ZN6Parser8initSemsEv+0x60e>
    62fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62fe:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6305:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6309:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    630d:	48 89 c6             	mov    %rax,%rsi
    6310:	48 89 cf             	mov    %rcx,%rdi
    6313:	e8 00 00 00 00       	callq  6318 <_ZN6Parser8initSemsEv+0x62c>
    6318:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    631c:	48 89 c7             	mov    %rax,%rdi
    631f:	e8 00 00 00 00       	callq  6324 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    6324:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    632b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    632f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6336 <_ZN6Parser8initSemsEv+0x64a>
    6336:	48 89 c7             	mov    %rax,%rdi
    6339:	e8 00 00 00 00       	callq  633e <_ZN6Parser8initSemsEv+0x652>
    633e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6342:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6349:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    634d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6351:	48 89 c6             	mov    %rax,%rsi
    6354:	48 89 cf             	mov    %rcx,%rdi
    6357:	e8 00 00 00 00       	callq  635c <_ZN6Parser8initSemsEv+0x670>
    635c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6360:	48 89 c7             	mov    %rax,%rdi
    6363:	e8 00 00 00 00       	callq  6368 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    6368:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    636f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6373:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 637a <_ZN6Parser8initSemsEv+0x68e>
    637a:	48 89 c7             	mov    %rax,%rdi
    637d:	e8 00 00 00 00       	callq  6382 <_ZN6Parser8initSemsEv+0x696>
    6382:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6386:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    638d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6391:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6395:	48 89 c6             	mov    %rax,%rsi
    6398:	48 89 cf             	mov    %rcx,%rdi
    639b:	e8 00 00 00 00       	callq  63a0 <_ZN6Parser8initSemsEv+0x6b4>
    63a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63a4:	48 89 c7             	mov    %rax,%rdi
    63a7:	e8 00 00 00 00       	callq  63ac <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    63ac:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    63b3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63be <_ZN6Parser8initSemsEv+0x6d2>
    63be:	48 89 c7             	mov    %rax,%rdi
    63c1:	e8 00 00 00 00       	callq  63c6 <_ZN6Parser8initSemsEv+0x6da>
    63c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63ca:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    63d1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63d5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63d9:	48 89 c6             	mov    %rax,%rsi
    63dc:	48 89 cf             	mov    %rcx,%rdi
    63df:	e8 00 00 00 00       	callq  63e4 <_ZN6Parser8initSemsEv+0x6f8>
    63e4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63e8:	48 89 c7             	mov    %rax,%rdi
    63eb:	e8 00 00 00 00       	callq  63f0 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    63f0:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    63f7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6402 <_ZN6Parser8initSemsEv+0x716>
    6402:	48 89 c7             	mov    %rax,%rdi
    6405:	e8 00 00 00 00       	callq  640a <_ZN6Parser8initSemsEv+0x71e>
    640a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    640e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6415:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6419:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    641d:	48 89 c6             	mov    %rax,%rsi
    6420:	48 89 cf             	mov    %rcx,%rdi
    6423:	e8 00 00 00 00       	callq  6428 <_ZN6Parser8initSemsEv+0x73c>
    6428:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    642c:	48 89 c7             	mov    %rax,%rdi
    642f:	e8 00 00 00 00       	callq  6434 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    6434:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    643b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    643f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6446 <_ZN6Parser8initSemsEv+0x75a>
    6446:	48 89 c7             	mov    %rax,%rdi
    6449:	e8 00 00 00 00       	callq  644e <_ZN6Parser8initSemsEv+0x762>
    644e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6452:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6459:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    645d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6461:	48 89 c6             	mov    %rax,%rsi
    6464:	48 89 cf             	mov    %rcx,%rdi
    6467:	e8 00 00 00 00       	callq  646c <_ZN6Parser8initSemsEv+0x780>
    646c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6470:	48 89 c7             	mov    %rax,%rdi
    6473:	e8 00 00 00 00       	callq  6478 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    6478:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    647f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6483:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 648a <_ZN6Parser8initSemsEv+0x79e>
    648a:	48 89 c7             	mov    %rax,%rdi
    648d:	e8 00 00 00 00       	callq  6492 <_ZN6Parser8initSemsEv+0x7a6>
    6492:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6496:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    649d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64a5:	48 89 c6             	mov    %rax,%rsi
    64a8:	48 89 cf             	mov    %rcx,%rdi
    64ab:	e8 00 00 00 00       	callq  64b0 <_ZN6Parser8initSemsEv+0x7c4>
    64b0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64b4:	48 89 c7             	mov    %rax,%rdi
    64b7:	e8 00 00 00 00       	callq  64bc <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    64bc:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    64c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64c7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64ce <_ZN6Parser8initSemsEv+0x7e2>
    64ce:	48 89 c7             	mov    %rax,%rdi
    64d1:	e8 00 00 00 00       	callq  64d6 <_ZN6Parser8initSemsEv+0x7ea>
    64d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64da:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64e1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64e9:	48 89 c6             	mov    %rax,%rsi
    64ec:	48 89 cf             	mov    %rcx,%rdi
    64ef:	e8 00 00 00 00       	callq  64f4 <_ZN6Parser8initSemsEv+0x808>
    64f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64f8:	48 89 c7             	mov    %rax,%rdi
    64fb:	e8 00 00 00 00       	callq  6500 <_ZN6Parser8initSemsEv+0x814>

}
    6500:	90                   	nop
    6501:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6505:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    650c:	00 00 
    650e:	0f 84 16 03 00 00    	je     682a <_ZN6Parser8initSemsEv+0xb3e>
    6514:	e9 0c 03 00 00       	jmpq   6825 <_ZN6Parser8initSemsEv+0xb39>
    6519:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    651c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6520:	48 89 c7             	mov    %rax,%rdi
    6523:	e8 00 00 00 00       	callq  6528 <_ZN6Parser8initSemsEv+0x83c>
    6528:	48 89 d8             	mov    %rbx,%rax
    652b:	48 89 c7             	mov    %rax,%rdi
    652e:	e8 00 00 00 00       	callq  6533 <_ZN6Parser8initSemsEv+0x847>
    6533:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    6536:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    653a:	48 89 c7             	mov    %rax,%rdi
    653d:	e8 00 00 00 00       	callq  6542 <_ZN6Parser8initSemsEv+0x856>
    6542:	48 89 d8             	mov    %rbx,%rax
    6545:	48 89 c7             	mov    %rax,%rdi
    6548:	e8 00 00 00 00       	callq  654d <_ZN6Parser8initSemsEv+0x861>
    654d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    6550:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6554:	48 89 c7             	mov    %rax,%rdi
    6557:	e8 00 00 00 00       	callq  655c <_ZN6Parser8initSemsEv+0x870>
    655c:	48 89 d8             	mov    %rbx,%rax
    655f:	48 89 c7             	mov    %rax,%rdi
    6562:	e8 00 00 00 00       	callq  6567 <_ZN6Parser8initSemsEv+0x87b>
    6567:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    656a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    656e:	48 89 c7             	mov    %rax,%rdi
    6571:	e8 00 00 00 00       	callq  6576 <_ZN6Parser8initSemsEv+0x88a>
    6576:	48 89 d8             	mov    %rbx,%rax
    6579:	48 89 c7             	mov    %rax,%rdi
    657c:	e8 00 00 00 00       	callq  6581 <_ZN6Parser8initSemsEv+0x895>
    6581:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    6584:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6588:	48 89 c7             	mov    %rax,%rdi
    658b:	e8 00 00 00 00       	callq  6590 <_ZN6Parser8initSemsEv+0x8a4>
    6590:	48 89 d8             	mov    %rbx,%rax
    6593:	48 89 c7             	mov    %rax,%rdi
    6596:	e8 00 00 00 00       	callq  659b <_ZN6Parser8initSemsEv+0x8af>
    659b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    659e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a2:	48 89 c7             	mov    %rax,%rdi
    65a5:	e8 00 00 00 00       	callq  65aa <_ZN6Parser8initSemsEv+0x8be>
    65aa:	48 89 d8             	mov    %rbx,%rax
    65ad:	48 89 c7             	mov    %rax,%rdi
    65b0:	e8 00 00 00 00       	callq  65b5 <_ZN6Parser8initSemsEv+0x8c9>
    65b5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    65b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65bc:	48 89 c7             	mov    %rax,%rdi
    65bf:	e8 00 00 00 00       	callq  65c4 <_ZN6Parser8initSemsEv+0x8d8>
    65c4:	48 89 d8             	mov    %rbx,%rax
    65c7:	48 89 c7             	mov    %rax,%rdi
    65ca:	e8 00 00 00 00       	callq  65cf <_ZN6Parser8initSemsEv+0x8e3>
    65cf:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    65d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65d6:	48 89 c7             	mov    %rax,%rdi
    65d9:	e8 00 00 00 00       	callq  65de <_ZN6Parser8initSemsEv+0x8f2>
    65de:	48 89 d8             	mov    %rbx,%rax
    65e1:	48 89 c7             	mov    %rax,%rdi
    65e4:	e8 00 00 00 00       	callq  65e9 <_ZN6Parser8initSemsEv+0x8fd>
    65e9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    65ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65f0:	48 89 c7             	mov    %rax,%rdi
    65f3:	e8 00 00 00 00       	callq  65f8 <_ZN6Parser8initSemsEv+0x90c>
    65f8:	48 89 d8             	mov    %rbx,%rax
    65fb:	48 89 c7             	mov    %rax,%rdi
    65fe:	e8 00 00 00 00       	callq  6603 <_ZN6Parser8initSemsEv+0x917>
    6603:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    6606:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    660a:	48 89 c7             	mov    %rax,%rdi
    660d:	e8 00 00 00 00       	callq  6612 <_ZN6Parser8initSemsEv+0x926>
    6612:	48 89 d8             	mov    %rbx,%rax
    6615:	48 89 c7             	mov    %rax,%rdi
    6618:	e8 00 00 00 00       	callq  661d <_ZN6Parser8initSemsEv+0x931>
    661d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    6620:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6624:	48 89 c7             	mov    %rax,%rdi
    6627:	e8 00 00 00 00       	callq  662c <_ZN6Parser8initSemsEv+0x940>
    662c:	48 89 d8             	mov    %rbx,%rax
    662f:	48 89 c7             	mov    %rax,%rdi
    6632:	e8 00 00 00 00       	callq  6637 <_ZN6Parser8initSemsEv+0x94b>
    6637:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    663a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    663e:	48 89 c7             	mov    %rax,%rdi
    6641:	e8 00 00 00 00       	callq  6646 <_ZN6Parser8initSemsEv+0x95a>
    6646:	48 89 d8             	mov    %rbx,%rax
    6649:	48 89 c7             	mov    %rax,%rdi
    664c:	e8 00 00 00 00       	callq  6651 <_ZN6Parser8initSemsEv+0x965>
    6651:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    6654:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6658:	48 89 c7             	mov    %rax,%rdi
    665b:	e8 00 00 00 00       	callq  6660 <_ZN6Parser8initSemsEv+0x974>
    6660:	48 89 d8             	mov    %rbx,%rax
    6663:	48 89 c7             	mov    %rax,%rdi
    6666:	e8 00 00 00 00       	callq  666b <_ZN6Parser8initSemsEv+0x97f>
    666b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    666e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6672:	48 89 c7             	mov    %rax,%rdi
    6675:	e8 00 00 00 00       	callq  667a <_ZN6Parser8initSemsEv+0x98e>
    667a:	48 89 d8             	mov    %rbx,%rax
    667d:	48 89 c7             	mov    %rax,%rdi
    6680:	e8 00 00 00 00       	callq  6685 <_ZN6Parser8initSemsEv+0x999>
    6685:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    6688:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    668c:	48 89 c7             	mov    %rax,%rdi
    668f:	e8 00 00 00 00       	callq  6694 <_ZN6Parser8initSemsEv+0x9a8>
    6694:	48 89 d8             	mov    %rbx,%rax
    6697:	48 89 c7             	mov    %rax,%rdi
    669a:	e8 00 00 00 00       	callq  669f <_ZN6Parser8initSemsEv+0x9b3>
    669f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    66a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66a6:	48 89 c7             	mov    %rax,%rdi
    66a9:	e8 00 00 00 00       	callq  66ae <_ZN6Parser8initSemsEv+0x9c2>
    66ae:	48 89 d8             	mov    %rbx,%rax
    66b1:	48 89 c7             	mov    %rax,%rdi
    66b4:	e8 00 00 00 00       	callq  66b9 <_ZN6Parser8initSemsEv+0x9cd>
    66b9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    66bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66c0:	48 89 c7             	mov    %rax,%rdi
    66c3:	e8 00 00 00 00       	callq  66c8 <_ZN6Parser8initSemsEv+0x9dc>
    66c8:	48 89 d8             	mov    %rbx,%rax
    66cb:	48 89 c7             	mov    %rax,%rdi
    66ce:	e8 00 00 00 00       	callq  66d3 <_ZN6Parser8initSemsEv+0x9e7>
    66d3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    66d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66da:	48 89 c7             	mov    %rax,%rdi
    66dd:	e8 00 00 00 00       	callq  66e2 <_ZN6Parser8initSemsEv+0x9f6>
    66e2:	48 89 d8             	mov    %rbx,%rax
    66e5:	48 89 c7             	mov    %rax,%rdi
    66e8:	e8 00 00 00 00       	callq  66ed <_ZN6Parser8initSemsEv+0xa01>
    66ed:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    66f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66f4:	48 89 c7             	mov    %rax,%rdi
    66f7:	e8 00 00 00 00       	callq  66fc <_ZN6Parser8initSemsEv+0xa10>
    66fc:	48 89 d8             	mov    %rbx,%rax
    66ff:	48 89 c7             	mov    %rax,%rdi
    6702:	e8 00 00 00 00       	callq  6707 <_ZN6Parser8initSemsEv+0xa1b>
    6707:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    670a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    670e:	48 89 c7             	mov    %rax,%rdi
    6711:	e8 00 00 00 00       	callq  6716 <_ZN6Parser8initSemsEv+0xa2a>
    6716:	48 89 d8             	mov    %rbx,%rax
    6719:	48 89 c7             	mov    %rax,%rdi
    671c:	e8 00 00 00 00       	callq  6721 <_ZN6Parser8initSemsEv+0xa35>
    6721:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    6724:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6728:	48 89 c7             	mov    %rax,%rdi
    672b:	e8 00 00 00 00       	callq  6730 <_ZN6Parser8initSemsEv+0xa44>
    6730:	48 89 d8             	mov    %rbx,%rax
    6733:	48 89 c7             	mov    %rax,%rdi
    6736:	e8 00 00 00 00       	callq  673b <_ZN6Parser8initSemsEv+0xa4f>
    673b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    673e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6742:	48 89 c7             	mov    %rax,%rdi
    6745:	e8 00 00 00 00       	callq  674a <_ZN6Parser8initSemsEv+0xa5e>
    674a:	48 89 d8             	mov    %rbx,%rax
    674d:	48 89 c7             	mov    %rax,%rdi
    6750:	e8 00 00 00 00       	callq  6755 <_ZN6Parser8initSemsEv+0xa69>
    6755:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    6758:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    675c:	48 89 c7             	mov    %rax,%rdi
    675f:	e8 00 00 00 00       	callq  6764 <_ZN6Parser8initSemsEv+0xa78>
    6764:	48 89 d8             	mov    %rbx,%rax
    6767:	48 89 c7             	mov    %rax,%rdi
    676a:	e8 00 00 00 00       	callq  676f <_ZN6Parser8initSemsEv+0xa83>
    676f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    6772:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6776:	48 89 c7             	mov    %rax,%rdi
    6779:	e8 00 00 00 00       	callq  677e <_ZN6Parser8initSemsEv+0xa92>
    677e:	48 89 d8             	mov    %rbx,%rax
    6781:	48 89 c7             	mov    %rax,%rdi
    6784:	e8 00 00 00 00       	callq  6789 <_ZN6Parser8initSemsEv+0xa9d>
    6789:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    678c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6790:	48 89 c7             	mov    %rax,%rdi
    6793:	e8 00 00 00 00       	callq  6798 <_ZN6Parser8initSemsEv+0xaac>
    6798:	48 89 d8             	mov    %rbx,%rax
    679b:	48 89 c7             	mov    %rax,%rdi
    679e:	e8 00 00 00 00       	callq  67a3 <_ZN6Parser8initSemsEv+0xab7>
    67a3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    67a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67aa:	48 89 c7             	mov    %rax,%rdi
    67ad:	e8 00 00 00 00       	callq  67b2 <_ZN6Parser8initSemsEv+0xac6>
    67b2:	48 89 d8             	mov    %rbx,%rax
    67b5:	48 89 c7             	mov    %rax,%rdi
    67b8:	e8 00 00 00 00       	callq  67bd <_ZN6Parser8initSemsEv+0xad1>
    67bd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    67c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67c4:	48 89 c7             	mov    %rax,%rdi
    67c7:	e8 00 00 00 00       	callq  67cc <_ZN6Parser8initSemsEv+0xae0>
    67cc:	48 89 d8             	mov    %rbx,%rax
    67cf:	48 89 c7             	mov    %rax,%rdi
    67d2:	e8 00 00 00 00       	callq  67d7 <_ZN6Parser8initSemsEv+0xaeb>
    67d7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    67da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67de:	48 89 c7             	mov    %rax,%rdi
    67e1:	e8 00 00 00 00       	callq  67e6 <_ZN6Parser8initSemsEv+0xafa>
    67e6:	48 89 d8             	mov    %rbx,%rax
    67e9:	48 89 c7             	mov    %rax,%rdi
    67ec:	e8 00 00 00 00       	callq  67f1 <_ZN6Parser8initSemsEv+0xb05>
    67f1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    67f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67f8:	48 89 c7             	mov    %rax,%rdi
    67fb:	e8 00 00 00 00       	callq  6800 <_ZN6Parser8initSemsEv+0xb14>
    6800:	48 89 d8             	mov    %rbx,%rax
    6803:	48 89 c7             	mov    %rax,%rdi
    6806:	e8 00 00 00 00       	callq  680b <_ZN6Parser8initSemsEv+0xb1f>
    680b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    680e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6812:	48 89 c7             	mov    %rax,%rdi
    6815:	e8 00 00 00 00       	callq  681a <_ZN6Parser8initSemsEv+0xb2e>
    681a:	48 89 d8             	mov    %rbx,%rax
    681d:	48 89 c7             	mov    %rax,%rdi
    6820:	e8 00 00 00 00       	callq  6825 <_ZN6Parser8initSemsEv+0xb39>

}
    6825:	e8 00 00 00 00       	callq  682a <_ZN6Parser8initSemsEv+0xb3e>
    682a:	48 83 c4 38          	add    $0x38,%rsp
    682e:	5b                   	pop    %rbx
    682f:	5d                   	pop    %rbp
    6830:	c3                   	retq   
    6831:	90                   	nop

0000000000006832 <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    6832:	55                   	push   %rbp
    6833:	48 89 e5             	mov    %rsp,%rbp
    6836:	53                   	push   %rbx
    6837:	48 83 ec 48          	sub    $0x48,%rsp
    683b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    683f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6846:	00 00 
    6848:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    684c:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    684e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6852:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6859 <_ZN6Parser10testCase01Ev+0x27>
    6859:	48 89 c7             	mov    %rax,%rdi
    685c:	e8 00 00 00 00       	callq  6861 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    6861:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6865:	48 89 c7             	mov    %rax,%rdi
    6868:	e8 00 00 00 00       	callq  686d <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    686d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6871:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6875:	48 89 d6             	mov    %rdx,%rsi
    6878:	48 89 c7             	mov    %rax,%rdi
    687b:	e8 00 00 00 00       	callq  6880 <_ZN6Parser10testCase01Ev+0x4e>
    6880:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6884:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    6888:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    688c:	48 89 ce             	mov    %rcx,%rsi
    688f:	48 89 c7             	mov    %rax,%rdi
    6892:	e8 00 00 00 00       	callq  6897 <_ZN6Parser10testCase01Ev+0x65>
    6897:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    689b:	48 89 c7             	mov    %rax,%rdi
    689e:	e8 00 00 00 00       	callq  68a3 <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68a7:	48 89 c7             	mov    %rax,%rdi
    68aa:	e8 00 00 00 00       	callq  68af <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68af:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68b3:	48 89 c7             	mov    %rax,%rdi
    68b6:	e8 00 00 00 00       	callq  68bb <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    68bb:	90                   	nop
    68bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    68c0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    68c7:	00 00 
    68c9:	74 43                	je     690e <_ZN6Parser10testCase01Ev+0xdc>
    68cb:	eb 3c                	jmp    6909 <_ZN6Parser10testCase01Ev+0xd7>
    68cd:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    68d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68d4:	48 89 c7             	mov    %rax,%rdi
    68d7:	e8 00 00 00 00       	callq  68dc <_ZN6Parser10testCase01Ev+0xaa>
    68dc:	eb 03                	jmp    68e1 <_ZN6Parser10testCase01Ev+0xaf>
    68de:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68e1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68e5:	48 89 c7             	mov    %rax,%rdi
    68e8:	e8 00 00 00 00       	callq  68ed <_ZN6Parser10testCase01Ev+0xbb>
    68ed:	eb 03                	jmp    68f2 <_ZN6Parser10testCase01Ev+0xc0>
    68ef:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68f2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68f6:	48 89 c7             	mov    %rax,%rdi
    68f9:	e8 00 00 00 00       	callq  68fe <_ZN6Parser10testCase01Ev+0xcc>
    68fe:	48 89 d8             	mov    %rbx,%rax
    6901:	48 89 c7             	mov    %rax,%rdi
    6904:	e8 00 00 00 00       	callq  6909 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6909:	e8 00 00 00 00       	callq  690e <_ZN6Parser10testCase01Ev+0xdc>
    690e:	48 83 c4 48          	add    $0x48,%rsp
    6912:	5b                   	pop    %rbx
    6913:	5d                   	pop    %rbp
    6914:	c3                   	retq   
    6915:	90                   	nop

0000000000006916 <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    6916:	55                   	push   %rbp
    6917:	48 89 e5             	mov    %rsp,%rbp
    691a:	53                   	push   %rbx
    691b:	48 83 ec 48          	sub    $0x48,%rsp
    691f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6923:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    692a:	00 00 
    692c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6930:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    6932:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6936:	48 83 c0 50          	add    $0x50,%rax
    693a:	48 89 c7             	mov    %rax,%rdi
    693d:	e8 00 00 00 00       	callq  6942 <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    6942:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6946:	48 05 90 00 00 00    	add    $0x90,%rax
    694c:	48 89 c7             	mov    %rax,%rdi
    694f:	e8 00 00 00 00       	callq  6954 <_ZN6Parser8HWStoHexEv+0x3e>
    6954:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    6957:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    695e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    6965:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6968:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    696b:	0f 8d 2f 01 00 00    	jge    6aa0 <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    6971:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6975:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    697c:	8b 45 c8             	mov    -0x38(%rbp),%eax
    697f:	89 c6                	mov    %eax,%esi
    6981:	48 89 d7             	mov    %rdx,%rdi
    6984:	e8 00 00 00 00       	callq  6989 <_ZN6Parser8HWStoHexEv+0x73>
    6989:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    698c:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    6990:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6994:	ba 10 00 00 00       	mov    $0x10,%edx
    6999:	89 ce                	mov    %ecx,%esi
    699b:	48 89 c7             	mov    %rax,%rdi
    699e:	e8 00 00 00 00       	callq  69a3 <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    69a3:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69a6:	83 e0 03             	and    $0x3,%eax
    69a9:	85 c0                	test   %eax,%eax
    69ab:	75 17                	jne    69c4 <_ZN6Parser8HWStoHexEv+0xae>
    69ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69b1:	48 83 c0 50          	add    $0x50,%rax
    69b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69bc <_ZN6Parser8HWStoHexEv+0xa6>
    69bc:	48 89 c7             	mov    %rax,%rdi
    69bf:	e8 00 00 00 00       	callq  69c4 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    69c4:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69c7:	83 e0 07             	and    $0x7,%eax
    69ca:	85 c0                	test   %eax,%eax
    69cc:	75 17                	jne    69e5 <_ZN6Parser8HWStoHexEv+0xcf>
    69ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69d2:	48 83 c0 50          	add    $0x50,%rax
    69d6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69dd <_ZN6Parser8HWStoHexEv+0xc7>
    69dd:	48 89 c7             	mov    %rax,%rdi
    69e0:	e8 00 00 00 00       	callq  69e5 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    69e5:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69e8:	83 e0 0f             	and    $0xf,%eax
    69eb:	85 c0                	test   %eax,%eax
    69ed:	75 17                	jne    6a06 <_ZN6Parser8HWStoHexEv+0xf0>
    69ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69f3:	48 83 c0 50          	add    $0x50,%rax
    69f7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69fe <_ZN6Parser8HWStoHexEv+0xe8>
    69fe:	48 89 c7             	mov    %rax,%rdi
    6a01:	e8 00 00 00 00       	callq  6a06 <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6a06:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6a0a:	77 17                	ja     6a23 <_ZN6Parser8HWStoHexEv+0x10d>
    6a0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a10:	48 83 c0 50          	add    $0x50,%rax
    6a14:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a1b <_ZN6Parser8HWStoHexEv+0x105>
    6a1b:	48 89 c7             	mov    %rax,%rdi
    6a1e:	e8 00 00 00 00       	callq  6a23 <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6a23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a27:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6a2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a32 <_ZN6Parser8HWStoHexEv+0x11c>
    6a32:	48 89 ce             	mov    %rcx,%rsi
    6a35:	48 89 c7             	mov    %rax,%rdi
    6a38:	e8 00 00 00 00       	callq  6a3d <_ZN6Parser8HWStoHexEv+0x127>
    6a3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a41:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6a45:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a49:	48 89 c6             	mov    %rax,%rsi
    6a4c:	48 89 d7             	mov    %rdx,%rdi
    6a4f:	e8 00 00 00 00       	callq  6a54 <_ZN6Parser8HWStoHexEv+0x13e>
    6a54:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a58:	48 89 c7             	mov    %rax,%rdi
    6a5b:	e8 00 00 00 00       	callq  6a60 <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a64:	48 89 c7             	mov    %rax,%rdi
    6a67:	e8 00 00 00 00       	callq  6a6c <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6a6c:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6a70:	e9 f0 fe ff ff       	jmpq   6965 <_ZN6Parser8HWStoHexEv+0x4f>
    6a75:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6a78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a7c:	48 89 c7             	mov    %rax,%rdi
    6a7f:	e8 00 00 00 00       	callq  6a84 <_ZN6Parser8HWStoHexEv+0x16e>
    6a84:	eb 03                	jmp    6a89 <_ZN6Parser8HWStoHexEv+0x173>
    6a86:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a89:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a8d:	48 89 c7             	mov    %rax,%rdi
    6a90:	e8 00 00 00 00       	callq  6a95 <_ZN6Parser8HWStoHexEv+0x17f>
    6a95:	48 89 d8             	mov    %rbx,%rax
    6a98:	48 89 c7             	mov    %rax,%rdi
    6a9b:	e8 00 00 00 00       	callq  6aa0 <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6aa0:	90                   	nop
    6aa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6aa5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6aac:	00 00 
    6aae:	74 05                	je     6ab5 <_ZN6Parser8HWStoHexEv+0x19f>
    6ab0:	e8 00 00 00 00       	callq  6ab5 <_ZN6Parser8HWStoHexEv+0x19f>
    6ab5:	48 83 c4 48          	add    $0x48,%rsp
    6ab9:	5b                   	pop    %rbx
    6aba:	5d                   	pop    %rbp
    6abb:	c3                   	retq   

0000000000006abc <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6abc:	55                   	push   %rbp
    6abd:	48 89 e5             	mov    %rsp,%rbp
    6ac0:	53                   	push   %rbx
    6ac1:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6ac8:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6acf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6ad6:	00 00 
    6ad8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6adc:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6ade:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6ae5:	48 89 c7             	mov    %rax,%rdi
    6ae8:	e8 00 00 00 00       	callq  6aed <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6aed:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6af4:	48 89 c7             	mov    %rax,%rdi
    6af7:	e8 00 00 00 00       	callq  6afc <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6afc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6b03:	48 89 c7             	mov    %rax,%rdi
    6b06:	e8 00 00 00 00       	callq  6b0b <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6b0b:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6b12:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6b19:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6b20:	00 00 

    QStringList hwsModules;
    6b22:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6b29:	48 89 c7             	mov    %rax,%rdi
    6b2c:	e8 00 00 00 00       	callq  6b31 <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6b31:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b38:	48 05 88 00 00 00    	add    $0x88,%rax
    6b3e:	48 89 c7             	mov    %rax,%rdi
    6b41:	e8 00 00 00 00       	callq  6b46 <_ZN6Parser10compileHWSEv+0x8a>
    6b46:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6b4d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b54:	48 05 88 00 00 00    	add    $0x88,%rax
    6b5a:	48 89 c7             	mov    %rax,%rdi
    6b5d:	e8 00 00 00 00       	callq  6b62 <_ZN6Parser10compileHWSEv+0xa6>
    6b62:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6b69:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6b70:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b77:	48 89 d6             	mov    %rdx,%rsi
    6b7a:	48 89 c7             	mov    %rax,%rdi
    6b7d:	e8 00 00 00 00       	callq  6b82 <_ZN6Parser10compileHWSEv+0xc6>
    6b82:	84 c0                	test   %al,%al
    6b84:	0f 84 e6 07 00 00    	je     7370 <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    6b8a:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6b91:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6b98:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6b9f:	89 c6                	mov    %eax,%esi
    6ba1:	48 89 d7             	mov    %rdx,%rdi
    6ba4:	e8 00 00 00 00       	callq  6ba9 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6ba9:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6bb0:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bb7:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6bbe:	89 c6                	mov    %eax,%esi
    6bc0:	48 89 d7             	mov    %rdx,%rdi
    6bc3:	e8 00 00 00 00       	callq  6bc8 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6bc8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bcf:	48 89 c7             	mov    %rax,%rdi
    6bd2:	e8 00 00 00 00       	callq  6bd7 <_ZN6Parser10compileHWSEv+0x11b>
    6bd7:	48 89 c2             	mov    %rax,%rdx
    6bda:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6be1:	48 89 d6             	mov    %rdx,%rsi
    6be4:	48 89 c7             	mov    %rax,%rdi
    6be7:	e8 00 00 00 00       	callq  6bec <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6bec:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bf3:	48 89 c7             	mov    %rax,%rdi
    6bf6:	e8 00 00 00 00       	callq  6bfb <_ZN6Parser10compileHWSEv+0x13f>
    6bfb:	48 89 c2             	mov    %rax,%rdx
    6bfe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6c05:	48 89 d6             	mov    %rdx,%rsi
    6c08:	48 89 c7             	mov    %rax,%rdi
    6c0b:	e8 00 00 00 00       	callq  6c10 <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6c10:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6c17:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6c19:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c20:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6c24:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c2b:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6c32:	48 89 ce             	mov    %rcx,%rsi
    6c35:	48 89 c7             	mov    %rax,%rdi
    6c38:	e8 00 00 00 00       	callq  6c3d <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6c3d:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6c44:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c4b:	ba 10 00 00 00       	mov    $0x10,%edx
    6c50:	48 89 ce             	mov    %rcx,%rsi
    6c53:	48 89 c7             	mov    %rax,%rdi
    6c56:	e8 00 00 00 00       	callq  6c5b <_ZN6Parser10compileHWSEv+0x19f>
    6c5b:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6c62:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c69:	0f be c0             	movsbl %al,%eax
    6c6c:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c73:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6c7a:	89 c6                	mov    %eax,%esi
    6c7c:	48 89 d7             	mov    %rdx,%rdi
    6c7f:	e8 00 00 00 00       	callq  6c84 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6c84:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c8b:	66 c1 e8 08          	shr    $0x8,%ax
    6c8f:	0f be c0             	movsbl %al,%eax
    6c92:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c99:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6ca0:	89 c6                	mov    %eax,%esi
    6ca2:	48 89 d7             	mov    %rdx,%rdi
    6ca5:	e8 00 00 00 00       	callq  6caa <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6caa:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cb1:	48 05 90 00 00 00    	add    $0x90,%rax
    6cb7:	48 89 c7             	mov    %rax,%rdi
    6cba:	e8 00 00 00 00       	callq  6cbf <_ZN6Parser10compileHWSEv+0x203>
    6cbf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6cc5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ccc:	48 05 90 00 00 00    	add    $0x90,%rax
    6cd2:	48 89 c7             	mov    %rax,%rdi
    6cd5:	e8 00 00 00 00       	callq  6cda <_ZN6Parser10compileHWSEv+0x21e>
    6cda:	83 c0 02             	add    $0x2,%eax
    6cdd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6ce3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cea:	48 05 90 00 00 00    	add    $0x90,%rax
    6cf0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6cf7 <_ZN6Parser10compileHWSEv+0x23b>
    6cf7:	48 89 c7             	mov    %rax,%rdi
    6cfa:	e8 00 00 00 00       	callq  6cff <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6cff:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6d06:	48 89 c7             	mov    %rax,%rdi
    6d09:	e8 00 00 00 00       	callq  6d0e <_ZN6Parser10compileHWSEv+0x252>
    6d0e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6d14:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d18:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d1f <_ZN6Parser10compileHWSEv+0x263>
    6d1f:	48 89 c7             	mov    %rax,%rdi
    6d22:	e8 00 00 00 00       	callq  6d27 <_ZN6Parser10compileHWSEv+0x26b>
    6d27:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6d2b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6d32:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d37:	ba 01 00 00 00       	mov    $0x1,%edx
    6d3c:	48 89 c7             	mov    %rax,%rdi
    6d3f:	e8 00 00 00 00       	callq  6d44 <_ZN6Parser10compileHWSEv+0x288>
    6d44:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d48:	48 89 c7             	mov    %rax,%rdi
    6d4b:	e8 00 00 00 00       	callq  6d50 <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6d50:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d54:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d5b <_ZN6Parser10compileHWSEv+0x29f>
    6d5b:	48 89 c7             	mov    %rax,%rdi
    6d5e:	e8 00 00 00 00       	callq  6d63 <_ZN6Parser10compileHWSEv+0x2a7>
    6d63:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6d67:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d6e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d73:	ba 01 00 00 00       	mov    $0x1,%edx
    6d78:	48 89 c7             	mov    %rax,%rdi
    6d7b:	e8 00 00 00 00       	callq  6d80 <_ZN6Parser10compileHWSEv+0x2c4>
    6d80:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d84:	48 89 c7             	mov    %rax,%rdi
    6d87:	e8 00 00 00 00       	callq  6d8c <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6d8c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6d93:	48 89 c7             	mov    %rax,%rdi
    6d96:	e8 00 00 00 00       	callq  6d9b <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6d9b:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6da2:	00 00 00 
    6da5:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6dab:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6db1:	0f 8d 65 04 00 00    	jge    721c <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6db7:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6dbd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6dc4:	89 d6                	mov    %edx,%esi
    6dc6:	48 89 c7             	mov    %rax,%rdi
    6dc9:	e8 00 00 00 00       	callq  6dce <_ZN6Parser10compileHWSEv+0x312>
    6dce:	48 89 c2             	mov    %rax,%rdx
    6dd1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6dd8:	48 89 d6             	mov    %rdx,%rsi
    6ddb:	48 89 c7             	mov    %rax,%rdi
    6dde:	e8 00 00 00 00       	callq  6de3 <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6de3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6dea:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6dee:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6df5:	48 89 c6             	mov    %rax,%rsi
    6df8:	48 89 d7             	mov    %rdx,%rdi
    6dfb:	e8 00 00 00 00       	callq  6e00 <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    6e00:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e07:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e0e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e13:	ba 00 00 00 00       	mov    $0x0,%edx
    6e18:	48 89 c7             	mov    %rax,%rdi
    6e1b:	e8 00 00 00 00       	callq  6e20 <_ZN6Parser10compileHWSEv+0x364>
    6e20:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6e26:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e2d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e34:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e39:	ba 00 00 00 00       	mov    $0x0,%edx
    6e3e:	48 89 c7             	mov    %rax,%rdi
    6e41:	e8 00 00 00 00       	callq  6e46 <_ZN6Parser10compileHWSEv+0x38a>
    6e46:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6e4c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e50:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6e57:	48 89 d6             	mov    %rdx,%rsi
    6e5a:	48 89 c7             	mov    %rax,%rdi
    6e5d:	e8 00 00 00 00       	callq  6e62 <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    6e62:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e66:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6e6d:	48 89 d6             	mov    %rdx,%rsi
    6e70:	48 89 c7             	mov    %rax,%rdi
    6e73:	e8 00 00 00 00       	callq  6e78 <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    6e78:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6e7f:	0f 8e 3e 01 00 00    	jle    6fc3 <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6e85:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6e8c:	83 c0 01             	add    $0x1,%eax
    6e8f:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6e96:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6e9a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ea1 <_ZN6Parser10compileHWSEv+0x3e5>
    6ea1:	48 89 c7             	mov    %rax,%rdi
    6ea4:	e8 00 00 00 00       	callq  6ea9 <_ZN6Parser10compileHWSEv+0x3ed>
    6ea9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6eb0:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6eb4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6eb8:	48 89 c6             	mov    %rax,%rsi
    6ebb:	48 89 d7             	mov    %rdx,%rdi
    6ebe:	e8 00 00 00 00       	callq  6ec3 <_ZN6Parser10compileHWSEv+0x407>
    6ec3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ec7:	48 89 c7             	mov    %rax,%rdi
    6eca:	e8 00 00 00 00       	callq  6ecf <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    6ecf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6ed3:	be 01 00 00 00       	mov    $0x1,%esi
    6ed8:	48 89 c7             	mov    %rax,%rdi
    6edb:	e8 00 00 00 00       	callq  6ee0 <_ZN6Parser10compileHWSEv+0x424>
    6ee0:	48 89 c2             	mov    %rax,%rdx
    6ee3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6ee7:	48 89 d6             	mov    %rdx,%rsi
    6eea:	48 89 c7             	mov    %rax,%rdi
    6eed:	e8 00 00 00 00       	callq  6ef2 <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6ef2:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ef9:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6efd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f01:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6f05:	48 89 ce             	mov    %rcx,%rsi
    6f08:	48 89 c7             	mov    %rax,%rdi
    6f0b:	e8 00 00 00 00       	callq  6f10 <_ZN6Parser10compileHWSEv+0x454>
    6f10:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6f14:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f18:	ba 10 00 00 00       	mov    $0x10,%edx
    6f1d:	48 89 ce             	mov    %rcx,%rsi
    6f20:	48 89 c7             	mov    %rax,%rdi
    6f23:	e8 00 00 00 00       	callq  6f28 <_ZN6Parser10compileHWSEv+0x46c>
    6f28:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6f2f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f33:	48 89 c7             	mov    %rax,%rdi
    6f36:	e8 00 00 00 00       	callq  6f3b <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    6f3b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f42:	48 05 90 00 00 00    	add    $0x90,%rax
    6f48:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f4d:	48 89 c7             	mov    %rax,%rdi
    6f50:	e8 00 00 00 00       	callq  6f55 <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    6f55:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f5c:	48 05 90 00 00 00    	add    $0x90,%rax
    6f62:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f67:	48 89 c7             	mov    %rax,%rdi
    6f6a:	e8 00 00 00 00       	callq  6f6f <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    6f6f:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f76:	0f be c0             	movsbl %al,%eax
    6f79:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f80:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f87:	89 c6                	mov    %eax,%esi
    6f89:	48 89 d7             	mov    %rdx,%rdi
    6f8c:	e8 00 00 00 00       	callq  6f91 <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    6f91:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f98:	66 c1 e8 08          	shr    $0x8,%ax
    6f9c:	0f be c0             	movsbl %al,%eax
    6f9f:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6fa6:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6fad:	89 c6                	mov    %eax,%esi
    6faf:	48 89 d7             	mov    %rdx,%rdi
    6fb2:	e8 00 00 00 00       	callq  6fb7 <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6fb7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbb:	48 89 c7             	mov    %rax,%rdi
    6fbe:	e8 00 00 00 00       	callq  6fc3 <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    6fc3:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6fca:	0f 8e 28 02 00 00    	jle    71f8 <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    6fd0:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6fd7:	83 c0 01             	add    $0x1,%eax
    6fda:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    6fe1:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6fe8:	83 c0 01             	add    $0x1,%eax
    6feb:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    6ff2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6ff6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ffd <_ZN6Parser10compileHWSEv+0x541>
    6ffd:	48 89 c7             	mov    %rax,%rdi
    7000:	e8 00 00 00 00       	callq  7005 <_ZN6Parser10compileHWSEv+0x549>
    7005:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    700c:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7010:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7014:	48 89 c6             	mov    %rax,%rsi
    7017:	48 89 d7             	mov    %rdx,%rdi
    701a:	e8 00 00 00 00       	callq  701f <_ZN6Parser10compileHWSEv+0x563>
    701f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7023:	48 89 c7             	mov    %rax,%rdi
    7026:	e8 00 00 00 00       	callq  702b <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    702b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    702f:	be 01 00 00 00       	mov    $0x1,%esi
    7034:	48 89 c7             	mov    %rax,%rdi
    7037:	e8 00 00 00 00       	callq  703c <_ZN6Parser10compileHWSEv+0x580>
    703c:	48 89 c2             	mov    %rax,%rdx
    703f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7043:	48 89 d6             	mov    %rdx,%rsi
    7046:	48 89 c7             	mov    %rax,%rdi
    7049:	e8 00 00 00 00       	callq  704e <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    704e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7052:	be 02 00 00 00       	mov    $0x2,%esi
    7057:	48 89 c7             	mov    %rax,%rdi
    705a:	e8 00 00 00 00       	callq  705f <_ZN6Parser10compileHWSEv+0x5a3>
    705f:	48 89 c2             	mov    %rax,%rdx
    7062:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7066:	48 89 d6             	mov    %rdx,%rsi
    7069:	48 89 c7             	mov    %rax,%rdi
    706c:	e8 00 00 00 00       	callq  7071 <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    7071:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    7078:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    707f:	48 8d 48 28          	lea    0x28(%rax),%rcx
    7083:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7087:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    708b:	48 89 ce             	mov    %rcx,%rsi
    708e:	48 89 c7             	mov    %rax,%rdi
    7091:	e8 00 00 00 00       	callq  7096 <_ZN6Parser10compileHWSEv+0x5da>
    7096:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    709a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    709e:	ba 10 00 00 00       	mov    $0x10,%edx
    70a3:	48 89 ce             	mov    %rcx,%rsi
    70a6:	48 89 c7             	mov    %rax,%rdi
    70a9:	e8 00 00 00 00       	callq  70ae <_ZN6Parser10compileHWSEv+0x5f2>
    70ae:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    70b4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70b8:	48 89 c7             	mov    %rax,%rdi
    70bb:	e8 00 00 00 00       	callq  70c0 <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    70c0:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70c4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70c8:	ba 0a 00 00 00       	mov    $0xa,%edx
    70cd:	48 89 ce             	mov    %rcx,%rsi
    70d0:	48 89 c7             	mov    %rax,%rdi
    70d3:	e8 00 00 00 00       	callq  70d8 <_ZN6Parser10compileHWSEv+0x61c>
    70d8:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    70df:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    70e3:	84 c0                	test   %al,%al
    70e5:	74 6d                	je     7154 <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    70e7:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    70eb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    70f2:	ba 00 00 00 00       	mov    $0x0,%edx
    70f7:	48 89 ce             	mov    %rcx,%rsi
    70fa:	48 89 c7             	mov    %rax,%rdi
    70fd:	e8 00 00 00 00       	callq  7102 <_ZN6Parser10compileHWSEv+0x646>
    7102:	83 f0 01             	xor    $0x1,%eax
    7105:	84 c0                	test   %al,%al
    7107:	74 2a                	je     7133 <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    7109:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    710d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7114:	48 89 d6             	mov    %rdx,%rsi
    7117:	48 89 c7             	mov    %rax,%rdi
    711a:	e8 00 00 00 00       	callq  711f <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    711f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7126:	48 89 c7             	mov    %rax,%rdi
    7129:	e8 00 00 00 00       	callq  712e <_ZN6Parser10compileHWSEv+0x672>
    712e:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    7133:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    7137:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    713e:	ba 00 00 00 00       	mov    $0x0,%edx
    7143:	48 89 ce             	mov    %rcx,%rsi
    7146:	48 89 c7             	mov    %rax,%rdi
    7149:	e8 00 00 00 00       	callq  714e <_ZN6Parser10compileHWSEv+0x692>
    714e:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    7154:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    715b:	0f be c0             	movsbl %al,%eax
    715e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7165:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    716c:	89 c6                	mov    %eax,%esi
    716e:	48 89 d7             	mov    %rdx,%rdi
    7171:	e8 00 00 00 00       	callq  7176 <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    7176:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    717d:	0f be c0             	movsbl %al,%eax
    7180:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7187:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    718e:	89 c6                	mov    %eax,%esi
    7190:	48 89 d7             	mov    %rdx,%rdi
    7193:	e8 00 00 00 00       	callq  7198 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    7198:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    719f:	0f be c0             	movsbl %al,%eax
    71a2:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71a9:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71b0:	89 c6                	mov    %eax,%esi
    71b2:	48 89 d7             	mov    %rdx,%rdi
    71b5:	e8 00 00 00 00       	callq  71ba <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    71ba:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71c1:	66 c1 e8 08          	shr    $0x8,%ax
    71c5:	0f be c0             	movsbl %al,%eax
    71c8:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71cf:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71d6:	89 c6                	mov    %eax,%esi
    71d8:	48 89 d7             	mov    %rdx,%rdi
    71db:	e8 00 00 00 00       	callq  71e0 <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    71e0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    71e4:	48 89 c7             	mov    %rax,%rdi
    71e7:	e8 00 00 00 00       	callq  71ec <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    71ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    71f0:	48 89 c7             	mov    %rax,%rdi
    71f3:	e8 00 00 00 00       	callq  71f8 <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    71f8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    71fc:	48 89 c7             	mov    %rax,%rdi
    71ff:	e8 00 00 00 00       	callq  7204 <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7204:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7208:	48 89 c7             	mov    %rax,%rdi
    720b:	e8 00 00 00 00       	callq  7210 <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    7210:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    7217:	e9 89 fb ff ff       	jmpq   6da5 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    721c:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7223:	0f be d8             	movsbl %al,%ebx
    7226:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    722d:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7234:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    723a:	89 c6                	mov    %eax,%esi
    723c:	48 89 d7             	mov    %rdx,%rdi
    723f:	e8 00 00 00 00       	callq  7244 <_ZN6Parser10compileHWSEv+0x788>
    7244:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7248:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    724c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7250:	89 de                	mov    %ebx,%esi
    7252:	48 89 c7             	mov    %rax,%rdi
    7255:	e8 00 00 00 00       	callq  725a <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    725a:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7261:	66 c1 e8 08          	shr    $0x8,%ax
    7265:	0f be d8             	movsbl %al,%ebx
    7268:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    726e:	8d 50 01             	lea    0x1(%rax),%edx
    7271:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7278:	48 05 90 00 00 00    	add    $0x90,%rax
    727e:	89 d6                	mov    %edx,%esi
    7280:	48 89 c7             	mov    %rax,%rdi
    7283:	e8 00 00 00 00       	callq  7288 <_ZN6Parser10compileHWSEv+0x7cc>
    7288:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    728c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7290:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7294:	89 de                	mov    %ebx,%esi
    7296:	48 89 c7             	mov    %rax,%rdi
    7299:	e8 00 00 00 00       	callq  729e <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    729e:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72a5:	0f be d8             	movsbl %al,%ebx
    72a8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72af:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    72b6:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72bc:	89 c6                	mov    %eax,%esi
    72be:	48 89 d7             	mov    %rdx,%rdi
    72c1:	e8 00 00 00 00       	callq  72c6 <_ZN6Parser10compileHWSEv+0x80a>
    72c6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72ca:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72ce:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72d2:	89 de                	mov    %ebx,%esi
    72d4:	48 89 c7             	mov    %rax,%rdi
    72d7:	e8 00 00 00 00       	callq  72dc <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    72dc:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72e3:	66 c1 e8 08          	shr    $0x8,%ax
    72e7:	0f be d8             	movsbl %al,%ebx
    72ea:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72f0:	8d 50 01             	lea    0x1(%rax),%edx
    72f3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72fa:	48 05 90 00 00 00    	add    $0x90,%rax
    7300:	89 d6                	mov    %edx,%esi
    7302:	48 89 c7             	mov    %rax,%rdi
    7305:	e8 00 00 00 00       	callq  730a <_ZN6Parser10compileHWSEv+0x84e>
    730a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    730e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7312:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7316:	89 de                	mov    %ebx,%esi
    7318:	48 89 c7             	mov    %rax,%rdi
    731b:	e8 00 00 00 00       	callq  7320 <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7320:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7327:	48 89 c7             	mov    %rax,%rdi
    732a:	e8 00 00 00 00       	callq  732f <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    732f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7336:	48 89 c7             	mov    %rax,%rdi
    7339:	e8 00 00 00 00       	callq  733e <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    733e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7345:	48 89 c7             	mov    %rax,%rdi
    7348:	e8 00 00 00 00       	callq  734d <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    734d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7354:	48 89 c7             	mov    %rax,%rdi
    7357:	e8 00 00 00 00       	callq  735c <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    735c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    7363:	48 89 c7             	mov    %rax,%rdi
    7366:	e8 00 00 00 00       	callq  736b <_ZN6Parser10compileHWSEv+0x8af>
    736b:	e9 dd f7 ff ff       	jmpq   6b4d <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7370:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7377:	0f be d8             	movsbl %al,%ebx
    737a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7381:	48 05 90 00 00 00    	add    $0x90,%rax
    7387:	be 04 00 00 00       	mov    $0x4,%esi
    738c:	48 89 c7             	mov    %rax,%rdi
    738f:	e8 00 00 00 00       	callq  7394 <_ZN6Parser10compileHWSEv+0x8d8>
    7394:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7398:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    739c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73a0:	89 de                	mov    %ebx,%esi
    73a2:	48 89 c7             	mov    %rax,%rdi
    73a5:	e8 00 00 00 00       	callq  73aa <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    73aa:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73b1:	66 c1 e8 08          	shr    $0x8,%ax
    73b5:	0f be d8             	movsbl %al,%ebx
    73b8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73bf:	48 05 90 00 00 00    	add    $0x90,%rax
    73c5:	be 05 00 00 00       	mov    $0x5,%esi
    73ca:	48 89 c7             	mov    %rax,%rdi
    73cd:	e8 00 00 00 00       	callq  73d2 <_ZN6Parser10compileHWSEv+0x916>
    73d2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73d6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73de:	89 de                	mov    %ebx,%esi
    73e0:	48 89 c7             	mov    %rax,%rdi
    73e3:	e8 00 00 00 00       	callq  73e8 <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    73e8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73ef:	48 89 c7             	mov    %rax,%rdi
    73f2:	e8 00 00 00 00       	callq  73f7 <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    73f7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    73fe:	48 89 c7             	mov    %rax,%rdi
    7401:	e8 00 00 00 00       	callq  7406 <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7406:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    740d:	48 89 c7             	mov    %rax,%rdi
    7410:	e8 00 00 00 00       	callq  7415 <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    7415:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    741c:	48 89 c7             	mov    %rax,%rdi
    741f:	e8 00 00 00 00       	callq  7424 <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7424:	90                   	nop
    7425:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7429:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7430:	00 00 
    7432:	0f 84 8e 01 00 00    	je     75c6 <_ZN6Parser10compileHWSEv+0xb0a>
    7438:	e9 84 01 00 00       	jmpq   75c1 <_ZN6Parser10compileHWSEv+0xb05>
    743d:	48 89 c3             	mov    %rax,%rbx
    7440:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7444:	48 89 c7             	mov    %rax,%rdi
    7447:	e8 00 00 00 00       	callq  744c <_ZN6Parser10compileHWSEv+0x990>
    744c:	e9 1a 01 00 00       	jmpq   756b <_ZN6Parser10compileHWSEv+0xaaf>
    7451:	48 89 c3             	mov    %rax,%rbx
    7454:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    745b:	48 89 c7             	mov    %rax,%rdi
    745e:	e8 00 00 00 00       	callq  7463 <_ZN6Parser10compileHWSEv+0x9a7>
    7463:	e9 03 01 00 00       	jmpq   756b <_ZN6Parser10compileHWSEv+0xaaf>
    7468:	48 89 c3             	mov    %rax,%rbx
    746b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    746f:	48 89 c7             	mov    %rax,%rdi
    7472:	e8 00 00 00 00       	callq  7477 <_ZN6Parser10compileHWSEv+0x9bb>
    7477:	e9 db 00 00 00       	jmpq   7557 <_ZN6Parser10compileHWSEv+0xa9b>
    747c:	48 89 c3             	mov    %rax,%rbx
    747f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7486:	48 89 c7             	mov    %rax,%rdi
    7489:	e8 00 00 00 00       	callq  748e <_ZN6Parser10compileHWSEv+0x9d2>
    748e:	e9 c4 00 00 00       	jmpq   7557 <_ZN6Parser10compileHWSEv+0xa9b>
    7493:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    7496:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    749a:	48 89 c7             	mov    %rax,%rdi
    749d:	e8 00 00 00 00       	callq  74a2 <_ZN6Parser10compileHWSEv+0x9e6>
    74a2:	eb 69                	jmp    750d <_ZN6Parser10compileHWSEv+0xa51>
    74a4:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    74a7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    74ab:	48 89 c7             	mov    %rax,%rdi
    74ae:	e8 00 00 00 00       	callq  74b3 <_ZN6Parser10compileHWSEv+0x9f7>
    74b3:	eb 03                	jmp    74b8 <_ZN6Parser10compileHWSEv+0x9fc>
    74b5:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    74b8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74bc:	48 89 c7             	mov    %rax,%rdi
    74bf:	e8 00 00 00 00       	callq  74c4 <_ZN6Parser10compileHWSEv+0xa08>
    74c4:	eb 47                	jmp    750d <_ZN6Parser10compileHWSEv+0xa51>
    74c6:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    74c9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74cd:	48 89 c7             	mov    %rax,%rdi
    74d0:	e8 00 00 00 00       	callq  74d5 <_ZN6Parser10compileHWSEv+0xa19>
    74d5:	eb 36                	jmp    750d <_ZN6Parser10compileHWSEv+0xa51>
    74d7:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    74da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74de:	48 89 c7             	mov    %rax,%rdi
    74e1:	e8 00 00 00 00       	callq  74e6 <_ZN6Parser10compileHWSEv+0xa2a>
    74e6:	eb 03                	jmp    74eb <_ZN6Parser10compileHWSEv+0xa2f>
    74e8:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    74eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74ef:	48 89 c7             	mov    %rax,%rdi
    74f2:	e8 00 00 00 00       	callq  74f7 <_ZN6Parser10compileHWSEv+0xa3b>
    74f7:	eb 03                	jmp    74fc <_ZN6Parser10compileHWSEv+0xa40>
    74f9:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    74fc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7500:	48 89 c7             	mov    %rax,%rdi
    7503:	e8 00 00 00 00       	callq  7508 <_ZN6Parser10compileHWSEv+0xa4c>
    7508:	eb 03                	jmp    750d <_ZN6Parser10compileHWSEv+0xa51>
    750a:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    750d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7511:	48 89 c7             	mov    %rax,%rdi
    7514:	e8 00 00 00 00       	callq  7519 <_ZN6Parser10compileHWSEv+0xa5d>
    7519:	eb 03                	jmp    751e <_ZN6Parser10compileHWSEv+0xa62>
    751b:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    751e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7522:	48 89 c7             	mov    %rax,%rdi
    7525:	e8 00 00 00 00       	callq  752a <_ZN6Parser10compileHWSEv+0xa6e>
    752a:	eb 03                	jmp    752f <_ZN6Parser10compileHWSEv+0xa73>
    752c:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    752f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7536:	48 89 c7             	mov    %rax,%rdi
    7539:	e8 00 00 00 00       	callq  753e <_ZN6Parser10compileHWSEv+0xa82>
    753e:	eb 03                	jmp    7543 <_ZN6Parser10compileHWSEv+0xa87>
    7540:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7543:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    754a:	48 89 c7             	mov    %rax,%rdi
    754d:	e8 00 00 00 00       	callq  7552 <_ZN6Parser10compileHWSEv+0xa96>
    7552:	eb 03                	jmp    7557 <_ZN6Parser10compileHWSEv+0xa9b>
    7554:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7557:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    755e:	48 89 c7             	mov    %rax,%rdi
    7561:	e8 00 00 00 00       	callq  7566 <_ZN6Parser10compileHWSEv+0xaaa>
    7566:	eb 03                	jmp    756b <_ZN6Parser10compileHWSEv+0xaaf>
    7568:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    756b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7572:	48 89 c7             	mov    %rax,%rdi
    7575:	e8 00 00 00 00       	callq  757a <_ZN6Parser10compileHWSEv+0xabe>
    757a:	eb 03                	jmp    757f <_ZN6Parser10compileHWSEv+0xac3>
    757c:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    757f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7586:	48 89 c7             	mov    %rax,%rdi
    7589:	e8 00 00 00 00       	callq  758e <_ZN6Parser10compileHWSEv+0xad2>
    758e:	eb 03                	jmp    7593 <_ZN6Parser10compileHWSEv+0xad7>
    7590:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7593:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    759a:	48 89 c7             	mov    %rax,%rdi
    759d:	e8 00 00 00 00       	callq  75a2 <_ZN6Parser10compileHWSEv+0xae6>
    75a2:	eb 03                	jmp    75a7 <_ZN6Parser10compileHWSEv+0xaeb>
    75a4:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    75a7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    75ae:	48 89 c7             	mov    %rax,%rdi
    75b1:	e8 00 00 00 00       	callq  75b6 <_ZN6Parser10compileHWSEv+0xafa>
    75b6:	48 89 d8             	mov    %rbx,%rax
    75b9:	48 89 c7             	mov    %rax,%rdi
    75bc:	e8 00 00 00 00       	callq  75c1 <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    75c1:	e8 00 00 00 00       	callq  75c6 <_ZN6Parser10compileHWSEv+0xb0a>
    75c6:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    75cd:	5b                   	pop    %rbx
    75ce:	5d                   	pop    %rbp
    75cf:	c3                   	retq   

00000000000075d0 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    75d0:	55                   	push   %rbp
    75d1:	48 89 e5             	mov    %rsp,%rbp
    75d4:	53                   	push   %rbx
    75d5:	48 83 ec 58          	sub    $0x58,%rsp
    75d9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    75dd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    75e4:	00 00 
    75e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    75ea:	31 c0                	xor    %eax,%eax

    int i = 0;
    75ec:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    75f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    75f7:	48 83 c0 78          	add    $0x78,%rax
    75fb:	48 89 c7             	mov    %rax,%rdi
    75fe:	e8 00 00 00 00       	callq  7603 <_ZN6Parser9selectHWSEv+0x33>
    7603:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    7606:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    760a:	48 89 c7             	mov    %rax,%rdi
    760d:	e8 00 00 00 00       	callq  7612 <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    7612:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7616:	48 89 c7             	mov    %rax,%rdi
    7619:	e8 00 00 00 00       	callq  761e <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    761e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7622:	48 83 c0 78          	add    $0x78,%rax
    7626:	48 89 c7             	mov    %rax,%rdi
    7629:	e8 00 00 00 00       	callq  762e <_ZN6Parser9selectHWSEv+0x5e>
    762e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7632:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7636:	48 83 c0 78          	add    $0x78,%rax
    763a:	48 89 c7             	mov    %rax,%rdi
    763d:	e8 00 00 00 00       	callq  7642 <_ZN6Parser9selectHWSEv+0x72>
    7642:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7646:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    764a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    764e:	48 89 d6             	mov    %rdx,%rsi
    7651:	48 89 c7             	mov    %rax,%rdi
    7654:	e8 00 00 00 00       	callq  7659 <_ZN6Parser9selectHWSEv+0x89>
    7659:	84 c0                	test   %al,%al
    765b:	74 50                	je     76ad <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    765d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7661:	48 89 c7             	mov    %rax,%rdi
    7664:	e8 00 00 00 00       	callq  7669 <_ZN6Parser9selectHWSEv+0x99>
    7669:	be 00 00 00 00       	mov    $0x0,%esi
    766e:	48 89 c7             	mov    %rax,%rdi
    7671:	e8 00 00 00 00       	callq  7676 <_ZN6Parser9selectHWSEv+0xa6>
    7676:	48 89 c2             	mov    %rax,%rdx
    7679:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    767d:	48 89 d6             	mov    %rdx,%rsi
    7680:	48 89 c7             	mov    %rax,%rdi
    7683:	e8 00 00 00 00       	callq  7688 <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    7688:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    768c:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7690:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7694:	48 89 c6             	mov    %rax,%rsi
    7697:	48 89 d7             	mov    %rdx,%rdi
    769a:	e8 00 00 00 00       	callq  769f <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    769f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76a3:	48 89 c7             	mov    %rax,%rdi
    76a6:	e8 00 00 00 00       	callq  76ab <_ZN6Parser9selectHWSEv+0xdb>
    76ab:	eb 85                	jmp    7632 <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    76ad:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    76b4:	8b 45 b8             	mov    -0x48(%rbp),%eax
    76b7:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    76ba:	7d 06                	jge    76c2 <_ZN6Parser9selectHWSEv+0xf2>
    76bc:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    76c0:	eb f2                	jmp    76b4 <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76c6:	48 89 c7             	mov    %rax,%rdi
    76c9:	e8 00 00 00 00       	callq  76ce <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76ce:	90                   	nop
    76cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    76d3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    76da:	00 00 
    76dc:	74 21                	je     76ff <_ZN6Parser9selectHWSEv+0x12f>
    76de:	eb 1a                	jmp    76fa <_ZN6Parser9selectHWSEv+0x12a>
    76e0:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76e3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76e7:	48 89 c7             	mov    %rax,%rdi
    76ea:	e8 00 00 00 00       	callq  76ef <_ZN6Parser9selectHWSEv+0x11f>
    76ef:	48 89 d8             	mov    %rbx,%rax
    76f2:	48 89 c7             	mov    %rax,%rdi
    76f5:	e8 00 00 00 00       	callq  76fa <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76fa:	e8 00 00 00 00       	callq  76ff <_ZN6Parser9selectHWSEv+0x12f>
    76ff:	48 83 c4 58          	add    $0x58,%rsp
    7703:	5b                   	pop    %rbx
    7704:	5d                   	pop    %rbp
    7705:	c3                   	retq   

0000000000007706 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    7706:	55                   	push   %rbp
    7707:	48 89 e5             	mov    %rsp,%rbp
    770a:	53                   	push   %rbx
    770b:	48 83 ec 68          	sub    $0x68,%rsp
    770f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    7713:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    771a:	00 00 
    771c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7720:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    7722:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7726:	48 89 c7             	mov    %rax,%rdi
    7729:	e8 00 00 00 00       	callq  772e <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    772e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7732:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7736:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    773a:	48 89 d6             	mov    %rdx,%rsi
    773d:	48 89 c7             	mov    %rax,%rdi
    7740:	e8 00 00 00 00       	callq  7745 <_ZN6Parser12loadIncludesEv+0x3f>
    7745:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7749:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    774d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7751:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7755:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7759:	48 89 d6             	mov    %rdx,%rsi
    775c:	48 89 c7             	mov    %rax,%rdi
    775f:	e8 00 00 00 00       	callq  7764 <_ZN6Parser12loadIncludesEv+0x5e>
    7764:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7768:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    776c:	48 89 d6             	mov    %rdx,%rsi
    776f:	48 89 c7             	mov    %rax,%rdi
    7772:	e8 00 00 00 00       	callq  7777 <_ZN6Parser12loadIncludesEv+0x71>
    7777:	84 c0                	test   %al,%al
    7779:	0f 84 dc 00 00 00    	je     785b <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    777f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7783:	48 89 c7             	mov    %rax,%rdi
    7786:	e8 00 00 00 00       	callq  778b <_ZN6Parser12loadIncludesEv+0x85>
    778b:	48 89 c2             	mov    %rax,%rdx
    778e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7792:	48 89 d6             	mov    %rdx,%rsi
    7795:	48 89 c7             	mov    %rax,%rdi
    7798:	e8 00 00 00 00       	callq  779d <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    779d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77a1:	be 01 00 00 00       	mov    $0x1,%esi
    77a6:	48 89 c7             	mov    %rax,%rdi
    77a9:	e8 00 00 00 00       	callq  77ae <_ZN6Parser12loadIncludesEv+0xa8>
    77ae:	8b 55 d0             	mov    -0x30(%rbp),%edx
    77b1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77b5:	89 d6                	mov    %edx,%esi
    77b7:	48 89 c7             	mov    %rax,%rdi
    77ba:	e8 00 00 00 00       	callq  77bf <_ZN6Parser12loadIncludesEv+0xb9>
    77bf:	84 c0                	test   %al,%al
    77c1:	74 7b                	je     783e <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    77c3:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    77c7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77cb:	48 89 d6             	mov    %rdx,%rsi
    77ce:	48 89 c7             	mov    %rax,%rdi
    77d1:	e8 00 00 00 00       	callq  77d6 <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    77d6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77da:	48 89 c7             	mov    %rax,%rdi
    77dd:	e8 00 00 00 00       	callq  77e2 <_ZN6Parser12loadIncludesEv+0xdc>
    77e2:	83 f0 01             	xor    $0x1,%eax
    77e5:	84 c0                	test   %al,%al
    77e7:	74 3d                	je     7826 <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    77e9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    77ed:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    77f1:	ba 00 00 00 00       	mov    $0x0,%edx
    77f6:	48 89 ce             	mov    %rcx,%rsi
    77f9:	48 89 c7             	mov    %rax,%rdi
    77fc:	e8 00 00 00 00       	callq  7801 <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    7801:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7805:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7809:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    780d:	48 89 c6             	mov    %rax,%rsi
    7810:	48 89 d7             	mov    %rdx,%rdi
    7813:	e8 00 00 00 00       	callq  7818 <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7818:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    781c:	48 89 c7             	mov    %rax,%rdi
    781f:	e8 00 00 00 00       	callq  7824 <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    7824:	eb b0                	jmp    77d6 <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    7826:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    782a:	48 89 c7             	mov    %rax,%rdi
    782d:	e8 00 00 00 00       	callq  7832 <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7832:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7836:	48 89 c7             	mov    %rax,%rdi
    7839:	e8 00 00 00 00       	callq  783e <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    783e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7842:	48 89 c7             	mov    %rax,%rdi
    7845:	e8 00 00 00 00       	callq  784a <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    784a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    784e:	48 89 c7             	mov    %rax,%rdi
    7851:	e8 00 00 00 00       	callq  7856 <_ZN6Parser12loadIncludesEv+0x150>
    7856:	e9 f2 fe ff ff       	jmpq   774d <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    785b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    785f:	48 89 c7             	mov    %rax,%rdi
    7862:	e8 00 00 00 00       	callq  7867 <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    7867:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    786b:	48 8d 50 60          	lea    0x60(%rax),%rdx
    786f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7873:	48 89 d6             	mov    %rdx,%rsi
    7876:	48 89 c7             	mov    %rax,%rdi
    7879:	e8 00 00 00 00       	callq  787e <_ZN6Parser12loadIncludesEv+0x178>
    787e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7882:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7886:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    788a:	48 8d 50 60          	lea    0x60(%rax),%rdx
    788e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7892:	48 89 d6             	mov    %rdx,%rsi
    7895:	48 89 c7             	mov    %rax,%rdi
    7898:	e8 00 00 00 00       	callq  789d <_ZN6Parser12loadIncludesEv+0x197>
    789d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    78a1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78a5:	48 89 d6             	mov    %rdx,%rsi
    78a8:	48 89 c7             	mov    %rax,%rdi
    78ab:	e8 00 00 00 00       	callq  78b0 <_ZN6Parser12loadIncludesEv+0x1aa>
    78b0:	84 c0                	test   %al,%al
    78b2:	74 2c                	je     78e0 <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    78b4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78b8:	48 89 c7             	mov    %rax,%rdi
    78bb:	e8 00 00 00 00       	callq  78c0 <_ZN6Parser12loadIncludesEv+0x1ba>
    78c0:	48 89 c2             	mov    %rax,%rdx
    78c3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78c7:	48 89 d6             	mov    %rdx,%rsi
    78ca:	48 89 c7             	mov    %rax,%rdi
    78cd:	e8 00 00 00 00       	callq  78d2 <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    78d2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78d6:	48 89 c7             	mov    %rax,%rdi
    78d9:	e8 00 00 00 00       	callq  78de <_ZN6Parser12loadIncludesEv+0x1d8>
    78de:	eb a6                	jmp    7886 <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    78e0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78e4:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    78e8:	48 89 d6             	mov    %rdx,%rsi
    78eb:	48 89 c7             	mov    %rax,%rdi
    78ee:	e8 00 00 00 00       	callq  78f3 <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    78f3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78f7:	48 89 c7             	mov    %rax,%rdi
    78fa:	e8 00 00 00 00       	callq  78ff <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    78ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7903:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    790a:	00 00 
    790c:	74 5d                	je     796b <_ZN6Parser12loadIncludesEv+0x265>
    790e:	eb 56                	jmp    7966 <_ZN6Parser12loadIncludesEv+0x260>
    7910:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7913:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7917:	48 89 c7             	mov    %rax,%rdi
    791a:	e8 00 00 00 00       	callq  791f <_ZN6Parser12loadIncludesEv+0x219>
    791f:	eb 03                	jmp    7924 <_ZN6Parser12loadIncludesEv+0x21e>
    7921:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7924:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7928:	48 89 c7             	mov    %rax,%rdi
    792b:	e8 00 00 00 00       	callq  7930 <_ZN6Parser12loadIncludesEv+0x22a>
    7930:	eb 03                	jmp    7935 <_ZN6Parser12loadIncludesEv+0x22f>
    7932:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7935:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7939:	48 89 c7             	mov    %rax,%rdi
    793c:	e8 00 00 00 00       	callq  7941 <_ZN6Parser12loadIncludesEv+0x23b>
    7941:	48 89 d8             	mov    %rbx,%rax
    7944:	48 89 c7             	mov    %rax,%rdi
    7947:	e8 00 00 00 00       	callq  794c <_ZN6Parser12loadIncludesEv+0x246>
    794c:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    794f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7953:	48 89 c7             	mov    %rax,%rdi
    7956:	e8 00 00 00 00       	callq  795b <_ZN6Parser12loadIncludesEv+0x255>
    795b:	48 89 d8             	mov    %rbx,%rax
    795e:	48 89 c7             	mov    %rax,%rdi
    7961:	e8 00 00 00 00       	callq  7966 <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    7966:	e8 00 00 00 00       	callq  796b <_ZN6Parser12loadIncludesEv+0x265>
    796b:	48 83 c4 68          	add    $0x68,%rsp
    796f:	5b                   	pop    %rbx
    7970:	5d                   	pop    %rbp
    7971:	c3                   	retq   

0000000000007972 <_ZN6Parser13compileModuleE7QString>:

QByteArray Parser::compileModule(QString key){
    7972:	55                   	push   %rbp
    7973:	48 89 e5             	mov    %rsp,%rbp
    7976:	53                   	push   %rbx
    7977:	48 83 ec 48          	sub    $0x48,%rsp
    797b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    797f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7983:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    7987:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    798e:	00 00 
    7990:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7994:	31 c0                	xor    %eax,%eax
    QStringList M = this->sorted.take(key);
    7996:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    799a:	48 8d 48 78          	lea    0x78(%rax),%rcx
    799e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    79a2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    79a6:	48 89 ce             	mov    %rcx,%rsi
    79a9:	48 89 c7             	mov    %rax,%rdi
    79ac:	e8 00 00 00 00       	callq  79b1 <_ZN6Parser13compileModuleE7QString+0x3f>
    QByteArray result;
    79b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79b5:	48 89 c7             	mov    %rax,%rdi
    79b8:	e8 00 00 00 00       	callq  79bd <_ZN6Parser13compileModuleE7QString+0x4b>

    QByteArray VARS = compileVariables(&M);
    79bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    79c1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    79c5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    79c9:	48 89 ce             	mov    %rcx,%rsi
    79cc:	48 89 c7             	mov    %rax,%rdi
    79cf:	e8 00 00 00 00       	callq  79d4 <_ZN6Parser13compileModuleE7QString+0x62>
    result.append(VARS);
    79d4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    79d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79dc:	48 89 d6             	mov    %rdx,%rsi
    79df:	48 89 c7             	mov    %rax,%rdi
    79e2:	e8 00 00 00 00       	callq  79e7 <_ZN6Parser13compileModuleE7QString+0x75>

    result.append("0");
    79e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 79f2 <_ZN6Parser13compileModuleE7QString+0x80>
    79f2:	48 89 c7             	mov    %rax,%rdi
    79f5:	e8 00 00 00 00       	callq  79fa <_ZN6Parser13compileModuleE7QString+0x88>
    return result;
    79fa:	90                   	nop

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    79fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    79ff:	48 89 c7             	mov    %rax,%rdi
    7a02:	e8 00 00 00 00       	callq  7a07 <_ZN6Parser13compileModuleE7QString+0x95>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a07:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a0b:	48 89 c7             	mov    %rax,%rdi
    7a0e:	e8 00 00 00 00       	callq  7a13 <_ZN6Parser13compileModuleE7QString+0xa1>

    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
    7a13:	90                   	nop
}
    7a14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a18:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7a1c:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7a23:	00 00 
    7a25:	74 3e                	je     7a65 <_ZN6Parser13compileModuleE7QString+0xf3>
    7a27:	eb 37                	jmp    7a60 <_ZN6Parser13compileModuleE7QString+0xee>
    7a29:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7a2c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a30:	48 89 c7             	mov    %rax,%rdi
    7a33:	e8 00 00 00 00       	callq  7a38 <_ZN6Parser13compileModuleE7QString+0xc6>
    7a38:	eb 03                	jmp    7a3d <_ZN6Parser13compileModuleE7QString+0xcb>
    7a3a:	48 89 c3             	mov    %rax,%rbx
    7a3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a41:	48 89 c7             	mov    %rax,%rdi
    7a44:	e8 00 00 00 00       	callq  7a49 <_ZN6Parser13compileModuleE7QString+0xd7>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a49:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a4d:	48 89 c7             	mov    %rax,%rdi
    7a50:	e8 00 00 00 00       	callq  7a55 <_ZN6Parser13compileModuleE7QString+0xe3>
    7a55:	48 89 d8             	mov    %rbx,%rax
    7a58:	48 89 c7             	mov    %rax,%rdi
    7a5b:	e8 00 00 00 00       	callq  7a60 <_ZN6Parser13compileModuleE7QString+0xee>
    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
}
    7a60:	e8 00 00 00 00       	callq  7a65 <_ZN6Parser13compileModuleE7QString+0xf3>
    7a65:	48 83 c4 48          	add    $0x48,%rsp
    7a69:	5b                   	pop    %rbx
    7a6a:	5d                   	pop    %rbp
    7a6b:	c3                   	retq   

0000000000007a6c <_ZN6Parser7compileEv>:

void        takeModules(){
    7a6c:	55                   	push   %rbp
    7a6d:	48 89 e5             	mov    %rsp,%rbp
    7a70:	53                   	push   %rbx
    7a71:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    7a78:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    7a7f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7a86:	00 00 
    7a88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7a8c:	31 c0                	xor    %eax,%eax

}

int Parser::compile(){
    // WiFi b1212556789
    7a8e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a92:	48 89 c7             	mov    %rax,%rdi
    7a95:	e8 00 00 00 00       	callq  7a9a <_ZN6Parser7compileEv+0x2e>

   //testCase01();return 0;

    7a9a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7aa1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Sems semSoup;

    7aa5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7aac:	48 89 c7             	mov    %rax,%rdi
    7aaf:	e8 00 00 00 00       	callq  7ab4 <_ZN6Parser7compileEv+0x48>
    //return -1;
    QString *script = &this->script;

    7ab4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7abb:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7abf:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7ac6:	48 89 d6             	mov    %rdx,%rsi
    7ac9:	48 89 c7             	mov    %rax,%rdi
    7acc:	e8 00 00 00 00       	callq  7ad1 <_ZN6Parser7compileEv+0x65>
    7ad1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ad8:	48 8d 78 78          	lea    0x78(%rax),%rdi
    7adc:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7ae3:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7aea:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7af1:	48 89 d1             	mov    %rdx,%rcx
    7af4:	48 89 fa             	mov    %rdi,%rdx
    7af7:	48 89 c7             	mov    %rax,%rdi
    7afa:	e8 00 00 00 00       	callq  7aff <_ZN6Parser7compileEv+0x93>
    7aff:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7b06:	48 89 c7             	mov    %rax,%rdi
    7b09:	e8 00 00 00 00       	callq  7b0e <_ZN6Parser7compileEv+0xa2>
    this->init();
    //this->splitBlocks(*script); // temporary off
    7b0e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7b15:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7b19:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7b20:	48 89 d6             	mov    %rdx,%rsi
    7b23:	48 89 c7             	mov    %rax,%rdi
    7b26:	e8 00 00 00 00       	callq  7b2b <_ZN6Parser7compileEv+0xbf>
    7b2b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7b32:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    7b39:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7b40:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7b47:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7b4e:	48 89 d1             	mov    %rdx,%rcx
    7b51:	48 89 fa             	mov    %rdi,%rdx
    7b54:	48 89 c7             	mov    %rax,%rdi
    7b57:	e8 00 00 00 00       	callq  7b5c <_ZN6Parser7compileEv+0xf0>
    7b5c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7b63:	48 89 c7             	mov    %rax,%rdi
    7b66:	e8 00 00 00 00       	callq  7b6b <_ZN6Parser7compileEv+0xff>
    this->takeModules();

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);

    // теперь код поблочно лежит в контейнере sorted.
    //
    7b6b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b6f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7b76 <_ZN6Parser7compileEv+0x10a>
    7b76:	48 89 c7             	mov    %rax,%rdi
    7b79:	e8 00 00 00 00       	callq  7b7e <_ZN6Parser7compileEv+0x112>
    7b7e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7b82:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7b89:	48 89 d6             	mov    %rdx,%rsi
    7b8c:	48 89 c7             	mov    %rax,%rdi
    7b8f:	e8 00 00 00 00       	callq  7b94 <_ZN6Parser7compileEv+0x128>
    7b94:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b98:	48 89 c7             	mov    %rax,%rdi
    7b9b:	e8 00 00 00 00       	callq  7ba0 <_ZN6Parser7compileEv+0x134>
    // ключ     - название блока
    7ba0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7ba4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7bab <_ZN6Parser7compileEv+0x13f>
    7bab:	48 89 c7             	mov    %rax,%rdi
    7bae:	e8 00 00 00 00       	callq  7bb3 <_ZN6Parser7compileEv+0x147>
    7bb3:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7bb7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7bbe:	48 89 d6             	mov    %rdx,%rsi
    7bc1:	48 89 c7             	mov    %rax,%rdi
    7bc4:	e8 00 00 00 00       	callq  7bc9 <_ZN6Parser7compileEv+0x15d>
    7bc9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7bcd:	48 89 c7             	mov    %rax,%rdi
    7bd0:	e8 00 00 00 00       	callq  7bd5 <_ZN6Parser7compileEv+0x169>
    // значение - список строк из блока, типа QStringList
    7bd5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7bd9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7be0 <_ZN6Parser7compileEv+0x174>
    7be0:	48 89 c7             	mov    %rax,%rdi
    7be3:	e8 00 00 00 00       	callq  7be8 <_ZN6Parser7compileEv+0x17c>
    7be8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    7bec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7bf3:	48 89 d6             	mov    %rdx,%rsi
    7bf6:	48 89 c7             	mov    %rax,%rdi
    7bf9:	e8 00 00 00 00       	callq  7bfe <_ZN6Parser7compileEv+0x192>
    7bfe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7c02:	48 89 c7             	mov    %rax,%rdi
    7c05:	e8 00 00 00 00       	callq  7c0a <_ZN6Parser7compileEv+0x19e>

    7c0a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c15 <_ZN6Parser7compileEv+0x1a9>
    7c15:	48 89 c7             	mov    %rax,%rdi
    7c18:	e8 00 00 00 00       	callq  7c1d <_ZN6Parser7compileEv+0x1b1>
    7c1d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7c21:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7c28:	48 89 d6             	mov    %rdx,%rsi
    7c2b:	48 89 c7             	mov    %rax,%rdi
    7c2e:	e8 00 00 00 00       	callq  7c33 <_ZN6Parser7compileEv+0x1c7>
    7c33:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c37:	48 89 c7             	mov    %rax,%rdi
    7c3a:	e8 00 00 00 00       	callq  7c3f <_ZN6Parser7compileEv+0x1d3>
    // Подключить все инклуды по списку
    7c3f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7c46:	48 89 c7             	mov    %rax,%rdi
    7c49:	e8 00 00 00 00       	callq  7c4e <_ZN6Parser7compileEv+0x1e2>
    7c4e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    this->addIncludeFile("definitions.h");
    this->addIncludeFile("project1.h");
    7c54:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7c58:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7c5f:	48 89 d6             	mov    %rdx,%rsi
    7c62:	48 89 c7             	mov    %rax,%rdi
    7c65:	e8 00 00 00 00       	callq  7c6a <_ZN6Parser7compileEv+0x1fe>
    7c6a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    this->addIncludeFile("kpa_config.h");
    this->addIncludeFile("names.h");
    int lIf = this->loadIncludes();
    7c70:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7c74:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7c7b:	48 89 d6             	mov    %rdx,%rsi
    7c7e:	48 89 c7             	mov    %rax,%rdi
    7c81:	e8 00 00 00 00       	callq  7c86 <_ZN6Parser7compileEv+0x21a>
    7c86:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);

    7c8c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7c93:	48 89 c7             	mov    %rax,%rdi
    7c96:	e8 00 00 00 00       	callq  7c9b <_ZN6Parser7compileEv+0x22f>
void        takeModules(){

}

int Parser::compile(){
    // WiFi b1212556789
    7c9b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7c9f:	48 89 c7             	mov    %rax,%rdi
    7ca2:	e8 00 00 00 00       	callq  7ca7 <_ZN6Parser7compileEv+0x23b>

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
    7ca7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7cab:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7cb2:	00 00 
    7cb4:	0f 84 90 00 00 00    	je     7d4a <_ZN6Parser7compileEv+0x2de>
    7cba:	e9 86 00 00 00       	jmpq   7d45 <_ZN6Parser7compileEv+0x2d9>
    7cbf:	48 89 c3             	mov    %rax,%rbx

    Sems semSoup;

    //return -1;
    QString *script = &this->script;

    7cc2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7cc9:	48 89 c7             	mov    %rax,%rdi
    7ccc:	e8 00 00 00 00       	callq  7cd1 <_ZN6Parser7compileEv+0x265>
    7cd1:	eb 5b                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7cd3:	48 89 c3             	mov    %rax,%rbx
    this->init();
    //this->splitBlocks(*script); // temporary off
    7cd6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7cdd:	48 89 c7             	mov    %rax,%rdi
    7ce0:	e8 00 00 00 00       	callq  7ce5 <_ZN6Parser7compileEv+0x279>
    7ce5:	eb 47                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7ce7:	48 89 c3             	mov    %rax,%rbx
    this->takeModules();

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);

    // теперь код поблочно лежит в контейнере sorted.
    //
    7cea:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7cee:	48 89 c7             	mov    %rax,%rdi
    7cf1:	e8 00 00 00 00       	callq  7cf6 <_ZN6Parser7compileEv+0x28a>
    7cf6:	eb 36                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7cf8:	48 89 c3             	mov    %rax,%rbx
    // ключ     - название блока
    7cfb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7cff:	48 89 c7             	mov    %rax,%rdi
    7d02:	e8 00 00 00 00       	callq  7d07 <_ZN6Parser7compileEv+0x29b>
    7d07:	eb 25                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7d09:	48 89 c3             	mov    %rax,%rbx
    // значение - список строк из блока, типа QStringList
    7d0c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7d10:	48 89 c7             	mov    %rax,%rdi
    7d13:	e8 00 00 00 00       	callq  7d18 <_ZN6Parser7compileEv+0x2ac>
    7d18:	eb 14                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7d1a:	48 89 c3             	mov    %rax,%rbx

    7d1d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7d21:	48 89 c7             	mov    %rax,%rdi
    7d24:	e8 00 00 00 00       	callq  7d29 <_ZN6Parser7compileEv+0x2bd>
    7d29:	eb 03                	jmp    7d2e <_ZN6Parser7compileEv+0x2c2>
    7d2b:	48 89 c3             	mov    %rax,%rbx
void        takeModules(){

}

int Parser::compile(){
    // WiFi b1212556789
    7d2e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7d32:	48 89 c7             	mov    %rax,%rdi
    7d35:	e8 00 00 00 00       	callq  7d3a <_ZN6Parser7compileEv+0x2ce>
    7d3a:	48 89 d8             	mov    %rbx,%rax
    7d3d:	48 89 c7             	mov    %rax,%rdi
    7d40:	e8 00 00 00 00       	callq  7d45 <_ZN6Parser7compileEv+0x2d9>

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
    7d45:	e8 00 00 00 00       	callq  7d4a <_ZN6Parser7compileEv+0x2de>
    7d4a:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    7d51:	5b                   	pop    %rbx
    7d52:	5d                   	pop    %rbp
    7d53:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2ERKS_:

0000000000000000 <_ZN10QByteArrayC1ERKS_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 00             	mov    (%rax),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN10QByteArrayC1ERKS_+0x2d>
    QString script = *str;
  2d:	90                   	nop
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QDataStreamlsEh:

0000000000000000 <_ZN11QDataStreamlsEh>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  15:	0f be d0             	movsbl %al,%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	89 d6                	mov    %edx,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN11QDataStreamlsEh+0x26>
  26:	c9                   	leaveq 
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE4takeERKS0_:

0000000000000000 <_ZN4QMapI7QStringhE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapI7QStringhE4takeERKS0_+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapI7QStringhE4takeERKS0_+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapI7QStringhE4takeERKS0_+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 20          	movzbl 0x20(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapI7QStringhE4takeERKS0_+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapI7QStringhE4takeERKS0_+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE4takeERKh:

0000000000000000 <_ZN4QMapIhhE4takeERKh>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapIhhE4takeERKh+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapIhhE4takeERKh+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapIhhE4takeERKh+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 19          	movzbl 0x19(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapIhhE4takeERKh+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapIhhE4takeERKh+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE6appendERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE6appendERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI10QByteArrayE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI10QByteArrayE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI10QByteArrayE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI10QByteArrayE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI10QByteArrayE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI10QByteArrayE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI10QByteArrayE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI10QByteArrayE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI10QByteArrayE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE4takeERKS0_:

0000000000000000 <_ZN5QHashI7QString11QStringListE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE:

0000000000000000 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 83 c0 18          	add    $0x18,%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x20>
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  28:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x33>
  33:	90                   	nop
  34:	c9                   	leaveq 
  35:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE8findNodeERKh:

0000000000000000 <_ZNK8QMapDataIhhE8findNodeERKh>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataIhhE8findNodeERKh+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataIhhE8findNodeERKh+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataIhhE8findNodeERKh+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataIhhE8findNodeERKh+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataIhhE8findNodeERKh+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE:

0000000000000000 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE18detach_helper_growEii:

0000000000000000 <_ZN5QListI10QByteArrayE18detach_helper_growEii>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE10lowerBoundERKh:

0000000000000000 <_ZN8QMapNodeIhhE10lowerBoundERKh>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeIhhE10lowerBoundERKh+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeIhhE10lowerBoundERKh+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeIhhE10lowerBoundERKh+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:

#include "module.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   
