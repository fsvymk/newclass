
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        00000008  0000000000000000  0000000000000000  00000140  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000148  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        0000000c  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        0000000c  0000000000000000  0000000000000000  0000015c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  00000178  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000180  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        0000000c  0000000000000000  0000000000000000  00000188  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        00000008  0000000000000000  0000000000000000  000001bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        00000008  0000000000000000  0000000000000000  000001c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        0000000c  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        0000000c  0000000000000000  0000000000000000  000001e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000300  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  00000308  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000310  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  00000318  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000320  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  00000328  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000330  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  00000338  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000340  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  00000348  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000350  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  00000358  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000360  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  00000368  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000370  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  00000378  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000380  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  00000388  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000390  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  00000398  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000400  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  00000408  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000410  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  00000418  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000420  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  00000428  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000430  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  00000438  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000440  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  00000448  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000450  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  00000458  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000460  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  00000468  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000470  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  00000478  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000480  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  00000488  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000490  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  00000498  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000500  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  00000508  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000510  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  00000518  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000520  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  00000528  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000530  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  00000538  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000540  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  00000548  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000550  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  00000558  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000560  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  00000568  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000570  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  00000578  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000580  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  00000588  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000590  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  00000598  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000600  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  00000608  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000610  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  00000618  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000620  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  00000628  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000630  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  00000638  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000640  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  00000648  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000650  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  00000658  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000660  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  00000668  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000670  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  00000678  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000680  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  00000688  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000690  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  00000698  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000700  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  00000708  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000710  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  00000718  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000720  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  00000728  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000730  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  00000738  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000740  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  00000748  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000750  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  00000758  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000760  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  00000768  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000770  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  00000778  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000780  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  00000788  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000790  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  00000798  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000800  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  00000808  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000810  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  00000818  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000820  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  00000828  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000830  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  00000838  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000840  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  00000848  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000850  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  00000858  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000860  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  00000868  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000870  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  00000878  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000880  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  00000888  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000890  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  00000898  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000900  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  00000908  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000910  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  00000918  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000920  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  00000928  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000930  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  00000938  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000940  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  00000948  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000950  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  00000958  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000960  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  00000968  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000970  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  00000978  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000980  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  00000988  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000990  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  00000998  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aa8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000ab8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000ac8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000ad8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000ae8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000af8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000ba8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bb8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bc8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bd8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000be8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bf8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000ca8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cb8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .group        00000008  0000000000000000  0000000000000000  00000cc0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
398 .group        00000008  0000000000000000  0000000000000000  00000cc8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
399 .group        00000008  0000000000000000  0000000000000000  00000cd0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
400 .group        00000008  0000000000000000  0000000000000000  00000cd8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
401 .group        00000008  0000000000000000  0000000000000000  00000ce0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
402 .group        00000008  0000000000000000  0000000000000000  00000ce8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
403 .group        00000008  0000000000000000  0000000000000000  00000cf0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
404 .group        00000008  0000000000000000  0000000000000000  00000cf8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
405 .group        00000008  0000000000000000  0000000000000000  00000d00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
406 .group        00000008  0000000000000000  0000000000000000  00000d08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
407 .group        00000008  0000000000000000  0000000000000000  00000d10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
408 .group        00000008  0000000000000000  0000000000000000  00000d18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
409 .group        00000008  0000000000000000  0000000000000000  00000d20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
410 .group        00000008  0000000000000000  0000000000000000  00000d28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
411 .group        00000008  0000000000000000  0000000000000000  00000d30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
412 .group        00000008  0000000000000000  0000000000000000  00000d38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
413 .group        00000008  0000000000000000  0000000000000000  00000d40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
414 .group        00000008  0000000000000000  0000000000000000  00000d48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
415 .group        00000008  0000000000000000  0000000000000000  00000d50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
416 .group        00000008  0000000000000000  0000000000000000  00000d58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
417 .group        00000008  0000000000000000  0000000000000000  00000d60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
418 .group        00000008  0000000000000000  0000000000000000  00000d68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
419 .group        00000008  0000000000000000  0000000000000000  00000d70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
420 .group        00000008  0000000000000000  0000000000000000  00000d78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
421 .group        00000008  0000000000000000  0000000000000000  00000d80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
422 .group        00000008  0000000000000000  0000000000000000  00000d88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
423 .group        00000008  0000000000000000  0000000000000000  00000d90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
424 .group        00000008  0000000000000000  0000000000000000  00000d98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
425 .group        00000008  0000000000000000  0000000000000000  00000da0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
426 .group        00000008  0000000000000000  0000000000000000  00000da8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
427 .group        00000008  0000000000000000  0000000000000000  00000db0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
428 .group        00000008  0000000000000000  0000000000000000  00000db8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
429 .group        00000008  0000000000000000  0000000000000000  00000dc0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
430 .group        00000008  0000000000000000  0000000000000000  00000dc8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
431 .group        00000008  0000000000000000  0000000000000000  00000dd0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
432 .group        00000008  0000000000000000  0000000000000000  00000dd8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
433 .group        00000008  0000000000000000  0000000000000000  00000de0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
434 .group        00000008  0000000000000000  0000000000000000  00000de8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
435 .group        00000008  0000000000000000  0000000000000000  00000df0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
436 .group        00000008  0000000000000000  0000000000000000  00000df8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
437 .text         00007fd7  0000000000000000  0000000000000000  00000e00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
438 .data         00000000  0000000000000000  0000000000000000  00008dd7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
439 .bss          00000000  0000000000000000  0000000000000000  00008dd7  2**0
                  ALLOC
440 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008dd7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
441 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008de9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
442 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008df8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
443 .text._ZN18QMessageLogContextC2EPKciS1_S1_ 00000052  0000000000000000  0000000000000000  00008e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
444 .rodata       0000065d  0000000000000000  0000000000000000  00008e60  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
445 .text._ZN14QMessageLoggerC2EPKciS1_ 00000038  0000000000000000  0000000000000000  000094be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  000094f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
447 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  0000950e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
448 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  0000951e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
449 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00009532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
450 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  0000954c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
451 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00009568  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  000095aa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  000095ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00009624  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009688  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
456 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000096ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
457 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  000096fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
458 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  00009710  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  0000972e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
460 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00009762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
461 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00009776  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  000097d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN10QByteArrayC2ERKS_ 00000030  0000000000000000  0000000000000000  00009846  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  00009876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
465 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000989e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  0000991e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
467 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009994  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  000099ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  000099e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
470 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  000099f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  00009a3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
472 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  00009a66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
473 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  00009a8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00009af8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00009b40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00009bd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
477 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  00009bea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00009c7e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
479 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009c94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
480 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00009cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
481 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00009cce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
482 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00009cec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
483 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  00009d0a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
484 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00009d9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
485 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009db0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00009e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
487 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009e30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009ebc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009eda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009f0e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
491 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009f84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009fd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
494 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  0000a126  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
496 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  0000a141  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  0000a1cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
498 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  0000a1dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
499 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  0000a1e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
500 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  0000a1fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  0000a244  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  0000a25e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  0000a298  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  0000a2ec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
505 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  0000a30a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
506 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  0000a32c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
507 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  0000a350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
508 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  0000a384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
509 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  0000a3ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
510 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  0000a3d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
511 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  0000a3e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  0000a3ec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
513 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  0000a408  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a42e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a44a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a474  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a49e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
518 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a4ac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a4ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a4fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a50e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a54e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
523 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a578  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a5be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
525 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a619  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a66e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a6e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZN11QDataStreamlsEh 00000028  0000000000000000  0000000000000000  0000a700  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZN6QDebug10maybeSpaceEv 00000035  0000000000000000  0000000000000000  0000a728  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN6QDebuglsERK7QString 00000053  0000000000000000  0000000000000000  0000a75e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .gcc_except_table 0000135c  0000000000000000  0000000000000000  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
532 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000bb10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
533 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000bb2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000bb56  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000bb72  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
536 .text._ZN6moduleD2Ev 00000096  0000000000000000  0000000000000000  0000bc2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000bcc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
538 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000bcde  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
539 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000bcf8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
540 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000bd12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
541 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000bd2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
542 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000bd4e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000bd59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000bd7e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000bd98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000bdb2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000bdbd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000bde2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
549 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000be0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
550 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000be16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000be40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
552 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000bea8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000bfc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000c0a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000c142  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000c26e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
557 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000c286  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000c2e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
559 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000c324  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
560 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000c430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
561 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000c43c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
562 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000c466  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
563 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c4ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
564 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000c4e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000c524  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
567 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000c586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
568 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c5a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZN4QMapI7QStringhE4takeERKS0_ 0000006b  0000000000000000  0000000000000000  0000c5c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
570 .text._ZN4QMapIhhE4takeERKh 0000006b  0000000000000000  0000000000000000  0000c630  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZN5QListI10QByteArrayE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000c69c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000c7b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
573 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c932  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
574 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000caa4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
575 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000cc16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
576 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000cc2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000cc60  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000cc94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
579 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000ccb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000ccd6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
581 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000ccf4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
582 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000cd22  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
583 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000ce92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
584 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000cef4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
585 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000cf12  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
586 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000cf74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
587 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000cf96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
588 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000cfac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
589 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000cfc2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
590 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000cfdc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
591 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000d010  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
592 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000d02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
593 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000d09c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
594 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000d0f0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000d10a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000d14a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
597 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000d256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
598 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000d26c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
599 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000d2ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
600 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000d326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000d348  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
602 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000d374  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000d396  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
604 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000d3b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000d442  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000d4a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000d5b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
608 .text._ZNK5QListI6moduleE4sizeEv 0000001a  0000000000000000  0000000000000000  0000d5ca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
609 .text._ZN5QListI6moduleEixEi 00000071  0000000000000000  0000000000000000  0000d5e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
610 .text._ZNK5QListI6moduleE2atEi 00000065  0000000000000000  0000000000000000  0000d656  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
611 .text._ZNK5QListI8variableE4sizeEv 0000001a  0000000000000000  0000000000000000  0000d6bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
612 .text._ZNK5QListI8variableE2atEi 00000065  0000000000000000  0000000000000000  0000d6d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
613 .text._ZN5QListI8variableED2Ev 00000068  0000000000000000  0000000000000000  0000d73c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN5QListI6moduleE6appendERKS0_ 0000010d  0000000000000000  0000000000000000  0000d7a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d8b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
616 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d8d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
617 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d8f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000d956  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000db2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000db94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000dbb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
622 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000dc7e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000dca4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
624 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000dcbe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000dce4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000dd43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
627 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000dd68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
628 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000dd9a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000ded4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000df96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
631 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000dfb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000e00e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e03c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
634 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000e056  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
635 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000e064  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e092  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE 00000036  0000000000000000  0000000000000000  0000e112  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000e148  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
639 .text._ZNK8QMapDataIhhE8findNodeERKh 00000080  0000000000000000  0000000000000000  0000e176  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
640 .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE 00000026  0000000000000000  0000000000000000  0000e1f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN5QListI10QByteArrayE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000e21c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000e3f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000e45a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000e47a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000e4a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
646 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000e4ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
647 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e4cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
648 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e4de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
649 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000e4f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
650 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000e50a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
651 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000e63e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
652 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000e650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
653 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
654 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
655 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000e686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
656 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000e6a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000e790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
658 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000e7a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
659 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000e7b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
660 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e7d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
661 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e7e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
662 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000e7fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
663 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000e814  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
664 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e8a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
665 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000e8c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
666 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000e8de  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
667 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e91a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
668 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000e99a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000e9c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
670 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000e9da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
671 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e9ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
672 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e9fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
673 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000ea10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
674 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000ea2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
675 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000eb18  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
676 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000eb52  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
677 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000ebb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
678 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000ebfa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
679 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000ec24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
680 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000ec56  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
681 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000ed90  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
682 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000ee52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
683 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000ee6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
684 .text._ZN5QListI6moduleE6detachEv 0000002e  0000000000000000  0000000000000000  0000ee7a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
685 .text._ZN5QListI6moduleE4Node1tEv 00000011  0000000000000000  0000000000000000  0000eea8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
686 .text._ZN5QListI8variableE4Node1tEv 00000011  0000000000000000  0000000000000000  0000eeba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
687 .text._ZN19QListSpecialMethodsI8variableED2Ev 0000000b  0000000000000000  0000000000000000  0000eecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
688 .text._ZN5QListI8variableE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000eed8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
689 .text._ZN5QListI6moduleE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000ef36  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
690 .text._ZN6moduleC2ERKS_ 000000c2  0000000000000000  0000000000000000  0000f10c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
691 .text._ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_ 0000005b  0000000000000000  0000000000000000  0000f1ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
692 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000f22a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
693 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000f25e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
694 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000f284  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
695 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000f2bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
696 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000f2e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
697 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000f35c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
698 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000f3a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
699 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000f3f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
700 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000f47c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
701 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000f4b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
702 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f4d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
703 .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000f580  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
704 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f5f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
705 .text._ZN8QMapNodeIhhE10lowerBoundERKh 00000077  0000000000000000  0000000000000000  0000f6a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
706 .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000f718  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
707 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f7e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
708 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000f88a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
709 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000f8a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
710 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f91c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
711 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000f9c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
712 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000fa26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
713 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000fa46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
714 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000fa6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
715 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000fae6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
716 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000fb2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
717 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000fb80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
718 .text._ZN5QListI6moduleE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000fc06  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
719 .text._ZN8variableD2Ev 0000001f  0000000000000000  0000000000000000  0000fc2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
720 .text._ZN5QListI8variableE13node_destructEPNS1_4NodeES3_ 0000004a  0000000000000000  0000000000000000  0000fc4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
721 .text._ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_ 000000d2  0000000000000000  0000000000000000  0000fc98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
722 .text._ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_ 0000004a  0000000000000000  0000000000000000  0000fd6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
723 .text._ZN5QListI6moduleE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000fdb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
724 .text._ZN5QListI8variableEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000fe12  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
725 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000fef0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
726 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000ff24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
727 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000ffb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
728 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  00010004  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
729 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  00010028  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
730 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  00010052  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
731 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  00010122  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
732 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0001012e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
733 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  00010242  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
734 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  000102a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
735 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  000102ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
736 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  000103c2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
737 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  00010423  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
738 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0001042e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
739 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  00010542  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
740 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  000105a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
741 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  000105ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
742 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  000106c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
743 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  000106d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
744 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0001075c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
745 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  000107b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
746 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  000107d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
747 .text._ZN5QListI6moduleE13detach_helperEi 000000d0  0000000000000000  0000000000000000  000107fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
748 .text._ZN8variableC2ERKS_ 0000005a  0000000000000000  0000000000000000  000108ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
749 .text._ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_ 000000d2  0000000000000000  0000000000000000  00010928  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
750 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  000109fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
751 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  00010a08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
752 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  00010a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
753 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  00010a76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
754 .debug_info   00027571  0000000000000000  0000000000000000  00010ae7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_abbrev 00000cf0  0000000000000000  0000000000000000  00038058  2**0
                  CONTENTS, READONLY, DEBUGGING
756 .debug_aranges 00001350  0000000000000000  0000000000000000  00038d48  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_ranges 00001960  0000000000000000  0000000000000000  0003a098  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000d7b  0000000000000000  0000000000000000  0003b9f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  0000061c  0000000000000000  0000000000000000  0003c773  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000022  0000000000000000  0000000000000000  0003cd8f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000136  0000000000000000  0000000000000000  0003cdb1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  00000010  0000000000000000  0000000000000000  0003cee7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  00000275  0000000000000000  0000000000000000  0003cef7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  0000016f  0000000000000000  0000000000000000  0003d16c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000016  0000000000000000  0000000000000000  0003d2db  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000035  0000000000000000  0000000000000000  0003d2f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000058  0000000000000000  0000000000000000  0003d326  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  000005b4  0000000000000000  0000000000000000  0003d37e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  0000016d  0000000000000000  0000000000000000  0003d932  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  00000016  0000000000000000  0000000000000000  0003da9f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  0000009a  0000000000000000  0000000000000000  0003dab5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000016  0000000000000000  0000000000000000  0003db4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  00000018  0000000000000000  0000000000000000  0003db65  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  00000032  0000000000000000  0000000000000000  0003db7d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  000000c0  0000000000000000  0000000000000000  0003dbaf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000028  0000000000000000  0000000000000000  0003dc6f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000012  0000000000000000  0000000000000000  0003dc97  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  000000cf  0000000000000000  0000000000000000  0003dca9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  0000001c  0000000000000000  0000000000000000  0003dd78  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000018  0000000000000000  0000000000000000  0003dd94  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  0000006e  0000000000000000  0000000000000000  0003ddac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  00000082  0000000000000000  0000000000000000  0003de1a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  00000012  0000000000000000  0000000000000000  0003de9c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000012  0000000000000000  0000000000000000  0003deae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  00000016  0000000000000000  0000000000000000  0003dec0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  00000035  0000000000000000  0000000000000000  0003ded6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  00000052  0000000000000000  0000000000000000  0003df0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  0000004c  0000000000000000  0000000000000000  0003df5d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  0000001c  0000000000000000  0000000000000000  0003dfa9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000028  0000000000000000  0000000000000000  0003dfc5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  0000005e  0000000000000000  0000000000000000  0003dfed  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  000000e2  0000000000000000  0000000000000000  0003e04b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  00000010  0000000000000000  0000000000000000  0003e12d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  0000004c  0000000000000000  0000000000000000  0003e13d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  00000022  0000000000000000  0000000000000000  0003e189  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000068  0000000000000000  0000000000000000  0003e1ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  0000007f  0000000000000000  0000000000000000  0003e213  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  0000003a  0000000000000000  0000000000000000  0003e292  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000019  0000000000000000  0000000000000000  0003e2cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000020  0000000000000000  0000000000000000  0003e2e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  00000022  0000000000000000  0000000000000000  0003e305  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000010  0000000000000000  0000000000000000  0003e327  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  00000016  0000000000000000  0000000000000000  0003e337  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  00000028  0000000000000000  0000000000000000  0003e34d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  00000010  0000000000000000  0000000000000000  0003e375  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  00000046  0000000000000000  0000000000000000  0003e385  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  0000001c  0000000000000000  0000000000000000  0003e3cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  00000020  0000000000000000  0000000000000000  0003e3e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_macro  0000005a  0000000000000000  0000000000000000  0003e407  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_macro  00000010  0000000000000000  0000000000000000  0003e461  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
811 .debug_macro  00000010  0000000000000000  0000000000000000  0003e471  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
812 .debug_macro  000000e4  0000000000000000  0000000000000000  0003e481  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
813 .debug_macro  0000025a  0000000000000000  0000000000000000  0003e565  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
814 .debug_macro  0000002d  0000000000000000  0000000000000000  0003e7bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
815 .debug_macro  00000016  0000000000000000  0000000000000000  0003e7ec  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
816 .debug_macro  00000050  0000000000000000  0000000000000000  0003e802  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
817 .debug_macro  00000019  0000000000000000  0000000000000000  0003e852  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
818 .debug_macro  00000011  0000000000000000  0000000000000000  0003e86b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
819 .debug_macro  0000014b  0000000000000000  0000000000000000  0003e87c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
820 .debug_macro  0000001e  0000000000000000  0000000000000000  0003e9c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
821 .debug_macro  0000001c  0000000000000000  0000000000000000  0003e9e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
822 .debug_macro  00000024  0000000000000000  0000000000000000  0003ea01  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
823 .debug_macro  00000016  0000000000000000  0000000000000000  0003ea25  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
824 .debug_macro  00000018  0000000000000000  0000000000000000  0003ea3b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
825 .debug_macro  00000019  0000000000000000  0000000000000000  0003ea53  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
826 .debug_macro  00000058  0000000000000000  0000000000000000  0003ea6c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
827 .debug_macro  00000016  0000000000000000  0000000000000000  0003eac4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
828 .debug_macro  0000001c  0000000000000000  0000000000000000  0003eada  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
829 .debug_macro  00000016  0000000000000000  0000000000000000  0003eaf6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
830 .debug_macro  00000022  0000000000000000  0000000000000000  0003eb0c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
831 .debug_macro  00000043  0000000000000000  0000000000000000  0003eb2e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
832 .debug_macro  0000003c  0000000000000000  0000000000000000  0003eb71  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
833 .debug_macro  00000173  0000000000000000  0000000000000000  0003ebad  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
834 .debug_macro  00000012  0000000000000000  0000000000000000  0003ed20  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
835 .debug_macro  00000010  0000000000000000  0000000000000000  0003ed32  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
836 .debug_macro  00000058  0000000000000000  0000000000000000  0003ed42  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
837 .debug_macro  000000b4  0000000000000000  0000000000000000  0003ed9a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
838 .debug_macro  00000016  0000000000000000  0000000000000000  0003ee4e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
839 .debug_macro  00000010  0000000000000000  0000000000000000  0003ee64  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
840 .debug_macro  00000037  0000000000000000  0000000000000000  0003ee74  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
841 .debug_macro  00000058  0000000000000000  0000000000000000  0003eeab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
842 .debug_macro  00000011  0000000000000000  0000000000000000  0003ef03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
843 .debug_macro  00000016  0000000000000000  0000000000000000  0003ef14  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
844 .debug_macro  00000010  0000000000000000  0000000000000000  0003ef2a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
845 .debug_macro  00000010  0000000000000000  0000000000000000  0003ef3a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
846 .debug_macro  00000022  0000000000000000  0000000000000000  0003ef4a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
847 .debug_macro  00000122  0000000000000000  0000000000000000  0003ef6c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
848 .debug_macro  0000008e  0000000000000000  0000000000000000  0003f08e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
849 .debug_macro  00000016  0000000000000000  0000000000000000  0003f11c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
850 .debug_macro  00000058  0000000000000000  0000000000000000  0003f132  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
851 .debug_macro  000000fa  0000000000000000  0000000000000000  0003f18a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
852 .debug_macro  00000030  0000000000000000  0000000000000000  0003f284  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
853 .debug_macro  000000c1  0000000000000000  0000000000000000  0003f2b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
854 .debug_macro  0000004d  0000000000000000  0000000000000000  0003f375  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
855 .debug_macro  00000010  0000000000000000  0000000000000000  0003f3c2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
856 .debug_macro  00000019  0000000000000000  0000000000000000  0003f3d2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
857 .debug_macro  00000020  0000000000000000  0000000000000000  0003f3eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
858 .debug_macro  00000018  0000000000000000  0000000000000000  0003f40b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
859 .debug_macro  00000023  0000000000000000  0000000000000000  0003f423  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
860 .debug_macro  00000010  0000000000000000  0000000000000000  0003f446  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
861 .debug_macro  00000016  0000000000000000  0000000000000000  0003f456  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
862 .debug_macro  00000076  0000000000000000  0000000000000000  0003f46c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
863 .debug_macro  00000016  0000000000000000  0000000000000000  0003f4e2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
864 .debug_macro  00000025  0000000000000000  0000000000000000  0003f4f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
865 .debug_macro  000000de  0000000000000000  0000000000000000  0003f51d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
866 .debug_macro  0000001c  0000000000000000  0000000000000000  0003f5fb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
867 .debug_macro  00000058  0000000000000000  0000000000000000  0003f617  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
868 .debug_macro  00000088  0000000000000000  0000000000000000  0003f66f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
869 .debug_macro  00000076  0000000000000000  0000000000000000  0003f6f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
870 .debug_macro  00000010  0000000000000000  0000000000000000  0003f76d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
871 .debug_macro  00000041  0000000000000000  0000000000000000  0003f77d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
872 .debug_macro  000000ee  0000000000000000  0000000000000000  0003f7be  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
873 .debug_macro  000000fc  0000000000000000  0000000000000000  0003f8ac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
874 .debug_macro  00000010  0000000000000000  0000000000000000  0003f9a8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
875 .debug_macro  000000e5  0000000000000000  0000000000000000  0003f9b8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
876 .debug_macro  00000012  0000000000000000  0000000000000000  0003fa9d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
877 .debug_macro  0000001f  0000000000000000  0000000000000000  0003faaf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
878 .debug_macro  00000016  0000000000000000  0000000000000000  0003face  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
879 .debug_macro  00000010  0000000000000000  0000000000000000  0003fae4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
880 .debug_macro  00000016  0000000000000000  0000000000000000  0003faf4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
881 .debug_macro  00000022  0000000000000000  0000000000000000  0003fb0a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
882 .debug_macro  00000016  0000000000000000  0000000000000000  0003fb2c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
883 .debug_macro  00000028  0000000000000000  0000000000000000  0003fb42  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
884 .debug_macro  00000216  0000000000000000  0000000000000000  0003fb6a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
885 .debug_macro  00000046  0000000000000000  0000000000000000  0003fd80  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
886 .debug_macro  0000002e  0000000000000000  0000000000000000  0003fdc6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
887 .debug_macro  00000027  0000000000000000  0000000000000000  0003fdf4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
888 .debug_macro  00000126  0000000000000000  0000000000000000  0003fe1b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
889 .debug_line   00004cd9  0000000000000000  0000000000000000  0003ff41  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
890 .debug_str    0003da19  0000000000000000  0000000000000000  00044c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
891 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00082638  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
892 .comment      0000002e  0000000000000000  0000000000000000  00082640  2**0
                  CONTENTS, READONLY
893 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0008266e  2**0
                  CONTENTS, READONLY
894 .eh_frame     00002d20  0000000000000000  0000000000000000  00082670  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhP13varParameters>:

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	41 57                	push   %r15
     322:	41 56                	push   %r14
     324:	41 55                	push   %r13
     326:	41 54                	push   %r12
     328:	53                   	push   %rbx
     329:	48 83 ec 68          	sub    $0x68,%rsp
     32d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     331:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     335:	89 c8                	mov    %ecx,%eax
     337:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
     33e:	88 95 7c ff ff ff    	mov    %dl,-0x84(%rbp)
     344:	88 85 78 ff ff ff    	mov    %al,-0x88(%rbp)
     34a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     351:	00 00 
     353:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
     357:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     359:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     35d:	48 89 c7             	mov    %rax,%rdi
     360:	e8 00 00 00 00       	callq  365 <_ZN6Parser12packVariableEhhP13varParameters+0x49>
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     365:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     369:	be 02 00 00 00       	mov    $0x2,%esi
     36e:	48 89 c7             	mov    %rax,%rdi
     371:	e8 00 00 00 00       	callq  376 <_ZN6Parser12packVariableEhhP13varParameters+0x5a>
     376:	8b 55 90             	mov    -0x70(%rbp),%edx
     379:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
     37d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     381:	48 89 ce             	mov    %rcx,%rsi
     384:	48 89 c7             	mov    %rax,%rdi
     387:	e8 00 00 00 00       	callq  38c <_ZN6Parser12packVariableEhhP13varParameters+0x70>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
     38c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     393:	48 83 c0 06          	add    $0x6,%rax
     397:	48 85 c0             	test   %rax,%rax
     39a:	0f 95 c0             	setne  %al
     39d:	0f b6 d8             	movzbl %al,%ebx
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
     3a0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3a7:	48 83 c0 04          	add    $0x4,%rax
     3ab:	48 85 c0             	test   %rax,%rax
     3ae:	0f 95 c0             	setne  %al
     3b1:	44 0f b6 e0          	movzbl %al,%r12d
QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
     3b5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3bc:	48 83 c0 02          	add    $0x2,%rax
     3c0:	48 85 c0             	test   %rax,%rax
     3c3:	0f 95 c0             	setne  %al
     3c6:	44 0f b6 e8          	movzbl %al,%r13d

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
     3ca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3d1:	48 85 c0             	test   %rax,%rax
     3d4:	0f 95 c0             	setne  %al
     3d7:	44 0f b6 f0          	movzbl %al,%r14d
     3db:	44 0f b6 bd 78 ff ff 	movzbl -0x88(%rbp),%r15d
     3e2:	ff 
     3e3:	0f b6 95 7c ff ff ff 	movzbl -0x84(%rbp),%edx
     3ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3ee:	89 d6                	mov    %edx,%esi
     3f0:	48 89 c7             	mov    %rax,%rdi
     3f3:	e8 00 00 00 00       	callq  3f8 <_ZN6Parser12packVariableEhhP13varParameters+0xdc>
     3f8:	44 89 fe             	mov    %r15d,%esi
     3fb:	48 89 c7             	mov    %rax,%rdi
     3fe:	e8 00 00 00 00       	callq  403 <_ZN6Parser12packVariableEhhP13varParameters+0xe7>
     403:	44 89 f6             	mov    %r14d,%esi
     406:	48 89 c7             	mov    %rax,%rdi
     409:	e8 00 00 00 00       	callq  40e <_ZN6Parser12packVariableEhhP13varParameters+0xf2>
                              << &VP->eventSET
     40e:	44 89 ee             	mov    %r13d,%esi
     411:	48 89 c7             	mov    %rax,%rdi
     414:	e8 00 00 00 00       	callq  419 <_ZN6Parser12packVariableEhhP13varParameters+0xfd>
                              << &VP->eventZERO
     419:	44 89 e6             	mov    %r12d,%esi
     41c:	48 89 c7             	mov    %rax,%rdi
     41f:	e8 00 00 00 00       	callq  424 <_ZN6Parser12packVariableEhhP13varParameters+0x108>
                              << &VP->eventCHANGE;
     424:	89 de                	mov    %ebx,%esi
     426:	48 89 c7             	mov    %rax,%rdi
     429:	e8 00 00 00 00       	callq  42e <_ZN6Parser12packVariableEhhP13varParameters+0x112>
    return result;
     42e:	90                   	nop
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     42f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     433:	48 89 c7             	mov    %rax,%rdi
     436:	e8 00 00 00 00       	callq  43b <_ZN6Parser12packVariableEhhP13varParameters+0x11f>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
    return result;
     43b:	eb 2b                	jmp    468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     43d:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     440:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     444:	48 89 c7             	mov    %rax,%rdi
     447:	e8 00 00 00 00       	callq  44c <_ZN6Parser12packVariableEhhP13varParameters+0x130>
     44c:	eb 03                	jmp    451 <_ZN6Parser12packVariableEhhP13varParameters+0x135>
     44e:	48 89 c3             	mov    %rax,%rbx
     451:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     455:	48 89 c7             	mov    %rax,%rdi
     458:	e8 00 00 00 00       	callq  45d <_ZN6Parser12packVariableEhhP13varParameters+0x141>
     45d:	48 89 d8             	mov    %rbx,%rax
     460:	48 89 c7             	mov    %rax,%rdi
     463:	e8 00 00 00 00       	callq  468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     * It is able to compile        - ok
     * Data stream                  - ok
     * var Parameters as argument   - ok
     * return result                - ok
     */
}
     468:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     46c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
     470:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     477:	00 00 
     479:	74 05                	je     480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     47b:	e8 00 00 00 00       	callq  480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     480:	48 83 c4 68          	add    $0x68,%rsp
     484:	5b                   	pop    %rbx
     485:	41 5c                	pop    %r12
     487:	41 5d                	pop    %r13
     489:	41 5e                	pop    %r14
     48b:	41 5f                	pop    %r15
     48d:	5d                   	pop    %rbp
     48e:	c3                   	retq   
     48f:	90                   	nop

0000000000000490 <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     490:	55                   	push   %rbp
     491:	48 89 e5             	mov    %rsp,%rbp
     494:	53                   	push   %rbx
     495:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
     49c:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
     4a3:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
     4aa:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
     4b1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     4b8:	00 00 
     4ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     4be:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     4c0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     4cf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     4de:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     4e5:	48 89 c7             	mov    %rax,%rdi
     4e8:	e8 00 00 00 00       	callq  4ed <_ZN6Parser16compileVariablesEP11QStringList+0x5d>
    QStringList       code = *str;
     4ed:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
     4f4:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     4fb:	48 89 d6             	mov    %rdx,%rsi
     4fe:	48 89 c7             	mov    %rax,%rdi
     501:	e8 00 00 00 00       	callq  506 <_ZN6Parser16compileVariablesEP11QStringList+0x76>

    // копирование из checkVariables

    int varCount      = 0;
     506:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%rbp)
     50d:	00 00 00 
    int index         = 0;
     510:	c7 85 ac fd ff ff 00 	movl   $0x0,-0x254(%rbp)
     517:	00 00 00 

    VarTypes VT;
     51a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     521:	48 89 c7             	mov    %rax,%rdi
     524:	e8 00 00 00 00       	callq  529 <_ZN6Parser16compileVariablesEP11QStringList+0x99>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     529:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     530:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     537:	48 89 d6             	mov    %rdx,%rsi
     53a:	48 89 c7             	mov    %rax,%rdi
     53d:	e8 00 00 00 00       	callq  542 <_ZN6Parser16compileVariablesEP11QStringList+0xb2>
     542:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     549:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     550:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 557 <_ZN6Parser16compileVariablesEP11QStringList+0xc7>
     557:	48 89 ce             	mov    %rcx,%rsi
     55a:	48 89 c7             	mov    %rax,%rdi
     55d:	e8 00 00 00 00       	callq  562 <_ZN6Parser16compileVariablesEP11QStringList+0xd2>
     562:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     569:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     570:	b9 00 00 00 00       	mov    $0x0,%ecx
     575:	ba 01 00 00 00       	mov    $0x1,%edx
     57a:	48 89 c7             	mov    %rax,%rdi
     57d:	e8 00 00 00 00       	callq  582 <_ZN6Parser16compileVariablesEP11QStringList+0xf2>
     582:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     589:	48 89 c7             	mov    %rax,%rdi
     58c:	e8 00 00 00 00       	callq  591 <_ZN6Parser16compileVariablesEP11QStringList+0x101>
     591:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     598:	48 89 c7             	mov    %rax,%rdi
     59b:	e8 00 00 00 00       	callq  5a0 <_ZN6Parser16compileVariablesEP11QStringList+0x110>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     5a0:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     5a7:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     5ae:	48 89 d6             	mov    %rdx,%rsi
     5b1:	48 89 c7             	mov    %rax,%rdi
     5b4:	e8 00 00 00 00       	callq  5b9 <_ZN6Parser16compileVariablesEP11QStringList+0x129>
     5b9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     5c0:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     5c7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5ce <_ZN6Parser16compileVariablesEP11QStringList+0x13e>
     5ce:	48 89 ce             	mov    %rcx,%rsi
     5d1:	48 89 c7             	mov    %rax,%rdi
     5d4:	e8 00 00 00 00       	callq  5d9 <_ZN6Parser16compileVariablesEP11QStringList+0x149>
     5d9:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     5e0:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     5e7:	b9 00 00 00 00       	mov    $0x0,%ecx
     5ec:	ba 01 00 00 00       	mov    $0x1,%edx
     5f1:	48 89 c7             	mov    %rax,%rdi
     5f4:	e8 00 00 00 00       	callq  5f9 <_ZN6Parser16compileVariablesEP11QStringList+0x169>
     5f9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     600:	48 89 c7             	mov    %rax,%rdi
     603:	e8 00 00 00 00       	callq  608 <_ZN6Parser16compileVariablesEP11QStringList+0x178>
     608:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     60f:	48 89 c7             	mov    %rax,%rdi
     612:	e8 00 00 00 00       	callq  617 <_ZN6Parser16compileVariablesEP11QStringList+0x187>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     617:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     61e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 625 <_ZN6Parser16compileVariablesEP11QStringList+0x195>
     625:	48 89 c7             	mov    %rax,%rdi
     628:	e8 00 00 00 00       	callq  62d <_ZN6Parser16compileVariablesEP11QStringList+0x19d>
     62d:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
     634:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     63b:	b9 00 00 00 00       	mov    $0x0,%ecx
     640:	ba 01 00 00 00       	mov    $0x1,%edx
     645:	48 89 c7             	mov    %rax,%rdi
     648:	e8 00 00 00 00       	callq  64d <_ZN6Parser16compileVariablesEP11QStringList+0x1bd>
     64d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     654:	48 89 c7             	mov    %rax,%rdi
     657:	e8 00 00 00 00       	callq  65c <_ZN6Parser16compileVariablesEP11QStringList+0x1cc>
    QRegExp erxVarName("\\w+");                              // имя
     65c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     663:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 66a <_ZN6Parser16compileVariablesEP11QStringList+0x1da>
     66a:	48 89 c7             	mov    %rax,%rdi
     66d:	e8 00 00 00 00       	callq  672 <_ZN6Parser16compileVariablesEP11QStringList+0x1e2>
     672:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
     679:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     680:	b9 00 00 00 00       	mov    $0x0,%ecx
     685:	ba 01 00 00 00       	mov    $0x1,%edx
     68a:	48 89 c7             	mov    %rax,%rdi
     68d:	e8 00 00 00 00       	callq  692 <_ZN6Parser16compileVariablesEP11QStringList+0x202>
     692:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     699:	48 89 c7             	mov    %rax,%rdi
     69c:	e8 00 00 00 00       	callq  6a1 <_ZN6Parser16compileVariablesEP11QStringList+0x211>

    QStringList types;
     6a1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     6a8:	48 89 c7             	mov    %rax,%rdi
     6ab:	e8 00 00 00 00       	callq  6b0 <_ZN6Parser16compileVariablesEP11QStringList+0x220>
    QStringList list;
     6b0:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     6b7:	48 89 c7             	mov    %rax,%rdi
     6ba:	e8 00 00 00 00       	callq  6bf <_ZN6Parser16compileVariablesEP11QStringList+0x22f>
    QStringList vars;
     6bf:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     6c6:	48 89 c7             	mov    %rax,%rdi
     6c9:	e8 00 00 00 00       	callq  6ce <_ZN6Parser16compileVariablesEP11QStringList+0x23e>

    int pos = 0;
     6ce:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%rbp)
     6d5:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     6d8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6df:	48 89 c7             	mov    %rax,%rdi
     6e2:	e8 00 00 00 00       	callq  6e7 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
    for(sit = code.begin(); sit != code.end(); ++sit){
     6e7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     6ee:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     6f5:	48 89 d6             	mov    %rdx,%rsi
     6f8:	48 89 c7             	mov    %rax,%rdi
     6fb:	e8 00 00 00 00       	callq  700 <_ZN6Parser16compileVariablesEP11QStringList+0x270>
     700:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
     707:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
     70e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     715:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     71c:	48 89 d6             	mov    %rdx,%rsi
     71f:	48 89 c7             	mov    %rax,%rdi
     722:	e8 00 00 00 00       	callq  727 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     727:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     72e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     735:	48 89 d6             	mov    %rdx,%rsi
     738:	48 89 c7             	mov    %rax,%rdi
     73b:	e8 00 00 00 00       	callq  740 <_ZN6Parser16compileVariablesEP11QStringList+0x2b0>
     740:	84 c0                	test   %al,%al
     742:	0f 84 9b 01 00 00    	je     8e3 <_ZN6Parser16compileVariablesEP11QStringList+0x453>
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
     748:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     74f:	48 89 c7             	mov    %rax,%rdi
     752:	e8 00 00 00 00       	callq  757 <_ZN6Parser16compileVariablesEP11QStringList+0x2c7>
     757:	48 89 c6             	mov    %rax,%rsi
     75a:	8b 95 a4 fd ff ff    	mov    -0x25c(%rbp),%edx
     760:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     767:	b9 00 00 00 00       	mov    $0x0,%ecx
     76c:	48 89 c7             	mov    %rax,%rdi
     76f:	e8 00 00 00 00       	callq  774 <_ZN6Parser16compileVariablesEP11QStringList+0x2e4>
     774:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%rbp)
     77a:	83 bd a4 fd ff ff ff 	cmpl   $0xffffffff,-0x25c(%rbp)
     781:	0f 95 c0             	setne  %al
     784:	84 c0                	test   %al,%al
     786:	0f 84 43 01 00 00    	je     8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
             types << erx.cap(1);
     78c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     793:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     79a:	ba 01 00 00 00       	mov    $0x1,%edx
     79f:	48 89 ce             	mov    %rcx,%rsi
     7a2:	48 89 c7             	mov    %rax,%rdi
     7a5:	e8 00 00 00 00       	callq  7aa <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     7aa:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     7b1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     7b8:	48 89 d6             	mov    %rdx,%rsi
     7bb:	48 89 c7             	mov    %rax,%rdi
     7be:	e8 00 00 00 00       	callq  7c3 <_ZN6Parser16compileVariablesEP11QStringList+0x333>
     7c3:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7ca:	48 89 c7             	mov    %rax,%rdi
     7cd:	e8 00 00 00 00       	callq  7d2 <_ZN6Parser16compileVariablesEP11QStringList+0x342>
             list << erx.cap(2);
     7d2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     7d9:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     7e0:	ba 02 00 00 00       	mov    $0x2,%edx
     7e5:	48 89 ce             	mov    %rcx,%rsi
     7e8:	48 89 c7             	mov    %rax,%rdi
     7eb:	e8 00 00 00 00       	callq  7f0 <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     7f0:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     7f7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     7fe:	48 89 d6             	mov    %rdx,%rsi
     801:	48 89 c7             	mov    %rax,%rdi
     804:	e8 00 00 00 00       	callq  809 <_ZN6Parser16compileVariablesEP11QStringList+0x379>
     809:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     810:	48 89 c7             	mov    %rax,%rdi
     813:	e8 00 00 00 00       	callq  818 <_ZN6Parser16compileVariablesEP11QStringList+0x388>
             pos += erx.matchedLength();
     818:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     81f:	48 89 c7             	mov    %rax,%rdi
     822:	e8 00 00 00 00       	callq  827 <_ZN6Parser16compileVariablesEP11QStringList+0x397>
     827:	01 85 a4 fd ff ff    	add    %eax,-0x25c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     82d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     834:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 83b <_ZN6Parser16compileVariablesEP11QStringList+0x3ab>
     83b:	48 89 c7             	mov    %rax,%rdi
     83e:	e8 00 00 00 00       	callq  843 <_ZN6Parser16compileVariablesEP11QStringList+0x3b3>
     843:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     84a:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     851:	ba 02 00 00 00       	mov    $0x2,%edx
     856:	48 89 ce             	mov    %rcx,%rsi
     859:	48 89 c7             	mov    %rax,%rdi
     85c:	e8 00 00 00 00       	callq  861 <_ZN6Parser16compileVariablesEP11QStringList+0x3d1>
     861:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     868:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
     86f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
     876:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     87c:	b9 00 00 00 00       	mov    $0x0,%ecx
     881:	48 89 c7             	mov    %rax,%rdi
     884:	e8 00 00 00 00       	callq  889 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     889:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     890:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     897:	48 89 d6             	mov    %rdx,%rsi
     89a:	48 89 c7             	mov    %rax,%rdi
     89d:	e8 00 00 00 00       	callq  8a2 <_ZN6Parser16compileVariablesEP11QStringList+0x412>
     8a2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     8a9:	48 89 c7             	mov    %rax,%rdi
     8ac:	e8 00 00 00 00       	callq  8b1 <_ZN6Parser16compileVariablesEP11QStringList+0x421>
     8b1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8b8:	48 89 c7             	mov    %rax,%rdi
     8bb:	e8 00 00 00 00       	callq  8c0 <_ZN6Parser16compileVariablesEP11QStringList+0x430>
     8c0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     8c7:	48 89 c7             	mov    %rax,%rdi
     8ca:	e8 00 00 00 00       	callq  8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
     8cf:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     8d6:	48 89 c7             	mov    %rax,%rdi
     8d9:	e8 00 00 00 00       	callq  8de <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
     8de:	e9 2b fe ff ff       	jmpq   70e <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     8e3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     8ea:	48 89 c7             	mov    %rax,%rdi
     8ed:	e8 00 00 00 00       	callq  8f2 <_ZN6Parser16compileVariablesEP11QStringList+0x462>
    QString name, type, value;
     8f2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     8f9:	48 89 c7             	mov    %rax,%rdi
     8fc:	e8 00 00 00 00       	callq  901 <_ZN6Parser16compileVariablesEP11QStringList+0x471>
     901:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     908:	48 89 c7             	mov    %rax,%rdi
     90b:	e8 00 00 00 00       	callq  910 <_ZN6Parser16compileVariablesEP11QStringList+0x480>
     910:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     917:	48 89 c7             	mov    %rax,%rdi
     91a:	e8 00 00 00 00       	callq  91f <_ZN6Parser16compileVariablesEP11QStringList+0x48f>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;
     91f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     923:	48 89 c7             	mov    %rax,%rdi
     926:	e8 00 00 00 00       	callq  92b <_ZN6Parser16compileVariablesEP11QStringList+0x49b>

    for(it=vars.begin(); it!=vars.end(); ++it){
     92b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     92f:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     936:	48 89 d6             	mov    %rdx,%rsi
     939:	48 89 c7             	mov    %rax,%rdi
     93c:	e8 00 00 00 00       	callq  941 <_ZN6Parser16compileVariablesEP11QStringList+0x4b1>
     941:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     945:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
     94c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     950:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     957:	48 89 d6             	mov    %rdx,%rsi
     95a:	48 89 c7             	mov    %rax,%rdi
     95d:	e8 00 00 00 00       	callq  962 <_ZN6Parser16compileVariablesEP11QStringList+0x4d2>
     962:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     966:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     96d:	48 89 d6             	mov    %rdx,%rsi
     970:	48 89 c7             	mov    %rax,%rdi
     973:	e8 00 00 00 00       	callq  978 <_ZN6Parser16compileVariablesEP11QStringList+0x4e8>
     978:	84 c0                	test   %al,%al
     97a:	0f 84 ed 01 00 00    	je     b6d <_ZN6Parser16compileVariablesEP11QStringList+0x6dd>
        QString all = *it;
     980:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     987:	48 89 c7             	mov    %rax,%rdi
     98a:	e8 00 00 00 00       	callq  98f <_ZN6Parser16compileVariablesEP11QStringList+0x4ff>
     98f:	48 89 c2             	mov    %rax,%rdx
     992:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     996:	48 89 d6             	mov    %rdx,%rsi
     999:	48 89 c7             	mov    %rax,%rdi
     99c:	e8 00 00 00 00       	callq  9a1 <_ZN6Parser16compileVariablesEP11QStringList+0x511>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     9a1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9a8:	48 89 c7             	mov    %rax,%rdi
     9ab:	e8 00 00 00 00       	callq  9b0 <_ZN6Parser16compileVariablesEP11QStringList+0x520>
     9b0:	48 89 c6             	mov    %rax,%rsi
     9b3:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     9ba:	b9 00 00 00 00       	mov    $0x0,%ecx
     9bf:	ba 00 00 00 00       	mov    $0x0,%edx
     9c4:	48 89 c7             	mov    %rax,%rdi
     9c7:	e8 00 00 00 00       	callq  9cc <_ZN6Parser16compileVariablesEP11QStringList+0x53c>
     9cc:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%rbp)

        int indexVarName = erxVarName.indexIn(*it);
     9d2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9d9:	48 89 c7             	mov    %rax,%rdi
     9dc:	e8 00 00 00 00       	callq  9e1 <_ZN6Parser16compileVariablesEP11QStringList+0x551>
     9e1:	48 89 c6             	mov    %rax,%rsi
     9e4:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     9eb:	b9 00 00 00 00       	mov    $0x0,%ecx
     9f0:	ba 00 00 00 00       	mov    $0x0,%edx
     9f5:	48 89 c7             	mov    %rax,%rdi
     9f8:	e8 00 00 00 00       	callq  9fd <_ZN6Parser16compileVariablesEP11QStringList+0x56d>
     9fd:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     a03:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     a0a:	48 89 c7             	mov    %rax,%rdi
     a0d:	e8 00 00 00 00       	callq  a12 <_ZN6Parser16compileVariablesEP11QStringList+0x582>
     a12:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%rbp)
        int countVarName = erxVarName.captureCount();
     a18:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     a1f:	48 89 c7             	mov    %rax,%rdi
     a22:	e8 00 00 00 00       	callq  a27 <_ZN6Parser16compileVariablesEP11QStringList+0x597>
     a27:	89 85 bc fd ff ff    	mov    %eax,-0x244(%rbp)

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     a2d:	83 bd b0 fd ff ff 00 	cmpl   $0x0,-0x250(%rbp)
     a34:	78 3f                	js     a75 <_ZN6Parser16compileVariablesEP11QStringList+0x5e5>
     a36:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a3a:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     a41:	ba 01 00 00 00       	mov    $0x1,%edx
     a46:	48 89 ce             	mov    %rcx,%rsi
     a49:	48 89 c7             	mov    %rax,%rdi
     a4c:	e8 00 00 00 00       	callq  a51 <_ZN6Parser16compileVariablesEP11QStringList+0x5c1>
     a51:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     a55:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a5c:	48 89 d6             	mov    %rdx,%rsi
     a5f:	48 89 c7             	mov    %rax,%rdi
     a62:	e8 00 00 00 00       	callq  a67 <_ZN6Parser16compileVariablesEP11QStringList+0x5d7>
     a67:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a6b:	48 89 c7             	mov    %rax,%rdi
     a6e:	e8 00 00 00 00       	callq  a73 <_ZN6Parser16compileVariablesEP11QStringList+0x5e3>
     a73:	eb 3d                	jmp    ab2 <_ZN6Parser16compileVariablesEP11QStringList+0x622>
        }else{name = erxVarName.cap(0);}
     a75:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a79:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
     a80:	ba 00 00 00 00       	mov    $0x0,%edx
     a85:	48 89 ce             	mov    %rcx,%rsi
     a88:	48 89 c7             	mov    %rax,%rdi
     a8b:	e8 00 00 00 00       	callq  a90 <_ZN6Parser16compileVariablesEP11QStringList+0x600>
     a90:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a94:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a9b:	48 89 d6             	mov    %rdx,%rsi
     a9e:	48 89 c7             	mov    %rax,%rdi
     aa1:	e8 00 00 00 00       	callq  aa6 <_ZN6Parser16compileVariablesEP11QStringList+0x616>
     aa6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     aaa:	48 89 c7             	mov    %rax,%rdi
     aad:	e8 00 00 00 00       	callq  ab2 <_ZN6Parser16compileVariablesEP11QStringList+0x622>

        index        = this->varIndexes.take(name);
     ab2:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     ab9:	48 8d 50 60          	lea    0x60(%rax),%rdx
     abd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     ac4:	48 89 c6             	mov    %rax,%rsi
     ac7:	48 89 d7             	mov    %rdx,%rdi
     aca:	e8 00 00 00 00       	callq  acf <_ZN6Parser16compileVariablesEP11QStringList+0x63f>
     acf:	0f b6 c0             	movzbl %al,%eax
     ad2:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)
        assignment   = this->varTypes.take(index);
     ad8:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     ade:	88 45 d0             	mov    %al,-0x30(%rbp)
     ae1:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     ae8:	48 8d 50 68          	lea    0x68(%rax),%rdx
     aec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     af0:	48 89 c6             	mov    %rax,%rsi
     af3:	48 89 d7             	mov    %rdx,%rdi
     af6:	e8 00 00 00 00       	callq  afb <_ZN6Parser16compileVariablesEP11QStringList+0x66b>
     afb:	88 85 a1 fd ff ff    	mov    %al,-0x25f(%rbp)
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     b01:	0f b6 8d a1 fd ff ff 	movzbl -0x25f(%rbp),%ecx
     b08:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     b0e:	0f b6 d0             	movzbl %al,%edx
     b11:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b15:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
     b19:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
     b20:	49 89 f8             	mov    %rdi,%r8
     b23:	48 89 c7             	mov    %rax,%rdi
     b26:	e8 00 00 00 00       	callq  b2b <_ZN6Parser16compileVariablesEP11QStringList+0x69b>
     b2b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     b2f:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     b36:	48 89 d6             	mov    %rdx,%rsi
     b39:	48 89 c7             	mov    %rax,%rdi
     b3c:	e8 00 00 00 00       	callq  b41 <_ZN6Parser16compileVariablesEP11QStringList+0x6b1>
     b41:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b45:	48 89 c7             	mov    %rax,%rdi
     b48:	e8 00 00 00 00       	callq  b4d <_ZN6Parser16compileVariablesEP11QStringList+0x6bd>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     b4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b51:	48 89 c7             	mov    %rax,%rdi
     b54:	e8 00 00 00 00       	callq  b59 <_ZN6Parser16compileVariablesEP11QStringList+0x6c9>
    QString name, type, value;
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
     b59:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     b60:	48 89 c7             	mov    %rax,%rdi
     b63:	e8 00 00 00 00       	callq  b68 <_ZN6Parser16compileVariablesEP11QStringList+0x6d8>
     b68:	e9 df fd ff ff       	jmpq   94c <_ZN6Parser16compileVariablesEP11QStringList+0x4bc>
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
     b6d:	66 c7 85 a2 fd ff ff 	movw   $0xff,-0x25e(%rbp)
     b74:	ff 00 
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     b76:	0f b7 85 a2 fd ff ff 	movzwl -0x25e(%rbp),%eax
     b7d:	0f b6 d0             	movzbl %al,%edx
     b80:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b84:	48 8d 8d c0 fd ff ff 	lea    -0x240(%rbp),%rcx
     b8b:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
     b92:	49 89 c9             	mov    %rcx,%r9
     b95:	41 89 d0             	mov    %edx,%r8d
     b98:	b9 11 00 00 00       	mov    $0x11,%ecx
     b9d:	ba ff 00 00 00       	mov    $0xff,%edx
     ba2:	48 89 c7             	mov    %rax,%rdi
     ba5:	e8 00 00 00 00       	callq  baa <_ZN6Parser16compileVariablesEP11QStringList+0x71a>
     baa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     bae:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     bb5:	48 89 d6             	mov    %rdx,%rsi
     bb8:	48 89 c7             	mov    %rax,%rdi
     bbb:	e8 00 00 00 00       	callq  bc0 <_ZN6Parser16compileVariablesEP11QStringList+0x730>
     bc0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bc4:	48 89 c7             	mov    %rax,%rdi
     bc7:	e8 00 00 00 00       	callq  bcc <_ZN6Parser16compileVariablesEP11QStringList+0x73c>

    return result;
     bcc:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     bcd:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     bd4:	48 89 c7             	mov    %rax,%rdi
     bd7:	e8 00 00 00 00       	callq  bdc <_ZN6Parser16compileVariablesEP11QStringList+0x74c>
     bdc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     be3:	48 89 c7             	mov    %rax,%rdi
     be6:	e8 00 00 00 00       	callq  beb <_ZN6Parser16compileVariablesEP11QStringList+0x75b>
     beb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     bf2:	48 89 c7             	mov    %rax,%rdi
     bf5:	e8 00 00 00 00       	callq  bfa <_ZN6Parser16compileVariablesEP11QStringList+0x76a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     bfa:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     c01:	48 89 c7             	mov    %rax,%rdi
     c04:	e8 00 00 00 00       	callq  c09 <_ZN6Parser16compileVariablesEP11QStringList+0x779>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c09:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     c10:	48 89 c7             	mov    %rax,%rdi
     c13:	e8 00 00 00 00       	callq  c18 <_ZN6Parser16compileVariablesEP11QStringList+0x788>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c18:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     c1f:	48 89 c7             	mov    %rax,%rdi
     c22:	e8 00 00 00 00       	callq  c27 <_ZN6Parser16compileVariablesEP11QStringList+0x797>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     c27:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     c2e:	48 89 c7             	mov    %rax,%rdi
     c31:	e8 00 00 00 00       	callq  c36 <_ZN6Parser16compileVariablesEP11QStringList+0x7a6>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     c36:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     c3d:	48 89 c7             	mov    %rax,%rdi
     c40:	e8 00 00 00 00       	callq  c45 <_ZN6Parser16compileVariablesEP11QStringList+0x7b5>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     c45:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     c4c:	48 89 c7             	mov    %rax,%rdi
     c4f:	e8 00 00 00 00       	callq  c54 <_ZN6Parser16compileVariablesEP11QStringList+0x7c4>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     c54:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c5b:	48 89 c7             	mov    %rax,%rdi
     c5e:	e8 00 00 00 00       	callq  c63 <_ZN6Parser16compileVariablesEP11QStringList+0x7d3>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     c63:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     c6a:	48 89 c7             	mov    %rax,%rdi
     c6d:	e8 00 00 00 00       	callq  c72 <_ZN6Parser16compileVariablesEP11QStringList+0x7e2>

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     c72:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     c79:	48 89 c7             	mov    %rax,%rdi
     c7c:	e8 00 00 00 00       	callq  c81 <_ZN6Parser16compileVariablesEP11QStringList+0x7f1>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     c81:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     c88:	48 89 c7             	mov    %rax,%rdi
     c8b:	e8 00 00 00 00       	callq  c90 <_ZN6Parser16compileVariablesEP11QStringList+0x800>
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
     c90:	e9 eb 02 00 00       	jmpq   f80 <_ZN6Parser16compileVariablesEP11QStringList+0xaf0>
     c95:	48 89 c3             	mov    %rax,%rbx
     c98:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     c9f:	48 89 c7             	mov    %rax,%rdi
     ca2:	e8 00 00 00 00       	callq  ca7 <_ZN6Parser16compileVariablesEP11QStringList+0x817>
     ca7:	eb 17                	jmp    cc0 <_ZN6Parser16compileVariablesEP11QStringList+0x830>
     ca9:	48 89 c3             	mov    %rax,%rbx
     cac:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     cb3:	48 89 c7             	mov    %rax,%rdi
     cb6:	e8 00 00 00 00       	callq  cbb <_ZN6Parser16compileVariablesEP11QStringList+0x82b>
     cbb:	eb 03                	jmp    cc0 <_ZN6Parser16compileVariablesEP11QStringList+0x830>
     cbd:	48 89 c3             	mov    %rax,%rbx
     cc0:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     cc7:	48 89 c7             	mov    %rax,%rdi
     cca:	e8 00 00 00 00       	callq  ccf <_ZN6Parser16compileVariablesEP11QStringList+0x83f>
     ccf:	e9 56 02 00 00       	jmpq   f2a <_ZN6Parser16compileVariablesEP11QStringList+0xa9a>
     cd4:	48 89 c3             	mov    %rax,%rbx
     cd7:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     cde:	48 89 c7             	mov    %rax,%rdi
     ce1:	e8 00 00 00 00       	callq  ce6 <_ZN6Parser16compileVariablesEP11QStringList+0x856>
     ce6:	e9 3f 02 00 00       	jmpq   f2a <_ZN6Parser16compileVariablesEP11QStringList+0xa9a>
     ceb:	48 89 c3             	mov    %rax,%rbx
     cee:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     cf5:	48 89 c7             	mov    %rax,%rdi
     cf8:	e8 00 00 00 00       	callq  cfd <_ZN6Parser16compileVariablesEP11QStringList+0x86d>
     cfd:	eb 17                	jmp    d16 <_ZN6Parser16compileVariablesEP11QStringList+0x886>
     cff:	48 89 c3             	mov    %rax,%rbx
     d02:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d09:	48 89 c7             	mov    %rax,%rdi
     d0c:	e8 00 00 00 00       	callq  d11 <_ZN6Parser16compileVariablesEP11QStringList+0x881>
     d11:	eb 03                	jmp    d16 <_ZN6Parser16compileVariablesEP11QStringList+0x886>
     d13:	48 89 c3             	mov    %rax,%rbx
     d16:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     d1d:	48 89 c7             	mov    %rax,%rdi
     d20:	e8 00 00 00 00       	callq  d25 <_ZN6Parser16compileVariablesEP11QStringList+0x895>
     d25:	e9 ec 01 00 00       	jmpq   f16 <_ZN6Parser16compileVariablesEP11QStringList+0xa86>
     d2a:	48 89 c3             	mov    %rax,%rbx
     d2d:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d34:	48 89 c7             	mov    %rax,%rdi
     d37:	e8 00 00 00 00       	callq  d3c <_ZN6Parser16compileVariablesEP11QStringList+0x8ac>
     d3c:	e9 d5 01 00 00       	jmpq   f16 <_ZN6Parser16compileVariablesEP11QStringList+0xa86>
     d41:	48 89 c3             	mov    %rax,%rbx
     d44:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     d4b:	48 89 c7             	mov    %rax,%rdi
     d4e:	e8 00 00 00 00       	callq  d53 <_ZN6Parser16compileVariablesEP11QStringList+0x8c3>
     d53:	e9 aa 01 00 00       	jmpq   f02 <_ZN6Parser16compileVariablesEP11QStringList+0xa72>
     d58:	48 89 c3             	mov    %rax,%rbx
     d5b:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     d62:	48 89 c7             	mov    %rax,%rdi
     d65:	e8 00 00 00 00       	callq  d6a <_ZN6Parser16compileVariablesEP11QStringList+0x8da>
     d6a:	e9 93 01 00 00       	jmpq   f02 <_ZN6Parser16compileVariablesEP11QStringList+0xa72>
     d6f:	48 89 c3             	mov    %rax,%rbx
     d72:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     d79:	48 89 c7             	mov    %rax,%rdi
     d7c:	e8 00 00 00 00       	callq  d81 <_ZN6Parser16compileVariablesEP11QStringList+0x8f1>
     d81:	e9 68 01 00 00       	jmpq   eee <_ZN6Parser16compileVariablesEP11QStringList+0xa5e>
     d86:	48 89 c3             	mov    %rax,%rbx
     d89:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     d90:	48 89 c7             	mov    %rax,%rdi
     d93:	e8 00 00 00 00       	callq  d98 <_ZN6Parser16compileVariablesEP11QStringList+0x908>
     d98:	e9 51 01 00 00       	jmpq   eee <_ZN6Parser16compileVariablesEP11QStringList+0xa5e>
     d9d:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     da0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     da7:	48 89 c7             	mov    %rax,%rdi
     daa:	e8 00 00 00 00       	callq  daf <_ZN6Parser16compileVariablesEP11QStringList+0x91f>
     daf:	e9 ea 00 00 00       	jmpq   e9e <_ZN6Parser16compileVariablesEP11QStringList+0xa0e>
     db4:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     db7:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     dbe:	48 89 c7             	mov    %rax,%rdi
     dc1:	e8 00 00 00 00       	callq  dc6 <_ZN6Parser16compileVariablesEP11QStringList+0x936>
     dc6:	e9 d3 00 00 00       	jmpq   e9e <_ZN6Parser16compileVariablesEP11QStringList+0xa0e>
     dcb:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     dce:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     dd5:	48 89 c7             	mov    %rax,%rdi
     dd8:	e8 00 00 00 00       	callq  ddd <_ZN6Parser16compileVariablesEP11QStringList+0x94d>
     ddd:	eb 03                	jmp    de2 <_ZN6Parser16compileVariablesEP11QStringList+0x952>
     ddf:	48 89 c3             	mov    %rax,%rbx
     de2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     de9:	48 89 c7             	mov    %rax,%rdi
     dec:	e8 00 00 00 00       	callq  df1 <_ZN6Parser16compileVariablesEP11QStringList+0x961>
     df1:	eb 03                	jmp    df6 <_ZN6Parser16compileVariablesEP11QStringList+0x966>
     df3:	48 89 c3             	mov    %rax,%rbx
     df6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     dfd:	48 89 c7             	mov    %rax,%rdi
     e00:	e8 00 00 00 00       	callq  e05 <_ZN6Parser16compileVariablesEP11QStringList+0x975>
     e05:	e9 94 00 00 00       	jmpq   e9e <_ZN6Parser16compileVariablesEP11QStringList+0xa0e>
     e0a:	48 89 c3             	mov    %rax,%rbx

        int indexVarName = erxVarName.indexIn(*it);
        int countRgPort  = erx_rgPort.captureCount();
        int countVarName = erxVarName.captureCount();

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     e0d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     e11:	48 89 c7             	mov    %rax,%rdi
     e14:	e8 00 00 00 00       	callq  e19 <_ZN6Parser16compileVariablesEP11QStringList+0x989>
     e19:	eb 25                	jmp    e40 <_ZN6Parser16compileVariablesEP11QStringList+0x9b0>
     e1b:	48 89 c3             	mov    %rax,%rbx
        }else{name = erxVarName.cap(0);}
     e1e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e22:	48 89 c7             	mov    %rax,%rdi
     e25:	e8 00 00 00 00       	callq  e2a <_ZN6Parser16compileVariablesEP11QStringList+0x99a>
     e2a:	eb 14                	jmp    e40 <_ZN6Parser16compileVariablesEP11QStringList+0x9b0>
     e2c:	48 89 c3             	mov    %rax,%rbx

        index        = this->varIndexes.take(name);
        assignment   = this->varTypes.take(index);
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     e2f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e33:	48 89 c7             	mov    %rax,%rdi
     e36:	e8 00 00 00 00       	callq  e3b <_ZN6Parser16compileVariablesEP11QStringList+0x9ab>
     e3b:	eb 03                	jmp    e40 <_ZN6Parser16compileVariablesEP11QStringList+0x9b0>
     e3d:	48 89 c3             	mov    %rax,%rbx
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     e40:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e44:	48 89 c7             	mov    %rax,%rdi
     e47:	e8 00 00 00 00       	callq  e4c <_ZN6Parser16compileVariablesEP11QStringList+0x9bc>
     e4c:	eb 14                	jmp    e62 <_ZN6Parser16compileVariablesEP11QStringList+0x9d2>
     e4e:	48 89 c3             	mov    %rax,%rbx

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     e51:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e55:	48 89 c7             	mov    %rax,%rdi
     e58:	e8 00 00 00 00       	callq  e5d <_ZN6Parser16compileVariablesEP11QStringList+0x9cd>
     e5d:	eb 03                	jmp    e62 <_ZN6Parser16compileVariablesEP11QStringList+0x9d2>
     e5f:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     e62:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     e69:	48 89 c7             	mov    %rax,%rdi
     e6c:	e8 00 00 00 00       	callq  e71 <_ZN6Parser16compileVariablesEP11QStringList+0x9e1>
     e71:	eb 03                	jmp    e76 <_ZN6Parser16compileVariablesEP11QStringList+0x9e6>
     e73:	48 89 c3             	mov    %rax,%rbx
     e76:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     e7d:	48 89 c7             	mov    %rax,%rdi
     e80:	e8 00 00 00 00       	callq  e85 <_ZN6Parser16compileVariablesEP11QStringList+0x9f5>
     e85:	eb 03                	jmp    e8a <_ZN6Parser16compileVariablesEP11QStringList+0x9fa>
     e87:	48 89 c3             	mov    %rax,%rbx
     e8a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     e91:	48 89 c7             	mov    %rax,%rdi
     e94:	e8 00 00 00 00       	callq  e99 <_ZN6Parser16compileVariablesEP11QStringList+0xa09>
     e99:	eb 03                	jmp    e9e <_ZN6Parser16compileVariablesEP11QStringList+0xa0e>
     e9b:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     e9e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     ea5:	48 89 c7             	mov    %rax,%rdi
     ea8:	e8 00 00 00 00       	callq  ead <_ZN6Parser16compileVariablesEP11QStringList+0xa1d>
     ead:	eb 03                	jmp    eb2 <_ZN6Parser16compileVariablesEP11QStringList+0xa22>
     eaf:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     eb2:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     eb9:	48 89 c7             	mov    %rax,%rdi
     ebc:	e8 00 00 00 00       	callq  ec1 <_ZN6Parser16compileVariablesEP11QStringList+0xa31>
     ec1:	eb 03                	jmp    ec6 <_ZN6Parser16compileVariablesEP11QStringList+0xa36>
     ec3:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     ec6:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     ecd:	48 89 c7             	mov    %rax,%rdi
     ed0:	e8 00 00 00 00       	callq  ed5 <_ZN6Parser16compileVariablesEP11QStringList+0xa45>
     ed5:	eb 03                	jmp    eda <_ZN6Parser16compileVariablesEP11QStringList+0xa4a>
     ed7:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     eda:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     ee1:	48 89 c7             	mov    %rax,%rdi
     ee4:	e8 00 00 00 00       	callq  ee9 <_ZN6Parser16compileVariablesEP11QStringList+0xa59>
     ee9:	eb 03                	jmp    eee <_ZN6Parser16compileVariablesEP11QStringList+0xa5e>
     eeb:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     eee:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     ef5:	48 89 c7             	mov    %rax,%rdi
     ef8:	e8 00 00 00 00       	callq  efd <_ZN6Parser16compileVariablesEP11QStringList+0xa6d>
     efd:	eb 03                	jmp    f02 <_ZN6Parser16compileVariablesEP11QStringList+0xa72>
     eff:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     f02:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     f09:	48 89 c7             	mov    %rax,%rdi
     f0c:	e8 00 00 00 00       	callq  f11 <_ZN6Parser16compileVariablesEP11QStringList+0xa81>
     f11:	eb 03                	jmp    f16 <_ZN6Parser16compileVariablesEP11QStringList+0xa86>
     f13:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     f16:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     f1d:	48 89 c7             	mov    %rax,%rdi
     f20:	e8 00 00 00 00       	callq  f25 <_ZN6Parser16compileVariablesEP11QStringList+0xa95>
     f25:	eb 03                	jmp    f2a <_ZN6Parser16compileVariablesEP11QStringList+0xa9a>
     f27:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     f2a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     f31:	48 89 c7             	mov    %rax,%rdi
     f34:	e8 00 00 00 00       	callq  f39 <_ZN6Parser16compileVariablesEP11QStringList+0xaa9>
     f39:	eb 03                	jmp    f3e <_ZN6Parser16compileVariablesEP11QStringList+0xaae>
     f3b:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     f3e:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     f45:	48 89 c7             	mov    %rax,%rdi
     f48:	e8 00 00 00 00       	callq  f4d <_ZN6Parser16compileVariablesEP11QStringList+0xabd>
     f4d:	eb 03                	jmp    f52 <_ZN6Parser16compileVariablesEP11QStringList+0xac2>
     f4f:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     f52:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     f59:	48 89 c7             	mov    %rax,%rdi
     f5c:	e8 00 00 00 00       	callq  f61 <_ZN6Parser16compileVariablesEP11QStringList+0xad1>
     f61:	eb 03                	jmp    f66 <_ZN6Parser16compileVariablesEP11QStringList+0xad6>
     f63:	48 89 c3             	mov    %rax,%rbx
     f66:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f6d:	48 89 c7             	mov    %rax,%rdi
     f70:	e8 00 00 00 00       	callq  f75 <_ZN6Parser16compileVariablesEP11QStringList+0xae5>
     f75:	48 89 d8             	mov    %rbx,%rax
     f78:	48 89 c7             	mov    %rax,%rdi
     f7b:	e8 00 00 00 00       	callq  f80 <_ZN6Parser16compileVariablesEP11QStringList+0xaf0>

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
}
     f80:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f87:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     f8b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     f92:	00 00 
     f94:	74 05                	je     f9b <_ZN6Parser16compileVariablesEP11QStringList+0xb0b>
     f96:	e8 00 00 00 00       	callq  f9b <_ZN6Parser16compileVariablesEP11QStringList+0xb0b>
     f9b:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
     fa2:	5b                   	pop    %rbx
     fa3:	5d                   	pop    %rbp
     fa4:	c3                   	retq   
     fa5:	90                   	nop

0000000000000fa6 <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     fa6:	55                   	push   %rbp
     fa7:	48 89 e5             	mov    %rsp,%rbp
     faa:	53                   	push   %rbx
     fab:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     fb2:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     fb9:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     fc0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fc7:	00 00 
     fc9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     fcd:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     fcf:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     fd6:	00 00 00 
    int index   = 0;
     fd9:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     fe0:	00 00 00 

    VarTypes VT;
     fe3:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     fea:	48 89 c7             	mov    %rax,%rdi
     fed:	e8 00 00 00 00       	callq  ff2 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     ff2:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     ff9:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1000:	48 89 d6             	mov    %rdx,%rsi
    1003:	48 89 c7             	mov    %rax,%rdi
    1006:	e8 00 00 00 00       	callq  100b <_ZN6Parser14checkVariablesEP7QString+0x65>
    100b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1012:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    1019:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1020 <_ZN6Parser14checkVariablesEP7QString+0x7a>
    1020:	48 89 ce             	mov    %rcx,%rsi
    1023:	48 89 c7             	mov    %rax,%rdi
    1026:	e8 00 00 00 00       	callq  102b <_ZN6Parser14checkVariablesEP7QString+0x85>
    102b:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    1032:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1039:	b9 00 00 00 00       	mov    $0x0,%ecx
    103e:	ba 01 00 00 00       	mov    $0x1,%edx
    1043:	48 89 c7             	mov    %rax,%rdi
    1046:	e8 00 00 00 00       	callq  104b <_ZN6Parser14checkVariablesEP7QString+0xa5>
    104b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1052:	48 89 c7             	mov    %rax,%rdi
    1055:	e8 00 00 00 00       	callq  105a <_ZN6Parser14checkVariablesEP7QString+0xb4>
    105a:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1061:	48 89 c7             	mov    %rax,%rdi
    1064:	e8 00 00 00 00       	callq  1069 <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1069:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1070:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1077:	48 89 d6             	mov    %rdx,%rsi
    107a:	48 89 c7             	mov    %rax,%rdi
    107d:	e8 00 00 00 00       	callq  1082 <_ZN6Parser14checkVariablesEP7QString+0xdc>
    1082:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    1089:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    1090:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1097 <_ZN6Parser14checkVariablesEP7QString+0xf1>
    1097:	48 89 ce             	mov    %rcx,%rsi
    109a:	48 89 c7             	mov    %rax,%rdi
    109d:	e8 00 00 00 00       	callq  10a2 <_ZN6Parser14checkVariablesEP7QString+0xfc>
    10a2:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    10a9:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    10b0:	b9 00 00 00 00       	mov    $0x0,%ecx
    10b5:	ba 01 00 00 00       	mov    $0x1,%edx
    10ba:	48 89 c7             	mov    %rax,%rdi
    10bd:	e8 00 00 00 00       	callq  10c2 <_ZN6Parser14checkVariablesEP7QString+0x11c>
    10c2:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    10c9:	48 89 c7             	mov    %rax,%rdi
    10cc:	e8 00 00 00 00       	callq  10d1 <_ZN6Parser14checkVariablesEP7QString+0x12b>
    10d1:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    10d8:	48 89 c7             	mov    %rax,%rdi
    10db:	e8 00 00 00 00       	callq  10e0 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    10e0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    10e7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10ee <_ZN6Parser14checkVariablesEP7QString+0x148>
    10ee:	48 89 c7             	mov    %rax,%rdi
    10f1:	e8 00 00 00 00       	callq  10f6 <_ZN6Parser14checkVariablesEP7QString+0x150>
    10f6:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    10fd:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1104:	b9 00 00 00 00       	mov    $0x0,%ecx
    1109:	ba 01 00 00 00       	mov    $0x1,%edx
    110e:	48 89 c7             	mov    %rax,%rdi
    1111:	e8 00 00 00 00       	callq  1116 <_ZN6Parser14checkVariablesEP7QString+0x170>
    1116:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    111d:	48 89 c7             	mov    %rax,%rdi
    1120:	e8 00 00 00 00       	callq  1125 <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    1125:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    112c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1133 <_ZN6Parser14checkVariablesEP7QString+0x18d>
    1133:	48 89 c7             	mov    %rax,%rdi
    1136:	e8 00 00 00 00       	callq  113b <_ZN6Parser14checkVariablesEP7QString+0x195>
    113b:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    1142:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1149:	b9 00 00 00 00       	mov    $0x0,%ecx
    114e:	ba 01 00 00 00       	mov    $0x1,%edx
    1153:	48 89 c7             	mov    %rax,%rdi
    1156:	e8 00 00 00 00       	callq  115b <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    115b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1162:	48 89 c7             	mov    %rax,%rdi
    1165:	e8 00 00 00 00       	callq  116a <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    116a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1171:	48 89 c7             	mov    %rax,%rdi
    1174:	e8 00 00 00 00       	callq  1179 <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    1179:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1180:	48 89 c7             	mov    %rax,%rdi
    1183:	e8 00 00 00 00       	callq  1188 <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    1188:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    118f:	48 89 c7             	mov    %rax,%rdi
    1192:	e8 00 00 00 00       	callq  1197 <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    1197:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    119e:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    11a1:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    11a7:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    11ae:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    11b5:	b9 00 00 00 00       	mov    $0x0,%ecx
    11ba:	48 89 c7             	mov    %rax,%rdi
    11bd:	e8 00 00 00 00       	callq  11c2 <_ZN6Parser14checkVariablesEP7QString+0x21c>
    11c2:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    11c8:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    11cf:	0f 95 c0             	setne  %al
    11d2:	84 c0                	test   %al,%al
    11d4:	0f 84 68 01 00 00    	je     1342 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    11da:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    11e1:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    11e8:	ba 01 00 00 00       	mov    $0x1,%edx
    11ed:	48 89 ce             	mov    %rcx,%rsi
    11f0:	48 89 c7             	mov    %rax,%rdi
    11f3:	e8 00 00 00 00       	callq  11f8 <_ZN6Parser14checkVariablesEP7QString+0x252>
    11f8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    11ff:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1206:	48 89 d6             	mov    %rdx,%rsi
    1209:	48 89 c7             	mov    %rax,%rdi
    120c:	e8 00 00 00 00       	callq  1211 <_ZN6Parser14checkVariablesEP7QString+0x26b>
    1211:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1218:	48 89 c7             	mov    %rax,%rdi
    121b:	e8 00 00 00 00       	callq  1220 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    1220:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1227:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    122e:	ba 02 00 00 00       	mov    $0x2,%edx
    1233:	48 89 ce             	mov    %rcx,%rsi
    1236:	48 89 c7             	mov    %rax,%rdi
    1239:	e8 00 00 00 00       	callq  123e <_ZN6Parser14checkVariablesEP7QString+0x298>
    123e:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    1245:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    124c:	48 89 d6             	mov    %rdx,%rsi
    124f:	48 89 c7             	mov    %rax,%rdi
    1252:	e8 00 00 00 00       	callq  1257 <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    1257:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    125e:	48 89 c7             	mov    %rax,%rdi
    1261:	e8 00 00 00 00       	callq  1266 <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    1266:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    126d:	48 89 c7             	mov    %rax,%rdi
    1270:	e8 00 00 00 00       	callq  1275 <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    1275:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    127b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1282:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1289 <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    1289:	48 89 c7             	mov    %rax,%rdi
    128c:	e8 00 00 00 00       	callq  1291 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    1291:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1298:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    129f:	ba 02 00 00 00       	mov    $0x2,%edx
    12a4:	48 89 ce             	mov    %rcx,%rsi
    12a7:	48 89 c7             	mov    %rax,%rdi
    12aa:	e8 00 00 00 00       	callq  12af <_ZN6Parser14checkVariablesEP7QString+0x309>
    12af:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12b6:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    12bd:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    12c4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    12ca:	b9 00 00 00 00       	mov    $0x0,%ecx
    12cf:	48 89 c7             	mov    %rax,%rdi
    12d2:	e8 00 00 00 00       	callq  12d7 <_ZN6Parser14checkVariablesEP7QString+0x331>
    12d7:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    12de:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    12e5:	48 89 d6             	mov    %rdx,%rsi
    12e8:	48 89 c7             	mov    %rax,%rdi
    12eb:	e8 00 00 00 00       	callq  12f0 <_ZN6Parser14checkVariablesEP7QString+0x34a>
    12f0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12f7:	48 89 c7             	mov    %rax,%rdi
    12fa:	e8 00 00 00 00       	callq  12ff <_ZN6Parser14checkVariablesEP7QString+0x359>
    12ff:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1306:	48 89 c7             	mov    %rax,%rdi
    1309:	e8 00 00 00 00       	callq  130e <_ZN6Parser14checkVariablesEP7QString+0x368>
    130e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1315:	48 89 c7             	mov    %rax,%rdi
    1318:	e8 00 00 00 00       	callq  131d <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    131d:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1324:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    132b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1332:	48 89 c6             	mov    %rax,%rsi
    1335:	48 89 d7             	mov    %rdx,%rdi
    1338:	e8 00 00 00 00       	callq  133d <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    133d:	e9 5f fe ff ff       	jmpq   11a1 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    1342:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1349:	48 05 c0 00 00 00    	add    $0xc0,%rax
    134f:	48 89 c7             	mov    %rax,%rdi
    1352:	e8 00 00 00 00       	callq  1357 <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    1357:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    135e:	48 89 c7             	mov    %rax,%rdi
    1361:	e8 00 00 00 00       	callq  1366 <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    1366:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    136d:	48 89 c7             	mov    %rax,%rdi
    1370:	e8 00 00 00 00       	callq  1375 <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    1375:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    137c:	48 89 c7             	mov    %rax,%rdi
    137f:	e8 00 00 00 00       	callq  1384 <_ZN6Parser14checkVariablesEP7QString+0x3de>
    1384:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    138b:	48 89 c7             	mov    %rax,%rdi
    138e:	e8 00 00 00 00       	callq  1393 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1393:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    139a:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    13a1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13a8:	48 89 d6             	mov    %rdx,%rsi
    13ab:	48 89 c7             	mov    %rax,%rdi
    13ae:	e8 00 00 00 00       	callq  13b3 <_ZN6Parser14checkVariablesEP7QString+0x40d>
    13b3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    13ba:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    13c1:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13c8:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    13cf:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    13d6:	48 89 d6             	mov    %rdx,%rsi
    13d9:	48 89 c7             	mov    %rax,%rdi
    13dc:	e8 00 00 00 00       	callq  13e1 <_ZN6Parser14checkVariablesEP7QString+0x43b>
    13e1:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    13e8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    13ef:	48 89 d6             	mov    %rdx,%rsi
    13f2:	48 89 c7             	mov    %rax,%rdi
    13f5:	e8 00 00 00 00       	callq  13fa <_ZN6Parser14checkVariablesEP7QString+0x454>
    13fa:	84 c0                	test   %al,%al
    13fc:	0f 84 f2 03 00 00    	je     17f4 <_ZN6Parser14checkVariablesEP7QString+0x84e>
        QString all = *it;
    1402:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1409:	48 89 c7             	mov    %rax,%rdi
    140c:	e8 00 00 00 00       	callq  1411 <_ZN6Parser14checkVariablesEP7QString+0x46b>
    1411:	48 89 c2             	mov    %rax,%rdx
    1414:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    141b:	48 89 d6             	mov    %rdx,%rsi
    141e:	48 89 c7             	mov    %rax,%rdi
    1421:	e8 00 00 00 00       	callq  1426 <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    1426:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    142d:	48 89 c7             	mov    %rax,%rdi
    1430:	e8 00 00 00 00       	callq  1435 <_ZN6Parser14checkVariablesEP7QString+0x48f>
    1435:	48 89 c6             	mov    %rax,%rsi
    1438:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    143f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1444:	ba 00 00 00 00       	mov    $0x0,%edx
    1449:	48 89 c7             	mov    %rax,%rdi
    144c:	e8 00 00 00 00       	callq  1451 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    1451:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    1457:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    145e:	48 89 c7             	mov    %rax,%rdi
    1461:	e8 00 00 00 00       	callq  1466 <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    1466:	48 89 c6             	mov    %rax,%rsi
    1469:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1470:	b9 00 00 00 00       	mov    $0x0,%ecx
    1475:	ba 00 00 00 00       	mov    $0x0,%edx
    147a:	48 89 c7             	mov    %rax,%rdi
    147d:	e8 00 00 00 00       	callq  1482 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    1482:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    1488:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    148f:	48 89 c7             	mov    %rax,%rdi
    1492:	e8 00 00 00 00       	callq  1497 <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    1497:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    149d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14a4:	48 89 c7             	mov    %rax,%rdi
    14a7:	e8 00 00 00 00       	callq  14ac <_ZN6Parser14checkVariablesEP7QString+0x506>
    14ac:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    14b2:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    14b9:	00 00 00 

        if(ZZ>=0)
    14bc:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    14c3:	0f 88 07 02 00 00    	js     16d0 <_ZN6Parser14checkVariablesEP7QString+0x72a>
        {
            name  = erx_rgPort.cap(1);
    14c9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    14d0:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    14d7:	ba 01 00 00 00       	mov    $0x1,%edx
    14dc:	48 89 ce             	mov    %rcx,%rsi
    14df:	48 89 c7             	mov    %rax,%rdi
    14e2:	e8 00 00 00 00       	callq  14e7 <_ZN6Parser14checkVariablesEP7QString+0x541>
    14e7:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    14ee:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14f5:	48 89 d6             	mov    %rdx,%rsi
    14f8:	48 89 c7             	mov    %rax,%rdi
    14fb:	e8 00 00 00 00       	callq  1500 <_ZN6Parser14checkVariablesEP7QString+0x55a>
    1500:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1507:	48 89 c7             	mov    %rax,%rdi
    150a:	e8 00 00 00 00       	callq  150f <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    150f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1513:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    151a:	ba 02 00 00 00       	mov    $0x2,%edx
    151f:	48 89 ce             	mov    %rcx,%rsi
    1522:	48 89 c7             	mov    %rax,%rdi
    1525:	e8 00 00 00 00       	callq  152a <_ZN6Parser14checkVariablesEP7QString+0x584>
    152a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    152e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1535:	48 89 d6             	mov    %rdx,%rsi
    1538:	48 89 c7             	mov    %rax,%rdi
    153b:	e8 00 00 00 00       	callq  1540 <_ZN6Parser14checkVariablesEP7QString+0x59a>
    1540:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1544:	48 89 c7             	mov    %rax,%rdi
    1547:	e8 00 00 00 00       	callq  154c <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    154c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1550:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1557:	ba 03 00 00 00       	mov    $0x3,%edx
    155c:	48 89 ce             	mov    %rcx,%rsi
    155f:	48 89 c7             	mov    %rax,%rdi
    1562:	e8 00 00 00 00       	callq  1567 <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    1567:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    156b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1572:	48 89 d6             	mov    %rdx,%rsi
    1575:	48 89 c7             	mov    %rax,%rdi
    1578:	e8 00 00 00 00       	callq  157d <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    157d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1581:	48 89 c7             	mov    %rax,%rdi
    1584:	e8 00 00 00 00       	callq  1589 <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    1589:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    158d:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    1594:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 159b <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    159b:	48 89 ce             	mov    %rcx,%rsi
    159e:	48 89 c7             	mov    %rax,%rdi
    15a1:	e8 00 00 00 00       	callq  15a6 <_ZN6Parser14checkVariablesEP7QString+0x600>
    15a6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    15aa:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    15b1:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    15b5:	48 89 ce             	mov    %rcx,%rsi
    15b8:	48 89 c7             	mov    %rax,%rdi
    15bb:	e8 00 00 00 00       	callq  15c0 <_ZN6Parser14checkVariablesEP7QString+0x61a>
    15c0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    15c4:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    15c8:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15cf <_ZN6Parser14checkVariablesEP7QString+0x629>
    15cf:	48 89 ce             	mov    %rcx,%rsi
    15d2:	48 89 c7             	mov    %rax,%rdi
    15d5:	e8 00 00 00 00       	callq  15da <_ZN6Parser14checkVariablesEP7QString+0x634>
    15da:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    15e1:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx
    15e8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    15ec:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15f3:	48 89 c6             	mov    %rax,%rsi
    15f6:	48 89 cf             	mov    %rcx,%rdi
    15f9:	e8 00 00 00 00       	callq  15fe <_ZN6Parser14checkVariablesEP7QString+0x658>
    15fe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1602:	48 89 c7             	mov    %rax,%rdi
    1605:	e8 00 00 00 00       	callq  160a <_ZN6Parser14checkVariablesEP7QString+0x664>
    160a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    160e:	48 89 c7             	mov    %rax,%rdi
    1611:	e8 00 00 00 00       	callq  1616 <_ZN6Parser14checkVariablesEP7QString+0x670>
    1616:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    161a:	48 89 c7             	mov    %rax,%rdi
    161d:	e8 00 00 00 00       	callq  1622 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    1622:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1629:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1630 <_ZN6Parser14checkVariablesEP7QString+0x68a>
    1630:	48 89 c7             	mov    %rax,%rdi
    1633:	e8 00 00 00 00       	callq  1638 <_ZN6Parser14checkVariablesEP7QString+0x692>
    1638:	84 c0                	test   %al,%al
    163a:	74 0a                	je     1646 <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    163c:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    1643:	00 00 00 
            if(type=="port")    iType = 80;
    1646:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    164d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1654 <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    1654:	48 89 c7             	mov    %rax,%rdi
    1657:	e8 00 00 00 00       	callq  165c <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    165c:	84 c0                	test   %al,%al
    165e:	74 0a                	je     166a <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    1660:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    1667:	00 00 00 

            index++;
    166a:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    1671:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1677:	88 45 e0             	mov    %al,-0x20(%rbp)
    167a:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1681:	48 8d 48 60          	lea    0x60(%rax),%rcx
    1685:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1689:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1690:	48 89 c6             	mov    %rax,%rsi
    1693:	48 89 cf             	mov    %rcx,%rdi
    1696:	e8 00 00 00 00       	callq  169b <_ZN6Parser14checkVariablesEP7QString+0x6f5>
            this->varTypes.insert(index, iType);
    169b:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    16a1:	88 45 e0             	mov    %al,-0x20(%rbp)
    16a4:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    16aa:	88 45 d0             	mov    %al,-0x30(%rbp)
    16ad:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16b4:	48 8d 48 68          	lea    0x68(%rax),%rcx
    16b8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16c0:	48 89 c6             	mov    %rax,%rsi
    16c3:	48 89 cf             	mov    %rcx,%rdi
    16c6:	e8 00 00 00 00       	callq  16cb <_ZN6Parser14checkVariablesEP7QString+0x725>
    16cb:	e9 e1 00 00 00       	jmpq   17b1 <_ZN6Parser14checkVariablesEP7QString+0x80b>

        }else
            {
                index++;
    16d0:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    16d7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16db:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    16e2:	ba 00 00 00 00       	mov    $0x0,%edx
    16e7:	48 89 ce             	mov    %rcx,%rsi
    16ea:	48 89 c7             	mov    %rax,%rdi
    16ed:	e8 00 00 00 00       	callq  16f2 <_ZN6Parser14checkVariablesEP7QString+0x74c>
    16f2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    16f6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    16fd:	48 89 d6             	mov    %rdx,%rsi
    1700:	48 89 c7             	mov    %rax,%rdi
    1703:	e8 00 00 00 00       	callq  1708 <_ZN6Parser14checkVariablesEP7QString+0x762>
    1708:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    170c:	48 89 c7             	mov    %rax,%rdi
    170f:	e8 00 00 00 00       	callq  1714 <_ZN6Parser14checkVariablesEP7QString+0x76e>
                this->varMap.insert(name, "");
    1714:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1718:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 171f <_ZN6Parser14checkVariablesEP7QString+0x779>
    171f:	48 89 c7             	mov    %rax,%rdi
    1722:	e8 00 00 00 00       	callq  1727 <_ZN6Parser14checkVariablesEP7QString+0x781>
    1727:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    172e:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx
    1735:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1739:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1740:	48 89 c6             	mov    %rax,%rsi
    1743:	48 89 cf             	mov    %rcx,%rdi
    1746:	e8 00 00 00 00       	callq  174b <_ZN6Parser14checkVariablesEP7QString+0x7a5>
    174b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    174f:	48 89 c7             	mov    %rax,%rdi
    1752:	e8 00 00 00 00       	callq  1757 <_ZN6Parser14checkVariablesEP7QString+0x7b1>

                this->varIndexes.insert(name, index);
    1757:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    175d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1760:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1767:	48 8d 48 60          	lea    0x60(%rax),%rcx
    176b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    176f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1776:	48 89 c6             	mov    %rax,%rsi
    1779:	48 89 cf             	mov    %rcx,%rdi
    177c:	e8 00 00 00 00       	callq  1781 <_ZN6Parser14checkVariablesEP7QString+0x7db>
                this->varTypes.insert(index, iType);
    1781:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    1787:	88 45 e0             	mov    %al,-0x20(%rbp)
    178a:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1790:	88 45 d0             	mov    %al,-0x30(%rbp)
    1793:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    179a:	48 8d 48 68          	lea    0x68(%rax),%rcx
    179e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17a2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17a6:	48 89 c6             	mov    %rax,%rsi
    17a9:	48 89 cf             	mov    %rcx,%rdi
    17ac:	e8 00 00 00 00       	callq  17b1 <_ZN6Parser14checkVariablesEP7QString+0x80b>
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    17b1:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17b8:	48 8d 90 c8 00 00 00 	lea    0xc8(%rax),%rdx
    17bf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    17c6:	48 89 c6             	mov    %rax,%rsi
    17c9:	48 89 d7             	mov    %rdx,%rdi
    17cc:	e8 00 00 00 00       	callq  17d1 <_ZN6Parser14checkVariablesEP7QString+0x82b>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    17d1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    17d8:	48 89 c7             	mov    %rax,%rdi
    17db:	e8 00 00 00 00       	callq  17e0 <_ZN6Parser14checkVariablesEP7QString+0x83a>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    17e0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    17e7:	48 89 c7             	mov    %rax,%rdi
    17ea:	e8 00 00 00 00       	callq  17ef <_ZN6Parser14checkVariablesEP7QString+0x849>
    17ef:	e9 cd fb ff ff       	jmpq   13c1 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
    17f4:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    17fa:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1801:	48 89 c7             	mov    %rax,%rdi
    1804:	e8 00 00 00 00       	callq  1809 <_ZN6Parser14checkVariablesEP7QString+0x863>
    1809:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1810:	48 89 c7             	mov    %rax,%rdi
    1813:	e8 00 00 00 00       	callq  1818 <_ZN6Parser14checkVariablesEP7QString+0x872>
    1818:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    181f:	48 89 c7             	mov    %rax,%rdi
    1822:	e8 00 00 00 00       	callq  1827 <_ZN6Parser14checkVariablesEP7QString+0x881>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1827:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    182e:	48 89 c7             	mov    %rax,%rdi
    1831:	e8 00 00 00 00       	callq  1836 <_ZN6Parser14checkVariablesEP7QString+0x890>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1836:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    183d:	48 89 c7             	mov    %rax,%rdi
    1840:	e8 00 00 00 00       	callq  1845 <_ZN6Parser14checkVariablesEP7QString+0x89f>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1845:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    184c:	48 89 c7             	mov    %rax,%rdi
    184f:	e8 00 00 00 00       	callq  1854 <_ZN6Parser14checkVariablesEP7QString+0x8ae>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1854:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    185b:	48 89 c7             	mov    %rax,%rdi
    185e:	e8 00 00 00 00       	callq  1863 <_ZN6Parser14checkVariablesEP7QString+0x8bd>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1863:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    186a:	48 89 c7             	mov    %rax,%rdi
    186d:	e8 00 00 00 00       	callq  1872 <_ZN6Parser14checkVariablesEP7QString+0x8cc>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1872:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1879:	48 89 c7             	mov    %rax,%rdi
    187c:	e8 00 00 00 00       	callq  1881 <_ZN6Parser14checkVariablesEP7QString+0x8db>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1881:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1888:	48 89 c7             	mov    %rax,%rdi
    188b:	e8 00 00 00 00       	callq  1890 <_ZN6Parser14checkVariablesEP7QString+0x8ea>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1890:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1897:	48 89 c7             	mov    %rax,%rdi
    189a:	e8 00 00 00 00       	callq  189f <_ZN6Parser14checkVariablesEP7QString+0x8f9>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
    189f:	89 d8                	mov    %ebx,%eax
}
    18a1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    18a5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    18ac:	00 00 
    18ae:	0f 84 03 03 00 00    	je     1bb7 <_ZN6Parser14checkVariablesEP7QString+0xc11>
    18b4:	e9 f9 02 00 00       	jmpq   1bb2 <_ZN6Parser14checkVariablesEP7QString+0xc0c>
    18b9:	48 89 c3             	mov    %rax,%rbx
    18bc:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    18c3:	48 89 c7             	mov    %rax,%rdi
    18c6:	e8 00 00 00 00       	callq  18cb <_ZN6Parser14checkVariablesEP7QString+0x925>
    18cb:	eb 17                	jmp    18e4 <_ZN6Parser14checkVariablesEP7QString+0x93e>
    18cd:	48 89 c3             	mov    %rax,%rbx
    18d0:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18d7:	48 89 c7             	mov    %rax,%rdi
    18da:	e8 00 00 00 00       	callq  18df <_ZN6Parser14checkVariablesEP7QString+0x939>
    18df:	eb 03                	jmp    18e4 <_ZN6Parser14checkVariablesEP7QString+0x93e>
    18e1:	48 89 c3             	mov    %rax,%rbx
    18e4:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    18eb:	48 89 c7             	mov    %rax,%rdi
    18ee:	e8 00 00 00 00       	callq  18f3 <_ZN6Parser14checkVariablesEP7QString+0x94d>
    18f3:	e9 a0 02 00 00       	jmpq   1b98 <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    18f8:	48 89 c3             	mov    %rax,%rbx
    18fb:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1902:	48 89 c7             	mov    %rax,%rdi
    1905:	e8 00 00 00 00       	callq  190a <_ZN6Parser14checkVariablesEP7QString+0x964>
    190a:	e9 89 02 00 00       	jmpq   1b98 <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    190f:	48 89 c3             	mov    %rax,%rbx
    1912:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    1919:	48 89 c7             	mov    %rax,%rdi
    191c:	e8 00 00 00 00       	callq  1921 <_ZN6Parser14checkVariablesEP7QString+0x97b>
    1921:	eb 17                	jmp    193a <_ZN6Parser14checkVariablesEP7QString+0x994>
    1923:	48 89 c3             	mov    %rax,%rbx
    1926:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    192d:	48 89 c7             	mov    %rax,%rdi
    1930:	e8 00 00 00 00       	callq  1935 <_ZN6Parser14checkVariablesEP7QString+0x98f>
    1935:	eb 03                	jmp    193a <_ZN6Parser14checkVariablesEP7QString+0x994>
    1937:	48 89 c3             	mov    %rax,%rbx
    193a:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1941:	48 89 c7             	mov    %rax,%rdi
    1944:	e8 00 00 00 00       	callq  1949 <_ZN6Parser14checkVariablesEP7QString+0x9a3>
    1949:	e9 36 02 00 00       	jmpq   1b84 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    194e:	48 89 c3             	mov    %rax,%rbx
    1951:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1958:	48 89 c7             	mov    %rax,%rdi
    195b:	e8 00 00 00 00       	callq  1960 <_ZN6Parser14checkVariablesEP7QString+0x9ba>
    1960:	e9 1f 02 00 00       	jmpq   1b84 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1965:	48 89 c3             	mov    %rax,%rbx
    1968:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    196f:	48 89 c7             	mov    %rax,%rdi
    1972:	e8 00 00 00 00       	callq  1977 <_ZN6Parser14checkVariablesEP7QString+0x9d1>
    1977:	e9 f4 01 00 00       	jmpq   1b70 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    197c:	48 89 c3             	mov    %rax,%rbx
    197f:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1986:	48 89 c7             	mov    %rax,%rdi
    1989:	e8 00 00 00 00       	callq  198e <_ZN6Parser14checkVariablesEP7QString+0x9e8>
    198e:	e9 dd 01 00 00       	jmpq   1b70 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1993:	48 89 c3             	mov    %rax,%rbx
    1996:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    199d:	48 89 c7             	mov    %rax,%rdi
    19a0:	e8 00 00 00 00       	callq  19a5 <_ZN6Parser14checkVariablesEP7QString+0x9ff>
    19a5:	e9 b2 01 00 00       	jmpq   1b5c <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19aa:	48 89 c3             	mov    %rax,%rbx
    19ad:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    19b4:	48 89 c7             	mov    %rax,%rdi
    19b7:	e8 00 00 00 00       	callq  19bc <_ZN6Parser14checkVariablesEP7QString+0xa16>
    19bc:	e9 9b 01 00 00       	jmpq   1b5c <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19c1:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    19c4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    19cb:	48 89 c7             	mov    %rax,%rdi
    19ce:	e8 00 00 00 00       	callq  19d3 <_ZN6Parser14checkVariablesEP7QString+0xa2d>
    19d3:	e9 34 01 00 00       	jmpq   1b0c <_ZN6Parser14checkVariablesEP7QString+0xb66>
    19d8:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    19db:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19e2:	48 89 c7             	mov    %rax,%rdi
    19e5:	e8 00 00 00 00       	callq  19ea <_ZN6Parser14checkVariablesEP7QString+0xa44>
    19ea:	e9 1d 01 00 00       	jmpq   1b0c <_ZN6Parser14checkVariablesEP7QString+0xb66>
    19ef:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    19f2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19f9:	48 89 c7             	mov    %rax,%rdi
    19fc:	e8 00 00 00 00       	callq  1a01 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1a01:	eb 03                	jmp    1a06 <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1a03:	48 89 c3             	mov    %rax,%rbx
    1a06:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1a0d:	48 89 c7             	mov    %rax,%rdi
    1a10:	e8 00 00 00 00       	callq  1a15 <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1a15:	eb 03                	jmp    1a1a <_ZN6Parser14checkVariablesEP7QString+0xa74>
    1a17:	48 89 c3             	mov    %rax,%rbx
    1a1a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1a21:	48 89 c7             	mov    %rax,%rdi
    1a24:	e8 00 00 00 00       	callq  1a29 <_ZN6Parser14checkVariablesEP7QString+0xa83>
    1a29:	e9 de 00 00 00       	jmpq   1b0c <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1a2e:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1a31:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a38:	48 89 c7             	mov    %rax,%rdi
    1a3b:	e8 00 00 00 00       	callq  1a40 <_ZN6Parser14checkVariablesEP7QString+0xa9a>
    1a40:	eb 7a                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a42:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1a45:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a49:	48 89 c7             	mov    %rax,%rdi
    1a4c:	e8 00 00 00 00       	callq  1a51 <_ZN6Parser14checkVariablesEP7QString+0xaab>
    1a51:	eb 69                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a53:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1a56:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a5a:	48 89 c7             	mov    %rax,%rdi
    1a5d:	e8 00 00 00 00       	callq  1a62 <_ZN6Parser14checkVariablesEP7QString+0xabc>
    1a62:	eb 58                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a64:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1a67:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a6b:	48 89 c7             	mov    %rax,%rdi
    1a6e:	e8 00 00 00 00       	callq  1a73 <_ZN6Parser14checkVariablesEP7QString+0xacd>
    1a73:	eb 03                	jmp    1a78 <_ZN6Parser14checkVariablesEP7QString+0xad2>
    1a75:	48 89 c3             	mov    %rax,%rbx
    1a78:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a7c:	48 89 c7             	mov    %rax,%rdi
    1a7f:	e8 00 00 00 00       	callq  1a84 <_ZN6Parser14checkVariablesEP7QString+0xade>
    1a84:	eb 03                	jmp    1a89 <_ZN6Parser14checkVariablesEP7QString+0xae3>
    1a86:	48 89 c3             	mov    %rax,%rbx
    1a89:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1a8d:	48 89 c7             	mov    %rax,%rdi
    1a90:	e8 00 00 00 00       	callq  1a95 <_ZN6Parser14checkVariablesEP7QString+0xaef>
    1a95:	eb 25                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a97:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1a9a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a9e:	48 89 c7             	mov    %rax,%rdi
    1aa1:	e8 00 00 00 00       	callq  1aa6 <_ZN6Parser14checkVariablesEP7QString+0xb00>
    1aa6:	eb 14                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1aa8:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1aab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1aaf:	48 89 c7             	mov    %rax,%rdi
    1ab2:	e8 00 00 00 00       	callq  1ab7 <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1ab7:	eb 03                	jmp    1abc <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1ab9:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1abc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1ac3:	48 89 c7             	mov    %rax,%rdi
    1ac6:	e8 00 00 00 00       	callq  1acb <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1acb:	eb 03                	jmp    1ad0 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1acd:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1ad0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1ad7:	48 89 c7             	mov    %rax,%rdi
    1ada:	e8 00 00 00 00       	callq  1adf <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1adf:	eb 03                	jmp    1ae4 <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1ae1:	48 89 c3             	mov    %rax,%rbx
    1ae4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1aeb:	48 89 c7             	mov    %rax,%rdi
    1aee:	e8 00 00 00 00       	callq  1af3 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1af3:	eb 03                	jmp    1af8 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1af5:	48 89 c3             	mov    %rax,%rbx
    1af8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1aff:	48 89 c7             	mov    %rax,%rdi
    1b02:	e8 00 00 00 00       	callq  1b07 <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1b07:	eb 03                	jmp    1b0c <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1b09:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1b0c:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1b13:	48 89 c7             	mov    %rax,%rdi
    1b16:	e8 00 00 00 00       	callq  1b1b <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1b1b:	eb 03                	jmp    1b20 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1b1d:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1b20:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1b27:	48 89 c7             	mov    %rax,%rdi
    1b2a:	e8 00 00 00 00       	callq  1b2f <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1b2f:	eb 03                	jmp    1b34 <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1b31:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1b34:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1b3b:	48 89 c7             	mov    %rax,%rdi
    1b3e:	e8 00 00 00 00       	callq  1b43 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1b43:	eb 03                	jmp    1b48 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1b45:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1b48:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1b4f:	48 89 c7             	mov    %rax,%rdi
    1b52:	e8 00 00 00 00       	callq  1b57 <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1b57:	eb 03                	jmp    1b5c <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1b59:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1b5c:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1b63:	48 89 c7             	mov    %rax,%rdi
    1b66:	e8 00 00 00 00       	callq  1b6b <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1b6b:	eb 03                	jmp    1b70 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1b6d:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1b70:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1b77:	48 89 c7             	mov    %rax,%rdi
    1b7a:	e8 00 00 00 00       	callq  1b7f <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1b7f:	eb 03                	jmp    1b84 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1b81:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1b84:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1b8b:	48 89 c7             	mov    %rax,%rdi
    1b8e:	e8 00 00 00 00       	callq  1b93 <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1b93:	eb 03                	jmp    1b98 <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    1b95:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1b98:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1b9f:	48 89 c7             	mov    %rax,%rdi
    1ba2:	e8 00 00 00 00       	callq  1ba7 <_ZN6Parser14checkVariablesEP7QString+0xc01>
    1ba7:	48 89 d8             	mov    %rbx,%rax
    1baa:	48 89 c7             	mov    %rax,%rdi
    1bad:	e8 00 00 00 00       	callq  1bb2 <_ZN6Parser14checkVariablesEP7QString+0xc0c>
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
}
    1bb2:	e8 00 00 00 00       	callq  1bb7 <_ZN6Parser14checkVariablesEP7QString+0xc11>
    1bb7:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1bbe:	5b                   	pop    %rbx
    1bbf:	5d                   	pop    %rbp
    1bc0:	c3                   	retq   
    1bc1:	90                   	nop

0000000000001bc2 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1bc2:	55                   	push   %rbp
    1bc3:	48 89 e5             	mov    %rsp,%rbp
    1bc6:	53                   	push   %rbx
    1bc7:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1bce:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1bd5:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1bdc:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1be3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1bea:	00 00 
    1bec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1bf0:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1bf2:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1bf9:	00 00 00 
    QString result;
    1bfc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1c03:	48 89 c7             	mov    %rax,%rdi
    1c06:	e8 00 00 00 00       	callq  1c0b <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1c0b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c0f:	48 89 c7             	mov    %rax,%rdi
    1c12:	e8 00 00 00 00       	callq  1c17 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1c17:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c1e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c22:	48 89 d6             	mov    %rdx,%rsi
    1c25:	48 89 c7             	mov    %rax,%rdi
    1c28:	e8 00 00 00 00       	callq  1c2d <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1c2d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1c31:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1c35:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1c40:	48 89 d6             	mov    %rdx,%rsi
    1c43:	48 89 c7             	mov    %rax,%rdi
    1c46:	e8 00 00 00 00       	callq  1c4b <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1c4b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1c4f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c53:	48 89 d6             	mov    %rdx,%rsi
    1c56:	48 89 c7             	mov    %rax,%rdi
    1c59:	e8 00 00 00 00       	callq  1c5e <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1c5e:	84 c0                	test   %al,%al
    1c60:	0f 84 e0 00 00 00    	je     1d46 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1c66:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c6a:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1c70:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c75:	89 ce                	mov    %ecx,%esi
    1c77:	48 89 c7             	mov    %rax,%rdi
    1c7a:	e8 00 00 00 00       	callq  1c7f <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1c7f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c83:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1c87:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c8e <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1c8e:	48 89 c7             	mov    %rax,%rdi
    1c91:	e8 00 00 00 00       	callq  1c96 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1c96:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c9a:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1c9e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1ca5 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1ca5:	48 89 ce             	mov    %rcx,%rsi
    1ca8:	48 89 c7             	mov    %rax,%rdi
    1cab:	e8 00 00 00 00       	callq  1cb0 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1cb0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1cb4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cbb:	48 89 d6             	mov    %rdx,%rsi
    1cbe:	48 89 c7             	mov    %rax,%rdi
    1cc1:	e8 00 00 00 00       	callq  1cc6 <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1cc6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cca:	48 89 c7             	mov    %rax,%rdi
    1ccd:	e8 00 00 00 00       	callq  1cd2 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1cd2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1cd6:	48 89 c7             	mov    %rax,%rdi
    1cd9:	e8 00 00 00 00       	callq  1cde <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1cde:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1ce2:	48 89 c7             	mov    %rax,%rdi
    1ce5:	e8 00 00 00 00       	callq  1cea <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1cea:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1cee:	48 89 c7             	mov    %rax,%rdi
    1cf1:	e8 00 00 00 00       	callq  1cf6 <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1cf6:	48 89 c2             	mov    %rax,%rdx
    1cf9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1cfd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d04 <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1d04:	48 89 c7             	mov    %rax,%rdi
    1d07:	e8 00 00 00 00       	callq  1d0c <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1d0c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1d10:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d17:	48 89 d6             	mov    %rdx,%rsi
    1d1a:	48 89 c7             	mov    %rax,%rdi
    1d1d:	e8 00 00 00 00       	callq  1d22 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1d22:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d26:	48 89 c7             	mov    %rax,%rdi
    1d29:	e8 00 00 00 00       	callq  1d2e <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1d2e:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1d35:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d39:	48 89 c7             	mov    %rax,%rdi
    1d3c:	e8 00 00 00 00       	callq  1d41 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1d41:	e9 ef fe ff ff       	jmpq   1c35 <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1d46:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d4d:	48 89 c7             	mov    %rax,%rdi
    1d50:	e8 00 00 00 00       	callq  1d55 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1d55:	90                   	nop
    1d56:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1d5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1d61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1d68:	00 00 
    1d6a:	74 68                	je     1dd4 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1d6c:	eb 61                	jmp    1dcf <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1d6e:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1d71:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d75:	48 89 c7             	mov    %rax,%rdi
    1d78:	e8 00 00 00 00       	callq  1d7d <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1d7d:	eb 03                	jmp    1d82 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1d7f:	48 89 c3             	mov    %rax,%rbx
    1d82:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d86:	48 89 c7             	mov    %rax,%rdi
    1d89:	e8 00 00 00 00       	callq  1d8e <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1d8e:	eb 03                	jmp    1d93 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1d90:	48 89 c3             	mov    %rax,%rbx
    1d93:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d97:	48 89 c7             	mov    %rax,%rdi
    1d9a:	e8 00 00 00 00       	callq  1d9f <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1d9f:	eb 14                	jmp    1db5 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1da1:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1da4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1da8:	48 89 c7             	mov    %rax,%rdi
    1dab:	e8 00 00 00 00       	callq  1db0 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1db0:	eb 03                	jmp    1db5 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1db2:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1db5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1dbc:	48 89 c7             	mov    %rax,%rdi
    1dbf:	e8 00 00 00 00       	callq  1dc4 <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1dc4:	48 89 d8             	mov    %rbx,%rax
    1dc7:	48 89 c7             	mov    %rax,%rdi
    1dca:	e8 00 00 00 00       	callq  1dcf <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1dcf:	e8 00 00 00 00       	callq  1dd4 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1dd4:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1ddb:	5b                   	pop    %rbx
    1ddc:	5d                   	pop    %rbp
    1ddd:	c3                   	retq   

0000000000001dde <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1dde:	55                   	push   %rbp
    1ddf:	48 89 e5             	mov    %rsp,%rbp
    1de2:	48 83 ec 10          	sub    $0x10,%rsp
    1de6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1dea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1dee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1df2:	48 8d 88 80 00 00 00 	lea    0x80(%rax),%rcx
    1df9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1dfd:	ba 01 00 00 00       	mov    $0x1,%edx
    1e02:	48 89 c6             	mov    %rax,%rsi
    1e05:	48 89 cf             	mov    %rcx,%rdi
    1e08:	e8 00 00 00 00       	callq  1e0d <_ZN6Parser14addIncludeFileE7QString+0x2f>
    1e0d:	83 f0 01             	xor    $0x1,%eax
    1e10:	84 c0                	test   %al,%al
    1e12:	74 1a                	je     1e2e <_ZN6Parser14addIncludeFileE7QString+0x50>
    this->includeFiles.append(filename);
    1e14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e18:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
    1e1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e23:	48 89 c6             	mov    %rax,%rsi
    1e26:	48 89 d7             	mov    %rdx,%rdi
    1e29:	e8 00 00 00 00       	callq  1e2e <_ZN6Parser14addIncludeFileE7QString+0x50>
}
    1e2e:	90                   	nop
    1e2f:	c9                   	leaveq 
    1e30:	c3                   	retq   
    1e31:	90                   	nop

0000000000001e32 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1e32:	55                   	push   %rbp
    1e33:	48 89 e5             	mov    %rsp,%rbp
    1e36:	41 55                	push   %r13
    1e38:	41 54                	push   %r12
    1e3a:	53                   	push   %rbx
    1e3b:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1e42:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1e49:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1e50:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1e57:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e5e:	00 00 
    1e60:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1e64:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1e66:	bb 00 00 00 00       	mov    $0x0,%ebx
    1e6b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1e72:	48 89 c7             	mov    %rax,%rdi
    1e75:	e8 00 00 00 00       	callq  1e7a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1e7a:	83 f8 04             	cmp    $0x4,%eax
    1e7d:	74 3a                	je     1eb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1e7f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e83:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e8a:	48 89 d6             	mov    %rdx,%rsi
    1e8d:	48 89 c7             	mov    %rax,%rdi
    1e90:	e8 00 00 00 00       	callq  1e95 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1e95:	bb 01 00 00 00       	mov    $0x1,%ebx
    1e9a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e9e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ea5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1ea5:	48 89 c7             	mov    %rax,%rdi
    1ea8:	e8 00 00 00 00       	callq  1ead <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1ead:	84 c0                	test   %al,%al
    1eaf:	74 08                	je     1eb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1eb1:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1eb7:	eb 06                	jmp    1ebf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1eb9:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1ebf:	84 db                	test   %bl,%bl
    1ec1:	74 0d                	je     1ed0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ec3:	90                   	nop
    1ec4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ec8:	48 89 c7             	mov    %rax,%rdi
    1ecb:	e8 00 00 00 00       	callq  1ed0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ed0:	45 84 ed             	test   %r13b,%r13b
    1ed3:	74 0b                	je     1ee0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1ed5:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1edb:	e9 87 02 00 00       	jmpq   2167 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1ee0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1ee7:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1eee:	48 89 d6             	mov    %rdx,%rsi
    1ef1:	48 89 c7             	mov    %rax,%rdi
    1ef4:	e8 00 00 00 00       	callq  1ef9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1ef9:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1f00:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1f03:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f0a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f11 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1f11:	48 89 c7             	mov    %rax,%rdi
    1f14:	e8 00 00 00 00       	callq  1f19 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1f19:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1f20:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f27:	48 89 d6             	mov    %rdx,%rsi
    1f2a:	48 89 c7             	mov    %rax,%rdi
    1f2d:	e8 00 00 00 00       	callq  1f32 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1f32:	89 c3                	mov    %eax,%ebx
    1f34:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f3b:	48 89 c7             	mov    %rax,%rdi
    1f3e:	e8 00 00 00 00       	callq  1f43 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1f43:	84 db                	test   %bl,%bl
    1f45:	74 6c                	je     1fb3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1f47:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f4e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f55 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1f55:	48 89 c7             	mov    %rax,%rdi
    1f58:	e8 00 00 00 00       	callq  1f5d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1f5d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f61:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1f68:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1f6f:	48 89 ce             	mov    %rcx,%rsi
    1f72:	48 89 c7             	mov    %rax,%rdi
    1f75:	e8 00 00 00 00       	callq  1f7a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1f7a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f7e:	ba 0a 00 00 00       	mov    $0xa,%edx
    1f83:	be 00 00 00 00       	mov    $0x0,%esi
    1f88:	48 89 c7             	mov    %rax,%rdi
    1f8b:	e8 00 00 00 00       	callq  1f90 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1f90:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1f96:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f9a:	48 89 c7             	mov    %rax,%rdi
    1f9d:	e8 00 00 00 00       	callq  1fa2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1fa2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1fa9:	48 89 c7             	mov    %rax,%rdi
    1fac:	e8 00 00 00 00       	callq  1fb1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1fb1:	eb 0b                	jmp    1fbe <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1fb3:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1fb9:	e9 9a 01 00 00       	jmpq   2158 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1fbe:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fc5:	48 89 c7             	mov    %rax,%rdi
    1fc8:	e8 00 00 00 00       	callq  1fcd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1fcd:	bb 00 00 00 00       	mov    $0x0,%ebx
    1fd2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fd9:	48 89 c7             	mov    %rax,%rdi
    1fdc:	e8 00 00 00 00       	callq  1fe1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    1fe1:	83 f8 05             	cmp    $0x5,%eax
    1fe4:	75 35                	jne    201b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1fe6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1fea:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1ff1:	48 89 d6             	mov    %rdx,%rsi
    1ff4:	48 89 c7             	mov    %rax,%rdi
    1ff7:	e8 00 00 00 00       	callq  1ffc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    1ffc:	bb 01 00 00 00       	mov    $0x1,%ebx
    2001:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2005:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 200c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    200c:	48 89 c7             	mov    %rax,%rdi
    200f:	e8 00 00 00 00       	callq  2014 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    2014:	83 f0 01             	xor    $0x1,%eax
    2017:	84 c0                	test   %al,%al
    2019:	74 08                	je     2023 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    201b:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    2021:	eb 06                	jmp    2029 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    2023:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    2029:	84 db                	test   %bl,%bl
    202b:	74 0d                	je     203a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    202d:	90                   	nop
    202e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2032:	48 89 c7             	mov    %rax,%rdi
    2035:	e8 00 00 00 00       	callq  203a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    203a:	45 84 ed             	test   %r13b,%r13b
    203d:	0f 84 0f 01 00 00    	je     2152 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    2043:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    204a:	48 89 c7             	mov    %rax,%rdi
    204d:	e8 00 00 00 00       	callq  2052 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    2052:	83 f8 04             	cmp    $0x4,%eax
    2055:	0f 94 c0             	sete   %al
    2058:	84 c0                	test   %al,%al
    205a:	0f 84 de 00 00 00    	je     213e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    2060:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2064:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    206b:	48 89 d6             	mov    %rdx,%rsi
    206e:	48 89 c7             	mov    %rax,%rdi
    2071:	e8 00 00 00 00       	callq  2076 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    2076:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    207a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2081 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    2081:	48 89 c7             	mov    %rax,%rdi
    2084:	e8 00 00 00 00       	callq  2089 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    2089:	89 c3                	mov    %eax,%ebx
    208b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    208f:	48 89 c7             	mov    %rax,%rdi
    2092:	e8 00 00 00 00       	callq  2097 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    2097:	84 db                	test   %bl,%bl
    2099:	0f 84 9f 00 00 00    	je     213e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    209f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    20a6:	48 89 c7             	mov    %rax,%rdi
    20a9:	e8 00 00 00 00       	callq  20ae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    20ae:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20b2:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20b9:	48 89 d6             	mov    %rdx,%rsi
    20bc:	48 89 c7             	mov    %rax,%rdi
    20bf:	e8 00 00 00 00       	callq  20c4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    20c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20c8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    20cc:	48 89 d6             	mov    %rdx,%rsi
    20cf:	48 89 c7             	mov    %rax,%rdi
    20d2:	e8 00 00 00 00       	callq  20d7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    20d7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20db:	48 89 c7             	mov    %rax,%rdi
    20de:	e8 00 00 00 00       	callq  20e3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    20e3:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    20e7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    20ee:	48 89 d6             	mov    %rdx,%rsi
    20f1:	48 89 c7             	mov    %rax,%rdi
    20f4:	e8 00 00 00 00       	callq  20f9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    20f9:	84 c0                	test   %al,%al
    20fb:	74 0d                	je     210a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    20fd:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    2103:	bb 00 00 00 00       	mov    $0x0,%ebx
    2108:	eb 22                	jmp    212c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    210a:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    2111:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    2115:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    211c:	48 89 ce             	mov    %rcx,%rsi
    211f:	48 89 c7             	mov    %rax,%rdi
    2122:	e8 00 00 00 00       	callq  2127 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    2127:	bb 01 00 00 00       	mov    $0x1,%ebx
    212c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2130:	48 89 c7             	mov    %rax,%rdi
    2133:	e8 00 00 00 00       	callq  2138 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    2138:	83 fb 01             	cmp    $0x1,%ebx
    213b:	75 1b                	jne    2158 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    213d:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    213e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2145:	48 89 c7             	mov    %rax,%rdi
    2148:	e8 00 00 00 00       	callq  214d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    214d:	e9 7b fe ff ff       	jmpq   1fcd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    2152:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2158:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    215f:	48 89 c7             	mov    %rax,%rdi
    2162:	e8 00 00 00 00       	callq  2167 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    2167:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    216a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    216e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2175:	00 00 
    2177:	0f 84 d1 00 00 00    	je     224e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    217d:	e9 c7 00 00 00       	jmpq   2249 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    2182:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    2185:	84 db                	test   %bl,%bl
    2187:	74 0f                	je     2198 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    2189:	90                   	nop
    218a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    218e:	48 89 c7             	mov    %rax,%rdi
    2191:	e8 00 00 00 00       	callq  2196 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    2196:	eb 01                	jmp    2199 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    2198:	90                   	nop
    2199:	4c 89 e0             	mov    %r12,%rax
    219c:	48 89 c7             	mov    %rax,%rdi
    219f:	e8 00 00 00 00       	callq  21a4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    21a4:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    21a7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    21ae:	48 89 c7             	mov    %rax,%rdi
    21b1:	e8 00 00 00 00       	callq  21b6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    21b6:	eb 77                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21b8:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    21bb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21bf:	48 89 c7             	mov    %rax,%rdi
    21c2:	e8 00 00 00 00       	callq  21c7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    21c7:	eb 03                	jmp    21cc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    21c9:	48 89 c3             	mov    %rax,%rbx
    21cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    21d3:	48 89 c7             	mov    %rax,%rdi
    21d6:	e8 00 00 00 00       	callq  21db <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    21db:	eb 52                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21dd:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    21e0:	84 db                	test   %bl,%bl
    21e2:	74 0f                	je     21f3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    21e4:	90                   	nop
    21e5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21e9:	48 89 c7             	mov    %rax,%rdi
    21ec:	e8 00 00 00 00       	callq  21f1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    21f1:	eb 01                	jmp    21f4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    21f3:	90                   	nop
    21f4:	4c 89 e3             	mov    %r12,%rbx
    21f7:	eb 36                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21f9:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    21fc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2200:	48 89 c7             	mov    %rax,%rdi
    2203:	e8 00 00 00 00       	callq  2208 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    2208:	eb 25                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    220a:	48 89 c3             	mov    %rax,%rbx
    220d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2211:	48 89 c7             	mov    %rax,%rdi
    2214:	e8 00 00 00 00       	callq  2219 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    2219:	eb 14                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    221b:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    221e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2222:	48 89 c7             	mov    %rax,%rdi
    2225:	e8 00 00 00 00       	callq  222a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    222a:	eb 03                	jmp    222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    222c:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    222f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2236:	48 89 c7             	mov    %rax,%rdi
    2239:	e8 00 00 00 00       	callq  223e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    223e:	48 89 d8             	mov    %rbx,%rax
    2241:	48 89 c7             	mov    %rax,%rdi
    2244:	e8 00 00 00 00       	callq  2249 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    2249:	e8 00 00 00 00       	callq  224e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    224e:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    2255:	5b                   	pop    %rbx
    2256:	41 5c                	pop    %r12
    2258:	41 5d                	pop    %r13
    225a:	5d                   	pop    %rbp
    225b:	c3                   	retq   

000000000000225c <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    225c:	55                   	push   %rbp
    225d:	48 89 e5             	mov    %rsp,%rbp
    2260:	53                   	push   %rbx
    2261:	48 83 ec 68          	sub    $0x68,%rsp
    2265:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    2269:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    226d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    2271:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2278:	00 00 
    227a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    227e:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    2280:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2284:	48 89 c7             	mov    %rax,%rdi
    2287:	e8 00 00 00 00       	callq  228c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    228c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2290:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2294:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2298:	48 89 d6             	mov    %rdx,%rsi
    229b:	48 89 c7             	mov    %rax,%rdi
    229e:	e8 00 00 00 00       	callq  22a3 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    22a3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    22a7:	48 89 c7             	mov    %rax,%rdi
    22aa:	e8 00 00 00 00       	callq  22af <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    22af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    22b3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    22b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22bb:	48 89 d6             	mov    %rdx,%rsi
    22be:	48 89 c7             	mov    %rax,%rdi
    22c1:	e8 00 00 00 00       	callq  22c6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    22c6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22ca:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22ce:	48 89 d6             	mov    %rdx,%rsi
    22d1:	48 89 c7             	mov    %rax,%rdi
    22d4:	e8 00 00 00 00       	callq  22d9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    22d9:	84 c0                	test   %al,%al
    22db:	0f 84 d7 00 00 00    	je     23b8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    22e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22e5:	48 89 c7             	mov    %rax,%rdi
    22e8:	e8 00 00 00 00       	callq  22ed <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    22ed:	8b 08                	mov    (%rax),%ecx
    22ef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22f3:	ba 0a 00 00 00       	mov    $0xa,%edx
    22f8:	89 ce                	mov    %ecx,%esi
    22fa:	48 89 c7             	mov    %rax,%rdi
    22fd:	e8 00 00 00 00       	callq  2302 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    2302:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2306:	48 89 c7             	mov    %rax,%rdi
    2309:	e8 00 00 00 00       	callq  230e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    230e:	48 89 c2             	mov    %rax,%rdx
    2311:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2315:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 231c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    231c:	48 89 c7             	mov    %rax,%rdi
    231f:	e8 00 00 00 00       	callq  2324 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    2324:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2328:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    232c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2333 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    2333:	48 89 ce             	mov    %rcx,%rsi
    2336:	48 89 c7             	mov    %rax,%rdi
    2339:	e8 00 00 00 00       	callq  233e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    233e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    2342:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2346:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    234a:	48 89 ce             	mov    %rcx,%rsi
    234d:	48 89 c7             	mov    %rax,%rdi
    2350:	e8 00 00 00 00       	callq  2355 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    2355:	90                   	nop
    2356:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    235a:	48 89 c7             	mov    %rax,%rdi
    235d:	e8 00 00 00 00       	callq  2362 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    2362:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2366:	48 89 c7             	mov    %rax,%rdi
    2369:	e8 00 00 00 00       	callq  236e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    236e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2372:	48 89 c7             	mov    %rax,%rdi
    2375:	e8 00 00 00 00       	callq  237a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    237a:	eb 3d                	jmp    23b9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    237c:	48 89 c3             	mov    %rax,%rbx
    237f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2383:	48 89 c7             	mov    %rax,%rdi
    2386:	e8 00 00 00 00       	callq  238b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    238b:	eb 03                	jmp    2390 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    238d:	48 89 c3             	mov    %rax,%rbx
    2390:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2394:	48 89 c7             	mov    %rax,%rdi
    2397:	e8 00 00 00 00       	callq  239c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    239c:	eb 03                	jmp    23a1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    239e:	48 89 c3             	mov    %rax,%rbx
    23a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23a5:	48 89 c7             	mov    %rax,%rdi
    23a8:	e8 00 00 00 00       	callq  23ad <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    23ad:	48 89 d8             	mov    %rbx,%rax
    23b0:	48 89 c7             	mov    %rax,%rdi
    23b3:	e8 00 00 00 00       	callq  23b8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    23b8:	90                   	nop
    23b9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    23bd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    23c1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    23c8:	00 00 
    23ca:	74 05                	je     23d1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23cc:	e8 00 00 00 00       	callq  23d1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23d1:	48 83 c4 68          	add    $0x68,%rsp
    23d5:	5b                   	pop    %rbx
    23d6:	5d                   	pop    %rbp
    23d7:	c3                   	retq   

00000000000023d8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    23d8:	55                   	push   %rbp
    23d9:	48 89 e5             	mov    %rsp,%rbp
    23dc:	53                   	push   %rbx
    23dd:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    23e4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    23e8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    23ec:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    23f3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    23fa:	00 00 
    23fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2400:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    2402:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    2406:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    240a:	48 89 d6             	mov    %rdx,%rsi
    240d:	48 89 c7             	mov    %rax,%rdi
    2410:	e8 00 00 00 00       	callq  2415 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    2415:	be 10 00 00 00       	mov    $0x10,%esi
    241a:	bf 01 00 00 00       	mov    $0x1,%edi
    241f:	e8 00 00 00 00       	callq  2424 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    2424:	89 c2                	mov    %eax,%edx
    2426:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    242a:	89 d6                	mov    %edx,%esi
    242c:	48 89 c7             	mov    %rax,%rdi
    242f:	e8 00 00 00 00       	callq  2434 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    2434:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2438:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    243c:	48 89 d6             	mov    %rdx,%rsi
    243f:	48 89 c7             	mov    %rax,%rdi
    2442:	e8 00 00 00 00       	callq  2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    2447:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    244b:	48 89 c7             	mov    %rax,%rdi
    244e:	e8 00 00 00 00       	callq  2453 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    2453:	83 f0 01             	xor    $0x1,%eax
    2456:	84 c0                	test   %al,%al
    2458:	74 1a                	je     2474 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    245a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    245e:	48 89 c7             	mov    %rax,%rdi
    2461:	e8 00 00 00 00       	callq  2466 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    2466:	83 f0 01             	xor    $0x1,%eax
    2469:	84 c0                	test   %al,%al
    246b:	74 07                	je     2474 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    246d:	b8 01 00 00 00       	mov    $0x1,%eax
    2472:	eb 05                	jmp    2479 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    2474:	b8 00 00 00 00       	mov    $0x0,%eax
    2479:	84 c0                	test   %al,%al
    247b:	0f 84 cb 00 00 00    	je     254c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    2481:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2485:	48 89 c7             	mov    %rax,%rdi
    2488:	e8 00 00 00 00       	callq  248d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    248d:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    2490:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    2494:	0f 84 a6 00 00 00    	je     2540 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    249a:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    249e:	75 a7                	jne    2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    24a0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24a4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24a8:	48 89 d6             	mov    %rdx,%rsi
    24ab:	48 89 c7             	mov    %rax,%rdi
    24ae:	e8 00 00 00 00       	callq  24b3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    24b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24be <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    24be:	48 89 c7             	mov    %rax,%rdi
    24c1:	e8 00 00 00 00       	callq  24c6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    24c6:	89 c3                	mov    %eax,%ebx
    24c8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24cc:	48 89 c7             	mov    %rax,%rdi
    24cf:	e8 00 00 00 00       	callq  24d4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    24d4:	84 db                	test   %bl,%bl
    24d6:	75 6e                	jne    2546 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    24d8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24dc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24e0:	48 89 d6             	mov    %rdx,%rsi
    24e3:	48 89 c7             	mov    %rax,%rdi
    24e6:	e8 00 00 00 00       	callq  24eb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    24eb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24f6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    24f6:	48 89 c7             	mov    %rax,%rdi
    24f9:	e8 00 00 00 00       	callq  24fe <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    24fe:	89 c3                	mov    %eax,%ebx
    2500:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2504:	48 89 c7             	mov    %rax,%rdi
    2507:	e8 00 00 00 00       	callq  250c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    250c:	84 db                	test   %bl,%bl
    250e:	0f 84 33 ff ff ff    	je     2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    2514:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    251b:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    251f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2523:	48 89 ce             	mov    %rcx,%rsi
    2526:	48 89 c7             	mov    %rax,%rdi
    2529:	e8 00 00 00 00       	callq  252e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    252e:	83 f0 01             	xor    $0x1,%eax
    2531:	84 c0                	test   %al,%al
    2533:	0f 84 0e ff ff ff    	je     2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2539:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    253e:	eb 11                	jmp    2551 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    2540:	90                   	nop
    2541:	e9 01 ff ff ff       	jmpq   2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    2546:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    2547:	e9 fb fe ff ff       	jmpq   2447 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    254c:	bb 01 00 00 00       	mov    $0x1,%ebx
    2551:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2555:	48 89 c7             	mov    %rax,%rdi
    2558:	e8 00 00 00 00       	callq  255d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    255d:	83 fb 01             	cmp    $0x1,%ebx
    2560:	74 07                	je     2569 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    2562:	bb 00 00 00 00       	mov    $0x0,%ebx
    2567:	eb 06                	jmp    256f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2569:	90                   	nop
    256a:	bb 01 00 00 00       	mov    $0x1,%ebx
    256f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2573:	48 89 c7             	mov    %rax,%rdi
    2576:	e8 00 00 00 00       	callq  257b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    257b:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    257e:	90                   	nop
                    return;
                }
            }
        }
    }
}
    257f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2583:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    258a:	00 00 
    258c:	74 54                	je     25e2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    258e:	eb 4d                	jmp    25dd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    2590:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    2593:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2597:	48 89 c7             	mov    %rax,%rdi
    259a:	e8 00 00 00 00       	callq  259f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    259f:	eb 14                	jmp    25b5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25a1:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    25a4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25a8:	48 89 c7             	mov    %rax,%rdi
    25ab:	e8 00 00 00 00       	callq  25b0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    25b0:	eb 03                	jmp    25b5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25b2:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25b5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25b9:	48 89 c7             	mov    %rax,%rdi
    25bc:	e8 00 00 00 00       	callq  25c1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    25c1:	eb 03                	jmp    25c6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    25c3:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    25c6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25ca:	48 89 c7             	mov    %rax,%rdi
    25cd:	e8 00 00 00 00       	callq  25d2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    25d2:	48 89 d8             	mov    %rbx,%rax
    25d5:	48 89 c7             	mov    %rax,%rdi
    25d8:	e8 00 00 00 00       	callq  25dd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    25dd:	e8 00 00 00 00       	callq  25e2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    25e2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    25e9:	5b                   	pop    %rbx
    25ea:	5d                   	pop    %rbp
    25eb:	c3                   	retq   

00000000000025ec <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    25ec:	55                   	push   %rbp
    25ed:	48 89 e5             	mov    %rsp,%rbp
    25f0:	53                   	push   %rbx
    25f1:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    25f8:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    25ff:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    2606:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    260d:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    2613:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    261a:	00 00 
    261c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2620:	31 c0                	xor    %eax,%eax


    QString str = Block;
    2622:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    2629:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2630:	48 89 d6             	mov    %rdx,%rsi
    2633:	48 89 c7             	mov    %rax,%rdi
    2636:	e8 00 00 00 00       	callq  263b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    263b:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2642:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2649:	48 89 d6             	mov    %rdx,%rsi
    264c:	48 89 c7             	mov    %rax,%rdi
    264f:	e8 00 00 00 00       	callq  2654 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    2654:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    265b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2662 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    2662:	48 89 c7             	mov    %rax,%rdi
    2665:	e8 00 00 00 00       	callq  266a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    266a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    2671:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2678:	b9 00 00 00 00       	mov    $0x0,%ecx
    267d:	ba 01 00 00 00       	mov    $0x1,%edx
    2682:	48 89 c7             	mov    %rax,%rdi
    2685:	e8 00 00 00 00       	callq  268a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    268a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2691:	48 89 c7             	mov    %rax,%rdi
    2694:	e8 00 00 00 00       	callq  2699 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    2699:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    26a0:	be 01 00 00 00       	mov    $0x1,%esi
    26a5:	48 89 c7             	mov    %rax,%rdi
    26a8:	e8 00 00 00 00       	callq  26ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    26ad:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    26b4:	48 89 c7             	mov    %rax,%rdi
    26b7:	e8 00 00 00 00       	callq  26bc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    26bc:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 26ca <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    26ca:	48 89 c7             	mov    %rax,%rdi
    26cd:	e8 00 00 00 00       	callq  26d2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    26d2:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    26d9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    26e0:	b9 00 00 00 00       	mov    $0x0,%ecx
    26e5:	ba 01 00 00 00       	mov    $0x1,%edx
    26ea:	48 89 c7             	mov    %rax,%rdi
    26ed:	e8 00 00 00 00       	callq  26f2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    26f2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26f9:	48 89 c7             	mov    %rax,%rdi
    26fc:	e8 00 00 00 00       	callq  2701 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    2701:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2708:	48 89 c7             	mov    %rax,%rdi
    270b:	e8 00 00 00 00       	callq  2710 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    2710:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2717:	48 89 c7             	mov    %rax,%rdi
    271a:	e8 00 00 00 00       	callq  271f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    271f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2726:	48 89 c7             	mov    %rax,%rdi
    2729:	e8 00 00 00 00       	callq  272e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    272e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2735:	48 89 c7             	mov    %rax,%rdi
    2738:	e8 00 00 00 00       	callq  273d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    273d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2744:	00 00 00 
    int lineInner = 0;
    2747:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    274e:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    2751:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2758:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    275f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2764:	ba 00 00 00 00       	mov    $0x0,%edx
    2769:	48 89 c7             	mov    %rax,%rdi
    276c:	e8 00 00 00 00       	callq  2771 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    2771:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    2777:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    277e:	0f 88 35 03 00 00    	js     2ab9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    2784:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    278a:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2790:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2793:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    279a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    279e:	48 89 d6             	mov    %rdx,%rsi
    27a1:	48 89 c7             	mov    %rax,%rdi
    27a4:	e8 00 00 00 00       	callq  27a9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    27a9:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    27ad:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    27b4:	89 da                	mov    %ebx,%edx
    27b6:	48 89 ce             	mov    %rcx,%rsi
    27b9:	48 89 c7             	mov    %rax,%rdi
    27bc:	e8 00 00 00 00       	callq  27c1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    27c1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    27c7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27cb:	48 89 c7             	mov    %rax,%rdi
    27ce:	e8 00 00 00 00       	callq  27d3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    27d3:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    27da:	75 0c                	jne    27e8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    27dc:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    27e2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    27e8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    27ec:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    27f3:	ba 00 00 00 00       	mov    $0x0,%edx
    27f8:	48 89 ce             	mov    %rcx,%rsi
    27fb:	48 89 c7             	mov    %rax,%rdi
    27fe:	e8 00 00 00 00       	callq  2803 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    2803:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2807:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    280e:	48 89 d6             	mov    %rdx,%rsi
    2811:	48 89 c7             	mov    %rax,%rdi
    2814:	e8 00 00 00 00       	callq  2819 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    2819:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    281d:	48 89 c7             	mov    %rax,%rdi
    2820:	e8 00 00 00 00       	callq  2825 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    2825:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    282c:	48 89 c7             	mov    %rax,%rdi
    282f:	e8 00 00 00 00       	callq  2834 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    2834:	89 c3                	mov    %eax,%ebx
    2836:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    283d:	48 89 c7             	mov    %rax,%rdi
    2840:	e8 00 00 00 00       	callq  2845 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    2845:	89 da                	mov    %ebx,%edx
    2847:	29 c2                	sub    %eax,%edx
    2849:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    284d:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2854:	48 89 ce             	mov    %rcx,%rsi
    2857:	48 89 c7             	mov    %rax,%rdi
    285a:	e8 00 00 00 00       	callq  285f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    285f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2863:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    286a:	48 89 d6             	mov    %rdx,%rsi
    286d:	48 89 c7             	mov    %rax,%rdi
    2870:	e8 00 00 00 00       	callq  2875 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    2875:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2879:	48 89 c7             	mov    %rax,%rdi
    287c:	e8 00 00 00 00       	callq  2881 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    2881:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2888:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    288f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2894:	ba 00 00 00 00       	mov    $0x0,%edx
    2899:	48 89 c7             	mov    %rax,%rdi
    289c:	e8 00 00 00 00       	callq  28a1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    28a1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28a5:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    28ac:	ba 00 00 00 00       	mov    $0x0,%edx
    28b1:	48 89 ce             	mov    %rcx,%rsi
    28b4:	48 89 c7             	mov    %rax,%rdi
    28b7:	e8 00 00 00 00       	callq  28bc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    28bc:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    28c0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    28c7:	48 89 d6             	mov    %rdx,%rsi
    28ca:	48 89 c7             	mov    %rax,%rdi
    28cd:	e8 00 00 00 00       	callq  28d2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    28d2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28d6:	48 89 c7             	mov    %rax,%rdi
    28d9:	e8 00 00 00 00       	callq  28de <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    28de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    28e2:	be 7b 00 00 00       	mov    $0x7b,%esi
    28e7:	48 89 c7             	mov    %rax,%rdi
    28ea:	e8 00 00 00 00       	callq  28ef <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    28ef:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    28f5:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    28f9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2900:	b9 01 00 00 00       	mov    $0x1,%ecx
    2905:	48 89 c7             	mov    %rax,%rdi
    2908:	e8 00 00 00 00       	callq  290d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    290d:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    2913:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2919:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2920:	89 d6                	mov    %edx,%esi
    2922:	48 89 c7             	mov    %rax,%rdi
    2925:	e8 00 00 00 00       	callq  292a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    292a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    292e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2932:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2936:	48 89 c7             	mov    %rax,%rdi
    2939:	e8 00 00 00 00       	callq  293e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    293e:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    2945:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    294c:	00 00 00 
        int br=0;
    294f:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    2956:	00 00 00 

        while(bl != br)
    2959:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    295f:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    2965:	0f 84 a2 00 00 00    	je     2a0d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    296b:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    2972:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2978:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    297f:	89 d6                	mov    %edx,%esi
    2981:	48 89 c7             	mov    %rax,%rdi
    2984:	e8 00 00 00 00       	callq  2989 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    2989:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    298d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2991:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2995:	48 89 c7             	mov    %rax,%rdi
    2998:	e8 00 00 00 00       	callq  299d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    299d:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    29a4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29a8:	be 7b 00 00 00       	mov    $0x7b,%esi
    29ad:	48 89 c7             	mov    %rax,%rdi
    29b0:	e8 00 00 00 00       	callq  29b5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    29b5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29b9:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29c0:	89 d6                	mov    %edx,%esi
    29c2:	89 c7                	mov    %eax,%edi
    29c4:	e8 00 00 00 00       	callq  29c9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    29c9:	84 c0                	test   %al,%al
    29cb:	74 07                	je     29d4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    29cd:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    29d4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29d8:	be 7d 00 00 00       	mov    $0x7d,%esi
    29dd:	48 89 c7             	mov    %rax,%rdi
    29e0:	e8 00 00 00 00       	callq  29e5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    29e5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29e9:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29f0:	89 d6                	mov    %edx,%esi
    29f2:	89 c7                	mov    %eax,%edi
    29f4:	e8 00 00 00 00       	callq  29f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    29f9:	84 c0                	test   %al,%al
    29fb:	0f 84 58 ff ff ff    	je     2959 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    2a01:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    2a08:	e9 4c ff ff ff       	jmpq   2959 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2a0d:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a13:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2a19:	89 c1                	mov    %eax,%ecx
    2a1b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a1f:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2a25:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2a2c:	48 89 c7             	mov    %rax,%rdi
    2a2f:	e8 00 00 00 00       	callq  2a34 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2a34:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a38:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2a3f:	48 89 d6             	mov    %rdx,%rsi
    2a42:	48 89 c7             	mov    %rax,%rdi
    2a45:	e8 00 00 00 00       	callq  2a4a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2a4a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a4e:	48 89 c7             	mov    %rax,%rdi
    2a51:	e8 00 00 00 00       	callq  2a56 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2a56:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a5d:	48 89 c7             	mov    %rax,%rdi
    2a60:	e8 00 00 00 00       	callq  2a65 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2a65:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2a6b:	89 c2                	mov    %eax,%edx
    2a6d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a71:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2a78:	48 89 ce             	mov    %rcx,%rsi
    2a7b:	48 89 c7             	mov    %rax,%rdi
    2a7e:	e8 00 00 00 00       	callq  2a83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2a83:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a87:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a8e:	48 89 d6             	mov    %rdx,%rsi
    2a91:	48 89 c7             	mov    %rax,%rdi
    2a94:	e8 00 00 00 00       	callq  2a99 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2a99:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a9d:	48 89 c7             	mov    %rax,%rdi
    2aa0:	e8 00 00 00 00       	callq  2aa5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2aa5:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2aab:	83 c0 01             	add    $0x1,%eax
    2aae:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2ab4:	e9 98 fc ff ff       	jmpq   2751 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2ab9:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2aba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ac1:	48 89 c7             	mov    %rax,%rdi
    2ac4:	e8 00 00 00 00       	callq  2ac9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2ac9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2ad0:	48 89 c7             	mov    %rax,%rdi
    2ad3:	e8 00 00 00 00       	callq  2ad8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2ad8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2adf:	48 89 c7             	mov    %rax,%rdi
    2ae2:	e8 00 00 00 00       	callq  2ae7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2ae7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2aee:	48 89 c7             	mov    %rax,%rdi
    2af1:	e8 00 00 00 00       	callq  2af6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2af6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2afd:	48 89 c7             	mov    %rax,%rdi
    2b00:	e8 00 00 00 00       	callq  2b05 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2b05:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b0c:	48 89 c7             	mov    %rax,%rdi
    2b0f:	e8 00 00 00 00       	callq  2b14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2b14:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b1b:	48 89 c7             	mov    %rax,%rdi
    2b1e:	e8 00 00 00 00       	callq  2b23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2b23:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b2a:	48 89 c7             	mov    %rax,%rdi
    2b2d:	e8 00 00 00 00       	callq  2b32 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b32:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2b33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b37:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2b3e:	00 00 
    2b40:	0f 84 75 01 00 00    	je     2cbb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2b46:	e9 6b 01 00 00       	jmpq   2cb6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2b4b:	48 89 c3             	mov    %rax,%rbx
    2b4e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b55:	48 89 c7             	mov    %rax,%rdi
    2b58:	e8 00 00 00 00       	callq  2b5d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2b5d:	e9 26 01 00 00       	jmpq   2c88 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b62:	48 89 c3             	mov    %rax,%rbx
    2b65:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b6c:	48 89 c7             	mov    %rax,%rdi
    2b6f:	e8 00 00 00 00       	callq  2b74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2b74:	e9 0f 01 00 00       	jmpq   2c88 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b79:	48 89 c3             	mov    %rax,%rbx
    2b7c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2b83:	48 89 c7             	mov    %rax,%rdi
    2b86:	e8 00 00 00 00       	callq  2b8b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2b8b:	e9 e4 00 00 00       	jmpq   2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b90:	48 89 c3             	mov    %rax,%rbx
    2b93:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2b9a:	48 89 c7             	mov    %rax,%rdi
    2b9d:	e8 00 00 00 00       	callq  2ba2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2ba2:	e9 cd 00 00 00       	jmpq   2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2ba7:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2baa:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2bae:	48 89 c7             	mov    %rax,%rdi
    2bb1:	e8 00 00 00 00       	callq  2bb6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2bb6:	eb 58                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bb8:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2bbb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2bbf:	48 89 c7             	mov    %rax,%rdi
    2bc2:	e8 00 00 00 00       	callq  2bc7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2bc7:	eb 47                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bc9:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2bcc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2bd0:	48 89 c7             	mov    %rax,%rdi
    2bd3:	e8 00 00 00 00       	callq  2bd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2bd8:	eb 36                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bda:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2bdd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2be1:	48 89 c7             	mov    %rax,%rdi
    2be4:	e8 00 00 00 00       	callq  2be9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2be9:	eb 25                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2beb:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2bee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2bf2:	48 89 c7             	mov    %rax,%rdi
    2bf5:	e8 00 00 00 00       	callq  2bfa <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2bfa:	eb 14                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bfc:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2bff:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2c03:	48 89 c7             	mov    %rax,%rdi
    2c06:	e8 00 00 00 00       	callq  2c0b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2c0b:	eb 03                	jmp    2c10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c0d:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2c10:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c17:	48 89 c7             	mov    %rax,%rdi
    2c1a:	e8 00 00 00 00       	callq  2c1f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2c1f:	eb 03                	jmp    2c24 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2c21:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2c24:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2c2b:	48 89 c7             	mov    %rax,%rdi
    2c2e:	e8 00 00 00 00       	callq  2c33 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2c33:	eb 03                	jmp    2c38 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2c35:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2c38:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c3f:	48 89 c7             	mov    %rax,%rdi
    2c42:	e8 00 00 00 00       	callq  2c47 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2c47:	eb 03                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2c49:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2c4c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c53:	48 89 c7             	mov    %rax,%rdi
    2c56:	e8 00 00 00 00       	callq  2c5b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2c5b:	eb 03                	jmp    2c60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2c5d:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2c60:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c67:	48 89 c7             	mov    %rax,%rdi
    2c6a:	e8 00 00 00 00       	callq  2c6f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2c6f:	eb 03                	jmp    2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c71:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2c74:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2c7b:	48 89 c7             	mov    %rax,%rdi
    2c7e:	e8 00 00 00 00       	callq  2c83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2c83:	eb 03                	jmp    2c88 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c85:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2c88:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2c8f:	48 89 c7             	mov    %rax,%rdi
    2c92:	e8 00 00 00 00       	callq  2c97 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2c97:	eb 03                	jmp    2c9c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2c99:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2c9c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2ca3:	48 89 c7             	mov    %rax,%rdi
    2ca6:	e8 00 00 00 00       	callq  2cab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2cab:	48 89 d8             	mov    %rbx,%rax
    2cae:	48 89 c7             	mov    %rax,%rdi
    2cb1:	e8 00 00 00 00       	callq  2cb6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2cb6:	e8 00 00 00 00       	callq  2cbb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2cbb:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2cc2:	5b                   	pop    %rbx
    2cc3:	5d                   	pop    %rbp
    2cc4:	c3                   	retq   
    2cc5:	90                   	nop

0000000000002cc6 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2cc6:	55                   	push   %rbp
    2cc7:	48 89 e5             	mov    %rsp,%rbp
    2cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2cce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2cd2:	90                   	nop
    2cd3:	5d                   	pop    %rbp
    2cd4:	c3                   	retq   
    2cd5:	90                   	nop

0000000000002cd6 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2cd6:	55                   	push   %rbp
    2cd7:	48 89 e5             	mov    %rsp,%rbp
    2cda:	53                   	push   %rbx
    2cdb:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2ce2:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2ce9:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2cf0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2cf7:	00 00 
    2cf9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2cfd:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2cff:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2d06:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d0d:	48 89 d6             	mov    %rdx,%rsi
    2d10:	48 89 c7             	mov    %rax,%rdi
    2d13:	e8 00 00 00 00       	callq  2d18 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2d18:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2d1f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d26:	48 89 d6             	mov    %rdx,%rsi
    2d29:	48 89 c7             	mov    %rax,%rdi
    2d2c:	e8 00 00 00 00       	callq  2d31 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2d31:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d38:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d3f <_ZN6Parser11splitBlocksE7QString+0x69>
    2d3f:	48 89 c7             	mov    %rax,%rdi
    2d42:	e8 00 00 00 00       	callq  2d47 <_ZN6Parser11splitBlocksE7QString+0x71>
    2d47:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2d4e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d55:	ba 01 00 00 00       	mov    $0x1,%edx
    2d5a:	48 89 ce             	mov    %rcx,%rsi
    2d5d:	48 89 c7             	mov    %rax,%rdi
    2d60:	e8 00 00 00 00       	callq  2d65 <_ZN6Parser11splitBlocksE7QString+0x8f>
    2d65:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2d6b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d72:	48 89 c7             	mov    %rax,%rdi
    2d75:	e8 00 00 00 00       	callq  2d7a <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2d7a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2d81:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d88 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2d88:	48 89 c7             	mov    %rax,%rdi
    2d8b:	e8 00 00 00 00       	callq  2d90 <_ZN6Parser11splitBlocksE7QString+0xba>
    2d90:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2d97:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d9e:	ba 01 00 00 00       	mov    $0x1,%edx
    2da3:	48 89 ce             	mov    %rcx,%rsi
    2da6:	48 89 c7             	mov    %rax,%rdi
    2da9:	e8 00 00 00 00       	callq  2dae <_ZN6Parser11splitBlocksE7QString+0xd8>
    2dae:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2db4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2dbb:	48 89 c7             	mov    %rax,%rdi
    2dbe:	e8 00 00 00 00       	callq  2dc3 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2dc3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2dca:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dd1 <_ZN6Parser11splitBlocksE7QString+0xfb>
    2dd1:	48 89 c7             	mov    %rax,%rdi
    2dd4:	e8 00 00 00 00       	callq  2dd9 <_ZN6Parser11splitBlocksE7QString+0x103>
    2dd9:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2de0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2de7:	ba 01 00 00 00       	mov    $0x1,%edx
    2dec:	48 89 ce             	mov    %rcx,%rsi
    2def:	48 89 c7             	mov    %rax,%rdi
    2df2:	e8 00 00 00 00       	callq  2df7 <_ZN6Parser11splitBlocksE7QString+0x121>
    2df7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2dfd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2e04:	48 89 c7             	mov    %rax,%rdi
    2e07:	e8 00 00 00 00       	callq  2e0c <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2e0c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e13:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e1a <_ZN6Parser11splitBlocksE7QString+0x144>
    2e1a:	48 89 c7             	mov    %rax,%rdi
    2e1d:	e8 00 00 00 00       	callq  2e22 <_ZN6Parser11splitBlocksE7QString+0x14c>
    2e22:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2e29:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e30:	ba 01 00 00 00       	mov    $0x1,%edx
    2e35:	48 89 ce             	mov    %rcx,%rsi
    2e38:	48 89 c7             	mov    %rax,%rdi
    2e3b:	e8 00 00 00 00       	callq  2e40 <_ZN6Parser11splitBlocksE7QString+0x16a>
    2e40:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2e46:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e4d:	48 89 c7             	mov    %rax,%rdi
    2e50:	e8 00 00 00 00       	callq  2e55 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2e55:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2e5b:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2e61:	74 43                	je     2ea6 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2e63:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e6a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e71 <_ZN6Parser11splitBlocksE7QString+0x19b>
    2e71:	48 89 c7             	mov    %rax,%rdi
    2e74:	e8 00 00 00 00       	callq  2e79 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2e79:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2e80:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2e87:	48 89 d6             	mov    %rdx,%rsi
    2e8a:	48 89 c7             	mov    %rax,%rdi
    2e8d:	e8 00 00 00 00       	callq  2e92 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2e92:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e99:	48 89 c7             	mov    %rax,%rdi
    2e9c:	e8 00 00 00 00       	callq  2ea1 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2ea1:	e9 d2 03 00 00       	jmpq   3278 <_ZN6Parser11splitBlocksE7QString+0x5a2>
    }

    if(BCL!=BCR){
    2ea6:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2eac:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2eb2:	74 43                	je     2ef7 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2eb4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ebb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ec2 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2ec2:	48 89 c7             	mov    %rax,%rdi
    2ec5:	e8 00 00 00 00       	callq  2eca <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2eca:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2ed1:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ed8:	48 89 d6             	mov    %rdx,%rsi
    2edb:	48 89 c7             	mov    %rax,%rdi
    2ede:	e8 00 00 00 00       	callq  2ee3 <_ZN6Parser11splitBlocksE7QString+0x20d>
    2ee3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2eea:	48 89 c7             	mov    %rax,%rdi
    2eed:	e8 00 00 00 00       	callq  2ef2 <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2ef2:	e9 81 03 00 00       	jmpq   3278 <_ZN6Parser11splitBlocksE7QString+0x5a2>
    }

    QByteArray BlockResult;
    2ef7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2efe:	48 89 c7             	mov    %rax,%rdi
    2f01:	e8 00 00 00 00       	callq  2f06 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2f06:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f0d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f14 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2f14:	48 89 c7             	mov    %rax,%rdi
    2f17:	e8 00 00 00 00       	callq  2f1c <_ZN6Parser11splitBlocksE7QString+0x246>
    2f1c:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2f23:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f2a:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f2f:	ba 01 00 00 00       	mov    $0x1,%edx
    2f34:	48 89 c7             	mov    %rax,%rdi
    2f37:	e8 00 00 00 00       	callq  2f3c <_ZN6Parser11splitBlocksE7QString+0x266>
    2f3c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f43:	48 89 c7             	mov    %rax,%rdi
    2f46:	e8 00 00 00 00       	callq  2f4b <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2f4b:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2f52:	00 00 00 
    QString blockName;
    2f55:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2f59:	48 89 c7             	mov    %rax,%rdi
    2f5c:	e8 00 00 00 00       	callq  2f61 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2f61:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2f68:	48 89 c7             	mov    %rax,%rdi
    2f6b:	e8 00 00 00 00       	callq  2f70 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2f70:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2f77:	00 00 00 
    int     line     = 0;
    2f7a:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2f81:	00 00 00 
    QString block;
    2f84:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2f88:	48 89 c7             	mov    %rax,%rdi
    2f8b:	e8 00 00 00 00       	callq  2f90 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2f90:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2f97:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f9e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fa3:	ba 00 00 00 00       	mov    $0x0,%edx
    2fa8:	48 89 c7             	mov    %rax,%rdi
    2fab:	e8 00 00 00 00       	callq  2fb0 <_ZN6Parser11splitBlocksE7QString+0x2da>
    2fb0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2fb6:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2fbd:	0f 88 7e 02 00 00    	js     3241 <_ZN6Parser11splitBlocksE7QString+0x56b>

        line = whatLine(str_copy, lineBase + i) + 1;
    2fc3:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2fc9:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    2fcf:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2fd2:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2fd9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2fdd:	48 89 d6             	mov    %rdx,%rsi
    2fe0:	48 89 c7             	mov    %rax,%rdi
    2fe3:	e8 00 00 00 00       	callq  2fe8 <_ZN6Parser11splitBlocksE7QString+0x312>
    2fe8:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2fec:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ff3:	89 da                	mov    %ebx,%edx
    2ff5:	48 89 ce             	mov    %rcx,%rsi
    2ff8:	48 89 c7             	mov    %rax,%rdi
    2ffb:	e8 00 00 00 00       	callq  3000 <_ZN6Parser11splitBlocksE7QString+0x32a>
    3000:	83 c0 01             	add    $0x1,%eax
    3003:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    3009:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    300d:	48 89 c7             	mov    %rax,%rdi
    3010:	e8 00 00 00 00       	callq  3015 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    3015:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3019:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    3020:	ba 01 00 00 00       	mov    $0x1,%edx
    3025:	48 89 ce             	mov    %rcx,%rsi
    3028:	48 89 c7             	mov    %rax,%rdi
    302b:	e8 00 00 00 00       	callq  3030 <_ZN6Parser11splitBlocksE7QString+0x35a>
    3030:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3034:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3038:	48 89 d6             	mov    %rdx,%rsi
    303b:	48 89 c7             	mov    %rax,%rdi
    303e:	e8 00 00 00 00       	callq  3043 <_ZN6Parser11splitBlocksE7QString+0x36d>
    3043:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3047:	48 89 c7             	mov    %rax,%rdi
    304a:	e8 00 00 00 00       	callq  304f <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    304f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3053:	be 7b 00 00 00       	mov    $0x7b,%esi
    3058:	48 89 c7             	mov    %rax,%rdi
    305b:	e8 00 00 00 00       	callq  3060 <_ZN6Parser11splitBlocksE7QString+0x38a>
    3060:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3066:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    306a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3071:	b9 01 00 00 00       	mov    $0x1,%ecx
    3076:	48 89 c7             	mov    %rax,%rdi
    3079:	e8 00 00 00 00       	callq  307e <_ZN6Parser11splitBlocksE7QString+0x3a8>
    307e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    3084:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    308a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3091:	89 d6                	mov    %edx,%esi
    3093:	48 89 c7             	mov    %rax,%rdi
    3096:	e8 00 00 00 00       	callq  309b <_ZN6Parser11splitBlocksE7QString+0x3c5>
    309b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    309f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    30a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    30a7:	48 89 c7             	mov    %rax,%rdi
    30aa:	e8 00 00 00 00       	callq  30af <_ZN6Parser11splitBlocksE7QString+0x3d9>
    30af:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    30b6:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    30bd:	00 00 00 
        int br=0;
    30c0:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    30c7:	00 00 00 

        while(bl != br)
    30ca:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    30d0:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    30d6:	0f 84 a2 00 00 00    	je     317e <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    30dc:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    30e3:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    30e9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30f0:	89 d6                	mov    %edx,%esi
    30f2:	48 89 c7             	mov    %rax,%rdi
    30f5:	e8 00 00 00 00       	callq  30fa <_ZN6Parser11splitBlocksE7QString+0x424>
    30fa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    30fe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3102:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3106:	48 89 c7             	mov    %rax,%rdi
    3109:	e8 00 00 00 00       	callq  310e <_ZN6Parser11splitBlocksE7QString+0x438>
    310e:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    3115:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3119:	be 7b 00 00 00       	mov    $0x7b,%esi
    311e:	48 89 c7             	mov    %rax,%rdi
    3121:	e8 00 00 00 00       	callq  3126 <_ZN6Parser11splitBlocksE7QString+0x450>
    3126:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    312a:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3131:	89 d6                	mov    %edx,%esi
    3133:	89 c7                	mov    %eax,%edi
    3135:	e8 00 00 00 00       	callq  313a <_ZN6Parser11splitBlocksE7QString+0x464>
    313a:	84 c0                	test   %al,%al
    313c:	74 07                	je     3145 <_ZN6Parser11splitBlocksE7QString+0x46f>
    313e:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    3145:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3149:	be 7d 00 00 00       	mov    $0x7d,%esi
    314e:	48 89 c7             	mov    %rax,%rdi
    3151:	e8 00 00 00 00       	callq  3156 <_ZN6Parser11splitBlocksE7QString+0x480>
    3156:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    315a:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3161:	89 d6                	mov    %edx,%esi
    3163:	89 c7                	mov    %eax,%edi
    3165:	e8 00 00 00 00       	callq  316a <_ZN6Parser11splitBlocksE7QString+0x494>
    316a:	84 c0                	test   %al,%al
    316c:	0f 84 58 ff ff ff    	je     30ca <_ZN6Parser11splitBlocksE7QString+0x3f4>
    3172:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    3179:	e9 4c ff ff ff       	jmpq   30ca <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    317e:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3184:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    318a:	89 c1                	mov    %eax,%ecx
    318c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3190:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3196:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    319d:	48 89 c7             	mov    %rax,%rdi
    31a0:	e8 00 00 00 00       	callq  31a5 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    31a5:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    31a9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    31ad:	48 89 d6             	mov    %rdx,%rsi
    31b0:	48 89 c7             	mov    %rax,%rdi
    31b3:	e8 00 00 00 00       	callq  31b8 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    31b8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31bc:	48 89 c7             	mov    %rax,%rdi
    31bf:	e8 00 00 00 00       	callq  31c4 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    31c4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31cb:	48 89 c7             	mov    %rax,%rdi
    31ce:	e8 00 00 00 00       	callq  31d3 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    31d3:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    31d9:	89 c2                	mov    %eax,%edx
    31db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31df:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    31e6:	48 89 ce             	mov    %rcx,%rsi
    31e9:	48 89 c7             	mov    %rax,%rdi
    31ec:	e8 00 00 00 00       	callq  31f1 <_ZN6Parser11splitBlocksE7QString+0x51b>
    31f1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    31f5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31fc:	48 89 d6             	mov    %rdx,%rsi
    31ff:	48 89 c7             	mov    %rax,%rdi
    3202:	e8 00 00 00 00       	callq  3207 <_ZN6Parser11splitBlocksE7QString+0x531>
    3207:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    320b:	48 89 c7             	mov    %rax,%rdi
    320e:	e8 00 00 00 00       	callq  3213 <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    3213:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3219:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    321f:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    3226:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    322d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3231:	48 89 c6             	mov    %rax,%rsi
    3234:	48 89 d7             	mov    %rdx,%rdi
    3237:	e8 00 00 00 00       	callq  323c <_ZN6Parser11splitBlocksE7QString+0x566>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    323c:	e9 4f fd ff ff       	jmpq   2f90 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    3241:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3242:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3246:	48 89 c7             	mov    %rax,%rdi
    3249:	e8 00 00 00 00       	callq  324e <_ZN6Parser11splitBlocksE7QString+0x578>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    324e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3252:	48 89 c7             	mov    %rax,%rdi
    3255:	e8 00 00 00 00       	callq  325a <_ZN6Parser11splitBlocksE7QString+0x584>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    325a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3261:	48 89 c7             	mov    %rax,%rdi
    3264:	e8 00 00 00 00       	callq  3269 <_ZN6Parser11splitBlocksE7QString+0x593>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    3269:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3270:	48 89 c7             	mov    %rax,%rdi
    3273:	e8 00 00 00 00       	callq  3278 <_ZN6Parser11splitBlocksE7QString+0x5a2>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    3278:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    327f:	48 89 c7             	mov    %rax,%rdi
    3282:	e8 00 00 00 00       	callq  3287 <_ZN6Parser11splitBlocksE7QString+0x5b1>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3287:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    328e:	48 89 c7             	mov    %rax,%rdi
    3291:	e8 00 00 00 00       	callq  3296 <_ZN6Parser11splitBlocksE7QString+0x5c0>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    3296:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    329a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    32a1:	00 00 
    32a3:	0f 84 7e 01 00 00    	je     3427 <_ZN6Parser11splitBlocksE7QString+0x751>
    32a9:	e9 74 01 00 00       	jmpq   3422 <_ZN6Parser11splitBlocksE7QString+0x74c>
    32ae:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    32b1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    32b8:	48 89 c7             	mov    %rax,%rdi
    32bb:	e8 00 00 00 00       	callq  32c0 <_ZN6Parser11splitBlocksE7QString+0x5ea>
    32c0:	e9 2f 01 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    32c5:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    32c8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    32cf:	48 89 c7             	mov    %rax,%rdi
    32d2:	e8 00 00 00 00       	callq  32d7 <_ZN6Parser11splitBlocksE7QString+0x601>
    32d7:	e9 18 01 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    32dc:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    32df:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    32e6:	48 89 c7             	mov    %rax,%rdi
    32e9:	e8 00 00 00 00       	callq  32ee <_ZN6Parser11splitBlocksE7QString+0x618>
    32ee:	e9 01 01 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    32f3:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    32f6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    32fd:	48 89 c7             	mov    %rax,%rdi
    3300:	e8 00 00 00 00       	callq  3305 <_ZN6Parser11splitBlocksE7QString+0x62f>
    3305:	e9 ea 00 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    330a:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    330d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3314:	48 89 c7             	mov    %rax,%rdi
    3317:	e8 00 00 00 00       	callq  331c <_ZN6Parser11splitBlocksE7QString+0x646>
    331c:	e9 d3 00 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    3321:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    3324:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    332b:	48 89 c7             	mov    %rax,%rdi
    332e:	e8 00 00 00 00       	callq  3333 <_ZN6Parser11splitBlocksE7QString+0x65d>
    3333:	e9 bc 00 00 00       	jmpq   33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    3338:	48 89 c3             	mov    %rax,%rbx
    333b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3342:	48 89 c7             	mov    %rax,%rdi
    3345:	e8 00 00 00 00       	callq  334a <_ZN6Parser11splitBlocksE7QString+0x674>
    334a:	e9 91 00 00 00       	jmpq   33e0 <_ZN6Parser11splitBlocksE7QString+0x70a>
    334f:	48 89 c3             	mov    %rax,%rbx
    3352:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3359:	48 89 c7             	mov    %rax,%rdi
    335c:	e8 00 00 00 00       	callq  3361 <_ZN6Parser11splitBlocksE7QString+0x68b>
    3361:	eb 7d                	jmp    33e0 <_ZN6Parser11splitBlocksE7QString+0x70a>
    3363:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    3366:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    336a:	48 89 c7             	mov    %rax,%rdi
    336d:	e8 00 00 00 00       	callq  3372 <_ZN6Parser11splitBlocksE7QString+0x69c>
    3372:	eb 36                	jmp    33aa <_ZN6Parser11splitBlocksE7QString+0x6d4>
    3374:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    3377:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    337b:	48 89 c7             	mov    %rax,%rdi
    337e:	e8 00 00 00 00       	callq  3383 <_ZN6Parser11splitBlocksE7QString+0x6ad>
    3383:	eb 25                	jmp    33aa <_ZN6Parser11splitBlocksE7QString+0x6d4>
    3385:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3388:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    338c:	48 89 c7             	mov    %rax,%rdi
    338f:	e8 00 00 00 00       	callq  3394 <_ZN6Parser11splitBlocksE7QString+0x6be>
    3394:	eb 14                	jmp    33aa <_ZN6Parser11splitBlocksE7QString+0x6d4>
    3396:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    3399:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    339d:	48 89 c7             	mov    %rax,%rdi
    33a0:	e8 00 00 00 00       	callq  33a5 <_ZN6Parser11splitBlocksE7QString+0x6cf>
    33a5:	eb 03                	jmp    33aa <_ZN6Parser11splitBlocksE7QString+0x6d4>
    33a7:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    33aa:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    33ae:	48 89 c7             	mov    %rax,%rdi
    33b1:	e8 00 00 00 00       	callq  33b6 <_ZN6Parser11splitBlocksE7QString+0x6e0>
    33b6:	eb 03                	jmp    33bb <_ZN6Parser11splitBlocksE7QString+0x6e5>
    33b8:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    33bb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33bf:	48 89 c7             	mov    %rax,%rdi
    33c2:	e8 00 00 00 00       	callq  33c7 <_ZN6Parser11splitBlocksE7QString+0x6f1>
    33c7:	eb 03                	jmp    33cc <_ZN6Parser11splitBlocksE7QString+0x6f6>
    33c9:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    33cc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33d3:	48 89 c7             	mov    %rax,%rdi
    33d6:	e8 00 00 00 00       	callq  33db <_ZN6Parser11splitBlocksE7QString+0x705>
    33db:	eb 03                	jmp    33e0 <_ZN6Parser11splitBlocksE7QString+0x70a>
    33dd:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    33e0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    33e7:	48 89 c7             	mov    %rax,%rdi
    33ea:	e8 00 00 00 00       	callq  33ef <_ZN6Parser11splitBlocksE7QString+0x719>
    33ef:	eb 03                	jmp    33f4 <_ZN6Parser11splitBlocksE7QString+0x71e>
    33f1:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    33f4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    33fb:	48 89 c7             	mov    %rax,%rdi
    33fe:	e8 00 00 00 00       	callq  3403 <_ZN6Parser11splitBlocksE7QString+0x72d>
    3403:	eb 03                	jmp    3408 <_ZN6Parser11splitBlocksE7QString+0x732>
    3405:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3408:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    340f:	48 89 c7             	mov    %rax,%rdi
    3412:	e8 00 00 00 00       	callq  3417 <_ZN6Parser11splitBlocksE7QString+0x741>
    3417:	48 89 d8             	mov    %rbx,%rax
    341a:	48 89 c7             	mov    %rax,%rdi
    341d:	e8 00 00 00 00       	callq  3422 <_ZN6Parser11splitBlocksE7QString+0x74c>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    3422:	e8 00 00 00 00       	callq  3427 <_ZN6Parser11splitBlocksE7QString+0x751>
    3427:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    342e:	5b                   	pop    %rbx
    342f:	5d                   	pop    %rbp
    3430:	c3                   	retq   
    3431:	90                   	nop

0000000000003432 <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    3432:	55                   	push   %rbp
    3433:	48 89 e5             	mov    %rsp,%rbp
    3436:	53                   	push   %rbx
    3437:	48 83 ec 48          	sub    $0x48,%rsp
    343b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    343f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3446:	00 00 
    3448:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    344c:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    344e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3452:	48 89 c7             	mov    %rax,%rdi
    3455:	e8 00 00 00 00       	callq  345a <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    345a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    345e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3465 <_ZN6Parser10globalSemsEv+0x33>
    3465:	48 89 c7             	mov    %rax,%rdi
    3468:	e8 00 00 00 00       	callq  346d <_ZN6Parser10globalSemsEv+0x3b>
    346d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3471:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    3475:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3479:	48 89 ce             	mov    %rcx,%rsi
    347c:	48 89 c7             	mov    %rax,%rdi
    347f:	e8 00 00 00 00       	callq  3484 <_ZN6Parser10globalSemsEv+0x52>
    3484:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3488:	48 89 c7             	mov    %rax,%rdi
    348b:	e8 00 00 00 00       	callq  3490 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    3490:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3494:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3498:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    349c:	48 89 ce             	mov    %rcx,%rsi
    349f:	48 89 c7             	mov    %rax,%rdi
    34a2:	e8 00 00 00 00       	callq  34a7 <_ZN6Parser10globalSemsEv+0x75>
    34a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34ab:	48 89 c7             	mov    %rax,%rdi
    34ae:	e8 00 00 00 00       	callq  34b3 <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34b7:	48 89 c7             	mov    %rax,%rdi
    34ba:	e8 00 00 00 00       	callq  34bf <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34bf:	90                   	nop
    34c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34c4:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    34cb:	00 00 
    34cd:	74 32                	je     3501 <_ZN6Parser10globalSemsEv+0xcf>
    34cf:	eb 2b                	jmp    34fc <_ZN6Parser10globalSemsEv+0xca>
    34d1:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    34d4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    34d8:	48 89 c7             	mov    %rax,%rdi
    34db:	e8 00 00 00 00       	callq  34e0 <_ZN6Parser10globalSemsEv+0xae>
    34e0:	eb 03                	jmp    34e5 <_ZN6Parser10globalSemsEv+0xb3>
    34e2:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34e5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34e9:	48 89 c7             	mov    %rax,%rdi
    34ec:	e8 00 00 00 00       	callq  34f1 <_ZN6Parser10globalSemsEv+0xbf>
    34f1:	48 89 d8             	mov    %rbx,%rax
    34f4:	48 89 c7             	mov    %rax,%rdi
    34f7:	e8 00 00 00 00       	callq  34fc <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34fc:	e8 00 00 00 00       	callq  3501 <_ZN6Parser10globalSemsEv+0xcf>
    3501:	48 83 c4 48          	add    $0x48,%rsp
    3505:	5b                   	pop    %rbx
    3506:	5d                   	pop    %rbp
    3507:	c3                   	retq   

0000000000003508 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    3508:	55                   	push   %rbp
    3509:	48 89 e5             	mov    %rsp,%rbp
    350c:	53                   	push   %rbx
    350d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    3514:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    351b:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    3522:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    3528:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    352f:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    3536:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    353d:	00 00 
    353f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3543:	31 c0                	xor    %eax,%eax
        QByteArray result;
    3545:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    354c:	48 89 c7             	mov    %rax,%rdi
    354f:	e8 00 00 00 00       	callq  3554 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    3554:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    355a:	0f be d0             	movsbl %al,%edx
    355d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3564:	89 d6                	mov    %edx,%esi
    3566:	48 89 c7             	mov    %rax,%rdi
    3569:	e8 00 00 00 00       	callq  356e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    356e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3575:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 357c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    357c:	48 89 c7             	mov    %rax,%rdi
    357f:	e8 00 00 00 00       	callq  3584 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    3584:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    358b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3592 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    3592:	48 89 c7             	mov    %rax,%rdi
    3595:	e8 00 00 00 00       	callq  359a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    359a:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    35a1:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    35a8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    35af:	b9 01 00 00 00       	mov    $0x1,%ecx
    35b4:	48 89 c7             	mov    %rax,%rdi
    35b7:	e8 00 00 00 00       	callq  35bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    35bc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35c3:	48 89 c7             	mov    %rax,%rdi
    35c6:	e8 00 00 00 00       	callq  35cb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    35cb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    35d2:	48 89 c7             	mov    %rax,%rdi
    35d5:	e8 00 00 00 00       	callq  35da <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    35da:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    35e1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35e8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    35e8:	48 89 c7             	mov    %rax,%rdi
    35eb:	e8 00 00 00 00       	callq  35f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    35f0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    35f7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35fe <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    35fe:	48 89 c7             	mov    %rax,%rdi
    3601:	e8 00 00 00 00       	callq  3606 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    3606:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    360d:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    3614:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    361b:	b9 01 00 00 00       	mov    $0x1,%ecx
    3620:	48 89 c7             	mov    %rax,%rdi
    3623:	e8 00 00 00 00       	callq  3628 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    3628:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    362f:	48 89 c7             	mov    %rax,%rdi
    3632:	e8 00 00 00 00       	callq  3637 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    3637:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    363e:	48 89 c7             	mov    %rax,%rdi
    3641:	e8 00 00 00 00       	callq  3646 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    3646:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    364d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3654 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    3654:	48 89 c7             	mov    %rax,%rdi
    3657:	e8 00 00 00 00       	callq  365c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    365c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3663:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 366a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    366a:	48 89 c7             	mov    %rax,%rdi
    366d:	e8 00 00 00 00       	callq  3672 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    3672:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    3679:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    3680:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3687:	b9 01 00 00 00       	mov    $0x1,%ecx
    368c:	48 89 c7             	mov    %rax,%rdi
    368f:	e8 00 00 00 00       	callq  3694 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    3694:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    369b:	48 89 c7             	mov    %rax,%rdi
    369e:	e8 00 00 00 00       	callq  36a3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    36a3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    36aa:	48 89 c7             	mov    %rax,%rdi
    36ad:	e8 00 00 00 00       	callq  36b2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    36b2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36b6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36bd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    36bd:	48 89 c7             	mov    %rax,%rdi
    36c0:	e8 00 00 00 00       	callq  36c5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    36c5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36c9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36d0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    36d0:	48 89 c7             	mov    %rax,%rdi
    36d3:	e8 00 00 00 00       	callq  36d8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    36d8:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    36dc:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    36e0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36e7:	b9 00 00 00 00       	mov    $0x0,%ecx
    36ec:	48 89 c7             	mov    %rax,%rdi
    36ef:	e8 00 00 00 00       	callq  36f4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    36f4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36f8:	48 89 c7             	mov    %rax,%rdi
    36fb:	e8 00 00 00 00       	callq  3700 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    3700:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3704:	48 89 c7             	mov    %rax,%rdi
    3707:	e8 00 00 00 00       	callq  370c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    370c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3710:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3717 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    3717:	48 89 c7             	mov    %rax,%rdi
    371a:	e8 00 00 00 00       	callq  371f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    371f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3723:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 372a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    372a:	48 89 c7             	mov    %rax,%rdi
    372d:	e8 00 00 00 00       	callq  3732 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    3732:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3736:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    373a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3741:	b9 00 00 00 00       	mov    $0x0,%ecx
    3746:	48 89 c7             	mov    %rax,%rdi
    3749:	e8 00 00 00 00       	callq  374e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    374e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3752:	48 89 c7             	mov    %rax,%rdi
    3755:	e8 00 00 00 00       	callq  375a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    375a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    375e:	48 89 c7             	mov    %rax,%rdi
    3761:	e8 00 00 00 00       	callq  3766 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    3766:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    376a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3771 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    3771:	48 89 c7             	mov    %rax,%rdi
    3774:	e8 00 00 00 00       	callq  3779 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    3779:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    377d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3781:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    3788:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    378e:	b9 00 00 00 00       	mov    $0x0,%ecx
    3793:	48 89 c7             	mov    %rax,%rdi
    3796:	e8 00 00 00 00       	callq  379b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    379b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    379f:	48 89 c7             	mov    %rax,%rdi
    37a2:	e8 00 00 00 00       	callq  37a7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    37a7:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    37ae:	00 00 00 
    37b1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37b5:	48 89 c7             	mov    %rax,%rdi
    37b8:	e8 00 00 00 00       	callq  37bd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    37bd:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    37c3:	0f 9f c0             	setg   %al
    37c6:	84 c0                	test   %al,%al
    37c8:	74 6e                	je     3838 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    37ca:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    37d0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37d4:	89 d6                	mov    %edx,%esi
    37d6:	48 89 c7             	mov    %rax,%rdi
    37d9:	e8 00 00 00 00       	callq  37de <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    37de:	48 89 c7             	mov    %rax,%rdi
    37e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    37e5:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    37eb:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    37f2:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    37f9:	41 89 c8             	mov    %ecx,%r8d
    37fc:	48 89 d1             	mov    %rdx,%rcx
    37ff:	48 89 fa             	mov    %rdi,%rdx
    3802:	48 89 c7             	mov    %rax,%rdi
    3805:	e8 00 00 00 00       	callq  380a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    380a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    380e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3815:	48 89 d6             	mov    %rdx,%rsi
    3818:	48 89 c7             	mov    %rax,%rdi
    381b:	e8 00 00 00 00       	callq  3820 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    3820:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3824:	48 89 c7             	mov    %rax,%rdi
    3827:	e8 00 00 00 00       	callq  382c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    382c:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    3833:	e9 79 ff ff ff       	jmpq   37b1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    3838:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    383f:	48 89 c7             	mov    %rax,%rdi
    3842:	e8 00 00 00 00       	callq  3847 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    3847:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    384d:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    3854:	00 00 00 
    3857:	b8 1f 00 00 00       	mov    $0x1f,%eax
    385c:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    3862:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    3868:	7e 1d                	jle    3887 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    386a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3871:	be 00 00 00 00       	mov    $0x0,%esi
    3876:	48 89 c7             	mov    %rax,%rdi
    3879:	e8 00 00 00 00       	callq  387e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    387e:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    3885:	eb d0                	jmp    3857 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    3887:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    388d:	0f be d0             	movsbl %al,%edx
    3890:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3897:	89 d6                	mov    %edx,%esi
    3899:	48 89 c7             	mov    %rax,%rdi
    389c:	e8 00 00 00 00       	callq  38a1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    38a1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    38a8:	48 8d 90 e8 00 00 00 	lea    0xe8(%rax),%rdx
    38af:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38b6:	48 89 c6             	mov    %rax,%rsi
    38b9:	48 89 d7             	mov    %rdx,%rdi
    38bc:	e8 00 00 00 00       	callq  38c1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    38c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    38c5:	48 89 c7             	mov    %rax,%rdi
    38c8:	e8 00 00 00 00       	callq  38cd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    38cd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38d4:	48 89 c7             	mov    %rax,%rdi
    38d7:	e8 00 00 00 00       	callq  38dc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    38dc:	90                   	nop
    38dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38e1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    38e8:	00 00 
    38ea:	0f 84 30 01 00 00    	je     3a20 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    38f0:	e9 26 01 00 00       	jmpq   3a1b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    38f5:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    38f8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    38ff:	48 89 c7             	mov    %rax,%rdi
    3902:	e8 00 00 00 00       	callq  3907 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    3907:	eb 03                	jmp    390c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    3909:	48 89 c3             	mov    %rax,%rbx
    390c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3913:	48 89 c7             	mov    %rax,%rdi
    3916:	e8 00 00 00 00       	callq  391b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    391b:	e9 e1 00 00 00       	jmpq   3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3920:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    3923:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    392a:	48 89 c7             	mov    %rax,%rdi
    392d:	e8 00 00 00 00       	callq  3932 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    3932:	eb 03                	jmp    3937 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    3934:	48 89 c3             	mov    %rax,%rbx
    3937:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    393e:	48 89 c7             	mov    %rax,%rdi
    3941:	e8 00 00 00 00       	callq  3946 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    3946:	e9 b6 00 00 00       	jmpq   3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    394b:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    394e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3955:	48 89 c7             	mov    %rax,%rdi
    3958:	e8 00 00 00 00       	callq  395d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    395d:	eb 03                	jmp    3962 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    395f:	48 89 c3             	mov    %rax,%rbx
    3962:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3969:	48 89 c7             	mov    %rax,%rdi
    396c:	e8 00 00 00 00       	callq  3971 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    3971:	e9 8b 00 00 00       	jmpq   3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3976:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3979:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    397d:	48 89 c7             	mov    %rax,%rdi
    3980:	e8 00 00 00 00       	callq  3985 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    3985:	eb 03                	jmp    398a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    3987:	48 89 c3             	mov    %rax,%rbx
    398a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    398e:	48 89 c7             	mov    %rax,%rdi
    3991:	e8 00 00 00 00       	callq  3996 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    3996:	eb 69                	jmp    3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3998:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    399b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    399f:	48 89 c7             	mov    %rax,%rdi
    39a2:	e8 00 00 00 00       	callq  39a7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    39a7:	eb 03                	jmp    39ac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    39a9:	48 89 c3             	mov    %rax,%rbx
    39ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    39b0:	48 89 c7             	mov    %rax,%rdi
    39b3:	e8 00 00 00 00       	callq  39b8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    39b8:	eb 47                	jmp    3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39ba:	48 89 c3             	mov    %rax,%rbx
    39bd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39c1:	48 89 c7             	mov    %rax,%rdi
    39c4:	e8 00 00 00 00       	callq  39c9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    39c9:	eb 36                	jmp    3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39cb:	48 89 c3             	mov    %rax,%rbx
    39ce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39d2:	48 89 c7             	mov    %rax,%rdi
    39d5:	e8 00 00 00 00       	callq  39da <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    39da:	eb 25                	jmp    3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39dc:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    39df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    39e3:	48 89 c7             	mov    %rax,%rdi
    39e6:	e8 00 00 00 00       	callq  39eb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    39eb:	eb 03                	jmp    39f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    39ed:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    39f0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39f4:	48 89 c7             	mov    %rax,%rdi
    39f7:	e8 00 00 00 00       	callq  39fc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    39fc:	eb 03                	jmp    3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39fe:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3a01:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3a08:	48 89 c7             	mov    %rax,%rdi
    3a0b:	e8 00 00 00 00       	callq  3a10 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    3a10:	48 89 d8             	mov    %rbx,%rax
    3a13:	48 89 c7             	mov    %rax,%rdi
    3a16:	e8 00 00 00 00       	callq  3a1b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3a1b:	e8 00 00 00 00       	callq  3a20 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3a20:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3a27:	5b                   	pop    %rbx
    3a28:	5d                   	pop    %rbp
    3a29:	c3                   	retq   

0000000000003a2a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3a2a:	55                   	push   %rbp
    3a2b:	48 89 e5             	mov    %rsp,%rbp
    3a2e:	53                   	push   %rbx
    3a2f:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3a36:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3a3d:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3a44:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3a4b:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3a52:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3a59:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a60:	00 00 
    3a62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a66:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3a68:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3a6c:	be 20 00 00 00       	mov    $0x20,%esi
    3a71:	48 89 c7             	mov    %rax,%rdi
    3a74:	e8 00 00 00 00       	callq  3a79 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3a79:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3a7d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3a84:	b9 01 00 00 00       	mov    $0x1,%ecx
    3a89:	ba 00 00 00 00       	mov    $0x0,%edx
    3a8e:	48 89 c7             	mov    %rax,%rdi
    3a91:	e8 00 00 00 00       	callq  3a96 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3a96:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3a9c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3aa3:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3aa9:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3ab0:	89 d1                	mov    %edx,%ecx
    3ab2:	ba 00 00 00 00       	mov    $0x0,%edx
    3ab7:	48 89 c7             	mov    %rax,%rdi
    3aba:	e8 00 00 00 00       	callq  3abf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3abf:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3ac6:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3ac9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3acd:	be 28 00 00 00       	mov    $0x28,%esi
    3ad2:	48 89 c7             	mov    %rax,%rdi
    3ad5:	e8 00 00 00 00       	callq  3ada <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3ada:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3ae0:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3ae4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3aeb:	b9 01 00 00 00       	mov    $0x1,%ecx
    3af0:	48 89 c7             	mov    %rax,%rdi
    3af3:	e8 00 00 00 00       	callq  3af8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3af8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3afe:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b04:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b0a:	89 c1                	mov    %eax,%ecx
    3b0c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b10:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b16:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b1d:	48 89 c7             	mov    %rax,%rdi
    3b20:	e8 00 00 00 00       	callq  3b25 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3b25:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b29:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b2d:	48 89 d6             	mov    %rdx,%rsi
    3b30:	48 89 c7             	mov    %rax,%rdi
    3b33:	e8 00 00 00 00       	callq  3b38 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3b38:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b3c:	48 89 c7             	mov    %rax,%rdi
    3b3f:	e8 00 00 00 00       	callq  3b44 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3b44:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b4a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3b50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b54:	be 29 00 00 00       	mov    $0x29,%esi
    3b59:	48 89 c7             	mov    %rax,%rdi
    3b5c:	e8 00 00 00 00       	callq  3b61 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3b61:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b67:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b6b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b72:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b77:	48 89 c7             	mov    %rax,%rdi
    3b7a:	e8 00 00 00 00       	callq  3b7f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3b7f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3b85:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b8b:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b91:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3b94:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3b9a:	8d 50 01             	lea    0x1(%rax),%edx
    3b9d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ba1:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3ba8:	48 89 c7             	mov    %rax,%rdi
    3bab:	e8 00 00 00 00       	callq  3bb0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3bb0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bb4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3bbb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3bbb:	48 89 c7             	mov    %rax,%rdi
    3bbe:	e8 00 00 00 00       	callq  3bc3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3bc3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3bc7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3bcb:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3bcf:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3bd5:	b9 01 00 00 00       	mov    $0x1,%ecx
    3bda:	48 89 c7             	mov    %rax,%rdi
    3bdd:	e8 00 00 00 00       	callq  3be2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3be2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3be6:	48 89 c7             	mov    %rax,%rdi
    3be9:	e8 00 00 00 00       	callq  3bee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3bee:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3bf2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3bf6:	48 89 d6             	mov    %rdx,%rsi
    3bf9:	48 89 c7             	mov    %rax,%rdi
    3bfc:	e8 00 00 00 00       	callq  3c01 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3c01:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3c05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c09:	48 89 d6             	mov    %rdx,%rsi
    3c0c:	48 89 c7             	mov    %rax,%rdi
    3c0f:	e8 00 00 00 00       	callq  3c14 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3c14:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c1b:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3c22:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3c29:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3c2d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c31:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3c38:	45 89 c1             	mov    %r8d,%r9d
    3c3b:	49 89 f8             	mov    %rdi,%r8
    3c3e:	48 89 c7             	mov    %rax,%rdi
    3c41:	e8 00 00 00 00       	callq  3c46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3c46:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c4a:	48 89 c7             	mov    %rax,%rdi
    3c4d:	e8 00 00 00 00       	callq  3c52 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3c52:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c56:	48 89 c7             	mov    %rax,%rdi
    3c59:	e8 00 00 00 00       	callq  3c5e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3c5e:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c5f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c63:	48 89 c7             	mov    %rax,%rdi
    3c66:	e8 00 00 00 00       	callq  3c6b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3c6b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3c6f:	48 89 c7             	mov    %rax,%rdi
    3c72:	e8 00 00 00 00       	callq  3c77 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3c77:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3c7b:	48 89 c7             	mov    %rax,%rdi
    3c7e:	e8 00 00 00 00       	callq  3c83 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3c83:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3c8a:	48 89 c7             	mov    %rax,%rdi
    3c8d:	e8 00 00 00 00       	callq  3c92 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3c92:	90                   	nop
}
    3c93:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3c9e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3ca5:	00 00 
    3ca7:	0f 84 ee 00 00 00    	je     3d9b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3cad:	e9 e4 00 00 00       	jmpq   3d96 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3cb2:	48 89 c3             	mov    %rax,%rbx
    3cb5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3cb9:	48 89 c7             	mov    %rax,%rdi
    3cbc:	e8 00 00 00 00       	callq  3cc1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3cc1:	e9 b6 00 00 00       	jmpq   3d7c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cc6:	48 89 c3             	mov    %rax,%rbx
    3cc9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ccd:	48 89 c7             	mov    %rax,%rdi
    3cd0:	e8 00 00 00 00       	callq  3cd5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3cd5:	e9 a2 00 00 00       	jmpq   3d7c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cda:	48 89 c3             	mov    %rax,%rbx
    3cdd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ce1:	48 89 c7             	mov    %rax,%rdi
    3ce4:	e8 00 00 00 00       	callq  3ce9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3ce9:	eb 6f                	jmp    3d5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3ceb:	48 89 c3             	mov    %rax,%rbx
    3cee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3cf2:	48 89 c7             	mov    %rax,%rdi
    3cf5:	e8 00 00 00 00       	callq  3cfa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3cfa:	eb 5e                	jmp    3d5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3cfc:	48 89 c3             	mov    %rax,%rbx
    3cff:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3d03:	48 89 c7             	mov    %rax,%rdi
    3d06:	e8 00 00 00 00       	callq  3d0b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3d0b:	eb 17                	jmp    3d24 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d0d:	48 89 c3             	mov    %rax,%rbx
    3d10:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d17:	48 89 c7             	mov    %rax,%rdi
    3d1a:	e8 00 00 00 00       	callq  3d1f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3d1f:	eb 03                	jmp    3d24 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d21:	48 89 c3             	mov    %rax,%rbx
    3d24:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d28:	48 89 c7             	mov    %rax,%rdi
    3d2b:	e8 00 00 00 00       	callq  3d30 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3d30:	eb 17                	jmp    3d49 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d32:	48 89 c3             	mov    %rax,%rbx
    3d35:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d3c:	48 89 c7             	mov    %rax,%rdi
    3d3f:	e8 00 00 00 00       	callq  3d44 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3d44:	eb 03                	jmp    3d49 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d46:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d49:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d4d:	48 89 c7             	mov    %rax,%rdi
    3d50:	e8 00 00 00 00       	callq  3d55 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3d55:	eb 03                	jmp    3d5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d57:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d5a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d5e:	48 89 c7             	mov    %rax,%rdi
    3d61:	e8 00 00 00 00       	callq  3d66 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3d66:	eb 03                	jmp    3d6b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3d68:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3d6b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d6f:	48 89 c7             	mov    %rax,%rdi
    3d72:	e8 00 00 00 00       	callq  3d77 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3d77:	eb 03                	jmp    3d7c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d79:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3d7c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d83:	48 89 c7             	mov    %rax,%rdi
    3d86:	e8 00 00 00 00       	callq  3d8b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3d8b:	48 89 d8             	mov    %rbx,%rax
    3d8e:	48 89 c7             	mov    %rax,%rdi
    3d91:	e8 00 00 00 00       	callq  3d96 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3d96:	e8 00 00 00 00       	callq  3d9b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3d9b:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3da2:	5b                   	pop    %rbx
    3da3:	5d                   	pop    %rbp
    3da4:	c3                   	retq   
    3da5:	90                   	nop

0000000000003da6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3da6:	55                   	push   %rbp
    3da7:	48 89 e5             	mov    %rsp,%rbp
    3daa:	53                   	push   %rbx
    3dab:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3db2:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3db9:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3dc0:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3dc7:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3dce:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3dd5:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3ddc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3de3:	00 00 
    3de5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3de9:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3deb:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3df2:	48 89 c7             	mov    %rax,%rdi
    3df5:	e8 00 00 00 00       	callq  3dfa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3dfa:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3e01:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3e07:	ba 0a 00 00 00       	mov    $0xa,%edx
    3e0c:	89 ce                	mov    %ecx,%esi
    3e0e:	48 89 c7             	mov    %rax,%rdi
    3e11:	e8 00 00 00 00       	callq  3e16 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3e16:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e1d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e24:	48 89 d6             	mov    %rdx,%rsi
    3e27:	48 89 c7             	mov    %rax,%rdi
    3e2a:	e8 00 00 00 00       	callq  3e2f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3e2f:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3e36:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e3d:	48 89 d6             	mov    %rdx,%rsi
    3e40:	48 89 c7             	mov    %rax,%rdi
    3e43:	e8 00 00 00 00       	callq  3e48 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3e48:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e4f:	48 89 c7             	mov    %rax,%rdi
    3e52:	e8 00 00 00 00       	callq  3e57 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3e57:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e5e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e65:	48 89 d6             	mov    %rdx,%rsi
    3e68:	48 89 c7             	mov    %rax,%rdi
    3e6b:	e8 00 00 00 00       	callq  3e70 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3e70:	83 f0 01             	xor    $0x1,%eax
    3e73:	84 c0                	test   %al,%al
    3e75:	0f 84 b5 00 00 00    	je     3f30 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3e7b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e82:	48 89 c7             	mov    %rax,%rdi
    3e85:	e8 00 00 00 00       	callq  3e8a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3e8a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3e90:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3e97:	0f 8e c0 00 00 00    	jle    3f5d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3e9d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ea4:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3eab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3eb2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3eb2:	48 89 c7             	mov    %rax,%rdi
    3eb5:	e8 00 00 00 00       	callq  3eba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3eba:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ebe:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3ec5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3ecc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3ecc:	48 89 ce             	mov    %rcx,%rsi
    3ecf:	48 89 c7             	mov    %rax,%rdi
    3ed2:	e8 00 00 00 00       	callq  3ed7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3ed7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3edb:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3ee2:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3ee6:	48 89 ce             	mov    %rcx,%rsi
    3ee9:	48 89 c7             	mov    %rax,%rdi
    3eec:	e8 00 00 00 00       	callq  3ef1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3ef1:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3ef5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3efc:	48 89 d6             	mov    %rdx,%rsi
    3eff:	48 89 c7             	mov    %rax,%rdi
    3f02:	e8 00 00 00 00       	callq  3f07 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3f07:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f0b:	48 89 c7             	mov    %rax,%rdi
    3f0e:	e8 00 00 00 00       	callq  3f13 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3f13:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f17:	48 89 c7             	mov    %rax,%rdi
    3f1a:	e8 00 00 00 00       	callq  3f1f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3f1f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f26:	48 89 c7             	mov    %rax,%rdi
    3f29:	e8 00 00 00 00       	callq  3f2e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3f2e:	eb 2d                	jmp    3f5d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3f30:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f37:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f3e:	48 89 d6             	mov    %rdx,%rsi
    3f41:	48 89 c7             	mov    %rax,%rdi
    3f44:	e8 00 00 00 00       	callq  3f49 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3f49:	0f be d0             	movsbl %al,%edx
    3f4c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f53:	89 d6                	mov    %edx,%esi
    3f55:	48 89 c7             	mov    %rax,%rdi
    3f58:	e8 00 00 00 00       	callq  3f5d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3f5d:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3f64:	00 00 00 
    3f67:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f6e:	48 89 c7             	mov    %rax,%rdi
    3f71:	e8 00 00 00 00       	callq  3f76 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3f76:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3f7c:	0f 9f c0             	setg   %al
    3f7f:	84 c0                	test   %al,%al
    3f81:	0f 84 e2 02 00 00    	je     4269 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3f87:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f8e:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3f94:	89 d6                	mov    %edx,%esi
    3f96:	48 89 c7             	mov    %rax,%rdi
    3f99:	e8 00 00 00 00       	callq  3f9e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3f9e:	48 89 c2             	mov    %rax,%rdx
    3fa1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fa8:	48 89 d6             	mov    %rdx,%rsi
    3fab:	48 89 c7             	mov    %rax,%rdi
    3fae:	e8 00 00 00 00       	callq  3fb3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3fb3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fc1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3fc1:	48 89 c7             	mov    %rax,%rdi
    3fc4:	e8 00 00 00 00       	callq  3fc9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3fc9:	84 c0                	test   %al,%al
    3fcb:	74 19                	je     3fe6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3fcd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3fd4:	be 19 00 00 00       	mov    $0x19,%esi
    3fd9:	48 89 c7             	mov    %rax,%rdi
    3fdc:	e8 00 00 00 00       	callq  3fe1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3fe1:	e9 68 02 00 00       	jmpq   424e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    3fe6:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3fed:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3ff1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ff8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3ff8:	48 89 c7             	mov    %rax,%rdi
    3ffb:	e8 00 00 00 00       	callq  4000 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    4000:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4004:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    400b:	b9 01 00 00 00       	mov    $0x1,%ecx
    4010:	ba 00 00 00 00       	mov    $0x0,%edx
    4015:	48 89 c7             	mov    %rax,%rdi
    4018:	e8 00 00 00 00       	callq  401d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    401d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    4023:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4027:	48 89 c7             	mov    %rax,%rdi
    402a:	e8 00 00 00 00       	callq  402f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    402f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4033:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    4039:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4040:	48 89 ce             	mov    %rcx,%rsi
    4043:	48 89 c7             	mov    %rax,%rdi
    4046:	e8 00 00 00 00       	callq  404b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    404b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    404f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4053:	48 89 d6             	mov    %rdx,%rsi
    4056:	48 89 c7             	mov    %rax,%rdi
    4059:	e8 00 00 00 00       	callq  405e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    405e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4062:	48 89 c7             	mov    %rax,%rdi
    4065:	e8 00 00 00 00       	callq  406a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    406a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4071:	48 89 c7             	mov    %rax,%rdi
    4074:	e8 00 00 00 00       	callq  4079 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    4079:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    407f:	8d 50 ff             	lea    -0x1(%rax),%edx
    4082:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4086:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    408d:	48 89 ce             	mov    %rcx,%rsi
    4090:	48 89 c7             	mov    %rax,%rdi
    4093:	e8 00 00 00 00       	callq  4098 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    4098:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    409c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    40a0:	48 89 d6             	mov    %rdx,%rsi
    40a3:	48 89 c7             	mov    %rax,%rdi
    40a6:	e8 00 00 00 00       	callq  40ab <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    40ab:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40af:	48 89 c7             	mov    %rax,%rdi
    40b2:	e8 00 00 00 00       	callq  40b7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    40b7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40c2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    40c2:	48 89 c7             	mov    %rax,%rdi
    40c5:	e8 00 00 00 00       	callq  40ca <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    40ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40ce:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40d5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    40d5:	48 89 c7             	mov    %rax,%rdi
    40d8:	e8 00 00 00 00       	callq  40dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    40dd:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40e1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    40e8:	48 89 d6             	mov    %rdx,%rsi
    40eb:	48 89 c7             	mov    %rax,%rdi
    40ee:	e8 00 00 00 00       	callq  40f3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    40f3:	83 f0 01             	xor    $0x1,%eax
    40f6:	84 c0                	test   %al,%al
    40f8:	74 38                	je     4132 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    40fa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    40fe:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4102:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4109 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    4109:	48 89 c7             	mov    %rax,%rdi
    410c:	e8 00 00 00 00       	callq  4111 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    4111:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4115:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4119:	48 89 d6             	mov    %rdx,%rsi
    411c:	48 89 c7             	mov    %rax,%rdi
    411f:	e8 00 00 00 00       	callq  4124 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    4124:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4128:	48 89 c7             	mov    %rax,%rdi
    412b:	e8 00 00 00 00       	callq  4130 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    4130:	eb 74                	jmp    41a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    4132:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4136:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    413d:	48 89 d6             	mov    %rdx,%rsi
    4140:	48 89 c7             	mov    %rax,%rdi
    4143:	e8 00 00 00 00       	callq  4148 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    4148:	0f be d0             	movsbl %al,%edx
    414b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4152:	89 d6                	mov    %edx,%esi
    4154:	48 89 c7             	mov    %rax,%rdi
    4157:	e8 00 00 00 00       	callq  415c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    415c:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4160:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4167:	48 89 d6             	mov    %rdx,%rsi
    416a:	48 89 c7             	mov    %rax,%rdi
    416d:	e8 00 00 00 00       	callq  4172 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    4172:	89 c1                	mov    %eax,%ecx
    4174:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4178:	ba 0a 00 00 00       	mov    $0xa,%edx
    417d:	89 ce                	mov    %ecx,%esi
    417f:	48 89 c7             	mov    %rax,%rdi
    4182:	e8 00 00 00 00       	callq  4187 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    4187:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    418b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    418f:	48 89 d6             	mov    %rdx,%rsi
    4192:	48 89 c7             	mov    %rax,%rdi
    4195:	e8 00 00 00 00       	callq  419a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    419a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    419e:	48 89 c7             	mov    %rax,%rdi
    41a1:	e8 00 00 00 00       	callq  41a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    41a6:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41aa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41b1:	48 89 d6             	mov    %rdx,%rsi
    41b4:	48 89 c7             	mov    %rax,%rdi
    41b7:	e8 00 00 00 00       	callq  41bc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    41bc:	83 f0 01             	xor    $0x1,%eax
    41bf:	84 c0                	test   %al,%al
    41c1:	74 31                	je     41f4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    41c3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    41ca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    41ce:	ba 0a 00 00 00       	mov    $0xa,%edx
    41d3:	48 89 ce             	mov    %rcx,%rsi
    41d6:	48 89 c7             	mov    %rax,%rdi
    41d9:	e8 00 00 00 00       	callq  41de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    41de:	0f be d0             	movsbl %al,%edx
    41e1:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    41e8:	89 d6                	mov    %edx,%esi
    41ea:	48 89 c7             	mov    %rax,%rdi
    41ed:	e8 00 00 00 00       	callq  41f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    41f2:	eb 2a                	jmp    421e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    41f4:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41f8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41ff:	48 89 d6             	mov    %rdx,%rsi
    4202:	48 89 c7             	mov    %rax,%rdi
    4205:	e8 00 00 00 00       	callq  420a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    420a:	0f be d0             	movsbl %al,%edx
    420d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4214:	89 d6                	mov    %edx,%esi
    4216:	48 89 c7             	mov    %rax,%rdi
    4219:	e8 00 00 00 00       	callq  421e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    421e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4222:	48 89 c7             	mov    %rax,%rdi
    4225:	e8 00 00 00 00       	callq  422a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    422a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    422e:	48 89 c7             	mov    %rax,%rdi
    4231:	e8 00 00 00 00       	callq  4236 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4236:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    423a:	48 89 c7             	mov    %rax,%rdi
    423d:	e8 00 00 00 00       	callq  4242 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4242:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4246:	48 89 c7             	mov    %rax,%rdi
    4249:	e8 00 00 00 00       	callq  424e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    424e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4255:	48 89 c7             	mov    %rax,%rdi
    4258:	e8 00 00 00 00       	callq  425d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    425d:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    4264:	e9 fe fc ff ff       	jmpq   3f67 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4269:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    426a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4271:	48 89 c7             	mov    %rax,%rdi
    4274:	e8 00 00 00 00       	callq  4279 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4279:	e9 59 01 00 00       	jmpq   43d7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    427e:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    4281:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4288:	48 89 c7             	mov    %rax,%rdi
    428b:	e8 00 00 00 00       	callq  4290 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    4290:	e9 14 01 00 00       	jmpq   43a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4295:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    4298:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    429c:	48 89 c7             	mov    %rax,%rdi
    429f:	e8 00 00 00 00       	callq  42a4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    42a4:	eb 03                	jmp    42a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    42a6:	48 89 c3             	mov    %rax,%rbx
    42a9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42ad:	48 89 c7             	mov    %rax,%rdi
    42b0:	e8 00 00 00 00       	callq  42b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    42b5:	eb 03                	jmp    42ba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    42b7:	48 89 c3             	mov    %rax,%rbx
    42ba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42c1:	48 89 c7             	mov    %rax,%rdi
    42c4:	e8 00 00 00 00       	callq  42c9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    42c9:	e9 db 00 00 00       	jmpq   43a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    42ce:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    42d1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    42d5:	48 89 c7             	mov    %rax,%rdi
    42d8:	e8 00 00 00 00       	callq  42dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    42dd:	e9 b3 00 00 00       	jmpq   4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42e2:	48 89 c3             	mov    %rax,%rbx
    42e5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42e9:	48 89 c7             	mov    %rax,%rdi
    42ec:	e8 00 00 00 00       	callq  42f1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    42f1:	e9 9f 00 00 00       	jmpq   4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42f6:	48 89 c3             	mov    %rax,%rbx
    42f9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42fd:	48 89 c7             	mov    %rax,%rdi
    4300:	e8 00 00 00 00       	callq  4305 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    4305:	e9 8b 00 00 00       	jmpq   4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    430a:	48 89 c3             	mov    %rax,%rbx
    430d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4311:	48 89 c7             	mov    %rax,%rdi
    4314:	e8 00 00 00 00       	callq  4319 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    4319:	eb 69                	jmp    4384 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    431b:	48 89 c3             	mov    %rax,%rbx
    431e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4322:	48 89 c7             	mov    %rax,%rdi
    4325:	e8 00 00 00 00       	callq  432a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    432a:	eb 58                	jmp    4384 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    432c:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    432f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4333:	48 89 c7             	mov    %rax,%rdi
    4336:	e8 00 00 00 00       	callq  433b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    433b:	eb 14                	jmp    4351 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    433d:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    4340:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4344:	48 89 c7             	mov    %rax,%rdi
    4347:	e8 00 00 00 00       	callq  434c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    434c:	eb 03                	jmp    4351 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    434e:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4351:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4355:	48 89 c7             	mov    %rax,%rdi
    4358:	e8 00 00 00 00       	callq  435d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    435d:	eb 03                	jmp    4362 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    435f:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4362:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4366:	48 89 c7             	mov    %rax,%rdi
    4369:	e8 00 00 00 00       	callq  436e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    436e:	eb 03                	jmp    4373 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    4370:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4373:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4377:	48 89 c7             	mov    %rax,%rdi
    437a:	e8 00 00 00 00       	callq  437f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    437f:	eb 03                	jmp    4384 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4381:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4384:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4388:	48 89 c7             	mov    %rax,%rdi
    438b:	e8 00 00 00 00       	callq  4390 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    4390:	eb 03                	jmp    4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4392:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4395:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    439c:	48 89 c7             	mov    %rax,%rdi
    439f:	e8 00 00 00 00       	callq  43a4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    43a4:	eb 03                	jmp    43a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    43a6:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    43a9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    43b0:	48 89 c7             	mov    %rax,%rdi
    43b3:	e8 00 00 00 00       	callq  43b8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    43b8:	eb 03                	jmp    43bd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    43ba:	48 89 c3             	mov    %rax,%rbx
    43bd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43c4:	48 89 c7             	mov    %rax,%rdi
    43c7:	e8 00 00 00 00       	callq  43cc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    43cc:	48 89 d8             	mov    %rbx,%rax
    43cf:	48 89 c7             	mov    %rax,%rdi
    43d2:	e8 00 00 00 00       	callq  43d7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    43d7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43de:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    43e2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    43e9:	00 00 
    43eb:	74 05                	je     43f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43ed:	e8 00 00 00 00       	callq  43f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43f2:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    43f9:	5b                   	pop    %rbx
    43fa:	5d                   	pop    %rbp
    43fb:	c3                   	retq   

00000000000043fc <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    43fc:	55                   	push   %rbp
    43fd:	48 89 e5             	mov    %rsp,%rbp
    4400:	53                   	push   %rbx
    4401:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    4408:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    440f:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    4416:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    441d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4424:	00 00 
    4426:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    442a:	31 c0                	xor    %eax,%eax
    QByteArray result;
    442c:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4433:	48 89 c7             	mov    %rax,%rdi
    4436:	e8 00 00 00 00       	callq  443b <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    443b:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4442:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4449 <_ZN6Parser11compileAtomE7QString+0x4d>
    4449:	48 89 c7             	mov    %rax,%rdi
    444c:	e8 00 00 00 00       	callq  4451 <_ZN6Parser11compileAtomE7QString+0x55>
    4451:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    4458:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    445f:	b9 00 00 00 00       	mov    $0x0,%ecx
    4464:	ba 01 00 00 00       	mov    $0x1,%edx
    4469:	48 89 c7             	mov    %rax,%rdi
    446c:	e8 00 00 00 00       	callq  4471 <_ZN6Parser11compileAtomE7QString+0x75>
    4471:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4478:	48 89 c7             	mov    %rax,%rdi
    447b:	e8 00 00 00 00       	callq  4480 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    4480:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4487:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 448e <_ZN6Parser11compileAtomE7QString+0x92>
    448e:	48 89 c7             	mov    %rax,%rdi
    4491:	e8 00 00 00 00       	callq  4496 <_ZN6Parser11compileAtomE7QString+0x9a>
    4496:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    449d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    44a4:	b9 00 00 00 00       	mov    $0x0,%ecx
    44a9:	ba 01 00 00 00       	mov    $0x1,%edx
    44ae:	48 89 c7             	mov    %rax,%rdi
    44b1:	e8 00 00 00 00       	callq  44b6 <_ZN6Parser11compileAtomE7QString+0xba>
    44b6:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44bd:	48 89 c7             	mov    %rax,%rdi
    44c0:	e8 00 00 00 00       	callq  44c5 <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    44c5:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44cc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 44d3 <_ZN6Parser11compileAtomE7QString+0xd7>
    44d3:	48 89 c7             	mov    %rax,%rdi
    44d6:	e8 00 00 00 00       	callq  44db <_ZN6Parser11compileAtomE7QString+0xdf>
    44db:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    44e2:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    44e9:	b9 00 00 00 00       	mov    $0x0,%ecx
    44ee:	ba 01 00 00 00       	mov    $0x1,%edx
    44f3:	48 89 c7             	mov    %rax,%rdi
    44f6:	e8 00 00 00 00       	callq  44fb <_ZN6Parser11compileAtomE7QString+0xff>
    44fb:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4502:	48 89 c7             	mov    %rax,%rdi
    4505:	e8 00 00 00 00       	callq  450a <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    450a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    450e:	48 89 c7             	mov    %rax,%rdi
    4511:	e8 00 00 00 00       	callq  4516 <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    4516:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    451d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4521:	48 89 d6             	mov    %rdx,%rsi
    4524:	48 89 c7             	mov    %rax,%rdi
    4527:	e8 00 00 00 00       	callq  452c <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    452c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4533:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4537:	48 89 d6             	mov    %rdx,%rsi
    453a:	48 89 c7             	mov    %rax,%rdi
    453d:	e8 00 00 00 00       	callq  4542 <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4542:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4549:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4550 <_ZN6Parser11compileAtomE7QString+0x154>
    4550:	48 89 c7             	mov    %rax,%rdi
    4553:	e8 00 00 00 00       	callq  4558 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    4558:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    455f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4566:	b9 00 00 00 00       	mov    $0x0,%ecx
    456b:	ba 01 00 00 00       	mov    $0x1,%edx
    4570:	48 89 c7             	mov    %rax,%rdi
    4573:	e8 00 00 00 00       	callq  4578 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4578:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    457f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4586 <_ZN6Parser11compileAtomE7QString+0x18a>
    4586:	48 89 c7             	mov    %rax,%rdi
    4589:	e8 00 00 00 00       	callq  458e <_ZN6Parser11compileAtomE7QString+0x192>
    458e:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    4595:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    459c:	b9 00 00 00 00       	mov    $0x0,%ecx
    45a1:	ba 01 00 00 00       	mov    $0x1,%edx
    45a6:	48 89 c7             	mov    %rax,%rdi
    45a9:	e8 00 00 00 00       	callq  45ae <_ZN6Parser11compileAtomE7QString+0x1b2>
    45ae:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    45b5:	48 89 c7             	mov    %rax,%rdi
    45b8:	e8 00 00 00 00       	callq  45bd <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    45bd:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45cb <_ZN6Parser11compileAtomE7QString+0x1cf>
    45cb:	48 89 c7             	mov    %rax,%rdi
    45ce:	e8 00 00 00 00       	callq  45d3 <_ZN6Parser11compileAtomE7QString+0x1d7>
    45d3:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    45da:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    45e1:	b9 00 00 00 00       	mov    $0x0,%ecx
    45e6:	ba 01 00 00 00       	mov    $0x1,%edx
    45eb:	48 89 c7             	mov    %rax,%rdi
    45ee:	e8 00 00 00 00       	callq  45f3 <_ZN6Parser11compileAtomE7QString+0x1f7>
    45f3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45fa:	48 89 c7             	mov    %rax,%rdi
    45fd:	e8 00 00 00 00       	callq  4602 <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4602:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4609:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4610 <_ZN6Parser11compileAtomE7QString+0x214>
    4610:	48 89 c7             	mov    %rax,%rdi
    4613:	e8 00 00 00 00       	callq  4618 <_ZN6Parser11compileAtomE7QString+0x21c>
    4618:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    461f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4626:	b9 00 00 00 00       	mov    $0x0,%ecx
    462b:	ba 01 00 00 00       	mov    $0x1,%edx
    4630:	48 89 c7             	mov    %rax,%rdi
    4633:	e8 00 00 00 00       	callq  4638 <_ZN6Parser11compileAtomE7QString+0x23c>
    4638:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    463f:	48 89 c7             	mov    %rax,%rdi
    4642:	e8 00 00 00 00       	callq  4647 <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    4647:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    464e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4655 <_ZN6Parser11compileAtomE7QString+0x259>
    4655:	48 89 c7             	mov    %rax,%rdi
    4658:	e8 00 00 00 00       	callq  465d <_ZN6Parser11compileAtomE7QString+0x261>
    465d:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    4664:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    466b:	b9 00 00 00 00       	mov    $0x0,%ecx
    4670:	ba 01 00 00 00       	mov    $0x1,%edx
    4675:	48 89 c7             	mov    %rax,%rdi
    4678:	e8 00 00 00 00       	callq  467d <_ZN6Parser11compileAtomE7QString+0x281>
    467d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4684:	48 89 c7             	mov    %rax,%rdi
    4687:	e8 00 00 00 00       	callq  468c <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    468c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4690:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4697:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 469e <_ZN6Parser11compileAtomE7QString+0x2a2>
    469e:	48 89 c7             	mov    %rax,%rdi
    46a1:	e8 00 00 00 00       	callq  46a6 <_ZN6Parser11compileAtomE7QString+0x2aa>
    46a6:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    46aa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    46b1:	b9 00 00 00 00       	mov    $0x0,%ecx
    46b6:	ba 01 00 00 00       	mov    $0x1,%edx
    46bb:	48 89 c7             	mov    %rax,%rdi
    46be:	e8 00 00 00 00       	callq  46c3 <_ZN6Parser11compileAtomE7QString+0x2c7>
    46c3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46c7:	48 89 c7             	mov    %rax,%rdi
    46ca:	e8 00 00 00 00       	callq  46cf <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    46cf:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    46d6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    46da:	b9 00 00 00 00       	mov    $0x0,%ecx
    46df:	ba 01 00 00 00       	mov    $0x1,%edx
    46e4:	48 89 c7             	mov    %rax,%rdi
    46e7:	e8 00 00 00 00       	callq  46ec <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    46ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    46f0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46f7 <_ZN6Parser11compileAtomE7QString+0x2fb>
    46f7:	48 89 c7             	mov    %rax,%rdi
    46fa:	e8 00 00 00 00       	callq  46ff <_ZN6Parser11compileAtomE7QString+0x303>
    46ff:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4703:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4707:	b9 00 00 00 00       	mov    $0x0,%ecx
    470c:	ba 01 00 00 00       	mov    $0x1,%edx
    4711:	48 89 c7             	mov    %rax,%rdi
    4714:	e8 00 00 00 00       	callq  4719 <_ZN6Parser11compileAtomE7QString+0x31d>
    4719:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    471d:	48 89 c7             	mov    %rax,%rdi
    4720:	e8 00 00 00 00       	callq  4725 <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    4725:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    4726:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    472a:	48 89 c7             	mov    %rax,%rdi
    472d:	e8 00 00 00 00       	callq  4732 <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    4732:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4736:	48 89 c7             	mov    %rax,%rdi
    4739:	e8 00 00 00 00       	callq  473e <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    473e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4745:	48 89 c7             	mov    %rax,%rdi
    4748:	e8 00 00 00 00       	callq  474d <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    474d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4754:	48 89 c7             	mov    %rax,%rdi
    4757:	e8 00 00 00 00       	callq  475c <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    475c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4763:	48 89 c7             	mov    %rax,%rdi
    4766:	e8 00 00 00 00       	callq  476b <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    476b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4772:	48 89 c7             	mov    %rax,%rdi
    4775:	e8 00 00 00 00       	callq  477a <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    477a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4781:	48 89 c7             	mov    %rax,%rdi
    4784:	e8 00 00 00 00       	callq  4789 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4789:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4790:	48 89 c7             	mov    %rax,%rdi
    4793:	e8 00 00 00 00       	callq  4798 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4798:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    479f:	48 89 c7             	mov    %rax,%rdi
    47a2:	e8 00 00 00 00       	callq  47a7 <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    47a7:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    47ae:	48 89 c7             	mov    %rax,%rdi
    47b1:	e8 00 00 00 00       	callq  47b6 <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    47b6:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47bd:	48 89 c7             	mov    %rax,%rdi
    47c0:	e8 00 00 00 00       	callq  47c5 <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47c5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47c9:	48 89 c7             	mov    %rax,%rdi
    47cc:	e8 00 00 00 00       	callq  47d1 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    47d1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    47d8:	48 89 c7             	mov    %rax,%rdi
    47db:	e8 00 00 00 00       	callq  47e0 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    47e0:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    47e7:	48 89 c7             	mov    %rax,%rdi
    47ea:	e8 00 00 00 00       	callq  47ef <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    47ef:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    47f6:	48 89 c7             	mov    %rax,%rdi
    47f9:	e8 00 00 00 00       	callq  47fe <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    47fe:	e9 b8 02 00 00       	jmpq   4abb <_ZN6Parser11compileAtomE7QString+0x6bf>
    4803:	48 89 c3             	mov    %rax,%rbx
    4806:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    480d:	48 89 c7             	mov    %rax,%rdi
    4810:	e8 00 00 00 00       	callq  4815 <_ZN6Parser11compileAtomE7QString+0x419>
    4815:	e9 87 02 00 00       	jmpq   4aa1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    481a:	48 89 c3             	mov    %rax,%rbx
    481d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4824:	48 89 c7             	mov    %rax,%rdi
    4827:	e8 00 00 00 00       	callq  482c <_ZN6Parser11compileAtomE7QString+0x430>
    482c:	e9 70 02 00 00       	jmpq   4aa1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4831:	48 89 c3             	mov    %rax,%rbx
    4834:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    483b:	48 89 c7             	mov    %rax,%rdi
    483e:	e8 00 00 00 00       	callq  4843 <_ZN6Parser11compileAtomE7QString+0x447>
    4843:	e9 45 02 00 00       	jmpq   4a8d <_ZN6Parser11compileAtomE7QString+0x691>
    4848:	48 89 c3             	mov    %rax,%rbx
    484b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4852:	48 89 c7             	mov    %rax,%rdi
    4855:	e8 00 00 00 00       	callq  485a <_ZN6Parser11compileAtomE7QString+0x45e>
    485a:	e9 2e 02 00 00       	jmpq   4a8d <_ZN6Parser11compileAtomE7QString+0x691>
    485f:	48 89 c3             	mov    %rax,%rbx
    4862:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4869:	48 89 c7             	mov    %rax,%rdi
    486c:	e8 00 00 00 00       	callq  4871 <_ZN6Parser11compileAtomE7QString+0x475>
    4871:	e9 03 02 00 00       	jmpq   4a79 <_ZN6Parser11compileAtomE7QString+0x67d>
    4876:	48 89 c3             	mov    %rax,%rbx
    4879:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4880:	48 89 c7             	mov    %rax,%rdi
    4883:	e8 00 00 00 00       	callq  4888 <_ZN6Parser11compileAtomE7QString+0x48c>
    4888:	e9 ec 01 00 00       	jmpq   4a79 <_ZN6Parser11compileAtomE7QString+0x67d>
    488d:	48 89 c3             	mov    %rax,%rbx
    4890:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4897:	48 89 c7             	mov    %rax,%rdi
    489a:	e8 00 00 00 00       	callq  489f <_ZN6Parser11compileAtomE7QString+0x4a3>
    489f:	e9 60 01 00 00       	jmpq   4a04 <_ZN6Parser11compileAtomE7QString+0x608>
    48a4:	48 89 c3             	mov    %rax,%rbx
    48a7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    48ae:	48 89 c7             	mov    %rax,%rdi
    48b1:	e8 00 00 00 00       	callq  48b6 <_ZN6Parser11compileAtomE7QString+0x4ba>
    48b6:	e9 49 01 00 00       	jmpq   4a04 <_ZN6Parser11compileAtomE7QString+0x608>
    48bb:	48 89 c3             	mov    %rax,%rbx
    48be:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    48c5:	48 89 c7             	mov    %rax,%rdi
    48c8:	e8 00 00 00 00       	callq  48cd <_ZN6Parser11compileAtomE7QString+0x4d1>
    48cd:	e9 1e 01 00 00       	jmpq   49f0 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48d2:	48 89 c3             	mov    %rax,%rbx
    48d5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    48dc:	48 89 c7             	mov    %rax,%rdi
    48df:	e8 00 00 00 00       	callq  48e4 <_ZN6Parser11compileAtomE7QString+0x4e8>
    48e4:	e9 07 01 00 00       	jmpq   49f0 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48e9:	48 89 c3             	mov    %rax,%rbx
    48ec:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    48f3:	48 89 c7             	mov    %rax,%rdi
    48f6:	e8 00 00 00 00       	callq  48fb <_ZN6Parser11compileAtomE7QString+0x4ff>
    48fb:	e9 dc 00 00 00       	jmpq   49dc <_ZN6Parser11compileAtomE7QString+0x5e0>
    4900:	48 89 c3             	mov    %rax,%rbx
    4903:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    490a:	48 89 c7             	mov    %rax,%rdi
    490d:	e8 00 00 00 00       	callq  4912 <_ZN6Parser11compileAtomE7QString+0x516>
    4912:	e9 c5 00 00 00       	jmpq   49dc <_ZN6Parser11compileAtomE7QString+0x5e0>
    4917:	48 89 c3             	mov    %rax,%rbx
    491a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4921:	48 89 c7             	mov    %rax,%rdi
    4924:	e8 00 00 00 00       	callq  4929 <_ZN6Parser11compileAtomE7QString+0x52d>
    4929:	e9 9a 00 00 00       	jmpq   49c8 <_ZN6Parser11compileAtomE7QString+0x5cc>
    492e:	48 89 c3             	mov    %rax,%rbx
    4931:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4938:	48 89 c7             	mov    %rax,%rdi
    493b:	e8 00 00 00 00       	callq  4940 <_ZN6Parser11compileAtomE7QString+0x544>
    4940:	e9 83 00 00 00       	jmpq   49c8 <_ZN6Parser11compileAtomE7QString+0x5cc>
    4945:	48 89 c3             	mov    %rax,%rbx
    4948:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    494c:	48 89 c7             	mov    %rax,%rdi
    494f:	e8 00 00 00 00       	callq  4954 <_ZN6Parser11compileAtomE7QString+0x558>
    4954:	eb 5e                	jmp    49b4 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4956:	48 89 c3             	mov    %rax,%rbx
    4959:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4960:	48 89 c7             	mov    %rax,%rdi
    4963:	e8 00 00 00 00       	callq  4968 <_ZN6Parser11compileAtomE7QString+0x56c>
    4968:	eb 4a                	jmp    49b4 <_ZN6Parser11compileAtomE7QString+0x5b8>
    496a:	48 89 c3             	mov    %rax,%rbx
    496d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4971:	48 89 c7             	mov    %rax,%rdi
    4974:	e8 00 00 00 00       	callq  4979 <_ZN6Parser11compileAtomE7QString+0x57d>
    4979:	eb 14                	jmp    498f <_ZN6Parser11compileAtomE7QString+0x593>
    497b:	48 89 c3             	mov    %rax,%rbx
    497e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4982:	48 89 c7             	mov    %rax,%rdi
    4985:	e8 00 00 00 00       	callq  498a <_ZN6Parser11compileAtomE7QString+0x58e>
    498a:	eb 03                	jmp    498f <_ZN6Parser11compileAtomE7QString+0x593>
    498c:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    498f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4993:	48 89 c7             	mov    %rax,%rdi
    4996:	e8 00 00 00 00       	callq  499b <_ZN6Parser11compileAtomE7QString+0x59f>
    499b:	eb 03                	jmp    49a0 <_ZN6Parser11compileAtomE7QString+0x5a4>
    499d:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    49a0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    49a7:	48 89 c7             	mov    %rax,%rdi
    49aa:	e8 00 00 00 00       	callq  49af <_ZN6Parser11compileAtomE7QString+0x5b3>
    49af:	eb 03                	jmp    49b4 <_ZN6Parser11compileAtomE7QString+0x5b8>
    49b1:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    49b4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49bb:	48 89 c7             	mov    %rax,%rdi
    49be:	e8 00 00 00 00       	callq  49c3 <_ZN6Parser11compileAtomE7QString+0x5c7>
    49c3:	eb 03                	jmp    49c8 <_ZN6Parser11compileAtomE7QString+0x5cc>
    49c5:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    49c8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    49cf:	48 89 c7             	mov    %rax,%rdi
    49d2:	e8 00 00 00 00       	callq  49d7 <_ZN6Parser11compileAtomE7QString+0x5db>
    49d7:	eb 03                	jmp    49dc <_ZN6Parser11compileAtomE7QString+0x5e0>
    49d9:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    49dc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    49e3:	48 89 c7             	mov    %rax,%rdi
    49e6:	e8 00 00 00 00       	callq  49eb <_ZN6Parser11compileAtomE7QString+0x5ef>
    49eb:	eb 03                	jmp    49f0 <_ZN6Parser11compileAtomE7QString+0x5f4>
    49ed:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    49f0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    49f7:	48 89 c7             	mov    %rax,%rdi
    49fa:	e8 00 00 00 00       	callq  49ff <_ZN6Parser11compileAtomE7QString+0x603>
    49ff:	eb 03                	jmp    4a04 <_ZN6Parser11compileAtomE7QString+0x608>
    4a01:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4a04:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4a0b:	48 89 c7             	mov    %rax,%rdi
    4a0e:	e8 00 00 00 00       	callq  4a13 <_ZN6Parser11compileAtomE7QString+0x617>
    4a13:	eb 03                	jmp    4a18 <_ZN6Parser11compileAtomE7QString+0x61c>
    4a15:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4a18:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a1f:	48 89 c7             	mov    %rax,%rdi
    4a22:	e8 00 00 00 00       	callq  4a27 <_ZN6Parser11compileAtomE7QString+0x62b>
    4a27:	eb 03                	jmp    4a2c <_ZN6Parser11compileAtomE7QString+0x630>
    4a29:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4a2c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4a33:	48 89 c7             	mov    %rax,%rdi
    4a36:	e8 00 00 00 00       	callq  4a3b <_ZN6Parser11compileAtomE7QString+0x63f>
    4a3b:	eb 03                	jmp    4a40 <_ZN6Parser11compileAtomE7QString+0x644>
    4a3d:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4a40:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a47:	48 89 c7             	mov    %rax,%rdi
    4a4a:	e8 00 00 00 00       	callq  4a4f <_ZN6Parser11compileAtomE7QString+0x653>
    4a4f:	eb 03                	jmp    4a54 <_ZN6Parser11compileAtomE7QString+0x658>
    4a51:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4a54:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a58:	48 89 c7             	mov    %rax,%rdi
    4a5b:	e8 00 00 00 00       	callq  4a60 <_ZN6Parser11compileAtomE7QString+0x664>
    4a60:	eb 03                	jmp    4a65 <_ZN6Parser11compileAtomE7QString+0x669>
    4a62:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4a65:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4a6c:	48 89 c7             	mov    %rax,%rdi
    4a6f:	e8 00 00 00 00       	callq  4a74 <_ZN6Parser11compileAtomE7QString+0x678>
    4a74:	eb 03                	jmp    4a79 <_ZN6Parser11compileAtomE7QString+0x67d>
    4a76:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4a79:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4a80:	48 89 c7             	mov    %rax,%rdi
    4a83:	e8 00 00 00 00       	callq  4a88 <_ZN6Parser11compileAtomE7QString+0x68c>
    4a88:	eb 03                	jmp    4a8d <_ZN6Parser11compileAtomE7QString+0x691>
    4a8a:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4a8d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4a94:	48 89 c7             	mov    %rax,%rdi
    4a97:	e8 00 00 00 00       	callq  4a9c <_ZN6Parser11compileAtomE7QString+0x6a0>
    4a9c:	eb 03                	jmp    4aa1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4a9e:	48 89 c3             	mov    %rax,%rbx
    4aa1:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4aa8:	48 89 c7             	mov    %rax,%rdi
    4aab:	e8 00 00 00 00       	callq  4ab0 <_ZN6Parser11compileAtomE7QString+0x6b4>
    4ab0:	48 89 d8             	mov    %rbx,%rax
    4ab3:	48 89 c7             	mov    %rax,%rdi
    4ab6:	e8 00 00 00 00       	callq  4abb <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4abb:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4ac2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4ac6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4acd:	00 00 
    4acf:	74 05                	je     4ad6 <_ZN6Parser11compileAtomE7QString+0x6da>
    4ad1:	e8 00 00 00 00       	callq  4ad6 <_ZN6Parser11compileAtomE7QString+0x6da>
    4ad6:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4add:	5b                   	pop    %rbx
    4ade:	5d                   	pop    %rbp
    4adf:	c3                   	retq   

0000000000004ae0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4ae0:	55                   	push   %rbp
    4ae1:	48 89 e5             	mov    %rsp,%rbp
    4ae4:	53                   	push   %rbx
    4ae5:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4aec:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4af3:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4afa:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4b01:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4b08:	00 00 
    4b0a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4b0e:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4b10:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4b14:	48 89 c7             	mov    %rax,%rdi
    4b17:	e8 00 00 00 00       	callq  4b1c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4b1c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4b23:	48 89 c7             	mov    %rax,%rdi
    4b26:	e8 00 00 00 00       	callq  4b2b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4b2b:	85 c0                	test   %eax,%eax
    4b2d:	0f 9e c0             	setle  %al
    4b30:	84 c0                	test   %al,%al
    4b32:	74 0a                	je     4b3e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4b34:	bb 00 00 00 00       	mov    $0x0,%ebx
    4b39:	e9 27 01 00 00       	jmpq   4c65 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4b3e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b42:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b49 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4b49:	48 89 c7             	mov    %rax,%rdi
    4b4c:	e8 00 00 00 00       	callq  4b51 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4b51:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4b55:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b59:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b5e:	ba 00 00 00 00       	mov    $0x0,%edx
    4b63:	48 89 c7             	mov    %rax,%rdi
    4b66:	e8 00 00 00 00       	callq  4b6b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4b6b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b6f:	48 89 c7             	mov    %rax,%rdi
    4b72:	e8 00 00 00 00       	callq  4b77 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4b77:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b7b:	be 00 00 00 00       	mov    $0x0,%esi
    4b80:	48 89 c7             	mov    %rax,%rdi
    4b83:	e8 00 00 00 00       	callq  4b88 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4b88:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4b8f:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4b92:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4b99:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b9d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4ba2:	48 89 c7             	mov    %rax,%rdi
    4ba5:	e8 00 00 00 00       	callq  4baa <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4baa:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4bad:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4bb1:	0f 95 c0             	setne  %al
    4bb4:	84 c0                	test   %al,%al
    4bb6:	0f 84 98 00 00 00    	je     4c54 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4bbc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bc0:	48 89 c7             	mov    %rax,%rdi
    4bc3:	e8 00 00 00 00       	callq  4bc8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4bc8:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4bcb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bcf:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bd3:	ba 00 00 00 00       	mov    $0x0,%edx
    4bd8:	48 89 ce             	mov    %rcx,%rsi
    4bdb:	48 89 c7             	mov    %rax,%rdi
    4bde:	e8 00 00 00 00       	callq  4be3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4be3:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4be7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4bee:	48 89 d6             	mov    %rdx,%rsi
    4bf1:	48 89 c7             	mov    %rax,%rdi
    4bf4:	e8 00 00 00 00       	callq  4bf9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4bf9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bfd:	48 89 c7             	mov    %rax,%rdi
    4c00:	e8 00 00 00 00       	callq  4c05 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4c05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c09:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4c0d:	ba 00 00 00 00       	mov    $0x0,%edx
    4c12:	48 89 ce             	mov    %rcx,%rsi
    4c15:	48 89 c7             	mov    %rax,%rdi
    4c18:	e8 00 00 00 00       	callq  4c1d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4c1d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c21:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4c25:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c2c:	48 89 ce             	mov    %rcx,%rsi
    4c2f:	48 89 c7             	mov    %rax,%rdi
    4c32:	e8 00 00 00 00       	callq  4c37 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4c37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c3b:	48 89 c7             	mov    %rax,%rdi
    4c3e:	e8 00 00 00 00       	callq  4c43 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4c43:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c47:	48 89 c7             	mov    %rax,%rdi
    4c4a:	e8 00 00 00 00       	callq  4c4f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c4f:	e9 3b ff ff ff       	jmpq   4b8f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c54:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c58:	48 89 c7             	mov    %rax,%rdi
    4c5b:	e8 00 00 00 00       	callq  4c60 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4c60:	bb 01 00 00 00       	mov    $0x1,%ebx
    4c65:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4c69:	48 89 c7             	mov    %rax,%rdi
    4c6c:	e8 00 00 00 00       	callq  4c71 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4c71:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4c74:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4c75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c79:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4c80:	00 00 
    4c82:	74 76                	je     4cfa <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4c84:	eb 6f                	jmp    4cf5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4c86:	48 89 c3             	mov    %rax,%rbx
    4c89:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c8d:	48 89 c7             	mov    %rax,%rdi
    4c90:	e8 00 00 00 00       	callq  4c95 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4c95:	eb 47                	jmp    4cde <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c97:	48 89 c3             	mov    %rax,%rbx
    4c9a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c9e:	48 89 c7             	mov    %rax,%rdi
    4ca1:	e8 00 00 00 00       	callq  4ca6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4ca6:	eb 36                	jmp    4cde <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4ca8:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4cab:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4caf:	48 89 c7             	mov    %rax,%rdi
    4cb2:	e8 00 00 00 00       	callq  4cb7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4cb7:	eb 14                	jmp    4ccd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cb9:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4cbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4cc0:	48 89 c7             	mov    %rax,%rdi
    4cc3:	e8 00 00 00 00       	callq  4cc8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4cc8:	eb 03                	jmp    4ccd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cca:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4ccd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4cd1:	48 89 c7             	mov    %rax,%rdi
    4cd4:	e8 00 00 00 00       	callq  4cd9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4cd9:	eb 03                	jmp    4cde <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4cdb:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4cde:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4ce2:	48 89 c7             	mov    %rax,%rdi
    4ce5:	e8 00 00 00 00       	callq  4cea <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4cea:	48 89 d8             	mov    %rbx,%rax
    4ced:	48 89 c7             	mov    %rax,%rdi
    4cf0:	e8 00 00 00 00       	callq  4cf5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4cf5:	e8 00 00 00 00       	callq  4cfa <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4cfa:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4d01:	5b                   	pop    %rbx
    4d02:	5d                   	pop    %rbp
    4d03:	c3                   	retq   

0000000000004d04 <_ZN6Parser12compileBlockER11QStringList>:

QByteArray Parser::compileBlock(QStringList &block){
    4d04:	55                   	push   %rbp
    4d05:	48 89 e5             	mov    %rsp,%rbp
    4d08:	48 83 ec 30          	sub    $0x30,%rsp
    4d0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4d10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4d14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4d18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d1f:	00 00 
    4d21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d25:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d2b:	48 89 c7             	mov    %rax,%rdi
    4d2e:	e8 00 00 00 00       	callq  4d33 <_ZN6Parser12compileBlockER11QStringList+0x2f>

    return result;
    4d33:	90                   	nop
}
    4d34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d38:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4d3c:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d43:	00 00 
    4d45:	74 05                	je     4d4c <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d47:	e8 00 00 00 00       	callq  4d4c <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d4c:	c9                   	leaveq 
    4d4d:	c3                   	retq   

0000000000004d4e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4d4e:	55                   	push   %rbp
    4d4f:	48 89 e5             	mov    %rsp,%rbp
    4d52:	53                   	push   %rbx
    4d53:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4d5a:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4d61:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4d68:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4d6f:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4d76:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d7d:	00 00 
    4d7f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4d83:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4d85:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4d8c:	48 89 c7             	mov    %rax,%rdi
    4d8f:	e8 00 00 00 00       	callq  4d94 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4d94:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4d9b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4da2:	b9 00 00 00 00       	mov    $0x0,%ecx
    4da7:	ba 01 00 00 00       	mov    $0x1,%edx
    4dac:	48 89 c7             	mov    %rax,%rdi
    4daf:	e8 00 00 00 00       	callq  4db4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4db4:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4dbb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4dc2:	48 89 d6             	mov    %rdx,%rsi
    4dc5:	48 89 c7             	mov    %rax,%rdi
    4dc8:	e8 00 00 00 00       	callq  4dcd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4dcd:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4dd4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4ddb:	48 89 d6             	mov    %rdx,%rsi
    4dde:	48 89 c7             	mov    %rax,%rdi
    4de1:	e8 00 00 00 00       	callq  4de6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4de6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4ded:	48 89 c7             	mov    %rax,%rdi
    4df0:	e8 00 00 00 00       	callq  4df5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4df5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4dfc:	48 89 c7             	mov    %rax,%rdi
    4dff:	e8 00 00 00 00       	callq  4e04 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4e04:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4e0b:	48 89 c7             	mov    %rax,%rdi
    4e0e:	e8 00 00 00 00       	callq  4e13 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4e13:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4e1a:	48 89 c7             	mov    %rax,%rdi
    4e1d:	e8 00 00 00 00       	callq  4e22 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4e22:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4e29:	00 00 00 
    int     lineBase = 0;
    4e2c:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4e33:	00 00 00 
    int     line     = 0;
    4e36:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4e3d:	00 00 00 

    unsigned int BFL = str.count("{");
    4e40:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e47:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e4e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4e4e:	48 89 c7             	mov    %rax,%rdi
    4e51:	e8 00 00 00 00       	callq  4e56 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4e56:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4e5d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e64:	ba 01 00 00 00       	mov    $0x1,%edx
    4e69:	48 89 ce             	mov    %rcx,%rsi
    4e6c:	48 89 c7             	mov    %rax,%rdi
    4e6f:	e8 00 00 00 00       	callq  4e74 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4e74:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4e7a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e81:	48 89 c7             	mov    %rax,%rdi
    4e84:	e8 00 00 00 00       	callq  4e89 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4e89:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4e90:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e97 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4e97:	48 89 c7             	mov    %rax,%rdi
    4e9a:	e8 00 00 00 00       	callq  4e9f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4e9f:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4ea6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ead:	ba 01 00 00 00       	mov    $0x1,%edx
    4eb2:	48 89 ce             	mov    %rcx,%rsi
    4eb5:	48 89 c7             	mov    %rax,%rdi
    4eb8:	e8 00 00 00 00       	callq  4ebd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4ebd:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4ec3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4eca:	48 89 c7             	mov    %rax,%rdi
    4ecd:	e8 00 00 00 00       	callq  4ed2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4ed2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4ed9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ee0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4ee0:	48 89 c7             	mov    %rax,%rdi
    4ee3:	e8 00 00 00 00       	callq  4ee8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4ee8:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4eef:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ef6:	ba 01 00 00 00       	mov    $0x1,%edx
    4efb:	48 89 ce             	mov    %rcx,%rsi
    4efe:	48 89 c7             	mov    %rax,%rdi
    4f01:	e8 00 00 00 00       	callq  4f06 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4f06:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4f0c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4f13:	48 89 c7             	mov    %rax,%rdi
    4f16:	e8 00 00 00 00       	callq  4f1b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4f1b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f22:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f29 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4f29:	48 89 c7             	mov    %rax,%rdi
    4f2c:	e8 00 00 00 00       	callq  4f31 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4f31:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4f38:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f3f:	ba 01 00 00 00       	mov    $0x1,%edx
    4f44:	48 89 ce             	mov    %rcx,%rsi
    4f47:	48 89 c7             	mov    %rax,%rdi
    4f4a:	e8 00 00 00 00       	callq  4f4f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4f4f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4f55:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f5c:	48 89 c7             	mov    %rax,%rdi
    4f5f:	e8 00 00 00 00       	callq  4f64 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4f64:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4f6a:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4f70:	74 43                	je     4fb5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4f72:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f79:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f80 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4f80:	48 89 c7             	mov    %rax,%rdi
    4f83:	e8 00 00 00 00       	callq  4f88 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4f88:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4f8f:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4f96:	48 89 d6             	mov    %rdx,%rsi
    4f99:	48 89 c7             	mov    %rax,%rdi
    4f9c:	e8 00 00 00 00       	callq  4fa1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4fa1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4fa8:	48 89 c7             	mov    %rax,%rdi
    4fab:	e8 00 00 00 00       	callq  4fb0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4fb0:	e9 6f 03 00 00       	jmpq   5324 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4fb5:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4fbb:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4fc1:	74 43                	je     5006 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4fc3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fca:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fd1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4fd1:	48 89 c7             	mov    %rax,%rdi
    4fd4:	e8 00 00 00 00       	callq  4fd9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    4fd9:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4fe0:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4fe7:	48 89 d6             	mov    %rdx,%rsi
    4fea:	48 89 c7             	mov    %rax,%rdi
    4fed:	e8 00 00 00 00       	callq  4ff2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4ff2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4ff9:	48 89 c7             	mov    %rax,%rdi
    4ffc:	e8 00 00 00 00       	callq  5001 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    5001:	e9 1e 03 00 00       	jmpq   5324 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    5006:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    500d:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5014:	b9 00 00 00 00       	mov    $0x0,%ecx
    5019:	ba 00 00 00 00       	mov    $0x0,%edx
    501e:	48 89 c7             	mov    %rax,%rdi
    5021:	e8 00 00 00 00       	callq  5026 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    5026:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    502c:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    5033:	0f 88 ea 02 00 00    	js     5323 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    5039:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    503f:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    5045:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    5048:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    504f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5053:	48 89 d6             	mov    %rdx,%rsi
    5056:	48 89 c7             	mov    %rax,%rdi
    5059:	e8 00 00 00 00       	callq  505e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    505e:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5062:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    5069:	89 da                	mov    %ebx,%edx
    506b:	48 89 ce             	mov    %rcx,%rsi
    506e:	48 89 c7             	mov    %rax,%rdi
    5071:	e8 00 00 00 00       	callq  5076 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    5076:	83 c0 01             	add    $0x1,%eax
    5079:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    507f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5083:	48 89 c7             	mov    %rax,%rdi
    5086:	e8 00 00 00 00       	callq  508b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    508b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    508f:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    5096:	ba 01 00 00 00       	mov    $0x1,%edx
    509b:	48 89 ce             	mov    %rcx,%rsi
    509e:	48 89 c7             	mov    %rax,%rdi
    50a1:	e8 00 00 00 00       	callq  50a6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    50a6:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    50aa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    50b1:	48 89 d6             	mov    %rdx,%rsi
    50b4:	48 89 c7             	mov    %rax,%rdi
    50b7:	e8 00 00 00 00       	callq  50bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    50bc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50c0:	48 89 c7             	mov    %rax,%rdi
    50c3:	e8 00 00 00 00       	callq  50c8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    50c8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    50cc:	be 7b 00 00 00       	mov    $0x7b,%esi
    50d1:	48 89 c7             	mov    %rax,%rdi
    50d4:	e8 00 00 00 00       	callq  50d9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    50d9:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    50df:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    50e3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50ea:	b9 01 00 00 00       	mov    $0x1,%ecx
    50ef:	48 89 c7             	mov    %rax,%rdi
    50f2:	e8 00 00 00 00       	callq  50f7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    50f7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    50fd:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5103:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    510a:	89 d6                	mov    %edx,%esi
    510c:	48 89 c7             	mov    %rax,%rdi
    510f:	e8 00 00 00 00       	callq  5114 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    5114:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5118:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    511c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5120:	48 89 c7             	mov    %rax,%rdi
    5123:	e8 00 00 00 00       	callq  5128 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    5128:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    512f:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    5136:	00 00 00 
        int br=0;
    5139:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    5140:	00 00 00 

        while(bl != br)
    5143:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    5149:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    514f:	0f 84 a2 00 00 00    	je     51f7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    5155:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    515c:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5162:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5169:	89 d6                	mov    %edx,%esi
    516b:	48 89 c7             	mov    %rax,%rdi
    516e:	e8 00 00 00 00       	callq  5173 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    5173:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5177:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    517b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    517f:	48 89 c7             	mov    %rax,%rdi
    5182:	e8 00 00 00 00       	callq  5187 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    5187:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    518e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5192:	be 7b 00 00 00       	mov    $0x7b,%esi
    5197:	48 89 c7             	mov    %rax,%rdi
    519a:	e8 00 00 00 00       	callq  519f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    519f:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51a3:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51aa:	89 d6                	mov    %edx,%esi
    51ac:	89 c7                	mov    %eax,%edi
    51ae:	e8 00 00 00 00       	callq  51b3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    51b3:	84 c0                	test   %al,%al
    51b5:	74 07                	je     51be <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    51b7:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    51be:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51c2:	be 7d 00 00 00       	mov    $0x7d,%esi
    51c7:	48 89 c7             	mov    %rax,%rdi
    51ca:	e8 00 00 00 00       	callq  51cf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    51cf:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51d3:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51da:	89 d6                	mov    %edx,%esi
    51dc:	89 c7                	mov    %eax,%edi
    51de:	e8 00 00 00 00       	callq  51e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    51e3:	84 c0                	test   %al,%al
    51e5:	0f 84 58 ff ff ff    	je     5143 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    51eb:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    51f2:	e9 4c ff ff ff       	jmpq   5143 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    51f7:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    51fd:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    5203:	89 c1                	mov    %eax,%ecx
    5205:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5209:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    520f:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5216:	48 89 c7             	mov    %rax,%rdi
    5219:	e8 00 00 00 00       	callq  521e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    521e:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5222:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5229:	48 89 d6             	mov    %rdx,%rsi
    522c:	48 89 c7             	mov    %rax,%rdi
    522f:	e8 00 00 00 00       	callq  5234 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    5234:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5238:	48 89 c7             	mov    %rax,%rdi
    523b:	e8 00 00 00 00       	callq  5240 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    5240:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5244:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 524b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    524b:	48 89 c7             	mov    %rax,%rdi
    524e:	e8 00 00 00 00       	callq  5253 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    5253:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5257:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    525b:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5262:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5268:	b9 00 00 00 00       	mov    $0x0,%ecx
    526d:	48 89 c7             	mov    %rax,%rdi
    5270:	e8 00 00 00 00       	callq  5275 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    5275:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5279:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5280:	48 89 d6             	mov    %rdx,%rsi
    5283:	48 89 c7             	mov    %rax,%rdi
    5286:	e8 00 00 00 00       	callq  528b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    528b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    528f:	48 89 c7             	mov    %rax,%rdi
    5292:	e8 00 00 00 00       	callq  5297 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    5297:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    529b:	48 89 c7             	mov    %rax,%rdi
    529e:	e8 00 00 00 00       	callq  52a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    52a3:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    52aa:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    52b1:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    52b8:	48 89 ce             	mov    %rcx,%rsi
    52bb:	48 89 c7             	mov    %rax,%rdi
    52be:	e8 00 00 00 00       	callq  52c3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    52c3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52ca:	48 89 c7             	mov    %rax,%rdi
    52cd:	e8 00 00 00 00       	callq  52d2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    52d2:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    52d8:	89 c2                	mov    %eax,%edx
    52da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52de:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    52e5:	48 89 ce             	mov    %rcx,%rsi
    52e8:	48 89 c7             	mov    %rax,%rdi
    52eb:	e8 00 00 00 00       	callq  52f0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    52f0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    52f4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52fb:	48 89 d6             	mov    %rdx,%rsi
    52fe:	48 89 c7             	mov    %rax,%rdi
    5301:	e8 00 00 00 00       	callq  5306 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    5306:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    530a:	48 89 c7             	mov    %rax,%rdi
    530d:	e8 00 00 00 00       	callq  5312 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    5312:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    5318:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    531e:	e9 e3 fc ff ff       	jmpq   5006 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    5323:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5324:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    532b:	48 89 c7             	mov    %rax,%rdi
    532e:	e8 00 00 00 00       	callq  5333 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    5333:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    533a:	48 89 c7             	mov    %rax,%rdi
    533d:	e8 00 00 00 00       	callq  5342 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    5342:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5349:	48 89 c7             	mov    %rax,%rdi
    534c:	e8 00 00 00 00       	callq  5351 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5351:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5358:	48 89 c7             	mov    %rax,%rdi
    535b:	e8 00 00 00 00       	callq  5360 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5360:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5367:	48 89 c7             	mov    %rax,%rdi
    536a:	e8 00 00 00 00       	callq  536f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    536f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5376:	48 89 c7             	mov    %rax,%rdi
    5379:	e8 00 00 00 00       	callq  537e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    537e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5385:	48 89 c7             	mov    %rax,%rdi
    5388:	e8 00 00 00 00       	callq  538d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    538d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5391:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5398:	00 00 
    539a:	0f 84 89 01 00 00    	je     5529 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    53a0:	e9 7f 01 00 00       	jmpq   5524 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    53a5:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    53a8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    53af:	48 89 c7             	mov    %rax,%rdi
    53b2:	e8 00 00 00 00       	callq  53b7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    53b7:	e9 d6 00 00 00       	jmpq   5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53bc:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    53bf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    53c6:	48 89 c7             	mov    %rax,%rdi
    53c9:	e8 00 00 00 00       	callq  53ce <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    53ce:	e9 bf 00 00 00       	jmpq   5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53d3:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    53d6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    53dd:	48 89 c7             	mov    %rax,%rdi
    53e0:	e8 00 00 00 00       	callq  53e5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    53e5:	e9 a8 00 00 00       	jmpq   5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53ea:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    53ed:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    53f4:	48 89 c7             	mov    %rax,%rdi
    53f7:	e8 00 00 00 00       	callq  53fc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    53fc:	e9 91 00 00 00       	jmpq   5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5401:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    5404:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    540b:	48 89 c7             	mov    %rax,%rdi
    540e:	e8 00 00 00 00       	callq  5413 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    5413:	eb 7d                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5415:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    5418:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    541f:	48 89 c7             	mov    %rax,%rdi
    5422:	e8 00 00 00 00       	callq  5427 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    5427:	eb 69                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5429:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    542c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5430:	48 89 c7             	mov    %rax,%rdi
    5433:	e8 00 00 00 00       	callq  5438 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    5438:	eb 58                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    543a:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    543d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5441:	48 89 c7             	mov    %rax,%rdi
    5444:	e8 00 00 00 00       	callq  5449 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    5449:	eb 47                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    544b:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    544e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5452:	48 89 c7             	mov    %rax,%rdi
    5455:	e8 00 00 00 00       	callq  545a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    545a:	eb 36                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    545c:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    545f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5463:	48 89 c7             	mov    %rax,%rdi
    5466:	e8 00 00 00 00       	callq  546b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    546b:	eb 03                	jmp    5470 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    546d:	48 89 c3             	mov    %rax,%rbx
    5470:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5474:	48 89 c7             	mov    %rax,%rdi
    5477:	e8 00 00 00 00       	callq  547c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    547c:	eb 14                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    547e:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    5481:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5485:	48 89 c7             	mov    %rax,%rdi
    5488:	e8 00 00 00 00       	callq  548d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    548d:	eb 03                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    548f:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5492:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5499:	48 89 c7             	mov    %rax,%rdi
    549c:	e8 00 00 00 00       	callq  54a1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    54a1:	eb 03                	jmp    54a6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    54a3:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    54a6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    54ad:	48 89 c7             	mov    %rax,%rdi
    54b0:	e8 00 00 00 00       	callq  54b5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    54b5:	eb 03                	jmp    54ba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    54b7:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    54ba:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54c1:	48 89 c7             	mov    %rax,%rdi
    54c4:	e8 00 00 00 00       	callq  54c9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    54c9:	eb 03                	jmp    54ce <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    54cb:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    54ce:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    54d5:	48 89 c7             	mov    %rax,%rdi
    54d8:	e8 00 00 00 00       	callq  54dd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    54dd:	eb 03                	jmp    54e2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    54df:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    54e2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    54e9:	48 89 c7             	mov    %rax,%rdi
    54ec:	e8 00 00 00 00       	callq  54f1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    54f1:	eb 03                	jmp    54f6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    54f3:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    54f6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    54fd:	48 89 c7             	mov    %rax,%rdi
    5500:	e8 00 00 00 00       	callq  5505 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    5505:	eb 03                	jmp    550a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    5507:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    550a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5511:	48 89 c7             	mov    %rax,%rdi
    5514:	e8 00 00 00 00       	callq  5519 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    5519:	48 89 d8             	mov    %rbx,%rax
    551c:	48 89 c7             	mov    %rax,%rdi
    551f:	e8 00 00 00 00       	callq  5524 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5524:	e8 00 00 00 00       	callq  5529 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5529:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    5530:	5b                   	pop    %rbx
    5531:	5d                   	pop    %rbp
    5532:	c3                   	retq   
    5533:	90                   	nop

0000000000005534 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    5534:	55                   	push   %rbp
    5535:	48 89 e5             	mov    %rsp,%rbp
    5538:	53                   	push   %rbx
    5539:	48 83 ec 38          	sub    $0x38,%rsp
    553d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5541:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5545:	89 55 cc             	mov    %edx,-0x34(%rbp)
    5548:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    554f:	00 00 
    5551:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5555:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    5557:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    555b:	8b 55 cc             	mov    -0x34(%rbp),%edx
    555e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5562:	48 89 ce             	mov    %rcx,%rsi
    5565:	48 89 c7             	mov    %rax,%rdi
    5568:	e8 00 00 00 00       	callq  556d <_ZN6Parser8whatLineE7QStringi+0x39>
    556d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5571:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5575:	48 89 d6             	mov    %rdx,%rsi
    5578:	48 89 c7             	mov    %rax,%rdi
    557b:	e8 00 00 00 00       	callq  5580 <_ZN6Parser8whatLineE7QStringi+0x4c>
    5580:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5584:	48 89 c7             	mov    %rax,%rdi
    5587:	e8 00 00 00 00       	callq  558c <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    558c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5590:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5597 <_ZN6Parser8whatLineE7QStringi+0x63>
    5597:	48 89 c7             	mov    %rax,%rdi
    559a:	e8 00 00 00 00       	callq  559f <_ZN6Parser8whatLineE7QStringi+0x6b>
    559f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    55a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55a7:	ba 01 00 00 00       	mov    $0x1,%edx
    55ac:	48 89 ce             	mov    %rcx,%rsi
    55af:	48 89 c7             	mov    %rax,%rdi
    55b2:	e8 00 00 00 00       	callq  55b7 <_ZN6Parser8whatLineE7QStringi+0x83>
    55b7:	89 c3                	mov    %eax,%ebx
    55b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55bd:	48 89 c7             	mov    %rax,%rdi
    55c0:	e8 00 00 00 00       	callq  55c5 <_ZN6Parser8whatLineE7QStringi+0x91>
    55c5:	89 d8                	mov    %ebx,%eax
}
    55c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    55cb:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    55d2:	00 00 
    55d4:	74 3b                	je     5611 <_ZN6Parser8whatLineE7QStringi+0xdd>
    55d6:	eb 34                	jmp    560c <_ZN6Parser8whatLineE7QStringi+0xd8>
    55d8:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    55db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55df:	48 89 c7             	mov    %rax,%rdi
    55e2:	e8 00 00 00 00       	callq  55e7 <_ZN6Parser8whatLineE7QStringi+0xb3>
    55e7:	48 89 d8             	mov    %rbx,%rax
    55ea:	48 89 c7             	mov    %rax,%rdi
    55ed:	e8 00 00 00 00       	callq  55f2 <_ZN6Parser8whatLineE7QStringi+0xbe>
    55f2:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    55f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55f9:	48 89 c7             	mov    %rax,%rdi
    55fc:	e8 00 00 00 00       	callq  5601 <_ZN6Parser8whatLineE7QStringi+0xcd>
    5601:	48 89 d8             	mov    %rbx,%rax
    5604:	48 89 c7             	mov    %rax,%rdi
    5607:	e8 00 00 00 00       	callq  560c <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    560c:	e8 00 00 00 00       	callq  5611 <_ZN6Parser8whatLineE7QStringi+0xdd>
    5611:	48 83 c4 38          	add    $0x38,%rsp
    5615:	5b                   	pop    %rbx
    5616:	5d                   	pop    %rbp
    5617:	c3                   	retq   

0000000000005618 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    5618:	55                   	push   %rbp
    5619:	48 89 e5             	mov    %rsp,%rbp
    561c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    5620:	90                   	nop
    5621:	5d                   	pop    %rbp
    5622:	c3                   	retq   
    5623:	90                   	nop

0000000000005624 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    5624:	55                   	push   %rbp
    5625:	48 89 e5             	mov    %rsp,%rbp
    5628:	53                   	push   %rbx
    5629:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    5630:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    5637:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    563e:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    5645:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    564c:	00 00 
    564e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5652:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    5654:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    565b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5662 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    5662:	48 89 c7             	mov    %rax,%rdi
    5665:	e8 00 00 00 00       	callq  566a <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    566a:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5671:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5678 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    5678:	48 89 c7             	mov    %rax,%rdi
    567b:	e8 00 00 00 00       	callq  5680 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    5680:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    5687:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    568e:	48 89 d6             	mov    %rdx,%rsi
    5691:	48 89 c7             	mov    %rax,%rdi
    5694:	e8 00 00 00 00       	callq  5699 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    5699:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    56a0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    56a7:	48 89 d6             	mov    %rdx,%rsi
    56aa:	48 89 c7             	mov    %rax,%rdi
    56ad:	e8 00 00 00 00       	callq  56b2 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    56b2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56b9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56c0 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    56c0:	48 89 c7             	mov    %rax,%rdi
    56c3:	e8 00 00 00 00       	callq  56c8 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    56c8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56d6 <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    56d6:	48 89 c7             	mov    %rax,%rdi
    56d9:	e8 00 00 00 00       	callq  56de <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    56de:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    56e5:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    56ec:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    56f3:	b9 01 00 00 00       	mov    $0x1,%ecx
    56f8:	48 89 c7             	mov    %rax,%rdi
    56fb:	e8 00 00 00 00       	callq  5700 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    5700:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5707:	48 89 c7             	mov    %rax,%rdi
    570a:	e8 00 00 00 00       	callq  570f <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    570f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5716:	48 89 c7             	mov    %rax,%rdi
    5719:	e8 00 00 00 00       	callq  571e <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    571e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5725:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 572c <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    572c:	48 89 c7             	mov    %rax,%rdi
    572f:	e8 00 00 00 00       	callq  5734 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    5734:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    573b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5742 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    5742:	48 89 c7             	mov    %rax,%rdi
    5745:	e8 00 00 00 00       	callq  574a <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    574a:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    5751:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5758:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    575f:	b9 01 00 00 00       	mov    $0x1,%ecx
    5764:	48 89 c7             	mov    %rax,%rdi
    5767:	e8 00 00 00 00       	callq  576c <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    576c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5773:	48 89 c7             	mov    %rax,%rdi
    5776:	e8 00 00 00 00       	callq  577b <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    577b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5782:	48 89 c7             	mov    %rax,%rdi
    5785:	e8 00 00 00 00       	callq  578a <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    578a:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    5791:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5795:	48 89 d6             	mov    %rdx,%rsi
    5798:	48 89 c7             	mov    %rax,%rdi
    579b:	e8 00 00 00 00       	callq  57a0 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    57a0:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    57a7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    57ab:	48 89 d6             	mov    %rdx,%rsi
    57ae:	48 89 c7             	mov    %rax,%rdi
    57b1:	e8 00 00 00 00       	callq  57b6 <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    57b6:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    57bd:	be 02 00 00 00       	mov    $0x2,%esi
    57c2:	48 89 c7             	mov    %rax,%rdi
    57c5:	e8 00 00 00 00       	callq  57ca <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    57ca:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    57d1:	be 02 00 00 00       	mov    $0x2,%esi
    57d6:	48 89 c7             	mov    %rax,%rdi
    57d9:	e8 00 00 00 00       	callq  57de <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    57de:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    57e5:	48 89 c7             	mov    %rax,%rdi
    57e8:	e8 00 00 00 00       	callq  57ed <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    57ed:	84 c0                	test   %al,%al
    57ef:	74 1a                	je     580b <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    57f1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    57f5:	be 04 00 00 00       	mov    $0x4,%esi
    57fa:	48 89 c7             	mov    %rax,%rdi
    57fd:	e8 00 00 00 00       	callq  5802 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    5802:	8b 45 d0             	mov    -0x30(%rbp),%eax
    5805:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    580b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5812:	48 89 c7             	mov    %rax,%rdi
    5815:	e8 00 00 00 00       	callq  581a <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    581a:	84 c0                	test   %al,%al
    581c:	74 1a                	je     5838 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    581e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5822:	be 04 00 00 00       	mov    $0x4,%esi
    5827:	48 89 c7             	mov    %rax,%rdi
    582a:	e8 00 00 00 00       	callq  582f <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    582f:	8b 45 d0             	mov    -0x30(%rbp),%eax
    5832:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    5838:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    583e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5842:	89 d6                	mov    %edx,%esi
    5844:	48 89 c7             	mov    %rax,%rdi
    5847:	e8 00 00 00 00       	callq  584c <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    584c:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    5852:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5856:	89 d6                	mov    %edx,%esi
    5858:	48 89 c7             	mov    %rax,%rdi
    585b:	e8 00 00 00 00       	callq  5860 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    5860:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5864:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5868:	48 89 d6             	mov    %rdx,%rsi
    586b:	48 89 c7             	mov    %rax,%rdi
    586e:	e8 00 00 00 00       	callq  5873 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    5873:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5877:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    587b:	48 89 d6             	mov    %rdx,%rsi
    587e:	48 89 c7             	mov    %rax,%rdi
    5881:	e8 00 00 00 00       	callq  5886 <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    5886:	e8 00 00 00 00       	callq  588b <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    588b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    5892:	e8 00 00 00 00       	callq  5897 <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    5897:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    589d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    58a4:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    58ab:	ba 00 00 00 00       	mov    $0x0,%edx
    58b0:	48 89 ce             	mov    %rcx,%rsi
    58b3:	48 89 c7             	mov    %rax,%rdi
    58b6:	e8 00 00 00 00       	callq  58bb <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    58bb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    58c2:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    58c9:	ba 00 00 00 00       	mov    $0x0,%edx
    58ce:	48 89 ce             	mov    %rcx,%rsi
    58d1:	48 89 c7             	mov    %rax,%rdi
    58d4:	e8 00 00 00 00       	callq  58d9 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    58d9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    58e0:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    58e7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 58ee <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    58ee:	48 89 ce             	mov    %rcx,%rsi
    58f1:	48 89 c7             	mov    %rax,%rdi
    58f4:	e8 00 00 00 00       	callq  58f9 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    58f9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5900:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    5907:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    590e:	48 89 ce             	mov    %rcx,%rsi
    5911:	48 89 c7             	mov    %rax,%rdi
    5914:	e8 00 00 00 00       	callq  5919 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    5919:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5920:	48 89 c7             	mov    %rax,%rdi
    5923:	e8 00 00 00 00       	callq  5928 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    5928:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    592f:	48 89 c7             	mov    %rax,%rdi
    5932:	e8 00 00 00 00       	callq  5937 <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    5937:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    593e:	48 89 c7             	mov    %rax,%rdi
    5941:	e8 00 00 00 00       	callq  5946 <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5946:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    594d:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5954:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 595b <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    595b:	48 89 c7             	mov    %rax,%rdi
    595e:	e8 00 00 00 00       	callq  5963 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    5963:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    596a:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    5971:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5978 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    5978:	48 89 ce             	mov    %rcx,%rsi
    597b:	48 89 c7             	mov    %rax,%rdi
    597e:	e8 00 00 00 00       	callq  5983 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    5983:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    598a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    598e:	48 89 d6             	mov    %rdx,%rsi
    5991:	48 89 c7             	mov    %rax,%rdi
    5994:	e8 00 00 00 00       	callq  5999 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    5999:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    59a0:	48 89 c7             	mov    %rax,%rdi
    59a3:	e8 00 00 00 00       	callq  59a8 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    59a8:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    59af:	48 89 c7             	mov    %rax,%rdi
    59b2:	e8 00 00 00 00       	callq  59b7 <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    59b7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59bb:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    59c2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59c9 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    59c9:	48 89 c7             	mov    %rax,%rdi
    59cc:	e8 00 00 00 00       	callq  59d1 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    59d1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59d5:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    59d9:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59e0 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    59e0:	48 89 ce             	mov    %rcx,%rsi
    59e3:	48 89 c7             	mov    %rax,%rdi
    59e6:	e8 00 00 00 00       	callq  59eb <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    59eb:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    59ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59f3:	48 89 d6             	mov    %rdx,%rsi
    59f6:	48 89 c7             	mov    %rax,%rdi
    59f9:	e8 00 00 00 00       	callq  59fe <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    59fe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5a02:	48 89 c7             	mov    %rax,%rdi
    5a05:	e8 00 00 00 00       	callq  5a0a <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    5a0a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5a0e:	48 89 c7             	mov    %rax,%rdi
    5a11:	e8 00 00 00 00       	callq  5a16 <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    5a16:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5a1d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a21:	48 89 d6             	mov    %rdx,%rsi
    5a24:	48 89 c7             	mov    %rax,%rdi
    5a27:	e8 00 00 00 00       	callq  5a2c <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5a2c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5a33:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a37:	48 89 d6             	mov    %rdx,%rsi
    5a3a:	48 89 c7             	mov    %rax,%rdi
    5a3d:	e8 00 00 00 00       	callq  5a42 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5a42:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a46:	48 89 c7             	mov    %rax,%rdi
    5a49:	e8 00 00 00 00       	callq  5a4e <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5a4e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a52:	48 89 c7             	mov    %rax,%rdi
    5a55:	e8 00 00 00 00       	callq  5a5a <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5a5a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5a61:	48 89 c7             	mov    %rax,%rdi
    5a64:	e8 00 00 00 00       	callq  5a69 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5a69:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a6d:	48 89 c7             	mov    %rax,%rdi
    5a70:	e8 00 00 00 00       	callq  5a75 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5a75:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a79:	48 89 c7             	mov    %rax,%rdi
    5a7c:	e8 00 00 00 00       	callq  5a81 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5a81:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a85:	48 89 c7             	mov    %rax,%rdi
    5a88:	e8 00 00 00 00       	callq  5a8d <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5a8d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a91:	48 89 c7             	mov    %rax,%rdi
    5a94:	e8 00 00 00 00       	callq  5a99 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5a99:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5aa0:	48 89 c7             	mov    %rax,%rdi
    5aa3:	e8 00 00 00 00       	callq  5aa8 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5aa8:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5aaf:	48 89 c7             	mov    %rax,%rdi
    5ab2:	e8 00 00 00 00       	callq  5ab7 <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5ab7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5abe:	48 89 c7             	mov    %rax,%rdi
    5ac1:	e8 00 00 00 00       	callq  5ac6 <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5ac6:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5acd:	48 89 c7             	mov    %rax,%rdi
    5ad0:	e8 00 00 00 00       	callq  5ad5 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5ad5:	90                   	nop
    5ad6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ada:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ae1:	00 00 
    5ae3:	0f 84 d3 01 00 00    	je     5cbc <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ae9:	e9 c9 01 00 00       	jmpq   5cb7 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5aee:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5af1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5af8:	48 89 c7             	mov    %rax,%rdi
    5afb:	e8 00 00 00 00       	callq  5b00 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5b00:	eb 03                	jmp    5b05 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5b02:	48 89 c3             	mov    %rax,%rbx
    5b05:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5b0c:	48 89 c7             	mov    %rax,%rdi
    5b0f:	e8 00 00 00 00       	callq  5b14 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5b14:	e9 48 01 00 00       	jmpq   5c61 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b19:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5b1c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5b23:	48 89 c7             	mov    %rax,%rdi
    5b26:	e8 00 00 00 00       	callq  5b2b <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5b2b:	eb 03                	jmp    5b30 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5b2d:	48 89 c3             	mov    %rax,%rbx
    5b30:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5b37:	48 89 c7             	mov    %rax,%rdi
    5b3a:	e8 00 00 00 00       	callq  5b3f <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5b3f:	e9 1d 01 00 00       	jmpq   5c61 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b44:	48 89 c3             	mov    %rax,%rbx
    5b47:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b4e:	48 89 c7             	mov    %rax,%rdi
    5b51:	e8 00 00 00 00       	callq  5b56 <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5b56:	eb 17                	jmp    5b6f <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b58:	48 89 c3             	mov    %rax,%rbx
    5b5b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b62:	48 89 c7             	mov    %rax,%rdi
    5b65:	e8 00 00 00 00       	callq  5b6a <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5b6a:	eb 03                	jmp    5b6f <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b6c:	48 89 c3             	mov    %rax,%rbx
    5b6f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5b76:	48 89 c7             	mov    %rax,%rdi
    5b79:	e8 00 00 00 00       	callq  5b7e <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5b7e:	eb 17                	jmp    5b97 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b80:	48 89 c3             	mov    %rax,%rbx
    5b83:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b8a:	48 89 c7             	mov    %rax,%rdi
    5b8d:	e8 00 00 00 00       	callq  5b92 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5b92:	eb 03                	jmp    5b97 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b94:	48 89 c3             	mov    %rax,%rbx
    5b97:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5b9e:	48 89 c7             	mov    %rax,%rdi
    5ba1:	e8 00 00 00 00       	callq  5ba6 <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5ba6:	eb 75                	jmp    5c1d <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5ba8:	48 89 c3             	mov    %rax,%rbx
    5bab:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5bb2:	48 89 c7             	mov    %rax,%rdi
    5bb5:	e8 00 00 00 00       	callq  5bba <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5bba:	eb 61                	jmp    5c1d <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5bbc:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5bbf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5bc6:	48 89 c7             	mov    %rax,%rdi
    5bc9:	e8 00 00 00 00       	callq  5bce <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5bce:	eb 03                	jmp    5bd3 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5bd0:	48 89 c3             	mov    %rax,%rbx
    5bd3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5bda:	48 89 c7             	mov    %rax,%rdi
    5bdd:	e8 00 00 00 00       	callq  5be2 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5be2:	eb 25                	jmp    5c09 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5be4:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5be7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5beb:	48 89 c7             	mov    %rax,%rdi
    5bee:	e8 00 00 00 00       	callq  5bf3 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5bf3:	eb 03                	jmp    5bf8 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5bf5:	48 89 c3             	mov    %rax,%rbx
    5bf8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5bfc:	48 89 c7             	mov    %rax,%rdi
    5bff:	e8 00 00 00 00       	callq  5c04 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5c04:	eb 03                	jmp    5c09 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5c06:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5c09:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c10:	48 89 c7             	mov    %rax,%rdi
    5c13:	e8 00 00 00 00       	callq  5c18 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5c18:	eb 03                	jmp    5c1d <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c1a:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5c1d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c21:	48 89 c7             	mov    %rax,%rdi
    5c24:	e8 00 00 00 00       	callq  5c29 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5c29:	eb 03                	jmp    5c2e <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5c2b:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5c2e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c32:	48 89 c7             	mov    %rax,%rdi
    5c35:	e8 00 00 00 00       	callq  5c3a <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5c3a:	eb 03                	jmp    5c3f <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5c3c:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5c3f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5c43:	48 89 c7             	mov    %rax,%rdi
    5c46:	e8 00 00 00 00       	callq  5c4b <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5c4b:	eb 03                	jmp    5c50 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5c4d:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5c50:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5c54:	48 89 c7             	mov    %rax,%rdi
    5c57:	e8 00 00 00 00       	callq  5c5c <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5c5c:	eb 03                	jmp    5c61 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c5e:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5c61:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5c68:	48 89 c7             	mov    %rax,%rdi
    5c6b:	e8 00 00 00 00       	callq  5c70 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5c70:	eb 03                	jmp    5c75 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5c72:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5c75:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5c7c:	48 89 c7             	mov    %rax,%rdi
    5c7f:	e8 00 00 00 00       	callq  5c84 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5c84:	eb 03                	jmp    5c89 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5c86:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5c89:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5c90:	48 89 c7             	mov    %rax,%rdi
    5c93:	e8 00 00 00 00       	callq  5c98 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5c98:	eb 03                	jmp    5c9d <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5c9a:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5c9d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5ca4:	48 89 c7             	mov    %rax,%rdi
    5ca7:	e8 00 00 00 00       	callq  5cac <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5cac:	48 89 d8             	mov    %rbx,%rax
    5caf:	48 89 c7             	mov    %rax,%rdi
    5cb2:	e8 00 00 00 00       	callq  5cb7 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5cb7:	e8 00 00 00 00       	callq  5cbc <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5cbc:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5cc3:	5b                   	pop    %rbx
    5cc4:	5d                   	pop    %rbp
    5cc5:	c3                   	retq   

0000000000005cc6 <_ZN6Parser4initEv>:

void Parser::init(){
    5cc6:	55                   	push   %rbp
    5cc7:	48 89 e5             	mov    %rsp,%rbp
    5cca:	48 83 ec 10          	sub    $0x10,%rsp
    5cce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cd6:	48 83 c0 30          	add    $0x30,%rax
    5cda:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ce1 <_ZN6Parser4initEv+0x1b>
    5ce1:	48 89 c7             	mov    %rax,%rdi
    5ce4:	e8 00 00 00 00       	callq  5ce9 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5ced:	48 83 c0 38          	add    $0x38,%rax
    5cf1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5cf8 <_ZN6Parser4initEv+0x32>
    5cf8:	48 89 c7             	mov    %rax,%rdi
    5cfb:	e8 00 00 00 00       	callq  5d00 <_ZN6Parser4initEv+0x3a>
}
    5d00:	90                   	nop
    5d01:	c9                   	leaveq 
    5d02:	c3                   	retq   
    5d03:	90                   	nop

0000000000005d04 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5d04:	55                   	push   %rbp
    5d05:	48 89 e5             	mov    %rsp,%rbp
    5d08:	53                   	push   %rbx
    5d09:	48 83 ec 38          	sub    $0x38,%rsp
    5d0d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5d11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d18:	00 00 
    5d1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5d1e:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5d20:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d27:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d2b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d32 <_ZN6Parser8initSemsEv+0x2e>
    5d32:	48 89 c7             	mov    %rax,%rdi
    5d35:	e8 00 00 00 00       	callq  5d3a <_ZN6Parser8initSemsEv+0x36>
    5d3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d3e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5d45:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d49:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d4d:	48 89 c6             	mov    %rax,%rsi
    5d50:	48 89 cf             	mov    %rcx,%rdi
    5d53:	e8 00 00 00 00       	callq  5d58 <_ZN6Parser8initSemsEv+0x54>
    5d58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d5c:	48 89 c7             	mov    %rax,%rdi
    5d5f:	e8 00 00 00 00       	callq  5d64 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5d64:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d6b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d6f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d76 <_ZN6Parser8initSemsEv+0x72>
    5d76:	48 89 c7             	mov    %rax,%rdi
    5d79:	e8 00 00 00 00       	callq  5d7e <_ZN6Parser8initSemsEv+0x7a>
    5d7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d82:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5d89:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d8d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d91:	48 89 c6             	mov    %rax,%rsi
    5d94:	48 89 cf             	mov    %rcx,%rdi
    5d97:	e8 00 00 00 00       	callq  5d9c <_ZN6Parser8initSemsEv+0x98>
    5d9c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5da0:	48 89 c7             	mov    %rax,%rdi
    5da3:	e8 00 00 00 00       	callq  5da8 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5da8:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5daf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5db3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dba <_ZN6Parser8initSemsEv+0xb6>
    5dba:	48 89 c7             	mov    %rax,%rdi
    5dbd:	e8 00 00 00 00       	callq  5dc2 <_ZN6Parser8initSemsEv+0xbe>
    5dc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dc6:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5dcd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dd1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dd5:	48 89 c6             	mov    %rax,%rsi
    5dd8:	48 89 cf             	mov    %rcx,%rdi
    5ddb:	e8 00 00 00 00       	callq  5de0 <_ZN6Parser8initSemsEv+0xdc>
    5de0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5de4:	48 89 c7             	mov    %rax,%rdi
    5de7:	e8 00 00 00 00       	callq  5dec <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5dec:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5df3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5df7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dfe <_ZN6Parser8initSemsEv+0xfa>
    5dfe:	48 89 c7             	mov    %rax,%rdi
    5e01:	e8 00 00 00 00       	callq  5e06 <_ZN6Parser8initSemsEv+0x102>
    5e06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e0a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5e11:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e15:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e19:	48 89 c6             	mov    %rax,%rsi
    5e1c:	48 89 cf             	mov    %rcx,%rdi
    5e1f:	e8 00 00 00 00       	callq  5e24 <_ZN6Parser8initSemsEv+0x120>
    5e24:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e28:	48 89 c7             	mov    %rax,%rdi
    5e2b:	e8 00 00 00 00       	callq  5e30 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5e30:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5e37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e3b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e42 <_ZN6Parser8initSemsEv+0x13e>
    5e42:	48 89 c7             	mov    %rax,%rdi
    5e45:	e8 00 00 00 00       	callq  5e4a <_ZN6Parser8initSemsEv+0x146>
    5e4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e4e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5e55:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e5d:	48 89 c6             	mov    %rax,%rsi
    5e60:	48 89 cf             	mov    %rcx,%rdi
    5e63:	e8 00 00 00 00       	callq  5e68 <_ZN6Parser8initSemsEv+0x164>
    5e68:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e6c:	48 89 c7             	mov    %rax,%rdi
    5e6f:	e8 00 00 00 00       	callq  5e74 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5e74:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5e7b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e7f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e86 <_ZN6Parser8initSemsEv+0x182>
    5e86:	48 89 c7             	mov    %rax,%rdi
    5e89:	e8 00 00 00 00       	callq  5e8e <_ZN6Parser8initSemsEv+0x18a>
    5e8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e92:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5e99:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e9d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ea1:	48 89 c6             	mov    %rax,%rsi
    5ea4:	48 89 cf             	mov    %rcx,%rdi
    5ea7:	e8 00 00 00 00       	callq  5eac <_ZN6Parser8initSemsEv+0x1a8>
    5eac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eb0:	48 89 c7             	mov    %rax,%rdi
    5eb3:	e8 00 00 00 00       	callq  5eb8 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5eb8:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5ebf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ec3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5eca <_ZN6Parser8initSemsEv+0x1c6>
    5eca:	48 89 c7             	mov    %rax,%rdi
    5ecd:	e8 00 00 00 00       	callq  5ed2 <_ZN6Parser8initSemsEv+0x1ce>
    5ed2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ed6:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5edd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ee1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ee5:	48 89 c6             	mov    %rax,%rsi
    5ee8:	48 89 cf             	mov    %rcx,%rdi
    5eeb:	e8 00 00 00 00       	callq  5ef0 <_ZN6Parser8initSemsEv+0x1ec>
    5ef0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ef4:	48 89 c7             	mov    %rax,%rdi
    5ef7:	e8 00 00 00 00       	callq  5efc <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5efc:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5f03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f07:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f0e <_ZN6Parser8initSemsEv+0x20a>
    5f0e:	48 89 c7             	mov    %rax,%rdi
    5f11:	e8 00 00 00 00       	callq  5f16 <_ZN6Parser8initSemsEv+0x212>
    5f16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f1a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5f21:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f25:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f29:	48 89 c6             	mov    %rax,%rsi
    5f2c:	48 89 cf             	mov    %rcx,%rdi
    5f2f:	e8 00 00 00 00       	callq  5f34 <_ZN6Parser8initSemsEv+0x230>
    5f34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f38:	48 89 c7             	mov    %rax,%rdi
    5f3b:	e8 00 00 00 00       	callq  5f40 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5f40:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5f47:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f4b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f52 <_ZN6Parser8initSemsEv+0x24e>
    5f52:	48 89 c7             	mov    %rax,%rdi
    5f55:	e8 00 00 00 00       	callq  5f5a <_ZN6Parser8initSemsEv+0x256>
    5f5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f5e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5f65:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f69:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f6d:	48 89 c6             	mov    %rax,%rsi
    5f70:	48 89 cf             	mov    %rcx,%rdi
    5f73:	e8 00 00 00 00       	callq  5f78 <_ZN6Parser8initSemsEv+0x274>
    5f78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f7c:	48 89 c7             	mov    %rax,%rdi
    5f7f:	e8 00 00 00 00       	callq  5f84 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5f84:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5f8b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f8f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f96 <_ZN6Parser8initSemsEv+0x292>
    5f96:	48 89 c7             	mov    %rax,%rdi
    5f99:	e8 00 00 00 00       	callq  5f9e <_ZN6Parser8initSemsEv+0x29a>
    5f9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fa2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5fa9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fb1:	48 89 c6             	mov    %rax,%rsi
    5fb4:	48 89 cf             	mov    %rcx,%rdi
    5fb7:	e8 00 00 00 00       	callq  5fbc <_ZN6Parser8initSemsEv+0x2b8>
    5fbc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fc0:	48 89 c7             	mov    %rax,%rdi
    5fc3:	e8 00 00 00 00       	callq  5fc8 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5fc8:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5fcf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fd3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fda <_ZN6Parser8initSemsEv+0x2d6>
    5fda:	48 89 c7             	mov    %rax,%rdi
    5fdd:	e8 00 00 00 00       	callq  5fe2 <_ZN6Parser8initSemsEv+0x2de>
    5fe2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fe6:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    5fed:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ff1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ff5:	48 89 c6             	mov    %rax,%rsi
    5ff8:	48 89 cf             	mov    %rcx,%rdi
    5ffb:	e8 00 00 00 00       	callq  6000 <_ZN6Parser8initSemsEv+0x2fc>
    6000:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6004:	48 89 c7             	mov    %rax,%rdi
    6007:	e8 00 00 00 00       	callq  600c <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    600c:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    6013:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6017:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 601e <_ZN6Parser8initSemsEv+0x31a>
    601e:	48 89 c7             	mov    %rax,%rdi
    6021:	e8 00 00 00 00       	callq  6026 <_ZN6Parser8initSemsEv+0x322>
    6026:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    602a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6031:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6035:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6039:	48 89 c6             	mov    %rax,%rsi
    603c:	48 89 cf             	mov    %rcx,%rdi
    603f:	e8 00 00 00 00       	callq  6044 <_ZN6Parser8initSemsEv+0x340>
    6044:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6048:	48 89 c7             	mov    %rax,%rdi
    604b:	e8 00 00 00 00       	callq  6050 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    6050:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    6057:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    605b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6062 <_ZN6Parser8initSemsEv+0x35e>
    6062:	48 89 c7             	mov    %rax,%rdi
    6065:	e8 00 00 00 00       	callq  606a <_ZN6Parser8initSemsEv+0x366>
    606a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    606e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6075:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6079:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    607d:	48 89 c6             	mov    %rax,%rsi
    6080:	48 89 cf             	mov    %rcx,%rdi
    6083:	e8 00 00 00 00       	callq  6088 <_ZN6Parser8initSemsEv+0x384>
    6088:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    608c:	48 89 c7             	mov    %rax,%rdi
    608f:	e8 00 00 00 00       	callq  6094 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    6094:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    609b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    609f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60a6 <_ZN6Parser8initSemsEv+0x3a2>
    60a6:	48 89 c7             	mov    %rax,%rdi
    60a9:	e8 00 00 00 00       	callq  60ae <_ZN6Parser8initSemsEv+0x3aa>
    60ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60b2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    60b9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60c1:	48 89 c6             	mov    %rax,%rsi
    60c4:	48 89 cf             	mov    %rcx,%rdi
    60c7:	e8 00 00 00 00       	callq  60cc <_ZN6Parser8initSemsEv+0x3c8>
    60cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60d0:	48 89 c7             	mov    %rax,%rdi
    60d3:	e8 00 00 00 00       	callq  60d8 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    60d8:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    60df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60ea <_ZN6Parser8initSemsEv+0x3e6>
    60ea:	48 89 c7             	mov    %rax,%rdi
    60ed:	e8 00 00 00 00       	callq  60f2 <_ZN6Parser8initSemsEv+0x3ee>
    60f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60f6:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    60fd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6101:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6105:	48 89 c6             	mov    %rax,%rsi
    6108:	48 89 cf             	mov    %rcx,%rdi
    610b:	e8 00 00 00 00       	callq  6110 <_ZN6Parser8initSemsEv+0x40c>
    6110:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6114:	48 89 c7             	mov    %rax,%rdi
    6117:	e8 00 00 00 00       	callq  611c <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    611c:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    6123:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6127:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 612e <_ZN6Parser8initSemsEv+0x42a>
    612e:	48 89 c7             	mov    %rax,%rdi
    6131:	e8 00 00 00 00       	callq  6136 <_ZN6Parser8initSemsEv+0x432>
    6136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    613a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6141:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6145:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6149:	48 89 c6             	mov    %rax,%rsi
    614c:	48 89 cf             	mov    %rcx,%rdi
    614f:	e8 00 00 00 00       	callq  6154 <_ZN6Parser8initSemsEv+0x450>
    6154:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6158:	48 89 c7             	mov    %rax,%rdi
    615b:	e8 00 00 00 00       	callq  6160 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6160:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    6167:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    616b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6172 <_ZN6Parser8initSemsEv+0x46e>
    6172:	48 89 c7             	mov    %rax,%rdi
    6175:	e8 00 00 00 00       	callq  617a <_ZN6Parser8initSemsEv+0x476>
    617a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    617e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6185:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6189:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    618d:	48 89 c6             	mov    %rax,%rsi
    6190:	48 89 cf             	mov    %rcx,%rdi
    6193:	e8 00 00 00 00       	callq  6198 <_ZN6Parser8initSemsEv+0x494>
    6198:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    619c:	48 89 c7             	mov    %rax,%rdi
    619f:	e8 00 00 00 00       	callq  61a4 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    61a4:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    61ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61b6 <_ZN6Parser8initSemsEv+0x4b2>
    61b6:	48 89 c7             	mov    %rax,%rdi
    61b9:	e8 00 00 00 00       	callq  61be <_ZN6Parser8initSemsEv+0x4ba>
    61be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61c2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    61c9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61cd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61d1:	48 89 c6             	mov    %rax,%rsi
    61d4:	48 89 cf             	mov    %rcx,%rdi
    61d7:	e8 00 00 00 00       	callq  61dc <_ZN6Parser8initSemsEv+0x4d8>
    61dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61e0:	48 89 c7             	mov    %rax,%rdi
    61e3:	e8 00 00 00 00       	callq  61e8 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    61e8:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    61ef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61fa <_ZN6Parser8initSemsEv+0x4f6>
    61fa:	48 89 c7             	mov    %rax,%rdi
    61fd:	e8 00 00 00 00       	callq  6202 <_ZN6Parser8initSemsEv+0x4fe>
    6202:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6206:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    620d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6211:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6215:	48 89 c6             	mov    %rax,%rsi
    6218:	48 89 cf             	mov    %rcx,%rdi
    621b:	e8 00 00 00 00       	callq  6220 <_ZN6Parser8initSemsEv+0x51c>
    6220:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6224:	48 89 c7             	mov    %rax,%rdi
    6227:	e8 00 00 00 00       	callq  622c <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    622c:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    6233:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6237:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 623e <_ZN6Parser8initSemsEv+0x53a>
    623e:	48 89 c7             	mov    %rax,%rdi
    6241:	e8 00 00 00 00       	callq  6246 <_ZN6Parser8initSemsEv+0x542>
    6246:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    624a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6251:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6255:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6259:	48 89 c6             	mov    %rax,%rsi
    625c:	48 89 cf             	mov    %rcx,%rdi
    625f:	e8 00 00 00 00       	callq  6264 <_ZN6Parser8initSemsEv+0x560>
    6264:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6268:	48 89 c7             	mov    %rax,%rdi
    626b:	e8 00 00 00 00       	callq  6270 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    6270:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    6277:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    627b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6282 <_ZN6Parser8initSemsEv+0x57e>
    6282:	48 89 c7             	mov    %rax,%rdi
    6285:	e8 00 00 00 00       	callq  628a <_ZN6Parser8initSemsEv+0x586>
    628a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    628e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6295:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6299:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    629d:	48 89 c6             	mov    %rax,%rsi
    62a0:	48 89 cf             	mov    %rcx,%rdi
    62a3:	e8 00 00 00 00       	callq  62a8 <_ZN6Parser8initSemsEv+0x5a4>
    62a8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62ac:	48 89 c7             	mov    %rax,%rdi
    62af:	e8 00 00 00 00       	callq  62b4 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    62b4:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    62bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62c6 <_ZN6Parser8initSemsEv+0x5c2>
    62c6:	48 89 c7             	mov    %rax,%rdi
    62c9:	e8 00 00 00 00       	callq  62ce <_ZN6Parser8initSemsEv+0x5ca>
    62ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62d2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    62d9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62e1:	48 89 c6             	mov    %rax,%rsi
    62e4:	48 89 cf             	mov    %rcx,%rdi
    62e7:	e8 00 00 00 00       	callq  62ec <_ZN6Parser8initSemsEv+0x5e8>
    62ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62f0:	48 89 c7             	mov    %rax,%rdi
    62f3:	e8 00 00 00 00       	callq  62f8 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    62f8:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    62ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6303:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 630a <_ZN6Parser8initSemsEv+0x606>
    630a:	48 89 c7             	mov    %rax,%rdi
    630d:	e8 00 00 00 00       	callq  6312 <_ZN6Parser8initSemsEv+0x60e>
    6312:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6316:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    631d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6321:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6325:	48 89 c6             	mov    %rax,%rsi
    6328:	48 89 cf             	mov    %rcx,%rdi
    632b:	e8 00 00 00 00       	callq  6330 <_ZN6Parser8initSemsEv+0x62c>
    6330:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6334:	48 89 c7             	mov    %rax,%rdi
    6337:	e8 00 00 00 00       	callq  633c <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    633c:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    6343:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6347:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 634e <_ZN6Parser8initSemsEv+0x64a>
    634e:	48 89 c7             	mov    %rax,%rdi
    6351:	e8 00 00 00 00       	callq  6356 <_ZN6Parser8initSemsEv+0x652>
    6356:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    635a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6361:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6365:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6369:	48 89 c6             	mov    %rax,%rsi
    636c:	48 89 cf             	mov    %rcx,%rdi
    636f:	e8 00 00 00 00       	callq  6374 <_ZN6Parser8initSemsEv+0x670>
    6374:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6378:	48 89 c7             	mov    %rax,%rdi
    637b:	e8 00 00 00 00       	callq  6380 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    6380:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    6387:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    638b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6392 <_ZN6Parser8initSemsEv+0x68e>
    6392:	48 89 c7             	mov    %rax,%rdi
    6395:	e8 00 00 00 00       	callq  639a <_ZN6Parser8initSemsEv+0x696>
    639a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    639e:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    63a5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ad:	48 89 c6             	mov    %rax,%rsi
    63b0:	48 89 cf             	mov    %rcx,%rdi
    63b3:	e8 00 00 00 00       	callq  63b8 <_ZN6Parser8initSemsEv+0x6b4>
    63b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63bc:	48 89 c7             	mov    %rax,%rdi
    63bf:	e8 00 00 00 00       	callq  63c4 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    63c4:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    63cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63d6 <_ZN6Parser8initSemsEv+0x6d2>
    63d6:	48 89 c7             	mov    %rax,%rdi
    63d9:	e8 00 00 00 00       	callq  63de <_ZN6Parser8initSemsEv+0x6da>
    63de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63e2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    63e9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63f1:	48 89 c6             	mov    %rax,%rsi
    63f4:	48 89 cf             	mov    %rcx,%rdi
    63f7:	e8 00 00 00 00       	callq  63fc <_ZN6Parser8initSemsEv+0x6f8>
    63fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6400:	48 89 c7             	mov    %rax,%rdi
    6403:	e8 00 00 00 00       	callq  6408 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    6408:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    640f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6413:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 641a <_ZN6Parser8initSemsEv+0x716>
    641a:	48 89 c7             	mov    %rax,%rdi
    641d:	e8 00 00 00 00       	callq  6422 <_ZN6Parser8initSemsEv+0x71e>
    6422:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6426:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    642d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6431:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6435:	48 89 c6             	mov    %rax,%rsi
    6438:	48 89 cf             	mov    %rcx,%rdi
    643b:	e8 00 00 00 00       	callq  6440 <_ZN6Parser8initSemsEv+0x73c>
    6440:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6444:	48 89 c7             	mov    %rax,%rdi
    6447:	e8 00 00 00 00       	callq  644c <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    644c:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    6453:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6457:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 645e <_ZN6Parser8initSemsEv+0x75a>
    645e:	48 89 c7             	mov    %rax,%rdi
    6461:	e8 00 00 00 00       	callq  6466 <_ZN6Parser8initSemsEv+0x762>
    6466:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    646a:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    6471:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6475:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6479:	48 89 c6             	mov    %rax,%rsi
    647c:	48 89 cf             	mov    %rcx,%rdi
    647f:	e8 00 00 00 00       	callq  6484 <_ZN6Parser8initSemsEv+0x780>
    6484:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6488:	48 89 c7             	mov    %rax,%rdi
    648b:	e8 00 00 00 00       	callq  6490 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    6490:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    6497:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    649b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64a2 <_ZN6Parser8initSemsEv+0x79e>
    64a2:	48 89 c7             	mov    %rax,%rdi
    64a5:	e8 00 00 00 00       	callq  64aa <_ZN6Parser8initSemsEv+0x7a6>
    64aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64ae:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    64b5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64bd:	48 89 c6             	mov    %rax,%rsi
    64c0:	48 89 cf             	mov    %rcx,%rdi
    64c3:	e8 00 00 00 00       	callq  64c8 <_ZN6Parser8initSemsEv+0x7c4>
    64c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64cc:	48 89 c7             	mov    %rax,%rdi
    64cf:	e8 00 00 00 00       	callq  64d4 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    64d4:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    64db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64e6 <_ZN6Parser8initSemsEv+0x7e2>
    64e6:	48 89 c7             	mov    %rax,%rdi
    64e9:	e8 00 00 00 00       	callq  64ee <_ZN6Parser8initSemsEv+0x7ea>
    64ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64f2:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    64f9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6501:	48 89 c6             	mov    %rax,%rsi
    6504:	48 89 cf             	mov    %rcx,%rdi
    6507:	e8 00 00 00 00       	callq  650c <_ZN6Parser8initSemsEv+0x808>
    650c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6510:	48 89 c7             	mov    %rax,%rdi
    6513:	e8 00 00 00 00       	callq  6518 <_ZN6Parser8initSemsEv+0x814>

}
    6518:	90                   	nop
    6519:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    651d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6524:	00 00 
    6526:	0f 84 16 03 00 00    	je     6842 <_ZN6Parser8initSemsEv+0xb3e>
    652c:	e9 0c 03 00 00       	jmpq   683d <_ZN6Parser8initSemsEv+0xb39>
    6531:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    6534:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6538:	48 89 c7             	mov    %rax,%rdi
    653b:	e8 00 00 00 00       	callq  6540 <_ZN6Parser8initSemsEv+0x83c>
    6540:	48 89 d8             	mov    %rbx,%rax
    6543:	48 89 c7             	mov    %rax,%rdi
    6546:	e8 00 00 00 00       	callq  654b <_ZN6Parser8initSemsEv+0x847>
    654b:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    654e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6552:	48 89 c7             	mov    %rax,%rdi
    6555:	e8 00 00 00 00       	callq  655a <_ZN6Parser8initSemsEv+0x856>
    655a:	48 89 d8             	mov    %rbx,%rax
    655d:	48 89 c7             	mov    %rax,%rdi
    6560:	e8 00 00 00 00       	callq  6565 <_ZN6Parser8initSemsEv+0x861>
    6565:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    6568:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    656c:	48 89 c7             	mov    %rax,%rdi
    656f:	e8 00 00 00 00       	callq  6574 <_ZN6Parser8initSemsEv+0x870>
    6574:	48 89 d8             	mov    %rbx,%rax
    6577:	48 89 c7             	mov    %rax,%rdi
    657a:	e8 00 00 00 00       	callq  657f <_ZN6Parser8initSemsEv+0x87b>
    657f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    6582:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6586:	48 89 c7             	mov    %rax,%rdi
    6589:	e8 00 00 00 00       	callq  658e <_ZN6Parser8initSemsEv+0x88a>
    658e:	48 89 d8             	mov    %rbx,%rax
    6591:	48 89 c7             	mov    %rax,%rdi
    6594:	e8 00 00 00 00       	callq  6599 <_ZN6Parser8initSemsEv+0x895>
    6599:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    659c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a0:	48 89 c7             	mov    %rax,%rdi
    65a3:	e8 00 00 00 00       	callq  65a8 <_ZN6Parser8initSemsEv+0x8a4>
    65a8:	48 89 d8             	mov    %rbx,%rax
    65ab:	48 89 c7             	mov    %rax,%rdi
    65ae:	e8 00 00 00 00       	callq  65b3 <_ZN6Parser8initSemsEv+0x8af>
    65b3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    65b6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65ba:	48 89 c7             	mov    %rax,%rdi
    65bd:	e8 00 00 00 00       	callq  65c2 <_ZN6Parser8initSemsEv+0x8be>
    65c2:	48 89 d8             	mov    %rbx,%rax
    65c5:	48 89 c7             	mov    %rax,%rdi
    65c8:	e8 00 00 00 00       	callq  65cd <_ZN6Parser8initSemsEv+0x8c9>
    65cd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    65d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65d4:	48 89 c7             	mov    %rax,%rdi
    65d7:	e8 00 00 00 00       	callq  65dc <_ZN6Parser8initSemsEv+0x8d8>
    65dc:	48 89 d8             	mov    %rbx,%rax
    65df:	48 89 c7             	mov    %rax,%rdi
    65e2:	e8 00 00 00 00       	callq  65e7 <_ZN6Parser8initSemsEv+0x8e3>
    65e7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    65ea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65ee:	48 89 c7             	mov    %rax,%rdi
    65f1:	e8 00 00 00 00       	callq  65f6 <_ZN6Parser8initSemsEv+0x8f2>
    65f6:	48 89 d8             	mov    %rbx,%rax
    65f9:	48 89 c7             	mov    %rax,%rdi
    65fc:	e8 00 00 00 00       	callq  6601 <_ZN6Parser8initSemsEv+0x8fd>
    6601:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    6604:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6608:	48 89 c7             	mov    %rax,%rdi
    660b:	e8 00 00 00 00       	callq  6610 <_ZN6Parser8initSemsEv+0x90c>
    6610:	48 89 d8             	mov    %rbx,%rax
    6613:	48 89 c7             	mov    %rax,%rdi
    6616:	e8 00 00 00 00       	callq  661b <_ZN6Parser8initSemsEv+0x917>
    661b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    661e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6622:	48 89 c7             	mov    %rax,%rdi
    6625:	e8 00 00 00 00       	callq  662a <_ZN6Parser8initSemsEv+0x926>
    662a:	48 89 d8             	mov    %rbx,%rax
    662d:	48 89 c7             	mov    %rax,%rdi
    6630:	e8 00 00 00 00       	callq  6635 <_ZN6Parser8initSemsEv+0x931>
    6635:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    6638:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    663c:	48 89 c7             	mov    %rax,%rdi
    663f:	e8 00 00 00 00       	callq  6644 <_ZN6Parser8initSemsEv+0x940>
    6644:	48 89 d8             	mov    %rbx,%rax
    6647:	48 89 c7             	mov    %rax,%rdi
    664a:	e8 00 00 00 00       	callq  664f <_ZN6Parser8initSemsEv+0x94b>
    664f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    6652:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6656:	48 89 c7             	mov    %rax,%rdi
    6659:	e8 00 00 00 00       	callq  665e <_ZN6Parser8initSemsEv+0x95a>
    665e:	48 89 d8             	mov    %rbx,%rax
    6661:	48 89 c7             	mov    %rax,%rdi
    6664:	e8 00 00 00 00       	callq  6669 <_ZN6Parser8initSemsEv+0x965>
    6669:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    666c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6670:	48 89 c7             	mov    %rax,%rdi
    6673:	e8 00 00 00 00       	callq  6678 <_ZN6Parser8initSemsEv+0x974>
    6678:	48 89 d8             	mov    %rbx,%rax
    667b:	48 89 c7             	mov    %rax,%rdi
    667e:	e8 00 00 00 00       	callq  6683 <_ZN6Parser8initSemsEv+0x97f>
    6683:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    6686:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    668a:	48 89 c7             	mov    %rax,%rdi
    668d:	e8 00 00 00 00       	callq  6692 <_ZN6Parser8initSemsEv+0x98e>
    6692:	48 89 d8             	mov    %rbx,%rax
    6695:	48 89 c7             	mov    %rax,%rdi
    6698:	e8 00 00 00 00       	callq  669d <_ZN6Parser8initSemsEv+0x999>
    669d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    66a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66a4:	48 89 c7             	mov    %rax,%rdi
    66a7:	e8 00 00 00 00       	callq  66ac <_ZN6Parser8initSemsEv+0x9a8>
    66ac:	48 89 d8             	mov    %rbx,%rax
    66af:	48 89 c7             	mov    %rax,%rdi
    66b2:	e8 00 00 00 00       	callq  66b7 <_ZN6Parser8initSemsEv+0x9b3>
    66b7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    66ba:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66be:	48 89 c7             	mov    %rax,%rdi
    66c1:	e8 00 00 00 00       	callq  66c6 <_ZN6Parser8initSemsEv+0x9c2>
    66c6:	48 89 d8             	mov    %rbx,%rax
    66c9:	48 89 c7             	mov    %rax,%rdi
    66cc:	e8 00 00 00 00       	callq  66d1 <_ZN6Parser8initSemsEv+0x9cd>
    66d1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    66d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66d8:	48 89 c7             	mov    %rax,%rdi
    66db:	e8 00 00 00 00       	callq  66e0 <_ZN6Parser8initSemsEv+0x9dc>
    66e0:	48 89 d8             	mov    %rbx,%rax
    66e3:	48 89 c7             	mov    %rax,%rdi
    66e6:	e8 00 00 00 00       	callq  66eb <_ZN6Parser8initSemsEv+0x9e7>
    66eb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    66ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66f2:	48 89 c7             	mov    %rax,%rdi
    66f5:	e8 00 00 00 00       	callq  66fa <_ZN6Parser8initSemsEv+0x9f6>
    66fa:	48 89 d8             	mov    %rbx,%rax
    66fd:	48 89 c7             	mov    %rax,%rdi
    6700:	e8 00 00 00 00       	callq  6705 <_ZN6Parser8initSemsEv+0xa01>
    6705:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    6708:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    670c:	48 89 c7             	mov    %rax,%rdi
    670f:	e8 00 00 00 00       	callq  6714 <_ZN6Parser8initSemsEv+0xa10>
    6714:	48 89 d8             	mov    %rbx,%rax
    6717:	48 89 c7             	mov    %rax,%rdi
    671a:	e8 00 00 00 00       	callq  671f <_ZN6Parser8initSemsEv+0xa1b>
    671f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    6722:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6726:	48 89 c7             	mov    %rax,%rdi
    6729:	e8 00 00 00 00       	callq  672e <_ZN6Parser8initSemsEv+0xa2a>
    672e:	48 89 d8             	mov    %rbx,%rax
    6731:	48 89 c7             	mov    %rax,%rdi
    6734:	e8 00 00 00 00       	callq  6739 <_ZN6Parser8initSemsEv+0xa35>
    6739:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    673c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6740:	48 89 c7             	mov    %rax,%rdi
    6743:	e8 00 00 00 00       	callq  6748 <_ZN6Parser8initSemsEv+0xa44>
    6748:	48 89 d8             	mov    %rbx,%rax
    674b:	48 89 c7             	mov    %rax,%rdi
    674e:	e8 00 00 00 00       	callq  6753 <_ZN6Parser8initSemsEv+0xa4f>
    6753:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    6756:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    675a:	48 89 c7             	mov    %rax,%rdi
    675d:	e8 00 00 00 00       	callq  6762 <_ZN6Parser8initSemsEv+0xa5e>
    6762:	48 89 d8             	mov    %rbx,%rax
    6765:	48 89 c7             	mov    %rax,%rdi
    6768:	e8 00 00 00 00       	callq  676d <_ZN6Parser8initSemsEv+0xa69>
    676d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    6770:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6774:	48 89 c7             	mov    %rax,%rdi
    6777:	e8 00 00 00 00       	callq  677c <_ZN6Parser8initSemsEv+0xa78>
    677c:	48 89 d8             	mov    %rbx,%rax
    677f:	48 89 c7             	mov    %rax,%rdi
    6782:	e8 00 00 00 00       	callq  6787 <_ZN6Parser8initSemsEv+0xa83>
    6787:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    678a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    678e:	48 89 c7             	mov    %rax,%rdi
    6791:	e8 00 00 00 00       	callq  6796 <_ZN6Parser8initSemsEv+0xa92>
    6796:	48 89 d8             	mov    %rbx,%rax
    6799:	48 89 c7             	mov    %rax,%rdi
    679c:	e8 00 00 00 00       	callq  67a1 <_ZN6Parser8initSemsEv+0xa9d>
    67a1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    67a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67a8:	48 89 c7             	mov    %rax,%rdi
    67ab:	e8 00 00 00 00       	callq  67b0 <_ZN6Parser8initSemsEv+0xaac>
    67b0:	48 89 d8             	mov    %rbx,%rax
    67b3:	48 89 c7             	mov    %rax,%rdi
    67b6:	e8 00 00 00 00       	callq  67bb <_ZN6Parser8initSemsEv+0xab7>
    67bb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    67be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67c2:	48 89 c7             	mov    %rax,%rdi
    67c5:	e8 00 00 00 00       	callq  67ca <_ZN6Parser8initSemsEv+0xac6>
    67ca:	48 89 d8             	mov    %rbx,%rax
    67cd:	48 89 c7             	mov    %rax,%rdi
    67d0:	e8 00 00 00 00       	callq  67d5 <_ZN6Parser8initSemsEv+0xad1>
    67d5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    67d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67dc:	48 89 c7             	mov    %rax,%rdi
    67df:	e8 00 00 00 00       	callq  67e4 <_ZN6Parser8initSemsEv+0xae0>
    67e4:	48 89 d8             	mov    %rbx,%rax
    67e7:	48 89 c7             	mov    %rax,%rdi
    67ea:	e8 00 00 00 00       	callq  67ef <_ZN6Parser8initSemsEv+0xaeb>
    67ef:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    67f2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67f6:	48 89 c7             	mov    %rax,%rdi
    67f9:	e8 00 00 00 00       	callq  67fe <_ZN6Parser8initSemsEv+0xafa>
    67fe:	48 89 d8             	mov    %rbx,%rax
    6801:	48 89 c7             	mov    %rax,%rdi
    6804:	e8 00 00 00 00       	callq  6809 <_ZN6Parser8initSemsEv+0xb05>
    6809:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    680c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6810:	48 89 c7             	mov    %rax,%rdi
    6813:	e8 00 00 00 00       	callq  6818 <_ZN6Parser8initSemsEv+0xb14>
    6818:	48 89 d8             	mov    %rbx,%rax
    681b:	48 89 c7             	mov    %rax,%rdi
    681e:	e8 00 00 00 00       	callq  6823 <_ZN6Parser8initSemsEv+0xb1f>
    6823:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    6826:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    682a:	48 89 c7             	mov    %rax,%rdi
    682d:	e8 00 00 00 00       	callq  6832 <_ZN6Parser8initSemsEv+0xb2e>
    6832:	48 89 d8             	mov    %rbx,%rax
    6835:	48 89 c7             	mov    %rax,%rdi
    6838:	e8 00 00 00 00       	callq  683d <_ZN6Parser8initSemsEv+0xb39>

}
    683d:	e8 00 00 00 00       	callq  6842 <_ZN6Parser8initSemsEv+0xb3e>
    6842:	48 83 c4 38          	add    $0x38,%rsp
    6846:	5b                   	pop    %rbx
    6847:	5d                   	pop    %rbp
    6848:	c3                   	retq   
    6849:	90                   	nop

000000000000684a <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    684a:	55                   	push   %rbp
    684b:	48 89 e5             	mov    %rsp,%rbp
    684e:	53                   	push   %rbx
    684f:	48 83 ec 48          	sub    $0x48,%rsp
    6853:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6857:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    685e:	00 00 
    6860:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6864:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    6866:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    686a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6871 <_ZN6Parser10testCase01Ev+0x27>
    6871:	48 89 c7             	mov    %rax,%rdi
    6874:	e8 00 00 00 00       	callq  6879 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    6879:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    687d:	48 89 c7             	mov    %rax,%rdi
    6880:	e8 00 00 00 00       	callq  6885 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    6885:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6889:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    688d:	48 89 d6             	mov    %rdx,%rsi
    6890:	48 89 c7             	mov    %rax,%rdi
    6893:	e8 00 00 00 00       	callq  6898 <_ZN6Parser10testCase01Ev+0x4e>
    6898:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    689c:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    68a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    68a4:	48 89 ce             	mov    %rcx,%rsi
    68a7:	48 89 c7             	mov    %rax,%rdi
    68aa:	e8 00 00 00 00       	callq  68af <_ZN6Parser10testCase01Ev+0x65>
    68af:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68b3:	48 89 c7             	mov    %rax,%rdi
    68b6:	e8 00 00 00 00       	callq  68bb <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68bb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68bf:	48 89 c7             	mov    %rax,%rdi
    68c2:	e8 00 00 00 00       	callq  68c7 <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68c7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68cb:	48 89 c7             	mov    %rax,%rdi
    68ce:	e8 00 00 00 00       	callq  68d3 <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    68d3:	90                   	nop
    68d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    68d8:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    68df:	00 00 
    68e1:	74 43                	je     6926 <_ZN6Parser10testCase01Ev+0xdc>
    68e3:	eb 3c                	jmp    6921 <_ZN6Parser10testCase01Ev+0xd7>
    68e5:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    68e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68ec:	48 89 c7             	mov    %rax,%rdi
    68ef:	e8 00 00 00 00       	callq  68f4 <_ZN6Parser10testCase01Ev+0xaa>
    68f4:	eb 03                	jmp    68f9 <_ZN6Parser10testCase01Ev+0xaf>
    68f6:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68f9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68fd:	48 89 c7             	mov    %rax,%rdi
    6900:	e8 00 00 00 00       	callq  6905 <_ZN6Parser10testCase01Ev+0xbb>
    6905:	eb 03                	jmp    690a <_ZN6Parser10testCase01Ev+0xc0>
    6907:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    690a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    690e:	48 89 c7             	mov    %rax,%rdi
    6911:	e8 00 00 00 00       	callq  6916 <_ZN6Parser10testCase01Ev+0xcc>
    6916:	48 89 d8             	mov    %rbx,%rax
    6919:	48 89 c7             	mov    %rax,%rdi
    691c:	e8 00 00 00 00       	callq  6921 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6921:	e8 00 00 00 00       	callq  6926 <_ZN6Parser10testCase01Ev+0xdc>
    6926:	48 83 c4 48          	add    $0x48,%rsp
    692a:	5b                   	pop    %rbx
    692b:	5d                   	pop    %rbp
    692c:	c3                   	retq   
    692d:	90                   	nop

000000000000692e <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    692e:	55                   	push   %rbp
    692f:	48 89 e5             	mov    %rsp,%rbp
    6932:	53                   	push   %rbx
    6933:	48 83 ec 48          	sub    $0x48,%rsp
    6937:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    693b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6942:	00 00 
    6944:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6948:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    694a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    694e:	48 83 c0 50          	add    $0x50,%rax
    6952:	48 89 c7             	mov    %rax,%rdi
    6955:	e8 00 00 00 00       	callq  695a <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    695a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    695e:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6964:	48 89 c7             	mov    %rax,%rdi
    6967:	e8 00 00 00 00       	callq  696c <_ZN6Parser8HWStoHexEv+0x3e>
    696c:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    696f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    6976:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    697d:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6980:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    6983:	0f 8d 2f 01 00 00    	jge    6ab8 <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    6989:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    698d:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    6994:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6997:	89 c6                	mov    %eax,%esi
    6999:	48 89 d7             	mov    %rdx,%rdi
    699c:	e8 00 00 00 00       	callq  69a1 <_ZN6Parser8HWStoHexEv+0x73>
    69a1:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    69a4:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    69a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    69ac:	ba 10 00 00 00       	mov    $0x10,%edx
    69b1:	89 ce                	mov    %ecx,%esi
    69b3:	48 89 c7             	mov    %rax,%rdi
    69b6:	e8 00 00 00 00       	callq  69bb <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    69bb:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69be:	83 e0 03             	and    $0x3,%eax
    69c1:	85 c0                	test   %eax,%eax
    69c3:	75 17                	jne    69dc <_ZN6Parser8HWStoHexEv+0xae>
    69c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69c9:	48 83 c0 50          	add    $0x50,%rax
    69cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69d4 <_ZN6Parser8HWStoHexEv+0xa6>
    69d4:	48 89 c7             	mov    %rax,%rdi
    69d7:	e8 00 00 00 00       	callq  69dc <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    69dc:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69df:	83 e0 07             	and    $0x7,%eax
    69e2:	85 c0                	test   %eax,%eax
    69e4:	75 17                	jne    69fd <_ZN6Parser8HWStoHexEv+0xcf>
    69e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69ea:	48 83 c0 50          	add    $0x50,%rax
    69ee:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69f5 <_ZN6Parser8HWStoHexEv+0xc7>
    69f5:	48 89 c7             	mov    %rax,%rdi
    69f8:	e8 00 00 00 00       	callq  69fd <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    69fd:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a00:	83 e0 0f             	and    $0xf,%eax
    6a03:	85 c0                	test   %eax,%eax
    6a05:	75 17                	jne    6a1e <_ZN6Parser8HWStoHexEv+0xf0>
    6a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a0b:	48 83 c0 50          	add    $0x50,%rax
    6a0f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a16 <_ZN6Parser8HWStoHexEv+0xe8>
    6a16:	48 89 c7             	mov    %rax,%rdi
    6a19:	e8 00 00 00 00       	callq  6a1e <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6a1e:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6a22:	77 17                	ja     6a3b <_ZN6Parser8HWStoHexEv+0x10d>
    6a24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a28:	48 83 c0 50          	add    $0x50,%rax
    6a2c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a33 <_ZN6Parser8HWStoHexEv+0x105>
    6a33:	48 89 c7             	mov    %rax,%rdi
    6a36:	e8 00 00 00 00       	callq  6a3b <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6a3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a3f:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6a43:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a4a <_ZN6Parser8HWStoHexEv+0x11c>
    6a4a:	48 89 ce             	mov    %rcx,%rsi
    6a4d:	48 89 c7             	mov    %rax,%rdi
    6a50:	e8 00 00 00 00       	callq  6a55 <_ZN6Parser8HWStoHexEv+0x127>
    6a55:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a59:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6a5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a61:	48 89 c6             	mov    %rax,%rsi
    6a64:	48 89 d7             	mov    %rdx,%rdi
    6a67:	e8 00 00 00 00       	callq  6a6c <_ZN6Parser8HWStoHexEv+0x13e>
    6a6c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a70:	48 89 c7             	mov    %rax,%rdi
    6a73:	e8 00 00 00 00       	callq  6a78 <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a78:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a7c:	48 89 c7             	mov    %rax,%rdi
    6a7f:	e8 00 00 00 00       	callq  6a84 <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6a84:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6a88:	e9 f0 fe ff ff       	jmpq   697d <_ZN6Parser8HWStoHexEv+0x4f>
    6a8d:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6a90:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a94:	48 89 c7             	mov    %rax,%rdi
    6a97:	e8 00 00 00 00       	callq  6a9c <_ZN6Parser8HWStoHexEv+0x16e>
    6a9c:	eb 03                	jmp    6aa1 <_ZN6Parser8HWStoHexEv+0x173>
    6a9e:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6aa1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6aa5:	48 89 c7             	mov    %rax,%rdi
    6aa8:	e8 00 00 00 00       	callq  6aad <_ZN6Parser8HWStoHexEv+0x17f>
    6aad:	48 89 d8             	mov    %rbx,%rax
    6ab0:	48 89 c7             	mov    %rax,%rdi
    6ab3:	e8 00 00 00 00       	callq  6ab8 <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6ab8:	90                   	nop
    6ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6abd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6ac4:	00 00 
    6ac6:	74 05                	je     6acd <_ZN6Parser8HWStoHexEv+0x19f>
    6ac8:	e8 00 00 00 00       	callq  6acd <_ZN6Parser8HWStoHexEv+0x19f>
    6acd:	48 83 c4 48          	add    $0x48,%rsp
    6ad1:	5b                   	pop    %rbx
    6ad2:	5d                   	pop    %rbp
    6ad3:	c3                   	retq   

0000000000006ad4 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6ad4:	55                   	push   %rbp
    6ad5:	48 89 e5             	mov    %rsp,%rbp
    6ad8:	53                   	push   %rbx
    6ad9:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6ae0:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6ae7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6aee:	00 00 
    6af0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6af4:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6af6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6afd:	48 89 c7             	mov    %rax,%rdi
    6b00:	e8 00 00 00 00       	callq  6b05 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6b05:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6b0c:	48 89 c7             	mov    %rax,%rdi
    6b0f:	e8 00 00 00 00       	callq  6b14 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6b14:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6b1b:	48 89 c7             	mov    %rax,%rdi
    6b1e:	e8 00 00 00 00       	callq  6b23 <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6b23:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6b2a:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6b31:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6b38:	00 00 

    QStringList hwsModules;
    6b3a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6b41:	48 89 c7             	mov    %rax,%rdi
    6b44:	e8 00 00 00 00       	callq  6b49 <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6b49:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b50:	48 05 b0 00 00 00    	add    $0xb0,%rax
    6b56:	48 89 c7             	mov    %rax,%rdi
    6b59:	e8 00 00 00 00       	callq  6b5e <_ZN6Parser10compileHWSEv+0x8a>
    6b5e:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6b65:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b6c:	48 05 b0 00 00 00    	add    $0xb0,%rax
    6b72:	48 89 c7             	mov    %rax,%rdi
    6b75:	e8 00 00 00 00       	callq  6b7a <_ZN6Parser10compileHWSEv+0xa6>
    6b7a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6b81:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6b88:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b8f:	48 89 d6             	mov    %rdx,%rsi
    6b92:	48 89 c7             	mov    %rax,%rdi
    6b95:	e8 00 00 00 00       	callq  6b9a <_ZN6Parser10compileHWSEv+0xc6>
    6b9a:	84 c0                	test   %al,%al
    6b9c:	0f 84 ef 07 00 00    	je     7391 <_ZN6Parser10compileHWSEv+0x8bd>

        this->hwSequenceCompiled.append(blockCounter);
    6ba2:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6ba9:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bb0:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6bb7:	89 c6                	mov    %eax,%esi
    6bb9:	48 89 d7             	mov    %rdx,%rdi
    6bbc:	e8 00 00 00 00       	callq  6bc1 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6bc1:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6bc8:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bcf:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6bd6:	89 c6                	mov    %eax,%esi
    6bd8:	48 89 d7             	mov    %rdx,%rdi
    6bdb:	e8 00 00 00 00       	callq  6be0 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6be0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6be7:	48 89 c7             	mov    %rax,%rdi
    6bea:	e8 00 00 00 00       	callq  6bef <_ZN6Parser10compileHWSEv+0x11b>
    6bef:	48 89 c2             	mov    %rax,%rdx
    6bf2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6bf9:	48 89 d6             	mov    %rdx,%rsi
    6bfc:	48 89 c7             	mov    %rax,%rdi
    6bff:	e8 00 00 00 00       	callq  6c04 <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6c04:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6c0b:	48 89 c7             	mov    %rax,%rdi
    6c0e:	e8 00 00 00 00       	callq  6c13 <_ZN6Parser10compileHWSEv+0x13f>
    6c13:	48 89 c2             	mov    %rax,%rdx
    6c16:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6c1d:	48 89 d6             	mov    %rdx,%rsi
    6c20:	48 89 c7             	mov    %rax,%rdi
    6c23:	e8 00 00 00 00       	callq  6c28 <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6c28:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6c2f:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6c31:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c38:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6c3c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c43:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6c4a:	48 89 ce             	mov    %rcx,%rsi
    6c4d:	48 89 c7             	mov    %rax,%rdi
    6c50:	e8 00 00 00 00       	callq  6c55 <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6c55:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6c5c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c63:	ba 10 00 00 00       	mov    $0x10,%edx
    6c68:	48 89 ce             	mov    %rcx,%rsi
    6c6b:	48 89 c7             	mov    %rax,%rdi
    6c6e:	e8 00 00 00 00       	callq  6c73 <_ZN6Parser10compileHWSEv+0x19f>
    6c73:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6c7a:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c81:	0f be c0             	movsbl %al,%eax
    6c84:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c8b:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6c92:	89 c6                	mov    %eax,%esi
    6c94:	48 89 d7             	mov    %rdx,%rdi
    6c97:	e8 00 00 00 00       	callq  6c9c <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6c9c:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6ca3:	66 c1 e8 08          	shr    $0x8,%ax
    6ca7:	0f be c0             	movsbl %al,%eax
    6caa:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6cb1:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6cb8:	89 c6                	mov    %eax,%esi
    6cba:	48 89 d7             	mov    %rdx,%rdi
    6cbd:	e8 00 00 00 00       	callq  6cc2 <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6cc2:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cc9:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6ccf:	48 89 c7             	mov    %rax,%rdi
    6cd2:	e8 00 00 00 00       	callq  6cd7 <_ZN6Parser10compileHWSEv+0x203>
    6cd7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6cdd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ce4:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6cea:	48 89 c7             	mov    %rax,%rdi
    6ced:	e8 00 00 00 00       	callq  6cf2 <_ZN6Parser10compileHWSEv+0x21e>
    6cf2:	83 c0 02             	add    $0x2,%eax
    6cf5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6cfb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d02:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6d08:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d0f <_ZN6Parser10compileHWSEv+0x23b>
    6d0f:	48 89 c7             	mov    %rax,%rdi
    6d12:	e8 00 00 00 00       	callq  6d17 <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6d17:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6d1e:	48 89 c7             	mov    %rax,%rdi
    6d21:	e8 00 00 00 00       	callq  6d26 <_ZN6Parser10compileHWSEv+0x252>
    6d26:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6d2c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d30:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d37 <_ZN6Parser10compileHWSEv+0x263>
    6d37:	48 89 c7             	mov    %rax,%rdi
    6d3a:	e8 00 00 00 00       	callq  6d3f <_ZN6Parser10compileHWSEv+0x26b>
    6d3f:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6d43:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6d4a:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d4f:	ba 01 00 00 00       	mov    $0x1,%edx
    6d54:	48 89 c7             	mov    %rax,%rdi
    6d57:	e8 00 00 00 00       	callq  6d5c <_ZN6Parser10compileHWSEv+0x288>
    6d5c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d60:	48 89 c7             	mov    %rax,%rdi
    6d63:	e8 00 00 00 00       	callq  6d68 <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6d68:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d6c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d73 <_ZN6Parser10compileHWSEv+0x29f>
    6d73:	48 89 c7             	mov    %rax,%rdi
    6d76:	e8 00 00 00 00       	callq  6d7b <_ZN6Parser10compileHWSEv+0x2a7>
    6d7b:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6d7f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d86:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d8b:	ba 01 00 00 00       	mov    $0x1,%edx
    6d90:	48 89 c7             	mov    %rax,%rdi
    6d93:	e8 00 00 00 00       	callq  6d98 <_ZN6Parser10compileHWSEv+0x2c4>
    6d98:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d9c:	48 89 c7             	mov    %rax,%rdi
    6d9f:	e8 00 00 00 00       	callq  6da4 <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6da4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6dab:	48 89 c7             	mov    %rax,%rdi
    6dae:	e8 00 00 00 00       	callq  6db3 <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6db3:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6dba:	00 00 00 
    6dbd:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6dc3:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6dc9:	0f 8d 6e 04 00 00    	jge    723d <_ZN6Parser10compileHWSEv+0x769>
            line = content.at(i);
    6dcf:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6dd5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6ddc:	89 d6                	mov    %edx,%esi
    6dde:	48 89 c7             	mov    %rax,%rdi
    6de1:	e8 00 00 00 00       	callq  6de6 <_ZN6Parser10compileHWSEv+0x312>
    6de6:	48 89 c2             	mov    %rax,%rdx
    6de9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6df0:	48 89 d6             	mov    %rdx,%rsi
    6df3:	48 89 c7             	mov    %rax,%rdi
    6df6:	e8 00 00 00 00       	callq  6dfb <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6dfb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6e02:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6e09:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6e10:	48 89 c6             	mov    %rax,%rsi
    6e13:	48 89 d7             	mov    %rdx,%rdi
    6e16:	e8 00 00 00 00       	callq  6e1b <_ZN6Parser10compileHWSEv+0x347>
            int a = QRAnchor.indexIn(line);
    6e1b:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e22:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e29:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e2e:	ba 00 00 00 00       	mov    $0x0,%edx
    6e33:	48 89 c7             	mov    %rax,%rdi
    6e36:	e8 00 00 00 00       	callq  6e3b <_ZN6Parser10compileHWSEv+0x367>
    6e3b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6e41:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e48:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e4f:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e54:	ba 00 00 00 00       	mov    $0x0,%edx
    6e59:	48 89 c7             	mov    %rax,%rdi
    6e5c:	e8 00 00 00 00       	callq  6e61 <_ZN6Parser10compileHWSEv+0x38d>
    6e61:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6e67:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e6b:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6e72:	48 89 d6             	mov    %rdx,%rsi
    6e75:	48 89 c7             	mov    %rax,%rdi
    6e78:	e8 00 00 00 00       	callq  6e7d <_ZN6Parser10compileHWSEv+0x3a9>
            QStringList definitions  = QRDefinition.capturedTexts();
    6e7d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e81:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6e88:	48 89 d6             	mov    %rdx,%rsi
    6e8b:	48 89 c7             	mov    %rax,%rdi
    6e8e:	e8 00 00 00 00       	callq  6e93 <_ZN6Parser10compileHWSEv+0x3bf>

            if(a>0){
    6e93:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6e9a:	0f 8e 41 01 00 00    	jle    6fe1 <_ZN6Parser10compileHWSEv+0x50d>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6ea0:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6ea7:	83 c0 01             	add    $0x1,%eax
    6eaa:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6eb1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6eb5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ebc <_ZN6Parser10compileHWSEv+0x3e8>
    6ebc:	48 89 c7             	mov    %rax,%rdi
    6ebf:	e8 00 00 00 00       	callq  6ec4 <_ZN6Parser10compileHWSEv+0x3f0>
    6ec4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ecb:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6ed2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ed6:	48 89 c6             	mov    %rax,%rsi
    6ed9:	48 89 d7             	mov    %rdx,%rdi
    6edc:	e8 00 00 00 00       	callq  6ee1 <_ZN6Parser10compileHWSEv+0x40d>
    6ee1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ee5:	48 89 c7             	mov    %rax,%rdi
    6ee8:	e8 00 00 00 00       	callq  6eed <_ZN6Parser10compileHWSEv+0x419>
                QString anchor = anchors.at(1);
    6eed:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6ef1:	be 01 00 00 00       	mov    $0x1,%esi
    6ef6:	48 89 c7             	mov    %rax,%rdi
    6ef9:	e8 00 00 00 00       	callq  6efe <_ZN6Parser10compileHWSEv+0x42a>
    6efe:	48 89 c2             	mov    %rax,%rdx
    6f01:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f05:	48 89 d6             	mov    %rdx,%rsi
    6f08:	48 89 c7             	mov    %rax,%rdi
    6f0b:	e8 00 00 00 00       	callq  6f10 <_ZN6Parser10compileHWSEv+0x43c>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6f10:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f17:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6f1b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f1f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6f23:	48 89 ce             	mov    %rcx,%rsi
    6f26:	48 89 c7             	mov    %rax,%rdi
    6f29:	e8 00 00 00 00       	callq  6f2e <_ZN6Parser10compileHWSEv+0x45a>
    6f2e:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6f32:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f36:	ba 10 00 00 00       	mov    $0x10,%edx
    6f3b:	48 89 ce             	mov    %rcx,%rsi
    6f3e:	48 89 c7             	mov    %rax,%rdi
    6f41:	e8 00 00 00 00       	callq  6f46 <_ZN6Parser10compileHWSEv+0x472>
    6f46:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6f4d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f51:	48 89 c7             	mov    %rax,%rdi
    6f54:	e8 00 00 00 00       	callq  6f59 <_ZN6Parser10compileHWSEv+0x485>
                this->hwSequenceCompiled.append(255);
    6f59:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f60:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6f66:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f6b:	48 89 c7             	mov    %rax,%rdi
    6f6e:	e8 00 00 00 00       	callq  6f73 <_ZN6Parser10compileHWSEv+0x49f>
                this->hwSequenceCompiled.append(255);
    6f73:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f7a:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6f80:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f85:	48 89 c7             	mov    %rax,%rdi
    6f88:	e8 00 00 00 00       	callq  6f8d <_ZN6Parser10compileHWSEv+0x4b9>
                this->hwSequenceCompiled.append(anchorID%256);
    6f8d:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f94:	0f be c0             	movsbl %al,%eax
    6f97:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f9e:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6fa5:	89 c6                	mov    %eax,%esi
    6fa7:	48 89 d7             	mov    %rdx,%rdi
    6faa:	e8 00 00 00 00       	callq  6faf <_ZN6Parser10compileHWSEv+0x4db>
                this->hwSequenceCompiled.append(anchorID/256);
    6faf:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6fb6:	66 c1 e8 08          	shr    $0x8,%ax
    6fba:	0f be c0             	movsbl %al,%eax
    6fbd:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6fc4:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    6fcb:	89 c6                	mov    %eax,%esi
    6fcd:	48 89 d7             	mov    %rdx,%rdi
    6fd0:	e8 00 00 00 00       	callq  6fd5 <_ZN6Parser10compileHWSEv+0x501>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6fd5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fd9:	48 89 c7             	mov    %rax,%rdi
    6fdc:	e8 00 00 00 00       	callq  6fe1 <_ZN6Parser10compileHWSEv+0x50d>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    6fe1:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6fe8:	0f 8e 2b 02 00 00    	jle    7219 <_ZN6Parser10compileHWSEv+0x745>
                CRC16++;
    6fee:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6ff5:	83 c0 01             	add    $0x1,%eax
    6ff8:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    6fff:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7006:	83 c0 01             	add    $0x1,%eax
    7009:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    7010:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7014:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 701b <_ZN6Parser10compileHWSEv+0x547>
    701b:	48 89 c7             	mov    %rax,%rdi
    701e:	e8 00 00 00 00       	callq  7023 <_ZN6Parser10compileHWSEv+0x54f>
    7023:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    702a:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7031:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7035:	48 89 c6             	mov    %rax,%rsi
    7038:	48 89 d7             	mov    %rdx,%rdi
    703b:	e8 00 00 00 00       	callq  7040 <_ZN6Parser10compileHWSEv+0x56c>
    7040:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7044:	48 89 c7             	mov    %rax,%rdi
    7047:	e8 00 00 00 00       	callq  704c <_ZN6Parser10compileHWSEv+0x578>
                QString strModuleID         = definitions.at(1);
    704c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7050:	be 01 00 00 00       	mov    $0x1,%esi
    7055:	48 89 c7             	mov    %rax,%rdi
    7058:	e8 00 00 00 00       	callq  705d <_ZN6Parser10compileHWSEv+0x589>
    705d:	48 89 c2             	mov    %rax,%rdx
    7060:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7064:	48 89 d6             	mov    %rdx,%rsi
    7067:	48 89 c7             	mov    %rax,%rdi
    706a:	e8 00 00 00 00       	callq  706f <_ZN6Parser10compileHWSEv+0x59b>
                QString strModulePosition   = definitions.at(2);
    706f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7073:	be 02 00 00 00       	mov    $0x2,%esi
    7078:	48 89 c7             	mov    %rax,%rdi
    707b:	e8 00 00 00 00       	callq  7080 <_ZN6Parser10compileHWSEv+0x5ac>
    7080:	48 89 c2             	mov    %rax,%rdx
    7083:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7087:	48 89 d6             	mov    %rdx,%rsi
    708a:	48 89 c7             	mov    %rax,%rdi
    708d:	e8 00 00 00 00       	callq  7092 <_ZN6Parser10compileHWSEv+0x5be>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    7092:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    7099:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    70a0:	48 8d 48 28          	lea    0x28(%rax),%rcx
    70a4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70a8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    70ac:	48 89 ce             	mov    %rcx,%rsi
    70af:	48 89 c7             	mov    %rax,%rdi
    70b2:	e8 00 00 00 00       	callq  70b7 <_ZN6Parser10compileHWSEv+0x5e3>
    70b7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70bb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70bf:	ba 10 00 00 00       	mov    $0x10,%edx
    70c4:	48 89 ce             	mov    %rcx,%rsi
    70c7:	48 89 c7             	mov    %rax,%rdi
    70ca:	e8 00 00 00 00       	callq  70cf <_ZN6Parser10compileHWSEv+0x5fb>
    70cf:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    70d5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70d9:	48 89 c7             	mov    %rax,%rdi
    70dc:	e8 00 00 00 00       	callq  70e1 <_ZN6Parser10compileHWSEv+0x60d>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    70e1:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70e5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70e9:	ba 0a 00 00 00       	mov    $0xa,%edx
    70ee:	48 89 ce             	mov    %rcx,%rsi
    70f1:	48 89 c7             	mov    %rax,%rdi
    70f4:	e8 00 00 00 00       	callq  70f9 <_ZN6Parser10compileHWSEv+0x625>
    70f9:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    7100:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    7104:	84 c0                	test   %al,%al
    7106:	74 6d                	je     7175 <_ZN6Parser10compileHWSEv+0x6a1>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    7108:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    710c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7113:	ba 00 00 00 00       	mov    $0x0,%edx
    7118:	48 89 ce             	mov    %rcx,%rsi
    711b:	48 89 c7             	mov    %rax,%rdi
    711e:	e8 00 00 00 00       	callq  7123 <_ZN6Parser10compileHWSEv+0x64f>
    7123:	83 f0 01             	xor    $0x1,%eax
    7126:	84 c0                	test   %al,%al
    7128:	74 2a                	je     7154 <_ZN6Parser10compileHWSEv+0x680>
                        hwsModules.append(strModuleID);
    712a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    712e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7135:	48 89 d6             	mov    %rdx,%rsi
    7138:	48 89 c7             	mov    %rax,%rdi
    713b:	e8 00 00 00 00       	callq  7140 <_ZN6Parser10compileHWSEv+0x66c>
                        if(hwsModules.size()>254){
    7140:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7147:	48 89 c7             	mov    %rax,%rdi
    714a:	e8 00 00 00 00       	callq  714f <_ZN6Parser10compileHWSEv+0x67b>
    714f:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    7154:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    7158:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    715f:	ba 00 00 00 00       	mov    $0x0,%edx
    7164:	48 89 ce             	mov    %rcx,%rsi
    7167:	48 89 c7             	mov    %rax,%rdi
    716a:	e8 00 00 00 00       	callq  716f <_ZN6Parser10compileHWSEv+0x69b>
    716f:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    7175:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    717c:	0f be c0             	movsbl %al,%eax
    717f:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7186:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    718d:	89 c6                	mov    %eax,%esi
    718f:	48 89 d7             	mov    %rdx,%rdi
    7192:	e8 00 00 00 00       	callq  7197 <_ZN6Parser10compileHWSEv+0x6c3>
                this->hwSequenceCompiled.append(moduleID);
    7197:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    719e:	0f be c0             	movsbl %al,%eax
    71a1:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71a8:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    71af:	89 c6                	mov    %eax,%esi
    71b1:	48 89 d7             	mov    %rdx,%rdi
    71b4:	e8 00 00 00 00       	callq  71b9 <_ZN6Parser10compileHWSEv+0x6e5>
                this->hwSequenceCompiled.append(modulePosition%256);
    71b9:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71c0:	0f be c0             	movsbl %al,%eax
    71c3:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71ca:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    71d1:	89 c6                	mov    %eax,%esi
    71d3:	48 89 d7             	mov    %rdx,%rdi
    71d6:	e8 00 00 00 00       	callq  71db <_ZN6Parser10compileHWSEv+0x707>
                this->hwSequenceCompiled.append(modulePosition/256);
    71db:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71e2:	66 c1 e8 08          	shr    $0x8,%ax
    71e6:	0f be c0             	movsbl %al,%eax
    71e9:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71f0:	48 81 c2 b8 00 00 00 	add    $0xb8,%rdx
    71f7:	89 c6                	mov    %eax,%esi
    71f9:	48 89 d7             	mov    %rdx,%rdi
    71fc:	e8 00 00 00 00       	callq  7201 <_ZN6Parser10compileHWSEv+0x72d>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    7201:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7205:	48 89 c7             	mov    %rax,%rdi
    7208:	e8 00 00 00 00       	callq  720d <_ZN6Parser10compileHWSEv+0x739>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    720d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7211:	48 89 c7             	mov    %rax,%rdi
    7214:	e8 00 00 00 00       	callq  7219 <_ZN6Parser10compileHWSEv+0x745>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    7219:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    721d:	48 89 c7             	mov    %rax,%rdi
    7220:	e8 00 00 00 00       	callq  7225 <_ZN6Parser10compileHWSEv+0x751>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7225:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7229:	48 89 c7             	mov    %rax,%rdi
    722c:	e8 00 00 00 00       	callq  7231 <_ZN6Parser10compileHWSEv+0x75d>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    7231:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    7238:	e9 80 fb ff ff       	jmpq   6dbd <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    723d:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7244:	0f be d8             	movsbl %al,%ebx
    7247:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    724e:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    7255:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    725b:	89 c6                	mov    %eax,%esi
    725d:	48 89 d7             	mov    %rdx,%rdi
    7260:	e8 00 00 00 00       	callq  7265 <_ZN6Parser10compileHWSEv+0x791>
    7265:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7269:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    726d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7271:	89 de                	mov    %ebx,%esi
    7273:	48 89 c7             	mov    %rax,%rdi
    7276:	e8 00 00 00 00       	callq  727b <_ZN6Parser10compileHWSEv+0x7a7>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    727b:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7282:	66 c1 e8 08          	shr    $0x8,%ax
    7286:	0f be d8             	movsbl %al,%ebx
    7289:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    728f:	8d 50 01             	lea    0x1(%rax),%edx
    7292:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7299:	48 05 b8 00 00 00    	add    $0xb8,%rax
    729f:	89 d6                	mov    %edx,%esi
    72a1:	48 89 c7             	mov    %rax,%rdi
    72a4:	e8 00 00 00 00       	callq  72a9 <_ZN6Parser10compileHWSEv+0x7d5>
    72a9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72ad:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72b1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72b5:	89 de                	mov    %ebx,%esi
    72b7:	48 89 c7             	mov    %rax,%rdi
    72ba:	e8 00 00 00 00       	callq  72bf <_ZN6Parser10compileHWSEv+0x7eb>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    72bf:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72c6:	0f be d8             	movsbl %al,%ebx
    72c9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72d0:	48 8d 90 b8 00 00 00 	lea    0xb8(%rax),%rdx
    72d7:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72dd:	89 c6                	mov    %eax,%esi
    72df:	48 89 d7             	mov    %rdx,%rdi
    72e2:	e8 00 00 00 00       	callq  72e7 <_ZN6Parser10compileHWSEv+0x813>
    72e7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72f3:	89 de                	mov    %ebx,%esi
    72f5:	48 89 c7             	mov    %rax,%rdi
    72f8:	e8 00 00 00 00       	callq  72fd <_ZN6Parser10compileHWSEv+0x829>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    72fd:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7304:	66 c1 e8 08          	shr    $0x8,%ax
    7308:	0f be d8             	movsbl %al,%ebx
    730b:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    7311:	8d 50 01             	lea    0x1(%rax),%edx
    7314:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    731b:	48 05 b8 00 00 00    	add    $0xb8,%rax
    7321:	89 d6                	mov    %edx,%esi
    7323:	48 89 c7             	mov    %rax,%rdi
    7326:	e8 00 00 00 00       	callq  732b <_ZN6Parser10compileHWSEv+0x857>
    732b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    732f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7333:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7337:	89 de                	mov    %ebx,%esi
    7339:	48 89 c7             	mov    %rax,%rdi
    733c:	e8 00 00 00 00       	callq  7341 <_ZN6Parser10compileHWSEv+0x86d>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7341:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7348:	48 89 c7             	mov    %rax,%rdi
    734b:	e8 00 00 00 00       	callq  7350 <_ZN6Parser10compileHWSEv+0x87c>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7350:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7357:	48 89 c7             	mov    %rax,%rdi
    735a:	e8 00 00 00 00       	callq  735f <_ZN6Parser10compileHWSEv+0x88b>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    735f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7366:	48 89 c7             	mov    %rax,%rdi
    7369:	e8 00 00 00 00       	callq  736e <_ZN6Parser10compileHWSEv+0x89a>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    736e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7375:	48 89 c7             	mov    %rax,%rdi
    7378:	e8 00 00 00 00       	callq  737d <_ZN6Parser10compileHWSEv+0x8a9>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    737d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    7384:	48 89 c7             	mov    %rax,%rdi
    7387:	e8 00 00 00 00       	callq  738c <_ZN6Parser10compileHWSEv+0x8b8>
    738c:	e9 d4 f7 ff ff       	jmpq   6b65 <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7391:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7398:	0f be d8             	movsbl %al,%ebx
    739b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73a2:	48 05 b8 00 00 00    	add    $0xb8,%rax
    73a8:	be 04 00 00 00       	mov    $0x4,%esi
    73ad:	48 89 c7             	mov    %rax,%rdi
    73b0:	e8 00 00 00 00       	callq  73b5 <_ZN6Parser10compileHWSEv+0x8e1>
    73b5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73b9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73bd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73c1:	89 de                	mov    %ebx,%esi
    73c3:	48 89 c7             	mov    %rax,%rdi
    73c6:	e8 00 00 00 00       	callq  73cb <_ZN6Parser10compileHWSEv+0x8f7>
    this->hwSequenceCompiled[5] = CRC16/256;
    73cb:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73d2:	66 c1 e8 08          	shr    $0x8,%ax
    73d6:	0f be d8             	movsbl %al,%ebx
    73d9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73e0:	48 05 b8 00 00 00    	add    $0xb8,%rax
    73e6:	be 05 00 00 00       	mov    $0x5,%esi
    73eb:	48 89 c7             	mov    %rax,%rdi
    73ee:	e8 00 00 00 00       	callq  73f3 <_ZN6Parser10compileHWSEv+0x91f>
    73f3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73f7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73fb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73ff:	89 de                	mov    %ebx,%esi
    7401:	48 89 c7             	mov    %rax,%rdi
    7404:	e8 00 00 00 00       	callq  7409 <_ZN6Parser10compileHWSEv+0x935>

    HWStoHex();
    7409:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7410:	48 89 c7             	mov    %rax,%rdi
    7413:	e8 00 00 00 00       	callq  7418 <_ZN6Parser10compileHWSEv+0x944>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    7418:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    741f:	48 89 c7             	mov    %rax,%rdi
    7422:	e8 00 00 00 00       	callq  7427 <_ZN6Parser10compileHWSEv+0x953>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7427:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    742e:	48 89 c7             	mov    %rax,%rdi
    7431:	e8 00 00 00 00       	callq  7436 <_ZN6Parser10compileHWSEv+0x962>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    7436:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    743d:	48 89 c7             	mov    %rax,%rdi
    7440:	e8 00 00 00 00       	callq  7445 <_ZN6Parser10compileHWSEv+0x971>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7445:	90                   	nop
    7446:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    744a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7451:	00 00 
    7453:	0f 84 8e 01 00 00    	je     75e7 <_ZN6Parser10compileHWSEv+0xb13>
    7459:	e9 84 01 00 00       	jmpq   75e2 <_ZN6Parser10compileHWSEv+0xb0e>
    745e:	48 89 c3             	mov    %rax,%rbx
    7461:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7465:	48 89 c7             	mov    %rax,%rdi
    7468:	e8 00 00 00 00       	callq  746d <_ZN6Parser10compileHWSEv+0x999>
    746d:	e9 1a 01 00 00       	jmpq   758c <_ZN6Parser10compileHWSEv+0xab8>
    7472:	48 89 c3             	mov    %rax,%rbx
    7475:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    747c:	48 89 c7             	mov    %rax,%rdi
    747f:	e8 00 00 00 00       	callq  7484 <_ZN6Parser10compileHWSEv+0x9b0>
    7484:	e9 03 01 00 00       	jmpq   758c <_ZN6Parser10compileHWSEv+0xab8>
    7489:	48 89 c3             	mov    %rax,%rbx
    748c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7490:	48 89 c7             	mov    %rax,%rdi
    7493:	e8 00 00 00 00       	callq  7498 <_ZN6Parser10compileHWSEv+0x9c4>
    7498:	e9 db 00 00 00       	jmpq   7578 <_ZN6Parser10compileHWSEv+0xaa4>
    749d:	48 89 c3             	mov    %rax,%rbx
    74a0:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    74a7:	48 89 c7             	mov    %rax,%rdi
    74aa:	e8 00 00 00 00       	callq  74af <_ZN6Parser10compileHWSEv+0x9db>
    74af:	e9 c4 00 00 00       	jmpq   7578 <_ZN6Parser10compileHWSEv+0xaa4>
    74b4:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    74b7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    74bb:	48 89 c7             	mov    %rax,%rdi
    74be:	e8 00 00 00 00       	callq  74c3 <_ZN6Parser10compileHWSEv+0x9ef>
    74c3:	eb 69                	jmp    752e <_ZN6Parser10compileHWSEv+0xa5a>
    74c5:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    74c8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    74cc:	48 89 c7             	mov    %rax,%rdi
    74cf:	e8 00 00 00 00       	callq  74d4 <_ZN6Parser10compileHWSEv+0xa00>
    74d4:	eb 03                	jmp    74d9 <_ZN6Parser10compileHWSEv+0xa05>
    74d6:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    74d9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74dd:	48 89 c7             	mov    %rax,%rdi
    74e0:	e8 00 00 00 00       	callq  74e5 <_ZN6Parser10compileHWSEv+0xa11>
    74e5:	eb 47                	jmp    752e <_ZN6Parser10compileHWSEv+0xa5a>
    74e7:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    74ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74ee:	48 89 c7             	mov    %rax,%rdi
    74f1:	e8 00 00 00 00       	callq  74f6 <_ZN6Parser10compileHWSEv+0xa22>
    74f6:	eb 36                	jmp    752e <_ZN6Parser10compileHWSEv+0xa5a>
    74f8:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    74fb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74ff:	48 89 c7             	mov    %rax,%rdi
    7502:	e8 00 00 00 00       	callq  7507 <_ZN6Parser10compileHWSEv+0xa33>
    7507:	eb 03                	jmp    750c <_ZN6Parser10compileHWSEv+0xa38>
    7509:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    750c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7510:	48 89 c7             	mov    %rax,%rdi
    7513:	e8 00 00 00 00       	callq  7518 <_ZN6Parser10compileHWSEv+0xa44>
    7518:	eb 03                	jmp    751d <_ZN6Parser10compileHWSEv+0xa49>
    751a:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    751d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7521:	48 89 c7             	mov    %rax,%rdi
    7524:	e8 00 00 00 00       	callq  7529 <_ZN6Parser10compileHWSEv+0xa55>
    7529:	eb 03                	jmp    752e <_ZN6Parser10compileHWSEv+0xa5a>
    752b:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    752e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7532:	48 89 c7             	mov    %rax,%rdi
    7535:	e8 00 00 00 00       	callq  753a <_ZN6Parser10compileHWSEv+0xa66>
    753a:	eb 03                	jmp    753f <_ZN6Parser10compileHWSEv+0xa6b>
    753c:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    753f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7543:	48 89 c7             	mov    %rax,%rdi
    7546:	e8 00 00 00 00       	callq  754b <_ZN6Parser10compileHWSEv+0xa77>
    754b:	eb 03                	jmp    7550 <_ZN6Parser10compileHWSEv+0xa7c>
    754d:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7550:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7557:	48 89 c7             	mov    %rax,%rdi
    755a:	e8 00 00 00 00       	callq  755f <_ZN6Parser10compileHWSEv+0xa8b>
    755f:	eb 03                	jmp    7564 <_ZN6Parser10compileHWSEv+0xa90>
    7561:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7564:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    756b:	48 89 c7             	mov    %rax,%rdi
    756e:	e8 00 00 00 00       	callq  7573 <_ZN6Parser10compileHWSEv+0xa9f>
    7573:	eb 03                	jmp    7578 <_ZN6Parser10compileHWSEv+0xaa4>
    7575:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7578:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    757f:	48 89 c7             	mov    %rax,%rdi
    7582:	e8 00 00 00 00       	callq  7587 <_ZN6Parser10compileHWSEv+0xab3>
    7587:	eb 03                	jmp    758c <_ZN6Parser10compileHWSEv+0xab8>
    7589:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    758c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7593:	48 89 c7             	mov    %rax,%rdi
    7596:	e8 00 00 00 00       	callq  759b <_ZN6Parser10compileHWSEv+0xac7>
    759b:	eb 03                	jmp    75a0 <_ZN6Parser10compileHWSEv+0xacc>
    759d:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    75a0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    75a7:	48 89 c7             	mov    %rax,%rdi
    75aa:	e8 00 00 00 00       	callq  75af <_ZN6Parser10compileHWSEv+0xadb>
    75af:	eb 03                	jmp    75b4 <_ZN6Parser10compileHWSEv+0xae0>
    75b1:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    75b4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    75bb:	48 89 c7             	mov    %rax,%rdi
    75be:	e8 00 00 00 00       	callq  75c3 <_ZN6Parser10compileHWSEv+0xaef>
    75c3:	eb 03                	jmp    75c8 <_ZN6Parser10compileHWSEv+0xaf4>
    75c5:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    75c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    75cf:	48 89 c7             	mov    %rax,%rdi
    75d2:	e8 00 00 00 00       	callq  75d7 <_ZN6Parser10compileHWSEv+0xb03>
    75d7:	48 89 d8             	mov    %rbx,%rax
    75da:	48 89 c7             	mov    %rax,%rdi
    75dd:	e8 00 00 00 00       	callq  75e2 <_ZN6Parser10compileHWSEv+0xb0e>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    75e2:	e8 00 00 00 00       	callq  75e7 <_ZN6Parser10compileHWSEv+0xb13>
    75e7:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    75ee:	5b                   	pop    %rbx
    75ef:	5d                   	pop    %rbp
    75f0:	c3                   	retq   
    75f1:	90                   	nop

00000000000075f2 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    75f2:	55                   	push   %rbp
    75f3:	48 89 e5             	mov    %rsp,%rbp
    75f6:	53                   	push   %rbx
    75f7:	48 83 ec 58          	sub    $0x58,%rsp
    75fb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    75ff:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7606:	00 00 
    7608:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    760c:	31 c0                	xor    %eax,%eax

    int i = 0;
    760e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    7615:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7619:	48 05 a0 00 00 00    	add    $0xa0,%rax
    761f:	48 89 c7             	mov    %rax,%rdi
    7622:	e8 00 00 00 00       	callq  7627 <_ZN6Parser9selectHWSEv+0x35>
    7627:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    762a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    762e:	48 89 c7             	mov    %rax,%rdi
    7631:	e8 00 00 00 00       	callq  7636 <_ZN6Parser9selectHWSEv+0x44>
    QString firstLine;
    7636:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    763a:	48 89 c7             	mov    %rax,%rdi
    763d:	e8 00 00 00 00       	callq  7642 <_ZN6Parser9selectHWSEv+0x50>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    7642:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7646:	48 05 a0 00 00 00    	add    $0xa0,%rax
    764c:	48 89 c7             	mov    %rax,%rdi
    764f:	e8 00 00 00 00       	callq  7654 <_ZN6Parser9selectHWSEv+0x62>
    7654:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    765c:	48 05 a0 00 00 00    	add    $0xa0,%rax
    7662:	48 89 c7             	mov    %rax,%rdi
    7665:	e8 00 00 00 00       	callq  766a <_ZN6Parser9selectHWSEv+0x78>
    766a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    766e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7672:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7676:	48 89 d6             	mov    %rdx,%rsi
    7679:	48 89 c7             	mov    %rax,%rdi
    767c:	e8 00 00 00 00       	callq  7681 <_ZN6Parser9selectHWSEv+0x8f>
    7681:	84 c0                	test   %al,%al
    7683:	74 53                	je     76d8 <_ZN6Parser9selectHWSEv+0xe6>
        firstLine = it.value().at(0);
    7685:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7689:	48 89 c7             	mov    %rax,%rdi
    768c:	e8 00 00 00 00       	callq  7691 <_ZN6Parser9selectHWSEv+0x9f>
    7691:	be 00 00 00 00       	mov    $0x0,%esi
    7696:	48 89 c7             	mov    %rax,%rdi
    7699:	e8 00 00 00 00       	callq  769e <_ZN6Parser9selectHWSEv+0xac>
    769e:	48 89 c2             	mov    %rax,%rdx
    76a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76a5:	48 89 d6             	mov    %rdx,%rsi
    76a8:	48 89 c7             	mov    %rax,%rdi
    76ab:	e8 00 00 00 00       	callq  76b0 <_ZN6Parser9selectHWSEv+0xbe>
        this->strings.append(firstLine);
    76b0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    76b4:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    76bb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76bf:	48 89 c6             	mov    %rax,%rsi
    76c2:	48 89 d7             	mov    %rdx,%rdi
    76c5:	e8 00 00 00 00       	callq  76ca <_ZN6Parser9selectHWSEv+0xd8>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    76ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76ce:	48 89 c7             	mov    %rax,%rdi
    76d1:	e8 00 00 00 00       	callq  76d6 <_ZN6Parser9selectHWSEv+0xe4>
    76d6:	eb 80                	jmp    7658 <_ZN6Parser9selectHWSEv+0x66>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    76d8:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    76df:	8b 45 b8             	mov    -0x48(%rbp),%eax
    76e2:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    76e5:	7d 06                	jge    76ed <_ZN6Parser9selectHWSEv+0xfb>
    76e7:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    76eb:	eb f2                	jmp    76df <_ZN6Parser9selectHWSEv+0xed>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76ed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76f1:	48 89 c7             	mov    %rax,%rdi
    76f4:	e8 00 00 00 00       	callq  76f9 <_ZN6Parser9selectHWSEv+0x107>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76f9:	90                   	nop
    76fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    76fe:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7705:	00 00 
    7707:	74 21                	je     772a <_ZN6Parser9selectHWSEv+0x138>
    7709:	eb 1a                	jmp    7725 <_ZN6Parser9selectHWSEv+0x133>
    770b:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    770e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7712:	48 89 c7             	mov    %rax,%rdi
    7715:	e8 00 00 00 00       	callq  771a <_ZN6Parser9selectHWSEv+0x128>
    771a:	48 89 d8             	mov    %rbx,%rax
    771d:	48 89 c7             	mov    %rax,%rdi
    7720:	e8 00 00 00 00       	callq  7725 <_ZN6Parser9selectHWSEv+0x133>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    7725:	e8 00 00 00 00       	callq  772a <_ZN6Parser9selectHWSEv+0x138>
    772a:	48 83 c4 58          	add    $0x58,%rsp
    772e:	5b                   	pop    %rbx
    772f:	5d                   	pop    %rbp
    7730:	c3                   	retq   
    7731:	90                   	nop

0000000000007732 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    7732:	55                   	push   %rbp
    7733:	48 89 e5             	mov    %rsp,%rbp
    7736:	53                   	push   %rbx
    7737:	48 83 ec 68          	sub    $0x68,%rsp
    773b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    773f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7746:	00 00 
    7748:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    774c:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    774e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7752:	48 89 c7             	mov    %rax,%rdi
    7755:	e8 00 00 00 00       	callq  775a <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    775a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    775e:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
    7765:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7769:	48 89 d6             	mov    %rdx,%rsi
    776c:	48 89 c7             	mov    %rax,%rdi
    776f:	e8 00 00 00 00       	callq  7774 <_ZN6Parser12loadIncludesEv+0x42>
    7774:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7778:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    777c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7780:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
    7787:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    778b:	48 89 d6             	mov    %rdx,%rsi
    778e:	48 89 c7             	mov    %rax,%rdi
    7791:	e8 00 00 00 00       	callq  7796 <_ZN6Parser12loadIncludesEv+0x64>
    7796:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    779a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    779e:	48 89 d6             	mov    %rdx,%rsi
    77a1:	48 89 c7             	mov    %rax,%rdi
    77a4:	e8 00 00 00 00       	callq  77a9 <_ZN6Parser12loadIncludesEv+0x77>
    77a9:	84 c0                	test   %al,%al
    77ab:	0f 84 df 00 00 00    	je     7890 <_ZN6Parser12loadIncludesEv+0x15e>
        QFile hFile(*it);
    77b1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77b5:	48 89 c7             	mov    %rax,%rdi
    77b8:	e8 00 00 00 00       	callq  77bd <_ZN6Parser12loadIncludesEv+0x8b>
    77bd:	48 89 c2             	mov    %rax,%rdx
    77c0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77c4:	48 89 d6             	mov    %rdx,%rsi
    77c7:	48 89 c7             	mov    %rax,%rdi
    77ca:	e8 00 00 00 00       	callq  77cf <_ZN6Parser12loadIncludesEv+0x9d>
        if (hFile.open(QIODevice::ReadOnly))
    77cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77d3:	be 01 00 00 00       	mov    $0x1,%esi
    77d8:	48 89 c7             	mov    %rax,%rdi
    77db:	e8 00 00 00 00       	callq  77e0 <_ZN6Parser12loadIncludesEv+0xae>
    77e0:	8b 55 d0             	mov    -0x30(%rbp),%edx
    77e3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77e7:	89 d6                	mov    %edx,%esi
    77e9:	48 89 c7             	mov    %rax,%rdi
    77ec:	e8 00 00 00 00       	callq  77f1 <_ZN6Parser12loadIncludesEv+0xbf>
    77f1:	84 c0                	test   %al,%al
    77f3:	74 7e                	je     7873 <_ZN6Parser12loadIncludesEv+0x141>
        {
           QTextStream in(&hFile);
    77f5:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    77f9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77fd:	48 89 d6             	mov    %rdx,%rsi
    7800:	48 89 c7             	mov    %rax,%rdi
    7803:	e8 00 00 00 00       	callq  7808 <_ZN6Parser12loadIncludesEv+0xd6>
           while (!in.atEnd())
    7808:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    780c:	48 89 c7             	mov    %rax,%rdi
    780f:	e8 00 00 00 00       	callq  7814 <_ZN6Parser12loadIncludesEv+0xe2>
    7814:	83 f0 01             	xor    $0x1,%eax
    7817:	84 c0                	test   %al,%al
    7819:	74 40                	je     785b <_ZN6Parser12loadIncludesEv+0x129>
           {
              QString line = in.readLine();
    781b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    781f:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    7823:	ba 00 00 00 00       	mov    $0x0,%edx
    7828:	48 89 ce             	mov    %rcx,%rsi
    782b:	48 89 c7             	mov    %rax,%rdi
    782e:	e8 00 00 00 00       	callq  7833 <_ZN6Parser12loadIncludesEv+0x101>
              this->includes.append(line);
    7833:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7837:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    783e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7842:	48 89 c6             	mov    %rax,%rsi
    7845:	48 89 d7             	mov    %rdx,%rdi
    7848:	e8 00 00 00 00       	callq  784d <_ZN6Parser12loadIncludesEv+0x11b>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    784d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7851:	48 89 c7             	mov    %rax,%rdi
    7854:	e8 00 00 00 00       	callq  7859 <_ZN6Parser12loadIncludesEv+0x127>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    7859:	eb ad                	jmp    7808 <_ZN6Parser12loadIncludesEv+0xd6>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    785b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    785f:	48 89 c7             	mov    %rax,%rdi
    7862:	e8 00 00 00 00       	callq  7867 <_ZN6Parser12loadIncludesEv+0x135>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7867:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    786b:	48 89 c7             	mov    %rax,%rdi
    786e:	e8 00 00 00 00       	callq  7873 <_ZN6Parser12loadIncludesEv+0x141>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7873:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7877:	48 89 c7             	mov    %rax,%rdi
    787a:	e8 00 00 00 00       	callq  787f <_ZN6Parser12loadIncludesEv+0x14d>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    787f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7883:	48 89 c7             	mov    %rax,%rdi
    7886:	e8 00 00 00 00       	callq  788b <_ZN6Parser12loadIncludesEv+0x159>
    788b:	e9 ec fe ff ff       	jmpq   777c <_ZN6Parser12loadIncludesEv+0x4a>
    }

    // Append includes before first line of main script;


    QString included;
    7890:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7894:	48 89 c7             	mov    %rax,%rdi
    7897:	e8 00 00 00 00       	callq  789c <_ZN6Parser12loadIncludesEv+0x16a>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    789c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78a0:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    78a7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    78ab:	48 89 d6             	mov    %rdx,%rsi
    78ae:	48 89 c7             	mov    %rax,%rdi
    78b1:	e8 00 00 00 00       	callq  78b6 <_ZN6Parser12loadIncludesEv+0x184>
    78b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    78ba:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    78be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78c2:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    78c9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    78cd:	48 89 d6             	mov    %rdx,%rsi
    78d0:	48 89 c7             	mov    %rax,%rdi
    78d3:	e8 00 00 00 00       	callq  78d8 <_ZN6Parser12loadIncludesEv+0x1a6>
    78d8:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    78dc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78e0:	48 89 d6             	mov    %rdx,%rsi
    78e3:	48 89 c7             	mov    %rax,%rdi
    78e6:	e8 00 00 00 00       	callq  78eb <_ZN6Parser12loadIncludesEv+0x1b9>
    78eb:	84 c0                	test   %al,%al
    78ed:	74 2c                	je     791b <_ZN6Parser12loadIncludesEv+0x1e9>
        included.append(*it);
    78ef:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78f3:	48 89 c7             	mov    %rax,%rdi
    78f6:	e8 00 00 00 00       	callq  78fb <_ZN6Parser12loadIncludesEv+0x1c9>
    78fb:	48 89 c2             	mov    %rax,%rdx
    78fe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7902:	48 89 d6             	mov    %rdx,%rsi
    7905:	48 89 c7             	mov    %rax,%rdi
    7908:	e8 00 00 00 00       	callq  790d <_ZN6Parser12loadIncludesEv+0x1db>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    790d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7911:	48 89 c7             	mov    %rax,%rdi
    7914:	e8 00 00 00 00       	callq  7919 <_ZN6Parser12loadIncludesEv+0x1e7>
    7919:	eb a3                	jmp    78be <_ZN6Parser12loadIncludesEv+0x18c>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    791b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    791f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7923:	48 89 d6             	mov    %rdx,%rsi
    7926:	48 89 c7             	mov    %rax,%rdi
    7929:	e8 00 00 00 00       	callq  792e <_ZN6Parser12loadIncludesEv+0x1fc>
    }

    // Append includes before first line of main script;


    QString included;
    792e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7932:	48 89 c7             	mov    %rax,%rdi
    7935:	e8 00 00 00 00       	callq  793a <_ZN6Parser12loadIncludesEv+0x208>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    793a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    793e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7945:	00 00 
    7947:	74 5d                	je     79a6 <_ZN6Parser12loadIncludesEv+0x274>
    7949:	eb 56                	jmp    79a1 <_ZN6Parser12loadIncludesEv+0x26f>
    794b:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    794e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7952:	48 89 c7             	mov    %rax,%rdi
    7955:	e8 00 00 00 00       	callq  795a <_ZN6Parser12loadIncludesEv+0x228>
    795a:	eb 03                	jmp    795f <_ZN6Parser12loadIncludesEv+0x22d>
    795c:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    795f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7963:	48 89 c7             	mov    %rax,%rdi
    7966:	e8 00 00 00 00       	callq  796b <_ZN6Parser12loadIncludesEv+0x239>
    796b:	eb 03                	jmp    7970 <_ZN6Parser12loadIncludesEv+0x23e>
    796d:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7970:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7974:	48 89 c7             	mov    %rax,%rdi
    7977:	e8 00 00 00 00       	callq  797c <_ZN6Parser12loadIncludesEv+0x24a>
    797c:	48 89 d8             	mov    %rbx,%rax
    797f:	48 89 c7             	mov    %rax,%rdi
    7982:	e8 00 00 00 00       	callq  7987 <_ZN6Parser12loadIncludesEv+0x255>
    7987:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    798a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    798e:	48 89 c7             	mov    %rax,%rdi
    7991:	e8 00 00 00 00       	callq  7996 <_ZN6Parser12loadIncludesEv+0x264>
    7996:	48 89 d8             	mov    %rbx,%rax
    7999:	48 89 c7             	mov    %rax,%rdi
    799c:	e8 00 00 00 00       	callq  79a1 <_ZN6Parser12loadIncludesEv+0x26f>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    79a1:	e8 00 00 00 00       	callq  79a6 <_ZN6Parser12loadIncludesEv+0x274>
    79a6:	48 83 c4 68          	add    $0x68,%rsp
    79aa:	5b                   	pop    %rbx
    79ab:	5d                   	pop    %rbp
    79ac:	c3                   	retq   
    79ad:	90                   	nop

00000000000079ae <_ZN6Parser13compileModuleEv>:

void Parser::compileModule(){
    79ae:	55                   	push   %rbp
    79af:	48 89 e5             	mov    %rsp,%rbp
    79b2:	53                   	push   %rbx
    79b3:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    79ba:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    79c1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    79c8:	00 00 
    79ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    79ce:	31 c0                	xor    %eax,%eax

    int n = this->Modules.size();
    79d0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    79d7:	48 83 c0 58          	add    $0x58,%rax
    79db:	48 89 c7             	mov    %rax,%rdi
    79de:	e8 00 00 00 00       	callq  79e3 <_ZN6Parser13compileModuleEv+0x35>
    79e3:	89 45 98             	mov    %eax,-0x68(%rbp)
    int i = 0;
    79e6:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)

    for(i=0;i<n;i++){
    79ed:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
    79f4:	8b 45 90             	mov    -0x70(%rbp),%eax
    79f7:	3b 45 98             	cmp    -0x68(%rbp),%eax
    79fa:	0f 8d ad 01 00 00    	jge    7bad <_ZN6Parser13compileModuleEv+0x1ff>

        this->Modules[i].prepareVariables(this->variables);
    7a00:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7a07:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    7a0e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a12:	48 89 d6             	mov    %rdx,%rsi
    7a15:	48 89 c7             	mov    %rax,%rdi
    7a18:	e8 00 00 00 00       	callq  7a1d <_ZN6Parser13compileModuleEv+0x6f>
    7a1d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7a24:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7a28:	8b 45 90             	mov    -0x70(%rbp),%eax
    7a2b:	89 c6                	mov    %eax,%esi
    7a2d:	48 89 d7             	mov    %rdx,%rdi
    7a30:	e8 00 00 00 00       	callq  7a35 <_ZN6Parser13compileModuleEv+0x87>
    7a35:	48 89 c2             	mov    %rax,%rdx
    7a38:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a3c:	48 89 c6             	mov    %rax,%rsi
    7a3f:	48 89 d7             	mov    %rdx,%rdi
    7a42:	e8 00 00 00 00       	callq  7a47 <_ZN6Parser13compileModuleEv+0x99>
    7a47:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a4b:	48 89 c7             	mov    %rax,%rdi
    7a4e:	e8 00 00 00 00       	callq  7a53 <_ZN6Parser13compileModuleEv+0xa5>

        int         nn = this->Modules.at(i).variables.size();
    7a53:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7a5a:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7a5e:	8b 45 90             	mov    -0x70(%rbp),%eax
    7a61:	89 c6                	mov    %eax,%esi
    7a63:	48 89 d7             	mov    %rdx,%rdi
    7a66:	e8 00 00 00 00       	callq  7a6b <_ZN6Parser13compileModuleEv+0xbd>
    7a6b:	48 83 c0 10          	add    $0x10,%rax
    7a6f:	48 89 c7             	mov    %rax,%rdi
    7a72:	e8 00 00 00 00       	callq  7a77 <_ZN6Parser13compileModuleEv+0xc9>
    7a77:	89 45 9c             	mov    %eax,-0x64(%rbp)
        int         ii = 0;
    7a7a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
        quint8      index;
        QString     name;
    7a81:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7a85:	48 89 c7             	mov    %rax,%rdi
    7a88:	e8 00 00 00 00       	callq  7a8d <_ZN6Parser13compileModuleEv+0xdf>

        for(ii=0; ii<nn; ++ii){
    7a8d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
    7a94:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7a97:	3b 45 9c             	cmp    -0x64(%rbp),%eax
    7a9a:	0f 8d b3 00 00 00    	jge    7b53 <_ZN6Parser13compileModuleEv+0x1a5>
            name    = this->Modules.at(i).variables.at(ii).name;
    7aa0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7aa7:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7aab:	8b 45 90             	mov    -0x70(%rbp),%eax
    7aae:	89 c6                	mov    %eax,%esi
    7ab0:	48 89 d7             	mov    %rdx,%rdi
    7ab3:	e8 00 00 00 00       	callq  7ab8 <_ZN6Parser13compileModuleEv+0x10a>
    7ab8:	48 8d 50 10          	lea    0x10(%rax),%rdx
    7abc:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7abf:	89 c6                	mov    %eax,%esi
    7ac1:	48 89 d7             	mov    %rdx,%rdi
    7ac4:	e8 00 00 00 00       	callq  7ac9 <_ZN6Parser13compileModuleEv+0x11b>
    7ac9:	48 8d 50 10          	lea    0x10(%rax),%rdx
    7acd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7ad1:	48 89 d6             	mov    %rdx,%rsi
    7ad4:	48 89 c7             	mov    %rax,%rdi
    7ad7:	e8 00 00 00 00       	callq  7adc <_ZN6Parser13compileModuleEv+0x12e>
            index   = this->varIndexes.take(name);
    7adc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7ae3:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7ae7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7aeb:	48 89 c6             	mov    %rax,%rsi
    7aee:	48 89 d7             	mov    %rdx,%rdi
    7af1:	e8 00 00 00 00       	callq  7af6 <_ZN6Parser13compileModuleEv+0x148>
    7af6:	88 45 8f             	mov    %al,-0x71(%rbp)

            qDebug() << name;
    7af9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7afd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7b04 <_ZN6Parser13compileModuleEv+0x156>
    7b04:	ba f3 03 00 00       	mov    $0x3f3,%edx
    7b09:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7b10 <_ZN6Parser13compileModuleEv+0x162>
    7b10:	48 89 c7             	mov    %rax,%rdi
    7b13:	e8 00 00 00 00       	callq  7b18 <_ZN6Parser13compileModuleEv+0x16a>
    7b18:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b1c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    7b20:	48 89 d6             	mov    %rdx,%rsi
    7b23:	48 89 c7             	mov    %rax,%rdi
    7b26:	e8 00 00 00 00       	callq  7b2b <_ZN6Parser13compileModuleEv+0x17d>
    7b2b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    7b2f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b33:	48 89 d6             	mov    %rdx,%rsi
    7b36:	48 89 c7             	mov    %rax,%rdi
    7b39:	e8 00 00 00 00       	callq  7b3e <_ZN6Parser13compileModuleEv+0x190>
    7b3e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b42:	48 89 c7             	mov    %rax,%rdi
    7b45:	e8 00 00 00 00       	callq  7b4a <_ZN6Parser13compileModuleEv+0x19c>
        int         nn = this->Modules.at(i).variables.size();
        int         ii = 0;
        quint8      index;
        QString     name;

        for(ii=0; ii<nn; ++ii){
    7b4a:	83 45 94 01          	addl   $0x1,-0x6c(%rbp)
    7b4e:	e9 41 ff ff ff       	jmpq   7a94 <_ZN6Parser13compileModuleEv+0xe6>
        this->Modules[i].prepareVariables(this->variables);

        int         nn = this->Modules.at(i).variables.size();
        int         ii = 0;
        quint8      index;
        QString     name;
    7b53:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7b57:	48 89 c7             	mov    %rax,%rdi
    7b5a:	e8 00 00 00 00       	callq  7b5f <_ZN6Parser13compileModuleEv+0x1b1>
void Parser::compileModule(){

    int n = this->Modules.size();
    int i = 0;

    for(i=0;i<n;i++){
    7b5f:	83 45 90 01          	addl   $0x1,-0x70(%rbp)
    7b63:	e9 8c fe ff ff       	jmpq   79f4 <_ZN6Parser13compileModuleEv+0x46>
    7b68:	48 89 c3             	mov    %rax,%rbx

        this->Modules[i].prepareVariables(this->variables);
    7b6b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7b6f:	48 89 c7             	mov    %rax,%rdi
    7b72:	e8 00 00 00 00       	callq  7b77 <_ZN6Parser13compileModuleEv+0x1c9>
    7b77:	48 89 d8             	mov    %rbx,%rax
    7b7a:	48 89 c7             	mov    %rax,%rdi
    7b7d:	e8 00 00 00 00       	callq  7b82 <_ZN6Parser13compileModuleEv+0x1d4>
    7b82:	48 89 c3             	mov    %rax,%rbx

        for(ii=0; ii<nn; ++ii){
            name    = this->Modules.at(i).variables.at(ii).name;
            index   = this->varIndexes.take(name);

            qDebug() << name;
    7b85:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b89:	48 89 c7             	mov    %rax,%rdi
    7b8c:	e8 00 00 00 00       	callq  7b91 <_ZN6Parser13compileModuleEv+0x1e3>
    7b91:	eb 03                	jmp    7b96 <_ZN6Parser13compileModuleEv+0x1e8>
    7b93:	48 89 c3             	mov    %rax,%rbx
        this->Modules[i].prepareVariables(this->variables);

        int         nn = this->Modules.at(i).variables.size();
        int         ii = 0;
        quint8      index;
        QString     name;
    7b96:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7b9a:	48 89 c7             	mov    %rax,%rdi
    7b9d:	e8 00 00 00 00       	callq  7ba2 <_ZN6Parser13compileModuleEv+0x1f4>
    7ba2:	48 89 d8             	mov    %rbx,%rax
    7ba5:	48 89 c7             	mov    %rax,%rdi
    7ba8:	e8 00 00 00 00       	callq  7bad <_ZN6Parser13compileModuleEv+0x1ff>

            qDebug() << name;
        }
    }

}
    7bad:	90                   	nop
    7bae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7bb2:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7bb9:	00 00 
    7bbb:	74 05                	je     7bc2 <_ZN6Parser13compileModuleEv+0x214>
    7bbd:	e8 00 00 00 00       	callq  7bc2 <_ZN6Parser13compileModuleEv+0x214>
    7bc2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    7bc9:	5b                   	pop    %rbx
    7bca:	5d                   	pop    %rbp
    7bcb:	c3                   	retq   

0000000000007bcc <_ZN6Parser11takeModulesEv>:

void Parser::takeModules(){
    7bcc:	55                   	push   %rbp
    7bcd:	48 89 e5             	mov    %rsp,%rbp
    7bd0:	53                   	push   %rbx
    7bd1:	48 83 ec 58          	sub    $0x58,%rsp
    7bd5:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    7bd9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7be0:	00 00 
    7be2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7be6:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    7be8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7bec:	48 89 c7             	mov    %rax,%rdi
    7bef:	e8 00 00 00 00       	callq  7bf4 <_ZN6Parser11takeModulesEv+0x28>
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
    7bf4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7bf8:	48 05 a0 00 00 00    	add    $0xa0,%rax
    7bfe:	48 89 c7             	mov    %rax,%rdi
    7c01:	e8 00 00 00 00       	callq  7c06 <_ZN6Parser11takeModulesEv+0x3a>
    7c06:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7c0a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7c0e:	48 05 a0 00 00 00    	add    $0xa0,%rax
    7c14:	48 89 c7             	mov    %rax,%rdi
    7c17:	e8 00 00 00 00       	callq  7c1c <_ZN6Parser11takeModulesEv+0x50>
    7c1c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7c20:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    7c24:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c28:	48 89 d6             	mov    %rdx,%rsi
    7c2b:	48 89 c7             	mov    %rax,%rdi
    7c2e:	e8 00 00 00 00       	callq  7c33 <_ZN6Parser11takeModulesEv+0x67>
    7c33:	84 c0                	test   %al,%al
    7c35:	74 7a                	je     7cb1 <_ZN6Parser11takeModulesEv+0xe5>
        module M(&it.value(), &this->variables);
    7c37:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7c3b:	48 8d 98 c0 00 00 00 	lea    0xc0(%rax),%rbx
    7c42:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c46:	48 89 c7             	mov    %rax,%rdi
    7c49:	e8 00 00 00 00       	callq  7c4e <_ZN6Parser11takeModulesEv+0x82>
    7c4e:	48 89 c1             	mov    %rax,%rcx
    7c51:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7c55:	48 89 da             	mov    %rbx,%rdx
    7c58:	48 89 ce             	mov    %rcx,%rsi
    7c5b:	48 89 c7             	mov    %rax,%rdi
    7c5e:	e8 00 00 00 00       	callq  7c63 <_ZN6Parser11takeModulesEv+0x97>

        this->Modules.append(M);
    7c63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7c67:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7c6b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7c6f:	48 89 c6             	mov    %rax,%rsi
    7c72:	48 89 d7             	mov    %rdx,%rdi
    7c75:	e8 00 00 00 00       	callq  7c7a <_ZN6Parser11takeModulesEv+0xae>
}

void Parser::takeModules(){
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
        module M(&it.value(), &this->variables);
    7c7a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7c7e:	48 89 c7             	mov    %rax,%rdi
    7c81:	e8 00 00 00 00       	callq  7c86 <_ZN6Parser11takeModulesEv+0xba>

}

void Parser::takeModules(){
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
    7c86:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c8a:	48 89 c7             	mov    %rax,%rdi
    7c8d:	e8 00 00 00 00       	callq  7c92 <_ZN6Parser11takeModulesEv+0xc6>
    7c92:	e9 73 ff ff ff       	jmpq   7c0a <_ZN6Parser11takeModulesEv+0x3e>
    7c97:	48 89 c3             	mov    %rax,%rbx
        module M(&it.value(), &this->variables);
    7c9a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7c9e:	48 89 c7             	mov    %rax,%rdi
    7ca1:	e8 00 00 00 00       	callq  7ca6 <_ZN6Parser11takeModulesEv+0xda>
    7ca6:	48 89 d8             	mov    %rbx,%rax
    7ca9:	48 89 c7             	mov    %rax,%rdi
    7cac:	e8 00 00 00 00       	callq  7cb1 <_ZN6Parser11takeModulesEv+0xe5>

        this->Modules.append(M);
    }
}
    7cb1:	90                   	nop
    7cb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7cb6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7cbd:	00 00 
    7cbf:	74 05                	je     7cc6 <_ZN6Parser11takeModulesEv+0xfa>
    7cc1:	e8 00 00 00 00       	callq  7cc6 <_ZN6Parser11takeModulesEv+0xfa>
    7cc6:	48 83 c4 58          	add    $0x58,%rsp
    7cca:	5b                   	pop    %rbx
    7ccb:	5d                   	pop    %rbp
    7ccc:	c3                   	retq   
    7ccd:	90                   	nop

0000000000007cce <_ZN6Parser7compileEv>:

int Parser::compile(){
    7cce:	55                   	push   %rbp
    7ccf:	48 89 e5             	mov    %rsp,%rbp
    7cd2:	53                   	push   %rbx
    7cd3:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    7cda:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    7ce1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7ce8:	00 00 
    7cea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7cee:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7cf0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7cf4:	48 89 c7             	mov    %rax,%rdi
    7cf7:	e8 00 00 00 00       	callq  7cfc <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    7cfc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7d07:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d0e:	48 89 c7             	mov    %rax,%rdi
    7d11:	e8 00 00 00 00       	callq  7d16 <_ZN6Parser7compileEv+0x48>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7d16:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7d1d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d24 <_ZN6Parser7compileEv+0x56>
    7d24:	48 89 c7             	mov    %rax,%rdi
    7d27:	e8 00 00 00 00       	callq  7d2c <_ZN6Parser7compileEv+0x5e>
    7d2c:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7d33:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d3a:	48 89 d6             	mov    %rdx,%rsi
    7d3d:	48 89 c7             	mov    %rax,%rdi
    7d40:	e8 00 00 00 00       	callq  7d45 <_ZN6Parser7compileEv+0x77>
    7d45:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7d4c:	48 89 c7             	mov    %rax,%rdi
    7d4f:	e8 00 00 00 00       	callq  7d54 <_ZN6Parser7compileEv+0x86>
    this->addIncludeFile("project1.h");
    7d54:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7d5b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d62 <_ZN6Parser7compileEv+0x94>
    7d62:	48 89 c7             	mov    %rax,%rdi
    7d65:	e8 00 00 00 00       	callq  7d6a <_ZN6Parser7compileEv+0x9c>
    7d6a:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7d71:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d78:	48 89 d6             	mov    %rdx,%rsi
    7d7b:	48 89 c7             	mov    %rax,%rdi
    7d7e:	e8 00 00 00 00       	callq  7d83 <_ZN6Parser7compileEv+0xb5>
    7d83:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7d8a:	48 89 c7             	mov    %rax,%rdi
    7d8d:	e8 00 00 00 00       	callq  7d92 <_ZN6Parser7compileEv+0xc4>
    this->addIncludeFile("kpa_config.h");
    7d92:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7d96:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d9d <_ZN6Parser7compileEv+0xcf>
    7d9d:	48 89 c7             	mov    %rax,%rdi
    7da0:	e8 00 00 00 00       	callq  7da5 <_ZN6Parser7compileEv+0xd7>
    7da5:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7da9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7db0:	48 89 d6             	mov    %rdx,%rsi
    7db3:	48 89 c7             	mov    %rax,%rdi
    7db6:	e8 00 00 00 00       	callq  7dbb <_ZN6Parser7compileEv+0xed>
    7dbb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7dbf:	48 89 c7             	mov    %rax,%rdi
    7dc2:	e8 00 00 00 00       	callq  7dc7 <_ZN6Parser7compileEv+0xf9>
    this->addIncludeFile("names.h");
    7dc7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7dcb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7dd2 <_ZN6Parser7compileEv+0x104>
    7dd2:	48 89 c7             	mov    %rax,%rdi
    7dd5:	e8 00 00 00 00       	callq  7dda <_ZN6Parser7compileEv+0x10c>
    7dda:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7dde:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7de5:	48 89 d6             	mov    %rdx,%rsi
    7de8:	48 89 c7             	mov    %rax,%rdi
    7deb:	e8 00 00 00 00       	callq  7df0 <_ZN6Parser7compileEv+0x122>
    7df0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7df4:	48 89 c7             	mov    %rax,%rdi
    7df7:	e8 00 00 00 00       	callq  7dfc <_ZN6Parser7compileEv+0x12e>
    int lIf = this->loadIncludes();
    7dfc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e03:	48 89 c7             	mov    %rax,%rdi
    7e06:	e8 00 00 00 00       	callq  7e0b <_ZN6Parser7compileEv+0x13d>
    7e0b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7e11:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7e15:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e1c:	48 89 d6             	mov    %rdx,%rsi
    7e1f:	48 89 c7             	mov    %rax,%rdi
    7e22:	e8 00 00 00 00       	callq  7e27 <_ZN6Parser7compileEv+0x159>
    7e27:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7e2d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7e31:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e38:	48 89 d6             	mov    %rdx,%rsi
    7e3b:	48 89 c7             	mov    %rax,%rdi
    7e3e:	e8 00 00 00 00       	callq  7e43 <_ZN6Parser7compileEv+0x175>
    7e43:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7e49:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e50:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7e54:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7e58:	48 89 d6             	mov    %rdx,%rsi
    7e5b:	48 89 c7             	mov    %rax,%rdi
    7e5e:	e8 00 00 00 00       	callq  7e63 <_ZN6Parser7compileEv+0x195>
    7e63:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e6a:	48 8d b8 a0 00 00 00 	lea    0xa0(%rax),%rdi
    7e71:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7e78:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    7e7c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e83:	48 89 d1             	mov    %rdx,%rcx
    7e86:	48 89 fa             	mov    %rdi,%rdx
    7e89:	48 89 c7             	mov    %rax,%rdi
    7e8c:	e8 00 00 00 00       	callq  7e91 <_ZN6Parser7compileEv+0x1c3>
    7e91:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7e95:	48 89 c7             	mov    %rax,%rdi
    7e98:	e8 00 00 00 00       	callq  7e9d <_ZN6Parser7compileEv+0x1cf>
    this->takeModules();
    7e9d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ea4:	48 89 c7             	mov    %rax,%rdi
    7ea7:	e8 00 00 00 00       	callq  7eac <_ZN6Parser7compileEv+0x1de>
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7eac:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7eb3:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7eb7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7ebb:	48 89 d6             	mov    %rdx,%rsi
    7ebe:	48 89 c7             	mov    %rax,%rdi
    7ec1:	e8 00 00 00 00       	callq  7ec6 <_ZN6Parser7compileEv+0x1f8>
    7ec6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ecd:	48 8d b8 b0 00 00 00 	lea    0xb0(%rax),%rdi
    7ed4:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7edb:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7edf:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ee6:	48 89 d1             	mov    %rdx,%rcx
    7ee9:	48 89 fa             	mov    %rdi,%rdx
    7eec:	48 89 c7             	mov    %rax,%rdi
    7eef:	e8 00 00 00 00       	callq  7ef4 <_ZN6Parser7compileEv+0x226>
    7ef4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7ef8:	48 89 c7             	mov    %rax,%rdi
    7efb:	e8 00 00 00 00       	callq  7f00 <_ZN6Parser7compileEv+0x232>

    compileHWS();
    7f00:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f07:	48 89 c7             	mov    %rax,%rdi
    7f0a:	e8 00 00 00 00       	callq  7f0f <_ZN6Parser7compileEv+0x241>

    compileModule();
    7f0f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f16:	48 89 c7             	mov    %rax,%rdi
    7f19:	e8 00 00 00 00       	callq  7f1e <_ZN6Parser7compileEv+0x250>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7f1e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7f22:	48 89 c7             	mov    %rax,%rdi
    7f25:	e8 00 00 00 00       	callq  7f2a <_ZN6Parser7compileEv+0x25c>
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);

    compileHWS();

    compileModule();
}
    7f2a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7f2e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7f35:	00 00 
    7f37:	0f 84 90 00 00 00    	je     7fcd <_ZN6Parser7compileEv+0x2ff>
    7f3d:	e9 86 00 00 00       	jmpq   7fc8 <_ZN6Parser7compileEv+0x2fa>
    7f42:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7f45:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7f4c:	48 89 c7             	mov    %rax,%rdi
    7f4f:	e8 00 00 00 00       	callq  7f54 <_ZN6Parser7compileEv+0x286>
    7f54:	eb 5b                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7f56:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7f59:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7f60:	48 89 c7             	mov    %rax,%rdi
    7f63:	e8 00 00 00 00       	callq  7f68 <_ZN6Parser7compileEv+0x29a>
    7f68:	eb 47                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7f6a:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7f6d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7f71:	48 89 c7             	mov    %rax,%rdi
    7f74:	e8 00 00 00 00       	callq  7f79 <_ZN6Parser7compileEv+0x2ab>
    7f79:	eb 36                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7f7b:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7f7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7f82:	48 89 c7             	mov    %rax,%rdi
    7f85:	e8 00 00 00 00       	callq  7f8a <_ZN6Parser7compileEv+0x2bc>
    7f8a:	eb 25                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7f8c:	48 89 c3             	mov    %rax,%rbx
    int cDr = this->checkDefines(script);

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7f8f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7f93:	48 89 c7             	mov    %rax,%rdi
    7f96:	e8 00 00 00 00       	callq  7f9b <_ZN6Parser7compileEv+0x2cd>
    7f9b:	eb 14                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7f9d:	48 89 c3             	mov    %rax,%rbx
    this->takeModules();
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7fa0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7fa4:	48 89 c7             	mov    %rax,%rdi
    7fa7:	e8 00 00 00 00       	callq  7fac <_ZN6Parser7compileEv+0x2de>
    7fac:	eb 03                	jmp    7fb1 <_ZN6Parser7compileEv+0x2e3>
    7fae:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7fb1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7fb5:	48 89 c7             	mov    %rax,%rdi
    7fb8:	e8 00 00 00 00       	callq  7fbd <_ZN6Parser7compileEv+0x2ef>
    7fbd:	48 89 d8             	mov    %rbx,%rax
    7fc0:	48 89 c7             	mov    %rax,%rdi
    7fc3:	e8 00 00 00 00       	callq  7fc8 <_ZN6Parser7compileEv+0x2fa>
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);

    compileHWS();

    compileModule();
}
    7fc8:	e8 00 00 00 00       	callq  7fcd <_ZN6Parser7compileEv+0x2ff>
    7fcd:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    7fd4:	5b                   	pop    %rbx
    7fd5:	5d                   	pop    %rbp
    7fd6:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN18QMessageLogContextC2EPKciS1_S1_:

0000000000000000 <_ZN18QMessageLogContextC1EPKciS1_S1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  13:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  28:	89 50 04             	mov    %edx,0x4(%rax)
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  33:	48 89 50 08          	mov    %rdx,0x8(%rax)
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  3f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  4f:	90                   	nop
  50:	5d                   	pop    %rbp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c3                   	retq   

Дизассемблирование раздела .text._ZN14QMessageLoggerC2EPKciS1_:

0000000000000000 <_ZN14QMessageLoggerC1EPKciS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  1f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  22:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  26:	4c 8d 05 00 00 00 00 	lea    0x0(%rip),%r8        # 2d <_ZN14QMessageLoggerC1EPKciS1_+0x2d>
    QString script = *str;
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN14QMessageLoggerC1EPKciS1_+0x35>
  35:	90                   	nop
  36:	c9                   	leaveq 
  37:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2ERKS_:

0000000000000000 <_ZN10QByteArrayC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 00             	mov    (%rax),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN10QByteArrayC1ERKS_+0x2d>
    QString script = *str;
  2d:	90                   	nop
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QDataStreamlsEh:

0000000000000000 <_ZN11QDataStreamlsEh>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  15:	0f be d0             	movsbl %al,%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	89 d6                	mov    %edx,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN11QDataStreamlsEh+0x26>
  26:	c9                   	leaveq 
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QDebug10maybeSpaceEv:

0000000000000000 <_ZN6QDebug10maybeSpaceEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  17:	84 c0                	test   %al,%al
  19:	74 14                	je     2f <_ZN6QDebug10maybeSpaceEv+0x2f>
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN6QDebug10maybeSpaceEv+0x2f>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QDebuglsERK7QString:

0000000000000000 <_ZN6QDebuglsERK7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN6QDebuglsERK7QString+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN6QDebuglsERK7QString+0x2b>
    QString script = *str;
  2b:	48 89 c1             	mov    %rax,%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 da             	mov    %rbx,%rdx
  35:	48 89 ce             	mov    %rcx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN6QDebuglsERK7QString+0x40>
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZN6QDebuglsERK7QString+0x4c>
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN6moduleD2Ev:

0000000000000000 <_ZN6moduleD1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN6moduleD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN6moduleD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 08          	add    $0x8,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN6moduleD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN6moduleD1Ev+0x49>
  49:	eb 44                	jmp    8f <_ZN6moduleD1Ev+0x8f>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 83 c0 10          	add    $0x10,%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN6moduleD1Ev+0x5e>
  5e:	eb 03                	jmp    63 <_ZN6moduleD1Ev+0x63>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	48 83 c0 08          	add    $0x8,%rax
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN6moduleD1Ev+0x73>
  73:	eb 03                	jmp    78 <_ZN6moduleD1Ev+0x78>
  75:	48 89 c3             	mov    %rax,%rbx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	callq  84 <_ZN6moduleD1Ev+0x84>
  84:	48 89 d8             	mov    %rbx,%rax
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN6moduleD1Ev+0x8f>
  8f:	48 83 c4 18          	add    $0x18,%rsp
  93:	5b                   	pop    %rbx
  94:	5d                   	pop    %rbp
  95:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE4takeERKS0_:

0000000000000000 <_ZN4QMapI7QStringhE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapI7QStringhE4takeERKS0_+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapI7QStringhE4takeERKS0_+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapI7QStringhE4takeERKS0_+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 20          	movzbl 0x20(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapI7QStringhE4takeERKS0_+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapI7QStringhE4takeERKS0_+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE4takeERKh:

0000000000000000 <_ZN4QMapIhhE4takeERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapIhhE4takeERKh+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapIhhE4takeERKh+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapIhhE4takeERKh+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 19          	movzbl 0x19(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapIhhE4takeERKh+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapIhhE4takeERKh+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE6appendERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI10QByteArrayE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI10QByteArrayE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI10QByteArrayE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI10QByteArrayE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI10QByteArrayE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI10QByteArrayE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI10QByteArrayE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI10QByteArrayE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI10QByteArrayE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI6moduleE4sizeEv:

0000000000000000 <_ZNK5QListI6moduleE4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI6moduleE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleEixEi:

0000000000000000 <_ZN5QListI6moduleEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI6moduleEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI6moduleEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI6moduleEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI6moduleEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI6moduleEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI6moduleEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI6moduleEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI6moduleEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI6moduleEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI6moduleEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI6moduleE2atEi:

0000000000000000 <_ZNK5QListI6moduleE2atEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI6moduleE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI6moduleE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI6moduleE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI6moduleE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI6moduleE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI6moduleE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI6moduleE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI6moduleE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI6moduleE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI6moduleE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI8variableE4sizeEv:

0000000000000000 <_ZNK5QListI8variableE4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI8variableE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI8variableE2atEi:

0000000000000000 <_ZNK5QListI8variableE2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI8variableE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI8variableE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI8variableE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI8variableE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI8variableE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI8variableE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI8variableE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI8variableE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI8variableE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI8variableE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableED2Ev:

0000000000000000 <_ZN5QListI8variableED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI8variableED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI8variableED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI8variableED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI8variableED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI8variableED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI8variableED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI8variableED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE6appendERKS0_:

0000000000000000 <_ZN5QListI6moduleE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI6moduleE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI6moduleE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI6moduleE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI6moduleE6appendERKS0_+0x64>
  64:	e9 89 00 00 00       	jmpq   f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI6moduleE6appendERKS0_+0x75>
  75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  79:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  7d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  81:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  85:	48 89 ce             	mov    %rcx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZN5QListI6moduleE6appendERKS0_+0x90>
  90:	eb 60                	jmp    f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	callq  9a <_ZN5QListI6moduleE6appendERKS0_+0x9a>
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 00             	mov    (%rax),%rax
  a1:	8b 50 0c             	mov    0xc(%rax),%edx
  a4:	83 ea 01             	sub    $0x1,%edx
  a7:	89 50 0c             	mov    %edx,0xc(%rax)
  aa:	e8 00 00 00 00       	callq  af <_ZN5QListI6moduleE6appendERKS0_+0xaf>
  af:	48 89 c3             	mov    %rax,%rbx
  b2:	e8 00 00 00 00       	callq  b7 <_ZN5QListI6moduleE6appendERKS0_+0xb7>
  b7:	48 89 d8             	mov    %rbx,%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI6moduleE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN5QListI6moduleE6appendERKS0_+0xca>
  ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 00             	mov    (%rax),%rax
  d1:	8b 50 0c             	mov    0xc(%rax),%edx
  d4:	83 ea 01             	sub    $0x1,%edx
  d7:	89 50 0c             	mov    %edx,0xc(%rax)
  da:	e8 00 00 00 00       	callq  df <_ZN5QListI6moduleE6appendERKS0_+0xdf>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c3             	mov    %rax,%rbx
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI6moduleE6appendERKS0_+0xe7>
  e7:	48 89 d8             	mov    %rbx,%rax
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	callq  f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  fd:	00 00 
  ff:	74 05                	je     106 <_ZN5QListI6moduleE6appendERKS0_+0x106>
 101:	e8 00 00 00 00       	callq  106 <_ZN5QListI6moduleE6appendERKS0_+0x106>
 106:	48 83 c4 38          	add    $0x38,%rsp
 10a:	5b                   	pop    %rbx
 10b:	5d                   	pop    %rbp
 10c:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE:

0000000000000000 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 83 c0 18          	add    $0x18,%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x20>
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  28:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x33>
  33:	90                   	nop
  34:	c9                   	leaveq 
  35:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE8findNodeERKh:

0000000000000000 <_ZNK8QMapDataIhhE8findNodeERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataIhhE8findNodeERKh+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataIhhE8findNodeERKh+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataIhhE8findNodeERKh+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataIhhE8findNodeERKh+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataIhhE8findNodeERKh+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE:

0000000000000000 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE18detach_helper_growEii:

0000000000000000 <_ZN5QListI10QByteArrayE18detach_helper_growEii>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE6detachEv:

0000000000000000 <_ZN5QListI6moduleE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI6moduleE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI6moduleE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI6moduleE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE4Node1tEv:

0000000000000000 <_ZN5QListI6moduleE4Node1tEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE4Node1tEv:

0000000000000000 <_ZN5QListI8variableE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI8variableED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI8variableED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI8variableE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI8variableE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI8variableE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE18detach_helper_growEii:

0000000000000000 <_ZN5QListI6moduleE18detach_helper_growEii>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI6moduleE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI6moduleE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI6moduleE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI6moduleE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI6moduleE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI6moduleE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI6moduleE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI6moduleE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI6moduleE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI6moduleE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI6moduleE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI6moduleE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI6moduleE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI6moduleE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI6moduleE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI6moduleE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI6moduleE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI6moduleE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI6moduleE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI6moduleE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI6moduleE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI6moduleE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI6moduleE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI6moduleE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI6moduleE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN6moduleC2ERKS_:

0000000000000000 <_ZN6moduleC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN6moduleC1ERKS_+0x24>
  24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  28:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QString script = *str;
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 83 c0 08          	add    $0x8,%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN6moduleC1ERKS_+0x3f>
  3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  43:	48 8d 50 10          	lea    0x10(%rax),%rdx
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 83 c0 10          	add    $0x10,%rax
  4f:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN6moduleC1ERKS_+0x5a>
  5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5e:	48 8d 50 18          	lea    0x18(%rax),%rdx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 83 c0 18          	add    $0x18,%rax
  6a:	48 89 d6             	mov    %rdx,%rsi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN6moduleC1ERKS_+0x75>
  75:	eb 44                	jmp    bb <_ZN6moduleC1ERKS_+0xbb>
  77:	48 89 c3             	mov    %rax,%rbx
  7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7e:	48 83 c0 10          	add    $0x10,%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN6moduleC1ERKS_+0x8a>
    QR.setMinimal(false);
  8a:	eb 03                	jmp    8f <_ZN6moduleC1ERKS_+0x8f>
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	48 83 c0 08          	add    $0x8,%rax
  97:	48 89 c7             	mov    %rax,%rdi
  9a:	e8 00 00 00 00       	callq  9f <_ZN6moduleC1ERKS_+0x9f>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9f:	eb 03                	jmp    a4 <_ZN6moduleC1ERKS_+0xa4>
  a1:	48 89 c3             	mov    %rax,%rbx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN6moduleC1ERKS_+0xb0>
  b0:	48 89 d8             	mov    %rbx,%rax
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN6moduleC1ERKS_+0xbb>
  bb:	48 83 c4 18          	add    $0x18,%rsp
        if(i<0) return -1;
  bf:	5b                   	pop    %rbx
  c0:	5d                   	pop    %rbp
  c1:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	bf 20 00 00 00       	mov    $0x20,%edi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x21>
  21:	48 89 c3             	mov    %rax,%rbx
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 89 c6             	mov    %rax,%rsi
    QString script = *str;
  2b:	48 89 df             	mov    %rbx,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x33>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	48 89 18             	mov    %rbx,(%rax)
  3a:	eb 16                	jmp    52 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x52>
  3c:	49 89 c4             	mov    %rax,%r12
  3f:	48 89 df             	mov    %rbx,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x47>
  47:	4c 89 e0             	mov    %r12,%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 83 c4 20          	add    $0x20,%rsp
  56:	5b                   	pop    %rbx
  57:	41 5c                	pop    %r12
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE10lowerBoundERKh:

0000000000000000 <_ZN8QMapNodeIhhE10lowerBoundERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeIhhE10lowerBoundERKh+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeIhhE10lowerBoundERKh+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeIhhE10lowerBoundERKh+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13detach_helperEv:

0000000000000000 <_ZN5QListI6moduleE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI6moduleE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8variableD2Ev:

0000000000000000 <_ZN8variableD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8variableD1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  1d:	74 23                	je     42 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x42>
  1f:	48 83 6d d8 08       	subq   $0x8,-0x28(%rbp)
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 18             	mov    (%rax),%rbx
    QString script = *str;
  2b:	48 85 db             	test   %rbx,%rbx
  2e:	74 e5                	je     15 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x15>
  30:	48 89 df             	mov    %rbx,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x38>
  38:	48 89 df             	mov    %rbx,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x40>
  40:	eb d3                	jmp    15 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x15>
    QString StepArgs;
  42:	90                   	nop
  43:	48 83 c4 28          	add    $0x28,%rsp
  47:	5b                   	pop    %rbx
  48:	5d                   	pop    %rbp
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 30          	sub    $0x30,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    QString script = *str;
  2b:	0f 84 97 00 00 00    	je     c8 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  31:	bf 20 00 00 00       	mov    $0x20,%edi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x3b>
  3b:	48 89 c3             	mov    %rax,%rbx
  3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 89 df             	mov    %rbx,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 18             	mov    %rbx,(%rax)
  57:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  5c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
  61:	eb c0                	jmp    23 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x23>
  63:	49 89 c4             	mov    %rax,%r12
  66:	48 89 df             	mov    %rbx,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x6e>
  6e:	4c 89 e0             	mov    %r12,%rax
  71:	eb 00                	jmp    73 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	e8 00 00 00 00       	callq  7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    QR.setMinimal(false);
  8b:	0f 95 c0             	setne  %al
  8e:	84 c0                	test   %al,%al
  90:	74 1e                	je     b0 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xb0>
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	48 8b 18             	mov    (%rax),%rbx
  99:	48 85 db             	test   %rbx,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	74 dd                	je     7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  9e:	48 89 df             	mov    %rbx,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xa6>
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xae>
  ae:	eb cb                	jmp    7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 30          	add    $0x30,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	41 5c                	pop    %r12
  d0:	5d                   	pop    %rbp
  d1:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  1d:	74 23                	je     42 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x42>
  1f:	48 83 6d d8 08       	subq   $0x8,-0x28(%rbp)
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 18             	mov    (%rax),%rbx
    QString script = *str;
  2b:	48 85 db             	test   %rbx,%rbx
  2e:	74 e5                	je     15 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x15>
  30:	48 89 df             	mov    %rbx,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x38>
  38:	48 89 df             	mov    %rbx,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x40>
  40:	eb d3                	jmp    15 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x15>
    QString StepArgs;
  42:	90                   	nop
  43:	48 83 c4 28          	add    $0x28,%rsp
  47:	5b                   	pop    %rbx
  48:	5d                   	pop    %rbp
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI6moduleE7deallocEPN9QListData4DataE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI6moduleE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI6moduleE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableEC2ERKS1_:

0000000000000000 <_ZN5QListI8variableEC1ERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI8variableEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI8variableEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI8variableEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI8variableEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI8variableEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI8variableEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI8variableEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI8variableEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI8variableEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI8variableEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI8variableEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI8variableEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13detach_helperEi:

0000000000000000 <_ZN5QListI6moduleE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI6moduleE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI6moduleE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI6moduleE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI6moduleE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI6moduleE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI6moduleE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI6moduleE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI6moduleE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI6moduleE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI6moduleE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI6moduleE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8variableC2ERKS_:

0000000000000000 <_ZN8variableC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	0f b6 10             	movzbl (%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	88 10                	mov    %dl,(%rax)
  1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  21:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	88 50 01             	mov    %dl,0x1(%rax)
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  34:	48 8b 52 02          	mov    0x2(%rdx),%rdx
  38:	48 89 50 02          	mov    %rdx,0x2(%rax)
  3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40:	48 8d 50 10          	lea    0x10(%rax),%rdx
    QString StepArgs;
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	48 83 c0 10          	add    $0x10,%rax
  4c:	48 89 d6             	mov    %rdx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN8variableC1ERKS_+0x57>
  57:	90                   	nop
  58:	c9                   	leaveq 
  59:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 30          	sub    $0x30,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    QString script = *str;
  2b:	0f 84 97 00 00 00    	je     c8 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  31:	bf 18 00 00 00       	mov    $0x18,%edi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x3b>
  3b:	48 89 c3             	mov    %rax,%rbx
  3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 89 df             	mov    %rbx,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 18             	mov    %rbx,(%rax)
  57:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  5c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
  61:	eb c0                	jmp    23 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x23>
  63:	49 89 c4             	mov    %rax,%r12
  66:	48 89 df             	mov    %rbx,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x6e>
  6e:	4c 89 e0             	mov    %r12,%rax
  71:	eb 00                	jmp    73 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	e8 00 00 00 00       	callq  7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    QR.setMinimal(false);
  8b:	0f 95 c0             	setne  %al
  8e:	84 c0                	test   %al,%al
  90:	74 1e                	je     b0 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xb0>
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	48 8b 18             	mov    (%rax),%rbx
  99:	48 85 db             	test   %rbx,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	74 dd                	je     7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  9e:	48 89 df             	mov    %rbx,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xa6>
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xae>
  ae:	eb cb                	jmp    7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 30          	add    $0x30,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	41 5c                	pop    %r12
  d0:	5d                   	pop    %rbp
  d1:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   
