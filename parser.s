
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        0000000c  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        0000000c  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        0000000c  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000cac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .text         00007b86  0000000000000000  0000000000000000  00000cc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
398 .data         00000000  0000000000000000  0000000000000000  0000884a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
399 .bss          00000000  0000000000000000  0000000000000000  0000884a  2**0
                  ALLOC
400 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  0000884a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
401 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  0000885c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
402 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  0000886b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
403 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
404 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  0000888a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
405 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  0000889a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
406 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  000088ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
407 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  000088c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
408 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  000088e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
409 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008926  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
410 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  0000896a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
411 .rodata       00000624  0000000000000000  0000000000000000  000089a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
412 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00008fc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009028  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
414 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  0000908f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
415 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  0000909c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  000090b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
417 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  000090ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
418 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00009102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
419 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00009116  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
420 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  00009176  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
421 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  000091e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
422 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000920e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
423 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  0000928e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009304  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000932a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  00009350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
427 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  00009364  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  000093ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  000093d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  000093fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
431 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00009468  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  000094b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00009544  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
434 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  0000955a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  000095ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
436 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009604  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  0000962a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  0000963e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  0000965c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  0000967a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  0000970c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
442 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009720  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00009778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
444 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  000097a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  0000982c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  0000984a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  0000987e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  000098f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009947  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
450 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  000099cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
451 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  000099dc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00009a96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
453 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00009ab1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00009b3b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
455 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00009b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00009b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00009b6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
458 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00009bb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00009bce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
460 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00009c08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00009c5c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00009c7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
463 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  00009c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
464 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00009cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
465 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00009cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
466 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  00009d1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
467 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  00009d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
468 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  00009d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
469 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  00009d5c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  00009d78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  00009d9e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
472 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  00009dba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
473 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  00009de4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  00009e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
475 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  00009e1c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  00009e3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  00009e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
478 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  00009e7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  00009ebe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  00009ee8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
481 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  00009f2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
482 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
483 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a05f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a0b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a126  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .gcc_except_table 00001150  0000000000000000  0000000000000000  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
488 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000b298  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000b2b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000b2de  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
491 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000b2fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000b3b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
493 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000b3d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000b3ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000b404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
496 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000b41e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
497 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b440  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b44b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000b470  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000b48a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b4a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b4af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000b4d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
504 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000b4fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000b508  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000b532  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000b59a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000b6b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000b794  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000b834  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000b960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000b978  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
513 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000b9da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000ba16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000bb22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
516 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000bb2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000bb58  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000bbc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
519 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000bbd6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000bc16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
521 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000bc56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000bc78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
523 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000bc98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000bcb6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000be30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000bfa2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
528 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000c12a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000c15e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
531 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000c1b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
532 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c1d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
533 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000c1f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000c220  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000c390  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
536 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000c3f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
537 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000c410  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
539 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000c494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000c4aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
541 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000c4c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000c4da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000c50e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000c528  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000c59a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000c5ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000c608  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000c648  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
550 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000c76a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000c7cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
552 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000c824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
553 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000c846  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000c872  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000c894  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000c8b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000c940  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000c9a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
559 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000cab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 .text._ZN5QHashI7QString11QStringListE4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000cac8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
561 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000cc1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
562 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000cc40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
563 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000cc64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000ccc2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000ce98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000cf00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
567 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000cf20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000cfea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000d010  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
570 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000d02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000d050  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000d0af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
573 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000d0d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
574 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000d106  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
575 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000d240  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000d302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
577 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d31c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000d37a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
579 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d3a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000d3c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
581 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000d3d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
582 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000d3fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000d410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
584 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
585 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
586 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000d446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
587 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000d460  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d594  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000d5c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
590 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000d5d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
591 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d5e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
592 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d5f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000d60a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
594 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000d624  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d714  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000d742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
597 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000d754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
598 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000d766  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
599 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d79a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000d7ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
602 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000d7c6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
604 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000d872  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000d890  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000d8cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000d94c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000d97a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
609 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000d98c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
610 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d99e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
611 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d9b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
612 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000d9c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
613 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000d9dc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000daca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000db04  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
616 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000db66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000dbac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000dbd6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000dc08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000dd42  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000de04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
622 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000de1e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
623 .text._ZNK5QHashI7QString11QStringListE7isEmptyEv 00000019  0000000000000000  0000000000000000  0000de2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
624 .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E 00000035  0000000000000000  0000000000000000  0000de46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000de7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000deb0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
627 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000ded6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
628 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000df0d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000df32  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000dfae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
631 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000dff6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000e048  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e0ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000e102  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e12a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e1d2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e27a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000e322  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
639 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000e33c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
640 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e3b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000e45c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000e4be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e4de  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e502  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e57e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e5c6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000e618  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000e69e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
649 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e6f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
650 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000e715  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
651 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000e748  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
652 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000e7d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
653 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e828  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
654 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000e84c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
655 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000e876  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
656 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000e946  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000e952  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
658 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000ea66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
659 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000eac7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000ead2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000ebe6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
662 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000ec47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
663 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000ec52  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
664 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000ed66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
665 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000edc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
666 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000edd2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
667 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000eee5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
668 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000eef4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000ef80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
670 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000efa9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
671 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000efb8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
672 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000f02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
673 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000f08c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
674 .debug_info   0002307c  0000000000000000  0000000000000000  0000f097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
675 .debug_abbrev 00000cb1  0000000000000000  0000000000000000  00032113  2**0
                  CONTENTS, READONLY, DEBUGGING
676 .debug_aranges 000010c0  0000000000000000  0000000000000000  00032dc4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
677 .debug_ranges 000015e0  0000000000000000  0000000000000000  00033e84  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
678 .debug_macro  00000d27  0000000000000000  0000000000000000  00035464  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
679 .debug_macro  0000061c  0000000000000000  0000000000000000  0003618b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
680 .debug_macro  00000022  0000000000000000  0000000000000000  000367a7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
681 .debug_macro  00000136  0000000000000000  0000000000000000  000367c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
682 .debug_macro  00000010  0000000000000000  0000000000000000  000368ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
683 .debug_macro  00000275  0000000000000000  0000000000000000  0003690f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
684 .debug_macro  0000016f  0000000000000000  0000000000000000  00036b84  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
685 .debug_macro  00000016  0000000000000000  0000000000000000  00036cf3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
686 .debug_macro  00000035  0000000000000000  0000000000000000  00036d09  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
687 .debug_macro  00000058  0000000000000000  0000000000000000  00036d3e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
688 .debug_macro  000005b4  0000000000000000  0000000000000000  00036d96  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
689 .debug_macro  0000016d  0000000000000000  0000000000000000  0003734a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
690 .debug_macro  00000016  0000000000000000  0000000000000000  000374b7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
691 .debug_macro  0000009a  0000000000000000  0000000000000000  000374cd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
692 .debug_macro  00000016  0000000000000000  0000000000000000  00037567  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
693 .debug_macro  00000018  0000000000000000  0000000000000000  0003757d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
694 .debug_macro  00000032  0000000000000000  0000000000000000  00037595  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
695 .debug_macro  000000c0  0000000000000000  0000000000000000  000375c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
696 .debug_macro  00000028  0000000000000000  0000000000000000  00037687  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
697 .debug_macro  00000012  0000000000000000  0000000000000000  000376af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
698 .debug_macro  000000cf  0000000000000000  0000000000000000  000376c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
699 .debug_macro  0000001c  0000000000000000  0000000000000000  00037790  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
700 .debug_macro  00000018  0000000000000000  0000000000000000  000377ac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
701 .debug_macro  0000006e  0000000000000000  0000000000000000  000377c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
702 .debug_macro  00000082  0000000000000000  0000000000000000  00037832  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
703 .debug_macro  00000012  0000000000000000  0000000000000000  000378b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
704 .debug_macro  00000012  0000000000000000  0000000000000000  000378c6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_macro  00000016  0000000000000000  0000000000000000  000378d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
706 .debug_macro  00000035  0000000000000000  0000000000000000  000378ee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_macro  00000052  0000000000000000  0000000000000000  00037923  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  0000004c  0000000000000000  0000000000000000  00037975  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  0000001c  0000000000000000  0000000000000000  000379c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  00000028  0000000000000000  0000000000000000  000379dd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  0000005e  0000000000000000  0000000000000000  00037a05  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  000000e2  0000000000000000  0000000000000000  00037a63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000010  0000000000000000  0000000000000000  00037b45  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  0000004c  0000000000000000  0000000000000000  00037b55  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  00000022  0000000000000000  0000000000000000  00037ba1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000068  0000000000000000  0000000000000000  00037bc3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  0000007f  0000000000000000  0000000000000000  00037c2b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  0000003a  0000000000000000  0000000000000000  00037caa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  00000019  0000000000000000  0000000000000000  00037ce4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  00000020  0000000000000000  0000000000000000  00037cfd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  00000022  0000000000000000  0000000000000000  00037d1d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  00000010  0000000000000000  0000000000000000  00037d3f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000016  0000000000000000  0000000000000000  00037d4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000028  0000000000000000  0000000000000000  00037d65  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  00000010  0000000000000000  0000000000000000  00037d8d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  00000046  0000000000000000  0000000000000000  00037d9d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  0000001c  0000000000000000  0000000000000000  00037de3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  00000020  0000000000000000  0000000000000000  00037dff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  0000005a  0000000000000000  0000000000000000  00037e1f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  00000010  0000000000000000  0000000000000000  00037e79  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  00000010  0000000000000000  0000000000000000  00037e89  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  000000e4  0000000000000000  0000000000000000  00037e99  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  0000025a  0000000000000000  0000000000000000  00037f7d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  0000002d  0000000000000000  0000000000000000  000381d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  00000016  0000000000000000  0000000000000000  00038204  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  00000050  0000000000000000  0000000000000000  0003821a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000019  0000000000000000  0000000000000000  0003826a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  00000011  0000000000000000  0000000000000000  00038283  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  0000014b  0000000000000000  0000000000000000  00038294  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  0000001e  0000000000000000  0000000000000000  000383df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  0000001c  0000000000000000  0000000000000000  000383fd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  00000024  0000000000000000  0000000000000000  00038419  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000016  0000000000000000  0000000000000000  0003843d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  00000018  0000000000000000  0000000000000000  00038453  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  00000019  0000000000000000  0000000000000000  0003846b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  00000058  0000000000000000  0000000000000000  00038484  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  00000016  0000000000000000  0000000000000000  000384dc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  0000001c  0000000000000000  0000000000000000  000384f2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  00000016  0000000000000000  0000000000000000  0003850e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000022  0000000000000000  0000000000000000  00038524  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  00000043  0000000000000000  0000000000000000  00038546  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  0000003c  0000000000000000  0000000000000000  00038589  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000173  0000000000000000  0000000000000000  000385c5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000012  0000000000000000  0000000000000000  00038738  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000010  0000000000000000  0000000000000000  0003874a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000058  0000000000000000  0000000000000000  0003875a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  000000b4  0000000000000000  0000000000000000  000387b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000016  0000000000000000  0000000000000000  00038866  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  00000010  0000000000000000  0000000000000000  0003887c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000037  0000000000000000  0000000000000000  0003888c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000058  0000000000000000  0000000000000000  000388c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  00000011  0000000000000000  0000000000000000  0003891b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  00000016  0000000000000000  0000000000000000  0003892c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  00000010  0000000000000000  0000000000000000  00038942  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000010  0000000000000000  0000000000000000  00038952  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000022  0000000000000000  0000000000000000  00038962  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000122  0000000000000000  0000000000000000  00038984  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  0000008e  0000000000000000  0000000000000000  00038aa6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  00000016  0000000000000000  0000000000000000  00038b34  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  00000058  0000000000000000  0000000000000000  00038b4a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  000000fa  0000000000000000  0000000000000000  00038ba2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000030  0000000000000000  0000000000000000  00038c9c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  000000c1  0000000000000000  0000000000000000  00038ccc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  0000004d  0000000000000000  0000000000000000  00038d8d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000010  0000000000000000  0000000000000000  00038dda  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000019  0000000000000000  0000000000000000  00038dea  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000020  0000000000000000  0000000000000000  00038e03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  00000018  0000000000000000  0000000000000000  00038e23  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000023  0000000000000000  0000000000000000  00038e3b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000010  0000000000000000  0000000000000000  00038e5e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  00000016  0000000000000000  0000000000000000  00038e6e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  00000076  0000000000000000  0000000000000000  00038e84  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  00000016  0000000000000000  0000000000000000  00038efa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000025  0000000000000000  0000000000000000  00038f10  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  000000de  0000000000000000  0000000000000000  00038f35  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  0000001c  0000000000000000  0000000000000000  00039013  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  00000058  0000000000000000  0000000000000000  0003902f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  00000088  0000000000000000  0000000000000000  00039087  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000076  0000000000000000  0000000000000000  0003910f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000010  0000000000000000  0000000000000000  00039185  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  00000041  0000000000000000  0000000000000000  00039195  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  000000ee  0000000000000000  0000000000000000  000391d6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  000000fc  0000000000000000  0000000000000000  000392c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000010  0000000000000000  0000000000000000  000393c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  000000e5  0000000000000000  0000000000000000  000393d0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000012  0000000000000000  0000000000000000  000394b5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  00000016  0000000000000000  0000000000000000  000394c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  00000022  0000000000000000  0000000000000000  000394dd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000016  0000000000000000  0000000000000000  000394ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000028  0000000000000000  0000000000000000  00039515  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  00000216  0000000000000000  0000000000000000  0003953d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000046  0000000000000000  0000000000000000  00039753  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  0000002e  0000000000000000  0000000000000000  00039799  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  00000027  0000000000000000  0000000000000000  000397c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  0000001f  0000000000000000  0000000000000000  000397ee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  00000016  0000000000000000  0000000000000000  0003980d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  00000010  0000000000000000  0000000000000000  00039823  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  00000126  0000000000000000  0000000000000000  00039833  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_line   000045ae  0000000000000000  0000000000000000  00039959  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_str    0003a0ed  0000000000000000  0000000000000000  0003df07  2**0
                  CONTENTS, READONLY, DEBUGGING
811 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  00077ff8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
812 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00078000  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
813 .comment      0000002e  0000000000000000  0000000000000000  00078008  2**0
                  CONTENTS, READONLY
814 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00078036  2**0
                  CONTENTS, READONLY
815 .eh_frame     00002758  0000000000000000  0000000000000000  00078038  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhj>:

QByteArray Parser::packVariable(quint8 index, quint8 type, quint32 value){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 83 ec 38          	sub    $0x38,%rsp
     325:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     329:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
     32d:	89 c8                	mov    %ecx,%eax
     32f:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
     333:	88 55 cc             	mov    %dl,-0x34(%rbp)
     336:	88 45 c8             	mov    %al,-0x38(%rbp)
     339:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     340:	00 00 
     342:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     346:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     34c:	48 89 c7             	mov    %rax,%rdi
     34f:	e8 00 00 00 00       	callq  354 <_ZN6Parser12packVariableEhhj+0x38>
    //char counter = 0xFF;

    //result.append(counter);
    result.append(index);
     354:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
     358:	0f be d0             	movsbl %al,%edx
     35b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     35f:	89 d6                	mov    %edx,%esi
     361:	48 89 c7             	mov    %rax,%rdi
     364:	e8 00 00 00 00       	callq  369 <_ZN6Parser12packVariableEhhj+0x4d>
    result.append(type);
     369:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
     36d:	0f be d0             	movsbl %al,%edx
     370:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     374:	89 d6                	mov    %edx,%esi
     376:	48 89 c7             	mov    %rax,%rdi
     379:	e8 00 00 00 00       	callq  37e <_ZN6Parser12packVariableEhhj+0x62>
    result.append(value);
     37e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
     381:	0f be d0             	movsbl %al,%edx
     384:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     388:	89 d6                	mov    %edx,%esi
     38a:	48 89 c7             	mov    %rax,%rdi
     38d:	e8 00 00 00 00       	callq  392 <_ZN6Parser12packVariableEhhj+0x76>

    return result; // return result - ok
     392:	eb 1a                	jmp    3ae <_ZN6Parser12packVariableEhhj+0x92>
     394:	48 89 c3             	mov    %rax,%rbx
     397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     39b:	48 89 c7             	mov    %rax,%rdi
     39e:	e8 00 00 00 00       	callq  3a3 <_ZN6Parser12packVariableEhhj+0x87>
     3a3:	48 89 d8             	mov    %rbx,%rax
     3a6:	48 89 c7             	mov    %rax,%rdi
     3a9:	e8 00 00 00 00       	callq  3ae <_ZN6Parser12packVariableEhhj+0x92>
}
     3ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     3b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     3b6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     3bd:	00 00 
     3bf:	74 05                	je     3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c1:	e8 00 00 00 00       	callq  3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c6:	48 83 c4 38          	add    $0x38,%rsp
     3ca:	5b                   	pop    %rbx
     3cb:	5d                   	pop    %rbp
     3cc:	c3                   	retq   
     3cd:	90                   	nop

00000000000003ce <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     3ce:	55                   	push   %rbp
     3cf:	48 89 e5             	mov    %rsp,%rbp
     3d2:	53                   	push   %rbx
     3d3:	48 81 ec 38 02 00 00 	sub    $0x238,%rsp
     3da:	48 89 bd d8 fd ff ff 	mov    %rdi,-0x228(%rbp)
     3e1:	48 89 b5 d0 fd ff ff 	mov    %rsi,-0x230(%rbp)
     3e8:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
     3ef:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     3f6:	00 00 
     3f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     3fc:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     3fe:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
     405:	48 89 c7             	mov    %rax,%rdi
     408:	e8 00 00 00 00       	callq  40d <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     40d:	48 8d 85 e3 fd ff ff 	lea    -0x21d(%rbp),%rax
     414:	48 89 c7             	mov    %rax,%rdi
     417:	e8 00 00 00 00       	callq  41c <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     41c:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     423:	48 89 c7             	mov    %rax,%rdi
     426:	e8 00 00 00 00       	callq  42b <_ZN6Parser16compileVariablesEP11QStringList+0x5d>

    // копирование из checkVariables

    int varCount      = 0;
     42b:	c7 85 e8 fd ff ff 00 	movl   $0x0,-0x218(%rbp)
     432:	00 00 00 
    int index         = 0;
     435:	c7 85 ec fd ff ff 00 	movl   $0x0,-0x214(%rbp)
     43c:	00 00 00 

    VarTypes VT;
     43f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     446:	48 89 c7             	mov    %rax,%rdi
     449:	e8 00 00 00 00       	callq  44e <_ZN6Parser16compileVariablesEP11QStringList+0x80>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     44e:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     455:	48 8d 95 10 fe ff ff 	lea    -0x1f0(%rbp),%rdx
     45c:	48 89 d6             	mov    %rdx,%rsi
     45f:	48 89 c7             	mov    %rax,%rdi
     462:	e8 00 00 00 00       	callq  467 <_ZN6Parser16compileVariablesEP11QStringList+0x99>
     467:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     46e:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     475:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 47c <_ZN6Parser16compileVariablesEP11QStringList+0xae>
     47c:	48 89 ce             	mov    %rcx,%rsi
     47f:	48 89 c7             	mov    %rax,%rdi
     482:	e8 00 00 00 00       	callq  487 <_ZN6Parser16compileVariablesEP11QStringList+0xb9>
     487:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     48e:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     495:	b9 00 00 00 00       	mov    $0x0,%ecx
     49a:	ba 01 00 00 00       	mov    $0x1,%edx
     49f:	48 89 c7             	mov    %rax,%rdi
     4a2:	e8 00 00 00 00       	callq  4a7 <_ZN6Parser16compileVariablesEP11QStringList+0xd9>
     4a7:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     4ae:	48 89 c7             	mov    %rax,%rdi
     4b1:	e8 00 00 00 00       	callq  4b6 <_ZN6Parser16compileVariablesEP11QStringList+0xe8>
     4b6:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     4bd:	48 89 c7             	mov    %rax,%rdi
     4c0:	e8 00 00 00 00       	callq  4c5 <_ZN6Parser16compileVariablesEP11QStringList+0xf7>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     4c5:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     4cc:	48 8d 95 10 fe ff ff 	lea    -0x1f0(%rbp),%rdx
     4d3:	48 89 d6             	mov    %rdx,%rsi
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x110>
     4de:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     4e5:	48 8d 8d 60 fe ff ff 	lea    -0x1a0(%rbp),%rcx
     4ec:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4f3 <_ZN6Parser16compileVariablesEP11QStringList+0x125>
     4f3:	48 89 ce             	mov    %rcx,%rsi
     4f6:	48 89 c7             	mov    %rax,%rdi
     4f9:	e8 00 00 00 00       	callq  4fe <_ZN6Parser16compileVariablesEP11QStringList+0x130>
     4fe:	48 8d b5 70 fe ff ff 	lea    -0x190(%rbp),%rsi
     505:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     50c:	b9 00 00 00 00       	mov    $0x0,%ecx
     511:	ba 01 00 00 00       	mov    $0x1,%edx
     516:	48 89 c7             	mov    %rax,%rdi
     519:	e8 00 00 00 00       	callq  51e <_ZN6Parser16compileVariablesEP11QStringList+0x150>
     51e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     525:	48 89 c7             	mov    %rax,%rdi
     528:	e8 00 00 00 00       	callq  52d <_ZN6Parser16compileVariablesEP11QStringList+0x15f>
     52d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     534:	48 89 c7             	mov    %rax,%rdi
     537:	e8 00 00 00 00       	callq  53c <_ZN6Parser16compileVariablesEP11QStringList+0x16e>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     53c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     543:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54a <_ZN6Parser16compileVariablesEP11QStringList+0x17c>
     54a:	48 89 c7             	mov    %rax,%rdi
     54d:	e8 00 00 00 00       	callq  552 <_ZN6Parser16compileVariablesEP11QStringList+0x184>
     552:	48 8d b5 90 fe ff ff 	lea    -0x170(%rbp),%rsi
     559:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     560:	b9 00 00 00 00       	mov    $0x0,%ecx
     565:	ba 01 00 00 00       	mov    $0x1,%edx
     56a:	48 89 c7             	mov    %rax,%rdi
     56d:	e8 00 00 00 00       	callq  572 <_ZN6Parser16compileVariablesEP11QStringList+0x1a4>
     572:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     579:	48 89 c7             	mov    %rax,%rdi
     57c:	e8 00 00 00 00       	callq  581 <_ZN6Parser16compileVariablesEP11QStringList+0x1b3>
    QRegExp erxVarName("\\w+");                              // имя
     581:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     588:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 58f <_ZN6Parser16compileVariablesEP11QStringList+0x1c1>
     58f:	48 89 c7             	mov    %rax,%rdi
     592:	e8 00 00 00 00       	callq  597 <_ZN6Parser16compileVariablesEP11QStringList+0x1c9>
     597:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
     59e:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     5a5:	b9 00 00 00 00       	mov    $0x0,%ecx
     5aa:	ba 01 00 00 00       	mov    $0x1,%edx
     5af:	48 89 c7             	mov    %rax,%rdi
     5b2:	e8 00 00 00 00       	callq  5b7 <_ZN6Parser16compileVariablesEP11QStringList+0x1e9>
     5b7:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     5be:	48 89 c7             	mov    %rax,%rdi
     5c1:	e8 00 00 00 00       	callq  5c6 <_ZN6Parser16compileVariablesEP11QStringList+0x1f8>

    QStringList types;
     5c6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     5cd:	48 89 c7             	mov    %rax,%rdi
     5d0:	e8 00 00 00 00       	callq  5d5 <_ZN6Parser16compileVariablesEP11QStringList+0x207>
    QStringList list;
     5d5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     5dc:	48 89 c7             	mov    %rax,%rdi
     5df:	e8 00 00 00 00       	callq  5e4 <_ZN6Parser16compileVariablesEP11QStringList+0x216>
    QStringList vars;
     5e4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     5eb:	48 89 c7             	mov    %rax,%rdi
     5ee:	e8 00 00 00 00       	callq  5f3 <_ZN6Parser16compileVariablesEP11QStringList+0x225>

    int pos = 0;
     5f3:	c7 85 e4 fd ff ff 00 	movl   $0x0,-0x21c(%rbp)
     5fa:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     5fd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     604:	48 89 c7             	mov    %rax,%rdi
     607:	e8 00 00 00 00       	callq  60c <_ZN6Parser16compileVariablesEP11QStringList+0x23e>
    for(sit = str->begin(); sit != str->end(); ++sit){
     60c:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
     613:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     61a:	48 89 d6             	mov    %rdx,%rsi
     61d:	48 89 c7             	mov    %rax,%rdi
     620:	e8 00 00 00 00       	callq  625 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
     625:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
     62c:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
     633:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
     63a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     641:	48 89 d6             	mov    %rdx,%rsi
     644:	48 89 c7             	mov    %rax,%rdi
     647:	e8 00 00 00 00       	callq  64c <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
     64c:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
     653:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     65a:	48 89 d6             	mov    %rdx,%rsi
     65d:	48 89 c7             	mov    %rax,%rdi
     660:	e8 00 00 00 00       	callq  665 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     665:	84 c0                	test   %al,%al
     667:	0f 84 a0 01 00 00    	je     80d <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     66d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     674:	48 89 c7             	mov    %rax,%rdi
     677:	e8 00 00 00 00       	callq  67c <_ZN6Parser16compileVariablesEP11QStringList+0x2ae>
     67c:	48 89 c6             	mov    %rax,%rsi
     67f:	8b 95 e4 fd ff ff    	mov    -0x21c(%rbp),%edx
     685:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     68c:	b9 00 00 00 00       	mov    $0x0,%ecx
     691:	48 89 c7             	mov    %rax,%rdi
     694:	e8 00 00 00 00       	callq  699 <_ZN6Parser16compileVariablesEP11QStringList+0x2cb>
     699:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%rbp)
     69f:	83 bd e4 fd ff ff ff 	cmpl   $0xffffffff,-0x21c(%rbp)
     6a6:	0f 95 c0             	setne  %al
     6a9:	84 c0                	test   %al,%al
     6ab:	0f 84 48 01 00 00    	je     7f9 <_ZN6Parser16compileVariablesEP11QStringList+0x42b>
             types << erx.cap(1);
     6b1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     6b8:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     6bf:	ba 01 00 00 00       	mov    $0x1,%edx
     6c4:	48 89 ce             	mov    %rcx,%rsi
     6c7:	48 89 c7             	mov    %rax,%rdi
     6ca:	e8 00 00 00 00       	callq  6cf <_ZN6Parser16compileVariablesEP11QStringList+0x301>
     6cf:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
     6d6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6dd:	48 89 d6             	mov    %rdx,%rsi
     6e0:	48 89 c7             	mov    %rax,%rdi
     6e3:	e8 00 00 00 00       	callq  6e8 <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     6e8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     6ef:	48 89 c7             	mov    %rax,%rdi
     6f2:	e8 00 00 00 00       	callq  6f7 <_ZN6Parser16compileVariablesEP11QStringList+0x329>
             list << erx.cap(2);
     6f7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     6fe:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     705:	ba 02 00 00 00       	mov    $0x2,%edx
     70a:	48 89 ce             	mov    %rcx,%rsi
     70d:	48 89 c7             	mov    %rax,%rdi
     710:	e8 00 00 00 00       	callq  715 <_ZN6Parser16compileVariablesEP11QStringList+0x347>
     715:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     71c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     723:	48 89 d6             	mov    %rdx,%rsi
     726:	48 89 c7             	mov    %rax,%rdi
     729:	e8 00 00 00 00       	callq  72e <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     72e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     735:	48 89 c7             	mov    %rax,%rdi
     738:	e8 00 00 00 00       	callq  73d <_ZN6Parser16compileVariablesEP11QStringList+0x36f>
             pos += erx.matchedLength();
     73d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     744:	48 89 c7             	mov    %rax,%rdi
     747:	e8 00 00 00 00       	callq  74c <_ZN6Parser16compileVariablesEP11QStringList+0x37e>
     74c:	01 85 e4 fd ff ff    	add    %eax,-0x21c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     752:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     759:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 760 <_ZN6Parser16compileVariablesEP11QStringList+0x392>
     760:	48 89 c7             	mov    %rax,%rdi
     763:	e8 00 00 00 00       	callq  768 <_ZN6Parser16compileVariablesEP11QStringList+0x39a>
     768:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     76f:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     776:	ba 02 00 00 00       	mov    $0x2,%edx
     77b:	48 89 ce             	mov    %rcx,%rsi
     77e:	48 89 c7             	mov    %rax,%rdi
     781:	e8 00 00 00 00       	callq  786 <_ZN6Parser16compileVariablesEP11QStringList+0x3b8>
     786:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     78d:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
     794:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
     79b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     7a1:	b9 00 00 00 00       	mov    $0x0,%ecx
     7a6:	48 89 c7             	mov    %rax,%rdi
     7a9:	e8 00 00 00 00       	callq  7ae <_ZN6Parser16compileVariablesEP11QStringList+0x3e0>
     7ae:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     7b5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     7bc:	48 89 d6             	mov    %rdx,%rsi
     7bf:	48 89 c7             	mov    %rax,%rdi
     7c2:	e8 00 00 00 00       	callq  7c7 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     7c7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     7ce:	48 89 c7             	mov    %rax,%rdi
     7d1:	e8 00 00 00 00       	callq  7d6 <_ZN6Parser16compileVariablesEP11QStringList+0x408>
     7d6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     7dd:	48 89 c7             	mov    %rax,%rdi
     7e0:	e8 00 00 00 00       	callq  7e5 <_ZN6Parser16compileVariablesEP11QStringList+0x417>
     7e5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     7ec:	48 89 c7             	mov    %rax,%rdi
     7ef:	e8 00 00 00 00       	callq  7f4 <_ZN6Parser16compileVariablesEP11QStringList+0x426>
    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     7f4:	e9 74 fe ff ff       	jmpq   66d <_ZN6Parser16compileVariablesEP11QStringList+0x29f>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
     7f9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     800:	48 89 c7             	mov    %rax,%rdi
     803:	e8 00 00 00 00       	callq  808 <_ZN6Parser16compileVariablesEP11QStringList+0x43a>
     808:	e9 26 fe ff ff       	jmpq   633 <_ZN6Parser16compileVariablesEP11QStringList+0x265>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     80d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     814:	48 89 c7             	mov    %rax,%rdi
     817:	e8 00 00 00 00       	callq  81c <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
    QString name, type, value;
     81c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     820:	48 89 c7             	mov    %rax,%rdi
     823:	e8 00 00 00 00       	callq  828 <_ZN6Parser16compileVariablesEP11QStringList+0x45a>
     828:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     82c:	48 89 c7             	mov    %rax,%rdi
     82f:	e8 00 00 00 00       	callq  834 <_ZN6Parser16compileVariablesEP11QStringList+0x466>
     834:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     838:	48 89 c7             	mov    %rax,%rdi
     83b:	e8 00 00 00 00       	callq  840 <_ZN6Parser16compileVariablesEP11QStringList+0x472>

    for(it=vars.begin(); it!=vars.end(); ++it){
     840:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     844:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     84b:	48 89 d6             	mov    %rdx,%rsi
     84e:	48 89 c7             	mov    %rax,%rdi
     851:	e8 00 00 00 00       	callq  856 <_ZN6Parser16compileVariablesEP11QStringList+0x488>
     856:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     85a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
     861:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     865:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     86c:	48 89 d6             	mov    %rdx,%rsi
     86f:	48 89 c7             	mov    %rax,%rdi
     872:	e8 00 00 00 00       	callq  877 <_ZN6Parser16compileVariablesEP11QStringList+0x4a9>
     877:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     87b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     882:	48 89 d6             	mov    %rdx,%rsi
     885:	48 89 c7             	mov    %rax,%rdi
     888:	e8 00 00 00 00       	callq  88d <_ZN6Parser16compileVariablesEP11QStringList+0x4bf>
     88d:	84 c0                	test   %al,%al
     88f:	0f 84 4c 01 00 00    	je     9e1 <_ZN6Parser16compileVariablesEP11QStringList+0x613>
        QString all = *it;
     895:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     89c:	48 89 c7             	mov    %rax,%rdi
     89f:	e8 00 00 00 00       	callq  8a4 <_ZN6Parser16compileVariablesEP11QStringList+0x4d6>
     8a4:	48 89 c2             	mov    %rax,%rdx
     8a7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     8ab:	48 89 d6             	mov    %rdx,%rsi
     8ae:	48 89 c7             	mov    %rax,%rdi
     8b1:	e8 00 00 00 00       	callq  8b6 <_ZN6Parser16compileVariablesEP11QStringList+0x4e8>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     8b6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     8bd:	48 89 c7             	mov    %rax,%rdi
     8c0:	e8 00 00 00 00       	callq  8c5 <_ZN6Parser16compileVariablesEP11QStringList+0x4f7>
     8c5:	48 89 c6             	mov    %rax,%rsi
     8c8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     8cf:	b9 00 00 00 00       	mov    $0x0,%ecx
     8d4:	ba 00 00 00 00       	mov    $0x0,%edx
     8d9:	48 89 c7             	mov    %rax,%rdi
     8dc:	e8 00 00 00 00       	callq  8e1 <_ZN6Parser16compileVariablesEP11QStringList+0x513>
     8e1:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%rbp)

        int indexVarName = erxVarName.indexIn(*it);
     8e7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     8ee:	48 89 c7             	mov    %rax,%rdi
     8f1:	e8 00 00 00 00       	callq  8f6 <_ZN6Parser16compileVariablesEP11QStringList+0x528>
     8f6:	48 89 c6             	mov    %rax,%rsi
     8f9:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     900:	b9 00 00 00 00       	mov    $0x0,%ecx
     905:	ba 00 00 00 00       	mov    $0x0,%edx
     90a:	48 89 c7             	mov    %rax,%rdi
     90d:	e8 00 00 00 00       	callq  912 <_ZN6Parser16compileVariablesEP11QStringList+0x544>
     912:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     918:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     91f:	48 89 c7             	mov    %rax,%rdi
     922:	e8 00 00 00 00       	callq  927 <_ZN6Parser16compileVariablesEP11QStringList+0x559>
     927:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%rbp)
        int countVarName = erxVarName.captureCount();
     92d:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     934:	48 89 c7             	mov    %rax,%rdi
     937:	e8 00 00 00 00       	callq  93c <_ZN6Parser16compileVariablesEP11QStringList+0x56e>
     93c:	89 85 fc fd ff ff    	mov    %eax,-0x204(%rbp)

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     942:	83 bd f0 fd ff ff 00 	cmpl   $0x0,-0x210(%rbp)
     949:	78 3c                	js     987 <_ZN6Parser16compileVariablesEP11QStringList+0x5b9>
     94b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     94f:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
     956:	ba 01 00 00 00       	mov    $0x1,%edx
     95b:	48 89 ce             	mov    %rcx,%rsi
     95e:	48 89 c7             	mov    %rax,%rdi
     961:	e8 00 00 00 00       	callq  966 <_ZN6Parser16compileVariablesEP11QStringList+0x598>
     966:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     96a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     96e:	48 89 d6             	mov    %rdx,%rsi
     971:	48 89 c7             	mov    %rax,%rdi
     974:	e8 00 00 00 00       	callq  979 <_ZN6Parser16compileVariablesEP11QStringList+0x5ab>
     979:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     97d:	48 89 c7             	mov    %rax,%rdi
     980:	e8 00 00 00 00       	callq  985 <_ZN6Parser16compileVariablesEP11QStringList+0x5b7>
     985:	eb 3a                	jmp    9c1 <_ZN6Parser16compileVariablesEP11QStringList+0x5f3>
        }else{name = erxVarName.cap(0);}
     987:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     98b:	48 8d 8d a0 fe ff ff 	lea    -0x160(%rbp),%rcx
     992:	ba 00 00 00 00       	mov    $0x0,%edx
     997:	48 89 ce             	mov    %rcx,%rsi
     99a:	48 89 c7             	mov    %rax,%rdi
     99d:	e8 00 00 00 00       	callq  9a2 <_ZN6Parser16compileVariablesEP11QStringList+0x5d4>
     9a2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     9a6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     9aa:	48 89 d6             	mov    %rdx,%rsi
     9ad:	48 89 c7             	mov    %rax,%rdi
     9b0:	e8 00 00 00 00       	callq  9b5 <_ZN6Parser16compileVariablesEP11QStringList+0x5e7>
     9b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     9b9:	48 89 c7             	mov    %rax,%rdi
     9bc:	e8 00 00 00 00       	callq  9c1 <_ZN6Parser16compileVariablesEP11QStringList+0x5f3>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     9c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     9c5:	48 89 c7             	mov    %rax,%rdi
     9c8:	e8 00 00 00 00       	callq  9cd <_ZN6Parser16compileVariablesEP11QStringList+0x5ff>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
     9cd:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     9d4:	48 89 c7             	mov    %rax,%rdi
     9d7:	e8 00 00 00 00       	callq  9dc <_ZN6Parser16compileVariablesEP11QStringList+0x60e>
     9dc:	e9 80 fe ff ff       	jmpq   861 <_ZN6Parser16compileVariablesEP11QStringList+0x493>
        }else{name = erxVarName.cap(0);}

    }


    return result;
     9e1:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     9e2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     9e6:	48 89 c7             	mov    %rax,%rdi
     9e9:	e8 00 00 00 00       	callq  9ee <_ZN6Parser16compileVariablesEP11QStringList+0x620>
     9ee:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     9f2:	48 89 c7             	mov    %rax,%rdi
     9f5:	e8 00 00 00 00       	callq  9fa <_ZN6Parser16compileVariablesEP11QStringList+0x62c>
     9fa:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     9fe:	48 89 c7             	mov    %rax,%rdi
     a01:	e8 00 00 00 00       	callq  a06 <_ZN6Parser16compileVariablesEP11QStringList+0x638>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     a06:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     a0d:	48 89 c7             	mov    %rax,%rdi
     a10:	e8 00 00 00 00       	callq  a15 <_ZN6Parser16compileVariablesEP11QStringList+0x647>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     a15:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     a1c:	48 89 c7             	mov    %rax,%rdi
     a1f:	e8 00 00 00 00       	callq  a24 <_ZN6Parser16compileVariablesEP11QStringList+0x656>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     a24:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     a2b:	48 89 c7             	mov    %rax,%rdi
     a2e:	e8 00 00 00 00       	callq  a33 <_ZN6Parser16compileVariablesEP11QStringList+0x665>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     a33:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     a3a:	48 89 c7             	mov    %rax,%rdi
     a3d:	e8 00 00 00 00       	callq  a42 <_ZN6Parser16compileVariablesEP11QStringList+0x674>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     a42:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     a49:	48 89 c7             	mov    %rax,%rdi
     a4c:	e8 00 00 00 00       	callq  a51 <_ZN6Parser16compileVariablesEP11QStringList+0x683>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     a51:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     a58:	48 89 c7             	mov    %rax,%rdi
     a5b:	e8 00 00 00 00       	callq  a60 <_ZN6Parser16compileVariablesEP11QStringList+0x692>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     a60:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     a67:	48 89 c7             	mov    %rax,%rdi
     a6a:	e8 00 00 00 00       	callq  a6f <_ZN6Parser16compileVariablesEP11QStringList+0x6a1>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     a6f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     a76:	48 89 c7             	mov    %rax,%rdi
     a79:	e8 00 00 00 00       	callq  a7e <_ZN6Parser16compileVariablesEP11QStringList+0x6b0>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     a7e:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     a85:	48 89 c7             	mov    %rax,%rdi
     a88:	e8 00 00 00 00       	callq  a8d <_ZN6Parser16compileVariablesEP11QStringList+0x6bf>
        }else{name = erxVarName.cap(0);}

    }


    return result;
     a8d:	e9 a9 02 00 00       	jmpq   d3b <_ZN6Parser16compileVariablesEP11QStringList+0x96d>
     a92:	48 89 c3             	mov    %rax,%rbx
     a95:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     a9c:	48 89 c7             	mov    %rax,%rdi
     a9f:	e8 00 00 00 00       	callq  aa4 <_ZN6Parser16compileVariablesEP11QStringList+0x6d6>
     aa4:	eb 17                	jmp    abd <_ZN6Parser16compileVariablesEP11QStringList+0x6ef>
     aa6:	48 89 c3             	mov    %rax,%rbx
     aa9:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     ab0:	48 89 c7             	mov    %rax,%rdi
     ab3:	e8 00 00 00 00       	callq  ab8 <_ZN6Parser16compileVariablesEP11QStringList+0x6ea>
     ab8:	eb 03                	jmp    abd <_ZN6Parser16compileVariablesEP11QStringList+0x6ef>
     aba:	48 89 c3             	mov    %rax,%rbx
     abd:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     ac4:	48 89 c7             	mov    %rax,%rdi
     ac7:	e8 00 00 00 00       	callq  acc <_ZN6Parser16compileVariablesEP11QStringList+0x6fe>
     acc:	e9 28 02 00 00       	jmpq   cf9 <_ZN6Parser16compileVariablesEP11QStringList+0x92b>
     ad1:	48 89 c3             	mov    %rax,%rbx
     ad4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     adb:	48 89 c7             	mov    %rax,%rdi
     ade:	e8 00 00 00 00       	callq  ae3 <_ZN6Parser16compileVariablesEP11QStringList+0x715>
     ae3:	e9 11 02 00 00       	jmpq   cf9 <_ZN6Parser16compileVariablesEP11QStringList+0x92b>
     ae8:	48 89 c3             	mov    %rax,%rbx
     aeb:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     af2:	48 89 c7             	mov    %rax,%rdi
     af5:	e8 00 00 00 00       	callq  afa <_ZN6Parser16compileVariablesEP11QStringList+0x72c>
     afa:	eb 17                	jmp    b13 <_ZN6Parser16compileVariablesEP11QStringList+0x745>
     afc:	48 89 c3             	mov    %rax,%rbx
     aff:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     b06:	48 89 c7             	mov    %rax,%rdi
     b09:	e8 00 00 00 00       	callq  b0e <_ZN6Parser16compileVariablesEP11QStringList+0x740>
     b0e:	eb 03                	jmp    b13 <_ZN6Parser16compileVariablesEP11QStringList+0x745>
     b10:	48 89 c3             	mov    %rax,%rbx
     b13:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     b1a:	48 89 c7             	mov    %rax,%rdi
     b1d:	e8 00 00 00 00       	callq  b22 <_ZN6Parser16compileVariablesEP11QStringList+0x754>
     b22:	e9 be 01 00 00       	jmpq   ce5 <_ZN6Parser16compileVariablesEP11QStringList+0x917>
     b27:	48 89 c3             	mov    %rax,%rbx
     b2a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     b31:	48 89 c7             	mov    %rax,%rdi
     b34:	e8 00 00 00 00       	callq  b39 <_ZN6Parser16compileVariablesEP11QStringList+0x76b>
     b39:	e9 a7 01 00 00       	jmpq   ce5 <_ZN6Parser16compileVariablesEP11QStringList+0x917>
     b3e:	48 89 c3             	mov    %rax,%rbx
     b41:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     b48:	48 89 c7             	mov    %rax,%rdi
     b4b:	e8 00 00 00 00       	callq  b50 <_ZN6Parser16compileVariablesEP11QStringList+0x782>
     b50:	e9 7c 01 00 00       	jmpq   cd1 <_ZN6Parser16compileVariablesEP11QStringList+0x903>
     b55:	48 89 c3             	mov    %rax,%rbx
     b58:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     b5f:	48 89 c7             	mov    %rax,%rdi
     b62:	e8 00 00 00 00       	callq  b67 <_ZN6Parser16compileVariablesEP11QStringList+0x799>
     b67:	e9 65 01 00 00       	jmpq   cd1 <_ZN6Parser16compileVariablesEP11QStringList+0x903>
     b6c:	48 89 c3             	mov    %rax,%rbx
     b6f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     b76:	48 89 c7             	mov    %rax,%rdi
     b79:	e8 00 00 00 00       	callq  b7e <_ZN6Parser16compileVariablesEP11QStringList+0x7b0>
     b7e:	e9 3a 01 00 00       	jmpq   cbd <_ZN6Parser16compileVariablesEP11QStringList+0x8ef>
     b83:	48 89 c3             	mov    %rax,%rbx
     b86:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     b8d:	48 89 c7             	mov    %rax,%rdi
     b90:	e8 00 00 00 00       	callq  b95 <_ZN6Parser16compileVariablesEP11QStringList+0x7c7>
     b95:	e9 23 01 00 00       	jmpq   cbd <_ZN6Parser16compileVariablesEP11QStringList+0x8ef>
     b9a:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     b9d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     ba4:	48 89 c7             	mov    %rax,%rdi
     ba7:	e8 00 00 00 00       	callq  bac <_ZN6Parser16compileVariablesEP11QStringList+0x7de>
     bac:	e9 bc 00 00 00       	jmpq   c6d <_ZN6Parser16compileVariablesEP11QStringList+0x89f>
     bb1:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     bb4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     bbb:	48 89 c7             	mov    %rax,%rdi
     bbe:	e8 00 00 00 00       	callq  bc3 <_ZN6Parser16compileVariablesEP11QStringList+0x7f5>
     bc3:	e9 a5 00 00 00       	jmpq   c6d <_ZN6Parser16compileVariablesEP11QStringList+0x89f>
     bc8:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     bcb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     bd2:	48 89 c7             	mov    %rax,%rdi
     bd5:	e8 00 00 00 00       	callq  bda <_ZN6Parser16compileVariablesEP11QStringList+0x80c>
     bda:	eb 03                	jmp    bdf <_ZN6Parser16compileVariablesEP11QStringList+0x811>
     bdc:	48 89 c3             	mov    %rax,%rbx
     bdf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     be6:	48 89 c7             	mov    %rax,%rdi
     be9:	e8 00 00 00 00       	callq  bee <_ZN6Parser16compileVariablesEP11QStringList+0x820>
     bee:	eb 03                	jmp    bf3 <_ZN6Parser16compileVariablesEP11QStringList+0x825>
     bf0:	48 89 c3             	mov    %rax,%rbx
     bf3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     bfa:	48 89 c7             	mov    %rax,%rdi
     bfd:	e8 00 00 00 00       	callq  c02 <_ZN6Parser16compileVariablesEP11QStringList+0x834>
     c02:	eb 69                	jmp    c6d <_ZN6Parser16compileVariablesEP11QStringList+0x89f>
     c04:	48 89 c3             	mov    %rax,%rbx

        int indexVarName = erxVarName.indexIn(*it);
        int countRgPort  = erx_rgPort.captureCount();
        int countVarName = erxVarName.captureCount();

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     c07:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     c0b:	48 89 c7             	mov    %rax,%rdi
     c0e:	e8 00 00 00 00       	callq  c13 <_ZN6Parser16compileVariablesEP11QStringList+0x845>
     c13:	eb 14                	jmp    c29 <_ZN6Parser16compileVariablesEP11QStringList+0x85b>
     c15:	48 89 c3             	mov    %rax,%rbx
        }else{name = erxVarName.cap(0);}
     c18:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c1c:	48 89 c7             	mov    %rax,%rdi
     c1f:	e8 00 00 00 00       	callq  c24 <_ZN6Parser16compileVariablesEP11QStringList+0x856>
     c24:	eb 03                	jmp    c29 <_ZN6Parser16compileVariablesEP11QStringList+0x85b>
     c26:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     c29:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     c2d:	48 89 c7             	mov    %rax,%rdi
     c30:	e8 00 00 00 00       	callq  c35 <_ZN6Parser16compileVariablesEP11QStringList+0x867>
     c35:	eb 03                	jmp    c3a <_ZN6Parser16compileVariablesEP11QStringList+0x86c>
     c37:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     c3a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     c3e:	48 89 c7             	mov    %rax,%rdi
     c41:	e8 00 00 00 00       	callq  c46 <_ZN6Parser16compileVariablesEP11QStringList+0x878>
     c46:	eb 03                	jmp    c4b <_ZN6Parser16compileVariablesEP11QStringList+0x87d>
     c48:	48 89 c3             	mov    %rax,%rbx
     c4b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     c4f:	48 89 c7             	mov    %rax,%rdi
     c52:	e8 00 00 00 00       	callq  c57 <_ZN6Parser16compileVariablesEP11QStringList+0x889>
     c57:	eb 03                	jmp    c5c <_ZN6Parser16compileVariablesEP11QStringList+0x88e>
     c59:	48 89 c3             	mov    %rax,%rbx
     c5c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     c60:	48 89 c7             	mov    %rax,%rdi
     c63:	e8 00 00 00 00       	callq  c68 <_ZN6Parser16compileVariablesEP11QStringList+0x89a>
     c68:	eb 03                	jmp    c6d <_ZN6Parser16compileVariablesEP11QStringList+0x89f>
     c6a:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     c6d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     c74:	48 89 c7             	mov    %rax,%rdi
     c77:	e8 00 00 00 00       	callq  c7c <_ZN6Parser16compileVariablesEP11QStringList+0x8ae>
     c7c:	eb 03                	jmp    c81 <_ZN6Parser16compileVariablesEP11QStringList+0x8b3>
     c7e:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c81:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     c88:	48 89 c7             	mov    %rax,%rdi
     c8b:	e8 00 00 00 00       	callq  c90 <_ZN6Parser16compileVariablesEP11QStringList+0x8c2>
     c90:	eb 03                	jmp    c95 <_ZN6Parser16compileVariablesEP11QStringList+0x8c7>
     c92:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c95:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     c9c:	48 89 c7             	mov    %rax,%rdi
     c9f:	e8 00 00 00 00       	callq  ca4 <_ZN6Parser16compileVariablesEP11QStringList+0x8d6>
     ca4:	eb 03                	jmp    ca9 <_ZN6Parser16compileVariablesEP11QStringList+0x8db>
     ca6:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     ca9:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     cb0:	48 89 c7             	mov    %rax,%rdi
     cb3:	e8 00 00 00 00       	callq  cb8 <_ZN6Parser16compileVariablesEP11QStringList+0x8ea>
     cb8:	eb 03                	jmp    cbd <_ZN6Parser16compileVariablesEP11QStringList+0x8ef>
     cba:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     cbd:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     cc4:	48 89 c7             	mov    %rax,%rdi
     cc7:	e8 00 00 00 00       	callq  ccc <_ZN6Parser16compileVariablesEP11QStringList+0x8fe>
     ccc:	eb 03                	jmp    cd1 <_ZN6Parser16compileVariablesEP11QStringList+0x903>
     cce:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     cd1:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     cd8:	48 89 c7             	mov    %rax,%rdi
     cdb:	e8 00 00 00 00       	callq  ce0 <_ZN6Parser16compileVariablesEP11QStringList+0x912>
     ce0:	eb 03                	jmp    ce5 <_ZN6Parser16compileVariablesEP11QStringList+0x917>
     ce2:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     ce5:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     cec:	48 89 c7             	mov    %rax,%rdi
     cef:	e8 00 00 00 00       	callq  cf4 <_ZN6Parser16compileVariablesEP11QStringList+0x926>
     cf4:	eb 03                	jmp    cf9 <_ZN6Parser16compileVariablesEP11QStringList+0x92b>
     cf6:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     cf9:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     d00:	48 89 c7             	mov    %rax,%rdi
     d03:	e8 00 00 00 00       	callq  d08 <_ZN6Parser16compileVariablesEP11QStringList+0x93a>
     d08:	eb 03                	jmp    d0d <_ZN6Parser16compileVariablesEP11QStringList+0x93f>
     d0a:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     d0d:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     d14:	48 89 c7             	mov    %rax,%rdi
     d17:	e8 00 00 00 00       	callq  d1c <_ZN6Parser16compileVariablesEP11QStringList+0x94e>
     d1c:	eb 03                	jmp    d21 <_ZN6Parser16compileVariablesEP11QStringList+0x953>
     d1e:	48 89 c3             	mov    %rax,%rbx
     d21:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
     d28:	48 89 c7             	mov    %rax,%rdi
     d2b:	e8 00 00 00 00       	callq  d30 <_ZN6Parser16compileVariablesEP11QStringList+0x962>
     d30:	48 89 d8             	mov    %rbx,%rax
     d33:	48 89 c7             	mov    %rax,%rdi
     d36:	e8 00 00 00 00       	callq  d3b <_ZN6Parser16compileVariablesEP11QStringList+0x96d>

    }


    return result;
}
     d3b:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
     d42:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     d46:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     d4d:	00 00 
     d4f:	74 05                	je     d56 <_ZN6Parser16compileVariablesEP11QStringList+0x988>
     d51:	e8 00 00 00 00       	callq  d56 <_ZN6Parser16compileVariablesEP11QStringList+0x988>
     d56:	48 81 c4 38 02 00 00 	add    $0x238,%rsp
     d5d:	5b                   	pop    %rbx
     d5e:	5d                   	pop    %rbp
     d5f:	c3                   	retq   

0000000000000d60 <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     d60:	55                   	push   %rbp
     d61:	48 89 e5             	mov    %rsp,%rbp
     d64:	53                   	push   %rbx
     d65:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     d6c:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     d73:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     d7a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     d81:	00 00 
     d83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     d87:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     d89:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     d90:	00 00 00 
    int index   = 0;
     d93:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     d9a:	00 00 00 

    VarTypes VT;
     d9d:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     da4:	48 89 c7             	mov    %rax,%rdi
     da7:	e8 00 00 00 00       	callq  dac <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     dac:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     db3:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     dba:	48 89 d6             	mov    %rdx,%rsi
     dbd:	48 89 c7             	mov    %rax,%rdi
     dc0:	e8 00 00 00 00       	callq  dc5 <_ZN6Parser14checkVariablesEP7QString+0x65>
     dc5:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     dcc:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     dd3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # dda <_ZN6Parser14checkVariablesEP7QString+0x7a>
     dda:	48 89 ce             	mov    %rcx,%rsi
     ddd:	48 89 c7             	mov    %rax,%rdi
     de0:	e8 00 00 00 00       	callq  de5 <_ZN6Parser14checkVariablesEP7QString+0x85>
     de5:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     dec:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     df3:	b9 00 00 00 00       	mov    $0x0,%ecx
     df8:	ba 01 00 00 00       	mov    $0x1,%edx
     dfd:	48 89 c7             	mov    %rax,%rdi
     e00:	e8 00 00 00 00       	callq  e05 <_ZN6Parser14checkVariablesEP7QString+0xa5>
     e05:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     e0c:	48 89 c7             	mov    %rax,%rdi
     e0f:	e8 00 00 00 00       	callq  e14 <_ZN6Parser14checkVariablesEP7QString+0xb4>
     e14:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     e1b:	48 89 c7             	mov    %rax,%rdi
     e1e:	e8 00 00 00 00       	callq  e23 <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     e23:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     e2a:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     e31:	48 89 d6             	mov    %rdx,%rsi
     e34:	48 89 c7             	mov    %rax,%rdi
     e37:	e8 00 00 00 00       	callq  e3c <_ZN6Parser14checkVariablesEP7QString+0xdc>
     e3c:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     e43:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     e4a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # e51 <_ZN6Parser14checkVariablesEP7QString+0xf1>
     e51:	48 89 ce             	mov    %rcx,%rsi
     e54:	48 89 c7             	mov    %rax,%rdi
     e57:	e8 00 00 00 00       	callq  e5c <_ZN6Parser14checkVariablesEP7QString+0xfc>
     e5c:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     e63:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     e6a:	b9 00 00 00 00       	mov    $0x0,%ecx
     e6f:	ba 01 00 00 00       	mov    $0x1,%edx
     e74:	48 89 c7             	mov    %rax,%rdi
     e77:	e8 00 00 00 00       	callq  e7c <_ZN6Parser14checkVariablesEP7QString+0x11c>
     e7c:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     e83:	48 89 c7             	mov    %rax,%rdi
     e86:	e8 00 00 00 00       	callq  e8b <_ZN6Parser14checkVariablesEP7QString+0x12b>
     e8b:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     e92:	48 89 c7             	mov    %rax,%rdi
     e95:	e8 00 00 00 00       	callq  e9a <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
     e9a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     ea1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ea8 <_ZN6Parser14checkVariablesEP7QString+0x148>
     ea8:	48 89 c7             	mov    %rax,%rdi
     eab:	e8 00 00 00 00       	callq  eb0 <_ZN6Parser14checkVariablesEP7QString+0x150>
     eb0:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
     eb7:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     ebe:	b9 00 00 00 00       	mov    $0x0,%ecx
     ec3:	ba 01 00 00 00       	mov    $0x1,%edx
     ec8:	48 89 c7             	mov    %rax,%rdi
     ecb:	e8 00 00 00 00       	callq  ed0 <_ZN6Parser14checkVariablesEP7QString+0x170>
     ed0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     ed7:	48 89 c7             	mov    %rax,%rdi
     eda:	e8 00 00 00 00       	callq  edf <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
     edf:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     ee6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # eed <_ZN6Parser14checkVariablesEP7QString+0x18d>
     eed:	48 89 c7             	mov    %rax,%rdi
     ef0:	e8 00 00 00 00       	callq  ef5 <_ZN6Parser14checkVariablesEP7QString+0x195>
     ef5:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
     efc:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     f03:	b9 00 00 00 00       	mov    $0x0,%ecx
     f08:	ba 01 00 00 00       	mov    $0x1,%edx
     f0d:	48 89 c7             	mov    %rax,%rdi
     f10:	e8 00 00 00 00       	callq  f15 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
     f15:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     f1c:	48 89 c7             	mov    %rax,%rdi
     f1f:	e8 00 00 00 00       	callq  f24 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
     f24:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     f2b:	48 89 c7             	mov    %rax,%rdi
     f2e:	e8 00 00 00 00       	callq  f33 <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
     f33:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     f3a:	48 89 c7             	mov    %rax,%rdi
     f3d:	e8 00 00 00 00       	callq  f42 <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
     f42:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     f49:	48 89 c7             	mov    %rax,%rdi
     f4c:	e8 00 00 00 00       	callq  f51 <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
     f51:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
     f58:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
     f5b:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
     f61:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
     f68:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     f6f:	b9 00 00 00 00       	mov    $0x0,%ecx
     f74:	48 89 c7             	mov    %rax,%rdi
     f77:	e8 00 00 00 00       	callq  f7c <_ZN6Parser14checkVariablesEP7QString+0x21c>
     f7c:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
     f82:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
     f89:	0f 95 c0             	setne  %al
     f8c:	84 c0                	test   %al,%al
     f8e:	0f 84 68 01 00 00    	je     10fc <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
     f94:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     f9b:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     fa2:	ba 01 00 00 00       	mov    $0x1,%edx
     fa7:	48 89 ce             	mov    %rcx,%rsi
     faa:	48 89 c7             	mov    %rax,%rdi
     fad:	e8 00 00 00 00       	callq  fb2 <_ZN6Parser14checkVariablesEP7QString+0x252>
     fb2:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
     fb9:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     fc0:	48 89 d6             	mov    %rdx,%rsi
     fc3:	48 89 c7             	mov    %rax,%rdi
     fc6:	e8 00 00 00 00       	callq  fcb <_ZN6Parser14checkVariablesEP7QString+0x26b>
     fcb:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     fd2:	48 89 c7             	mov    %rax,%rdi
     fd5:	e8 00 00 00 00       	callq  fda <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
     fda:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     fe1:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     fe8:	ba 02 00 00 00       	mov    $0x2,%edx
     fed:	48 89 ce             	mov    %rcx,%rsi
     ff0:	48 89 c7             	mov    %rax,%rdi
     ff3:	e8 00 00 00 00       	callq  ff8 <_ZN6Parser14checkVariablesEP7QString+0x298>
     ff8:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
     fff:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1006:	48 89 d6             	mov    %rdx,%rsi
    1009:	48 89 c7             	mov    %rax,%rdi
    100c:	e8 00 00 00 00       	callq  1011 <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    1011:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1018:	48 89 c7             	mov    %rax,%rdi
    101b:	e8 00 00 00 00       	callq  1020 <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    1020:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1027:	48 89 c7             	mov    %rax,%rdi
    102a:	e8 00 00 00 00       	callq  102f <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    102f:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    1035:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    103c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1043 <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    1043:	48 89 c7             	mov    %rax,%rdi
    1046:	e8 00 00 00 00       	callq  104b <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    104b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1052:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1059:	ba 02 00 00 00       	mov    $0x2,%edx
    105e:	48 89 ce             	mov    %rcx,%rsi
    1061:	48 89 c7             	mov    %rax,%rdi
    1064:	e8 00 00 00 00       	callq  1069 <_ZN6Parser14checkVariablesEP7QString+0x309>
    1069:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1070:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    1077:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    107e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    1084:	b9 00 00 00 00       	mov    $0x0,%ecx
    1089:	48 89 c7             	mov    %rax,%rdi
    108c:	e8 00 00 00 00       	callq  1091 <_ZN6Parser14checkVariablesEP7QString+0x331>
    1091:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    1098:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    109f:	48 89 d6             	mov    %rdx,%rsi
    10a2:	48 89 c7             	mov    %rax,%rdi
    10a5:	e8 00 00 00 00       	callq  10aa <_ZN6Parser14checkVariablesEP7QString+0x34a>
    10aa:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    10b1:	48 89 c7             	mov    %rax,%rdi
    10b4:	e8 00 00 00 00       	callq  10b9 <_ZN6Parser14checkVariablesEP7QString+0x359>
    10b9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    10c0:	48 89 c7             	mov    %rax,%rdi
    10c3:	e8 00 00 00 00       	callq  10c8 <_ZN6Parser14checkVariablesEP7QString+0x368>
    10c8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    10cf:	48 89 c7             	mov    %rax,%rdi
    10d2:	e8 00 00 00 00       	callq  10d7 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    10d7:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    10de:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    10e5:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    10ec:	48 89 c6             	mov    %rax,%rsi
    10ef:	48 89 d7             	mov    %rdx,%rdi
    10f2:	e8 00 00 00 00       	callq  10f7 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    10f7:	e9 5f fe ff ff       	jmpq   f5b <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    10fc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1103:	48 05 98 00 00 00    	add    $0x98,%rax
    1109:	48 89 c7             	mov    %rax,%rdi
    110c:	e8 00 00 00 00       	callq  1111 <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    1111:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1118:	48 89 c7             	mov    %rax,%rdi
    111b:	e8 00 00 00 00       	callq  1120 <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    1120:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1127:	48 89 c7             	mov    %rax,%rdi
    112a:	e8 00 00 00 00       	callq  112f <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    112f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1136:	48 89 c7             	mov    %rax,%rdi
    1139:	e8 00 00 00 00       	callq  113e <_ZN6Parser14checkVariablesEP7QString+0x3de>
    113e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1145:	48 89 c7             	mov    %rax,%rdi
    1148:	e8 00 00 00 00       	callq  114d <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    114d:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1154:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    115b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1162:	48 89 d6             	mov    %rdx,%rsi
    1165:	48 89 c7             	mov    %rax,%rdi
    1168:	e8 00 00 00 00       	callq  116d <_ZN6Parser14checkVariablesEP7QString+0x40d>
    116d:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    1174:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    117b:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1182:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1189:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1190:	48 89 d6             	mov    %rdx,%rsi
    1193:	48 89 c7             	mov    %rax,%rdi
    1196:	e8 00 00 00 00       	callq  119b <_ZN6Parser14checkVariablesEP7QString+0x43b>
    119b:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    11a2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    11a9:	48 89 d6             	mov    %rdx,%rsi
    11ac:	48 89 c7             	mov    %rax,%rdi
    11af:	e8 00 00 00 00       	callq  11b4 <_ZN6Parser14checkVariablesEP7QString+0x454>
    11b4:	84 c0                	test   %al,%al
    11b6:	0f 84 de 03 00 00    	je     159a <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
    11bc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    11c3:	48 89 c7             	mov    %rax,%rdi
    11c6:	e8 00 00 00 00       	callq  11cb <_ZN6Parser14checkVariablesEP7QString+0x46b>
    11cb:	48 89 c2             	mov    %rax,%rdx
    11ce:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    11d5:	48 89 d6             	mov    %rdx,%rsi
    11d8:	48 89 c7             	mov    %rax,%rdi
    11db:	e8 00 00 00 00       	callq  11e0 <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    11e0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    11e7:	48 89 c7             	mov    %rax,%rdi
    11ea:	e8 00 00 00 00       	callq  11ef <_ZN6Parser14checkVariablesEP7QString+0x48f>
    11ef:	48 89 c6             	mov    %rax,%rsi
    11f2:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    11f9:	b9 00 00 00 00       	mov    $0x0,%ecx
    11fe:	ba 00 00 00 00       	mov    $0x0,%edx
    1203:	48 89 c7             	mov    %rax,%rdi
    1206:	e8 00 00 00 00       	callq  120b <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    120b:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    1211:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1218:	48 89 c7             	mov    %rax,%rdi
    121b:	e8 00 00 00 00       	callq  1220 <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    1220:	48 89 c6             	mov    %rax,%rsi
    1223:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    122a:	b9 00 00 00 00       	mov    $0x0,%ecx
    122f:	ba 00 00 00 00       	mov    $0x0,%edx
    1234:	48 89 c7             	mov    %rax,%rdi
    1237:	e8 00 00 00 00       	callq  123c <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    123c:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    1242:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1249:	48 89 c7             	mov    %rax,%rdi
    124c:	e8 00 00 00 00       	callq  1251 <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    1251:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    1257:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    125e:	48 89 c7             	mov    %rax,%rdi
    1261:	e8 00 00 00 00       	callq  1266 <_ZN6Parser14checkVariablesEP7QString+0x506>
    1266:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    126c:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    1273:	00 00 00 

        if(ZZ>=0)
    1276:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    127d:	0f 88 0d 02 00 00    	js     1490 <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
    1283:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    128a:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1291:	ba 01 00 00 00       	mov    $0x1,%edx
    1296:	48 89 ce             	mov    %rcx,%rsi
    1299:	48 89 c7             	mov    %rax,%rdi
    129c:	e8 00 00 00 00       	callq  12a1 <_ZN6Parser14checkVariablesEP7QString+0x541>
    12a1:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    12a8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    12af:	48 89 d6             	mov    %rdx,%rsi
    12b2:	48 89 c7             	mov    %rax,%rdi
    12b5:	e8 00 00 00 00       	callq  12ba <_ZN6Parser14checkVariablesEP7QString+0x55a>
    12ba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    12c1:	48 89 c7             	mov    %rax,%rdi
    12c4:	e8 00 00 00 00       	callq  12c9 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    12c9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    12cd:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    12d4:	ba 02 00 00 00       	mov    $0x2,%edx
    12d9:	48 89 ce             	mov    %rcx,%rsi
    12dc:	48 89 c7             	mov    %rax,%rdi
    12df:	e8 00 00 00 00       	callq  12e4 <_ZN6Parser14checkVariablesEP7QString+0x584>
    12e4:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    12e8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    12ef:	48 89 d6             	mov    %rdx,%rsi
    12f2:	48 89 c7             	mov    %rax,%rdi
    12f5:	e8 00 00 00 00       	callq  12fa <_ZN6Parser14checkVariablesEP7QString+0x59a>
    12fa:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    12fe:	48 89 c7             	mov    %rax,%rdi
    1301:	e8 00 00 00 00       	callq  1306 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    1306:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    130a:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1311:	ba 03 00 00 00       	mov    $0x3,%edx
    1316:	48 89 ce             	mov    %rcx,%rsi
    1319:	48 89 c7             	mov    %rax,%rdi
    131c:	e8 00 00 00 00       	callq  1321 <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    1321:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1325:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    132c:	48 89 d6             	mov    %rdx,%rsi
    132f:	48 89 c7             	mov    %rax,%rdi
    1332:	e8 00 00 00 00       	callq  1337 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    1337:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    133b:	48 89 c7             	mov    %rax,%rdi
    133e:	e8 00 00 00 00       	callq  1343 <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    1343:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1347:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    134e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1355 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    1355:	48 89 ce             	mov    %rcx,%rsi
    1358:	48 89 c7             	mov    %rax,%rdi
    135b:	e8 00 00 00 00       	callq  1360 <_ZN6Parser14checkVariablesEP7QString+0x600>
    1360:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1364:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    136b:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    136f:	48 89 ce             	mov    %rcx,%rsi
    1372:	48 89 c7             	mov    %rax,%rdi
    1375:	e8 00 00 00 00       	callq  137a <_ZN6Parser14checkVariablesEP7QString+0x61a>
    137a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    137e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    1382:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1389 <_ZN6Parser14checkVariablesEP7QString+0x629>
    1389:	48 89 ce             	mov    %rcx,%rsi
    138c:	48 89 c7             	mov    %rax,%rdi
    138f:	e8 00 00 00 00       	callq  1394 <_ZN6Parser14checkVariablesEP7QString+0x634>
    1394:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    139b:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    13a2:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    13a6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    13ad:	48 89 c6             	mov    %rax,%rsi
    13b0:	48 89 cf             	mov    %rcx,%rdi
    13b3:	e8 00 00 00 00       	callq  13b8 <_ZN6Parser14checkVariablesEP7QString+0x658>
    13b8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    13bc:	48 89 c7             	mov    %rax,%rdi
    13bf:	e8 00 00 00 00       	callq  13c4 <_ZN6Parser14checkVariablesEP7QString+0x664>
    13c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13c8:	48 89 c7             	mov    %rax,%rdi
    13cb:	e8 00 00 00 00       	callq  13d0 <_ZN6Parser14checkVariablesEP7QString+0x670>
    13d0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    13d4:	48 89 c7             	mov    %rax,%rdi
    13d7:	e8 00 00 00 00       	callq  13dc <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    13dc:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    13e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 13ea <_ZN6Parser14checkVariablesEP7QString+0x68a>
    13ea:	48 89 c7             	mov    %rax,%rdi
    13ed:	e8 00 00 00 00       	callq  13f2 <_ZN6Parser14checkVariablesEP7QString+0x692>
    13f2:	84 c0                	test   %al,%al
    13f4:	74 0a                	je     1400 <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    13f6:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    13fd:	00 00 00 
            if(type=="port")    iType = 80;
    1400:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1407:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 140e <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    140e:	48 89 c7             	mov    %rax,%rdi
    1411:	e8 00 00 00 00       	callq  1416 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    1416:	84 c0                	test   %al,%al
    1418:	74 0a                	je     1424 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    141a:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    1421:	00 00 00 

            index++;
    1424:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    142b:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1431:	88 45 e0             	mov    %al,-0x20(%rbp)
    1434:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    143b:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    1442:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1446:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    144d:	48 89 c6             	mov    %rax,%rsi
    1450:	48 89 cf             	mov    %rcx,%rdi
    1453:	e8 00 00 00 00       	callq  1458 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
    1458:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    145e:	88 45 e0             	mov    %al,-0x20(%rbp)
    1461:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1467:	88 45 d0             	mov    %al,-0x30(%rbp)
    146a:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1471:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    1478:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    147c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1480:	48 89 c6             	mov    %rax,%rsi
    1483:	48 89 cf             	mov    %rcx,%rdi
    1486:	e8 00 00 00 00       	callq  148b <_ZN6Parser14checkVariablesEP7QString+0x72b>
    148b:	e9 e7 00 00 00       	jmpq   1577 <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
    1490:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    1497:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    149b:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    14a2:	ba 00 00 00 00       	mov    $0x0,%edx
    14a7:	48 89 ce             	mov    %rcx,%rsi
    14aa:	48 89 c7             	mov    %rax,%rdi
    14ad:	e8 00 00 00 00       	callq  14b2 <_ZN6Parser14checkVariablesEP7QString+0x752>
    14b2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    14b6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14bd:	48 89 d6             	mov    %rdx,%rsi
    14c0:	48 89 c7             	mov    %rax,%rdi
    14c3:	e8 00 00 00 00       	callq  14c8 <_ZN6Parser14checkVariablesEP7QString+0x768>
    14c8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    14cc:	48 89 c7             	mov    %rax,%rdi
    14cf:	e8 00 00 00 00       	callq  14d4 <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
    14d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    14d8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14df <_ZN6Parser14checkVariablesEP7QString+0x77f>
    14df:	48 89 c7             	mov    %rax,%rdi
    14e2:	e8 00 00 00 00       	callq  14e7 <_ZN6Parser14checkVariablesEP7QString+0x787>
    14e7:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    14ee:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    14f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    14f9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1500:	48 89 c6             	mov    %rax,%rsi
    1503:	48 89 cf             	mov    %rcx,%rdi
    1506:	e8 00 00 00 00       	callq  150b <_ZN6Parser14checkVariablesEP7QString+0x7ab>
    150b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    150f:	48 89 c7             	mov    %rax,%rdi
    1512:	e8 00 00 00 00       	callq  1517 <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
    1517:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    151d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1520:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1527:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    152e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1532:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1539:	48 89 c6             	mov    %rax,%rsi
    153c:	48 89 cf             	mov    %rcx,%rdi
    153f:	e8 00 00 00 00       	callq  1544 <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
    1544:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    154a:	88 45 e0             	mov    %al,-0x20(%rbp)
    154d:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1553:	88 45 d0             	mov    %al,-0x30(%rbp)
    1556:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    155d:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    1564:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1568:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    156c:	48 89 c6             	mov    %rax,%rsi
    156f:	48 89 cf             	mov    %rcx,%rdi
    1572:	e8 00 00 00 00       	callq  1577 <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1577:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    157e:	48 89 c7             	mov    %rax,%rdi
    1581:	e8 00 00 00 00       	callq  1586 <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1586:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    158d:	48 89 c7             	mov    %rax,%rdi
    1590:	e8 00 00 00 00       	callq  1595 <_ZN6Parser14checkVariablesEP7QString+0x835>
    1595:	e9 e1 fb ff ff       	jmpq   117b <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    159a:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    15a0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    15a7:	48 89 c7             	mov    %rax,%rdi
    15aa:	e8 00 00 00 00       	callq  15af <_ZN6Parser14checkVariablesEP7QString+0x84f>
    15af:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    15b6:	48 89 c7             	mov    %rax,%rdi
    15b9:	e8 00 00 00 00       	callq  15be <_ZN6Parser14checkVariablesEP7QString+0x85e>
    15be:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15c5:	48 89 c7             	mov    %rax,%rdi
    15c8:	e8 00 00 00 00       	callq  15cd <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    15cd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    15d4:	48 89 c7             	mov    %rax,%rdi
    15d7:	e8 00 00 00 00       	callq  15dc <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    15dc:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    15e3:	48 89 c7             	mov    %rax,%rdi
    15e6:	e8 00 00 00 00       	callq  15eb <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    15eb:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    15f2:	48 89 c7             	mov    %rax,%rdi
    15f5:	e8 00 00 00 00       	callq  15fa <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    15fa:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1601:	48 89 c7             	mov    %rax,%rdi
    1604:	e8 00 00 00 00       	callq  1609 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1609:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1610:	48 89 c7             	mov    %rax,%rdi
    1613:	e8 00 00 00 00       	callq  1618 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1618:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    161f:	48 89 c7             	mov    %rax,%rdi
    1622:	e8 00 00 00 00       	callq  1627 <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1627:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    162e:	48 89 c7             	mov    %rax,%rdi
    1631:	e8 00 00 00 00       	callq  1636 <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1636:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    163d:	48 89 c7             	mov    %rax,%rdi
    1640:	e8 00 00 00 00       	callq  1645 <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    1645:	89 d8                	mov    %ebx,%eax
}
    1647:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    164b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1652:	00 00 
    1654:	0f 84 03 03 00 00    	je     195d <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    165a:	e9 f9 02 00 00       	jmpq   1958 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
    165f:	48 89 c3             	mov    %rax,%rbx
    1662:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1669:	48 89 c7             	mov    %rax,%rdi
    166c:	e8 00 00 00 00       	callq  1671 <_ZN6Parser14checkVariablesEP7QString+0x911>
    1671:	eb 17                	jmp    168a <_ZN6Parser14checkVariablesEP7QString+0x92a>
    1673:	48 89 c3             	mov    %rax,%rbx
    1676:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    167d:	48 89 c7             	mov    %rax,%rdi
    1680:	e8 00 00 00 00       	callq  1685 <_ZN6Parser14checkVariablesEP7QString+0x925>
    1685:	eb 03                	jmp    168a <_ZN6Parser14checkVariablesEP7QString+0x92a>
    1687:	48 89 c3             	mov    %rax,%rbx
    168a:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1691:	48 89 c7             	mov    %rax,%rdi
    1694:	e8 00 00 00 00       	callq  1699 <_ZN6Parser14checkVariablesEP7QString+0x939>
    1699:	e9 a0 02 00 00       	jmpq   193e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    169e:	48 89 c3             	mov    %rax,%rbx
    16a1:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    16a8:	48 89 c7             	mov    %rax,%rdi
    16ab:	e8 00 00 00 00       	callq  16b0 <_ZN6Parser14checkVariablesEP7QString+0x950>
    16b0:	e9 89 02 00 00       	jmpq   193e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    16b5:	48 89 c3             	mov    %rax,%rbx
    16b8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    16bf:	48 89 c7             	mov    %rax,%rdi
    16c2:	e8 00 00 00 00       	callq  16c7 <_ZN6Parser14checkVariablesEP7QString+0x967>
    16c7:	eb 17                	jmp    16e0 <_ZN6Parser14checkVariablesEP7QString+0x980>
    16c9:	48 89 c3             	mov    %rax,%rbx
    16cc:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    16d3:	48 89 c7             	mov    %rax,%rdi
    16d6:	e8 00 00 00 00       	callq  16db <_ZN6Parser14checkVariablesEP7QString+0x97b>
    16db:	eb 03                	jmp    16e0 <_ZN6Parser14checkVariablesEP7QString+0x980>
    16dd:	48 89 c3             	mov    %rax,%rbx
    16e0:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    16e7:	48 89 c7             	mov    %rax,%rdi
    16ea:	e8 00 00 00 00       	callq  16ef <_ZN6Parser14checkVariablesEP7QString+0x98f>
    16ef:	e9 36 02 00 00       	jmpq   192a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    16f4:	48 89 c3             	mov    %rax,%rbx
    16f7:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    16fe:	48 89 c7             	mov    %rax,%rdi
    1701:	e8 00 00 00 00       	callq  1706 <_ZN6Parser14checkVariablesEP7QString+0x9a6>
    1706:	e9 1f 02 00 00       	jmpq   192a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    170b:	48 89 c3             	mov    %rax,%rbx
    170e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1715:	48 89 c7             	mov    %rax,%rdi
    1718:	e8 00 00 00 00       	callq  171d <_ZN6Parser14checkVariablesEP7QString+0x9bd>
    171d:	e9 f4 01 00 00       	jmpq   1916 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1722:	48 89 c3             	mov    %rax,%rbx
    1725:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    172c:	48 89 c7             	mov    %rax,%rdi
    172f:	e8 00 00 00 00       	callq  1734 <_ZN6Parser14checkVariablesEP7QString+0x9d4>
    1734:	e9 dd 01 00 00       	jmpq   1916 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1739:	48 89 c3             	mov    %rax,%rbx
    173c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1743:	48 89 c7             	mov    %rax,%rdi
    1746:	e8 00 00 00 00       	callq  174b <_ZN6Parser14checkVariablesEP7QString+0x9eb>
    174b:	e9 b2 01 00 00       	jmpq   1902 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1750:	48 89 c3             	mov    %rax,%rbx
    1753:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    175a:	48 89 c7             	mov    %rax,%rdi
    175d:	e8 00 00 00 00       	callq  1762 <_ZN6Parser14checkVariablesEP7QString+0xa02>
    1762:	e9 9b 01 00 00       	jmpq   1902 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1767:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    176a:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1771:	48 89 c7             	mov    %rax,%rdi
    1774:	e8 00 00 00 00       	callq  1779 <_ZN6Parser14checkVariablesEP7QString+0xa19>
    1779:	e9 34 01 00 00       	jmpq   18b2 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    177e:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    1781:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1788:	48 89 c7             	mov    %rax,%rdi
    178b:	e8 00 00 00 00       	callq  1790 <_ZN6Parser14checkVariablesEP7QString+0xa30>
    1790:	e9 1d 01 00 00       	jmpq   18b2 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1795:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    1798:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    179f:	48 89 c7             	mov    %rax,%rdi
    17a2:	e8 00 00 00 00       	callq  17a7 <_ZN6Parser14checkVariablesEP7QString+0xa47>
    17a7:	eb 03                	jmp    17ac <_ZN6Parser14checkVariablesEP7QString+0xa4c>
    17a9:	48 89 c3             	mov    %rax,%rbx
    17ac:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    17b3:	48 89 c7             	mov    %rax,%rdi
    17b6:	e8 00 00 00 00       	callq  17bb <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    17bb:	eb 03                	jmp    17c0 <_ZN6Parser14checkVariablesEP7QString+0xa60>
    17bd:	48 89 c3             	mov    %rax,%rbx
    17c0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    17c7:	48 89 c7             	mov    %rax,%rdi
    17ca:	e8 00 00 00 00       	callq  17cf <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    17cf:	e9 de 00 00 00       	jmpq   18b2 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    17d4:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    17d7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    17de:	48 89 c7             	mov    %rax,%rdi
    17e1:	e8 00 00 00 00       	callq  17e6 <_ZN6Parser14checkVariablesEP7QString+0xa86>
    17e6:	eb 7a                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    17e8:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    17eb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    17ef:	48 89 c7             	mov    %rax,%rdi
    17f2:	e8 00 00 00 00       	callq  17f7 <_ZN6Parser14checkVariablesEP7QString+0xa97>
    17f7:	eb 69                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    17f9:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    17fc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1800:	48 89 c7             	mov    %rax,%rdi
    1803:	e8 00 00 00 00       	callq  1808 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
    1808:	eb 58                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    180a:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    180d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1811:	48 89 c7             	mov    %rax,%rdi
    1814:	e8 00 00 00 00       	callq  1819 <_ZN6Parser14checkVariablesEP7QString+0xab9>
    1819:	eb 03                	jmp    181e <_ZN6Parser14checkVariablesEP7QString+0xabe>
    181b:	48 89 c3             	mov    %rax,%rbx
    181e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1822:	48 89 c7             	mov    %rax,%rdi
    1825:	e8 00 00 00 00       	callq  182a <_ZN6Parser14checkVariablesEP7QString+0xaca>
    182a:	eb 03                	jmp    182f <_ZN6Parser14checkVariablesEP7QString+0xacf>
    182c:	48 89 c3             	mov    %rax,%rbx
    182f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1833:	48 89 c7             	mov    %rax,%rdi
    1836:	e8 00 00 00 00       	callq  183b <_ZN6Parser14checkVariablesEP7QString+0xadb>
    183b:	eb 25                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    183d:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1840:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1844:	48 89 c7             	mov    %rax,%rdi
    1847:	e8 00 00 00 00       	callq  184c <_ZN6Parser14checkVariablesEP7QString+0xaec>
    184c:	eb 14                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    184e:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1851:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1855:	48 89 c7             	mov    %rax,%rdi
    1858:	e8 00 00 00 00       	callq  185d <_ZN6Parser14checkVariablesEP7QString+0xafd>
    185d:	eb 03                	jmp    1862 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    185f:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1862:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1869:	48 89 c7             	mov    %rax,%rdi
    186c:	e8 00 00 00 00       	callq  1871 <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1871:	eb 03                	jmp    1876 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1873:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1876:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    187d:	48 89 c7             	mov    %rax,%rdi
    1880:	e8 00 00 00 00       	callq  1885 <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1885:	eb 03                	jmp    188a <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1887:	48 89 c3             	mov    %rax,%rbx
    188a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1891:	48 89 c7             	mov    %rax,%rdi
    1894:	e8 00 00 00 00       	callq  1899 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1899:	eb 03                	jmp    189e <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    189b:	48 89 c3             	mov    %rax,%rbx
    189e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    18a5:	48 89 c7             	mov    %rax,%rdi
    18a8:	e8 00 00 00 00       	callq  18ad <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    18ad:	eb 03                	jmp    18b2 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    18af:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    18b2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    18b9:	48 89 c7             	mov    %rax,%rdi
    18bc:	e8 00 00 00 00       	callq  18c1 <_ZN6Parser14checkVariablesEP7QString+0xb61>
    18c1:	eb 03                	jmp    18c6 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    18c3:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    18c6:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    18cd:	48 89 c7             	mov    %rax,%rdi
    18d0:	e8 00 00 00 00       	callq  18d5 <_ZN6Parser14checkVariablesEP7QString+0xb75>
    18d5:	eb 03                	jmp    18da <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    18d7:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    18da:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    18e1:	48 89 c7             	mov    %rax,%rdi
    18e4:	e8 00 00 00 00       	callq  18e9 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    18e9:	eb 03                	jmp    18ee <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    18eb:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    18ee:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    18f5:	48 89 c7             	mov    %rax,%rdi
    18f8:	e8 00 00 00 00       	callq  18fd <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    18fd:	eb 03                	jmp    1902 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    18ff:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1902:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1909:	48 89 c7             	mov    %rax,%rdi
    190c:	e8 00 00 00 00       	callq  1911 <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1911:	eb 03                	jmp    1916 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1913:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1916:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    191d:	48 89 c7             	mov    %rax,%rdi
    1920:	e8 00 00 00 00       	callq  1925 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1925:	eb 03                	jmp    192a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1927:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    192a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1931:	48 89 c7             	mov    %rax,%rdi
    1934:	e8 00 00 00 00       	callq  1939 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1939:	eb 03                	jmp    193e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    193b:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    193e:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1945:	48 89 c7             	mov    %rax,%rdi
    1948:	e8 00 00 00 00       	callq  194d <_ZN6Parser14checkVariablesEP7QString+0xbed>
    194d:	48 89 d8             	mov    %rbx,%rax
    1950:	48 89 c7             	mov    %rax,%rdi
    1953:	e8 00 00 00 00       	callq  1958 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
    1958:	e8 00 00 00 00       	callq  195d <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    195d:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1964:	5b                   	pop    %rbx
    1965:	5d                   	pop    %rbp
    1966:	c3                   	retq   
    1967:	90                   	nop

0000000000001968 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1968:	55                   	push   %rbp
    1969:	48 89 e5             	mov    %rsp,%rbp
    196c:	53                   	push   %rbx
    196d:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1974:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    197b:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1982:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1989:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1990:	00 00 
    1992:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1996:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1998:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    199f:	00 00 00 
    QString result;
    19a2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    19a9:	48 89 c7             	mov    %rax,%rdi
    19ac:	e8 00 00 00 00       	callq  19b1 <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    19b1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    19b5:	48 89 c7             	mov    %rax,%rdi
    19b8:	e8 00 00 00 00       	callq  19bd <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    19bd:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    19c4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    19c8:	48 89 d6             	mov    %rdx,%rsi
    19cb:	48 89 c7             	mov    %rax,%rdi
    19ce:	e8 00 00 00 00       	callq  19d3 <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    19d3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    19d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    19db:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    19e2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    19e6:	48 89 d6             	mov    %rdx,%rsi
    19e9:	48 89 c7             	mov    %rax,%rdi
    19ec:	e8 00 00 00 00       	callq  19f1 <_ZN6Parser17QStringList_printE11QStringList+0x89>
    19f1:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    19f5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    19f9:	48 89 d6             	mov    %rdx,%rsi
    19fc:	48 89 c7             	mov    %rax,%rdi
    19ff:	e8 00 00 00 00       	callq  1a04 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1a04:	84 c0                	test   %al,%al
    1a06:	0f 84 e0 00 00 00    	je     1aec <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1a0c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a10:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1a16:	ba 0a 00 00 00       	mov    $0xa,%edx
    1a1b:	89 ce                	mov    %ecx,%esi
    1a1d:	48 89 c7             	mov    %rax,%rdi
    1a20:	e8 00 00 00 00       	callq  1a25 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1a25:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a29:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1a2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1a34 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1a34:	48 89 c7             	mov    %rax,%rdi
    1a37:	e8 00 00 00 00       	callq  1a3c <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1a3c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a40:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1a44:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1a4b <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1a4b:	48 89 ce             	mov    %rcx,%rsi
    1a4e:	48 89 c7             	mov    %rax,%rdi
    1a51:	e8 00 00 00 00       	callq  1a56 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1a56:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1a5a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a61:	48 89 d6             	mov    %rdx,%rsi
    1a64:	48 89 c7             	mov    %rax,%rdi
    1a67:	e8 00 00 00 00       	callq  1a6c <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1a6c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a70:	48 89 c7             	mov    %rax,%rdi
    1a73:	e8 00 00 00 00       	callq  1a78 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1a78:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a7c:	48 89 c7             	mov    %rax,%rdi
    1a7f:	e8 00 00 00 00       	callq  1a84 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1a84:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a88:	48 89 c7             	mov    %rax,%rdi
    1a8b:	e8 00 00 00 00       	callq  1a90 <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1a90:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a94:	48 89 c7             	mov    %rax,%rdi
    1a97:	e8 00 00 00 00       	callq  1a9c <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1a9c:	48 89 c2             	mov    %rax,%rdx
    1a9f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1aa3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1aaa <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1aaa:	48 89 c7             	mov    %rax,%rdi
    1aad:	e8 00 00 00 00       	callq  1ab2 <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1ab2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1ab6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1abd:	48 89 d6             	mov    %rdx,%rsi
    1ac0:	48 89 c7             	mov    %rax,%rdi
    1ac3:	e8 00 00 00 00       	callq  1ac8 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1ac8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1acc:	48 89 c7             	mov    %rax,%rdi
    1acf:	e8 00 00 00 00       	callq  1ad4 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1ad4:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1adb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1adf:	48 89 c7             	mov    %rax,%rdi
    1ae2:	e8 00 00 00 00       	callq  1ae7 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1ae7:	e9 ef fe ff ff       	jmpq   19db <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1aec:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1af3:	48 89 c7             	mov    %rax,%rdi
    1af6:	e8 00 00 00 00       	callq  1afb <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1afb:	90                   	nop
    1afc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1b03:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1b07:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1b0e:	00 00 
    1b10:	74 68                	je     1b7a <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1b12:	eb 61                	jmp    1b75 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1b14:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1b17:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b1b:	48 89 c7             	mov    %rax,%rdi
    1b1e:	e8 00 00 00 00       	callq  1b23 <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1b23:	eb 03                	jmp    1b28 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1b25:	48 89 c3             	mov    %rax,%rbx
    1b28:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1b2c:	48 89 c7             	mov    %rax,%rdi
    1b2f:	e8 00 00 00 00       	callq  1b34 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1b34:	eb 03                	jmp    1b39 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1b36:	48 89 c3             	mov    %rax,%rbx
    1b39:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1b3d:	48 89 c7             	mov    %rax,%rdi
    1b40:	e8 00 00 00 00       	callq  1b45 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1b45:	eb 14                	jmp    1b5b <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1b47:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1b4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1b4e:	48 89 c7             	mov    %rax,%rdi
    1b51:	e8 00 00 00 00       	callq  1b56 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1b56:	eb 03                	jmp    1b5b <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1b58:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1b5b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1b62:	48 89 c7             	mov    %rax,%rdi
    1b65:	e8 00 00 00 00       	callq  1b6a <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1b6a:	48 89 d8             	mov    %rbx,%rax
    1b6d:	48 89 c7             	mov    %rax,%rdi
    1b70:	e8 00 00 00 00       	callq  1b75 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1b75:	e8 00 00 00 00       	callq  1b7a <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1b7a:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1b81:	5b                   	pop    %rbx
    1b82:	5d                   	pop    %rbp
    1b83:	c3                   	retq   

0000000000001b84 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1b84:	55                   	push   %rbp
    1b85:	48 89 e5             	mov    %rsp,%rbp
    1b88:	48 83 ec 10          	sub    $0x10,%rsp
    1b8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1b90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1b98:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1b9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1ba0:	ba 01 00 00 00       	mov    $0x1,%edx
    1ba5:	48 89 c6             	mov    %rax,%rsi
    1ba8:	48 89 cf             	mov    %rcx,%rdi
    1bab:	e8 00 00 00 00       	callq  1bb0 <_ZN6Parser14addIncludeFileE7QString+0x2c>
    1bb0:	83 f0 01             	xor    $0x1,%eax
    1bb3:	84 c0                	test   %al,%al
    1bb5:	74 17                	je     1bce <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1bb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1bbb:	48 8d 50 58          	lea    0x58(%rax),%rdx
    1bbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1bc3:	48 89 c6             	mov    %rax,%rsi
    1bc6:	48 89 d7             	mov    %rdx,%rdi
    1bc9:	e8 00 00 00 00       	callq  1bce <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    1bce:	90                   	nop
    1bcf:	c9                   	leaveq 
    1bd0:	c3                   	retq   
    1bd1:	90                   	nop

0000000000001bd2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1bd2:	55                   	push   %rbp
    1bd3:	48 89 e5             	mov    %rsp,%rbp
    1bd6:	41 55                	push   %r13
    1bd8:	41 54                	push   %r12
    1bda:	53                   	push   %rbx
    1bdb:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1be2:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1be9:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1bf0:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1bf7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1bfe:	00 00 
    1c00:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1c04:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1c06:	bb 00 00 00 00       	mov    $0x0,%ebx
    1c0b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1c12:	48 89 c7             	mov    %rax,%rdi
    1c15:	e8 00 00 00 00       	callq  1c1a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1c1a:	83 f8 04             	cmp    $0x4,%eax
    1c1d:	74 3a                	je     1c59 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1c1f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c23:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1c2a:	48 89 d6             	mov    %rdx,%rsi
    1c2d:	48 89 c7             	mov    %rax,%rdi
    1c30:	e8 00 00 00 00       	callq  1c35 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1c35:	bb 01 00 00 00       	mov    $0x1,%ebx
    1c3a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c45 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1c45:	48 89 c7             	mov    %rax,%rdi
    1c48:	e8 00 00 00 00       	callq  1c4d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1c4d:	84 c0                	test   %al,%al
    1c4f:	74 08                	je     1c59 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1c51:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1c57:	eb 06                	jmp    1c5f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1c59:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1c5f:	84 db                	test   %bl,%bl
    1c61:	74 0d                	je     1c70 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1c63:	90                   	nop
    1c64:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c68:	48 89 c7             	mov    %rax,%rdi
    1c6b:	e8 00 00 00 00       	callq  1c70 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1c70:	45 84 ed             	test   %r13b,%r13b
    1c73:	74 0b                	je     1c80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1c75:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1c7b:	e9 87 02 00 00       	jmpq   1f07 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1c80:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1c87:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1c8e:	48 89 d6             	mov    %rdx,%rsi
    1c91:	48 89 c7             	mov    %rax,%rdi
    1c94:	e8 00 00 00 00       	callq  1c99 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1c99:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1ca0:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1ca3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1caa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1cb1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1cb1:	48 89 c7             	mov    %rax,%rdi
    1cb4:	e8 00 00 00 00       	callq  1cb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1cb9:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1cc0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1cc7:	48 89 d6             	mov    %rdx,%rsi
    1cca:	48 89 c7             	mov    %rax,%rdi
    1ccd:	e8 00 00 00 00       	callq  1cd2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1cd2:	89 c3                	mov    %eax,%ebx
    1cd4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1cdb:	48 89 c7             	mov    %rax,%rdi
    1cde:	e8 00 00 00 00       	callq  1ce3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1ce3:	84 db                	test   %bl,%bl
    1ce5:	74 6c                	je     1d53 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1ce7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cee:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1cf5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1cf5:	48 89 c7             	mov    %rax,%rdi
    1cf8:	e8 00 00 00 00       	callq  1cfd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1cfd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1d01:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1d08:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1d0f:	48 89 ce             	mov    %rcx,%rsi
    1d12:	48 89 c7             	mov    %rax,%rdi
    1d15:	e8 00 00 00 00       	callq  1d1a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1d1a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1d1e:	ba 0a 00 00 00       	mov    $0xa,%edx
    1d23:	be 00 00 00 00       	mov    $0x0,%esi
    1d28:	48 89 c7             	mov    %rax,%rdi
    1d2b:	e8 00 00 00 00       	callq  1d30 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1d30:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1d36:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1d3a:	48 89 c7             	mov    %rax,%rdi
    1d3d:	e8 00 00 00 00       	callq  1d42 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1d42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d49:	48 89 c7             	mov    %rax,%rdi
    1d4c:	e8 00 00 00 00       	callq  1d51 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1d51:	eb 0b                	jmp    1d5e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1d53:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1d59:	e9 9a 01 00 00       	jmpq   1ef8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1d5e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1d65:	48 89 c7             	mov    %rax,%rdi
    1d68:	e8 00 00 00 00       	callq  1d6d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1d6d:	bb 00 00 00 00       	mov    $0x0,%ebx
    1d72:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1d79:	48 89 c7             	mov    %rax,%rdi
    1d7c:	e8 00 00 00 00       	callq  1d81 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    1d81:	83 f8 05             	cmp    $0x5,%eax
    1d84:	75 35                	jne    1dbb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1d86:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1d8a:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1d91:	48 89 d6             	mov    %rdx,%rsi
    1d94:	48 89 c7             	mov    %rax,%rdi
    1d97:	e8 00 00 00 00       	callq  1d9c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    1d9c:	bb 01 00 00 00       	mov    $0x1,%ebx
    1da1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1da5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1dac <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    1dac:	48 89 c7             	mov    %rax,%rdi
    1daf:	e8 00 00 00 00       	callq  1db4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    1db4:	83 f0 01             	xor    $0x1,%eax
    1db7:	84 c0                	test   %al,%al
    1db9:	74 08                	je     1dc3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    1dbb:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1dc1:	eb 06                	jmp    1dc9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    1dc3:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1dc9:	84 db                	test   %bl,%bl
    1dcb:	74 0d                	je     1dda <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    1dcd:	90                   	nop
    1dce:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1dd2:	48 89 c7             	mov    %rax,%rdi
    1dd5:	e8 00 00 00 00       	callq  1dda <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    1dda:	45 84 ed             	test   %r13b,%r13b
    1ddd:	0f 84 0f 01 00 00    	je     1ef2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    1de3:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1dea:	48 89 c7             	mov    %rax,%rdi
    1ded:	e8 00 00 00 00       	callq  1df2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    1df2:	83 f8 04             	cmp    $0x4,%eax
    1df5:	0f 94 c0             	sete   %al
    1df8:	84 c0                	test   %al,%al
    1dfa:	0f 84 de 00 00 00    	je     1ede <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    1e00:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e04:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e0b:	48 89 d6             	mov    %rdx,%rsi
    1e0e:	48 89 c7             	mov    %rax,%rdi
    1e11:	e8 00 00 00 00       	callq  1e16 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    1e16:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e1a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1e21 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    1e21:	48 89 c7             	mov    %rax,%rdi
    1e24:	e8 00 00 00 00       	callq  1e29 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    1e29:	89 c3                	mov    %eax,%ebx
    1e2b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e2f:	48 89 c7             	mov    %rax,%rdi
    1e32:	e8 00 00 00 00       	callq  1e37 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    1e37:	84 db                	test   %bl,%bl
    1e39:	0f 84 9f 00 00 00    	je     1ede <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    1e3f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1e46:	48 89 c7             	mov    %rax,%rdi
    1e49:	e8 00 00 00 00       	callq  1e4e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    1e4e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e52:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e59:	48 89 d6             	mov    %rdx,%rsi
    1e5c:	48 89 c7             	mov    %rax,%rdi
    1e5f:	e8 00 00 00 00       	callq  1e64 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    1e64:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e68:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1e6c:	48 89 d6             	mov    %rdx,%rsi
    1e6f:	48 89 c7             	mov    %rax,%rdi
    1e72:	e8 00 00 00 00       	callq  1e77 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    1e77:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e7b:	48 89 c7             	mov    %rax,%rdi
    1e7e:	e8 00 00 00 00       	callq  1e83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    1e83:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1e87:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    1e8e:	48 89 d6             	mov    %rdx,%rsi
    1e91:	48 89 c7             	mov    %rax,%rdi
    1e94:	e8 00 00 00 00       	callq  1e99 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    1e99:	84 c0                	test   %al,%al
    1e9b:	74 0d                	je     1eaa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    1e9d:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1ea3:	bb 00 00 00 00       	mov    $0x0,%ebx
    1ea8:	eb 22                	jmp    1ecc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    1eaa:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    1eb1:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    1eb5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    1ebc:	48 89 ce             	mov    %rcx,%rsi
    1ebf:	48 89 c7             	mov    %rax,%rdi
    1ec2:	e8 00 00 00 00       	callq  1ec7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    1ec7:	bb 01 00 00 00       	mov    $0x1,%ebx
    1ecc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1ed0:	48 89 c7             	mov    %rax,%rdi
    1ed3:	e8 00 00 00 00       	callq  1ed8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    1ed8:	83 fb 01             	cmp    $0x1,%ebx
    1edb:	75 1b                	jne    1ef8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    1edd:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    1ede:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1ee5:	48 89 c7             	mov    %rax,%rdi
    1ee8:	e8 00 00 00 00       	callq  1eed <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1eed:	e9 7b fe ff ff       	jmpq   1d6d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    1ef2:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    1ef8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1eff:	48 89 c7             	mov    %rax,%rdi
    1f02:	e8 00 00 00 00       	callq  1f07 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    1f07:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    1f0a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    1f0e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1f15:	00 00 
    1f17:	0f 84 d1 00 00 00    	je     1fee <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    1f1d:	e9 c7 00 00 00       	jmpq   1fe9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    1f22:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1f25:	84 db                	test   %bl,%bl
    1f27:	74 0f                	je     1f38 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    1f29:	90                   	nop
    1f2a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f2e:	48 89 c7             	mov    %rax,%rdi
    1f31:	e8 00 00 00 00       	callq  1f36 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    1f36:	eb 01                	jmp    1f39 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    1f38:	90                   	nop
    1f39:	4c 89 e0             	mov    %r12,%rax
    1f3c:	48 89 c7             	mov    %rax,%rdi
    1f3f:	e8 00 00 00 00       	callq  1f44 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    1f44:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    1f47:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f4e:	48 89 c7             	mov    %rax,%rdi
    1f51:	e8 00 00 00 00       	callq  1f56 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    1f56:	eb 77                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1f58:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    1f5b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f5f:	48 89 c7             	mov    %rax,%rdi
    1f62:	e8 00 00 00 00       	callq  1f67 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    1f67:	eb 03                	jmp    1f6c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    1f69:	48 89 c3             	mov    %rax,%rbx
    1f6c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f73:	48 89 c7             	mov    %rax,%rdi
    1f76:	e8 00 00 00 00       	callq  1f7b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    1f7b:	eb 52                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1f7d:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1f80:	84 db                	test   %bl,%bl
    1f82:	74 0f                	je     1f93 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    1f84:	90                   	nop
    1f85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1f89:	48 89 c7             	mov    %rax,%rdi
    1f8c:	e8 00 00 00 00       	callq  1f91 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    1f91:	eb 01                	jmp    1f94 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    1f93:	90                   	nop
    1f94:	4c 89 e3             	mov    %r12,%rbx
    1f97:	eb 36                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1f99:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    1f9c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1fa0:	48 89 c7             	mov    %rax,%rdi
    1fa3:	e8 00 00 00 00       	callq  1fa8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    1fa8:	eb 25                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1faa:	48 89 c3             	mov    %rax,%rbx
    1fad:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1fb1:	48 89 c7             	mov    %rax,%rdi
    1fb4:	e8 00 00 00 00       	callq  1fb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    1fb9:	eb 14                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1fbb:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    1fbe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1fc2:	48 89 c7             	mov    %rax,%rdi
    1fc5:	e8 00 00 00 00       	callq  1fca <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    1fca:	eb 03                	jmp    1fcf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1fcc:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    1fcf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1fd6:	48 89 c7             	mov    %rax,%rdi
    1fd9:	e8 00 00 00 00       	callq  1fde <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    1fde:	48 89 d8             	mov    %rbx,%rax
    1fe1:	48 89 c7             	mov    %rax,%rdi
    1fe4:	e8 00 00 00 00       	callq  1fe9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    1fe9:	e8 00 00 00 00       	callq  1fee <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    1fee:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    1ff5:	5b                   	pop    %rbx
    1ff6:	41 5c                	pop    %r12
    1ff8:	41 5d                	pop    %r13
    1ffa:	5d                   	pop    %rbp
    1ffb:	c3                   	retq   

0000000000001ffc <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    1ffc:	55                   	push   %rbp
    1ffd:	48 89 e5             	mov    %rsp,%rbp
    2000:	53                   	push   %rbx
    2001:	48 83 ec 68          	sub    $0x68,%rsp
    2005:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    2009:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    200d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    2011:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2018:	00 00 
    201a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    201e:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    2020:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2024:	48 89 c7             	mov    %rax,%rdi
    2027:	e8 00 00 00 00       	callq  202c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    202c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2030:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2034:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2038:	48 89 d6             	mov    %rdx,%rsi
    203b:	48 89 c7             	mov    %rax,%rdi
    203e:	e8 00 00 00 00       	callq  2043 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    2043:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2047:	48 89 c7             	mov    %rax,%rdi
    204a:	e8 00 00 00 00       	callq  204f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    204f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2053:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2057:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    205b:	48 89 d6             	mov    %rdx,%rsi
    205e:	48 89 c7             	mov    %rax,%rdi
    2061:	e8 00 00 00 00       	callq  2066 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    2066:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    206a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    206e:	48 89 d6             	mov    %rdx,%rsi
    2071:	48 89 c7             	mov    %rax,%rdi
    2074:	e8 00 00 00 00       	callq  2079 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    2079:	84 c0                	test   %al,%al
    207b:	0f 84 d7 00 00 00    	je     2158 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    2081:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2085:	48 89 c7             	mov    %rax,%rdi
    2088:	e8 00 00 00 00       	callq  208d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    208d:	8b 08                	mov    (%rax),%ecx
    208f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2093:	ba 0a 00 00 00       	mov    $0xa,%edx
    2098:	89 ce                	mov    %ecx,%esi
    209a:	48 89 c7             	mov    %rax,%rdi
    209d:	e8 00 00 00 00       	callq  20a2 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    20a2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20a6:	48 89 c7             	mov    %rax,%rdi
    20a9:	e8 00 00 00 00       	callq  20ae <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    20ae:	48 89 c2             	mov    %rax,%rdx
    20b1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20bc <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    20bc:	48 89 c7             	mov    %rax,%rdi
    20bf:	e8 00 00 00 00       	callq  20c4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    20c4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    20c8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    20cc:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 20d3 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    20d3:	48 89 ce             	mov    %rcx,%rsi
    20d6:	48 89 c7             	mov    %rax,%rdi
    20d9:	e8 00 00 00 00       	callq  20de <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    20de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    20e2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    20e6:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    20ea:	48 89 ce             	mov    %rcx,%rsi
    20ed:	48 89 c7             	mov    %rax,%rdi
    20f0:	e8 00 00 00 00       	callq  20f5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    20f5:	90                   	nop
    20f6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    20fa:	48 89 c7             	mov    %rax,%rdi
    20fd:	e8 00 00 00 00       	callq  2102 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    2102:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2106:	48 89 c7             	mov    %rax,%rdi
    2109:	e8 00 00 00 00       	callq  210e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    210e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2112:	48 89 c7             	mov    %rax,%rdi
    2115:	e8 00 00 00 00       	callq  211a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    211a:	eb 3d                	jmp    2159 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    211c:	48 89 c3             	mov    %rax,%rbx
    211f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2123:	48 89 c7             	mov    %rax,%rdi
    2126:	e8 00 00 00 00       	callq  212b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    212b:	eb 03                	jmp    2130 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    212d:	48 89 c3             	mov    %rax,%rbx
    2130:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2134:	48 89 c7             	mov    %rax,%rdi
    2137:	e8 00 00 00 00       	callq  213c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    213c:	eb 03                	jmp    2141 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    213e:	48 89 c3             	mov    %rax,%rbx
    2141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2145:	48 89 c7             	mov    %rax,%rdi
    2148:	e8 00 00 00 00       	callq  214d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    214d:	48 89 d8             	mov    %rbx,%rax
    2150:	48 89 c7             	mov    %rax,%rdi
    2153:	e8 00 00 00 00       	callq  2158 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    2158:	90                   	nop
    2159:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    215d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2161:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2168:	00 00 
    216a:	74 05                	je     2171 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    216c:	e8 00 00 00 00       	callq  2171 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    2171:	48 83 c4 68          	add    $0x68,%rsp
    2175:	5b                   	pop    %rbx
    2176:	5d                   	pop    %rbp
    2177:	c3                   	retq   

0000000000002178 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    2178:	55                   	push   %rbp
    2179:	48 89 e5             	mov    %rsp,%rbp
    217c:	53                   	push   %rbx
    217d:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    2184:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    2188:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    218c:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    2193:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    219a:	00 00 
    219c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    21a0:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    21a2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    21a6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21aa:	48 89 d6             	mov    %rdx,%rsi
    21ad:	48 89 c7             	mov    %rax,%rdi
    21b0:	e8 00 00 00 00       	callq  21b5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    21b5:	be 10 00 00 00       	mov    $0x10,%esi
    21ba:	bf 01 00 00 00       	mov    $0x1,%edi
    21bf:	e8 00 00 00 00       	callq  21c4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    21c4:	89 c2                	mov    %eax,%edx
    21c6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21ca:	89 d6                	mov    %edx,%esi
    21cc:	48 89 c7             	mov    %rax,%rdi
    21cf:	e8 00 00 00 00       	callq  21d4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    21d4:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    21d8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21dc:	48 89 d6             	mov    %rdx,%rsi
    21df:	48 89 c7             	mov    %rax,%rdi
    21e2:	e8 00 00 00 00       	callq  21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    21e7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21eb:	48 89 c7             	mov    %rax,%rdi
    21ee:	e8 00 00 00 00       	callq  21f3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    21f3:	83 f0 01             	xor    $0x1,%eax
    21f6:	84 c0                	test   %al,%al
    21f8:	74 1a                	je     2214 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    21fa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21fe:	48 89 c7             	mov    %rax,%rdi
    2201:	e8 00 00 00 00       	callq  2206 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    2206:	83 f0 01             	xor    $0x1,%eax
    2209:	84 c0                	test   %al,%al
    220b:	74 07                	je     2214 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    220d:	b8 01 00 00 00       	mov    $0x1,%eax
    2212:	eb 05                	jmp    2219 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    2214:	b8 00 00 00 00       	mov    $0x0,%eax
    2219:	84 c0                	test   %al,%al
    221b:	0f 84 cb 00 00 00    	je     22ec <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    2221:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2225:	48 89 c7             	mov    %rax,%rdi
    2228:	e8 00 00 00 00       	callq  222d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    222d:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    2230:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    2234:	0f 84 a6 00 00 00    	je     22e0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    223a:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    223e:	75 a7                	jne    21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    2240:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2244:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2248:	48 89 d6             	mov    %rdx,%rsi
    224b:	48 89 c7             	mov    %rax,%rdi
    224e:	e8 00 00 00 00       	callq  2253 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    2253:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2257:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 225e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    225e:	48 89 c7             	mov    %rax,%rdi
    2261:	e8 00 00 00 00       	callq  2266 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    2266:	89 c3                	mov    %eax,%ebx
    2268:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    226c:	48 89 c7             	mov    %rax,%rdi
    226f:	e8 00 00 00 00       	callq  2274 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    2274:	84 db                	test   %bl,%bl
    2276:	75 6e                	jne    22e6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    2278:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    227c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2280:	48 89 d6             	mov    %rdx,%rsi
    2283:	48 89 c7             	mov    %rax,%rdi
    2286:	e8 00 00 00 00       	callq  228b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    228b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    228f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2296 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    2296:	48 89 c7             	mov    %rax,%rdi
    2299:	e8 00 00 00 00       	callq  229e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    229e:	89 c3                	mov    %eax,%ebx
    22a0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    22a4:	48 89 c7             	mov    %rax,%rdi
    22a7:	e8 00 00 00 00       	callq  22ac <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    22ac:	84 db                	test   %bl,%bl
    22ae:	0f 84 33 ff ff ff    	je     21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    22b4:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    22bb:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    22bf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    22c3:	48 89 ce             	mov    %rcx,%rsi
    22c6:	48 89 c7             	mov    %rax,%rdi
    22c9:	e8 00 00 00 00       	callq  22ce <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    22ce:	83 f0 01             	xor    $0x1,%eax
    22d1:	84 c0                	test   %al,%al
    22d3:	0f 84 0e ff ff ff    	je     21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    22d9:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    22de:	eb 11                	jmp    22f1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    22e0:	90                   	nop
    22e1:	e9 01 ff ff ff       	jmpq   21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    22e6:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    22e7:	e9 fb fe ff ff       	jmpq   21e7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    22ec:	bb 01 00 00 00       	mov    $0x1,%ebx
    22f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    22f5:	48 89 c7             	mov    %rax,%rdi
    22f8:	e8 00 00 00 00       	callq  22fd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    22fd:	83 fb 01             	cmp    $0x1,%ebx
    2300:	74 07                	je     2309 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    2302:	bb 00 00 00 00       	mov    $0x0,%ebx
    2307:	eb 06                	jmp    230f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2309:	90                   	nop
    230a:	bb 01 00 00 00       	mov    $0x1,%ebx
    230f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2313:	48 89 c7             	mov    %rax,%rdi
    2316:	e8 00 00 00 00       	callq  231b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    231b:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    231e:	90                   	nop
                    return;
                }
            }
        }
    }
}
    231f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2323:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    232a:	00 00 
    232c:	74 54                	je     2382 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    232e:	eb 4d                	jmp    237d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    2330:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    2333:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2337:	48 89 c7             	mov    %rax,%rdi
    233a:	e8 00 00 00 00       	callq  233f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    233f:	eb 14                	jmp    2355 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    2341:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    2344:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2348:	48 89 c7             	mov    %rax,%rdi
    234b:	e8 00 00 00 00       	callq  2350 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    2350:	eb 03                	jmp    2355 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    2352:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2355:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2359:	48 89 c7             	mov    %rax,%rdi
    235c:	e8 00 00 00 00       	callq  2361 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    2361:	eb 03                	jmp    2366 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    2363:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    2366:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    236a:	48 89 c7             	mov    %rax,%rdi
    236d:	e8 00 00 00 00       	callq  2372 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    2372:	48 89 d8             	mov    %rbx,%rax
    2375:	48 89 c7             	mov    %rax,%rdi
    2378:	e8 00 00 00 00       	callq  237d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    237d:	e8 00 00 00 00       	callq  2382 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    2382:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    2389:	5b                   	pop    %rbx
    238a:	5d                   	pop    %rbp
    238b:	c3                   	retq   

000000000000238c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    238c:	55                   	push   %rbp
    238d:	48 89 e5             	mov    %rsp,%rbp
    2390:	53                   	push   %rbx
    2391:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    2398:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    239f:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    23a6:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    23ad:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    23b3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    23ba:	00 00 
    23bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    23c0:	31 c0                	xor    %eax,%eax


    QString str = Block;
    23c2:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    23c9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    23d0:	48 89 d6             	mov    %rdx,%rsi
    23d3:	48 89 c7             	mov    %rax,%rdi
    23d6:	e8 00 00 00 00       	callq  23db <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    23db:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    23e2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    23e9:	48 89 d6             	mov    %rdx,%rsi
    23ec:	48 89 c7             	mov    %rax,%rdi
    23ef:	e8 00 00 00 00       	callq  23f4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    23f4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    23fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2402 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    2402:	48 89 c7             	mov    %rax,%rdi
    2405:	e8 00 00 00 00       	callq  240a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    240a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    2411:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2418:	b9 00 00 00 00       	mov    $0x0,%ecx
    241d:	ba 01 00 00 00       	mov    $0x1,%edx
    2422:	48 89 c7             	mov    %rax,%rdi
    2425:	e8 00 00 00 00       	callq  242a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    242a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2431:	48 89 c7             	mov    %rax,%rdi
    2434:	e8 00 00 00 00       	callq  2439 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    2439:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2440:	be 01 00 00 00       	mov    $0x1,%esi
    2445:	48 89 c7             	mov    %rax,%rdi
    2448:	e8 00 00 00 00       	callq  244d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    244d:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    2454:	48 89 c7             	mov    %rax,%rdi
    2457:	e8 00 00 00 00       	callq  245c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    245c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2463:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 246a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    246a:	48 89 c7             	mov    %rax,%rdi
    246d:	e8 00 00 00 00       	callq  2472 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    2472:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    2479:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2480:	b9 00 00 00 00       	mov    $0x0,%ecx
    2485:	ba 01 00 00 00       	mov    $0x1,%edx
    248a:	48 89 c7             	mov    %rax,%rdi
    248d:	e8 00 00 00 00       	callq  2492 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    2492:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2499:	48 89 c7             	mov    %rax,%rdi
    249c:	e8 00 00 00 00       	callq  24a1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    24a1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    24a8:	48 89 c7             	mov    %rax,%rdi
    24ab:	e8 00 00 00 00       	callq  24b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    24b0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    24b7:	48 89 c7             	mov    %rax,%rdi
    24ba:	e8 00 00 00 00       	callq  24bf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    24bf:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    24c6:	48 89 c7             	mov    %rax,%rdi
    24c9:	e8 00 00 00 00       	callq  24ce <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    24ce:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    24d5:	48 89 c7             	mov    %rax,%rdi
    24d8:	e8 00 00 00 00       	callq  24dd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    24dd:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    24e4:	00 00 00 
    int lineInner = 0;
    24e7:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    24ee:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    24f1:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    24f8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    24ff:	b9 00 00 00 00       	mov    $0x0,%ecx
    2504:	ba 00 00 00 00       	mov    $0x0,%edx
    2509:	48 89 c7             	mov    %rax,%rdi
    250c:	e8 00 00 00 00       	callq  2511 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    2511:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    2517:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    251e:	0f 88 35 03 00 00    	js     2859 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    2524:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    252a:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2530:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2533:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    253a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    253e:	48 89 d6             	mov    %rdx,%rsi
    2541:	48 89 c7             	mov    %rax,%rdi
    2544:	e8 00 00 00 00       	callq  2549 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    2549:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    254d:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    2554:	89 da                	mov    %ebx,%edx
    2556:	48 89 ce             	mov    %rcx,%rsi
    2559:	48 89 c7             	mov    %rax,%rdi
    255c:	e8 00 00 00 00       	callq  2561 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    2561:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    2567:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    256b:	48 89 c7             	mov    %rax,%rdi
    256e:	e8 00 00 00 00       	callq  2573 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    2573:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    257a:	75 0c                	jne    2588 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    257c:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2582:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    2588:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    258c:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2593:	ba 00 00 00 00       	mov    $0x0,%edx
    2598:	48 89 ce             	mov    %rcx,%rsi
    259b:	48 89 c7             	mov    %rax,%rdi
    259e:	e8 00 00 00 00       	callq  25a3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    25a3:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    25a7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    25ae:	48 89 d6             	mov    %rdx,%rsi
    25b1:	48 89 c7             	mov    %rax,%rdi
    25b4:	e8 00 00 00 00       	callq  25b9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    25b9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    25bd:	48 89 c7             	mov    %rax,%rdi
    25c0:	e8 00 00 00 00       	callq  25c5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    25c5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    25cc:	48 89 c7             	mov    %rax,%rdi
    25cf:	e8 00 00 00 00       	callq  25d4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    25d4:	89 c3                	mov    %eax,%ebx
    25d6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    25dd:	48 89 c7             	mov    %rax,%rdi
    25e0:	e8 00 00 00 00       	callq  25e5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    25e5:	89 da                	mov    %ebx,%edx
    25e7:	29 c2                	sub    %eax,%edx
    25e9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25ed:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    25f4:	48 89 ce             	mov    %rcx,%rsi
    25f7:	48 89 c7             	mov    %rax,%rdi
    25fa:	e8 00 00 00 00       	callq  25ff <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    25ff:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2603:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    260a:	48 89 d6             	mov    %rdx,%rsi
    260d:	48 89 c7             	mov    %rax,%rdi
    2610:	e8 00 00 00 00       	callq  2615 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    2615:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2619:	48 89 c7             	mov    %rax,%rdi
    261c:	e8 00 00 00 00       	callq  2621 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    2621:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2628:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    262f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2634:	ba 00 00 00 00       	mov    $0x0,%edx
    2639:	48 89 c7             	mov    %rax,%rdi
    263c:	e8 00 00 00 00       	callq  2641 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    2641:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2645:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    264c:	ba 00 00 00 00       	mov    $0x0,%edx
    2651:	48 89 ce             	mov    %rcx,%rsi
    2654:	48 89 c7             	mov    %rax,%rdi
    2657:	e8 00 00 00 00       	callq  265c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    265c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2660:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2667:	48 89 d6             	mov    %rdx,%rsi
    266a:	48 89 c7             	mov    %rax,%rdi
    266d:	e8 00 00 00 00       	callq  2672 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    2672:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2676:	48 89 c7             	mov    %rax,%rdi
    2679:	e8 00 00 00 00       	callq  267e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    267e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2682:	be 7b 00 00 00       	mov    $0x7b,%esi
    2687:	48 89 c7             	mov    %rax,%rdi
    268a:	e8 00 00 00 00       	callq  268f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    268f:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2695:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    2699:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    26a0:	b9 01 00 00 00       	mov    $0x1,%ecx
    26a5:	48 89 c7             	mov    %rax,%rdi
    26a8:	e8 00 00 00 00       	callq  26ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    26ad:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    26b3:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    26b9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    26c0:	89 d6                	mov    %edx,%esi
    26c2:	48 89 c7             	mov    %rax,%rdi
    26c5:	e8 00 00 00 00       	callq  26ca <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    26ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    26ce:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    26d2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    26d6:	48 89 c7             	mov    %rax,%rdi
    26d9:	e8 00 00 00 00       	callq  26de <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    26de:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    26e5:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    26ec:	00 00 00 
        int br=0;
    26ef:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    26f6:	00 00 00 

        while(bl != br)
    26f9:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    26ff:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    2705:	0f 84 a2 00 00 00    	je     27ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    270b:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    2712:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2718:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    271f:	89 d6                	mov    %edx,%esi
    2721:	48 89 c7             	mov    %rax,%rdi
    2724:	e8 00 00 00 00       	callq  2729 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    2729:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    272d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2731:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2735:	48 89 c7             	mov    %rax,%rdi
    2738:	e8 00 00 00 00       	callq  273d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    273d:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    2744:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2748:	be 7b 00 00 00       	mov    $0x7b,%esi
    274d:	48 89 c7             	mov    %rax,%rdi
    2750:	e8 00 00 00 00       	callq  2755 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    2755:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2759:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    2760:	89 d6                	mov    %edx,%esi
    2762:	89 c7                	mov    %eax,%edi
    2764:	e8 00 00 00 00       	callq  2769 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    2769:	84 c0                	test   %al,%al
    276b:	74 07                	je     2774 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    276d:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    2774:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2778:	be 7d 00 00 00       	mov    $0x7d,%esi
    277d:	48 89 c7             	mov    %rax,%rdi
    2780:	e8 00 00 00 00       	callq  2785 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    2785:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2789:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    2790:	89 d6                	mov    %edx,%esi
    2792:	89 c7                	mov    %eax,%edi
    2794:	e8 00 00 00 00       	callq  2799 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    2799:	84 c0                	test   %al,%al
    279b:	0f 84 58 ff ff ff    	je     26f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    27a1:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    27a8:	e9 4c ff ff ff       	jmpq   26f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    27ad:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    27b3:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    27b9:	89 c1                	mov    %eax,%ecx
    27bb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    27bf:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    27c5:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    27cc:	48 89 c7             	mov    %rax,%rdi
    27cf:	e8 00 00 00 00       	callq  27d4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    27d4:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    27d8:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    27df:	48 89 d6             	mov    %rdx,%rsi
    27e2:	48 89 c7             	mov    %rax,%rdi
    27e5:	e8 00 00 00 00       	callq  27ea <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    27ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    27ee:	48 89 c7             	mov    %rax,%rdi
    27f1:	e8 00 00 00 00       	callq  27f6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    27f6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    27fd:	48 89 c7             	mov    %rax,%rdi
    2800:	e8 00 00 00 00       	callq  2805 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2805:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    280b:	89 c2                	mov    %eax,%edx
    280d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2811:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2818:	48 89 ce             	mov    %rcx,%rsi
    281b:	48 89 c7             	mov    %rax,%rdi
    281e:	e8 00 00 00 00       	callq  2823 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2823:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2827:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    282e:	48 89 d6             	mov    %rdx,%rsi
    2831:	48 89 c7             	mov    %rax,%rdi
    2834:	e8 00 00 00 00       	callq  2839 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2839:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    283d:	48 89 c7             	mov    %rax,%rdi
    2840:	e8 00 00 00 00       	callq  2845 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2845:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    284b:	83 c0 01             	add    $0x1,%eax
    284e:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2854:	e9 98 fc ff ff       	jmpq   24f1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2859:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    285a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2861:	48 89 c7             	mov    %rax,%rdi
    2864:	e8 00 00 00 00       	callq  2869 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2869:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2870:	48 89 c7             	mov    %rax,%rdi
    2873:	e8 00 00 00 00       	callq  2878 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2878:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    287f:	48 89 c7             	mov    %rax,%rdi
    2882:	e8 00 00 00 00       	callq  2887 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2887:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    288e:	48 89 c7             	mov    %rax,%rdi
    2891:	e8 00 00 00 00       	callq  2896 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2896:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    289d:	48 89 c7             	mov    %rax,%rdi
    28a0:	e8 00 00 00 00       	callq  28a5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    28a5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    28ac:	48 89 c7             	mov    %rax,%rdi
    28af:	e8 00 00 00 00       	callq  28b4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    28b4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    28bb:	48 89 c7             	mov    %rax,%rdi
    28be:	e8 00 00 00 00       	callq  28c3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    28c3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    28ca:	48 89 c7             	mov    %rax,%rdi
    28cd:	e8 00 00 00 00       	callq  28d2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    28d2:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    28d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    28d7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    28de:	00 00 
    28e0:	0f 84 75 01 00 00    	je     2a5b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    28e6:	e9 6b 01 00 00       	jmpq   2a56 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    28eb:	48 89 c3             	mov    %rax,%rbx
    28ee:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    28f5:	48 89 c7             	mov    %rax,%rdi
    28f8:	e8 00 00 00 00       	callq  28fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    28fd:	e9 26 01 00 00       	jmpq   2a28 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2902:	48 89 c3             	mov    %rax,%rbx
    2905:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    290c:	48 89 c7             	mov    %rax,%rdi
    290f:	e8 00 00 00 00       	callq  2914 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2914:	e9 0f 01 00 00       	jmpq   2a28 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2919:	48 89 c3             	mov    %rax,%rbx
    291c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2923:	48 89 c7             	mov    %rax,%rdi
    2926:	e8 00 00 00 00       	callq  292b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    292b:	e9 e4 00 00 00       	jmpq   2a14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2930:	48 89 c3             	mov    %rax,%rbx
    2933:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    293a:	48 89 c7             	mov    %rax,%rdi
    293d:	e8 00 00 00 00       	callq  2942 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2942:	e9 cd 00 00 00       	jmpq   2a14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2947:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    294a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    294e:	48 89 c7             	mov    %rax,%rdi
    2951:	e8 00 00 00 00       	callq  2956 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2956:	eb 58                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2958:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    295b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    295f:	48 89 c7             	mov    %rax,%rdi
    2962:	e8 00 00 00 00       	callq  2967 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2967:	eb 47                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2969:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    296c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2970:	48 89 c7             	mov    %rax,%rdi
    2973:	e8 00 00 00 00       	callq  2978 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2978:	eb 36                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    297a:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    297d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2981:	48 89 c7             	mov    %rax,%rdi
    2984:	e8 00 00 00 00       	callq  2989 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2989:	eb 25                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    298b:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    298e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2992:	48 89 c7             	mov    %rax,%rdi
    2995:	e8 00 00 00 00       	callq  299a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    299a:	eb 14                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    299c:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    299f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29a3:	48 89 c7             	mov    %rax,%rdi
    29a6:	e8 00 00 00 00       	callq  29ab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    29ab:	eb 03                	jmp    29b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    29ad:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    29b0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    29b7:	48 89 c7             	mov    %rax,%rdi
    29ba:	e8 00 00 00 00       	callq  29bf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    29bf:	eb 03                	jmp    29c4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    29c1:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    29c4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    29cb:	48 89 c7             	mov    %rax,%rdi
    29ce:	e8 00 00 00 00       	callq  29d3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    29d3:	eb 03                	jmp    29d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    29d5:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    29d8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    29df:	48 89 c7             	mov    %rax,%rdi
    29e2:	e8 00 00 00 00       	callq  29e7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    29e7:	eb 03                	jmp    29ec <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    29e9:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    29ec:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    29f3:	48 89 c7             	mov    %rax,%rdi
    29f6:	e8 00 00 00 00       	callq  29fb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    29fb:	eb 03                	jmp    2a00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    29fd:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2a00:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2a07:	48 89 c7             	mov    %rax,%rdi
    2a0a:	e8 00 00 00 00       	callq  2a0f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2a0f:	eb 03                	jmp    2a14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2a11:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2a14:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2a1b:	48 89 c7             	mov    %rax,%rdi
    2a1e:	e8 00 00 00 00       	callq  2a23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2a23:	eb 03                	jmp    2a28 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2a25:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2a28:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2a2f:	48 89 c7             	mov    %rax,%rdi
    2a32:	e8 00 00 00 00       	callq  2a37 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2a37:	eb 03                	jmp    2a3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2a39:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2a3c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a43:	48 89 c7             	mov    %rax,%rdi
    2a46:	e8 00 00 00 00       	callq  2a4b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2a4b:	48 89 d8             	mov    %rbx,%rax
    2a4e:	48 89 c7             	mov    %rax,%rdi
    2a51:	e8 00 00 00 00       	callq  2a56 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2a56:	e8 00 00 00 00       	callq  2a5b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2a5b:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2a62:	5b                   	pop    %rbx
    2a63:	5d                   	pop    %rbp
    2a64:	c3                   	retq   
    2a65:	90                   	nop

0000000000002a66 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2a66:	55                   	push   %rbp
    2a67:	48 89 e5             	mov    %rsp,%rbp
    2a6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2a6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2a72:	90                   	nop
    2a73:	5d                   	pop    %rbp
    2a74:	c3                   	retq   
    2a75:	90                   	nop

0000000000002a76 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2a76:	55                   	push   %rbp
    2a77:	48 89 e5             	mov    %rsp,%rbp
    2a7a:	53                   	push   %rbx
    2a7b:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2a82:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2a89:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2a90:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2a97:	00 00 
    2a99:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2a9d:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2a9f:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2aa6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2aad:	48 89 d6             	mov    %rdx,%rsi
    2ab0:	48 89 c7             	mov    %rax,%rdi
    2ab3:	e8 00 00 00 00       	callq  2ab8 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2ab8:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2abf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2ac6:	48 89 d6             	mov    %rdx,%rsi
    2ac9:	48 89 c7             	mov    %rax,%rdi
    2acc:	e8 00 00 00 00       	callq  2ad1 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2ad1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2ad8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2adf <_ZN6Parser11splitBlocksE7QString+0x69>
    2adf:	48 89 c7             	mov    %rax,%rdi
    2ae2:	e8 00 00 00 00       	callq  2ae7 <_ZN6Parser11splitBlocksE7QString+0x71>
    2ae7:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2aee:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2af5:	ba 01 00 00 00       	mov    $0x1,%edx
    2afa:	48 89 ce             	mov    %rcx,%rsi
    2afd:	48 89 c7             	mov    %rax,%rdi
    2b00:	e8 00 00 00 00       	callq  2b05 <_ZN6Parser11splitBlocksE7QString+0x8f>
    2b05:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2b0b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b12:	48 89 c7             	mov    %rax,%rdi
    2b15:	e8 00 00 00 00       	callq  2b1a <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2b1a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b21:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2b28 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2b28:	48 89 c7             	mov    %rax,%rdi
    2b2b:	e8 00 00 00 00       	callq  2b30 <_ZN6Parser11splitBlocksE7QString+0xba>
    2b30:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2b37:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2b3e:	ba 01 00 00 00       	mov    $0x1,%edx
    2b43:	48 89 ce             	mov    %rcx,%rsi
    2b46:	48 89 c7             	mov    %rax,%rdi
    2b49:	e8 00 00 00 00       	callq  2b4e <_ZN6Parser11splitBlocksE7QString+0xd8>
    2b4e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2b54:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b5b:	48 89 c7             	mov    %rax,%rdi
    2b5e:	e8 00 00 00 00       	callq  2b63 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2b63:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b6a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2b71 <_ZN6Parser11splitBlocksE7QString+0xfb>
    2b71:	48 89 c7             	mov    %rax,%rdi
    2b74:	e8 00 00 00 00       	callq  2b79 <_ZN6Parser11splitBlocksE7QString+0x103>
    2b79:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2b80:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2b87:	ba 01 00 00 00       	mov    $0x1,%edx
    2b8c:	48 89 ce             	mov    %rcx,%rsi
    2b8f:	48 89 c7             	mov    %rax,%rdi
    2b92:	e8 00 00 00 00       	callq  2b97 <_ZN6Parser11splitBlocksE7QString+0x121>
    2b97:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2b9d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2ba4:	48 89 c7             	mov    %rax,%rdi
    2ba7:	e8 00 00 00 00       	callq  2bac <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2bac:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2bb3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2bba <_ZN6Parser11splitBlocksE7QString+0x144>
    2bba:	48 89 c7             	mov    %rax,%rdi
    2bbd:	e8 00 00 00 00       	callq  2bc2 <_ZN6Parser11splitBlocksE7QString+0x14c>
    2bc2:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2bc9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2bd0:	ba 01 00 00 00       	mov    $0x1,%edx
    2bd5:	48 89 ce             	mov    %rcx,%rsi
    2bd8:	48 89 c7             	mov    %rax,%rdi
    2bdb:	e8 00 00 00 00       	callq  2be0 <_ZN6Parser11splitBlocksE7QString+0x16a>
    2be0:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2be6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2bed:	48 89 c7             	mov    %rax,%rdi
    2bf0:	e8 00 00 00 00       	callq  2bf5 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2bf5:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2bfb:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2c01:	74 43                	je     2c46 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2c03:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2c0a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2c11 <_ZN6Parser11splitBlocksE7QString+0x19b>
    2c11:	48 89 c7             	mov    %rax,%rdi
    2c14:	e8 00 00 00 00       	callq  2c19 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2c19:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2c20:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2c27:	48 89 d6             	mov    %rdx,%rsi
    2c2a:	48 89 c7             	mov    %rax,%rdi
    2c2d:	e8 00 00 00 00       	callq  2c32 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2c32:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2c39:	48 89 c7             	mov    %rax,%rdi
    2c3c:	e8 00 00 00 00       	callq  2c41 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2c41:	e9 cf 03 00 00       	jmpq   3015 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2c46:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2c4c:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2c52:	74 43                	je     2c97 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2c54:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c5b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2c62 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2c62:	48 89 c7             	mov    %rax,%rdi
    2c65:	e8 00 00 00 00       	callq  2c6a <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2c6a:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2c71:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2c78:	48 89 d6             	mov    %rdx,%rsi
    2c7b:	48 89 c7             	mov    %rax,%rdi
    2c7e:	e8 00 00 00 00       	callq  2c83 <_ZN6Parser11splitBlocksE7QString+0x20d>
    2c83:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c8a:	48 89 c7             	mov    %rax,%rdi
    2c8d:	e8 00 00 00 00       	callq  2c92 <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2c92:	e9 7e 03 00 00       	jmpq   3015 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2c97:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c9e:	48 89 c7             	mov    %rax,%rdi
    2ca1:	e8 00 00 00 00       	callq  2ca6 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2ca6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2cad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2cb4 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2cb4:	48 89 c7             	mov    %rax,%rdi
    2cb7:	e8 00 00 00 00       	callq  2cbc <_ZN6Parser11splitBlocksE7QString+0x246>
    2cbc:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2cc3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2cca:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ccf:	ba 01 00 00 00       	mov    $0x1,%edx
    2cd4:	48 89 c7             	mov    %rax,%rdi
    2cd7:	e8 00 00 00 00       	callq  2cdc <_ZN6Parser11splitBlocksE7QString+0x266>
    2cdc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ce3:	48 89 c7             	mov    %rax,%rdi
    2ce6:	e8 00 00 00 00       	callq  2ceb <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2ceb:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2cf2:	00 00 00 
    QString blockName;
    2cf5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2cf9:	48 89 c7             	mov    %rax,%rdi
    2cfc:	e8 00 00 00 00       	callq  2d01 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2d01:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2d08:	48 89 c7             	mov    %rax,%rdi
    2d0b:	e8 00 00 00 00       	callq  2d10 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2d10:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2d17:	00 00 00 
    int     line     = 0;
    2d1a:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2d21:	00 00 00 
    QString block;
    2d24:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2d28:	48 89 c7             	mov    %rax,%rdi
    2d2b:	e8 00 00 00 00       	callq  2d30 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2d30:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2d37:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2d3e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2d43:	ba 00 00 00 00       	mov    $0x0,%edx
    2d48:	48 89 c7             	mov    %rax,%rdi
    2d4b:	e8 00 00 00 00       	callq  2d50 <_ZN6Parser11splitBlocksE7QString+0x2da>
    2d50:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2d56:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2d5d:	0f 88 7b 02 00 00    	js     2fde <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    2d63:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2d69:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    2d6f:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2d72:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2d79:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2d7d:	48 89 d6             	mov    %rdx,%rsi
    2d80:	48 89 c7             	mov    %rax,%rdi
    2d83:	e8 00 00 00 00       	callq  2d88 <_ZN6Parser11splitBlocksE7QString+0x312>
    2d88:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2d8c:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2d93:	89 da                	mov    %ebx,%edx
    2d95:	48 89 ce             	mov    %rcx,%rsi
    2d98:	48 89 c7             	mov    %rax,%rdi
    2d9b:	e8 00 00 00 00       	callq  2da0 <_ZN6Parser11splitBlocksE7QString+0x32a>
    2da0:	83 c0 01             	add    $0x1,%eax
    2da3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    2da9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2dad:	48 89 c7             	mov    %rax,%rdi
    2db0:	e8 00 00 00 00       	callq  2db5 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    2db5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2db9:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    2dc0:	ba 01 00 00 00       	mov    $0x1,%edx
    2dc5:	48 89 ce             	mov    %rcx,%rsi
    2dc8:	48 89 c7             	mov    %rax,%rdi
    2dcb:	e8 00 00 00 00       	callq  2dd0 <_ZN6Parser11splitBlocksE7QString+0x35a>
    2dd0:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2dd4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2dd8:	48 89 d6             	mov    %rdx,%rsi
    2ddb:	48 89 c7             	mov    %rax,%rdi
    2dde:	e8 00 00 00 00       	callq  2de3 <_ZN6Parser11splitBlocksE7QString+0x36d>
    2de3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2de7:	48 89 c7             	mov    %rax,%rdi
    2dea:	e8 00 00 00 00       	callq  2def <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    2def:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2df3:	be 7b 00 00 00       	mov    $0x7b,%esi
    2df8:	48 89 c7             	mov    %rax,%rdi
    2dfb:	e8 00 00 00 00       	callq  2e00 <_ZN6Parser11splitBlocksE7QString+0x38a>
    2e00:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    2e06:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    2e0a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e11:	b9 01 00 00 00       	mov    $0x1,%ecx
    2e16:	48 89 c7             	mov    %rax,%rdi
    2e19:	e8 00 00 00 00       	callq  2e1e <_ZN6Parser11splitBlocksE7QString+0x3a8>
    2e1e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    2e24:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    2e2a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e31:	89 d6                	mov    %edx,%esi
    2e33:	48 89 c7             	mov    %rax,%rdi
    2e36:	e8 00 00 00 00       	callq  2e3b <_ZN6Parser11splitBlocksE7QString+0x3c5>
    2e3b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2e3f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2e43:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2e47:	48 89 c7             	mov    %rax,%rdi
    2e4a:	e8 00 00 00 00       	callq  2e4f <_ZN6Parser11splitBlocksE7QString+0x3d9>
    2e4f:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    2e56:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    2e5d:	00 00 00 
        int br=0;
    2e60:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    2e67:	00 00 00 

        while(bl != br)
    2e6a:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    2e70:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    2e76:	0f 84 a2 00 00 00    	je     2f1e <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    2e7c:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    2e83:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    2e89:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e90:	89 d6                	mov    %edx,%esi
    2e92:	48 89 c7             	mov    %rax,%rdi
    2e95:	e8 00 00 00 00       	callq  2e9a <_ZN6Parser11splitBlocksE7QString+0x424>
    2e9a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2e9e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2ea2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2ea6:	48 89 c7             	mov    %rax,%rdi
    2ea9:	e8 00 00 00 00       	callq  2eae <_ZN6Parser11splitBlocksE7QString+0x438>
    2eae:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    2eb5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2eb9:	be 7b 00 00 00       	mov    $0x7b,%esi
    2ebe:	48 89 c7             	mov    %rax,%rdi
    2ec1:	e8 00 00 00 00       	callq  2ec6 <_ZN6Parser11splitBlocksE7QString+0x450>
    2ec6:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2eca:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    2ed1:	89 d6                	mov    %edx,%esi
    2ed3:	89 c7                	mov    %eax,%edi
    2ed5:	e8 00 00 00 00       	callq  2eda <_ZN6Parser11splitBlocksE7QString+0x464>
    2eda:	84 c0                	test   %al,%al
    2edc:	74 07                	je     2ee5 <_ZN6Parser11splitBlocksE7QString+0x46f>
    2ede:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    2ee5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2ee9:	be 7d 00 00 00       	mov    $0x7d,%esi
    2eee:	48 89 c7             	mov    %rax,%rdi
    2ef1:	e8 00 00 00 00       	callq  2ef6 <_ZN6Parser11splitBlocksE7QString+0x480>
    2ef6:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2efa:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    2f01:	89 d6                	mov    %edx,%esi
    2f03:	89 c7                	mov    %eax,%edi
    2f05:	e8 00 00 00 00       	callq  2f0a <_ZN6Parser11splitBlocksE7QString+0x494>
    2f0a:	84 c0                	test   %al,%al
    2f0c:	0f 84 58 ff ff ff    	je     2e6a <_ZN6Parser11splitBlocksE7QString+0x3f4>
    2f12:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    2f19:	e9 4c ff ff ff       	jmpq   2e6a <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    2f1e:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    2f24:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    2f2a:	89 c1                	mov    %eax,%ecx
    2f2c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2f30:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    2f36:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2f3d:	48 89 c7             	mov    %rax,%rdi
    2f40:	e8 00 00 00 00       	callq  2f45 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    2f45:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2f49:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2f4d:	48 89 d6             	mov    %rdx,%rsi
    2f50:	48 89 c7             	mov    %rax,%rdi
    2f53:	e8 00 00 00 00       	callq  2f58 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    2f58:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2f5c:	48 89 c7             	mov    %rax,%rdi
    2f5f:	e8 00 00 00 00       	callq  2f64 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    2f64:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2f6b:	48 89 c7             	mov    %rax,%rdi
    2f6e:	e8 00 00 00 00       	callq  2f73 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    2f73:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    2f79:	89 c2                	mov    %eax,%edx
    2f7b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2f7f:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    2f86:	48 89 ce             	mov    %rcx,%rsi
    2f89:	48 89 c7             	mov    %rax,%rdi
    2f8c:	e8 00 00 00 00       	callq  2f91 <_ZN6Parser11splitBlocksE7QString+0x51b>
    2f91:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2f95:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2f9c:	48 89 d6             	mov    %rdx,%rsi
    2f9f:	48 89 c7             	mov    %rax,%rdi
    2fa2:	e8 00 00 00 00       	callq  2fa7 <_ZN6Parser11splitBlocksE7QString+0x531>
    2fa7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2fab:	48 89 c7             	mov    %rax,%rdi
    2fae:	e8 00 00 00 00       	callq  2fb3 <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    2fb3:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    2fb9:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    2fbf:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2fc6:	48 8d 50 70          	lea    0x70(%rax),%rdx
    2fca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2fce:	48 89 c6             	mov    %rax,%rsi
    2fd1:	48 89 d7             	mov    %rdx,%rdi
    2fd4:	e8 00 00 00 00       	callq  2fd9 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    2fd9:	e9 52 fd ff ff       	jmpq   2d30 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    2fde:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    2fdf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2fe3:	48 89 c7             	mov    %rax,%rdi
    2fe6:	e8 00 00 00 00       	callq  2feb <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    2feb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2fef:	48 89 c7             	mov    %rax,%rdi
    2ff2:	e8 00 00 00 00       	callq  2ff7 <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2ff7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2ffe:	48 89 c7             	mov    %rax,%rdi
    3001:	e8 00 00 00 00       	callq  3006 <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    3006:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    300d:	48 89 c7             	mov    %rax,%rdi
    3010:	e8 00 00 00 00       	callq  3015 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    3015:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    301c:	48 89 c7             	mov    %rax,%rdi
    301f:	e8 00 00 00 00       	callq  3024 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3024:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    302b:	48 89 c7             	mov    %rax,%rdi
    302e:	e8 00 00 00 00       	callq  3033 <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    3033:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3037:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    303e:	00 00 
    3040:	0f 84 7e 01 00 00    	je     31c4 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3046:	e9 74 01 00 00       	jmpq   31bf <_ZN6Parser11splitBlocksE7QString+0x749>
    304b:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    304e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3055:	48 89 c7             	mov    %rax,%rdi
    3058:	e8 00 00 00 00       	callq  305d <_ZN6Parser11splitBlocksE7QString+0x5e7>
    305d:	e9 2f 01 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    3062:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    3065:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    306c:	48 89 c7             	mov    %rax,%rdi
    306f:	e8 00 00 00 00       	callq  3074 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    3074:	e9 18 01 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    3079:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    307c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3083:	48 89 c7             	mov    %rax,%rdi
    3086:	e8 00 00 00 00       	callq  308b <_ZN6Parser11splitBlocksE7QString+0x615>
    308b:	e9 01 01 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    3090:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    3093:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    309a:	48 89 c7             	mov    %rax,%rdi
    309d:	e8 00 00 00 00       	callq  30a2 <_ZN6Parser11splitBlocksE7QString+0x62c>
    30a2:	e9 ea 00 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    30a7:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    30aa:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    30b1:	48 89 c7             	mov    %rax,%rdi
    30b4:	e8 00 00 00 00       	callq  30b9 <_ZN6Parser11splitBlocksE7QString+0x643>
    30b9:	e9 d3 00 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    30be:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    30c1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    30c8:	48 89 c7             	mov    %rax,%rdi
    30cb:	e8 00 00 00 00       	callq  30d0 <_ZN6Parser11splitBlocksE7QString+0x65a>
    30d0:	e9 bc 00 00 00       	jmpq   3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    30d5:	48 89 c3             	mov    %rax,%rbx
    30d8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    30df:	48 89 c7             	mov    %rax,%rdi
    30e2:	e8 00 00 00 00       	callq  30e7 <_ZN6Parser11splitBlocksE7QString+0x671>
    30e7:	e9 91 00 00 00       	jmpq   317d <_ZN6Parser11splitBlocksE7QString+0x707>
    30ec:	48 89 c3             	mov    %rax,%rbx
    30ef:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    30f6:	48 89 c7             	mov    %rax,%rdi
    30f9:	e8 00 00 00 00       	callq  30fe <_ZN6Parser11splitBlocksE7QString+0x688>
    30fe:	eb 7d                	jmp    317d <_ZN6Parser11splitBlocksE7QString+0x707>
    3100:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    3103:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3107:	48 89 c7             	mov    %rax,%rdi
    310a:	e8 00 00 00 00       	callq  310f <_ZN6Parser11splitBlocksE7QString+0x699>
    310f:	eb 36                	jmp    3147 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3111:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    3114:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3118:	48 89 c7             	mov    %rax,%rdi
    311b:	e8 00 00 00 00       	callq  3120 <_ZN6Parser11splitBlocksE7QString+0x6aa>
    3120:	eb 25                	jmp    3147 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3122:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3125:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3129:	48 89 c7             	mov    %rax,%rdi
    312c:	e8 00 00 00 00       	callq  3131 <_ZN6Parser11splitBlocksE7QString+0x6bb>
    3131:	eb 14                	jmp    3147 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3133:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    3136:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    313a:	48 89 c7             	mov    %rax,%rdi
    313d:	e8 00 00 00 00       	callq  3142 <_ZN6Parser11splitBlocksE7QString+0x6cc>
    3142:	eb 03                	jmp    3147 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3144:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3147:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    314b:	48 89 c7             	mov    %rax,%rdi
    314e:	e8 00 00 00 00       	callq  3153 <_ZN6Parser11splitBlocksE7QString+0x6dd>
    3153:	eb 03                	jmp    3158 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    3155:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3158:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    315c:	48 89 c7             	mov    %rax,%rdi
    315f:	e8 00 00 00 00       	callq  3164 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    3164:	eb 03                	jmp    3169 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    3166:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3169:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3170:	48 89 c7             	mov    %rax,%rdi
    3173:	e8 00 00 00 00       	callq  3178 <_ZN6Parser11splitBlocksE7QString+0x702>
    3178:	eb 03                	jmp    317d <_ZN6Parser11splitBlocksE7QString+0x707>
    317a:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    317d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3184:	48 89 c7             	mov    %rax,%rdi
    3187:	e8 00 00 00 00       	callq  318c <_ZN6Parser11splitBlocksE7QString+0x716>
    318c:	eb 03                	jmp    3191 <_ZN6Parser11splitBlocksE7QString+0x71b>
    318e:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    3191:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3198:	48 89 c7             	mov    %rax,%rdi
    319b:	e8 00 00 00 00       	callq  31a0 <_ZN6Parser11splitBlocksE7QString+0x72a>
    31a0:	eb 03                	jmp    31a5 <_ZN6Parser11splitBlocksE7QString+0x72f>
    31a2:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    31a5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31ac:	48 89 c7             	mov    %rax,%rdi
    31af:	e8 00 00 00 00       	callq  31b4 <_ZN6Parser11splitBlocksE7QString+0x73e>
    31b4:	48 89 d8             	mov    %rbx,%rax
    31b7:	48 89 c7             	mov    %rax,%rdi
    31ba:	e8 00 00 00 00       	callq  31bf <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    31bf:	e8 00 00 00 00       	callq  31c4 <_ZN6Parser11splitBlocksE7QString+0x74e>
    31c4:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    31cb:	5b                   	pop    %rbx
    31cc:	5d                   	pop    %rbp
    31cd:	c3                   	retq   

00000000000031ce <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    31ce:	55                   	push   %rbp
    31cf:	48 89 e5             	mov    %rsp,%rbp
    31d2:	53                   	push   %rbx
    31d3:	48 83 ec 48          	sub    $0x48,%rsp
    31d7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    31db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    31e2:	00 00 
    31e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    31e8:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    31ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31ee:	48 89 c7             	mov    %rax,%rdi
    31f1:	e8 00 00 00 00       	callq  31f6 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    31f6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31fa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3201 <_ZN6Parser10globalSemsEv+0x33>
    3201:	48 89 c7             	mov    %rax,%rdi
    3204:	e8 00 00 00 00       	callq  3209 <_ZN6Parser10globalSemsEv+0x3b>
    3209:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    320d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    3211:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3215:	48 89 ce             	mov    %rcx,%rsi
    3218:	48 89 c7             	mov    %rax,%rdi
    321b:	e8 00 00 00 00       	callq  3220 <_ZN6Parser10globalSemsEv+0x52>
    3220:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3224:	48 89 c7             	mov    %rax,%rdi
    3227:	e8 00 00 00 00       	callq  322c <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    322c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3230:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3234:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    3238:	48 89 ce             	mov    %rcx,%rsi
    323b:	48 89 c7             	mov    %rax,%rdi
    323e:	e8 00 00 00 00       	callq  3243 <_ZN6Parser10globalSemsEv+0x75>
    3243:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3247:	48 89 c7             	mov    %rax,%rdi
    324a:	e8 00 00 00 00       	callq  324f <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    324f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3253:	48 89 c7             	mov    %rax,%rdi
    3256:	e8 00 00 00 00       	callq  325b <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    325b:	90                   	nop
    325c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3260:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3267:	00 00 
    3269:	74 32                	je     329d <_ZN6Parser10globalSemsEv+0xcf>
    326b:	eb 2b                	jmp    3298 <_ZN6Parser10globalSemsEv+0xca>
    326d:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    3270:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3274:	48 89 c7             	mov    %rax,%rdi
    3277:	e8 00 00 00 00       	callq  327c <_ZN6Parser10globalSemsEv+0xae>
    327c:	eb 03                	jmp    3281 <_ZN6Parser10globalSemsEv+0xb3>
    327e:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    3281:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3285:	48 89 c7             	mov    %rax,%rdi
    3288:	e8 00 00 00 00       	callq  328d <_ZN6Parser10globalSemsEv+0xbf>
    328d:	48 89 d8             	mov    %rbx,%rax
    3290:	48 89 c7             	mov    %rax,%rdi
    3293:	e8 00 00 00 00       	callq  3298 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    3298:	e8 00 00 00 00       	callq  329d <_ZN6Parser10globalSemsEv+0xcf>
    329d:	48 83 c4 48          	add    $0x48,%rsp
    32a1:	5b                   	pop    %rbx
    32a2:	5d                   	pop    %rbp
    32a3:	c3                   	retq   

00000000000032a4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    32a4:	55                   	push   %rbp
    32a5:	48 89 e5             	mov    %rsp,%rbp
    32a8:	53                   	push   %rbx
    32a9:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    32b0:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    32b7:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    32be:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    32c4:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    32cb:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    32d2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    32d9:	00 00 
    32db:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    32df:	31 c0                	xor    %eax,%eax
        QByteArray result;
    32e1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    32e8:	48 89 c7             	mov    %rax,%rdi
    32eb:	e8 00 00 00 00       	callq  32f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    32f0:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    32f6:	0f be d0             	movsbl %al,%edx
    32f9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3300:	89 d6                	mov    %edx,%esi
    3302:	48 89 c7             	mov    %rax,%rdi
    3305:	e8 00 00 00 00       	callq  330a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    330a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3311:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3318 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    3318:	48 89 c7             	mov    %rax,%rdi
    331b:	e8 00 00 00 00       	callq  3320 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    3320:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3327:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 332e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    332e:	48 89 c7             	mov    %rax,%rdi
    3331:	e8 00 00 00 00       	callq  3336 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    3336:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    333d:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    3344:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    334b:	b9 01 00 00 00       	mov    $0x1,%ecx
    3350:	48 89 c7             	mov    %rax,%rdi
    3353:	e8 00 00 00 00       	callq  3358 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    3358:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    335f:	48 89 c7             	mov    %rax,%rdi
    3362:	e8 00 00 00 00       	callq  3367 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    3367:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    336e:	48 89 c7             	mov    %rax,%rdi
    3371:	e8 00 00 00 00       	callq  3376 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    3376:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    337d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3384 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    3384:	48 89 c7             	mov    %rax,%rdi
    3387:	e8 00 00 00 00       	callq  338c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    338c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3393:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 339a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    339a:	48 89 c7             	mov    %rax,%rdi
    339d:	e8 00 00 00 00       	callq  33a2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    33a2:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    33a9:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    33b0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    33b7:	b9 01 00 00 00       	mov    $0x1,%ecx
    33bc:	48 89 c7             	mov    %rax,%rdi
    33bf:	e8 00 00 00 00       	callq  33c4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    33c4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    33cb:	48 89 c7             	mov    %rax,%rdi
    33ce:	e8 00 00 00 00       	callq  33d3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    33d3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    33da:	48 89 c7             	mov    %rax,%rdi
    33dd:	e8 00 00 00 00       	callq  33e2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    33e2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    33e9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 33f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    33f0:	48 89 c7             	mov    %rax,%rdi
    33f3:	e8 00 00 00 00       	callq  33f8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    33f8:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33ff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3406 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    3406:	48 89 c7             	mov    %rax,%rdi
    3409:	e8 00 00 00 00       	callq  340e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    340e:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    3415:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    341c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3423:	b9 01 00 00 00       	mov    $0x1,%ecx
    3428:	48 89 c7             	mov    %rax,%rdi
    342b:	e8 00 00 00 00       	callq  3430 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    3430:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3437:	48 89 c7             	mov    %rax,%rdi
    343a:	e8 00 00 00 00       	callq  343f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    343f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3446:	48 89 c7             	mov    %rax,%rdi
    3449:	e8 00 00 00 00       	callq  344e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    344e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3452:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3459 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    3459:	48 89 c7             	mov    %rax,%rdi
    345c:	e8 00 00 00 00       	callq  3461 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    3461:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3465:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 346c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    346c:	48 89 c7             	mov    %rax,%rdi
    346f:	e8 00 00 00 00       	callq  3474 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    3474:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3478:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    347c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3483:	b9 00 00 00 00       	mov    $0x0,%ecx
    3488:	48 89 c7             	mov    %rax,%rdi
    348b:	e8 00 00 00 00       	callq  3490 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    3490:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3494:	48 89 c7             	mov    %rax,%rdi
    3497:	e8 00 00 00 00       	callq  349c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    349c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    34a0:	48 89 c7             	mov    %rax,%rdi
    34a3:	e8 00 00 00 00       	callq  34a8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    34a8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    34ac:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34b3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    34b3:	48 89 c7             	mov    %rax,%rdi
    34b6:	e8 00 00 00 00       	callq  34bb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    34bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    34bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34c6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    34c6:	48 89 c7             	mov    %rax,%rdi
    34c9:	e8 00 00 00 00       	callq  34ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    34ce:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    34d2:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    34d6:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    34dd:	b9 00 00 00 00       	mov    $0x0,%ecx
    34e2:	48 89 c7             	mov    %rax,%rdi
    34e5:	e8 00 00 00 00       	callq  34ea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    34ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    34ee:	48 89 c7             	mov    %rax,%rdi
    34f1:	e8 00 00 00 00       	callq  34f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    34f6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    34fa:	48 89 c7             	mov    %rax,%rdi
    34fd:	e8 00 00 00 00       	callq  3502 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    3502:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3506:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 350d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    350d:	48 89 c7             	mov    %rax,%rdi
    3510:	e8 00 00 00 00       	callq  3515 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    3515:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3519:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    351d:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    3524:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    352a:	b9 00 00 00 00       	mov    $0x0,%ecx
    352f:	48 89 c7             	mov    %rax,%rdi
    3532:	e8 00 00 00 00       	callq  3537 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    3537:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    353b:	48 89 c7             	mov    %rax,%rdi
    353e:	e8 00 00 00 00       	callq  3543 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    3543:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    354a:	00 00 00 
    354d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3551:	48 89 c7             	mov    %rax,%rdi
    3554:	e8 00 00 00 00       	callq  3559 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    3559:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    355f:	0f 9f c0             	setg   %al
    3562:	84 c0                	test   %al,%al
    3564:	74 6e                	je     35d4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    3566:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    356c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3570:	89 d6                	mov    %edx,%esi
    3572:	48 89 c7             	mov    %rax,%rdi
    3575:	e8 00 00 00 00       	callq  357a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    357a:	48 89 c7             	mov    %rax,%rdi
    357d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3581:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    3587:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    358e:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    3595:	41 89 c8             	mov    %ecx,%r8d
    3598:	48 89 d1             	mov    %rdx,%rcx
    359b:	48 89 fa             	mov    %rdi,%rdx
    359e:	48 89 c7             	mov    %rax,%rdi
    35a1:	e8 00 00 00 00       	callq  35a6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    35a6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    35aa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    35b1:	48 89 d6             	mov    %rdx,%rsi
    35b4:	48 89 c7             	mov    %rax,%rdi
    35b7:	e8 00 00 00 00       	callq  35bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    35bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    35c0:	48 89 c7             	mov    %rax,%rdi
    35c3:	e8 00 00 00 00       	callq  35c8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    35c8:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    35cf:	e9 79 ff ff ff       	jmpq   354d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    35d4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    35db:	48 89 c7             	mov    %rax,%rdi
    35de:	e8 00 00 00 00       	callq  35e3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    35e3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    35e9:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    35f0:	00 00 00 
    35f3:	b8 1f 00 00 00       	mov    $0x1f,%eax
    35f8:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    35fe:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    3604:	7e 1d                	jle    3623 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    3606:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    360d:	be 00 00 00 00       	mov    $0x0,%esi
    3612:	48 89 c7             	mov    %rax,%rdi
    3615:	e8 00 00 00 00       	callq  361a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    361a:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    3621:	eb d0                	jmp    35f3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    3623:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    3629:	0f be d0             	movsbl %al,%edx
    362c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3633:	89 d6                	mov    %edx,%esi
    3635:	48 89 c7             	mov    %rax,%rdi
    3638:	e8 00 00 00 00       	callq  363d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    363d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    3644:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    364b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3652:	48 89 c6             	mov    %rax,%rsi
    3655:	48 89 d7             	mov    %rdx,%rdi
    3658:	e8 00 00 00 00       	callq  365d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    365d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3661:	48 89 c7             	mov    %rax,%rdi
    3664:	e8 00 00 00 00       	callq  3669 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3669:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3670:	48 89 c7             	mov    %rax,%rdi
    3673:	e8 00 00 00 00       	callq  3678 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3678:	90                   	nop
    3679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    367d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3684:	00 00 
    3686:	0f 84 30 01 00 00    	je     37bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    368c:	e9 26 01 00 00       	jmpq   37b7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    3691:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    3694:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    369b:	48 89 c7             	mov    %rax,%rdi
    369e:	e8 00 00 00 00       	callq  36a3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    36a3:	eb 03                	jmp    36a8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    36a5:	48 89 c3             	mov    %rax,%rbx
    36a8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    36af:	48 89 c7             	mov    %rax,%rdi
    36b2:	e8 00 00 00 00       	callq  36b7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    36b7:	e9 e1 00 00 00       	jmpq   379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    36bc:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    36bf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    36c6:	48 89 c7             	mov    %rax,%rdi
    36c9:	e8 00 00 00 00       	callq  36ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    36ce:	eb 03                	jmp    36d3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    36d0:	48 89 c3             	mov    %rax,%rbx
    36d3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    36da:	48 89 c7             	mov    %rax,%rdi
    36dd:	e8 00 00 00 00       	callq  36e2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    36e2:	e9 b6 00 00 00       	jmpq   379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    36e7:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    36ea:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    36f1:	48 89 c7             	mov    %rax,%rdi
    36f4:	e8 00 00 00 00       	callq  36f9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    36f9:	eb 03                	jmp    36fe <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    36fb:	48 89 c3             	mov    %rax,%rbx
    36fe:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3705:	48 89 c7             	mov    %rax,%rdi
    3708:	e8 00 00 00 00       	callq  370d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    370d:	e9 8b 00 00 00       	jmpq   379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3712:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3715:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3719:	48 89 c7             	mov    %rax,%rdi
    371c:	e8 00 00 00 00       	callq  3721 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    3721:	eb 03                	jmp    3726 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    3723:	48 89 c3             	mov    %rax,%rbx
    3726:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    372a:	48 89 c7             	mov    %rax,%rdi
    372d:	e8 00 00 00 00       	callq  3732 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    3732:	eb 69                	jmp    379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3734:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3737:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    373b:	48 89 c7             	mov    %rax,%rdi
    373e:	e8 00 00 00 00       	callq  3743 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    3743:	eb 03                	jmp    3748 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    3745:	48 89 c3             	mov    %rax,%rbx
    3748:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    374c:	48 89 c7             	mov    %rax,%rdi
    374f:	e8 00 00 00 00       	callq  3754 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    3754:	eb 47                	jmp    379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3756:	48 89 c3             	mov    %rax,%rbx
    3759:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    375d:	48 89 c7             	mov    %rax,%rdi
    3760:	e8 00 00 00 00       	callq  3765 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    3765:	eb 36                	jmp    379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3767:	48 89 c3             	mov    %rax,%rbx
    376a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    376e:	48 89 c7             	mov    %rax,%rdi
    3771:	e8 00 00 00 00       	callq  3776 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    3776:	eb 25                	jmp    379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3778:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    377b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    377f:	48 89 c7             	mov    %rax,%rdi
    3782:	e8 00 00 00 00       	callq  3787 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    3787:	eb 03                	jmp    378c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    3789:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    378c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3790:	48 89 c7             	mov    %rax,%rdi
    3793:	e8 00 00 00 00       	callq  3798 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    3798:	eb 03                	jmp    379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    379a:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    379d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    37a4:	48 89 c7             	mov    %rax,%rdi
    37a7:	e8 00 00 00 00       	callq  37ac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    37ac:	48 89 d8             	mov    %rbx,%rax
    37af:	48 89 c7             	mov    %rax,%rdi
    37b2:	e8 00 00 00 00       	callq  37b7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    37b7:	e8 00 00 00 00       	callq  37bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    37bc:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    37c3:	5b                   	pop    %rbx
    37c4:	5d                   	pop    %rbp
    37c5:	c3                   	retq   

00000000000037c6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    37c6:	55                   	push   %rbp
    37c7:	48 89 e5             	mov    %rsp,%rbp
    37ca:	53                   	push   %rbx
    37cb:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    37d2:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    37d9:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    37e0:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    37e7:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    37ee:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    37f5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    37fc:	00 00 
    37fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3802:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3804:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3808:	be 20 00 00 00       	mov    $0x20,%esi
    380d:	48 89 c7             	mov    %rax,%rdi
    3810:	e8 00 00 00 00       	callq  3815 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3815:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3819:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3820:	b9 01 00 00 00       	mov    $0x1,%ecx
    3825:	ba 00 00 00 00       	mov    $0x0,%edx
    382a:	48 89 c7             	mov    %rax,%rdi
    382d:	e8 00 00 00 00       	callq  3832 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3832:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3838:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    383f:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3845:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    384c:	89 d1                	mov    %edx,%ecx
    384e:	ba 00 00 00 00       	mov    $0x0,%edx
    3853:	48 89 c7             	mov    %rax,%rdi
    3856:	e8 00 00 00 00       	callq  385b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    385b:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3862:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3865:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3869:	be 28 00 00 00       	mov    $0x28,%esi
    386e:	48 89 c7             	mov    %rax,%rdi
    3871:	e8 00 00 00 00       	callq  3876 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3876:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    387c:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3880:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3887:	b9 01 00 00 00       	mov    $0x1,%ecx
    388c:	48 89 c7             	mov    %rax,%rdi
    388f:	e8 00 00 00 00       	callq  3894 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3894:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    389a:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    38a0:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    38a6:	89 c1                	mov    %eax,%ecx
    38a8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    38ac:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    38b2:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    38b9:	48 89 c7             	mov    %rax,%rdi
    38bc:	e8 00 00 00 00       	callq  38c1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    38c1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    38c5:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    38c9:	48 89 d6             	mov    %rdx,%rsi
    38cc:	48 89 c7             	mov    %rax,%rdi
    38cf:	e8 00 00 00 00       	callq  38d4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    38d4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    38d8:	48 89 c7             	mov    %rax,%rdi
    38db:	e8 00 00 00 00       	callq  38e0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    38e0:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    38e6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    38ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    38f0:	be 29 00 00 00       	mov    $0x29,%esi
    38f5:	48 89 c7             	mov    %rax,%rdi
    38f8:	e8 00 00 00 00       	callq  38fd <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    38fd:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3903:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3907:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    390e:	b9 01 00 00 00       	mov    $0x1,%ecx
    3913:	48 89 c7             	mov    %rax,%rdi
    3916:	e8 00 00 00 00       	callq  391b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    391b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3921:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3927:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    392d:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3930:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3936:	8d 50 01             	lea    0x1(%rax),%edx
    3939:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    393d:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3944:	48 89 c7             	mov    %rax,%rdi
    3947:	e8 00 00 00 00       	callq  394c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    394c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3950:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3957 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3957:	48 89 c7             	mov    %rax,%rdi
    395a:	e8 00 00 00 00       	callq  395f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    395f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3963:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3967:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    396b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3971:	b9 01 00 00 00       	mov    $0x1,%ecx
    3976:	48 89 c7             	mov    %rax,%rdi
    3979:	e8 00 00 00 00       	callq  397e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    397e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3982:	48 89 c7             	mov    %rax,%rdi
    3985:	e8 00 00 00 00       	callq  398a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    398a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    398e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3992:	48 89 d6             	mov    %rdx,%rsi
    3995:	48 89 c7             	mov    %rax,%rdi
    3998:	e8 00 00 00 00       	callq  399d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    399d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    39a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39a5:	48 89 d6             	mov    %rdx,%rsi
    39a8:	48 89 c7             	mov    %rax,%rdi
    39ab:	e8 00 00 00 00       	callq  39b0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    39b0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    39b7:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    39be:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    39c5:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    39c9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    39cd:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    39d4:	45 89 c1             	mov    %r8d,%r9d
    39d7:	49 89 f8             	mov    %rdi,%r8
    39da:	48 89 c7             	mov    %rax,%rdi
    39dd:	e8 00 00 00 00       	callq  39e2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    39e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39e6:	48 89 c7             	mov    %rax,%rdi
    39e9:	e8 00 00 00 00       	callq  39ee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    39ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    39f2:	48 89 c7             	mov    %rax,%rdi
    39f5:	e8 00 00 00 00       	callq  39fa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    39fa:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    39fb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    39ff:	48 89 c7             	mov    %rax,%rdi
    3a02:	e8 00 00 00 00       	callq  3a07 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3a07:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3a0b:	48 89 c7             	mov    %rax,%rdi
    3a0e:	e8 00 00 00 00       	callq  3a13 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3a13:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3a17:	48 89 c7             	mov    %rax,%rdi
    3a1a:	e8 00 00 00 00       	callq  3a1f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3a1f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a26:	48 89 c7             	mov    %rax,%rdi
    3a29:	e8 00 00 00 00       	callq  3a2e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3a2e:	90                   	nop
}
    3a2f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3a36:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3a3a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3a41:	00 00 
    3a43:	0f 84 ee 00 00 00    	je     3b37 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3a49:	e9 e4 00 00 00       	jmpq   3b32 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3a4e:	48 89 c3             	mov    %rax,%rbx
    3a51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3a55:	48 89 c7             	mov    %rax,%rdi
    3a58:	e8 00 00 00 00       	callq  3a5d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3a5d:	e9 b6 00 00 00       	jmpq   3b18 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3a62:	48 89 c3             	mov    %rax,%rbx
    3a65:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3a69:	48 89 c7             	mov    %rax,%rdi
    3a6c:	e8 00 00 00 00       	callq  3a71 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3a71:	e9 a2 00 00 00       	jmpq   3b18 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3a76:	48 89 c3             	mov    %rax,%rbx
    3a79:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3a7d:	48 89 c7             	mov    %rax,%rdi
    3a80:	e8 00 00 00 00       	callq  3a85 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3a85:	eb 6f                	jmp    3af6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3a87:	48 89 c3             	mov    %rax,%rbx
    3a8a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3a8e:	48 89 c7             	mov    %rax,%rdi
    3a91:	e8 00 00 00 00       	callq  3a96 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3a96:	eb 5e                	jmp    3af6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3a98:	48 89 c3             	mov    %rax,%rbx
    3a9b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3a9f:	48 89 c7             	mov    %rax,%rdi
    3aa2:	e8 00 00 00 00       	callq  3aa7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3aa7:	eb 17                	jmp    3ac0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3aa9:	48 89 c3             	mov    %rax,%rbx
    3aac:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3ab3:	48 89 c7             	mov    %rax,%rdi
    3ab6:	e8 00 00 00 00       	callq  3abb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3abb:	eb 03                	jmp    3ac0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3abd:	48 89 c3             	mov    %rax,%rbx
    3ac0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ac4:	48 89 c7             	mov    %rax,%rdi
    3ac7:	e8 00 00 00 00       	callq  3acc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3acc:	eb 17                	jmp    3ae5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3ace:	48 89 c3             	mov    %rax,%rbx
    3ad1:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3ad8:	48 89 c7             	mov    %rax,%rdi
    3adb:	e8 00 00 00 00       	callq  3ae0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3ae0:	eb 03                	jmp    3ae5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3ae2:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3ae5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3ae9:	48 89 c7             	mov    %rax,%rdi
    3aec:	e8 00 00 00 00       	callq  3af1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3af1:	eb 03                	jmp    3af6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3af3:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3af6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3afa:	48 89 c7             	mov    %rax,%rdi
    3afd:	e8 00 00 00 00       	callq  3b02 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3b02:	eb 03                	jmp    3b07 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3b04:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3b07:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b0b:	48 89 c7             	mov    %rax,%rdi
    3b0e:	e8 00 00 00 00       	callq  3b13 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3b13:	eb 03                	jmp    3b18 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3b15:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3b18:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3b1f:	48 89 c7             	mov    %rax,%rdi
    3b22:	e8 00 00 00 00       	callq  3b27 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3b27:	48 89 d8             	mov    %rbx,%rax
    3b2a:	48 89 c7             	mov    %rax,%rdi
    3b2d:	e8 00 00 00 00       	callq  3b32 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3b32:	e8 00 00 00 00       	callq  3b37 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3b37:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3b3e:	5b                   	pop    %rbx
    3b3f:	5d                   	pop    %rbp
    3b40:	c3                   	retq   
    3b41:	90                   	nop

0000000000003b42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3b42:	55                   	push   %rbp
    3b43:	48 89 e5             	mov    %rsp,%rbp
    3b46:	53                   	push   %rbx
    3b47:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3b4e:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3b55:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3b5c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3b63:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3b6a:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3b71:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3b78:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3b7f:	00 00 
    3b81:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3b85:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3b87:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3b8e:	48 89 c7             	mov    %rax,%rdi
    3b91:	e8 00 00 00 00       	callq  3b96 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3b96:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3b9d:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3ba3:	ba 0a 00 00 00       	mov    $0xa,%edx
    3ba8:	89 ce                	mov    %ecx,%esi
    3baa:	48 89 c7             	mov    %rax,%rdi
    3bad:	e8 00 00 00 00       	callq  3bb2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3bb2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3bb9:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3bc0:	48 89 d6             	mov    %rdx,%rsi
    3bc3:	48 89 c7             	mov    %rax,%rdi
    3bc6:	e8 00 00 00 00       	callq  3bcb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3bcb:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3bd2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3bd9:	48 89 d6             	mov    %rdx,%rsi
    3bdc:	48 89 c7             	mov    %rax,%rdi
    3bdf:	e8 00 00 00 00       	callq  3be4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3be4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3beb:	48 89 c7             	mov    %rax,%rdi
    3bee:	e8 00 00 00 00       	callq  3bf3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3bf3:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3bfa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3c01:	48 89 d6             	mov    %rdx,%rsi
    3c04:	48 89 c7             	mov    %rax,%rdi
    3c07:	e8 00 00 00 00       	callq  3c0c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3c0c:	83 f0 01             	xor    $0x1,%eax
    3c0f:	84 c0                	test   %al,%al
    3c11:	0f 84 b5 00 00 00    	je     3ccc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3c17:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3c1e:	48 89 c7             	mov    %rax,%rdi
    3c21:	e8 00 00 00 00       	callq  3c26 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3c26:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3c2c:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3c33:	0f 8e c0 00 00 00    	jle    3cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3c39:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3c40:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3c47:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3c4e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3c4e:	48 89 c7             	mov    %rax,%rdi
    3c51:	e8 00 00 00 00       	callq  3c56 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3c56:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3c5a:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3c61:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3c68 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3c68:	48 89 ce             	mov    %rcx,%rsi
    3c6b:	48 89 c7             	mov    %rax,%rdi
    3c6e:	e8 00 00 00 00       	callq  3c73 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3c73:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3c77:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3c7e:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3c82:	48 89 ce             	mov    %rcx,%rsi
    3c85:	48 89 c7             	mov    %rax,%rdi
    3c88:	e8 00 00 00 00       	callq  3c8d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3c8d:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3c91:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3c98:	48 89 d6             	mov    %rdx,%rsi
    3c9b:	48 89 c7             	mov    %rax,%rdi
    3c9e:	e8 00 00 00 00       	callq  3ca3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3ca3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ca7:	48 89 c7             	mov    %rax,%rdi
    3caa:	e8 00 00 00 00       	callq  3caf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3caf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3cb3:	48 89 c7             	mov    %rax,%rdi
    3cb6:	e8 00 00 00 00       	callq  3cbb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3cbb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3cc2:	48 89 c7             	mov    %rax,%rdi
    3cc5:	e8 00 00 00 00       	callq  3cca <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3cca:	eb 2d                	jmp    3cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3ccc:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3cd3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3cda:	48 89 d6             	mov    %rdx,%rsi
    3cdd:	48 89 c7             	mov    %rax,%rdi
    3ce0:	e8 00 00 00 00       	callq  3ce5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3ce5:	0f be d0             	movsbl %al,%edx
    3ce8:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3cef:	89 d6                	mov    %edx,%esi
    3cf1:	48 89 c7             	mov    %rax,%rdi
    3cf4:	e8 00 00 00 00       	callq  3cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3cf9:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3d00:	00 00 00 
    3d03:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3d0a:	48 89 c7             	mov    %rax,%rdi
    3d0d:	e8 00 00 00 00       	callq  3d12 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3d12:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3d18:	0f 9f c0             	setg   %al
    3d1b:	84 c0                	test   %al,%al
    3d1d:	0f 84 e2 02 00 00    	je     4005 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3d23:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3d2a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3d30:	89 d6                	mov    %edx,%esi
    3d32:	48 89 c7             	mov    %rax,%rdi
    3d35:	e8 00 00 00 00       	callq  3d3a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3d3a:	48 89 c2             	mov    %rax,%rdx
    3d3d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d44:	48 89 d6             	mov    %rdx,%rsi
    3d47:	48 89 c7             	mov    %rax,%rdi
    3d4a:	e8 00 00 00 00       	callq  3d4f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3d4f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d56:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3d5d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3d5d:	48 89 c7             	mov    %rax,%rdi
    3d60:	e8 00 00 00 00       	callq  3d65 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3d65:	84 c0                	test   %al,%al
    3d67:	74 19                	je     3d82 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3d69:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3d70:	be 19 00 00 00       	mov    $0x19,%esi
    3d75:	48 89 c7             	mov    %rax,%rdi
    3d78:	e8 00 00 00 00       	callq  3d7d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3d7d:	e9 68 02 00 00       	jmpq   3fea <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    3d82:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3d89:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d8d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3d94 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3d94:	48 89 c7             	mov    %rax,%rdi
    3d97:	e8 00 00 00 00       	callq  3d9c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    3d9c:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3da0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3da7:	b9 01 00 00 00       	mov    $0x1,%ecx
    3dac:	ba 00 00 00 00       	mov    $0x0,%edx
    3db1:	48 89 c7             	mov    %rax,%rdi
    3db4:	e8 00 00 00 00       	callq  3db9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    3db9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    3dbf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3dc3:	48 89 c7             	mov    %rax,%rdi
    3dc6:	e8 00 00 00 00       	callq  3dcb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    3dcb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3dcf:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    3dd5:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3ddc:	48 89 ce             	mov    %rcx,%rsi
    3ddf:	48 89 c7             	mov    %rax,%rdi
    3de2:	e8 00 00 00 00       	callq  3de7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    3de7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3deb:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3def:	48 89 d6             	mov    %rdx,%rsi
    3df2:	48 89 c7             	mov    %rax,%rdi
    3df5:	e8 00 00 00 00       	callq  3dfa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    3dfa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3dfe:	48 89 c7             	mov    %rax,%rdi
    3e01:	e8 00 00 00 00       	callq  3e06 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    3e06:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3e0d:	48 89 c7             	mov    %rax,%rdi
    3e10:	e8 00 00 00 00       	callq  3e15 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    3e15:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    3e1b:	8d 50 ff             	lea    -0x1(%rax),%edx
    3e1e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3e22:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3e29:	48 89 ce             	mov    %rcx,%rsi
    3e2c:	48 89 c7             	mov    %rax,%rdi
    3e2f:	e8 00 00 00 00       	callq  3e34 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    3e34:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3e38:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    3e3c:	48 89 d6             	mov    %rdx,%rsi
    3e3f:	48 89 c7             	mov    %rax,%rdi
    3e42:	e8 00 00 00 00       	callq  3e47 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    3e47:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3e4b:	48 89 c7             	mov    %rax,%rdi
    3e4e:	e8 00 00 00 00       	callq  3e53 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    3e53:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3e57:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e5e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    3e5e:	48 89 c7             	mov    %rax,%rdi
    3e61:	e8 00 00 00 00       	callq  3e66 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    3e66:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3e6a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e71 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    3e71:	48 89 c7             	mov    %rax,%rdi
    3e74:	e8 00 00 00 00       	callq  3e79 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    3e79:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3e7d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e84:	48 89 d6             	mov    %rdx,%rsi
    3e87:	48 89 c7             	mov    %rax,%rdi
    3e8a:	e8 00 00 00 00       	callq  3e8f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    3e8f:	83 f0 01             	xor    $0x1,%eax
    3e92:	84 c0                	test   %al,%al
    3e94:	74 38                	je     3ece <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    3e96:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3e9a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3e9e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ea5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    3ea5:	48 89 c7             	mov    %rax,%rdi
    3ea8:	e8 00 00 00 00       	callq  3ead <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    3ead:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3eb1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3eb5:	48 89 d6             	mov    %rdx,%rsi
    3eb8:	48 89 c7             	mov    %rax,%rdi
    3ebb:	e8 00 00 00 00       	callq  3ec0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    3ec0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3ec4:	48 89 c7             	mov    %rax,%rdi
    3ec7:	e8 00 00 00 00       	callq  3ecc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    3ecc:	eb 74                	jmp    3f42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    3ece:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3ed2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3ed9:	48 89 d6             	mov    %rdx,%rsi
    3edc:	48 89 c7             	mov    %rax,%rdi
    3edf:	e8 00 00 00 00       	callq  3ee4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    3ee4:	0f be d0             	movsbl %al,%edx
    3ee7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3eee:	89 d6                	mov    %edx,%esi
    3ef0:	48 89 c7             	mov    %rax,%rdi
    3ef3:	e8 00 00 00 00       	callq  3ef8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    3ef8:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3efc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f03:	48 89 d6             	mov    %rdx,%rsi
    3f06:	48 89 c7             	mov    %rax,%rdi
    3f09:	e8 00 00 00 00       	callq  3f0e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    3f0e:	89 c1                	mov    %eax,%ecx
    3f10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f14:	ba 0a 00 00 00       	mov    $0xa,%edx
    3f19:	89 ce                	mov    %ecx,%esi
    3f1b:	48 89 c7             	mov    %rax,%rdi
    3f1e:	e8 00 00 00 00       	callq  3f23 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    3f23:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    3f27:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3f2b:	48 89 d6             	mov    %rdx,%rsi
    3f2e:	48 89 c7             	mov    %rax,%rdi
    3f31:	e8 00 00 00 00       	callq  3f36 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    3f36:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f3a:	48 89 c7             	mov    %rax,%rdi
    3f3d:	e8 00 00 00 00       	callq  3f42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    3f42:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3f46:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f4d:	48 89 d6             	mov    %rdx,%rsi
    3f50:	48 89 c7             	mov    %rax,%rdi
    3f53:	e8 00 00 00 00       	callq  3f58 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    3f58:	83 f0 01             	xor    $0x1,%eax
    3f5b:	84 c0                	test   %al,%al
    3f5d:	74 31                	je     3f90 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    3f5f:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    3f66:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f6a:	ba 0a 00 00 00       	mov    $0xa,%edx
    3f6f:	48 89 ce             	mov    %rcx,%rsi
    3f72:	48 89 c7             	mov    %rax,%rdi
    3f75:	e8 00 00 00 00       	callq  3f7a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    3f7a:	0f be d0             	movsbl %al,%edx
    3f7d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f84:	89 d6                	mov    %edx,%esi
    3f86:	48 89 c7             	mov    %rax,%rdi
    3f89:	e8 00 00 00 00       	callq  3f8e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    3f8e:	eb 2a                	jmp    3fba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    3f90:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3f94:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f9b:	48 89 d6             	mov    %rdx,%rsi
    3f9e:	48 89 c7             	mov    %rax,%rdi
    3fa1:	e8 00 00 00 00       	callq  3fa6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    3fa6:	0f be d0             	movsbl %al,%edx
    3fa9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3fb0:	89 d6                	mov    %edx,%esi
    3fb2:	48 89 c7             	mov    %rax,%rdi
    3fb5:	e8 00 00 00 00       	callq  3fba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    3fba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3fbe:	48 89 c7             	mov    %rax,%rdi
    3fc1:	e8 00 00 00 00       	callq  3fc6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    3fc6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3fca:	48 89 c7             	mov    %rax,%rdi
    3fcd:	e8 00 00 00 00       	callq  3fd2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    3fd2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3fd6:	48 89 c7             	mov    %rax,%rdi
    3fd9:	e8 00 00 00 00       	callq  3fde <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    3fde:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3fe2:	48 89 c7             	mov    %rax,%rdi
    3fe5:	e8 00 00 00 00       	callq  3fea <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    3fea:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ff1:	48 89 c7             	mov    %rax,%rdi
    3ff4:	e8 00 00 00 00       	callq  3ff9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3ff9:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    4000:	e9 fe fc ff ff       	jmpq   3d03 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4005:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4006:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    400d:	48 89 c7             	mov    %rax,%rdi
    4010:	e8 00 00 00 00       	callq  4015 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4015:	e9 59 01 00 00       	jmpq   4173 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    401a:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    401d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4024:	48 89 c7             	mov    %rax,%rdi
    4027:	e8 00 00 00 00       	callq  402c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    402c:	e9 14 01 00 00       	jmpq   4145 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4031:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    4034:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4038:	48 89 c7             	mov    %rax,%rdi
    403b:	e8 00 00 00 00       	callq  4040 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    4040:	eb 03                	jmp    4045 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    4042:	48 89 c3             	mov    %rax,%rbx
    4045:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4049:	48 89 c7             	mov    %rax,%rdi
    404c:	e8 00 00 00 00       	callq  4051 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    4051:	eb 03                	jmp    4056 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    4053:	48 89 c3             	mov    %rax,%rbx
    4056:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    405d:	48 89 c7             	mov    %rax,%rdi
    4060:	e8 00 00 00 00       	callq  4065 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    4065:	e9 db 00 00 00       	jmpq   4145 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    406a:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    406d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4071:	48 89 c7             	mov    %rax,%rdi
    4074:	e8 00 00 00 00       	callq  4079 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    4079:	e9 b3 00 00 00       	jmpq   4131 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    407e:	48 89 c3             	mov    %rax,%rbx
    4081:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4085:	48 89 c7             	mov    %rax,%rdi
    4088:	e8 00 00 00 00       	callq  408d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    408d:	e9 9f 00 00 00       	jmpq   4131 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4092:	48 89 c3             	mov    %rax,%rbx
    4095:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4099:	48 89 c7             	mov    %rax,%rdi
    409c:	e8 00 00 00 00       	callq  40a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    40a1:	e9 8b 00 00 00       	jmpq   4131 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    40a6:	48 89 c3             	mov    %rax,%rbx
    40a9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40ad:	48 89 c7             	mov    %rax,%rdi
    40b0:	e8 00 00 00 00       	callq  40b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    40b5:	eb 69                	jmp    4120 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    40b7:	48 89 c3             	mov    %rax,%rbx
    40ba:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    40be:	48 89 c7             	mov    %rax,%rdi
    40c1:	e8 00 00 00 00       	callq  40c6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    40c6:	eb 58                	jmp    4120 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    40c8:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    40cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    40cf:	48 89 c7             	mov    %rax,%rdi
    40d2:	e8 00 00 00 00       	callq  40d7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    40d7:	eb 14                	jmp    40ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    40d9:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    40dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    40e0:	48 89 c7             	mov    %rax,%rdi
    40e3:	e8 00 00 00 00       	callq  40e8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    40e8:	eb 03                	jmp    40ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    40ea:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    40ed:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40f1:	48 89 c7             	mov    %rax,%rdi
    40f4:	e8 00 00 00 00       	callq  40f9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    40f9:	eb 03                	jmp    40fe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    40fb:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    40fe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4102:	48 89 c7             	mov    %rax,%rdi
    4105:	e8 00 00 00 00       	callq  410a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    410a:	eb 03                	jmp    410f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    410c:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    410f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4113:	48 89 c7             	mov    %rax,%rdi
    4116:	e8 00 00 00 00       	callq  411b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    411b:	eb 03                	jmp    4120 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    411d:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4120:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4124:	48 89 c7             	mov    %rax,%rdi
    4127:	e8 00 00 00 00       	callq  412c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    412c:	eb 03                	jmp    4131 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    412e:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4131:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4138:	48 89 c7             	mov    %rax,%rdi
    413b:	e8 00 00 00 00       	callq  4140 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    4140:	eb 03                	jmp    4145 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4142:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4145:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    414c:	48 89 c7             	mov    %rax,%rdi
    414f:	e8 00 00 00 00       	callq  4154 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    4154:	eb 03                	jmp    4159 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    4156:	48 89 c3             	mov    %rax,%rbx
    4159:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4160:	48 89 c7             	mov    %rax,%rdi
    4163:	e8 00 00 00 00       	callq  4168 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    4168:	48 89 d8             	mov    %rbx,%rax
    416b:	48 89 c7             	mov    %rax,%rdi
    416e:	e8 00 00 00 00       	callq  4173 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    4173:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    417a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    417e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4185:	00 00 
    4187:	74 05                	je     418e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    4189:	e8 00 00 00 00       	callq  418e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    418e:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    4195:	5b                   	pop    %rbx
    4196:	5d                   	pop    %rbp
    4197:	c3                   	retq   

0000000000004198 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    4198:	55                   	push   %rbp
    4199:	48 89 e5             	mov    %rsp,%rbp
    419c:	53                   	push   %rbx
    419d:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    41a4:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    41ab:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    41b2:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    41b9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    41c0:	00 00 
    41c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    41c6:	31 c0                	xor    %eax,%eax
    QByteArray result;
    41c8:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    41cf:	48 89 c7             	mov    %rax,%rdi
    41d2:	e8 00 00 00 00       	callq  41d7 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    41d7:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    41de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41e5 <_ZN6Parser11compileAtomE7QString+0x4d>
    41e5:	48 89 c7             	mov    %rax,%rdi
    41e8:	e8 00 00 00 00       	callq  41ed <_ZN6Parser11compileAtomE7QString+0x55>
    41ed:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    41f4:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    41fb:	b9 00 00 00 00       	mov    $0x0,%ecx
    4200:	ba 01 00 00 00       	mov    $0x1,%edx
    4205:	48 89 c7             	mov    %rax,%rdi
    4208:	e8 00 00 00 00       	callq  420d <_ZN6Parser11compileAtomE7QString+0x75>
    420d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4214:	48 89 c7             	mov    %rax,%rdi
    4217:	e8 00 00 00 00       	callq  421c <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    421c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4223:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 422a <_ZN6Parser11compileAtomE7QString+0x92>
    422a:	48 89 c7             	mov    %rax,%rdi
    422d:	e8 00 00 00 00       	callq  4232 <_ZN6Parser11compileAtomE7QString+0x9a>
    4232:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    4239:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4240:	b9 00 00 00 00       	mov    $0x0,%ecx
    4245:	ba 01 00 00 00       	mov    $0x1,%edx
    424a:	48 89 c7             	mov    %rax,%rdi
    424d:	e8 00 00 00 00       	callq  4252 <_ZN6Parser11compileAtomE7QString+0xba>
    4252:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4259:	48 89 c7             	mov    %rax,%rdi
    425c:	e8 00 00 00 00       	callq  4261 <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4261:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4268:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 426f <_ZN6Parser11compileAtomE7QString+0xd7>
    426f:	48 89 c7             	mov    %rax,%rdi
    4272:	e8 00 00 00 00       	callq  4277 <_ZN6Parser11compileAtomE7QString+0xdf>
    4277:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    427e:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4285:	b9 00 00 00 00       	mov    $0x0,%ecx
    428a:	ba 01 00 00 00       	mov    $0x1,%edx
    428f:	48 89 c7             	mov    %rax,%rdi
    4292:	e8 00 00 00 00       	callq  4297 <_ZN6Parser11compileAtomE7QString+0xff>
    4297:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    429e:	48 89 c7             	mov    %rax,%rdi
    42a1:	e8 00 00 00 00       	callq  42a6 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    42a6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42aa:	48 89 c7             	mov    %rax,%rdi
    42ad:	e8 00 00 00 00       	callq  42b2 <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    42b2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    42b9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    42bd:	48 89 d6             	mov    %rdx,%rsi
    42c0:	48 89 c7             	mov    %rax,%rdi
    42c3:	e8 00 00 00 00       	callq  42c8 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    42c8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    42cf:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    42d3:	48 89 d6             	mov    %rdx,%rsi
    42d6:	48 89 c7             	mov    %rax,%rdi
    42d9:	e8 00 00 00 00       	callq  42de <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    42de:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    42e5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 42ec <_ZN6Parser11compileAtomE7QString+0x154>
    42ec:	48 89 c7             	mov    %rax,%rdi
    42ef:	e8 00 00 00 00       	callq  42f4 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    42f4:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    42fb:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4302:	b9 00 00 00 00       	mov    $0x0,%ecx
    4307:	ba 01 00 00 00       	mov    $0x1,%edx
    430c:	48 89 c7             	mov    %rax,%rdi
    430f:	e8 00 00 00 00       	callq  4314 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4314:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    431b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4322 <_ZN6Parser11compileAtomE7QString+0x18a>
    4322:	48 89 c7             	mov    %rax,%rdi
    4325:	e8 00 00 00 00       	callq  432a <_ZN6Parser11compileAtomE7QString+0x192>
    432a:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    4331:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4338:	b9 00 00 00 00       	mov    $0x0,%ecx
    433d:	ba 01 00 00 00       	mov    $0x1,%edx
    4342:	48 89 c7             	mov    %rax,%rdi
    4345:	e8 00 00 00 00       	callq  434a <_ZN6Parser11compileAtomE7QString+0x1b2>
    434a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4351:	48 89 c7             	mov    %rax,%rdi
    4354:	e8 00 00 00 00       	callq  4359 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    4359:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4360:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4367 <_ZN6Parser11compileAtomE7QString+0x1cf>
    4367:	48 89 c7             	mov    %rax,%rdi
    436a:	e8 00 00 00 00       	callq  436f <_ZN6Parser11compileAtomE7QString+0x1d7>
    436f:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    4376:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    437d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4382:	ba 01 00 00 00       	mov    $0x1,%edx
    4387:	48 89 c7             	mov    %rax,%rdi
    438a:	e8 00 00 00 00       	callq  438f <_ZN6Parser11compileAtomE7QString+0x1f7>
    438f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4396:	48 89 c7             	mov    %rax,%rdi
    4399:	e8 00 00 00 00       	callq  439e <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    439e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    43a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43ac <_ZN6Parser11compileAtomE7QString+0x214>
    43ac:	48 89 c7             	mov    %rax,%rdi
    43af:	e8 00 00 00 00       	callq  43b4 <_ZN6Parser11compileAtomE7QString+0x21c>
    43b4:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    43bb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    43c2:	b9 00 00 00 00       	mov    $0x0,%ecx
    43c7:	ba 01 00 00 00       	mov    $0x1,%edx
    43cc:	48 89 c7             	mov    %rax,%rdi
    43cf:	e8 00 00 00 00       	callq  43d4 <_ZN6Parser11compileAtomE7QString+0x23c>
    43d4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    43db:	48 89 c7             	mov    %rax,%rdi
    43de:	e8 00 00 00 00       	callq  43e3 <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    43e3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    43ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43f1 <_ZN6Parser11compileAtomE7QString+0x259>
    43f1:	48 89 c7             	mov    %rax,%rdi
    43f4:	e8 00 00 00 00       	callq  43f9 <_ZN6Parser11compileAtomE7QString+0x261>
    43f9:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    4400:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4407:	b9 00 00 00 00       	mov    $0x0,%ecx
    440c:	ba 01 00 00 00       	mov    $0x1,%edx
    4411:	48 89 c7             	mov    %rax,%rdi
    4414:	e8 00 00 00 00       	callq  4419 <_ZN6Parser11compileAtomE7QString+0x281>
    4419:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4420:	48 89 c7             	mov    %rax,%rdi
    4423:	e8 00 00 00 00       	callq  4428 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4428:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    442c:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4433:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 443a <_ZN6Parser11compileAtomE7QString+0x2a2>
    443a:	48 89 c7             	mov    %rax,%rdi
    443d:	e8 00 00 00 00       	callq  4442 <_ZN6Parser11compileAtomE7QString+0x2aa>
    4442:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    4446:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    444d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4452:	ba 01 00 00 00       	mov    $0x1,%edx
    4457:	48 89 c7             	mov    %rax,%rdi
    445a:	e8 00 00 00 00       	callq  445f <_ZN6Parser11compileAtomE7QString+0x2c7>
    445f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4463:	48 89 c7             	mov    %rax,%rdi
    4466:	e8 00 00 00 00       	callq  446b <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    446b:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    4472:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4476:	b9 00 00 00 00       	mov    $0x0,%ecx
    447b:	ba 01 00 00 00       	mov    $0x1,%edx
    4480:	48 89 c7             	mov    %rax,%rdi
    4483:	e8 00 00 00 00       	callq  4488 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    4488:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    448c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4493 <_ZN6Parser11compileAtomE7QString+0x2fb>
    4493:	48 89 c7             	mov    %rax,%rdi
    4496:	e8 00 00 00 00       	callq  449b <_ZN6Parser11compileAtomE7QString+0x303>
    449b:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    449f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    44a3:	b9 00 00 00 00       	mov    $0x0,%ecx
    44a8:	ba 01 00 00 00       	mov    $0x1,%edx
    44ad:	48 89 c7             	mov    %rax,%rdi
    44b0:	e8 00 00 00 00       	callq  44b5 <_ZN6Parser11compileAtomE7QString+0x31d>
    44b5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    44b9:	48 89 c7             	mov    %rax,%rdi
    44bc:	e8 00 00 00 00       	callq  44c1 <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    44c1:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    44c2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    44c6:	48 89 c7             	mov    %rax,%rdi
    44c9:	e8 00 00 00 00       	callq  44ce <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    44ce:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    44d2:	48 89 c7             	mov    %rax,%rdi
    44d5:	e8 00 00 00 00       	callq  44da <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    44da:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    44e1:	48 89 c7             	mov    %rax,%rdi
    44e4:	e8 00 00 00 00       	callq  44e9 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    44e9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    44f0:	48 89 c7             	mov    %rax,%rdi
    44f3:	e8 00 00 00 00       	callq  44f8 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    44f8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    44ff:	48 89 c7             	mov    %rax,%rdi
    4502:	e8 00 00 00 00       	callq  4507 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4507:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    450e:	48 89 c7             	mov    %rax,%rdi
    4511:	e8 00 00 00 00       	callq  4516 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4516:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    451d:	48 89 c7             	mov    %rax,%rdi
    4520:	e8 00 00 00 00       	callq  4525 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4525:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    452c:	48 89 c7             	mov    %rax,%rdi
    452f:	e8 00 00 00 00       	callq  4534 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4534:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    453b:	48 89 c7             	mov    %rax,%rdi
    453e:	e8 00 00 00 00       	callq  4543 <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4543:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    454a:	48 89 c7             	mov    %rax,%rdi
    454d:	e8 00 00 00 00       	callq  4552 <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4552:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4559:	48 89 c7             	mov    %rax,%rdi
    455c:	e8 00 00 00 00       	callq  4561 <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4561:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4565:	48 89 c7             	mov    %rax,%rdi
    4568:	e8 00 00 00 00       	callq  456d <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    456d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4574:	48 89 c7             	mov    %rax,%rdi
    4577:	e8 00 00 00 00       	callq  457c <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    457c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4583:	48 89 c7             	mov    %rax,%rdi
    4586:	e8 00 00 00 00       	callq  458b <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    458b:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4592:	48 89 c7             	mov    %rax,%rdi
    4595:	e8 00 00 00 00       	callq  459a <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    459a:	e9 b8 02 00 00       	jmpq   4857 <_ZN6Parser11compileAtomE7QString+0x6bf>
    459f:	48 89 c3             	mov    %rax,%rbx
    45a2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    45a9:	48 89 c7             	mov    %rax,%rdi
    45ac:	e8 00 00 00 00       	callq  45b1 <_ZN6Parser11compileAtomE7QString+0x419>
    45b1:	e9 87 02 00 00       	jmpq   483d <_ZN6Parser11compileAtomE7QString+0x6a5>
    45b6:	48 89 c3             	mov    %rax,%rbx
    45b9:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    45c0:	48 89 c7             	mov    %rax,%rdi
    45c3:	e8 00 00 00 00       	callq  45c8 <_ZN6Parser11compileAtomE7QString+0x430>
    45c8:	e9 70 02 00 00       	jmpq   483d <_ZN6Parser11compileAtomE7QString+0x6a5>
    45cd:	48 89 c3             	mov    %rax,%rbx
    45d0:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    45d7:	48 89 c7             	mov    %rax,%rdi
    45da:	e8 00 00 00 00       	callq  45df <_ZN6Parser11compileAtomE7QString+0x447>
    45df:	e9 45 02 00 00       	jmpq   4829 <_ZN6Parser11compileAtomE7QString+0x691>
    45e4:	48 89 c3             	mov    %rax,%rbx
    45e7:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    45ee:	48 89 c7             	mov    %rax,%rdi
    45f1:	e8 00 00 00 00       	callq  45f6 <_ZN6Parser11compileAtomE7QString+0x45e>
    45f6:	e9 2e 02 00 00       	jmpq   4829 <_ZN6Parser11compileAtomE7QString+0x691>
    45fb:	48 89 c3             	mov    %rax,%rbx
    45fe:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4605:	48 89 c7             	mov    %rax,%rdi
    4608:	e8 00 00 00 00       	callq  460d <_ZN6Parser11compileAtomE7QString+0x475>
    460d:	e9 03 02 00 00       	jmpq   4815 <_ZN6Parser11compileAtomE7QString+0x67d>
    4612:	48 89 c3             	mov    %rax,%rbx
    4615:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    461c:	48 89 c7             	mov    %rax,%rdi
    461f:	e8 00 00 00 00       	callq  4624 <_ZN6Parser11compileAtomE7QString+0x48c>
    4624:	e9 ec 01 00 00       	jmpq   4815 <_ZN6Parser11compileAtomE7QString+0x67d>
    4629:	48 89 c3             	mov    %rax,%rbx
    462c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4633:	48 89 c7             	mov    %rax,%rdi
    4636:	e8 00 00 00 00       	callq  463b <_ZN6Parser11compileAtomE7QString+0x4a3>
    463b:	e9 60 01 00 00       	jmpq   47a0 <_ZN6Parser11compileAtomE7QString+0x608>
    4640:	48 89 c3             	mov    %rax,%rbx
    4643:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    464a:	48 89 c7             	mov    %rax,%rdi
    464d:	e8 00 00 00 00       	callq  4652 <_ZN6Parser11compileAtomE7QString+0x4ba>
    4652:	e9 49 01 00 00       	jmpq   47a0 <_ZN6Parser11compileAtomE7QString+0x608>
    4657:	48 89 c3             	mov    %rax,%rbx
    465a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4661:	48 89 c7             	mov    %rax,%rdi
    4664:	e8 00 00 00 00       	callq  4669 <_ZN6Parser11compileAtomE7QString+0x4d1>
    4669:	e9 1e 01 00 00       	jmpq   478c <_ZN6Parser11compileAtomE7QString+0x5f4>
    466e:	48 89 c3             	mov    %rax,%rbx
    4671:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4678:	48 89 c7             	mov    %rax,%rdi
    467b:	e8 00 00 00 00       	callq  4680 <_ZN6Parser11compileAtomE7QString+0x4e8>
    4680:	e9 07 01 00 00       	jmpq   478c <_ZN6Parser11compileAtomE7QString+0x5f4>
    4685:	48 89 c3             	mov    %rax,%rbx
    4688:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    468f:	48 89 c7             	mov    %rax,%rdi
    4692:	e8 00 00 00 00       	callq  4697 <_ZN6Parser11compileAtomE7QString+0x4ff>
    4697:	e9 dc 00 00 00       	jmpq   4778 <_ZN6Parser11compileAtomE7QString+0x5e0>
    469c:	48 89 c3             	mov    %rax,%rbx
    469f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    46a6:	48 89 c7             	mov    %rax,%rdi
    46a9:	e8 00 00 00 00       	callq  46ae <_ZN6Parser11compileAtomE7QString+0x516>
    46ae:	e9 c5 00 00 00       	jmpq   4778 <_ZN6Parser11compileAtomE7QString+0x5e0>
    46b3:	48 89 c3             	mov    %rax,%rbx
    46b6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    46bd:	48 89 c7             	mov    %rax,%rdi
    46c0:	e8 00 00 00 00       	callq  46c5 <_ZN6Parser11compileAtomE7QString+0x52d>
    46c5:	e9 9a 00 00 00       	jmpq   4764 <_ZN6Parser11compileAtomE7QString+0x5cc>
    46ca:	48 89 c3             	mov    %rax,%rbx
    46cd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    46d4:	48 89 c7             	mov    %rax,%rdi
    46d7:	e8 00 00 00 00       	callq  46dc <_ZN6Parser11compileAtomE7QString+0x544>
    46dc:	e9 83 00 00 00       	jmpq   4764 <_ZN6Parser11compileAtomE7QString+0x5cc>
    46e1:	48 89 c3             	mov    %rax,%rbx
    46e4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46e8:	48 89 c7             	mov    %rax,%rdi
    46eb:	e8 00 00 00 00       	callq  46f0 <_ZN6Parser11compileAtomE7QString+0x558>
    46f0:	eb 5e                	jmp    4750 <_ZN6Parser11compileAtomE7QString+0x5b8>
    46f2:	48 89 c3             	mov    %rax,%rbx
    46f5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    46fc:	48 89 c7             	mov    %rax,%rdi
    46ff:	e8 00 00 00 00       	callq  4704 <_ZN6Parser11compileAtomE7QString+0x56c>
    4704:	eb 4a                	jmp    4750 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4706:	48 89 c3             	mov    %rax,%rbx
    4709:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    470d:	48 89 c7             	mov    %rax,%rdi
    4710:	e8 00 00 00 00       	callq  4715 <_ZN6Parser11compileAtomE7QString+0x57d>
    4715:	eb 14                	jmp    472b <_ZN6Parser11compileAtomE7QString+0x593>
    4717:	48 89 c3             	mov    %rax,%rbx
    471a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    471e:	48 89 c7             	mov    %rax,%rdi
    4721:	e8 00 00 00 00       	callq  4726 <_ZN6Parser11compileAtomE7QString+0x58e>
    4726:	eb 03                	jmp    472b <_ZN6Parser11compileAtomE7QString+0x593>
    4728:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    472b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    472f:	48 89 c7             	mov    %rax,%rdi
    4732:	e8 00 00 00 00       	callq  4737 <_ZN6Parser11compileAtomE7QString+0x59f>
    4737:	eb 03                	jmp    473c <_ZN6Parser11compileAtomE7QString+0x5a4>
    4739:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    473c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4743:	48 89 c7             	mov    %rax,%rdi
    4746:	e8 00 00 00 00       	callq  474b <_ZN6Parser11compileAtomE7QString+0x5b3>
    474b:	eb 03                	jmp    4750 <_ZN6Parser11compileAtomE7QString+0x5b8>
    474d:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4750:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4757:	48 89 c7             	mov    %rax,%rdi
    475a:	e8 00 00 00 00       	callq  475f <_ZN6Parser11compileAtomE7QString+0x5c7>
    475f:	eb 03                	jmp    4764 <_ZN6Parser11compileAtomE7QString+0x5cc>
    4761:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4764:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    476b:	48 89 c7             	mov    %rax,%rdi
    476e:	e8 00 00 00 00       	callq  4773 <_ZN6Parser11compileAtomE7QString+0x5db>
    4773:	eb 03                	jmp    4778 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4775:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4778:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    477f:	48 89 c7             	mov    %rax,%rdi
    4782:	e8 00 00 00 00       	callq  4787 <_ZN6Parser11compileAtomE7QString+0x5ef>
    4787:	eb 03                	jmp    478c <_ZN6Parser11compileAtomE7QString+0x5f4>
    4789:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    478c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4793:	48 89 c7             	mov    %rax,%rdi
    4796:	e8 00 00 00 00       	callq  479b <_ZN6Parser11compileAtomE7QString+0x603>
    479b:	eb 03                	jmp    47a0 <_ZN6Parser11compileAtomE7QString+0x608>
    479d:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    47a0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    47a7:	48 89 c7             	mov    %rax,%rdi
    47aa:	e8 00 00 00 00       	callq  47af <_ZN6Parser11compileAtomE7QString+0x617>
    47af:	eb 03                	jmp    47b4 <_ZN6Parser11compileAtomE7QString+0x61c>
    47b1:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    47b4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    47bb:	48 89 c7             	mov    %rax,%rdi
    47be:	e8 00 00 00 00       	callq  47c3 <_ZN6Parser11compileAtomE7QString+0x62b>
    47c3:	eb 03                	jmp    47c8 <_ZN6Parser11compileAtomE7QString+0x630>
    47c5:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    47c8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    47cf:	48 89 c7             	mov    %rax,%rdi
    47d2:	e8 00 00 00 00       	callq  47d7 <_ZN6Parser11compileAtomE7QString+0x63f>
    47d7:	eb 03                	jmp    47dc <_ZN6Parser11compileAtomE7QString+0x644>
    47d9:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    47dc:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47e3:	48 89 c7             	mov    %rax,%rdi
    47e6:	e8 00 00 00 00       	callq  47eb <_ZN6Parser11compileAtomE7QString+0x653>
    47eb:	eb 03                	jmp    47f0 <_ZN6Parser11compileAtomE7QString+0x658>
    47ed:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47f0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47f4:	48 89 c7             	mov    %rax,%rdi
    47f7:	e8 00 00 00 00       	callq  47fc <_ZN6Parser11compileAtomE7QString+0x664>
    47fc:	eb 03                	jmp    4801 <_ZN6Parser11compileAtomE7QString+0x669>
    47fe:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4801:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4808:	48 89 c7             	mov    %rax,%rdi
    480b:	e8 00 00 00 00       	callq  4810 <_ZN6Parser11compileAtomE7QString+0x678>
    4810:	eb 03                	jmp    4815 <_ZN6Parser11compileAtomE7QString+0x67d>
    4812:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4815:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    481c:	48 89 c7             	mov    %rax,%rdi
    481f:	e8 00 00 00 00       	callq  4824 <_ZN6Parser11compileAtomE7QString+0x68c>
    4824:	eb 03                	jmp    4829 <_ZN6Parser11compileAtomE7QString+0x691>
    4826:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4829:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4830:	48 89 c7             	mov    %rax,%rdi
    4833:	e8 00 00 00 00       	callq  4838 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4838:	eb 03                	jmp    483d <_ZN6Parser11compileAtomE7QString+0x6a5>
    483a:	48 89 c3             	mov    %rax,%rbx
    483d:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4844:	48 89 c7             	mov    %rax,%rdi
    4847:	e8 00 00 00 00       	callq  484c <_ZN6Parser11compileAtomE7QString+0x6b4>
    484c:	48 89 d8             	mov    %rbx,%rax
    484f:	48 89 c7             	mov    %rax,%rdi
    4852:	e8 00 00 00 00       	callq  4857 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4857:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    485e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4862:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4869:	00 00 
    486b:	74 05                	je     4872 <_ZN6Parser11compileAtomE7QString+0x6da>
    486d:	e8 00 00 00 00       	callq  4872 <_ZN6Parser11compileAtomE7QString+0x6da>
    4872:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4879:	5b                   	pop    %rbx
    487a:	5d                   	pop    %rbp
    487b:	c3                   	retq   

000000000000487c <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    487c:	55                   	push   %rbp
    487d:	48 89 e5             	mov    %rsp,%rbp
    4880:	53                   	push   %rbx
    4881:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4888:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    488f:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4896:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    489d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    48a4:	00 00 
    48a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    48aa:	31 c0                	xor    %eax,%eax
    QByteArray result;
    48ac:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    48b0:	48 89 c7             	mov    %rax,%rdi
    48b3:	e8 00 00 00 00       	callq  48b8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    48b8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    48bf:	48 89 c7             	mov    %rax,%rdi
    48c2:	e8 00 00 00 00       	callq  48c7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    48c7:	85 c0                	test   %eax,%eax
    48c9:	0f 9e c0             	setle  %al
    48cc:	84 c0                	test   %al,%al
    48ce:	74 0a                	je     48da <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    48d0:	bb 00 00 00 00       	mov    $0x0,%ebx
    48d5:	e9 27 01 00 00       	jmpq   4a01 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    48da:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    48de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 48e5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    48e5:	48 89 c7             	mov    %rax,%rdi
    48e8:	e8 00 00 00 00       	callq  48ed <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    48ed:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    48f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    48f5:	b9 00 00 00 00       	mov    $0x0,%ecx
    48fa:	ba 00 00 00 00       	mov    $0x0,%edx
    48ff:	48 89 c7             	mov    %rax,%rdi
    4902:	e8 00 00 00 00       	callq  4907 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4907:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    490b:	48 89 c7             	mov    %rax,%rdi
    490e:	e8 00 00 00 00       	callq  4913 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4913:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4917:	be 00 00 00 00       	mov    $0x0,%esi
    491c:	48 89 c7             	mov    %rax,%rdi
    491f:	e8 00 00 00 00       	callq  4924 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4924:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    492b:	8b 55 8c             	mov    -0x74(%rbp),%edx
    492e:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4935:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4939:	b9 00 00 00 00       	mov    $0x0,%ecx
    493e:	48 89 c7             	mov    %rax,%rdi
    4941:	e8 00 00 00 00       	callq  4946 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4946:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4949:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    494d:	0f 95 c0             	setne  %al
    4950:	84 c0                	test   %al,%al
    4952:	0f 84 98 00 00 00    	je     49f0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4958:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    495c:	48 89 c7             	mov    %rax,%rdi
    495f:	e8 00 00 00 00       	callq  4964 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4964:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4967:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    496b:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    496f:	ba 00 00 00 00       	mov    $0x0,%edx
    4974:	48 89 ce             	mov    %rcx,%rsi
    4977:	48 89 c7             	mov    %rax,%rdi
    497a:	e8 00 00 00 00       	callq  497f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    497f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4983:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    498a:	48 89 d6             	mov    %rdx,%rsi
    498d:	48 89 c7             	mov    %rax,%rdi
    4990:	e8 00 00 00 00       	callq  4995 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4995:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4999:	48 89 c7             	mov    %rax,%rdi
    499c:	e8 00 00 00 00       	callq  49a1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    49a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    49a5:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    49a9:	ba 00 00 00 00       	mov    $0x0,%edx
    49ae:	48 89 ce             	mov    %rcx,%rsi
    49b1:	48 89 c7             	mov    %rax,%rdi
    49b4:	e8 00 00 00 00       	callq  49b9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    49b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49bd:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    49c1:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    49c8:	48 89 ce             	mov    %rcx,%rsi
    49cb:	48 89 c7             	mov    %rax,%rdi
    49ce:	e8 00 00 00 00       	callq  49d3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    49d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49d7:	48 89 c7             	mov    %rax,%rdi
    49da:	e8 00 00 00 00       	callq  49df <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    49df:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    49e3:	48 89 c7             	mov    %rax,%rdi
    49e6:	e8 00 00 00 00       	callq  49eb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    49eb:	e9 3b ff ff ff       	jmpq   492b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    49f0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    49f4:	48 89 c7             	mov    %rax,%rdi
    49f7:	e8 00 00 00 00       	callq  49fc <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    49fc:	bb 01 00 00 00       	mov    $0x1,%ebx
    4a01:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4a05:	48 89 c7             	mov    %rax,%rdi
    4a08:	e8 00 00 00 00       	callq  4a0d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4a0d:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4a10:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a15:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4a1c:	00 00 
    4a1e:	74 76                	je     4a96 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4a20:	eb 6f                	jmp    4a91 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4a22:	48 89 c3             	mov    %rax,%rbx
    4a25:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4a29:	48 89 c7             	mov    %rax,%rdi
    4a2c:	e8 00 00 00 00       	callq  4a31 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4a31:	eb 47                	jmp    4a7a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4a33:	48 89 c3             	mov    %rax,%rbx
    4a36:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4a3a:	48 89 c7             	mov    %rax,%rdi
    4a3d:	e8 00 00 00 00       	callq  4a42 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4a42:	eb 36                	jmp    4a7a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4a44:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4a47:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a4b:	48 89 c7             	mov    %rax,%rdi
    4a4e:	e8 00 00 00 00       	callq  4a53 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4a53:	eb 14                	jmp    4a69 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4a55:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4a58:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4a5c:	48 89 c7             	mov    %rax,%rdi
    4a5f:	e8 00 00 00 00       	callq  4a64 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4a64:	eb 03                	jmp    4a69 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4a66:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4a69:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4a6d:	48 89 c7             	mov    %rax,%rdi
    4a70:	e8 00 00 00 00       	callq  4a75 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4a75:	eb 03                	jmp    4a7a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4a77:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4a7a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4a7e:	48 89 c7             	mov    %rax,%rdi
    4a81:	e8 00 00 00 00       	callq  4a86 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4a86:	48 89 d8             	mov    %rbx,%rax
    4a89:	48 89 c7             	mov    %rax,%rdi
    4a8c:	e8 00 00 00 00       	callq  4a91 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4a91:	e8 00 00 00 00       	callq  4a96 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4a96:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4a9d:	5b                   	pop    %rbx
    4a9e:	5d                   	pop    %rbp
    4a9f:	c3                   	retq   

0000000000004aa0 <_Z12compileBlockR11QStringList>:

QByteArray  compileBlock(QStringList &block){
    4aa0:	55                   	push   %rbp
    4aa1:	48 89 e5             	mov    %rsp,%rbp
    4aa4:	48 83 ec 20          	sub    $0x20,%rsp
    4aa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4aac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4ab0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4ab7:	00 00 
    4ab9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4abd:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4abf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ac3:	48 89 c7             	mov    %rax,%rdi
    4ac6:	e8 00 00 00 00       	callq  4acb <_Z12compileBlockR11QStringList+0x2b>

    return result;
    4acb:	90                   	nop
}
    4acc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ad0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4ad4:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    4adb:	00 00 
    4add:	74 05                	je     4ae4 <_Z12compileBlockR11QStringList+0x44>
    4adf:	e8 00 00 00 00       	callq  4ae4 <_Z12compileBlockR11QStringList+0x44>
    4ae4:	c9                   	leaveq 
    4ae5:	c3                   	retq   

0000000000004ae6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4ae6:	55                   	push   %rbp
    4ae7:	48 89 e5             	mov    %rsp,%rbp
    4aea:	53                   	push   %rbx
    4aeb:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4af2:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4af9:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4b00:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4b07:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4b0e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4b15:	00 00 
    4b17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4b1b:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4b1d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4b24:	48 89 c7             	mov    %rax,%rdi
    4b27:	e8 00 00 00 00       	callq  4b2c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4b2c:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4b33:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4b3a:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b3f:	ba 01 00 00 00       	mov    $0x1,%edx
    4b44:	48 89 c7             	mov    %rax,%rdi
    4b47:	e8 00 00 00 00       	callq  4b4c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4b4c:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4b53:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4b5a:	48 89 d6             	mov    %rdx,%rsi
    4b5d:	48 89 c7             	mov    %rax,%rdi
    4b60:	e8 00 00 00 00       	callq  4b65 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4b65:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4b6c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4b73:	48 89 d6             	mov    %rdx,%rsi
    4b76:	48 89 c7             	mov    %rax,%rdi
    4b79:	e8 00 00 00 00       	callq  4b7e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4b7e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4b85:	48 89 c7             	mov    %rax,%rdi
    4b88:	e8 00 00 00 00       	callq  4b8d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4b8d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4b94:	48 89 c7             	mov    %rax,%rdi
    4b97:	e8 00 00 00 00       	callq  4b9c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4b9c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4ba3:	48 89 c7             	mov    %rax,%rdi
    4ba6:	e8 00 00 00 00       	callq  4bab <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4bab:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4bb2:	48 89 c7             	mov    %rax,%rdi
    4bb5:	e8 00 00 00 00       	callq  4bba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4bba:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4bc1:	00 00 00 
    int     lineBase = 0;
    4bc4:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4bcb:	00 00 00 
    int     line     = 0;
    4bce:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4bd5:	00 00 00 

    unsigned int BFL = str.count("{");
    4bd8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4bdf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4be6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4be6:	48 89 c7             	mov    %rax,%rdi
    4be9:	e8 00 00 00 00       	callq  4bee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4bee:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4bf5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4bfc:	ba 01 00 00 00       	mov    $0x1,%edx
    4c01:	48 89 ce             	mov    %rcx,%rsi
    4c04:	48 89 c7             	mov    %rax,%rdi
    4c07:	e8 00 00 00 00       	callq  4c0c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4c0c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4c12:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4c19:	48 89 c7             	mov    %rax,%rdi
    4c1c:	e8 00 00 00 00       	callq  4c21 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4c21:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4c28:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c2f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4c2f:	48 89 c7             	mov    %rax,%rdi
    4c32:	e8 00 00 00 00       	callq  4c37 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4c37:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4c3e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4c45:	ba 01 00 00 00       	mov    $0x1,%edx
    4c4a:	48 89 ce             	mov    %rcx,%rsi
    4c4d:	48 89 c7             	mov    %rax,%rdi
    4c50:	e8 00 00 00 00       	callq  4c55 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4c55:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4c5b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4c62:	48 89 c7             	mov    %rax,%rdi
    4c65:	e8 00 00 00 00       	callq  4c6a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4c6a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4c71:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c78 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4c78:	48 89 c7             	mov    %rax,%rdi
    4c7b:	e8 00 00 00 00       	callq  4c80 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4c80:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4c87:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4c8e:	ba 01 00 00 00       	mov    $0x1,%edx
    4c93:	48 89 ce             	mov    %rcx,%rsi
    4c96:	48 89 c7             	mov    %rax,%rdi
    4c99:	e8 00 00 00 00       	callq  4c9e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4c9e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4ca4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4cab:	48 89 c7             	mov    %rax,%rdi
    4cae:	e8 00 00 00 00       	callq  4cb3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4cb3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4cba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4cc1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4cc1:	48 89 c7             	mov    %rax,%rdi
    4cc4:	e8 00 00 00 00       	callq  4cc9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4cc9:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4cd0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4cd7:	ba 01 00 00 00       	mov    $0x1,%edx
    4cdc:	48 89 ce             	mov    %rcx,%rsi
    4cdf:	48 89 c7             	mov    %rax,%rdi
    4ce2:	e8 00 00 00 00       	callq  4ce7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4ce7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4ced:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4cf4:	48 89 c7             	mov    %rax,%rdi
    4cf7:	e8 00 00 00 00       	callq  4cfc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4cfc:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4d02:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4d08:	74 43                	je     4d4d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4d0a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4d11:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d18 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4d18:	48 89 c7             	mov    %rax,%rdi
    4d1b:	e8 00 00 00 00       	callq  4d20 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4d20:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4d27:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4d2e:	48 89 d6             	mov    %rdx,%rsi
    4d31:	48 89 c7             	mov    %rax,%rdi
    4d34:	e8 00 00 00 00       	callq  4d39 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4d39:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4d40:	48 89 c7             	mov    %rax,%rdi
    4d43:	e8 00 00 00 00       	callq  4d48 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4d48:	e9 6f 03 00 00       	jmpq   50bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4d4d:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4d53:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4d59:	74 43                	je     4d9e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4d5b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4d62:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d69 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4d69:	48 89 c7             	mov    %rax,%rdi
    4d6c:	e8 00 00 00 00       	callq  4d71 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    4d71:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4d78:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4d7f:	48 89 d6             	mov    %rdx,%rsi
    4d82:	48 89 c7             	mov    %rax,%rdi
    4d85:	e8 00 00 00 00       	callq  4d8a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4d8a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4d91:	48 89 c7             	mov    %rax,%rdi
    4d94:	e8 00 00 00 00       	callq  4d99 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    4d99:	e9 1e 03 00 00       	jmpq   50bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    4d9e:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4da5:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4dac:	b9 00 00 00 00       	mov    $0x0,%ecx
    4db1:	ba 00 00 00 00       	mov    $0x0,%edx
    4db6:	48 89 c7             	mov    %rax,%rdi
    4db9:	e8 00 00 00 00       	callq  4dbe <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    4dbe:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    4dc4:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    4dcb:	0f 88 ea 02 00 00    	js     50bb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    4dd1:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    4dd7:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    4ddd:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    4de0:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    4de7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4deb:	48 89 d6             	mov    %rdx,%rsi
    4dee:	48 89 c7             	mov    %rax,%rdi
    4df1:	e8 00 00 00 00       	callq  4df6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    4df6:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    4dfa:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4e01:	89 da                	mov    %ebx,%edx
    4e03:	48 89 ce             	mov    %rcx,%rsi
    4e06:	48 89 c7             	mov    %rax,%rdi
    4e09:	e8 00 00 00 00       	callq  4e0e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    4e0e:	83 c0 01             	add    $0x1,%eax
    4e11:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    4e17:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4e1b:	48 89 c7             	mov    %rax,%rdi
    4e1e:	e8 00 00 00 00       	callq  4e23 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    4e23:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4e27:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    4e2e:	ba 01 00 00 00       	mov    $0x1,%edx
    4e33:	48 89 ce             	mov    %rcx,%rsi
    4e36:	48 89 c7             	mov    %rax,%rdi
    4e39:	e8 00 00 00 00       	callq  4e3e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    4e3e:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    4e42:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4e49:	48 89 d6             	mov    %rdx,%rsi
    4e4c:	48 89 c7             	mov    %rax,%rdi
    4e4f:	e8 00 00 00 00       	callq  4e54 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    4e54:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4e58:	48 89 c7             	mov    %rax,%rdi
    4e5b:	e8 00 00 00 00       	callq  4e60 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    4e60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4e64:	be 7b 00 00 00       	mov    $0x7b,%esi
    4e69:	48 89 c7             	mov    %rax,%rdi
    4e6c:	e8 00 00 00 00       	callq  4e71 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    4e71:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    4e77:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    4e7b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e82:	b9 01 00 00 00       	mov    $0x1,%ecx
    4e87:	48 89 c7             	mov    %rax,%rdi
    4e8a:	e8 00 00 00 00       	callq  4e8f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    4e8f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    4e95:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    4e9b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ea2:	89 d6                	mov    %edx,%esi
    4ea4:	48 89 c7             	mov    %rax,%rdi
    4ea7:	e8 00 00 00 00       	callq  4eac <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    4eac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4eb0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4eb4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4eb8:	48 89 c7             	mov    %rax,%rdi
    4ebb:	e8 00 00 00 00       	callq  4ec0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    4ec0:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    4ec7:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    4ece:	00 00 00 
        int br=0;
    4ed1:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    4ed8:	00 00 00 

        while(bl != br)
    4edb:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    4ee1:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    4ee7:	0f 84 a2 00 00 00    	je     4f8f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    4eed:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    4ef4:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    4efa:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f01:	89 d6                	mov    %edx,%esi
    4f03:	48 89 c7             	mov    %rax,%rdi
    4f06:	e8 00 00 00 00       	callq  4f0b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    4f0b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4f0f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4f13:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4f17:	48 89 c7             	mov    %rax,%rdi
    4f1a:	e8 00 00 00 00       	callq  4f1f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    4f1f:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    4f26:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4f2a:	be 7b 00 00 00       	mov    $0x7b,%esi
    4f2f:	48 89 c7             	mov    %rax,%rdi
    4f32:	e8 00 00 00 00       	callq  4f37 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    4f37:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    4f3b:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    4f42:	89 d6                	mov    %edx,%esi
    4f44:	89 c7                	mov    %eax,%edi
    4f46:	e8 00 00 00 00       	callq  4f4b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    4f4b:	84 c0                	test   %al,%al
    4f4d:	74 07                	je     4f56 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    4f4f:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    4f56:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4f5a:	be 7d 00 00 00       	mov    $0x7d,%esi
    4f5f:	48 89 c7             	mov    %rax,%rdi
    4f62:	e8 00 00 00 00       	callq  4f67 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    4f67:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    4f6b:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    4f72:	89 d6                	mov    %edx,%esi
    4f74:	89 c7                	mov    %eax,%edi
    4f76:	e8 00 00 00 00       	callq  4f7b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    4f7b:	84 c0                	test   %al,%al
    4f7d:	0f 84 58 ff ff ff    	je     4edb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    4f83:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    4f8a:	e9 4c ff ff ff       	jmpq   4edb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    4f8f:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    4f95:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    4f9b:	89 c1                	mov    %eax,%ecx
    4f9d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4fa1:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    4fa7:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4fae:	48 89 c7             	mov    %rax,%rdi
    4fb1:	e8 00 00 00 00       	callq  4fb6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    4fb6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    4fba:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4fc1:	48 89 d6             	mov    %rdx,%rsi
    4fc4:	48 89 c7             	mov    %rax,%rdi
    4fc7:	e8 00 00 00 00       	callq  4fcc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    4fcc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4fd0:	48 89 c7             	mov    %rax,%rdi
    4fd3:	e8 00 00 00 00       	callq  4fd8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    4fd8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4fdc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fe3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    4fe3:	48 89 c7             	mov    %rax,%rdi
    4fe6:	e8 00 00 00 00       	callq  4feb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    4feb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4fef:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    4ff3:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    4ffa:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5000:	b9 00 00 00 00       	mov    $0x0,%ecx
    5005:	48 89 c7             	mov    %rax,%rdi
    5008:	e8 00 00 00 00       	callq  500d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    500d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5011:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5018:	48 89 d6             	mov    %rdx,%rsi
    501b:	48 89 c7             	mov    %rax,%rdi
    501e:	e8 00 00 00 00       	callq  5023 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    5023:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5027:	48 89 c7             	mov    %rax,%rdi
    502a:	e8 00 00 00 00       	callq  502f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    502f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5033:	48 89 c7             	mov    %rax,%rdi
    5036:	e8 00 00 00 00       	callq  503b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    503b:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5042:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    5049:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5050:	48 89 ce             	mov    %rcx,%rsi
    5053:	48 89 c7             	mov    %rax,%rdi
    5056:	e8 00 00 00 00       	callq  505b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    505b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5062:	48 89 c7             	mov    %rax,%rdi
    5065:	e8 00 00 00 00       	callq  506a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    506a:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    5070:	89 c2                	mov    %eax,%edx
    5072:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5076:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    507d:	48 89 ce             	mov    %rcx,%rsi
    5080:	48 89 c7             	mov    %rax,%rdi
    5083:	e8 00 00 00 00       	callq  5088 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    5088:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    508c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5093:	48 89 d6             	mov    %rdx,%rsi
    5096:	48 89 c7             	mov    %rax,%rdi
    5099:	e8 00 00 00 00       	callq  509e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    509e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    50a2:	48 89 c7             	mov    %rax,%rdi
    50a5:	e8 00 00 00 00       	callq  50aa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    50aa:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    50b0:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    50b6:	e9 e3 fc ff ff       	jmpq   4d9e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    50bb:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    50bc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    50c3:	48 89 c7             	mov    %rax,%rdi
    50c6:	e8 00 00 00 00       	callq  50cb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    50cb:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    50d2:	48 89 c7             	mov    %rax,%rdi
    50d5:	e8 00 00 00 00       	callq  50da <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    50da:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    50e1:	48 89 c7             	mov    %rax,%rdi
    50e4:	e8 00 00 00 00       	callq  50e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    50e9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    50f0:	48 89 c7             	mov    %rax,%rdi
    50f3:	e8 00 00 00 00       	callq  50f8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    50f8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50ff:	48 89 c7             	mov    %rax,%rdi
    5102:	e8 00 00 00 00       	callq  5107 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    5107:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    510e:	48 89 c7             	mov    %rax,%rdi
    5111:	e8 00 00 00 00       	callq  5116 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    5116:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    511d:	48 89 c7             	mov    %rax,%rdi
    5120:	e8 00 00 00 00       	callq  5125 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5125:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5129:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5130:	00 00 
    5132:	0f 84 89 01 00 00    	je     52c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5138:	e9 7f 01 00 00       	jmpq   52bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    513d:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    5140:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5147:	48 89 c7             	mov    %rax,%rdi
    514a:	e8 00 00 00 00       	callq  514f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    514f:	e9 d6 00 00 00       	jmpq   522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5154:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    5157:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    515e:	48 89 c7             	mov    %rax,%rdi
    5161:	e8 00 00 00 00       	callq  5166 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    5166:	e9 bf 00 00 00       	jmpq   522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    516b:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    516e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5175:	48 89 c7             	mov    %rax,%rdi
    5178:	e8 00 00 00 00       	callq  517d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    517d:	e9 a8 00 00 00       	jmpq   522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5182:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    5185:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    518c:	48 89 c7             	mov    %rax,%rdi
    518f:	e8 00 00 00 00       	callq  5194 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    5194:	e9 91 00 00 00       	jmpq   522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5199:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    519c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    51a3:	48 89 c7             	mov    %rax,%rdi
    51a6:	e8 00 00 00 00       	callq  51ab <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    51ab:	eb 7d                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    51ad:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    51b0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    51b7:	48 89 c7             	mov    %rax,%rdi
    51ba:	e8 00 00 00 00       	callq  51bf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    51bf:	eb 69                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    51c1:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    51c4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    51c8:	48 89 c7             	mov    %rax,%rdi
    51cb:	e8 00 00 00 00       	callq  51d0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    51d0:	eb 58                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    51d2:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    51d5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    51d9:	48 89 c7             	mov    %rax,%rdi
    51dc:	e8 00 00 00 00       	callq  51e1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    51e1:	eb 47                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    51e3:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    51e6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    51ea:	48 89 c7             	mov    %rax,%rdi
    51ed:	e8 00 00 00 00       	callq  51f2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    51f2:	eb 36                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    51f4:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    51f7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    51fb:	48 89 c7             	mov    %rax,%rdi
    51fe:	e8 00 00 00 00       	callq  5203 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    5203:	eb 03                	jmp    5208 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    5205:	48 89 c3             	mov    %rax,%rbx
    5208:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    520c:	48 89 c7             	mov    %rax,%rdi
    520f:	e8 00 00 00 00       	callq  5214 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    5214:	eb 14                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5216:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    5219:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    521d:	48 89 c7             	mov    %rax,%rdi
    5220:	e8 00 00 00 00       	callq  5225 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    5225:	eb 03                	jmp    522a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5227:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    522a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5231:	48 89 c7             	mov    %rax,%rdi
    5234:	e8 00 00 00 00       	callq  5239 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    5239:	eb 03                	jmp    523e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    523b:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    523e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5245:	48 89 c7             	mov    %rax,%rdi
    5248:	e8 00 00 00 00       	callq  524d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    524d:	eb 03                	jmp    5252 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    524f:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    5252:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5259:	48 89 c7             	mov    %rax,%rdi
    525c:	e8 00 00 00 00       	callq  5261 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    5261:	eb 03                	jmp    5266 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    5263:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5266:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    526d:	48 89 c7             	mov    %rax,%rdi
    5270:	e8 00 00 00 00       	callq  5275 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    5275:	eb 03                	jmp    527a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    5277:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    527a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5281:	48 89 c7             	mov    %rax,%rdi
    5284:	e8 00 00 00 00       	callq  5289 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    5289:	eb 03                	jmp    528e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    528b:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    528e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5295:	48 89 c7             	mov    %rax,%rdi
    5298:	e8 00 00 00 00       	callq  529d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    529d:	eb 03                	jmp    52a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    529f:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    52a2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    52a9:	48 89 c7             	mov    %rax,%rdi
    52ac:	e8 00 00 00 00       	callq  52b1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    52b1:	48 89 d8             	mov    %rbx,%rax
    52b4:	48 89 c7             	mov    %rax,%rdi
    52b7:	e8 00 00 00 00       	callq  52bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    52bc:	e8 00 00 00 00       	callq  52c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    52c1:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    52c8:	5b                   	pop    %rbx
    52c9:	5d                   	pop    %rbp
    52ca:	c3                   	retq   
    52cb:	90                   	nop

00000000000052cc <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    52cc:	55                   	push   %rbp
    52cd:	48 89 e5             	mov    %rsp,%rbp
    52d0:	53                   	push   %rbx
    52d1:	48 83 ec 38          	sub    $0x38,%rsp
    52d5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    52d9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    52dd:	89 55 cc             	mov    %edx,-0x34(%rbp)
    52e0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    52e7:	00 00 
    52e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    52ed:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    52ef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52f3:	8b 55 cc             	mov    -0x34(%rbp),%edx
    52f6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    52fa:	48 89 ce             	mov    %rcx,%rsi
    52fd:	48 89 c7             	mov    %rax,%rdi
    5300:	e8 00 00 00 00       	callq  5305 <_ZN6Parser8whatLineE7QStringi+0x39>
    5305:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5309:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    530d:	48 89 d6             	mov    %rdx,%rsi
    5310:	48 89 c7             	mov    %rax,%rdi
    5313:	e8 00 00 00 00       	callq  5318 <_ZN6Parser8whatLineE7QStringi+0x4c>
    5318:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    531c:	48 89 c7             	mov    %rax,%rdi
    531f:	e8 00 00 00 00       	callq  5324 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    5324:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5328:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 532f <_ZN6Parser8whatLineE7QStringi+0x63>
    532f:	48 89 c7             	mov    %rax,%rdi
    5332:	e8 00 00 00 00       	callq  5337 <_ZN6Parser8whatLineE7QStringi+0x6b>
    5337:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    533b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    533f:	ba 01 00 00 00       	mov    $0x1,%edx
    5344:	48 89 ce             	mov    %rcx,%rsi
    5347:	48 89 c7             	mov    %rax,%rdi
    534a:	e8 00 00 00 00       	callq  534f <_ZN6Parser8whatLineE7QStringi+0x83>
    534f:	89 c3                	mov    %eax,%ebx
    5351:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5355:	48 89 c7             	mov    %rax,%rdi
    5358:	e8 00 00 00 00       	callq  535d <_ZN6Parser8whatLineE7QStringi+0x91>
    535d:	89 d8                	mov    %ebx,%eax
}
    535f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    5363:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    536a:	00 00 
    536c:	74 3b                	je     53a9 <_ZN6Parser8whatLineE7QStringi+0xdd>
    536e:	eb 34                	jmp    53a4 <_ZN6Parser8whatLineE7QStringi+0xd8>
    5370:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    5373:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5377:	48 89 c7             	mov    %rax,%rdi
    537a:	e8 00 00 00 00       	callq  537f <_ZN6Parser8whatLineE7QStringi+0xb3>
    537f:	48 89 d8             	mov    %rbx,%rax
    5382:	48 89 c7             	mov    %rax,%rdi
    5385:	e8 00 00 00 00       	callq  538a <_ZN6Parser8whatLineE7QStringi+0xbe>
    538a:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    538d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5391:	48 89 c7             	mov    %rax,%rdi
    5394:	e8 00 00 00 00       	callq  5399 <_ZN6Parser8whatLineE7QStringi+0xcd>
    5399:	48 89 d8             	mov    %rbx,%rax
    539c:	48 89 c7             	mov    %rax,%rdi
    539f:	e8 00 00 00 00       	callq  53a4 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    53a4:	e8 00 00 00 00       	callq  53a9 <_ZN6Parser8whatLineE7QStringi+0xdd>
    53a9:	48 83 c4 38          	add    $0x38,%rsp
    53ad:	5b                   	pop    %rbx
    53ae:	5d                   	pop    %rbp
    53af:	c3                   	retq   

00000000000053b0 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    53b0:	55                   	push   %rbp
    53b1:	48 89 e5             	mov    %rsp,%rbp
    53b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    53b8:	90                   	nop
    53b9:	5d                   	pop    %rbp
    53ba:	c3                   	retq   
    53bb:	90                   	nop

00000000000053bc <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    53bc:	55                   	push   %rbp
    53bd:	48 89 e5             	mov    %rsp,%rbp
    53c0:	53                   	push   %rbx
    53c1:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    53c8:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    53cf:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    53d6:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    53dd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    53e4:	00 00 
    53e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    53ea:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    53ec:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    53f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 53fa <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    53fa:	48 89 c7             	mov    %rax,%rdi
    53fd:	e8 00 00 00 00       	callq  5402 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    5402:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5409:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5410 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    5410:	48 89 c7             	mov    %rax,%rdi
    5413:	e8 00 00 00 00       	callq  5418 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    5418:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    541f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5426:	48 89 d6             	mov    %rdx,%rsi
    5429:	48 89 c7             	mov    %rax,%rdi
    542c:	e8 00 00 00 00       	callq  5431 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    5431:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    5438:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    543f:	48 89 d6             	mov    %rdx,%rsi
    5442:	48 89 c7             	mov    %rax,%rdi
    5445:	e8 00 00 00 00       	callq  544a <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    544a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5451:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5458 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    5458:	48 89 c7             	mov    %rax,%rdi
    545b:	e8 00 00 00 00       	callq  5460 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    5460:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5467:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 546e <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    546e:	48 89 c7             	mov    %rax,%rdi
    5471:	e8 00 00 00 00       	callq  5476 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    5476:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    547d:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5484:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    548b:	b9 01 00 00 00       	mov    $0x1,%ecx
    5490:	48 89 c7             	mov    %rax,%rdi
    5493:	e8 00 00 00 00       	callq  5498 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    5498:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    549f:	48 89 c7             	mov    %rax,%rdi
    54a2:	e8 00 00 00 00       	callq  54a7 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    54a7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    54ae:	48 89 c7             	mov    %rax,%rdi
    54b1:	e8 00 00 00 00       	callq  54b6 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    54b6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    54bd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54c4 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    54c4:	48 89 c7             	mov    %rax,%rdi
    54c7:	e8 00 00 00 00       	callq  54cc <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    54cc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54da <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    54da:	48 89 c7             	mov    %rax,%rdi
    54dd:	e8 00 00 00 00       	callq  54e2 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    54e2:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    54e9:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    54f0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    54f7:	b9 01 00 00 00       	mov    $0x1,%ecx
    54fc:	48 89 c7             	mov    %rax,%rdi
    54ff:	e8 00 00 00 00       	callq  5504 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    5504:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    550b:	48 89 c7             	mov    %rax,%rdi
    550e:	e8 00 00 00 00       	callq  5513 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    5513:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    551a:	48 89 c7             	mov    %rax,%rdi
    551d:	e8 00 00 00 00       	callq  5522 <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    5522:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    5529:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    552d:	48 89 d6             	mov    %rdx,%rsi
    5530:	48 89 c7             	mov    %rax,%rdi
    5533:	e8 00 00 00 00       	callq  5538 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    5538:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    553f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5543:	48 89 d6             	mov    %rdx,%rsi
    5546:	48 89 c7             	mov    %rax,%rdi
    5549:	e8 00 00 00 00       	callq  554e <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    554e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    5555:	be 02 00 00 00       	mov    $0x2,%esi
    555a:	48 89 c7             	mov    %rax,%rdi
    555d:	e8 00 00 00 00       	callq  5562 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    5562:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    5569:	be 02 00 00 00       	mov    $0x2,%esi
    556e:	48 89 c7             	mov    %rax,%rdi
    5571:	e8 00 00 00 00       	callq  5576 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    5576:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    557d:	48 89 c7             	mov    %rax,%rdi
    5580:	e8 00 00 00 00       	callq  5585 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    5585:	84 c0                	test   %al,%al
    5587:	74 1a                	je     55a3 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    5589:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    558d:	be 04 00 00 00       	mov    $0x4,%esi
    5592:	48 89 c7             	mov    %rax,%rdi
    5595:	e8 00 00 00 00       	callq  559a <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    559a:	8b 45 d0             	mov    -0x30(%rbp),%eax
    559d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    55a3:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    55aa:	48 89 c7             	mov    %rax,%rdi
    55ad:	e8 00 00 00 00       	callq  55b2 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    55b2:	84 c0                	test   %al,%al
    55b4:	74 1a                	je     55d0 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    55b6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    55ba:	be 04 00 00 00       	mov    $0x4,%esi
    55bf:	48 89 c7             	mov    %rax,%rdi
    55c2:	e8 00 00 00 00       	callq  55c7 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    55c7:	8b 45 d0             	mov    -0x30(%rbp),%eax
    55ca:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    55d0:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    55d6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    55da:	89 d6                	mov    %edx,%esi
    55dc:	48 89 c7             	mov    %rax,%rdi
    55df:	e8 00 00 00 00       	callq  55e4 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    55e4:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    55ea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    55ee:	89 d6                	mov    %edx,%esi
    55f0:	48 89 c7             	mov    %rax,%rdi
    55f3:	e8 00 00 00 00       	callq  55f8 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    55f8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    55fc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5600:	48 89 d6             	mov    %rdx,%rsi
    5603:	48 89 c7             	mov    %rax,%rdi
    5606:	e8 00 00 00 00       	callq  560b <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    560b:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    560f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5613:	48 89 d6             	mov    %rdx,%rsi
    5616:	48 89 c7             	mov    %rax,%rdi
    5619:	e8 00 00 00 00       	callq  561e <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    561e:	e8 00 00 00 00       	callq  5623 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    5623:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    562a:	e8 00 00 00 00       	callq  562f <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    562f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    5635:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    563c:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    5643:	ba 00 00 00 00       	mov    $0x0,%edx
    5648:	48 89 ce             	mov    %rcx,%rsi
    564b:	48 89 c7             	mov    %rax,%rdi
    564e:	e8 00 00 00 00       	callq  5653 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    5653:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    565a:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    5661:	ba 00 00 00 00       	mov    $0x0,%edx
    5666:	48 89 ce             	mov    %rcx,%rsi
    5669:	48 89 c7             	mov    %rax,%rdi
    566c:	e8 00 00 00 00       	callq  5671 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    5671:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5678:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    567f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5686 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    5686:	48 89 ce             	mov    %rcx,%rsi
    5689:	48 89 c7             	mov    %rax,%rdi
    568c:	e8 00 00 00 00       	callq  5691 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    5691:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5698:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    569f:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    56a6:	48 89 ce             	mov    %rcx,%rsi
    56a9:	48 89 c7             	mov    %rax,%rdi
    56ac:	e8 00 00 00 00       	callq  56b1 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    56b1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    56b8:	48 89 c7             	mov    %rax,%rdi
    56bb:	e8 00 00 00 00       	callq  56c0 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    56c0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    56c7:	48 89 c7             	mov    %rax,%rdi
    56ca:	e8 00 00 00 00       	callq  56cf <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    56cf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    56d6:	48 89 c7             	mov    %rax,%rdi
    56d9:	e8 00 00 00 00       	callq  56de <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    56de:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    56e5:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    56ec:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56f3 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    56f3:	48 89 c7             	mov    %rax,%rdi
    56f6:	e8 00 00 00 00       	callq  56fb <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    56fb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5702:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    5709:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5710 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    5710:	48 89 ce             	mov    %rcx,%rsi
    5713:	48 89 c7             	mov    %rax,%rdi
    5716:	e8 00 00 00 00       	callq  571b <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    571b:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5722:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5726:	48 89 d6             	mov    %rdx,%rsi
    5729:	48 89 c7             	mov    %rax,%rdi
    572c:	e8 00 00 00 00       	callq  5731 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    5731:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5738:	48 89 c7             	mov    %rax,%rdi
    573b:	e8 00 00 00 00       	callq  5740 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    5740:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5747:	48 89 c7             	mov    %rax,%rdi
    574a:	e8 00 00 00 00       	callq  574f <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    574f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5753:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    575a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5761 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    5761:	48 89 c7             	mov    %rax,%rdi
    5764:	e8 00 00 00 00       	callq  5769 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    5769:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    576d:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5771:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5778 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    5778:	48 89 ce             	mov    %rcx,%rsi
    577b:	48 89 c7             	mov    %rax,%rdi
    577e:	e8 00 00 00 00       	callq  5783 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    5783:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5787:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    578b:	48 89 d6             	mov    %rdx,%rsi
    578e:	48 89 c7             	mov    %rax,%rdi
    5791:	e8 00 00 00 00       	callq  5796 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    5796:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    579a:	48 89 c7             	mov    %rax,%rdi
    579d:	e8 00 00 00 00       	callq  57a2 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    57a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    57a6:	48 89 c7             	mov    %rax,%rdi
    57a9:	e8 00 00 00 00       	callq  57ae <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    57ae:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    57b5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    57b9:	48 89 d6             	mov    %rdx,%rsi
    57bc:	48 89 c7             	mov    %rax,%rdi
    57bf:	e8 00 00 00 00       	callq  57c4 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    57c4:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    57cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    57cf:	48 89 d6             	mov    %rdx,%rsi
    57d2:	48 89 c7             	mov    %rax,%rdi
    57d5:	e8 00 00 00 00       	callq  57da <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    57da:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    57de:	48 89 c7             	mov    %rax,%rdi
    57e1:	e8 00 00 00 00       	callq  57e6 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    57e6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    57ea:	48 89 c7             	mov    %rax,%rdi
    57ed:	e8 00 00 00 00       	callq  57f2 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    57f2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    57f9:	48 89 c7             	mov    %rax,%rdi
    57fc:	e8 00 00 00 00       	callq  5801 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5801:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5805:	48 89 c7             	mov    %rax,%rdi
    5808:	e8 00 00 00 00       	callq  580d <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    580d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5811:	48 89 c7             	mov    %rax,%rdi
    5814:	e8 00 00 00 00       	callq  5819 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5819:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    581d:	48 89 c7             	mov    %rax,%rdi
    5820:	e8 00 00 00 00       	callq  5825 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5825:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5829:	48 89 c7             	mov    %rax,%rdi
    582c:	e8 00 00 00 00       	callq  5831 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5831:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5838:	48 89 c7             	mov    %rax,%rdi
    583b:	e8 00 00 00 00       	callq  5840 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5840:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5847:	48 89 c7             	mov    %rax,%rdi
    584a:	e8 00 00 00 00       	callq  584f <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    584f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5856:	48 89 c7             	mov    %rax,%rdi
    5859:	e8 00 00 00 00       	callq  585e <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    585e:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5865:	48 89 c7             	mov    %rax,%rdi
    5868:	e8 00 00 00 00       	callq  586d <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    586d:	90                   	nop
    586e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5872:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5879:	00 00 
    587b:	0f 84 d3 01 00 00    	je     5a54 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5881:	e9 c9 01 00 00       	jmpq   5a4f <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5886:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5889:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5890:	48 89 c7             	mov    %rax,%rdi
    5893:	e8 00 00 00 00       	callq  5898 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5898:	eb 03                	jmp    589d <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    589a:	48 89 c3             	mov    %rax,%rbx
    589d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    58a4:	48 89 c7             	mov    %rax,%rdi
    58a7:	e8 00 00 00 00       	callq  58ac <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    58ac:	e9 48 01 00 00       	jmpq   59f9 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    58b1:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    58b4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    58bb:	48 89 c7             	mov    %rax,%rdi
    58be:	e8 00 00 00 00       	callq  58c3 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    58c3:	eb 03                	jmp    58c8 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    58c5:	48 89 c3             	mov    %rax,%rbx
    58c8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    58cf:	48 89 c7             	mov    %rax,%rdi
    58d2:	e8 00 00 00 00       	callq  58d7 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    58d7:	e9 1d 01 00 00       	jmpq   59f9 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    58dc:	48 89 c3             	mov    %rax,%rbx
    58df:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    58e6:	48 89 c7             	mov    %rax,%rdi
    58e9:	e8 00 00 00 00       	callq  58ee <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    58ee:	eb 17                	jmp    5907 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    58f0:	48 89 c3             	mov    %rax,%rbx
    58f3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    58fa:	48 89 c7             	mov    %rax,%rdi
    58fd:	e8 00 00 00 00       	callq  5902 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5902:	eb 03                	jmp    5907 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5904:	48 89 c3             	mov    %rax,%rbx
    5907:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    590e:	48 89 c7             	mov    %rax,%rdi
    5911:	e8 00 00 00 00       	callq  5916 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5916:	eb 17                	jmp    592f <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5918:	48 89 c3             	mov    %rax,%rbx
    591b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5922:	48 89 c7             	mov    %rax,%rdi
    5925:	e8 00 00 00 00       	callq  592a <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    592a:	eb 03                	jmp    592f <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    592c:	48 89 c3             	mov    %rax,%rbx
    592f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5936:	48 89 c7             	mov    %rax,%rdi
    5939:	e8 00 00 00 00       	callq  593e <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    593e:	eb 75                	jmp    59b5 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5940:	48 89 c3             	mov    %rax,%rbx
    5943:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    594a:	48 89 c7             	mov    %rax,%rdi
    594d:	e8 00 00 00 00       	callq  5952 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5952:	eb 61                	jmp    59b5 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5954:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5957:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    595e:	48 89 c7             	mov    %rax,%rdi
    5961:	e8 00 00 00 00       	callq  5966 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5966:	eb 03                	jmp    596b <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5968:	48 89 c3             	mov    %rax,%rbx
    596b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5972:	48 89 c7             	mov    %rax,%rdi
    5975:	e8 00 00 00 00       	callq  597a <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    597a:	eb 25                	jmp    59a1 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    597c:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    597f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5983:	48 89 c7             	mov    %rax,%rdi
    5986:	e8 00 00 00 00       	callq  598b <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    598b:	eb 03                	jmp    5990 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    598d:	48 89 c3             	mov    %rax,%rbx
    5990:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5994:	48 89 c7             	mov    %rax,%rdi
    5997:	e8 00 00 00 00       	callq  599c <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    599c:	eb 03                	jmp    59a1 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    599e:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    59a1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    59a8:	48 89 c7             	mov    %rax,%rdi
    59ab:	e8 00 00 00 00       	callq  59b0 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    59b0:	eb 03                	jmp    59b5 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    59b2:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    59b5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59b9:	48 89 c7             	mov    %rax,%rdi
    59bc:	e8 00 00 00 00       	callq  59c1 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    59c1:	eb 03                	jmp    59c6 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    59c3:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    59c6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    59ca:	48 89 c7             	mov    %rax,%rdi
    59cd:	e8 00 00 00 00       	callq  59d2 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    59d2:	eb 03                	jmp    59d7 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    59d4:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    59d7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    59db:	48 89 c7             	mov    %rax,%rdi
    59de:	e8 00 00 00 00       	callq  59e3 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    59e3:	eb 03                	jmp    59e8 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    59e5:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    59e8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    59ec:	48 89 c7             	mov    %rax,%rdi
    59ef:	e8 00 00 00 00       	callq  59f4 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    59f4:	eb 03                	jmp    59f9 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    59f6:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    59f9:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5a00:	48 89 c7             	mov    %rax,%rdi
    5a03:	e8 00 00 00 00       	callq  5a08 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5a08:	eb 03                	jmp    5a0d <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5a0a:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5a0d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5a14:	48 89 c7             	mov    %rax,%rdi
    5a17:	e8 00 00 00 00       	callq  5a1c <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5a1c:	eb 03                	jmp    5a21 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5a1e:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5a21:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5a28:	48 89 c7             	mov    %rax,%rdi
    5a2b:	e8 00 00 00 00       	callq  5a30 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5a30:	eb 03                	jmp    5a35 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5a32:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5a35:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5a3c:	48 89 c7             	mov    %rax,%rdi
    5a3f:	e8 00 00 00 00       	callq  5a44 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5a44:	48 89 d8             	mov    %rbx,%rax
    5a47:	48 89 c7             	mov    %rax,%rdi
    5a4a:	e8 00 00 00 00       	callq  5a4f <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5a4f:	e8 00 00 00 00       	callq  5a54 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5a54:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5a5b:	5b                   	pop    %rbx
    5a5c:	5d                   	pop    %rbp
    5a5d:	c3                   	retq   

0000000000005a5e <_ZN6Parser4initEv>:

void Parser::init(){
    5a5e:	55                   	push   %rbp
    5a5f:	48 89 e5             	mov    %rsp,%rbp
    5a62:	48 83 ec 10          	sub    $0x10,%rsp
    5a66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a6e:	48 83 c0 30          	add    $0x30,%rax
    5a72:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a79 <_ZN6Parser4initEv+0x1b>
    5a79:	48 89 c7             	mov    %rax,%rdi
    5a7c:	e8 00 00 00 00       	callq  5a81 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a85:	48 83 c0 38          	add    $0x38,%rax
    5a89:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a90 <_ZN6Parser4initEv+0x32>
    5a90:	48 89 c7             	mov    %rax,%rdi
    5a93:	e8 00 00 00 00       	callq  5a98 <_ZN6Parser4initEv+0x3a>
}
    5a98:	90                   	nop
    5a99:	c9                   	leaveq 
    5a9a:	c3                   	retq   
    5a9b:	90                   	nop

0000000000005a9c <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5a9c:	55                   	push   %rbp
    5a9d:	48 89 e5             	mov    %rsp,%rbp
    5aa0:	53                   	push   %rbx
    5aa1:	48 83 ec 38          	sub    $0x38,%rsp
    5aa5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5aa9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5ab0:	00 00 
    5ab2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5ab6:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5ab8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5abf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ac3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5aca <_ZN6Parser8initSemsEv+0x2e>
    5aca:	48 89 c7             	mov    %rax,%rdi
    5acd:	e8 00 00 00 00       	callq  5ad2 <_ZN6Parser8initSemsEv+0x36>
    5ad2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ad6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5add:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ae1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ae5:	48 89 c6             	mov    %rax,%rsi
    5ae8:	48 89 cf             	mov    %rcx,%rdi
    5aeb:	e8 00 00 00 00       	callq  5af0 <_ZN6Parser8initSemsEv+0x54>
    5af0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5af4:	48 89 c7             	mov    %rax,%rdi
    5af7:	e8 00 00 00 00       	callq  5afc <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5afc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5b03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b07:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5b0e <_ZN6Parser8initSemsEv+0x72>
    5b0e:	48 89 c7             	mov    %rax,%rdi
    5b11:	e8 00 00 00 00       	callq  5b16 <_ZN6Parser8initSemsEv+0x7a>
    5b16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5b1a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5b21:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5b25:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b29:	48 89 c6             	mov    %rax,%rsi
    5b2c:	48 89 cf             	mov    %rcx,%rdi
    5b2f:	e8 00 00 00 00       	callq  5b34 <_ZN6Parser8initSemsEv+0x98>
    5b34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b38:	48 89 c7             	mov    %rax,%rdi
    5b3b:	e8 00 00 00 00       	callq  5b40 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5b40:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5b47:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b4b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5b52 <_ZN6Parser8initSemsEv+0xb6>
    5b52:	48 89 c7             	mov    %rax,%rdi
    5b55:	e8 00 00 00 00       	callq  5b5a <_ZN6Parser8initSemsEv+0xbe>
    5b5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5b5e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5b65:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5b69:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b6d:	48 89 c6             	mov    %rax,%rsi
    5b70:	48 89 cf             	mov    %rcx,%rdi
    5b73:	e8 00 00 00 00       	callq  5b78 <_ZN6Parser8initSemsEv+0xdc>
    5b78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b7c:	48 89 c7             	mov    %rax,%rdi
    5b7f:	e8 00 00 00 00       	callq  5b84 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5b84:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5b8b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b8f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5b96 <_ZN6Parser8initSemsEv+0xfa>
    5b96:	48 89 c7             	mov    %rax,%rdi
    5b99:	e8 00 00 00 00       	callq  5b9e <_ZN6Parser8initSemsEv+0x102>
    5b9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ba2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ba9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5bad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5bb1:	48 89 c6             	mov    %rax,%rsi
    5bb4:	48 89 cf             	mov    %rcx,%rdi
    5bb7:	e8 00 00 00 00       	callq  5bbc <_ZN6Parser8initSemsEv+0x120>
    5bbc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5bc0:	48 89 c7             	mov    %rax,%rdi
    5bc3:	e8 00 00 00 00       	callq  5bc8 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5bc8:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5bcf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5bd3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5bda <_ZN6Parser8initSemsEv+0x13e>
    5bda:	48 89 c7             	mov    %rax,%rdi
    5bdd:	e8 00 00 00 00       	callq  5be2 <_ZN6Parser8initSemsEv+0x146>
    5be2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5be6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5bed:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5bf1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5bf5:	48 89 c6             	mov    %rax,%rsi
    5bf8:	48 89 cf             	mov    %rcx,%rdi
    5bfb:	e8 00 00 00 00       	callq  5c00 <_ZN6Parser8initSemsEv+0x164>
    5c00:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c04:	48 89 c7             	mov    %rax,%rdi
    5c07:	e8 00 00 00 00       	callq  5c0c <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5c0c:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5c13:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c17:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c1e <_ZN6Parser8initSemsEv+0x182>
    5c1e:	48 89 c7             	mov    %rax,%rdi
    5c21:	e8 00 00 00 00       	callq  5c26 <_ZN6Parser8initSemsEv+0x18a>
    5c26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5c2a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5c31:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5c35:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c39:	48 89 c6             	mov    %rax,%rsi
    5c3c:	48 89 cf             	mov    %rcx,%rdi
    5c3f:	e8 00 00 00 00       	callq  5c44 <_ZN6Parser8initSemsEv+0x1a8>
    5c44:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c48:	48 89 c7             	mov    %rax,%rdi
    5c4b:	e8 00 00 00 00       	callq  5c50 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5c50:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5c57:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c5b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c62 <_ZN6Parser8initSemsEv+0x1c6>
    5c62:	48 89 c7             	mov    %rax,%rdi
    5c65:	e8 00 00 00 00       	callq  5c6a <_ZN6Parser8initSemsEv+0x1ce>
    5c6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5c6e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5c75:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5c79:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c7d:	48 89 c6             	mov    %rax,%rsi
    5c80:	48 89 cf             	mov    %rcx,%rdi
    5c83:	e8 00 00 00 00       	callq  5c88 <_ZN6Parser8initSemsEv+0x1ec>
    5c88:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c8c:	48 89 c7             	mov    %rax,%rdi
    5c8f:	e8 00 00 00 00       	callq  5c94 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5c94:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5c9b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c9f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ca6 <_ZN6Parser8initSemsEv+0x20a>
    5ca6:	48 89 c7             	mov    %rax,%rdi
    5ca9:	e8 00 00 00 00       	callq  5cae <_ZN6Parser8initSemsEv+0x212>
    5cae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5cb2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5cb9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5cbd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5cc1:	48 89 c6             	mov    %rax,%rsi
    5cc4:	48 89 cf             	mov    %rcx,%rdi
    5cc7:	e8 00 00 00 00       	callq  5ccc <_ZN6Parser8initSemsEv+0x230>
    5ccc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5cd0:	48 89 c7             	mov    %rax,%rdi
    5cd3:	e8 00 00 00 00       	callq  5cd8 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5cd8:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5cdf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ce3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5cea <_ZN6Parser8initSemsEv+0x24e>
    5cea:	48 89 c7             	mov    %rax,%rdi
    5ced:	e8 00 00 00 00       	callq  5cf2 <_ZN6Parser8initSemsEv+0x256>
    5cf2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5cf6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5cfd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d01:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d05:	48 89 c6             	mov    %rax,%rsi
    5d08:	48 89 cf             	mov    %rcx,%rdi
    5d0b:	e8 00 00 00 00       	callq  5d10 <_ZN6Parser8initSemsEv+0x274>
    5d10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d14:	48 89 c7             	mov    %rax,%rdi
    5d17:	e8 00 00 00 00       	callq  5d1c <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5d1c:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5d23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d27:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d2e <_ZN6Parser8initSemsEv+0x292>
    5d2e:	48 89 c7             	mov    %rax,%rdi
    5d31:	e8 00 00 00 00       	callq  5d36 <_ZN6Parser8initSemsEv+0x29a>
    5d36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d3a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d41:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d45:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d49:	48 89 c6             	mov    %rax,%rsi
    5d4c:	48 89 cf             	mov    %rcx,%rdi
    5d4f:	e8 00 00 00 00       	callq  5d54 <_ZN6Parser8initSemsEv+0x2b8>
    5d54:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d58:	48 89 c7             	mov    %rax,%rdi
    5d5b:	e8 00 00 00 00       	callq  5d60 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5d60:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5d67:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d6b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d72 <_ZN6Parser8initSemsEv+0x2d6>
    5d72:	48 89 c7             	mov    %rax,%rdi
    5d75:	e8 00 00 00 00       	callq  5d7a <_ZN6Parser8initSemsEv+0x2de>
    5d7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d7e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d85:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d89:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d8d:	48 89 c6             	mov    %rax,%rsi
    5d90:	48 89 cf             	mov    %rcx,%rdi
    5d93:	e8 00 00 00 00       	callq  5d98 <_ZN6Parser8initSemsEv+0x2fc>
    5d98:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d9c:	48 89 c7             	mov    %rax,%rdi
    5d9f:	e8 00 00 00 00       	callq  5da4 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    5da4:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    5dab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5daf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5db6 <_ZN6Parser8initSemsEv+0x31a>
    5db6:	48 89 c7             	mov    %rax,%rdi
    5db9:	e8 00 00 00 00       	callq  5dbe <_ZN6Parser8initSemsEv+0x322>
    5dbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dc2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5dc9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dcd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dd1:	48 89 c6             	mov    %rax,%rsi
    5dd4:	48 89 cf             	mov    %rcx,%rdi
    5dd7:	e8 00 00 00 00       	callq  5ddc <_ZN6Parser8initSemsEv+0x340>
    5ddc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5de0:	48 89 c7             	mov    %rax,%rdi
    5de3:	e8 00 00 00 00       	callq  5de8 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    5de8:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    5def:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5df3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dfa <_ZN6Parser8initSemsEv+0x35e>
    5dfa:	48 89 c7             	mov    %rax,%rdi
    5dfd:	e8 00 00 00 00       	callq  5e02 <_ZN6Parser8initSemsEv+0x366>
    5e02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e06:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e0d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e11:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e15:	48 89 c6             	mov    %rax,%rsi
    5e18:	48 89 cf             	mov    %rcx,%rdi
    5e1b:	e8 00 00 00 00       	callq  5e20 <_ZN6Parser8initSemsEv+0x384>
    5e20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e24:	48 89 c7             	mov    %rax,%rdi
    5e27:	e8 00 00 00 00       	callq  5e2c <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    5e2c:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    5e33:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e3e <_ZN6Parser8initSemsEv+0x3a2>
    5e3e:	48 89 c7             	mov    %rax,%rdi
    5e41:	e8 00 00 00 00       	callq  5e46 <_ZN6Parser8initSemsEv+0x3aa>
    5e46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e4a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e51:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e55:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e59:	48 89 c6             	mov    %rax,%rsi
    5e5c:	48 89 cf             	mov    %rcx,%rdi
    5e5f:	e8 00 00 00 00       	callq  5e64 <_ZN6Parser8initSemsEv+0x3c8>
    5e64:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e68:	48 89 c7             	mov    %rax,%rdi
    5e6b:	e8 00 00 00 00       	callq  5e70 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    5e70:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    5e77:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e7b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e82 <_ZN6Parser8initSemsEv+0x3e6>
    5e82:	48 89 c7             	mov    %rax,%rdi
    5e85:	e8 00 00 00 00       	callq  5e8a <_ZN6Parser8initSemsEv+0x3ee>
    5e8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e8e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e95:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e99:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e9d:	48 89 c6             	mov    %rax,%rsi
    5ea0:	48 89 cf             	mov    %rcx,%rdi
    5ea3:	e8 00 00 00 00       	callq  5ea8 <_ZN6Parser8initSemsEv+0x40c>
    5ea8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eac:	48 89 c7             	mov    %rax,%rdi
    5eaf:	e8 00 00 00 00       	callq  5eb4 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    5eb4:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    5ebb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ebf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ec6 <_ZN6Parser8initSemsEv+0x42a>
    5ec6:	48 89 c7             	mov    %rax,%rdi
    5ec9:	e8 00 00 00 00       	callq  5ece <_ZN6Parser8initSemsEv+0x432>
    5ece:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ed2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ed9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5edd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ee1:	48 89 c6             	mov    %rax,%rsi
    5ee4:	48 89 cf             	mov    %rcx,%rdi
    5ee7:	e8 00 00 00 00       	callq  5eec <_ZN6Parser8initSemsEv+0x450>
    5eec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ef0:	48 89 c7             	mov    %rax,%rdi
    5ef3:	e8 00 00 00 00       	callq  5ef8 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    5ef8:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    5eff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f03:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f0a <_ZN6Parser8initSemsEv+0x46e>
    5f0a:	48 89 c7             	mov    %rax,%rdi
    5f0d:	e8 00 00 00 00       	callq  5f12 <_ZN6Parser8initSemsEv+0x476>
    5f12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f16:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f1d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f21:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f25:	48 89 c6             	mov    %rax,%rsi
    5f28:	48 89 cf             	mov    %rcx,%rdi
    5f2b:	e8 00 00 00 00       	callq  5f30 <_ZN6Parser8initSemsEv+0x494>
    5f30:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f34:	48 89 c7             	mov    %rax,%rdi
    5f37:	e8 00 00 00 00       	callq  5f3c <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    5f3c:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    5f43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f47:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f4e <_ZN6Parser8initSemsEv+0x4b2>
    5f4e:	48 89 c7             	mov    %rax,%rdi
    5f51:	e8 00 00 00 00       	callq  5f56 <_ZN6Parser8initSemsEv+0x4ba>
    5f56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f5a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f61:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f65:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f69:	48 89 c6             	mov    %rax,%rsi
    5f6c:	48 89 cf             	mov    %rcx,%rdi
    5f6f:	e8 00 00 00 00       	callq  5f74 <_ZN6Parser8initSemsEv+0x4d8>
    5f74:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f78:	48 89 c7             	mov    %rax,%rdi
    5f7b:	e8 00 00 00 00       	callq  5f80 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    5f80:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    5f87:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f8b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f92 <_ZN6Parser8initSemsEv+0x4f6>
    5f92:	48 89 c7             	mov    %rax,%rdi
    5f95:	e8 00 00 00 00       	callq  5f9a <_ZN6Parser8initSemsEv+0x4fe>
    5f9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f9e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fa5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fa9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fad:	48 89 c6             	mov    %rax,%rsi
    5fb0:	48 89 cf             	mov    %rcx,%rdi
    5fb3:	e8 00 00 00 00       	callq  5fb8 <_ZN6Parser8initSemsEv+0x51c>
    5fb8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fbc:	48 89 c7             	mov    %rax,%rdi
    5fbf:	e8 00 00 00 00       	callq  5fc4 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    5fc4:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    5fcb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fcf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fd6 <_ZN6Parser8initSemsEv+0x53a>
    5fd6:	48 89 c7             	mov    %rax,%rdi
    5fd9:	e8 00 00 00 00       	callq  5fde <_ZN6Parser8initSemsEv+0x542>
    5fde:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fe2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fe9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ff1:	48 89 c6             	mov    %rax,%rsi
    5ff4:	48 89 cf             	mov    %rcx,%rdi
    5ff7:	e8 00 00 00 00       	callq  5ffc <_ZN6Parser8initSemsEv+0x560>
    5ffc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6000:	48 89 c7             	mov    %rax,%rdi
    6003:	e8 00 00 00 00       	callq  6008 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    6008:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    600f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6013:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 601a <_ZN6Parser8initSemsEv+0x57e>
    601a:	48 89 c7             	mov    %rax,%rdi
    601d:	e8 00 00 00 00       	callq  6022 <_ZN6Parser8initSemsEv+0x586>
    6022:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6026:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    602d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6031:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6035:	48 89 c6             	mov    %rax,%rsi
    6038:	48 89 cf             	mov    %rcx,%rdi
    603b:	e8 00 00 00 00       	callq  6040 <_ZN6Parser8initSemsEv+0x5a4>
    6040:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6044:	48 89 c7             	mov    %rax,%rdi
    6047:	e8 00 00 00 00       	callq  604c <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    604c:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    6053:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6057:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 605e <_ZN6Parser8initSemsEv+0x5c2>
    605e:	48 89 c7             	mov    %rax,%rdi
    6061:	e8 00 00 00 00       	callq  6066 <_ZN6Parser8initSemsEv+0x5ca>
    6066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    606a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6071:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6075:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6079:	48 89 c6             	mov    %rax,%rsi
    607c:	48 89 cf             	mov    %rcx,%rdi
    607f:	e8 00 00 00 00       	callq  6084 <_ZN6Parser8initSemsEv+0x5e8>
    6084:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	e8 00 00 00 00       	callq  6090 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    6090:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    6097:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    609b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60a2 <_ZN6Parser8initSemsEv+0x606>
    60a2:	48 89 c7             	mov    %rax,%rdi
    60a5:	e8 00 00 00 00       	callq  60aa <_ZN6Parser8initSemsEv+0x60e>
    60aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60ae:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60b5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60bd:	48 89 c6             	mov    %rax,%rsi
    60c0:	48 89 cf             	mov    %rcx,%rdi
    60c3:	e8 00 00 00 00       	callq  60c8 <_ZN6Parser8initSemsEv+0x62c>
    60c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60cc:	48 89 c7             	mov    %rax,%rdi
    60cf:	e8 00 00 00 00       	callq  60d4 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    60d4:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    60db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60e6 <_ZN6Parser8initSemsEv+0x64a>
    60e6:	48 89 c7             	mov    %rax,%rdi
    60e9:	e8 00 00 00 00       	callq  60ee <_ZN6Parser8initSemsEv+0x652>
    60ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60f2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60f9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6101:	48 89 c6             	mov    %rax,%rsi
    6104:	48 89 cf             	mov    %rcx,%rdi
    6107:	e8 00 00 00 00       	callq  610c <_ZN6Parser8initSemsEv+0x670>
    610c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6110:	48 89 c7             	mov    %rax,%rdi
    6113:	e8 00 00 00 00       	callq  6118 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    6118:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    611f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6123:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 612a <_ZN6Parser8initSemsEv+0x68e>
    612a:	48 89 c7             	mov    %rax,%rdi
    612d:	e8 00 00 00 00       	callq  6132 <_ZN6Parser8initSemsEv+0x696>
    6132:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6136:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    613d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6145:	48 89 c6             	mov    %rax,%rsi
    6148:	48 89 cf             	mov    %rcx,%rdi
    614b:	e8 00 00 00 00       	callq  6150 <_ZN6Parser8initSemsEv+0x6b4>
    6150:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6154:	48 89 c7             	mov    %rax,%rdi
    6157:	e8 00 00 00 00       	callq  615c <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    615c:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    6163:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6167:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 616e <_ZN6Parser8initSemsEv+0x6d2>
    616e:	48 89 c7             	mov    %rax,%rdi
    6171:	e8 00 00 00 00       	callq  6176 <_ZN6Parser8initSemsEv+0x6da>
    6176:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    617a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6181:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6185:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6189:	48 89 c6             	mov    %rax,%rsi
    618c:	48 89 cf             	mov    %rcx,%rdi
    618f:	e8 00 00 00 00       	callq  6194 <_ZN6Parser8initSemsEv+0x6f8>
    6194:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6198:	48 89 c7             	mov    %rax,%rdi
    619b:	e8 00 00 00 00       	callq  61a0 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    61a0:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    61a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61ab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61b2 <_ZN6Parser8initSemsEv+0x716>
    61b2:	48 89 c7             	mov    %rax,%rdi
    61b5:	e8 00 00 00 00       	callq  61ba <_ZN6Parser8initSemsEv+0x71e>
    61ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61be:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61c5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61cd:	48 89 c6             	mov    %rax,%rsi
    61d0:	48 89 cf             	mov    %rcx,%rdi
    61d3:	e8 00 00 00 00       	callq  61d8 <_ZN6Parser8initSemsEv+0x73c>
    61d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61dc:	48 89 c7             	mov    %rax,%rdi
    61df:	e8 00 00 00 00       	callq  61e4 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    61e4:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    61eb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61f6 <_ZN6Parser8initSemsEv+0x75a>
    61f6:	48 89 c7             	mov    %rax,%rdi
    61f9:	e8 00 00 00 00       	callq  61fe <_ZN6Parser8initSemsEv+0x762>
    61fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6202:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6209:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    620d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6211:	48 89 c6             	mov    %rax,%rsi
    6214:	48 89 cf             	mov    %rcx,%rdi
    6217:	e8 00 00 00 00       	callq  621c <_ZN6Parser8initSemsEv+0x780>
    621c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6220:	48 89 c7             	mov    %rax,%rdi
    6223:	e8 00 00 00 00       	callq  6228 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    6228:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    622f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6233:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 623a <_ZN6Parser8initSemsEv+0x79e>
    623a:	48 89 c7             	mov    %rax,%rdi
    623d:	e8 00 00 00 00       	callq  6242 <_ZN6Parser8initSemsEv+0x7a6>
    6242:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6246:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    624d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6251:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6255:	48 89 c6             	mov    %rax,%rsi
    6258:	48 89 cf             	mov    %rcx,%rdi
    625b:	e8 00 00 00 00       	callq  6260 <_ZN6Parser8initSemsEv+0x7c4>
    6260:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6264:	48 89 c7             	mov    %rax,%rdi
    6267:	e8 00 00 00 00       	callq  626c <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    626c:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    6273:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6277:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 627e <_ZN6Parser8initSemsEv+0x7e2>
    627e:	48 89 c7             	mov    %rax,%rdi
    6281:	e8 00 00 00 00       	callq  6286 <_ZN6Parser8initSemsEv+0x7ea>
    6286:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    628a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6291:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6295:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6299:	48 89 c6             	mov    %rax,%rsi
    629c:	48 89 cf             	mov    %rcx,%rdi
    629f:	e8 00 00 00 00       	callq  62a4 <_ZN6Parser8initSemsEv+0x808>
    62a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62a8:	48 89 c7             	mov    %rax,%rdi
    62ab:	e8 00 00 00 00       	callq  62b0 <_ZN6Parser8initSemsEv+0x814>

}
    62b0:	90                   	nop
    62b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62b5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    62bc:	00 00 
    62be:	0f 84 16 03 00 00    	je     65da <_ZN6Parser8initSemsEv+0xb3e>
    62c4:	e9 0c 03 00 00       	jmpq   65d5 <_ZN6Parser8initSemsEv+0xb39>
    62c9:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    62cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62d0:	48 89 c7             	mov    %rax,%rdi
    62d3:	e8 00 00 00 00       	callq  62d8 <_ZN6Parser8initSemsEv+0x83c>
    62d8:	48 89 d8             	mov    %rbx,%rax
    62db:	48 89 c7             	mov    %rax,%rdi
    62de:	e8 00 00 00 00       	callq  62e3 <_ZN6Parser8initSemsEv+0x847>
    62e3:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    62e6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62ea:	48 89 c7             	mov    %rax,%rdi
    62ed:	e8 00 00 00 00       	callq  62f2 <_ZN6Parser8initSemsEv+0x856>
    62f2:	48 89 d8             	mov    %rbx,%rax
    62f5:	48 89 c7             	mov    %rax,%rdi
    62f8:	e8 00 00 00 00       	callq  62fd <_ZN6Parser8initSemsEv+0x861>
    62fd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    6300:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6304:	48 89 c7             	mov    %rax,%rdi
    6307:	e8 00 00 00 00       	callq  630c <_ZN6Parser8initSemsEv+0x870>
    630c:	48 89 d8             	mov    %rbx,%rax
    630f:	48 89 c7             	mov    %rax,%rdi
    6312:	e8 00 00 00 00       	callq  6317 <_ZN6Parser8initSemsEv+0x87b>
    6317:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    631a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    631e:	48 89 c7             	mov    %rax,%rdi
    6321:	e8 00 00 00 00       	callq  6326 <_ZN6Parser8initSemsEv+0x88a>
    6326:	48 89 d8             	mov    %rbx,%rax
    6329:	48 89 c7             	mov    %rax,%rdi
    632c:	e8 00 00 00 00       	callq  6331 <_ZN6Parser8initSemsEv+0x895>
    6331:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    6334:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6338:	48 89 c7             	mov    %rax,%rdi
    633b:	e8 00 00 00 00       	callq  6340 <_ZN6Parser8initSemsEv+0x8a4>
    6340:	48 89 d8             	mov    %rbx,%rax
    6343:	48 89 c7             	mov    %rax,%rdi
    6346:	e8 00 00 00 00       	callq  634b <_ZN6Parser8initSemsEv+0x8af>
    634b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    634e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6352:	48 89 c7             	mov    %rax,%rdi
    6355:	e8 00 00 00 00       	callq  635a <_ZN6Parser8initSemsEv+0x8be>
    635a:	48 89 d8             	mov    %rbx,%rax
    635d:	48 89 c7             	mov    %rax,%rdi
    6360:	e8 00 00 00 00       	callq  6365 <_ZN6Parser8initSemsEv+0x8c9>
    6365:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    6368:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    636c:	48 89 c7             	mov    %rax,%rdi
    636f:	e8 00 00 00 00       	callq  6374 <_ZN6Parser8initSemsEv+0x8d8>
    6374:	48 89 d8             	mov    %rbx,%rax
    6377:	48 89 c7             	mov    %rax,%rdi
    637a:	e8 00 00 00 00       	callq  637f <_ZN6Parser8initSemsEv+0x8e3>
    637f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    6382:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6386:	48 89 c7             	mov    %rax,%rdi
    6389:	e8 00 00 00 00       	callq  638e <_ZN6Parser8initSemsEv+0x8f2>
    638e:	48 89 d8             	mov    %rbx,%rax
    6391:	48 89 c7             	mov    %rax,%rdi
    6394:	e8 00 00 00 00       	callq  6399 <_ZN6Parser8initSemsEv+0x8fd>
    6399:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    639c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63a0:	48 89 c7             	mov    %rax,%rdi
    63a3:	e8 00 00 00 00       	callq  63a8 <_ZN6Parser8initSemsEv+0x90c>
    63a8:	48 89 d8             	mov    %rbx,%rax
    63ab:	48 89 c7             	mov    %rax,%rdi
    63ae:	e8 00 00 00 00       	callq  63b3 <_ZN6Parser8initSemsEv+0x917>
    63b3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    63b6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ba:	48 89 c7             	mov    %rax,%rdi
    63bd:	e8 00 00 00 00       	callq  63c2 <_ZN6Parser8initSemsEv+0x926>
    63c2:	48 89 d8             	mov    %rbx,%rax
    63c5:	48 89 c7             	mov    %rax,%rdi
    63c8:	e8 00 00 00 00       	callq  63cd <_ZN6Parser8initSemsEv+0x931>
    63cd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    63d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63d4:	48 89 c7             	mov    %rax,%rdi
    63d7:	e8 00 00 00 00       	callq  63dc <_ZN6Parser8initSemsEv+0x940>
    63dc:	48 89 d8             	mov    %rbx,%rax
    63df:	48 89 c7             	mov    %rax,%rdi
    63e2:	e8 00 00 00 00       	callq  63e7 <_ZN6Parser8initSemsEv+0x94b>
    63e7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    63ea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ee:	48 89 c7             	mov    %rax,%rdi
    63f1:	e8 00 00 00 00       	callq  63f6 <_ZN6Parser8initSemsEv+0x95a>
    63f6:	48 89 d8             	mov    %rbx,%rax
    63f9:	48 89 c7             	mov    %rax,%rdi
    63fc:	e8 00 00 00 00       	callq  6401 <_ZN6Parser8initSemsEv+0x965>
    6401:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    6404:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6408:	48 89 c7             	mov    %rax,%rdi
    640b:	e8 00 00 00 00       	callq  6410 <_ZN6Parser8initSemsEv+0x974>
    6410:	48 89 d8             	mov    %rbx,%rax
    6413:	48 89 c7             	mov    %rax,%rdi
    6416:	e8 00 00 00 00       	callq  641b <_ZN6Parser8initSemsEv+0x97f>
    641b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    641e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6422:	48 89 c7             	mov    %rax,%rdi
    6425:	e8 00 00 00 00       	callq  642a <_ZN6Parser8initSemsEv+0x98e>
    642a:	48 89 d8             	mov    %rbx,%rax
    642d:	48 89 c7             	mov    %rax,%rdi
    6430:	e8 00 00 00 00       	callq  6435 <_ZN6Parser8initSemsEv+0x999>
    6435:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    6438:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    643c:	48 89 c7             	mov    %rax,%rdi
    643f:	e8 00 00 00 00       	callq  6444 <_ZN6Parser8initSemsEv+0x9a8>
    6444:	48 89 d8             	mov    %rbx,%rax
    6447:	48 89 c7             	mov    %rax,%rdi
    644a:	e8 00 00 00 00       	callq  644f <_ZN6Parser8initSemsEv+0x9b3>
    644f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    6452:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6456:	48 89 c7             	mov    %rax,%rdi
    6459:	e8 00 00 00 00       	callq  645e <_ZN6Parser8initSemsEv+0x9c2>
    645e:	48 89 d8             	mov    %rbx,%rax
    6461:	48 89 c7             	mov    %rax,%rdi
    6464:	e8 00 00 00 00       	callq  6469 <_ZN6Parser8initSemsEv+0x9cd>
    6469:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    646c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6470:	48 89 c7             	mov    %rax,%rdi
    6473:	e8 00 00 00 00       	callq  6478 <_ZN6Parser8initSemsEv+0x9dc>
    6478:	48 89 d8             	mov    %rbx,%rax
    647b:	48 89 c7             	mov    %rax,%rdi
    647e:	e8 00 00 00 00       	callq  6483 <_ZN6Parser8initSemsEv+0x9e7>
    6483:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    6486:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    648a:	48 89 c7             	mov    %rax,%rdi
    648d:	e8 00 00 00 00       	callq  6492 <_ZN6Parser8initSemsEv+0x9f6>
    6492:	48 89 d8             	mov    %rbx,%rax
    6495:	48 89 c7             	mov    %rax,%rdi
    6498:	e8 00 00 00 00       	callq  649d <_ZN6Parser8initSemsEv+0xa01>
    649d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    64a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64a4:	48 89 c7             	mov    %rax,%rdi
    64a7:	e8 00 00 00 00       	callq  64ac <_ZN6Parser8initSemsEv+0xa10>
    64ac:	48 89 d8             	mov    %rbx,%rax
    64af:	48 89 c7             	mov    %rax,%rdi
    64b2:	e8 00 00 00 00       	callq  64b7 <_ZN6Parser8initSemsEv+0xa1b>
    64b7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    64ba:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64be:	48 89 c7             	mov    %rax,%rdi
    64c1:	e8 00 00 00 00       	callq  64c6 <_ZN6Parser8initSemsEv+0xa2a>
    64c6:	48 89 d8             	mov    %rbx,%rax
    64c9:	48 89 c7             	mov    %rax,%rdi
    64cc:	e8 00 00 00 00       	callq  64d1 <_ZN6Parser8initSemsEv+0xa35>
    64d1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    64d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64d8:	48 89 c7             	mov    %rax,%rdi
    64db:	e8 00 00 00 00       	callq  64e0 <_ZN6Parser8initSemsEv+0xa44>
    64e0:	48 89 d8             	mov    %rbx,%rax
    64e3:	48 89 c7             	mov    %rax,%rdi
    64e6:	e8 00 00 00 00       	callq  64eb <_ZN6Parser8initSemsEv+0xa4f>
    64eb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    64ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64f2:	48 89 c7             	mov    %rax,%rdi
    64f5:	e8 00 00 00 00       	callq  64fa <_ZN6Parser8initSemsEv+0xa5e>
    64fa:	48 89 d8             	mov    %rbx,%rax
    64fd:	48 89 c7             	mov    %rax,%rdi
    6500:	e8 00 00 00 00       	callq  6505 <_ZN6Parser8initSemsEv+0xa69>
    6505:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    6508:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    650c:	48 89 c7             	mov    %rax,%rdi
    650f:	e8 00 00 00 00       	callq  6514 <_ZN6Parser8initSemsEv+0xa78>
    6514:	48 89 d8             	mov    %rbx,%rax
    6517:	48 89 c7             	mov    %rax,%rdi
    651a:	e8 00 00 00 00       	callq  651f <_ZN6Parser8initSemsEv+0xa83>
    651f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    6522:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6526:	48 89 c7             	mov    %rax,%rdi
    6529:	e8 00 00 00 00       	callq  652e <_ZN6Parser8initSemsEv+0xa92>
    652e:	48 89 d8             	mov    %rbx,%rax
    6531:	48 89 c7             	mov    %rax,%rdi
    6534:	e8 00 00 00 00       	callq  6539 <_ZN6Parser8initSemsEv+0xa9d>
    6539:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    653c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6540:	48 89 c7             	mov    %rax,%rdi
    6543:	e8 00 00 00 00       	callq  6548 <_ZN6Parser8initSemsEv+0xaac>
    6548:	48 89 d8             	mov    %rbx,%rax
    654b:	48 89 c7             	mov    %rax,%rdi
    654e:	e8 00 00 00 00       	callq  6553 <_ZN6Parser8initSemsEv+0xab7>
    6553:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    6556:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    655a:	48 89 c7             	mov    %rax,%rdi
    655d:	e8 00 00 00 00       	callq  6562 <_ZN6Parser8initSemsEv+0xac6>
    6562:	48 89 d8             	mov    %rbx,%rax
    6565:	48 89 c7             	mov    %rax,%rdi
    6568:	e8 00 00 00 00       	callq  656d <_ZN6Parser8initSemsEv+0xad1>
    656d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    6570:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6574:	48 89 c7             	mov    %rax,%rdi
    6577:	e8 00 00 00 00       	callq  657c <_ZN6Parser8initSemsEv+0xae0>
    657c:	48 89 d8             	mov    %rbx,%rax
    657f:	48 89 c7             	mov    %rax,%rdi
    6582:	e8 00 00 00 00       	callq  6587 <_ZN6Parser8initSemsEv+0xaeb>
    6587:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    658a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    658e:	48 89 c7             	mov    %rax,%rdi
    6591:	e8 00 00 00 00       	callq  6596 <_ZN6Parser8initSemsEv+0xafa>
    6596:	48 89 d8             	mov    %rbx,%rax
    6599:	48 89 c7             	mov    %rax,%rdi
    659c:	e8 00 00 00 00       	callq  65a1 <_ZN6Parser8initSemsEv+0xb05>
    65a1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    65a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a8:	48 89 c7             	mov    %rax,%rdi
    65ab:	e8 00 00 00 00       	callq  65b0 <_ZN6Parser8initSemsEv+0xb14>
    65b0:	48 89 d8             	mov    %rbx,%rax
    65b3:	48 89 c7             	mov    %rax,%rdi
    65b6:	e8 00 00 00 00       	callq  65bb <_ZN6Parser8initSemsEv+0xb1f>
    65bb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    65be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65c2:	48 89 c7             	mov    %rax,%rdi
    65c5:	e8 00 00 00 00       	callq  65ca <_ZN6Parser8initSemsEv+0xb2e>
    65ca:	48 89 d8             	mov    %rbx,%rax
    65cd:	48 89 c7             	mov    %rax,%rdi
    65d0:	e8 00 00 00 00       	callq  65d5 <_ZN6Parser8initSemsEv+0xb39>

}
    65d5:	e8 00 00 00 00       	callq  65da <_ZN6Parser8initSemsEv+0xb3e>
    65da:	48 83 c4 38          	add    $0x38,%rsp
    65de:	5b                   	pop    %rbx
    65df:	5d                   	pop    %rbp
    65e0:	c3                   	retq   
    65e1:	90                   	nop

00000000000065e2 <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    65e2:	55                   	push   %rbp
    65e3:	48 89 e5             	mov    %rsp,%rbp
    65e6:	53                   	push   %rbx
    65e7:	48 83 ec 48          	sub    $0x48,%rsp
    65eb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    65ef:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    65f6:	00 00 
    65f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    65fc:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    65fe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6602:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6609 <_ZN6Parser10testCase01Ev+0x27>
    6609:	48 89 c7             	mov    %rax,%rdi
    660c:	e8 00 00 00 00       	callq  6611 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    6611:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6615:	48 89 c7             	mov    %rax,%rdi
    6618:	e8 00 00 00 00       	callq  661d <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    661d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6621:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6625:	48 89 d6             	mov    %rdx,%rsi
    6628:	48 89 c7             	mov    %rax,%rdi
    662b:	e8 00 00 00 00       	callq  6630 <_ZN6Parser10testCase01Ev+0x4e>
    6630:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6634:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    6638:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    663c:	48 89 ce             	mov    %rcx,%rsi
    663f:	48 89 c7             	mov    %rax,%rdi
    6642:	e8 00 00 00 00       	callq  6647 <_ZN6Parser10testCase01Ev+0x65>
    6647:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    664b:	48 89 c7             	mov    %rax,%rdi
    664e:	e8 00 00 00 00       	callq  6653 <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    6653:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6657:	48 89 c7             	mov    %rax,%rdi
    665a:	e8 00 00 00 00       	callq  665f <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    665f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6663:	48 89 c7             	mov    %rax,%rdi
    6666:	e8 00 00 00 00       	callq  666b <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    666b:	90                   	nop
    666c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6670:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6677:	00 00 
    6679:	74 43                	je     66be <_ZN6Parser10testCase01Ev+0xdc>
    667b:	eb 3c                	jmp    66b9 <_ZN6Parser10testCase01Ev+0xd7>
    667d:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    6680:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6684:	48 89 c7             	mov    %rax,%rdi
    6687:	e8 00 00 00 00       	callq  668c <_ZN6Parser10testCase01Ev+0xaa>
    668c:	eb 03                	jmp    6691 <_ZN6Parser10testCase01Ev+0xaf>
    668e:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    6691:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6695:	48 89 c7             	mov    %rax,%rdi
    6698:	e8 00 00 00 00       	callq  669d <_ZN6Parser10testCase01Ev+0xbb>
    669d:	eb 03                	jmp    66a2 <_ZN6Parser10testCase01Ev+0xc0>
    669f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    66a2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    66a6:	48 89 c7             	mov    %rax,%rdi
    66a9:	e8 00 00 00 00       	callq  66ae <_ZN6Parser10testCase01Ev+0xcc>
    66ae:	48 89 d8             	mov    %rbx,%rax
    66b1:	48 89 c7             	mov    %rax,%rdi
    66b4:	e8 00 00 00 00       	callq  66b9 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    66b9:	e8 00 00 00 00       	callq  66be <_ZN6Parser10testCase01Ev+0xdc>
    66be:	48 83 c4 48          	add    $0x48,%rsp
    66c2:	5b                   	pop    %rbx
    66c3:	5d                   	pop    %rbp
    66c4:	c3                   	retq   
    66c5:	90                   	nop

00000000000066c6 <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    66c6:	55                   	push   %rbp
    66c7:	48 89 e5             	mov    %rsp,%rbp
    66ca:	53                   	push   %rbx
    66cb:	48 83 ec 48          	sub    $0x48,%rsp
    66cf:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    66d3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    66da:	00 00 
    66dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    66e0:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    66e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    66e6:	48 83 c0 50          	add    $0x50,%rax
    66ea:	48 89 c7             	mov    %rax,%rdi
    66ed:	e8 00 00 00 00       	callq  66f2 <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    66f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    66f6:	48 05 90 00 00 00    	add    $0x90,%rax
    66fc:	48 89 c7             	mov    %rax,%rdi
    66ff:	e8 00 00 00 00       	callq  6704 <_ZN6Parser8HWStoHexEv+0x3e>
    6704:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    6707:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    670e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    6715:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6718:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    671b:	0f 8d 2f 01 00 00    	jge    6850 <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    6721:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6725:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    672c:	8b 45 c8             	mov    -0x38(%rbp),%eax
    672f:	89 c6                	mov    %eax,%esi
    6731:	48 89 d7             	mov    %rdx,%rdi
    6734:	e8 00 00 00 00       	callq  6739 <_ZN6Parser8HWStoHexEv+0x73>
    6739:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    673c:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    6740:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6744:	ba 10 00 00 00       	mov    $0x10,%edx
    6749:	89 ce                	mov    %ecx,%esi
    674b:	48 89 c7             	mov    %rax,%rdi
    674e:	e8 00 00 00 00       	callq  6753 <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    6753:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6756:	83 e0 03             	and    $0x3,%eax
    6759:	85 c0                	test   %eax,%eax
    675b:	75 17                	jne    6774 <_ZN6Parser8HWStoHexEv+0xae>
    675d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6761:	48 83 c0 50          	add    $0x50,%rax
    6765:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 676c <_ZN6Parser8HWStoHexEv+0xa6>
    676c:	48 89 c7             	mov    %rax,%rdi
    676f:	e8 00 00 00 00       	callq  6774 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    6774:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6777:	83 e0 07             	and    $0x7,%eax
    677a:	85 c0                	test   %eax,%eax
    677c:	75 17                	jne    6795 <_ZN6Parser8HWStoHexEv+0xcf>
    677e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6782:	48 83 c0 50          	add    $0x50,%rax
    6786:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 678d <_ZN6Parser8HWStoHexEv+0xc7>
    678d:	48 89 c7             	mov    %rax,%rdi
    6790:	e8 00 00 00 00       	callq  6795 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    6795:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6798:	83 e0 0f             	and    $0xf,%eax
    679b:	85 c0                	test   %eax,%eax
    679d:	75 17                	jne    67b6 <_ZN6Parser8HWStoHexEv+0xf0>
    679f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    67a3:	48 83 c0 50          	add    $0x50,%rax
    67a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 67ae <_ZN6Parser8HWStoHexEv+0xe8>
    67ae:	48 89 c7             	mov    %rax,%rdi
    67b1:	e8 00 00 00 00       	callq  67b6 <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    67b6:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    67ba:	77 17                	ja     67d3 <_ZN6Parser8HWStoHexEv+0x10d>
    67bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    67c0:	48 83 c0 50          	add    $0x50,%rax
    67c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 67cb <_ZN6Parser8HWStoHexEv+0x105>
    67cb:	48 89 c7             	mov    %rax,%rdi
    67ce:	e8 00 00 00 00       	callq  67d3 <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    67d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67d7:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    67db:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 67e2 <_ZN6Parser8HWStoHexEv+0x11c>
    67e2:	48 89 ce             	mov    %rcx,%rsi
    67e5:	48 89 c7             	mov    %rax,%rdi
    67e8:	e8 00 00 00 00       	callq  67ed <_ZN6Parser8HWStoHexEv+0x127>
    67ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    67f1:	48 8d 50 50          	lea    0x50(%rax),%rdx
    67f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67f9:	48 89 c6             	mov    %rax,%rsi
    67fc:	48 89 d7             	mov    %rdx,%rdi
    67ff:	e8 00 00 00 00       	callq  6804 <_ZN6Parser8HWStoHexEv+0x13e>
    6804:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6808:	48 89 c7             	mov    %rax,%rdi
    680b:	e8 00 00 00 00       	callq  6810 <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6810:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6814:	48 89 c7             	mov    %rax,%rdi
    6817:	e8 00 00 00 00       	callq  681c <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    681c:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6820:	e9 f0 fe ff ff       	jmpq   6715 <_ZN6Parser8HWStoHexEv+0x4f>
    6825:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6828:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    682c:	48 89 c7             	mov    %rax,%rdi
    682f:	e8 00 00 00 00       	callq  6834 <_ZN6Parser8HWStoHexEv+0x16e>
    6834:	eb 03                	jmp    6839 <_ZN6Parser8HWStoHexEv+0x173>
    6836:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6839:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    683d:	48 89 c7             	mov    %rax,%rdi
    6840:	e8 00 00 00 00       	callq  6845 <_ZN6Parser8HWStoHexEv+0x17f>
    6845:	48 89 d8             	mov    %rbx,%rax
    6848:	48 89 c7             	mov    %rax,%rdi
    684b:	e8 00 00 00 00       	callq  6850 <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6850:	90                   	nop
    6851:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6855:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    685c:	00 00 
    685e:	74 05                	je     6865 <_ZN6Parser8HWStoHexEv+0x19f>
    6860:	e8 00 00 00 00       	callq  6865 <_ZN6Parser8HWStoHexEv+0x19f>
    6865:	48 83 c4 48          	add    $0x48,%rsp
    6869:	5b                   	pop    %rbx
    686a:	5d                   	pop    %rbp
    686b:	c3                   	retq   

000000000000686c <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    686c:	55                   	push   %rbp
    686d:	48 89 e5             	mov    %rsp,%rbp
    6870:	53                   	push   %rbx
    6871:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6878:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    687f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6886:	00 00 
    6888:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    688c:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    688e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6895:	48 89 c7             	mov    %rax,%rdi
    6898:	e8 00 00 00 00       	callq  689d <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    689d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    68a4:	48 89 c7             	mov    %rax,%rdi
    68a7:	e8 00 00 00 00       	callq  68ac <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    68ac:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    68b3:	48 89 c7             	mov    %rax,%rdi
    68b6:	e8 00 00 00 00       	callq  68bb <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    68bb:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    68c2:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    68c9:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    68d0:	00 00 

    QStringList hwsModules;
    68d2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    68d9:	48 89 c7             	mov    %rax,%rdi
    68dc:	e8 00 00 00 00       	callq  68e1 <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    68e1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    68e8:	48 05 88 00 00 00    	add    $0x88,%rax
    68ee:	48 89 c7             	mov    %rax,%rdi
    68f1:	e8 00 00 00 00       	callq  68f6 <_ZN6Parser10compileHWSEv+0x8a>
    68f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    68fd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6904:	48 05 88 00 00 00    	add    $0x88,%rax
    690a:	48 89 c7             	mov    %rax,%rdi
    690d:	e8 00 00 00 00       	callq  6912 <_ZN6Parser10compileHWSEv+0xa6>
    6912:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6919:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6920:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6927:	48 89 d6             	mov    %rdx,%rsi
    692a:	48 89 c7             	mov    %rax,%rdi
    692d:	e8 00 00 00 00       	callq  6932 <_ZN6Parser10compileHWSEv+0xc6>
    6932:	84 c0                	test   %al,%al
    6934:	0f 84 e6 07 00 00    	je     7120 <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    693a:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6941:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6948:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    694f:	89 c6                	mov    %eax,%esi
    6951:	48 89 d7             	mov    %rdx,%rdi
    6954:	e8 00 00 00 00       	callq  6959 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6959:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6960:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6967:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    696e:	89 c6                	mov    %eax,%esi
    6970:	48 89 d7             	mov    %rdx,%rdi
    6973:	e8 00 00 00 00       	callq  6978 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6978:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    697f:	48 89 c7             	mov    %rax,%rdi
    6982:	e8 00 00 00 00       	callq  6987 <_ZN6Parser10compileHWSEv+0x11b>
    6987:	48 89 c2             	mov    %rax,%rdx
    698a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6991:	48 89 d6             	mov    %rdx,%rsi
    6994:	48 89 c7             	mov    %rax,%rdi
    6997:	e8 00 00 00 00       	callq  699c <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    699c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    69a3:	48 89 c7             	mov    %rax,%rdi
    69a6:	e8 00 00 00 00       	callq  69ab <_ZN6Parser10compileHWSEv+0x13f>
    69ab:	48 89 c2             	mov    %rax,%rdx
    69ae:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    69b5:	48 89 d6             	mov    %rdx,%rsi
    69b8:	48 89 c7             	mov    %rax,%rdi
    69bb:	e8 00 00 00 00       	callq  69c0 <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    69c0:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    69c7:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    69c9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    69d0:	48 8d 48 28          	lea    0x28(%rax),%rcx
    69d4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    69db:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    69e2:	48 89 ce             	mov    %rcx,%rsi
    69e5:	48 89 c7             	mov    %rax,%rdi
    69e8:	e8 00 00 00 00       	callq  69ed <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    69ed:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    69f4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    69fb:	ba 10 00 00 00       	mov    $0x10,%edx
    6a00:	48 89 ce             	mov    %rcx,%rsi
    6a03:	48 89 c7             	mov    %rax,%rdi
    6a06:	e8 00 00 00 00       	callq  6a0b <_ZN6Parser10compileHWSEv+0x19f>
    6a0b:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6a12:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6a19:	0f be c0             	movsbl %al,%eax
    6a1c:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6a23:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6a2a:	89 c6                	mov    %eax,%esi
    6a2c:	48 89 d7             	mov    %rdx,%rdi
    6a2f:	e8 00 00 00 00       	callq  6a34 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6a34:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6a3b:	66 c1 e8 08          	shr    $0x8,%ax
    6a3f:	0f be c0             	movsbl %al,%eax
    6a42:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6a49:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6a50:	89 c6                	mov    %eax,%esi
    6a52:	48 89 d7             	mov    %rdx,%rdi
    6a55:	e8 00 00 00 00       	callq  6a5a <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6a5a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6a61:	48 05 90 00 00 00    	add    $0x90,%rax
    6a67:	48 89 c7             	mov    %rax,%rdi
    6a6a:	e8 00 00 00 00       	callq  6a6f <_ZN6Parser10compileHWSEv+0x203>
    6a6f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6a75:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6a7c:	48 05 90 00 00 00    	add    $0x90,%rax
    6a82:	48 89 c7             	mov    %rax,%rdi
    6a85:	e8 00 00 00 00       	callq  6a8a <_ZN6Parser10compileHWSEv+0x21e>
    6a8a:	83 c0 02             	add    $0x2,%eax
    6a8d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6a93:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6a9a:	48 05 90 00 00 00    	add    $0x90,%rax
    6aa0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6aa7 <_ZN6Parser10compileHWSEv+0x23b>
    6aa7:	48 89 c7             	mov    %rax,%rdi
    6aaa:	e8 00 00 00 00       	callq  6aaf <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6aaf:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6ab6:	48 89 c7             	mov    %rax,%rdi
    6ab9:	e8 00 00 00 00       	callq  6abe <_ZN6Parser10compileHWSEv+0x252>
    6abe:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6ac4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6ac8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6acf <_ZN6Parser10compileHWSEv+0x263>
    6acf:	48 89 c7             	mov    %rax,%rdi
    6ad2:	e8 00 00 00 00       	callq  6ad7 <_ZN6Parser10compileHWSEv+0x26b>
    6ad7:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6adb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6ae2:	b9 00 00 00 00       	mov    $0x0,%ecx
    6ae7:	ba 01 00 00 00       	mov    $0x1,%edx
    6aec:	48 89 c7             	mov    %rax,%rdi
    6aef:	e8 00 00 00 00       	callq  6af4 <_ZN6Parser10compileHWSEv+0x288>
    6af4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6af8:	48 89 c7             	mov    %rax,%rdi
    6afb:	e8 00 00 00 00       	callq  6b00 <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6b00:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6b04:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6b0b <_ZN6Parser10compileHWSEv+0x29f>
    6b0b:	48 89 c7             	mov    %rax,%rdi
    6b0e:	e8 00 00 00 00       	callq  6b13 <_ZN6Parser10compileHWSEv+0x2a7>
    6b13:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6b17:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6b1e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6b23:	ba 01 00 00 00       	mov    $0x1,%edx
    6b28:	48 89 c7             	mov    %rax,%rdi
    6b2b:	e8 00 00 00 00       	callq  6b30 <_ZN6Parser10compileHWSEv+0x2c4>
    6b30:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6b34:	48 89 c7             	mov    %rax,%rdi
    6b37:	e8 00 00 00 00       	callq  6b3c <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6b3c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6b43:	48 89 c7             	mov    %rax,%rdi
    6b46:	e8 00 00 00 00       	callq  6b4b <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6b4b:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6b52:	00 00 00 
    6b55:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6b5b:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6b61:	0f 8d 65 04 00 00    	jge    6fcc <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6b67:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6b6d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6b74:	89 d6                	mov    %edx,%esi
    6b76:	48 89 c7             	mov    %rax,%rdi
    6b79:	e8 00 00 00 00       	callq  6b7e <_ZN6Parser10compileHWSEv+0x312>
    6b7e:	48 89 c2             	mov    %rax,%rdx
    6b81:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6b88:	48 89 d6             	mov    %rdx,%rsi
    6b8b:	48 89 c7             	mov    %rax,%rdi
    6b8e:	e8 00 00 00 00       	callq  6b93 <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6b93:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b9a:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6b9e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6ba5:	48 89 c6             	mov    %rax,%rsi
    6ba8:	48 89 d7             	mov    %rdx,%rdi
    6bab:	e8 00 00 00 00       	callq  6bb0 <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    6bb0:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6bb7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6bbe:	b9 00 00 00 00       	mov    $0x0,%ecx
    6bc3:	ba 00 00 00 00       	mov    $0x0,%edx
    6bc8:	48 89 c7             	mov    %rax,%rdi
    6bcb:	e8 00 00 00 00       	callq  6bd0 <_ZN6Parser10compileHWSEv+0x364>
    6bd0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6bd6:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6bdd:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6be4:	b9 00 00 00 00       	mov    $0x0,%ecx
    6be9:	ba 00 00 00 00       	mov    $0x0,%edx
    6bee:	48 89 c7             	mov    %rax,%rdi
    6bf1:	e8 00 00 00 00       	callq  6bf6 <_ZN6Parser10compileHWSEv+0x38a>
    6bf6:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6bfc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6c00:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6c07:	48 89 d6             	mov    %rdx,%rsi
    6c0a:	48 89 c7             	mov    %rax,%rdi
    6c0d:	e8 00 00 00 00       	callq  6c12 <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    6c12:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6c16:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6c1d:	48 89 d6             	mov    %rdx,%rsi
    6c20:	48 89 c7             	mov    %rax,%rdi
    6c23:	e8 00 00 00 00       	callq  6c28 <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    6c28:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6c2f:	0f 8e 3e 01 00 00    	jle    6d73 <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6c35:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6c3c:	83 c0 01             	add    $0x1,%eax
    6c3f:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6c46:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c4a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6c51 <_ZN6Parser10compileHWSEv+0x3e5>
    6c51:	48 89 c7             	mov    %rax,%rdi
    6c54:	e8 00 00 00 00       	callq  6c59 <_ZN6Parser10compileHWSEv+0x3ed>
    6c59:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c60:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6c64:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c68:	48 89 c6             	mov    %rax,%rsi
    6c6b:	48 89 d7             	mov    %rdx,%rdi
    6c6e:	e8 00 00 00 00       	callq  6c73 <_ZN6Parser10compileHWSEv+0x407>
    6c73:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c77:	48 89 c7             	mov    %rax,%rdi
    6c7a:	e8 00 00 00 00       	callq  6c7f <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    6c7f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6c83:	be 01 00 00 00       	mov    $0x1,%esi
    6c88:	48 89 c7             	mov    %rax,%rdi
    6c8b:	e8 00 00 00 00       	callq  6c90 <_ZN6Parser10compileHWSEv+0x424>
    6c90:	48 89 c2             	mov    %rax,%rdx
    6c93:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6c97:	48 89 d6             	mov    %rdx,%rsi
    6c9a:	48 89 c7             	mov    %rax,%rdi
    6c9d:	e8 00 00 00 00       	callq  6ca2 <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6ca2:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ca9:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6cad:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6cb1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6cb5:	48 89 ce             	mov    %rcx,%rsi
    6cb8:	48 89 c7             	mov    %rax,%rdi
    6cbb:	e8 00 00 00 00       	callq  6cc0 <_ZN6Parser10compileHWSEv+0x454>
    6cc0:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6cc4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6cc8:	ba 10 00 00 00       	mov    $0x10,%edx
    6ccd:	48 89 ce             	mov    %rcx,%rsi
    6cd0:	48 89 c7             	mov    %rax,%rdi
    6cd3:	e8 00 00 00 00       	callq  6cd8 <_ZN6Parser10compileHWSEv+0x46c>
    6cd8:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6cdf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6ce3:	48 89 c7             	mov    %rax,%rdi
    6ce6:	e8 00 00 00 00       	callq  6ceb <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    6ceb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cf2:	48 05 90 00 00 00    	add    $0x90,%rax
    6cf8:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6cfd:	48 89 c7             	mov    %rax,%rdi
    6d00:	e8 00 00 00 00       	callq  6d05 <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    6d05:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d0c:	48 05 90 00 00 00    	add    $0x90,%rax
    6d12:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6d17:	48 89 c7             	mov    %rax,%rdi
    6d1a:	e8 00 00 00 00       	callq  6d1f <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    6d1f:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6d26:	0f be c0             	movsbl %al,%eax
    6d29:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6d30:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6d37:	89 c6                	mov    %eax,%esi
    6d39:	48 89 d7             	mov    %rdx,%rdi
    6d3c:	e8 00 00 00 00       	callq  6d41 <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    6d41:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6d48:	66 c1 e8 08          	shr    $0x8,%ax
    6d4c:	0f be c0             	movsbl %al,%eax
    6d4f:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6d56:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6d5d:	89 c6                	mov    %eax,%esi
    6d5f:	48 89 d7             	mov    %rdx,%rdi
    6d62:	e8 00 00 00 00       	callq  6d67 <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6d67:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6d6b:	48 89 c7             	mov    %rax,%rdi
    6d6e:	e8 00 00 00 00       	callq  6d73 <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    6d73:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6d7a:	0f 8e 28 02 00 00    	jle    6fa8 <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    6d80:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6d87:	83 c0 01             	add    $0x1,%eax
    6d8a:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    6d91:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6d98:	83 c0 01             	add    $0x1,%eax
    6d9b:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    6da2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6da6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6dad <_ZN6Parser10compileHWSEv+0x541>
    6dad:	48 89 c7             	mov    %rax,%rdi
    6db0:	e8 00 00 00 00       	callq  6db5 <_ZN6Parser10compileHWSEv+0x549>
    6db5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6dbc:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6dc0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6dc4:	48 89 c6             	mov    %rax,%rsi
    6dc7:	48 89 d7             	mov    %rdx,%rdi
    6dca:	e8 00 00 00 00       	callq  6dcf <_ZN6Parser10compileHWSEv+0x563>
    6dcf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6dd3:	48 89 c7             	mov    %rax,%rdi
    6dd6:	e8 00 00 00 00       	callq  6ddb <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    6ddb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6ddf:	be 01 00 00 00       	mov    $0x1,%esi
    6de4:	48 89 c7             	mov    %rax,%rdi
    6de7:	e8 00 00 00 00       	callq  6dec <_ZN6Parser10compileHWSEv+0x580>
    6dec:	48 89 c2             	mov    %rax,%rdx
    6def:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6df3:	48 89 d6             	mov    %rdx,%rsi
    6df6:	48 89 c7             	mov    %rax,%rdi
    6df9:	e8 00 00 00 00       	callq  6dfe <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    6dfe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e02:	be 02 00 00 00       	mov    $0x2,%esi
    6e07:	48 89 c7             	mov    %rax,%rdi
    6e0a:	e8 00 00 00 00       	callq  6e0f <_ZN6Parser10compileHWSEv+0x5a3>
    6e0f:	48 89 c2             	mov    %rax,%rdx
    6e12:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6e16:	48 89 d6             	mov    %rdx,%rsi
    6e19:	48 89 c7             	mov    %rax,%rdi
    6e1c:	e8 00 00 00 00       	callq  6e21 <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    6e21:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    6e28:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6e2f:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6e33:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6e37:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6e3b:	48 89 ce             	mov    %rcx,%rsi
    6e3e:	48 89 c7             	mov    %rax,%rdi
    6e41:	e8 00 00 00 00       	callq  6e46 <_ZN6Parser10compileHWSEv+0x5da>
    6e46:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    6e4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6e4e:	ba 10 00 00 00       	mov    $0x10,%edx
    6e53:	48 89 ce             	mov    %rcx,%rsi
    6e56:	48 89 c7             	mov    %rax,%rdi
    6e59:	e8 00 00 00 00       	callq  6e5e <_ZN6Parser10compileHWSEv+0x5f2>
    6e5e:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    6e64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6e68:	48 89 c7             	mov    %rax,%rdi
    6e6b:	e8 00 00 00 00       	callq  6e70 <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    6e70:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    6e74:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6e78:	ba 0a 00 00 00       	mov    $0xa,%edx
    6e7d:	48 89 ce             	mov    %rcx,%rsi
    6e80:	48 89 c7             	mov    %rax,%rdi
    6e83:	e8 00 00 00 00       	callq  6e88 <_ZN6Parser10compileHWSEv+0x61c>
    6e88:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    6e8f:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    6e93:	84 c0                	test   %al,%al
    6e95:	74 6d                	je     6f04 <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    6e97:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    6e9b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6ea2:	ba 00 00 00 00       	mov    $0x0,%edx
    6ea7:	48 89 ce             	mov    %rcx,%rsi
    6eaa:	48 89 c7             	mov    %rax,%rdi
    6ead:	e8 00 00 00 00       	callq  6eb2 <_ZN6Parser10compileHWSEv+0x646>
    6eb2:	83 f0 01             	xor    $0x1,%eax
    6eb5:	84 c0                	test   %al,%al
    6eb7:	74 2a                	je     6ee3 <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    6eb9:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6ebd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6ec4:	48 89 d6             	mov    %rdx,%rsi
    6ec7:	48 89 c7             	mov    %rax,%rdi
    6eca:	e8 00 00 00 00       	callq  6ecf <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    6ecf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6ed6:	48 89 c7             	mov    %rax,%rdi
    6ed9:	e8 00 00 00 00       	callq  6ede <_ZN6Parser10compileHWSEv+0x672>
    6ede:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    6ee3:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    6ee7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6eee:	ba 00 00 00 00       	mov    $0x0,%edx
    6ef3:	48 89 ce             	mov    %rcx,%rsi
    6ef6:	48 89 c7             	mov    %rax,%rdi
    6ef9:	e8 00 00 00 00       	callq  6efe <_ZN6Parser10compileHWSEv+0x692>
    6efe:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    6f04:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    6f0b:	0f be c0             	movsbl %al,%eax
    6f0e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f15:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f1c:	89 c6                	mov    %eax,%esi
    6f1e:	48 89 d7             	mov    %rdx,%rdi
    6f21:	e8 00 00 00 00       	callq  6f26 <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    6f26:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    6f2d:	0f be c0             	movsbl %al,%eax
    6f30:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f37:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f3e:	89 c6                	mov    %eax,%esi
    6f40:	48 89 d7             	mov    %rdx,%rdi
    6f43:	e8 00 00 00 00       	callq  6f48 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    6f48:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    6f4f:	0f be c0             	movsbl %al,%eax
    6f52:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f59:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f60:	89 c6                	mov    %eax,%esi
    6f62:	48 89 d7             	mov    %rdx,%rdi
    6f65:	e8 00 00 00 00       	callq  6f6a <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    6f6a:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    6f71:	66 c1 e8 08          	shr    $0x8,%ax
    6f75:	0f be c0             	movsbl %al,%eax
    6f78:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f7f:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f86:	89 c6                	mov    %eax,%esi
    6f88:	48 89 d7             	mov    %rdx,%rdi
    6f8b:	e8 00 00 00 00       	callq  6f90 <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    6f90:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6f94:	48 89 c7             	mov    %rax,%rdi
    6f97:	e8 00 00 00 00       	callq  6f9c <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    6f9c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6fa0:	48 89 c7             	mov    %rax,%rdi
    6fa3:	e8 00 00 00 00       	callq  6fa8 <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    6fa8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6fac:	48 89 c7             	mov    %rax,%rdi
    6faf:	e8 00 00 00 00       	callq  6fb4 <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    6fb4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6fb8:	48 89 c7             	mov    %rax,%rdi
    6fbb:	e8 00 00 00 00       	callq  6fc0 <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    6fc0:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    6fc7:	e9 89 fb ff ff       	jmpq   6b55 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    6fcc:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6fd3:	0f be d8             	movsbl %al,%ebx
    6fd6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6fdd:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6fe4:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    6fea:	89 c6                	mov    %eax,%esi
    6fec:	48 89 d7             	mov    %rdx,%rdi
    6fef:	e8 00 00 00 00       	callq  6ff4 <_ZN6Parser10compileHWSEv+0x788>
    6ff4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6ff8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    6ffc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7000:	89 de                	mov    %ebx,%esi
    7002:	48 89 c7             	mov    %rax,%rdi
    7005:	e8 00 00 00 00       	callq  700a <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    700a:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7011:	66 c1 e8 08          	shr    $0x8,%ax
    7015:	0f be d8             	movsbl %al,%ebx
    7018:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    701e:	8d 50 01             	lea    0x1(%rax),%edx
    7021:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7028:	48 05 90 00 00 00    	add    $0x90,%rax
    702e:	89 d6                	mov    %edx,%esi
    7030:	48 89 c7             	mov    %rax,%rdi
    7033:	e8 00 00 00 00       	callq  7038 <_ZN6Parser10compileHWSEv+0x7cc>
    7038:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    703c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7040:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7044:	89 de                	mov    %ebx,%esi
    7046:	48 89 c7             	mov    %rax,%rdi
    7049:	e8 00 00 00 00       	callq  704e <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    704e:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7055:	0f be d8             	movsbl %al,%ebx
    7058:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    705f:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7066:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    706c:	89 c6                	mov    %eax,%esi
    706e:	48 89 d7             	mov    %rdx,%rdi
    7071:	e8 00 00 00 00       	callq  7076 <_ZN6Parser10compileHWSEv+0x80a>
    7076:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    707a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    707e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7082:	89 de                	mov    %ebx,%esi
    7084:	48 89 c7             	mov    %rax,%rdi
    7087:	e8 00 00 00 00       	callq  708c <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    708c:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7093:	66 c1 e8 08          	shr    $0x8,%ax
    7097:	0f be d8             	movsbl %al,%ebx
    709a:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    70a0:	8d 50 01             	lea    0x1(%rax),%edx
    70a3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    70aa:	48 05 90 00 00 00    	add    $0x90,%rax
    70b0:	89 d6                	mov    %edx,%esi
    70b2:	48 89 c7             	mov    %rax,%rdi
    70b5:	e8 00 00 00 00       	callq  70ba <_ZN6Parser10compileHWSEv+0x84e>
    70ba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    70be:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    70c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70c6:	89 de                	mov    %ebx,%esi
    70c8:	48 89 c7             	mov    %rax,%rdi
    70cb:	e8 00 00 00 00       	callq  70d0 <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    70d0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    70d7:	48 89 c7             	mov    %rax,%rdi
    70da:	e8 00 00 00 00       	callq  70df <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    70df:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    70e6:	48 89 c7             	mov    %rax,%rdi
    70e9:	e8 00 00 00 00       	callq  70ee <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    70ee:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    70f5:	48 89 c7             	mov    %rax,%rdi
    70f8:	e8 00 00 00 00       	callq  70fd <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    70fd:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7104:	48 89 c7             	mov    %rax,%rdi
    7107:	e8 00 00 00 00       	callq  710c <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    710c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    7113:	48 89 c7             	mov    %rax,%rdi
    7116:	e8 00 00 00 00       	callq  711b <_ZN6Parser10compileHWSEv+0x8af>
    711b:	e9 dd f7 ff ff       	jmpq   68fd <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7120:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7127:	0f be d8             	movsbl %al,%ebx
    712a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7131:	48 05 90 00 00 00    	add    $0x90,%rax
    7137:	be 04 00 00 00       	mov    $0x4,%esi
    713c:	48 89 c7             	mov    %rax,%rdi
    713f:	e8 00 00 00 00       	callq  7144 <_ZN6Parser10compileHWSEv+0x8d8>
    7144:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7148:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    714c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7150:	89 de                	mov    %ebx,%esi
    7152:	48 89 c7             	mov    %rax,%rdi
    7155:	e8 00 00 00 00       	callq  715a <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    715a:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7161:	66 c1 e8 08          	shr    $0x8,%ax
    7165:	0f be d8             	movsbl %al,%ebx
    7168:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    716f:	48 05 90 00 00 00    	add    $0x90,%rax
    7175:	be 05 00 00 00       	mov    $0x5,%esi
    717a:	48 89 c7             	mov    %rax,%rdi
    717d:	e8 00 00 00 00       	callq  7182 <_ZN6Parser10compileHWSEv+0x916>
    7182:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7186:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    718a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    718e:	89 de                	mov    %ebx,%esi
    7190:	48 89 c7             	mov    %rax,%rdi
    7193:	e8 00 00 00 00       	callq  7198 <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    7198:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    719f:	48 89 c7             	mov    %rax,%rdi
    71a2:	e8 00 00 00 00       	callq  71a7 <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    71a7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    71ae:	48 89 c7             	mov    %rax,%rdi
    71b1:	e8 00 00 00 00       	callq  71b6 <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    71b6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    71bd:	48 89 c7             	mov    %rax,%rdi
    71c0:	e8 00 00 00 00       	callq  71c5 <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    71c5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    71cc:	48 89 c7             	mov    %rax,%rdi
    71cf:	e8 00 00 00 00       	callq  71d4 <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    71d4:	90                   	nop
    71d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    71d9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    71e0:	00 00 
    71e2:	0f 84 8e 01 00 00    	je     7376 <_ZN6Parser10compileHWSEv+0xb0a>
    71e8:	e9 84 01 00 00       	jmpq   7371 <_ZN6Parser10compileHWSEv+0xb05>
    71ed:	48 89 c3             	mov    %rax,%rbx
    71f0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    71f4:	48 89 c7             	mov    %rax,%rdi
    71f7:	e8 00 00 00 00       	callq  71fc <_ZN6Parser10compileHWSEv+0x990>
    71fc:	e9 1a 01 00 00       	jmpq   731b <_ZN6Parser10compileHWSEv+0xaaf>
    7201:	48 89 c3             	mov    %rax,%rbx
    7204:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    720b:	48 89 c7             	mov    %rax,%rdi
    720e:	e8 00 00 00 00       	callq  7213 <_ZN6Parser10compileHWSEv+0x9a7>
    7213:	e9 03 01 00 00       	jmpq   731b <_ZN6Parser10compileHWSEv+0xaaf>
    7218:	48 89 c3             	mov    %rax,%rbx
    721b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    721f:	48 89 c7             	mov    %rax,%rdi
    7222:	e8 00 00 00 00       	callq  7227 <_ZN6Parser10compileHWSEv+0x9bb>
    7227:	e9 db 00 00 00       	jmpq   7307 <_ZN6Parser10compileHWSEv+0xa9b>
    722c:	48 89 c3             	mov    %rax,%rbx
    722f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7236:	48 89 c7             	mov    %rax,%rdi
    7239:	e8 00 00 00 00       	callq  723e <_ZN6Parser10compileHWSEv+0x9d2>
    723e:	e9 c4 00 00 00       	jmpq   7307 <_ZN6Parser10compileHWSEv+0xa9b>
    7243:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    7246:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    724a:	48 89 c7             	mov    %rax,%rdi
    724d:	e8 00 00 00 00       	callq  7252 <_ZN6Parser10compileHWSEv+0x9e6>
    7252:	eb 69                	jmp    72bd <_ZN6Parser10compileHWSEv+0xa51>
    7254:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    7257:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    725b:	48 89 c7             	mov    %rax,%rdi
    725e:	e8 00 00 00 00       	callq  7263 <_ZN6Parser10compileHWSEv+0x9f7>
    7263:	eb 03                	jmp    7268 <_ZN6Parser10compileHWSEv+0x9fc>
    7265:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    7268:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    726c:	48 89 c7             	mov    %rax,%rdi
    726f:	e8 00 00 00 00       	callq  7274 <_ZN6Parser10compileHWSEv+0xa08>
    7274:	eb 47                	jmp    72bd <_ZN6Parser10compileHWSEv+0xa51>
    7276:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    7279:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    727d:	48 89 c7             	mov    %rax,%rdi
    7280:	e8 00 00 00 00       	callq  7285 <_ZN6Parser10compileHWSEv+0xa19>
    7285:	eb 36                	jmp    72bd <_ZN6Parser10compileHWSEv+0xa51>
    7287:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    728a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    728e:	48 89 c7             	mov    %rax,%rdi
    7291:	e8 00 00 00 00       	callq  7296 <_ZN6Parser10compileHWSEv+0xa2a>
    7296:	eb 03                	jmp    729b <_ZN6Parser10compileHWSEv+0xa2f>
    7298:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    729b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    729f:	48 89 c7             	mov    %rax,%rdi
    72a2:	e8 00 00 00 00       	callq  72a7 <_ZN6Parser10compileHWSEv+0xa3b>
    72a7:	eb 03                	jmp    72ac <_ZN6Parser10compileHWSEv+0xa40>
    72a9:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    72ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    72b0:	48 89 c7             	mov    %rax,%rdi
    72b3:	e8 00 00 00 00       	callq  72b8 <_ZN6Parser10compileHWSEv+0xa4c>
    72b8:	eb 03                	jmp    72bd <_ZN6Parser10compileHWSEv+0xa51>
    72ba:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    72bd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    72c1:	48 89 c7             	mov    %rax,%rdi
    72c4:	e8 00 00 00 00       	callq  72c9 <_ZN6Parser10compileHWSEv+0xa5d>
    72c9:	eb 03                	jmp    72ce <_ZN6Parser10compileHWSEv+0xa62>
    72cb:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    72ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    72d2:	48 89 c7             	mov    %rax,%rdi
    72d5:	e8 00 00 00 00       	callq  72da <_ZN6Parser10compileHWSEv+0xa6e>
    72da:	eb 03                	jmp    72df <_ZN6Parser10compileHWSEv+0xa73>
    72dc:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    72df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    72e6:	48 89 c7             	mov    %rax,%rdi
    72e9:	e8 00 00 00 00       	callq  72ee <_ZN6Parser10compileHWSEv+0xa82>
    72ee:	eb 03                	jmp    72f3 <_ZN6Parser10compileHWSEv+0xa87>
    72f0:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    72f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    72fa:	48 89 c7             	mov    %rax,%rdi
    72fd:	e8 00 00 00 00       	callq  7302 <_ZN6Parser10compileHWSEv+0xa96>
    7302:	eb 03                	jmp    7307 <_ZN6Parser10compileHWSEv+0xa9b>
    7304:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7307:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    730e:	48 89 c7             	mov    %rax,%rdi
    7311:	e8 00 00 00 00       	callq  7316 <_ZN6Parser10compileHWSEv+0xaaa>
    7316:	eb 03                	jmp    731b <_ZN6Parser10compileHWSEv+0xaaf>
    7318:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    731b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7322:	48 89 c7             	mov    %rax,%rdi
    7325:	e8 00 00 00 00       	callq  732a <_ZN6Parser10compileHWSEv+0xabe>
    732a:	eb 03                	jmp    732f <_ZN6Parser10compileHWSEv+0xac3>
    732c:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    732f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7336:	48 89 c7             	mov    %rax,%rdi
    7339:	e8 00 00 00 00       	callq  733e <_ZN6Parser10compileHWSEv+0xad2>
    733e:	eb 03                	jmp    7343 <_ZN6Parser10compileHWSEv+0xad7>
    7340:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7343:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    734a:	48 89 c7             	mov    %rax,%rdi
    734d:	e8 00 00 00 00       	callq  7352 <_ZN6Parser10compileHWSEv+0xae6>
    7352:	eb 03                	jmp    7357 <_ZN6Parser10compileHWSEv+0xaeb>
    7354:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    7357:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    735e:	48 89 c7             	mov    %rax,%rdi
    7361:	e8 00 00 00 00       	callq  7366 <_ZN6Parser10compileHWSEv+0xafa>
    7366:	48 89 d8             	mov    %rbx,%rax
    7369:	48 89 c7             	mov    %rax,%rdi
    736c:	e8 00 00 00 00       	callq  7371 <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7371:	e8 00 00 00 00       	callq  7376 <_ZN6Parser10compileHWSEv+0xb0a>
    7376:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    737d:	5b                   	pop    %rbx
    737e:	5d                   	pop    %rbp
    737f:	c3                   	retq   

0000000000007380 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    7380:	55                   	push   %rbp
    7381:	48 89 e5             	mov    %rsp,%rbp
    7384:	53                   	push   %rbx
    7385:	48 83 ec 58          	sub    $0x58,%rsp
    7389:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    738d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7394:	00 00 
    7396:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    739a:	31 c0                	xor    %eax,%eax

    int i = 0;
    739c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    73a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    73a7:	48 83 c0 78          	add    $0x78,%rax
    73ab:	48 89 c7             	mov    %rax,%rdi
    73ae:	e8 00 00 00 00       	callq  73b3 <_ZN6Parser9selectHWSEv+0x33>
    73b3:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    73b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    73ba:	48 89 c7             	mov    %rax,%rdi
    73bd:	e8 00 00 00 00       	callq  73c2 <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    73c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73c6:	48 89 c7             	mov    %rax,%rdi
    73c9:	e8 00 00 00 00       	callq  73ce <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    73ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    73d2:	48 83 c0 78          	add    $0x78,%rax
    73d6:	48 89 c7             	mov    %rax,%rdi
    73d9:	e8 00 00 00 00       	callq  73de <_ZN6Parser9selectHWSEv+0x5e>
    73de:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    73e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    73e6:	48 83 c0 78          	add    $0x78,%rax
    73ea:	48 89 c7             	mov    %rax,%rdi
    73ed:	e8 00 00 00 00       	callq  73f2 <_ZN6Parser9selectHWSEv+0x72>
    73f2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    73f6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    73fa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    73fe:	48 89 d6             	mov    %rdx,%rsi
    7401:	48 89 c7             	mov    %rax,%rdi
    7404:	e8 00 00 00 00       	callq  7409 <_ZN6Parser9selectHWSEv+0x89>
    7409:	84 c0                	test   %al,%al
    740b:	74 50                	je     745d <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    740d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7411:	48 89 c7             	mov    %rax,%rdi
    7414:	e8 00 00 00 00       	callq  7419 <_ZN6Parser9selectHWSEv+0x99>
    7419:	be 00 00 00 00       	mov    $0x0,%esi
    741e:	48 89 c7             	mov    %rax,%rdi
    7421:	e8 00 00 00 00       	callq  7426 <_ZN6Parser9selectHWSEv+0xa6>
    7426:	48 89 c2             	mov    %rax,%rdx
    7429:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    742d:	48 89 d6             	mov    %rdx,%rsi
    7430:	48 89 c7             	mov    %rax,%rdi
    7433:	e8 00 00 00 00       	callq  7438 <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    7438:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    743c:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7440:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7444:	48 89 c6             	mov    %rax,%rsi
    7447:	48 89 d7             	mov    %rdx,%rdi
    744a:	e8 00 00 00 00       	callq  744f <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    744f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7453:	48 89 c7             	mov    %rax,%rdi
    7456:	e8 00 00 00 00       	callq  745b <_ZN6Parser9selectHWSEv+0xdb>
    745b:	eb 85                	jmp    73e2 <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    745d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    7464:	8b 45 b8             	mov    -0x48(%rbp),%eax
    7467:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    746a:	7d 06                	jge    7472 <_ZN6Parser9selectHWSEv+0xf2>
    746c:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    7470:	eb f2                	jmp    7464 <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    7472:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7476:	48 89 c7             	mov    %rax,%rdi
    7479:	e8 00 00 00 00       	callq  747e <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    747e:	90                   	nop
    747f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7483:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    748a:	00 00 
    748c:	74 21                	je     74af <_ZN6Parser9selectHWSEv+0x12f>
    748e:	eb 1a                	jmp    74aa <_ZN6Parser9selectHWSEv+0x12a>
    7490:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    7493:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7497:	48 89 c7             	mov    %rax,%rdi
    749a:	e8 00 00 00 00       	callq  749f <_ZN6Parser9selectHWSEv+0x11f>
    749f:	48 89 d8             	mov    %rbx,%rax
    74a2:	48 89 c7             	mov    %rax,%rdi
    74a5:	e8 00 00 00 00       	callq  74aa <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    74aa:	e8 00 00 00 00       	callq  74af <_ZN6Parser9selectHWSEv+0x12f>
    74af:	48 83 c4 58          	add    $0x58,%rsp
    74b3:	5b                   	pop    %rbx
    74b4:	5d                   	pop    %rbp
    74b5:	c3                   	retq   

00000000000074b6 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    74b6:	55                   	push   %rbp
    74b7:	48 89 e5             	mov    %rsp,%rbp
    74ba:	53                   	push   %rbx
    74bb:	48 83 ec 68          	sub    $0x68,%rsp
    74bf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    74c3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    74ca:	00 00 
    74cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    74d0:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    74d2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    74d6:	48 89 c7             	mov    %rax,%rdi
    74d9:	e8 00 00 00 00       	callq  74de <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    74de:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    74e2:	48 8d 50 58          	lea    0x58(%rax),%rdx
    74e6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74ea:	48 89 d6             	mov    %rdx,%rsi
    74ed:	48 89 c7             	mov    %rax,%rdi
    74f0:	e8 00 00 00 00       	callq  74f5 <_ZN6Parser12loadIncludesEv+0x3f>
    74f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    74f9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    74fd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7501:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7505:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7509:	48 89 d6             	mov    %rdx,%rsi
    750c:	48 89 c7             	mov    %rax,%rdi
    750f:	e8 00 00 00 00       	callq  7514 <_ZN6Parser12loadIncludesEv+0x5e>
    7514:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7518:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    751c:	48 89 d6             	mov    %rdx,%rsi
    751f:	48 89 c7             	mov    %rax,%rdi
    7522:	e8 00 00 00 00       	callq  7527 <_ZN6Parser12loadIncludesEv+0x71>
    7527:	84 c0                	test   %al,%al
    7529:	0f 84 dc 00 00 00    	je     760b <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    752f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7533:	48 89 c7             	mov    %rax,%rdi
    7536:	e8 00 00 00 00       	callq  753b <_ZN6Parser12loadIncludesEv+0x85>
    753b:	48 89 c2             	mov    %rax,%rdx
    753e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7542:	48 89 d6             	mov    %rdx,%rsi
    7545:	48 89 c7             	mov    %rax,%rdi
    7548:	e8 00 00 00 00       	callq  754d <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    754d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7551:	be 01 00 00 00       	mov    $0x1,%esi
    7556:	48 89 c7             	mov    %rax,%rdi
    7559:	e8 00 00 00 00       	callq  755e <_ZN6Parser12loadIncludesEv+0xa8>
    755e:	8b 55 d0             	mov    -0x30(%rbp),%edx
    7561:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7565:	89 d6                	mov    %edx,%esi
    7567:	48 89 c7             	mov    %rax,%rdi
    756a:	e8 00 00 00 00       	callq  756f <_ZN6Parser12loadIncludesEv+0xb9>
    756f:	84 c0                	test   %al,%al
    7571:	74 7b                	je     75ee <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    7573:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    7577:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    757b:	48 89 d6             	mov    %rdx,%rsi
    757e:	48 89 c7             	mov    %rax,%rdi
    7581:	e8 00 00 00 00       	callq  7586 <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    7586:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    758a:	48 89 c7             	mov    %rax,%rdi
    758d:	e8 00 00 00 00       	callq  7592 <_ZN6Parser12loadIncludesEv+0xdc>
    7592:	83 f0 01             	xor    $0x1,%eax
    7595:	84 c0                	test   %al,%al
    7597:	74 3d                	je     75d6 <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    7599:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    759d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    75a1:	ba 00 00 00 00       	mov    $0x0,%edx
    75a6:	48 89 ce             	mov    %rcx,%rsi
    75a9:	48 89 c7             	mov    %rax,%rdi
    75ac:	e8 00 00 00 00       	callq  75b1 <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    75b1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    75b5:	48 8d 50 60          	lea    0x60(%rax),%rdx
    75b9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    75bd:	48 89 c6             	mov    %rax,%rsi
    75c0:	48 89 d7             	mov    %rdx,%rdi
    75c3:	e8 00 00 00 00       	callq  75c8 <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    75c8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    75cc:	48 89 c7             	mov    %rax,%rdi
    75cf:	e8 00 00 00 00       	callq  75d4 <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    75d4:	eb b0                	jmp    7586 <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    75d6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    75da:	48 89 c7             	mov    %rax,%rdi
    75dd:	e8 00 00 00 00       	callq  75e2 <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    75e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    75e6:	48 89 c7             	mov    %rax,%rdi
    75e9:	e8 00 00 00 00       	callq  75ee <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    75ee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    75f2:	48 89 c7             	mov    %rax,%rdi
    75f5:	e8 00 00 00 00       	callq  75fa <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    75fa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    75fe:	48 89 c7             	mov    %rax,%rdi
    7601:	e8 00 00 00 00       	callq  7606 <_ZN6Parser12loadIncludesEv+0x150>
    7606:	e9 f2 fe ff ff       	jmpq   74fd <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    760b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    760f:	48 89 c7             	mov    %rax,%rdi
    7612:	e8 00 00 00 00       	callq  7617 <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    7617:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    761b:	48 8d 50 60          	lea    0x60(%rax),%rdx
    761f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7623:	48 89 d6             	mov    %rdx,%rsi
    7626:	48 89 c7             	mov    %rax,%rdi
    7629:	e8 00 00 00 00       	callq  762e <_ZN6Parser12loadIncludesEv+0x178>
    762e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7632:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7636:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    763a:	48 8d 50 60          	lea    0x60(%rax),%rdx
    763e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7642:	48 89 d6             	mov    %rdx,%rsi
    7645:	48 89 c7             	mov    %rax,%rdi
    7648:	e8 00 00 00 00       	callq  764d <_ZN6Parser12loadIncludesEv+0x197>
    764d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7651:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7655:	48 89 d6             	mov    %rdx,%rsi
    7658:	48 89 c7             	mov    %rax,%rdi
    765b:	e8 00 00 00 00       	callq  7660 <_ZN6Parser12loadIncludesEv+0x1aa>
    7660:	84 c0                	test   %al,%al
    7662:	74 2c                	je     7690 <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    7664:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7668:	48 89 c7             	mov    %rax,%rdi
    766b:	e8 00 00 00 00       	callq  7670 <_ZN6Parser12loadIncludesEv+0x1ba>
    7670:	48 89 c2             	mov    %rax,%rdx
    7673:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7677:	48 89 d6             	mov    %rdx,%rsi
    767a:	48 89 c7             	mov    %rax,%rdi
    767d:	e8 00 00 00 00       	callq  7682 <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    7682:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7686:	48 89 c7             	mov    %rax,%rdi
    7689:	e8 00 00 00 00       	callq  768e <_ZN6Parser12loadIncludesEv+0x1d8>
    768e:	eb a6                	jmp    7636 <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    7690:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7694:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7698:	48 89 d6             	mov    %rdx,%rsi
    769b:	48 89 c7             	mov    %rax,%rdi
    769e:	e8 00 00 00 00       	callq  76a3 <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    76a3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    76a7:	48 89 c7             	mov    %rax,%rdi
    76aa:	e8 00 00 00 00       	callq  76af <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    76af:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    76b3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    76ba:	00 00 
    76bc:	74 5d                	je     771b <_ZN6Parser12loadIncludesEv+0x265>
    76be:	eb 56                	jmp    7716 <_ZN6Parser12loadIncludesEv+0x260>
    76c0:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    76c3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    76c7:	48 89 c7             	mov    %rax,%rdi
    76ca:	e8 00 00 00 00       	callq  76cf <_ZN6Parser12loadIncludesEv+0x219>
    76cf:	eb 03                	jmp    76d4 <_ZN6Parser12loadIncludesEv+0x21e>
    76d1:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    76d4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76d8:	48 89 c7             	mov    %rax,%rdi
    76db:	e8 00 00 00 00       	callq  76e0 <_ZN6Parser12loadIncludesEv+0x22a>
    76e0:	eb 03                	jmp    76e5 <_ZN6Parser12loadIncludesEv+0x22f>
    76e2:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    76e5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76e9:	48 89 c7             	mov    %rax,%rdi
    76ec:	e8 00 00 00 00       	callq  76f1 <_ZN6Parser12loadIncludesEv+0x23b>
    76f1:	48 89 d8             	mov    %rbx,%rax
    76f4:	48 89 c7             	mov    %rax,%rdi
    76f7:	e8 00 00 00 00       	callq  76fc <_ZN6Parser12loadIncludesEv+0x246>
    76fc:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    76ff:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7703:	48 89 c7             	mov    %rax,%rdi
    7706:	e8 00 00 00 00       	callq  770b <_ZN6Parser12loadIncludesEv+0x255>
    770b:	48 89 d8             	mov    %rbx,%rax
    770e:	48 89 c7             	mov    %rax,%rdi
    7711:	e8 00 00 00 00       	callq  7716 <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    7716:	e8 00 00 00 00       	callq  771b <_ZN6Parser12loadIncludesEv+0x265>
    771b:	48 83 c4 68          	add    $0x68,%rsp
    771f:	5b                   	pop    %rbx
    7720:	5d                   	pop    %rbp
    7721:	c3                   	retq   

0000000000007722 <_ZN6Parser13compileModuleE7QString>:

QByteArray Parser::compileModule(QString key){
    7722:	55                   	push   %rbp
    7723:	48 89 e5             	mov    %rsp,%rbp
    7726:	53                   	push   %rbx
    7727:	48 83 ec 48          	sub    $0x48,%rsp
    772b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    772f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7733:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    7737:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    773e:	00 00 
    7740:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7744:	31 c0                	xor    %eax,%eax
    QStringList M = this->sorted.take(key);
    7746:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    774a:	48 8d 48 78          	lea    0x78(%rax),%rcx
    774e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7752:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7756:	48 89 ce             	mov    %rcx,%rsi
    7759:	48 89 c7             	mov    %rax,%rdi
    775c:	e8 00 00 00 00       	callq  7761 <_ZN6Parser13compileModuleE7QString+0x3f>
    QByteArray result;
    7761:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7765:	48 89 c7             	mov    %rax,%rdi
    7768:	e8 00 00 00 00       	callq  776d <_ZN6Parser13compileModuleE7QString+0x4b>

    QByteArray VARS = compileVariables(&M);
    776d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7771:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7775:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7779:	48 89 ce             	mov    %rcx,%rsi
    777c:	48 89 c7             	mov    %rax,%rdi
    777f:	e8 00 00 00 00       	callq  7784 <_ZN6Parser13compileModuleE7QString+0x62>
    result.append(VARS);
    7784:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7788:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    778c:	48 89 d6             	mov    %rdx,%rsi
    778f:	48 89 c7             	mov    %rax,%rdi
    7792:	e8 00 00 00 00       	callq  7797 <_ZN6Parser13compileModuleE7QString+0x75>

    result.append("0");
    7797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    779b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 77a2 <_ZN6Parser13compileModuleE7QString+0x80>
    77a2:	48 89 c7             	mov    %rax,%rdi
    77a5:	e8 00 00 00 00       	callq  77aa <_ZN6Parser13compileModuleE7QString+0x88>
    return result;
    77aa:	90                   	nop

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    77ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    77af:	48 89 c7             	mov    %rax,%rdi
    77b2:	e8 00 00 00 00       	callq  77b7 <_ZN6Parser13compileModuleE7QString+0x95>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    77b7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77bb:	48 89 c7             	mov    %rax,%rdi
    77be:	e8 00 00 00 00       	callq  77c3 <_ZN6Parser13compileModuleE7QString+0xa1>

    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
    77c3:	90                   	nop
}
    77c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    77c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    77cc:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    77d3:	00 00 
    77d5:	74 3e                	je     7815 <_ZN6Parser13compileModuleE7QString+0xf3>
    77d7:	eb 37                	jmp    7810 <_ZN6Parser13compileModuleE7QString+0xee>
    77d9:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    77dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    77e0:	48 89 c7             	mov    %rax,%rdi
    77e3:	e8 00 00 00 00       	callq  77e8 <_ZN6Parser13compileModuleE7QString+0xc6>
    77e8:	eb 03                	jmp    77ed <_ZN6Parser13compileModuleE7QString+0xcb>
    77ea:	48 89 c3             	mov    %rax,%rbx
    77ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    77f1:	48 89 c7             	mov    %rax,%rdi
    77f4:	e8 00 00 00 00       	callq  77f9 <_ZN6Parser13compileModuleE7QString+0xd7>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    77f9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77fd:	48 89 c7             	mov    %rax,%rdi
    7800:	e8 00 00 00 00       	callq  7805 <_ZN6Parser13compileModuleE7QString+0xe3>
    7805:	48 89 d8             	mov    %rbx,%rax
    7808:	48 89 c7             	mov    %rax,%rdi
    780b:	e8 00 00 00 00       	callq  7810 <_ZN6Parser13compileModuleE7QString+0xee>
    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
}
    7810:	e8 00 00 00 00       	callq  7815 <_ZN6Parser13compileModuleE7QString+0xf3>
    7815:	48 83 c4 48          	add    $0x48,%rsp
    7819:	5b                   	pop    %rbx
    781a:	5d                   	pop    %rbp
    781b:	c3                   	retq   

000000000000781c <_ZN6Parser7compileEv>:

int Parser::compile(){
    781c:	55                   	push   %rbp
    781d:	48 89 e5             	mov    %rsp,%rbp
    7820:	53                   	push   %rbx
    7821:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    7828:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    782f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7836:	00 00 
    7838:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    783c:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    783e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7842:	48 89 c7             	mov    %rax,%rdi
    7845:	e8 00 00 00 00       	callq  784a <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    784a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7851:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7855:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    785c:	48 89 c7             	mov    %rax,%rdi
    785f:	e8 00 00 00 00       	callq  7864 <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7864:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    786b:	48 8d 50 30          	lea    0x30(%rax),%rdx
    786f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7876:	48 89 d6             	mov    %rdx,%rsi
    7879:	48 89 c7             	mov    %rax,%rdi
    787c:	e8 00 00 00 00       	callq  7881 <_ZN6Parser7compileEv+0x65>
    7881:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7888:	48 8d 78 78          	lea    0x78(%rax),%rdi
    788c:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7893:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    789a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    78a1:	48 89 d1             	mov    %rdx,%rcx
    78a4:	48 89 fa             	mov    %rdi,%rdx
    78a7:	48 89 c7             	mov    %rax,%rdi
    78aa:	e8 00 00 00 00       	callq  78af <_ZN6Parser7compileEv+0x93>
    78af:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    78b6:	48 89 c7             	mov    %rax,%rdi
    78b9:	e8 00 00 00 00       	callq  78be <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    78be:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    78c5:	48 8d 50 38          	lea    0x38(%rax),%rdx
    78c9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    78d0:	48 89 d6             	mov    %rdx,%rsi
    78d3:	48 89 c7             	mov    %rax,%rdi
    78d6:	e8 00 00 00 00       	callq  78db <_ZN6Parser7compileEv+0xbf>
    78db:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    78e2:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    78e9:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    78f0:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    78f7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    78fe:	48 89 d1             	mov    %rdx,%rcx
    7901:	48 89 fa             	mov    %rdi,%rdx
    7904:	48 89 c7             	mov    %rax,%rdi
    7907:	e8 00 00 00 00       	callq  790c <_ZN6Parser7compileEv+0xf0>
    790c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7913:	48 89 c7             	mov    %rax,%rdi
    7916:	e8 00 00 00 00       	callq  791b <_ZN6Parser7compileEv+0xff>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    791b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7922:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7929 <_ZN6Parser7compileEv+0x10d>
    7929:	48 89 c7             	mov    %rax,%rdi
    792c:	e8 00 00 00 00       	callq  7931 <_ZN6Parser7compileEv+0x115>
    7931:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7938:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    793f:	48 89 d6             	mov    %rdx,%rsi
    7942:	48 89 c7             	mov    %rax,%rdi
    7945:	e8 00 00 00 00       	callq  794a <_ZN6Parser7compileEv+0x12e>
    794a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7951:	48 89 c7             	mov    %rax,%rdi
    7954:	e8 00 00 00 00       	callq  7959 <_ZN6Parser7compileEv+0x13d>
    this->addIncludeFile("project1.h");
    7959:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7960:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7967 <_ZN6Parser7compileEv+0x14b>
    7967:	48 89 c7             	mov    %rax,%rdi
    796a:	e8 00 00 00 00       	callq  796f <_ZN6Parser7compileEv+0x153>
    796f:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7976:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    797d:	48 89 d6             	mov    %rdx,%rsi
    7980:	48 89 c7             	mov    %rax,%rdi
    7983:	e8 00 00 00 00       	callq  7988 <_ZN6Parser7compileEv+0x16c>
    7988:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    798f:	48 89 c7             	mov    %rax,%rdi
    7992:	e8 00 00 00 00       	callq  7997 <_ZN6Parser7compileEv+0x17b>
    this->addIncludeFile("kpa_config.h");
    7997:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    799b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 79a2 <_ZN6Parser7compileEv+0x186>
    79a2:	48 89 c7             	mov    %rax,%rdi
    79a5:	e8 00 00 00 00       	callq  79aa <_ZN6Parser7compileEv+0x18e>
    79aa:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    79ae:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    79b5:	48 89 d6             	mov    %rdx,%rsi
    79b8:	48 89 c7             	mov    %rax,%rdi
    79bb:	e8 00 00 00 00       	callq  79c0 <_ZN6Parser7compileEv+0x1a4>
    79c0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    79c4:	48 89 c7             	mov    %rax,%rdi
    79c7:	e8 00 00 00 00       	callq  79cc <_ZN6Parser7compileEv+0x1b0>
    this->addIncludeFile("names.h");
    79cc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    79d0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 79d7 <_ZN6Parser7compileEv+0x1bb>
    79d7:	48 89 c7             	mov    %rax,%rdi
    79da:	e8 00 00 00 00       	callq  79df <_ZN6Parser7compileEv+0x1c3>
    79df:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    79e3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    79ea:	48 89 d6             	mov    %rdx,%rsi
    79ed:	48 89 c7             	mov    %rax,%rdi
    79f0:	e8 00 00 00 00       	callq  79f5 <_ZN6Parser7compileEv+0x1d9>
    79f5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    79f9:	48 89 c7             	mov    %rax,%rdi
    79fc:	e8 00 00 00 00       	callq  7a01 <_ZN6Parser7compileEv+0x1e5>
    int lIf = this->loadIncludes();
    7a01:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7a08:	48 89 c7             	mov    %rax,%rdi
    7a0b:	e8 00 00 00 00       	callq  7a10 <_ZN6Parser7compileEv+0x1f4>
    7a10:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7a16:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7a1a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7a21:	48 89 d6             	mov    %rdx,%rsi
    7a24:	48 89 c7             	mov    %rax,%rdi
    7a27:	e8 00 00 00 00       	callq  7a2c <_ZN6Parser7compileEv+0x210>
    7a2c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7a32:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7a36:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7a3d:	48 89 d6             	mov    %rdx,%rsi
    7a40:	48 89 c7             	mov    %rax,%rdi
    7a43:	e8 00 00 00 00       	callq  7a48 <_ZN6Parser7compileEv+0x22c>
    7a48:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)


    compileHWS();
    7a4e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7a55:	48 89 c7             	mov    %rax,%rdi
    7a58:	e8 00 00 00 00       	callq  7a5d <_ZN6Parser7compileEv+0x241>

    QByteArray firstGrape = compileModule("KPA_IP3");
    7a5d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7a61:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7a68 <_ZN6Parser7compileEv+0x24c>
    7a68:	48 89 c7             	mov    %rax,%rdi
    7a6b:	e8 00 00 00 00       	callq  7a70 <_ZN6Parser7compileEv+0x254>
    7a70:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7a74:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7a78:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
    7a7f:	48 89 ce             	mov    %rcx,%rsi
    7a82:	48 89 c7             	mov    %rax,%rdi
    7a85:	e8 00 00 00 00       	callq  7a8a <_ZN6Parser7compileEv+0x26e>
    7a8a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7a8e:	48 89 c7             	mov    %rax,%rdi
    7a91:	e8 00 00 00 00       	callq  7a96 <_ZN6Parser7compileEv+0x27a>
    7a96:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7a9a:	48 89 c7             	mov    %rax,%rdi
    7a9d:	e8 00 00 00 00       	callq  7aa2 <_ZN6Parser7compileEv+0x286>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7aa2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7aa6:	48 89 c7             	mov    %rax,%rdi
    7aa9:	e8 00 00 00 00       	callq  7aae <_ZN6Parser7compileEv+0x292>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7aae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7ab2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7ab9:	00 00 
    7abb:	0f 84 bb 00 00 00    	je     7b7c <_ZN6Parser7compileEv+0x360>
    7ac1:	e9 b1 00 00 00       	jmpq   7b77 <_ZN6Parser7compileEv+0x35b>
    7ac6:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7ac9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7ad0:	48 89 c7             	mov    %rax,%rdi
    7ad3:	e8 00 00 00 00       	callq  7ad8 <_ZN6Parser7compileEv+0x2bc>
    7ad8:	e9 83 00 00 00       	jmpq   7b60 <_ZN6Parser7compileEv+0x344>
    7add:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7ae0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7ae7:	48 89 c7             	mov    %rax,%rdi
    7aea:	e8 00 00 00 00       	callq  7aef <_ZN6Parser7compileEv+0x2d3>
    7aef:	eb 6f                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7af1:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7af4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7afb:	48 89 c7             	mov    %rax,%rdi
    7afe:	e8 00 00 00 00       	callq  7b03 <_ZN6Parser7compileEv+0x2e7>
    7b03:	eb 5b                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b05:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7b08:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7b0f:	48 89 c7             	mov    %rax,%rdi
    7b12:	e8 00 00 00 00       	callq  7b17 <_ZN6Parser7compileEv+0x2fb>
    7b17:	eb 47                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b19:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7b1c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b20:	48 89 c7             	mov    %rax,%rdi
    7b23:	e8 00 00 00 00       	callq  7b28 <_ZN6Parser7compileEv+0x30c>
    7b28:	eb 36                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b2a:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7b2d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7b31:	48 89 c7             	mov    %rax,%rdi
    7b34:	e8 00 00 00 00       	callq  7b39 <_ZN6Parser7compileEv+0x31d>
    7b39:	eb 25                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b3b:	48 89 c3             	mov    %rax,%rbx
    7b3e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b42:	48 89 c7             	mov    %rax,%rdi
    7b45:	e8 00 00 00 00       	callq  7b4a <_ZN6Parser7compileEv+0x32e>
    7b4a:	eb 14                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b4c:	48 89 c3             	mov    %rax,%rbx
    7b4f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7b53:	48 89 c7             	mov    %rax,%rdi
    7b56:	e8 00 00 00 00       	callq  7b5b <_ZN6Parser7compileEv+0x33f>
    7b5b:	eb 03                	jmp    7b60 <_ZN6Parser7compileEv+0x344>
    7b5d:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7b60:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7b64:	48 89 c7             	mov    %rax,%rdi
    7b67:	e8 00 00 00 00       	callq  7b6c <_ZN6Parser7compileEv+0x350>
    7b6c:	48 89 d8             	mov    %rbx,%rax
    7b6f:	48 89 c7             	mov    %rax,%rdi
    7b72:	e8 00 00 00 00       	callq  7b77 <_ZN6Parser7compileEv+0x35b>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7b77:	e8 00 00 00 00       	callq  7b7c <_ZN6Parser7compileEv+0x360>
    7b7c:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    7b83:	5b                   	pop    %rbx
    7b84:	5d                   	pop    %rbp
    7b85:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE4takeERKS0_:

0000000000000000 <_ZN5QHashI7QString11QStringListE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   
