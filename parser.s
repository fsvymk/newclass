
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        0000000c  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        0000000c  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000300  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  00000308  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000310  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  00000318  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000320  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  00000328  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000330  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  00000338  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000340  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  00000348  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000350  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  00000358  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000360  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  00000368  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000370  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  00000378  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000380  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  00000388  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000390  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  00000398  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000400  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  00000408  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000410  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  00000418  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000420  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  00000428  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000430  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  00000438  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000440  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  00000448  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000450  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  00000458  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000460  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  00000468  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000470  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  00000478  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000480  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  00000488  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000490  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  00000498  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000500  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  00000508  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000510  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  00000518  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000520  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  00000528  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000530  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  00000538  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000540  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  00000548  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000550  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  00000558  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000560  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  00000568  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000570  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  00000578  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000580  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  00000588  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000590  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  00000598  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000600  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  00000608  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000610  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  00000618  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000620  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  00000628  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000630  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  00000638  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000640  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  00000648  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000650  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  00000658  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000660  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  00000668  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000670  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  00000678  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000680  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  00000688  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000690  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  00000698  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000700  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  00000708  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000710  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  00000718  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000720  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  00000728  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000730  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  00000738  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000740  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  00000748  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000750  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  00000758  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000760  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  00000768  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000770  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  00000778  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000780  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  00000788  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000790  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  00000798  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000800  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  00000808  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000810  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  00000818  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000820  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  00000828  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000830  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  00000838  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000840  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  00000848  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000850  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  00000858  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000860  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  00000868  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000870  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  00000878  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000880  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  00000888  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000890  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  00000898  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000900  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  00000908  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000910  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  00000918  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000920  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  00000928  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000930  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  00000938  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000940  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  00000948  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000950  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  00000958  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000960  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  00000968  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000970  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  00000978  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000980  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  00000988  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000990  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  00000998  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aa8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000ab8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000ac8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000ad8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000ae8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .text         00006748  0000000000000000  0000000000000000  00000af8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
341 .data         00000000  0000000000000000  0000000000000000  00007240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
342 .bss          00000000  0000000000000000  0000000000000000  00007240  2**0
                  ALLOC
343 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00007240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00007252  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00007261  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00007268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00007280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00007290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  000072a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  000072be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  000072da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
352 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  0000731c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
353 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00007360  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
354 .rodata       000005cc  0000000000000000  0000000000000000  00007398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
355 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00007964  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
356 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  000079c8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
357 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  00007a2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
358 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  00007a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  00007a50  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
360 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  00007a6e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
361 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00007aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00007ab6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
363 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  00007b16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
364 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  00007b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  00007bae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
366 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  00007c2e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
367 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00007ca4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
368 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  00007cca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
369 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  00007cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  00007d04  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
371 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  00007d4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
372 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  00007d76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
373 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  00007d9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
374 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00007e08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
375 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00007e50  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
376 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00007ee4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
377 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  00007efa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
378 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00007f8e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
379 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00007fa4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
380 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00007fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00007fde  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
382 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00007ffc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
383 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  0000801a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
384 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
385 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  000080c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
386 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00008118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
387 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00008140  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
388 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  000081cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
389 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  000081ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
390 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  0000821e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
391 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00008294  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
392 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  000082e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
393 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  0000836c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
394 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  0000837c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
395 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00008436  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
396 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00008451  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
397 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  000084db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
398 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  000084ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
399 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  000084f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
400 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  0000850a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
401 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00008554  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
402 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  0000856e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
403 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  000085a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
404 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  000085fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
405 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  0000861a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
406 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  0000863c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
407 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00008670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
408 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  00008698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
409 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  000086c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
410 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  000086cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
411 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  000086e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
412 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000870e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000872a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
414 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  00008754  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
415 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  00008780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  00008794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
417 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  000087d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
418 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  000087fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
419 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  00008844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
420 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000889f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
421 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  000088f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
422 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  00008966  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
423 .gcc_except_table 00000e6c  0000000000000000  0000000000000000  00008988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
424 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  000097f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  00009810  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000982c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
427 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  000098e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  00009912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
429 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000992c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  00009946  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
431 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  00009960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
432 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000997a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
433 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000999c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
434 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  000099a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  000099cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
436 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  000099e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  00009a00  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
438 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  00009a0b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  00009a30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
440 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  00009a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
441 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  00009a64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
442 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  00009a8e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  00009af6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
444 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  00009c12  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  00009cf0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  00009d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
447 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  00009da8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  00009e0a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  00009e46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
450 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  00009f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
451 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  00009f68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  00009f9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  00009fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
454 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  00009ff2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
455 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000a012  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
456 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000a030  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
457 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000a05e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
458 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000a1ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000a230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000a24e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000a2b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
462 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000a2d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
463 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000a2e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
464 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000a2fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000a318  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000a34c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
467 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000a366  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000a3d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000a42c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000a446  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000a486  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
472 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000a592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000a5a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000a60a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000a662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
476 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000a684  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000a6b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000a6d2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
479 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000a6f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
480 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000a77e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
481 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000a7e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
482 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000a8f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
483 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000a906  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000a91c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000a95c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000a99c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
487 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000a9be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
488 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000a9de  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000a9fb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
490 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000aa1e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
491 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000aa42  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000aaa0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000ac76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000acde  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000acfe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
496 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000adc8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000adee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000ae14  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000ae73  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000ae98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000aeca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000b004  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000b0c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
504 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000b0e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000b0fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
506 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000b108  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000b126  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000b162  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000b1e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000b210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
511 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000b222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000b234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000b246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
514 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000b258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
515 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000b272  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000b360  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000b39a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000b3fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000b42a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000b470  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
521 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000b49a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
522 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000b4cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000b606  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000b6c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
525 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000b6e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
526 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000b6f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
527 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000b70a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000b73e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000b764  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b79b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000b7c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000b83c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
533 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000b884  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000b8d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000b95c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
536 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000b976  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000b9ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000ba96  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
539 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000baf8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
540 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000bb20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000bb40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000bb64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000bbe0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000bc28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000bc7a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000bd00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
547 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000bd34  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000bdc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000be14  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
550 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000be38  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000be61  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
552 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000be6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000bf80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000c050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
555 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000c05e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000c0ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000c13e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000c162  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
559 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000c18b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 .debug_info   0001e729  0000000000000000  0000000000000000  0000c199  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
561 .debug_abbrev 00000c9a  0000000000000000  0000000000000000  0002a8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
562 .debug_aranges 00000d40  0000000000000000  0000000000000000  0002b55c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
563 .debug_ranges 000011a0  0000000000000000  0000000000000000  0002c29c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
564 .debug_macro  00000d13  0000000000000000  0000000000000000  0002d43c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
565 .debug_macro  0000061c  0000000000000000  0000000000000000  0002e14f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
566 .debug_macro  00000022  0000000000000000  0000000000000000  0002e76b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
567 .debug_macro  00000136  0000000000000000  0000000000000000  0002e78d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
568 .debug_macro  00000010  0000000000000000  0000000000000000  0002e8c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
569 .debug_macro  00000275  0000000000000000  0000000000000000  0002e8d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
570 .debug_macro  0000016f  0000000000000000  0000000000000000  0002eb48  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
571 .debug_macro  00000016  0000000000000000  0000000000000000  0002ecb7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
572 .debug_macro  00000035  0000000000000000  0000000000000000  0002eccd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
573 .debug_macro  00000058  0000000000000000  0000000000000000  0002ed02  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
574 .debug_macro  000005b4  0000000000000000  0000000000000000  0002ed5a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
575 .debug_macro  0000016d  0000000000000000  0000000000000000  0002f30e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
576 .debug_macro  00000016  0000000000000000  0000000000000000  0002f47b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
577 .debug_macro  0000009a  0000000000000000  0000000000000000  0002f491  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
578 .debug_macro  00000016  0000000000000000  0000000000000000  0002f52b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
579 .debug_macro  00000018  0000000000000000  0000000000000000  0002f541  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
580 .debug_macro  00000032  0000000000000000  0000000000000000  0002f559  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
581 .debug_macro  000000c0  0000000000000000  0000000000000000  0002f58b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
582 .debug_macro  00000028  0000000000000000  0000000000000000  0002f64b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
583 .debug_macro  00000012  0000000000000000  0000000000000000  0002f673  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
584 .debug_macro  000000cf  0000000000000000  0000000000000000  0002f685  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
585 .debug_macro  0000001c  0000000000000000  0000000000000000  0002f754  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
586 .debug_macro  00000018  0000000000000000  0000000000000000  0002f770  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
587 .debug_macro  0000006e  0000000000000000  0000000000000000  0002f788  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
588 .debug_macro  00000082  0000000000000000  0000000000000000  0002f7f6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
589 .debug_macro  00000012  0000000000000000  0000000000000000  0002f878  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
590 .debug_macro  00000012  0000000000000000  0000000000000000  0002f88a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
591 .debug_macro  00000016  0000000000000000  0000000000000000  0002f89c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
592 .debug_macro  00000035  0000000000000000  0000000000000000  0002f8b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
593 .debug_macro  00000052  0000000000000000  0000000000000000  0002f8e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
594 .debug_macro  0000004c  0000000000000000  0000000000000000  0002f939  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
595 .debug_macro  0000001c  0000000000000000  0000000000000000  0002f985  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
596 .debug_macro  00000028  0000000000000000  0000000000000000  0002f9a1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
597 .debug_macro  0000005e  0000000000000000  0000000000000000  0002f9c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
598 .debug_macro  000000e2  0000000000000000  0000000000000000  0002fa27  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
599 .debug_macro  00000010  0000000000000000  0000000000000000  0002fb09  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
600 .debug_macro  0000004c  0000000000000000  0000000000000000  0002fb19  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
601 .debug_macro  00000022  0000000000000000  0000000000000000  0002fb65  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
602 .debug_macro  00000068  0000000000000000  0000000000000000  0002fb87  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
603 .debug_macro  0000007f  0000000000000000  0000000000000000  0002fbef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
604 .debug_macro  0000003a  0000000000000000  0000000000000000  0002fc6e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
605 .debug_macro  00000019  0000000000000000  0000000000000000  0002fca8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
606 .debug_macro  00000020  0000000000000000  0000000000000000  0002fcc1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
607 .debug_macro  00000022  0000000000000000  0000000000000000  0002fce1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
608 .debug_macro  00000010  0000000000000000  0000000000000000  0002fd03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
609 .debug_macro  00000016  0000000000000000  0000000000000000  0002fd13  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
610 .debug_macro  00000028  0000000000000000  0000000000000000  0002fd29  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
611 .debug_macro  00000010  0000000000000000  0000000000000000  0002fd51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
612 .debug_macro  00000046  0000000000000000  0000000000000000  0002fd61  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
613 .debug_macro  0000001c  0000000000000000  0000000000000000  0002fda7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
614 .debug_macro  00000020  0000000000000000  0000000000000000  0002fdc3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
615 .debug_macro  0000005a  0000000000000000  0000000000000000  0002fde3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
616 .debug_macro  00000010  0000000000000000  0000000000000000  0002fe3d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
617 .debug_macro  00000010  0000000000000000  0000000000000000  0002fe4d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
618 .debug_macro  000000e4  0000000000000000  0000000000000000  0002fe5d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
619 .debug_macro  0000025a  0000000000000000  0000000000000000  0002ff41  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
620 .debug_macro  0000002d  0000000000000000  0000000000000000  0003019b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
621 .debug_macro  00000016  0000000000000000  0000000000000000  000301c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
622 .debug_macro  00000050  0000000000000000  0000000000000000  000301de  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
623 .debug_macro  00000019  0000000000000000  0000000000000000  0003022e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
624 .debug_macro  00000011  0000000000000000  0000000000000000  00030247  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
625 .debug_macro  0000014b  0000000000000000  0000000000000000  00030258  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
626 .debug_macro  0000001e  0000000000000000  0000000000000000  000303a3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
627 .debug_macro  0000001c  0000000000000000  0000000000000000  000303c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
628 .debug_macro  00000024  0000000000000000  0000000000000000  000303dd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
629 .debug_macro  00000016  0000000000000000  0000000000000000  00030401  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
630 .debug_macro  00000018  0000000000000000  0000000000000000  00030417  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
631 .debug_macro  00000019  0000000000000000  0000000000000000  0003042f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
632 .debug_macro  00000058  0000000000000000  0000000000000000  00030448  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
633 .debug_macro  00000016  0000000000000000  0000000000000000  000304a0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
634 .debug_macro  0000001c  0000000000000000  0000000000000000  000304b6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
635 .debug_macro  00000016  0000000000000000  0000000000000000  000304d2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
636 .debug_macro  00000022  0000000000000000  0000000000000000  000304e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
637 .debug_macro  00000043  0000000000000000  0000000000000000  0003050a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
638 .debug_macro  0000003c  0000000000000000  0000000000000000  0003054d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
639 .debug_macro  00000173  0000000000000000  0000000000000000  00030589  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
640 .debug_macro  00000012  0000000000000000  0000000000000000  000306fc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
641 .debug_macro  00000010  0000000000000000  0000000000000000  0003070e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
642 .debug_macro  00000058  0000000000000000  0000000000000000  0003071e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
643 .debug_macro  000000b4  0000000000000000  0000000000000000  00030776  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
644 .debug_macro  00000016  0000000000000000  0000000000000000  0003082a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
645 .debug_macro  00000010  0000000000000000  0000000000000000  00030840  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
646 .debug_macro  00000037  0000000000000000  0000000000000000  00030850  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
647 .debug_macro  00000058  0000000000000000  0000000000000000  00030887  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
648 .debug_macro  00000011  0000000000000000  0000000000000000  000308df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
649 .debug_macro  00000016  0000000000000000  0000000000000000  000308f0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
650 .debug_macro  00000010  0000000000000000  0000000000000000  00030906  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
651 .debug_macro  00000010  0000000000000000  0000000000000000  00030916  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
652 .debug_macro  00000022  0000000000000000  0000000000000000  00030926  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
653 .debug_macro  00000122  0000000000000000  0000000000000000  00030948  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
654 .debug_macro  0000008e  0000000000000000  0000000000000000  00030a6a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
655 .debug_macro  00000016  0000000000000000  0000000000000000  00030af8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
656 .debug_macro  00000058  0000000000000000  0000000000000000  00030b0e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
657 .debug_macro  000000fa  0000000000000000  0000000000000000  00030b66  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
658 .debug_macro  00000030  0000000000000000  0000000000000000  00030c60  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
659 .debug_macro  000000c1  0000000000000000  0000000000000000  00030c90  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
660 .debug_macro  0000004d  0000000000000000  0000000000000000  00030d51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
661 .debug_macro  00000010  0000000000000000  0000000000000000  00030d9e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
662 .debug_macro  00000019  0000000000000000  0000000000000000  00030dae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
663 .debug_macro  00000020  0000000000000000  0000000000000000  00030dc7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
664 .debug_macro  00000018  0000000000000000  0000000000000000  00030de7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
665 .debug_macro  00000023  0000000000000000  0000000000000000  00030dff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
666 .debug_macro  00000010  0000000000000000  0000000000000000  00030e22  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
667 .debug_macro  00000016  0000000000000000  0000000000000000  00030e32  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
668 .debug_macro  00000076  0000000000000000  0000000000000000  00030e48  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
669 .debug_macro  00000016  0000000000000000  0000000000000000  00030ebe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
670 .debug_macro  00000025  0000000000000000  0000000000000000  00030ed4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
671 .debug_macro  000000de  0000000000000000  0000000000000000  00030ef9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
672 .debug_macro  0000001c  0000000000000000  0000000000000000  00030fd7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
673 .debug_macro  00000058  0000000000000000  0000000000000000  00030ff3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
674 .debug_macro  00000088  0000000000000000  0000000000000000  0003104b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
675 .debug_macro  00000076  0000000000000000  0000000000000000  000310d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
676 .debug_macro  00000010  0000000000000000  0000000000000000  00031149  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
677 .debug_macro  00000041  0000000000000000  0000000000000000  00031159  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
678 .debug_macro  000000ee  0000000000000000  0000000000000000  0003119a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
679 .debug_macro  000000fc  0000000000000000  0000000000000000  00031288  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
680 .debug_macro  00000010  0000000000000000  0000000000000000  00031384  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
681 .debug_macro  000000e5  0000000000000000  0000000000000000  00031394  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
682 .debug_macro  00000012  0000000000000000  0000000000000000  00031479  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
683 .debug_macro  00000016  0000000000000000  0000000000000000  0003148b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
684 .debug_macro  00000022  0000000000000000  0000000000000000  000314a1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
685 .debug_macro  00000016  0000000000000000  0000000000000000  000314c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
686 .debug_macro  00000028  0000000000000000  0000000000000000  000314d9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
687 .debug_macro  00000216  0000000000000000  0000000000000000  00031501  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
688 .debug_macro  00000046  0000000000000000  0000000000000000  00031717  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
689 .debug_macro  0000002e  0000000000000000  0000000000000000  0003175d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
690 .debug_macro  00000027  0000000000000000  0000000000000000  0003178b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
691 .debug_macro  0000001f  0000000000000000  0000000000000000  000317b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
692 .debug_macro  00000016  0000000000000000  0000000000000000  000317d1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
693 .debug_macro  00000010  0000000000000000  0000000000000000  000317e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
694 .debug_macro  00000126  0000000000000000  0000000000000000  000317f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
695 .debug_line   00003aa1  0000000000000000  0000000000000000  0003191d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
696 .debug_str    000368cc  0000000000000000  0000000000000000  000353be  2**0
                  CONTENTS, READONLY, DEBUGGING
697 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  0006bc90  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
698 .comment      0000002e  0000000000000000  0000000000000000  0006bc98  2**0
                  CONTENTS, READONLY
699 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0006bcc6  2**0
                  CONTENTS, READONLY
700 .eh_frame     00001fb0  0000000000000000  0000000000000000  0006bcc8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
     328:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
     32f:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
     336:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     33d:	00 00 
     33f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     343:	31 c0                	xor    %eax,%eax
    int varCount = 0;
     345:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
     34c:	00 00 00 

    VarTypes VT;
     34f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     356:	48 89 c7             	mov    %rax,%rdi
     359:	e8 00 00 00 00       	callq  35e <_ZN6Parser14checkVariablesEP7QString+0x42>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     35e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     365:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
     36c:	48 89 d6             	mov    %rdx,%rsi
     36f:	48 89 c7             	mov    %rax,%rdi
     372:	e8 00 00 00 00       	callq  377 <_ZN6Parser14checkVariablesEP7QString+0x5b>
     377:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     37e:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     385:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 38c <_ZN6Parser14checkVariablesEP7QString+0x70>
     38c:	48 89 ce             	mov    %rcx,%rsi
     38f:	48 89 c7             	mov    %rax,%rdi
     392:	e8 00 00 00 00       	callq  397 <_ZN6Parser14checkVariablesEP7QString+0x7b>
     397:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
     39e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     3a5:	b9 00 00 00 00       	mov    $0x0,%ecx
     3aa:	ba 01 00 00 00       	mov    $0x1,%edx
     3af:	48 89 c7             	mov    %rax,%rdi
     3b2:	e8 00 00 00 00       	callq  3b7 <_ZN6Parser14checkVariablesEP7QString+0x9b>
     3b7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     3be:	48 89 c7             	mov    %rax,%rdi
     3c1:	e8 00 00 00 00       	callq  3c6 <_ZN6Parser14checkVariablesEP7QString+0xaa>
     3c6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     3cd:	48 89 c7             	mov    %rax,%rdi
     3d0:	e8 00 00 00 00       	callq  3d5 <_ZN6Parser14checkVariablesEP7QString+0xb9>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     3d5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     3d9:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
     3e0:	48 89 d6             	mov    %rdx,%rsi
     3e3:	48 89 c7             	mov    %rax,%rdi
     3e6:	e8 00 00 00 00       	callq  3eb <_ZN6Parser14checkVariablesEP7QString+0xcf>
     3eb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3ef:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
     3f3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3fa <_ZN6Parser14checkVariablesEP7QString+0xde>
     3fa:	48 89 ce             	mov    %rcx,%rsi
     3fd:	48 89 c7             	mov    %rax,%rdi
     400:	e8 00 00 00 00       	callq  405 <_ZN6Parser14checkVariablesEP7QString+0xe9>
     405:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
     409:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     40d:	b9 00 00 00 00       	mov    $0x0,%ecx
     412:	ba 01 00 00 00       	mov    $0x1,%edx
     417:	48 89 c7             	mov    %rax,%rdi
     41a:	e8 00 00 00 00       	callq  41f <_ZN6Parser14checkVariablesEP7QString+0x103>
     41f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     423:	48 89 c7             	mov    %rax,%rdi
     426:	e8 00 00 00 00       	callq  42b <_ZN6Parser14checkVariablesEP7QString+0x10f>
     42b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     42f:	48 89 c7             	mov    %rax,%rdi
     432:	e8 00 00 00 00       	callq  437 <_ZN6Parser14checkVariablesEP7QString+0x11b>

    QStringList types;
     437:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     43b:	48 89 c7             	mov    %rax,%rdi
     43e:	e8 00 00 00 00       	callq  443 <_ZN6Parser14checkVariablesEP7QString+0x127>
    QStringList list;
     443:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     447:	48 89 c7             	mov    %rax,%rdi
     44a:	e8 00 00 00 00       	callq  44f <_ZN6Parser14checkVariablesEP7QString+0x133>

     44f:	c7 85 38 ff ff ff 00 	movl   $0x0,-0xc8(%rbp)
     456:	00 00 00 

    int pos = 0;
     459:	8b 95 38 ff ff ff    	mov    -0xc8(%rbp),%edx
     45f:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
     466:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     46a:	b9 00 00 00 00       	mov    $0x0,%ecx
     46f:	48 89 c7             	mov    %rax,%rdi
     472:	e8 00 00 00 00       	callq  477 <_ZN6Parser14checkVariablesEP7QString+0x15b>
     477:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
     47d:	83 bd 38 ff ff ff ff 	cmpl   $0xffffffff,-0xc8(%rbp)
     484:	0f 95 c0             	setne  %al
     487:	84 c0                	test   %al,%al
     489:	0f 84 85 00 00 00    	je     514 <_ZN6Parser14checkVariablesEP7QString+0x1f8>

     48f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     493:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     497:	ba 01 00 00 00       	mov    $0x1,%edx
     49c:	48 89 ce             	mov    %rcx,%rsi
     49f:	48 89 c7             	mov    %rax,%rdi
     4a2:	e8 00 00 00 00       	callq  4a7 <_ZN6Parser14checkVariablesEP7QString+0x18b>
     4a7:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     4ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     4af:	48 89 d6             	mov    %rdx,%rsi
     4b2:	48 89 c7             	mov    %rax,%rdi
     4b5:	e8 00 00 00 00       	callq  4ba <_ZN6Parser14checkVariablesEP7QString+0x19e>
     4ba:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     4be:	48 89 c7             	mov    %rax,%rdi
     4c1:	e8 00 00 00 00       	callq  4c6 <_ZN6Parser14checkVariablesEP7QString+0x1aa>
    while ((pos = erx.indexIn(*str, pos)) != -1) {
     4c6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4ca:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     4ce:	ba 02 00 00 00       	mov    $0x2,%edx
     4d3:	48 89 ce             	mov    %rcx,%rsi
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser14checkVariablesEP7QString+0x1c2>
     4de:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     4e2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     4e6:	48 89 d6             	mov    %rdx,%rsi
     4e9:	48 89 c7             	mov    %rax,%rdi
     4ec:	e8 00 00 00 00       	callq  4f1 <_ZN6Parser14checkVariablesEP7QString+0x1d5>
     4f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4f5:	48 89 c7             	mov    %rax,%rdi
     4f8:	e8 00 00 00 00       	callq  4fd <_ZN6Parser14checkVariablesEP7QString+0x1e1>
         types << erx.cap(1);
     4fd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     501:	48 89 c7             	mov    %rax,%rdi
     504:	e8 00 00 00 00       	callq  509 <_ZN6Parser14checkVariablesEP7QString+0x1ed>
     509:	01 85 38 ff ff ff    	add    %eax,-0xc8(%rbp)

    QStringList types;
    QStringList list;


    int pos = 0;
     50f:	e9 45 ff ff ff       	jmpq   459 <_ZN6Parser14checkVariablesEP7QString+0x13d>
    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
         list << erx.cap(2);
         pos += erx.matchedLength();
    }

     514:	8b 9d 3c ff ff ff    	mov    -0xc4(%rbp),%ebx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");

    QStringList types;
    QStringList list;
     51a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     51e:	48 89 c7             	mov    %rax,%rdi
     521:	e8 00 00 00 00       	callq  526 <_ZN6Parser14checkVariablesEP7QString+0x20a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");

    QStringList types;
     526:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     52a:	48 89 c7             	mov    %rax,%rdi
     52d:	e8 00 00 00 00       	callq  532 <_ZN6Parser14checkVariablesEP7QString+0x216>
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     532:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     536:	48 89 c7             	mov    %rax,%rdi
     539:	e8 00 00 00 00       	callq  53e <_ZN6Parser14checkVariablesEP7QString+0x222>
int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     53e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     545:	48 89 c7             	mov    %rax,%rdi
     548:	e8 00 00 00 00       	callq  54d <_ZN6Parser14checkVariablesEP7QString+0x231>
}

int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;
     54d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     554:	48 89 c7             	mov    %rax,%rdi
     557:	e8 00 00 00 00       	callq  55c <_ZN6Parser14checkVariablesEP7QString+0x240>
    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
         list << erx.cap(2);
         pos += erx.matchedLength();
    }

     55c:	89 d8                	mov    %ebx,%eax

     55e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     562:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     569:	00 00 
     56b:	0f 84 2a 01 00 00    	je     69b <_ZN6Parser14checkVariablesEP7QString+0x37f>
     571:	e9 20 01 00 00       	jmpq   696 <_ZN6Parser14checkVariablesEP7QString+0x37a>
     576:	48 89 c3             	mov    %rax,%rbx
     579:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     580:	48 89 c7             	mov    %rax,%rdi
     583:	e8 00 00 00 00       	callq  588 <_ZN6Parser14checkVariablesEP7QString+0x26c>
     588:	eb 17                	jmp    5a1 <_ZN6Parser14checkVariablesEP7QString+0x285>
     58a:	48 89 c3             	mov    %rax,%rbx
     58d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     594:	48 89 c7             	mov    %rax,%rdi
     597:	e8 00 00 00 00       	callq  59c <_ZN6Parser14checkVariablesEP7QString+0x280>
     59c:	eb 03                	jmp    5a1 <_ZN6Parser14checkVariablesEP7QString+0x285>
     59e:	48 89 c3             	mov    %rax,%rbx
     5a1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     5a8:	48 89 c7             	mov    %rax,%rdi
     5ab:	e8 00 00 00 00       	callq  5b0 <_ZN6Parser14checkVariablesEP7QString+0x294>
     5b0:	e9 c7 00 00 00       	jmpq   67c <_ZN6Parser14checkVariablesEP7QString+0x360>
     5b5:	48 89 c3             	mov    %rax,%rbx
     5b8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     5bf:	48 89 c7             	mov    %rax,%rdi
     5c2:	e8 00 00 00 00       	callq  5c7 <_ZN6Parser14checkVariablesEP7QString+0x2ab>
     5c7:	e9 b0 00 00 00       	jmpq   67c <_ZN6Parser14checkVariablesEP7QString+0x360>
     5cc:	48 89 c3             	mov    %rax,%rbx
     5cf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     5d3:	48 89 c7             	mov    %rax,%rdi
     5d6:	e8 00 00 00 00       	callq  5db <_ZN6Parser14checkVariablesEP7QString+0x2bf>
     5db:	eb 14                	jmp    5f1 <_ZN6Parser14checkVariablesEP7QString+0x2d5>
     5dd:	48 89 c3             	mov    %rax,%rbx
     5e0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     5e4:	48 89 c7             	mov    %rax,%rdi
     5e7:	e8 00 00 00 00       	callq  5ec <_ZN6Parser14checkVariablesEP7QString+0x2d0>
     5ec:	eb 03                	jmp    5f1 <_ZN6Parser14checkVariablesEP7QString+0x2d5>
     5ee:	48 89 c3             	mov    %rax,%rbx
     5f1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     5f5:	48 89 c7             	mov    %rax,%rdi
     5f8:	e8 00 00 00 00       	callq  5fd <_ZN6Parser14checkVariablesEP7QString+0x2e1>
     5fd:	eb 69                	jmp    668 <_ZN6Parser14checkVariablesEP7QString+0x34c>
     5ff:	48 89 c3             	mov    %rax,%rbx
     602:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     606:	48 89 c7             	mov    %rax,%rdi
     609:	e8 00 00 00 00       	callq  60e <_ZN6Parser14checkVariablesEP7QString+0x2f2>
     60e:	eb 58                	jmp    668 <_ZN6Parser14checkVariablesEP7QString+0x34c>
     610:	48 89 c3             	mov    %rax,%rbx
    QStringList types;
    QStringList list;


    int pos = 0;

     613:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     617:	48 89 c7             	mov    %rax,%rdi
     61a:	e8 00 00 00 00       	callq  61f <_ZN6Parser14checkVariablesEP7QString+0x303>
     61f:	eb 14                	jmp    635 <_ZN6Parser14checkVariablesEP7QString+0x319>
     621:	48 89 c3             	mov    %rax,%rbx
    while ((pos = erx.indexIn(*str, pos)) != -1) {
     624:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     628:	48 89 c7             	mov    %rax,%rdi
     62b:	e8 00 00 00 00       	callq  630 <_ZN6Parser14checkVariablesEP7QString+0x314>
     630:	eb 03                	jmp    635 <_ZN6Parser14checkVariablesEP7QString+0x319>
     632:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");

    QStringList types;
    QStringList list;
     635:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     639:	48 89 c7             	mov    %rax,%rdi
     63c:	e8 00 00 00 00       	callq  641 <_ZN6Parser14checkVariablesEP7QString+0x325>
     641:	eb 03                	jmp    646 <_ZN6Parser14checkVariablesEP7QString+0x32a>
     643:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");

    QStringList types;
     646:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     64a:	48 89 c7             	mov    %rax,%rdi
     64d:	e8 00 00 00 00       	callq  652 <_ZN6Parser14checkVariablesEP7QString+0x336>
     652:	eb 03                	jmp    657 <_ZN6Parser14checkVariablesEP7QString+0x33b>
     654:	48 89 c3             	mov    %rax,%rbx
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     657:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     65b:	48 89 c7             	mov    %rax,%rdi
     65e:	e8 00 00 00 00       	callq  663 <_ZN6Parser14checkVariablesEP7QString+0x347>
     663:	eb 03                	jmp    668 <_ZN6Parser14checkVariablesEP7QString+0x34c>
     665:	48 89 c3             	mov    %rax,%rbx
int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     668:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     66f:	48 89 c7             	mov    %rax,%rdi
     672:	e8 00 00 00 00       	callq  677 <_ZN6Parser14checkVariablesEP7QString+0x35b>
     677:	eb 03                	jmp    67c <_ZN6Parser14checkVariablesEP7QString+0x360>
     679:	48 89 c3             	mov    %rax,%rbx
}

int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;
     67c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     683:	48 89 c7             	mov    %rax,%rdi
     686:	e8 00 00 00 00       	callq  68b <_ZN6Parser14checkVariablesEP7QString+0x36f>
     68b:	48 89 d8             	mov    %rbx,%rax
     68e:	48 89 c7             	mov    %rax,%rdi
     691:	e8 00 00 00 00       	callq  696 <_ZN6Parser14checkVariablesEP7QString+0x37a>
         types << erx.cap(1);
         list << erx.cap(2);
         pos += erx.matchedLength();
    }


     696:	e8 00 00 00 00       	callq  69b <_ZN6Parser14checkVariablesEP7QString+0x37f>
     69b:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
     6a2:	5b                   	pop    %rbx
     6a3:	5d                   	pop    %rbp
     6a4:	c3                   	retq   
     6a5:	90                   	nop

00000000000006a6 <_ZN6Parser17QStringList_printE11QStringList>:
    return varCount;
}

     6a6:	55                   	push   %rbp
     6a7:	48 89 e5             	mov    %rsp,%rbp
     6aa:	53                   	push   %rbx
     6ab:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
     6b2:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
     6b9:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
     6c0:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
     6c7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     6ce:	00 00 
     6d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     6d4:	31 c0                	xor    %eax,%eax
QString Parser::QStringList_print(QStringList list)
     6d6:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
     6dd:	00 00 00 
{
     6e0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     6e7:	48 89 c7             	mov    %rax,%rdi
     6ea:	e8 00 00 00 00       	callq  6ef <_ZN6Parser17QStringList_printE11QStringList+0x49>
    int cnt = 0;
     6ef:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     6f3:	48 89 c7             	mov    %rax,%rdi
     6f6:	e8 00 00 00 00       	callq  6fb <_ZN6Parser17QStringList_printE11QStringList+0x55>
    QString result;
     6fb:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     702:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     706:	48 89 d6             	mov    %rdx,%rsi
     709:	48 89 c7             	mov    %rax,%rdi
     70c:	e8 00 00 00 00       	callq  711 <_ZN6Parser17QStringList_printE11QStringList+0x6b>
     711:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     715:	48 89 45 80          	mov    %rax,-0x80(%rbp)
     719:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     720:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     724:	48 89 d6             	mov    %rdx,%rsi
     727:	48 89 c7             	mov    %rax,%rdi
     72a:	e8 00 00 00 00       	callq  72f <_ZN6Parser17QStringList_printE11QStringList+0x89>
     72f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     733:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     737:	48 89 d6             	mov    %rdx,%rsi
     73a:	48 89 c7             	mov    %rax,%rdi
     73d:	e8 00 00 00 00       	callq  742 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
     742:	84 c0                	test   %al,%al
     744:	0f 84 e0 00 00 00    	je     82a <_ZN6Parser17QStringList_printE11QStringList+0x184>
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
     74a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     74e:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
     754:	ba 0a 00 00 00       	mov    $0xa,%edx
     759:	89 ce                	mov    %ecx,%esi
     75b:	48 89 c7             	mov    %rax,%rdi
     75e:	e8 00 00 00 00       	callq  763 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
     763:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     767:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     76b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 772 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
     772:	48 89 c7             	mov    %rax,%rdi
     775:	e8 00 00 00 00       	callq  77a <_ZN6Parser17QStringList_printE11QStringList+0xd4>
     77a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     77e:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     782:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 789 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
     789:	48 89 ce             	mov    %rcx,%rsi
     78c:	48 89 c7             	mov    %rax,%rdi
     78f:	e8 00 00 00 00       	callq  794 <_ZN6Parser17QStringList_printE11QStringList+0xee>
     794:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     798:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     79f:	48 89 d6             	mov    %rdx,%rsi
     7a2:	48 89 c7             	mov    %rax,%rdi
     7a5:	e8 00 00 00 00       	callq  7aa <_ZN6Parser17QStringList_printE11QStringList+0x104>
     7aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     7ae:	48 89 c7             	mov    %rax,%rdi
     7b1:	e8 00 00 00 00       	callq  7b6 <_ZN6Parser17QStringList_printE11QStringList+0x110>
     7b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     7ba:	48 89 c7             	mov    %rax,%rdi
     7bd:	e8 00 00 00 00       	callq  7c2 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
     7c2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     7c6:	48 89 c7             	mov    %rax,%rdi
     7c9:	e8 00 00 00 00       	callq  7ce <_ZN6Parser17QStringList_printE11QStringList+0x128>
    {
     7ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     7d2:	48 89 c7             	mov    %rax,%rdi
     7d5:	e8 00 00 00 00       	callq  7da <_ZN6Parser17QStringList_printE11QStringList+0x134>
     7da:	48 89 c2             	mov    %rax,%rdx
     7dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     7e1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7e8 <_ZN6Parser17QStringList_printE11QStringList+0x142>
     7e8:	48 89 c7             	mov    %rax,%rdi
     7eb:	e8 00 00 00 00       	callq  7f0 <_ZN6Parser17QStringList_printE11QStringList+0x14a>
     7f0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     7f4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     7fb:	48 89 d6             	mov    %rdx,%rsi
     7fe:	48 89 c7             	mov    %rax,%rdi
     801:	e8 00 00 00 00       	callq  806 <_ZN6Parser17QStringList_printE11QStringList+0x160>
     806:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     80a:	48 89 c7             	mov    %rax,%rdi
     80d:	e8 00 00 00 00       	callq  812 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        result.append("\nlist["+QString::number(cnt)+"]");
     812:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
     819:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     81d:	48 89 c7             	mov    %rax,%rdi
     820:	e8 00 00 00 00       	callq  825 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
     825:	e9 ef fe ff ff       	jmpq   719 <_ZN6Parser17QStringList_printE11QStringList+0x73>

    return varCount;
}

QString Parser::QStringList_print(QStringList list)
{
     82a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     831:	48 89 c7             	mov    %rax,%rdi
     834:	e8 00 00 00 00       	callq  839 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
     839:	90                   	nop
     83a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     841:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     845:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     84c:	00 00 
     84e:	74 68                	je     8b8 <_ZN6Parser17QStringList_printE11QStringList+0x212>
     850:	eb 61                	jmp    8b3 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
     852:	48 89 c3             	mov    %rax,%rbx
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
     855:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     859:	48 89 c7             	mov    %rax,%rdi
     85c:	e8 00 00 00 00       	callq  861 <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
     861:	eb 03                	jmp    866 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
     863:	48 89 c3             	mov    %rax,%rbx
     866:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     86a:	48 89 c7             	mov    %rax,%rdi
     86d:	e8 00 00 00 00       	callq  872 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
     872:	eb 03                	jmp    877 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
     874:	48 89 c3             	mov    %rax,%rbx
     877:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     87b:	48 89 c7             	mov    %rax,%rdi
     87e:	e8 00 00 00 00       	callq  883 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
     883:	eb 14                	jmp    899 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
     885:	48 89 c3             	mov    %rax,%rbx
    {
     888:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     88c:	48 89 c7             	mov    %rax,%rdi
     88f:	e8 00 00 00 00       	callq  894 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
     894:	eb 03                	jmp    899 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
     896:	48 89 c3             	mov    %rax,%rbx

    return varCount;
}

QString Parser::QStringList_print(QStringList list)
{
     899:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     8a0:	48 89 c7             	mov    %rax,%rdi
     8a3:	e8 00 00 00 00       	callq  8a8 <_ZN6Parser17QStringList_printE11QStringList+0x202>
     8a8:	48 89 d8             	mov    %rbx,%rax
     8ab:	48 89 c7             	mov    %rax,%rdi
     8ae:	e8 00 00 00 00       	callq  8b3 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
     8b3:	e8 00 00 00 00       	callq  8b8 <_ZN6Parser17QStringList_printE11QStringList+0x212>
     8b8:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     8bf:	5b                   	pop    %rbx
     8c0:	5d                   	pop    %rbp
     8c1:	c3                   	retq   

00000000000008c2 <_ZN6Parser14addIncludeFileE7QString>:
    }
     8c2:	55                   	push   %rbp
     8c3:	48 89 e5             	mov    %rsp,%rbp
     8c6:	48 83 ec 10          	sub    $0x10,%rsp
     8ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     8ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
}
     8d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     8d6:	48 8d 48 58          	lea    0x58(%rax),%rcx
     8da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     8de:	ba 01 00 00 00       	mov    $0x1,%edx
     8e3:	48 89 c6             	mov    %rax,%rsi
     8e6:	48 89 cf             	mov    %rcx,%rdi
     8e9:	e8 00 00 00 00       	callq  8ee <_ZN6Parser14addIncludeFileE7QString+0x2c>
     8ee:	83 f0 01             	xor    $0x1,%eax
     8f1:	84 c0                	test   %al,%al
     8f3:	74 17                	je     90c <_ZN6Parser14addIncludeFileE7QString+0x4a>
void Parser::addIncludeFile(QString filename){
     8f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     8f9:	48 8d 50 58          	lea    0x58(%rax),%rdx
     8fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     901:	48 89 c6             	mov    %rax,%rsi
     904:	48 89 d7             	mov    %rdx,%rdi
     907:	e8 00 00 00 00       	callq  90c <_ZN6Parser14addIncludeFileE7QString+0x4a>
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
     90c:	90                   	nop
     90d:	c9                   	leaveq 
     90e:	c3                   	retq   
     90f:	90                   	nop

0000000000000910 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:
    this->includeFiles.append(filename);
}


     910:	55                   	push   %rbp
     911:	48 89 e5             	mov    %rsp,%rbp
     914:	41 55                	push   %r13
     916:	41 54                	push   %r12
     918:	53                   	push   %rbx
     919:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
     920:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
     927:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
     92e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
     935:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     93c:	00 00 
     93e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
     942:	31 c0                	xor    %eax,%eax
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
     944:	bb 00 00 00 00       	mov    $0x0,%ebx
     949:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     950:	48 89 c7             	mov    %rax,%rdi
     953:	e8 00 00 00 00       	callq  958 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
     958:	83 f8 04             	cmp    $0x4,%eax
     95b:	74 3a                	je     997 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
     95d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     961:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     968:	48 89 d6             	mov    %rdx,%rsi
     96b:	48 89 c7             	mov    %rax,%rdi
     96e:	e8 00 00 00 00       	callq  973 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
     973:	bb 01 00 00 00       	mov    $0x1,%ebx
     978:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     97c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 983 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
     983:	48 89 c7             	mov    %rax,%rdi
     986:	e8 00 00 00 00       	callq  98b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
     98b:	84 c0                	test   %al,%al
     98d:	74 08                	je     997 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
     98f:	41 bd 01 00 00 00    	mov    $0x1,%r13d
     995:	eb 06                	jmp    99d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
     997:	41 bd 00 00 00 00    	mov    $0x0,%r13d
     99d:	84 db                	test   %bl,%bl
     99f:	74 0d                	je     9ae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
     9a1:	90                   	nop
     9a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     9a6:	48 89 c7             	mov    %rax,%rdi
     9a9:	e8 00 00 00 00       	callq  9ae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
     9ae:	45 84 ed             	test   %r13b,%r13b
     9b1:	74 0b                	je     9be <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>

     9b3:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     9b9:	e9 87 02 00 00       	jmpq   c45 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
     9be:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     9c5:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     9cc:	48 89 d6             	mov    %rdx,%rsi
     9cf:	48 89 c7             	mov    %rax,%rdi
     9d2:	e8 00 00 00 00       	callq  9d7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
         return false;
     9d7:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
     9de:	00 00 00 
     QXmlStreamAttributes attributes = xml.attributes();
     9e1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     9e8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9ef <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
     9ef:	48 89 c7             	mov    %rax,%rdi
     9f2:	e8 00 00 00 00       	callq  9f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
     9f7:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     9fe:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a05:	48 89 d6             	mov    %rdx,%rsi
     a08:	48 89 c7             	mov    %rax,%rdi
     a0b:	e8 00 00 00 00       	callq  a10 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
     a10:	89 c3                	mov    %eax,%ebx
     a12:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     a19:	48 89 c7             	mov    %rax,%rdi
     a1c:	e8 00 00 00 00       	callq  a21 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
     a21:	84 db                	test   %bl,%bl
     a23:	74 6c                	je     a91 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
     int id = 0;
     a25:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     a2c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a33 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
     a33:	48 89 c7             	mov    %rax,%rdi
     a36:	e8 00 00 00 00       	callq  a3b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
     a3b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a3f:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
     a46:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
     a4d:	48 89 ce             	mov    %rcx,%rsi
     a50:	48 89 c7             	mov    %rax,%rdi
     a53:	e8 00 00 00 00       	callq  a58 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
     a58:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a5c:	ba 0a 00 00 00       	mov    $0xa,%edx
     a61:	be 00 00 00 00       	mov    $0x0,%esi
     a66:	48 89 c7             	mov    %rax,%rdi
     a69:	e8 00 00 00 00       	callq  a6e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
     a6e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
     a74:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a78:	48 89 c7             	mov    %rax,%rdi
     a7b:	e8 00 00 00 00       	callq  a80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
     a80:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     a87:	48 89 c7             	mov    %rax,%rdi
     a8a:	e8 00 00 00 00       	callq  a8f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
     a8f:	eb 0b                	jmp    a9c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     if (attributes.hasAttribute("id")) {
         id = attributes.value("id").toInt();
     }
     a91:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     a97:	e9 9a 01 00 00       	jmpq   c36 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     else
         return false;
     a9c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     aa3:	48 89 c7             	mov    %rax,%rdi
     aa6:	e8 00 00 00 00       	callq  aab <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>

     aab:	bb 00 00 00 00       	mov    $0x0,%ebx
     ab0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     ab7:	48 89 c7             	mov    %rax,%rdi
     aba:	e8 00 00 00 00       	callq  abf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
     abf:	83 f8 05             	cmp    $0x5,%eax
     ac2:	75 35                	jne    af9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
     ac4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     ac8:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     acf:	48 89 d6             	mov    %rdx,%rsi
     ad2:	48 89 c7             	mov    %rax,%rdi
     ad5:	e8 00 00 00 00       	callq  ada <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
     ada:	bb 01 00 00 00       	mov    $0x1,%ebx
     adf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     ae3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # aea <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
     aea:	48 89 c7             	mov    %rax,%rdi
     aed:	e8 00 00 00 00       	callq  af2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
     af2:	83 f0 01             	xor    $0x1,%eax
     af5:	84 c0                	test   %al,%al
     af7:	74 08                	je     b01 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
     af9:	41 bd 01 00 00 00    	mov    $0x1,%r13d
     aff:	eb 06                	jmp    b07 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
     b01:	41 bd 00 00 00 00    	mov    $0x0,%r13d
     b07:	84 db                	test   %bl,%bl
     b09:	74 0d                	je     b18 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
     b0b:	90                   	nop
     b0c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     b10:	48 89 c7             	mov    %rax,%rdi
     b13:	e8 00 00 00 00       	callq  b18 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
     b18:	45 84 ed             	test   %r13b,%r13b
     b1b:	0f 84 0f 01 00 00    	je     c30 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     b21:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     b28:	48 89 c7             	mov    %rax,%rdi
     b2b:	e8 00 00 00 00       	callq  b30 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
     b30:	83 f8 04             	cmp    $0x4,%eax
     b33:	0f 94 c0             	sete   %al
     b36:	84 c0                	test   %al,%al
     b38:	0f 84 de 00 00 00    	je     c1c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
     b3e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b42:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     b49:	48 89 d6             	mov    %rdx,%rsi
     b4c:	48 89 c7             	mov    %rax,%rdi
     b4f:	e8 00 00 00 00       	callq  b54 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
     b54:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b5f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
     b5f:	48 89 c7             	mov    %rax,%rdi
     b62:	e8 00 00 00 00       	callq  b67 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
     b67:	89 c3                	mov    %eax,%ebx
     b69:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b6d:	48 89 c7             	mov    %rax,%rdi
     b70:	e8 00 00 00 00       	callq  b75 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
     b75:	84 db                	test   %bl,%bl
     b77:	0f 84 9f 00 00 00    	je     c1c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
     b7d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     b84:	48 89 c7             	mov    %rax,%rdi
     b87:	e8 00 00 00 00       	callq  b8c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
             if (xml.name() == "name"){
     b8c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     b90:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     b97:	48 89 d6             	mov    %rdx,%rsi
     b9a:	48 89 c7             	mov    %rax,%rdi
     b9d:	e8 00 00 00 00       	callq  ba2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
     ba2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     ba6:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     baa:	48 89 d6             	mov    %rdx,%rsi
     bad:	48 89 c7             	mov    %rax,%rdi
     bb0:	e8 00 00 00 00       	callq  bb5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
     bb5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     bb9:	48 89 c7             	mov    %rax,%rdi
     bbc:	e8 00 00 00 00       	callq  bc1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 xml.readNext();
     bc1:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     bc5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
     bcc:	48 89 d6             	mov    %rdx,%rsi
     bcf:	48 89 c7             	mov    %rax,%rdi
     bd2:	e8 00 00 00 00       	callq  bd7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
     bd7:	84 c0                	test   %al,%al
     bd9:	74 0d                	je     be8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                 QString name = xml.text().toString();
     bdb:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     be1:	bb 00 00 00 00       	mov    $0x0,%ebx
     be6:	eb 22                	jmp    c0a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 if (sems.contains(name))
     be8:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
     bef:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     bf3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
     bfa:	48 89 ce             	mov    %rcx,%rsi
     bfd:	48 89 c7             	mov    %rax,%rdi
     c00:	e8 00 00 00 00       	callq  c05 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
     c05:	bb 01 00 00 00       	mov    $0x1,%ebx
     c0a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     c0e:	48 89 c7             	mov    %rax,%rdi
     c11:	e8 00 00 00 00       	callq  c16 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
     c16:	83 fb 01             	cmp    $0x1,%ebx
     c19:	75 1b                	jne    c36 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
     c1b:	90                   	nop
                 xml.readNext();
                 QString name = xml.text().toString();
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
     c1c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     c23:	48 89 c7             	mov    %rax,%rdi
     c26:	e8 00 00 00 00       	callq  c2b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     if (attributes.hasAttribute("id")) {
         id = attributes.value("id").toInt();
     }
     else
         return false;

     c2b:	e9 7b fe ff ff       	jmpq   aab <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     c30:	41 bc 01 00 00 00    	mov    $0x1,%r12d


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
     c36:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     c3d:	48 89 c7             	mov    %rax,%rdi
     c40:	e8 00 00 00 00       	callq  c45 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     c45:	44 89 e0             	mov    %r12d,%eax
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     c48:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
     c4c:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     c53:	00 00 
     c55:	0f 84 d1 00 00 00    	je     d2c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
     c5b:	e9 c7 00 00 00       	jmpq   d27 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
     c60:	49 89 c4             	mov    %rax,%r12
    this->includeFiles.append(filename);
}


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
     c63:	84 db                	test   %bl,%bl
     c65:	74 0f                	je     c76 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
     c67:	90                   	nop
     c68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     c6c:	48 89 c7             	mov    %rax,%rdi
     c6f:	e8 00 00 00 00       	callq  c74 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
     c74:	eb 01                	jmp    c77 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
     c76:	90                   	nop
     c77:	4c 89 e0             	mov    %r12,%rax
     c7a:	48 89 c7             	mov    %rax,%rdi
     c7d:	e8 00 00 00 00       	callq  c82 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
     c82:	48 89 c3             	mov    %rax,%rbx

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     c85:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     c8c:	48 89 c7             	mov    %rax,%rdi
     c8f:	e8 00 00 00 00       	callq  c94 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
     c94:	eb 77                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     c96:	48 89 c3             	mov    %rax,%rbx
     int id = 0;
     c99:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     c9d:	48 89 c7             	mov    %rax,%rdi
     ca0:	e8 00 00 00 00       	callq  ca5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
     ca5:	eb 03                	jmp    caa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
     ca7:	48 89 c3             	mov    %rax,%rbx
     caa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     cb1:	48 89 c7             	mov    %rax,%rdi
     cb4:	e8 00 00 00 00       	callq  cb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
     cb9:	eb 52                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     cbb:	49 89 c4             	mov    %rax,%r12
     if (attributes.hasAttribute("id")) {
         id = attributes.value("id").toInt();
     }
     else
         return false;

     cbe:	84 db                	test   %bl,%bl
     cc0:	74 0f                	je     cd1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
     cc2:	90                   	nop
     cc3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     cc7:	48 89 c7             	mov    %rax,%rdi
     cca:	e8 00 00 00 00       	callq  ccf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
     ccf:	eb 01                	jmp    cd2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
     cd1:	90                   	nop
     cd2:	4c 89 e3             	mov    %r12,%rbx
     cd5:	eb 36                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     cd7:	48 89 c3             	mov    %rax,%rbx
     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
     cda:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     cde:	48 89 c7             	mov    %rax,%rdi
     ce1:	e8 00 00 00 00       	callq  ce6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
     ce6:	eb 25                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     ce8:	48 89 c3             	mov    %rax,%rbx
     ceb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     cef:	48 89 c7             	mov    %rax,%rdi
     cf2:	e8 00 00 00 00       	callq  cf7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
     cf7:	eb 14                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     cf9:	48 89 c3             	mov    %rax,%rbx
         {
             if (xml.name() == "name"){
     cfc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     d00:	48 89 c7             	mov    %rax,%rdi
     d03:	e8 00 00 00 00       	callq  d08 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
     d08:	eb 03                	jmp    d0d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     d0a:	48 89 c3             	mov    %rax,%rbx


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
     d0d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     d14:	48 89 c7             	mov    %rax,%rdi
     d17:	e8 00 00 00 00       	callq  d1c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
     d1c:	48 89 d8             	mov    %rbx,%rax
     d1f:	48 89 c7             	mov    %rax,%rdi
     d22:	e8 00 00 00 00       	callq  d27 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     d27:	e8 00 00 00 00       	callq  d2c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
     d2c:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
     d33:	5b                   	pop    %rbx
     d34:	41 5c                	pop    %r12
     d36:	41 5d                	pop    %r13
     d38:	5d                   	pop    %rbp
     d39:	c3                   	retq   

0000000000000d3a <_ZN6Parser11displaySemsER4QMapI7QStringiE>:
     return true;
}


     d3a:	55                   	push   %rbp
     d3b:	48 89 e5             	mov    %rsp,%rbp
     d3e:	53                   	push   %rbx
     d3f:	48 83 ec 68          	sub    $0x68,%rsp
     d43:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
     d47:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
     d4b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
     d4f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     d56:	00 00 
     d58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     d5c:	31 c0                	xor    %eax,%eax
QString Parser::displaySems(QMap<QString, int> &sems)
     d5e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
     d62:	48 89 c7             	mov    %rax,%rdi
     d65:	e8 00 00 00 00       	callq  d6a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
     d6a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     d6e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     d72:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     d76:	48 89 d6             	mov    %rdx,%rsi
     d79:	48 89 c7             	mov    %rax,%rdi
     d7c:	e8 00 00 00 00       	callq  d81 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
{
     d81:	48 8b 45 98          	mov    -0x68(%rbp),%rax
     d85:	48 89 c7             	mov    %rax,%rdi
     d88:	e8 00 00 00 00       	callq  d8d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
     d8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     d91:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     d95:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d99:	48 89 d6             	mov    %rdx,%rsi
     d9c:	48 89 c7             	mov    %rax,%rdi
     d9f:	e8 00 00 00 00       	callq  da4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
     da4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     da8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     dac:	48 89 d6             	mov    %rdx,%rsi
     daf:	48 89 c7             	mov    %rax,%rdi
     db2:	e8 00 00 00 00       	callq  db7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
     db7:	84 c0                	test   %al,%al
     db9:	0f 84 d7 00 00 00    	je     e96 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    QMap<QString, int>::const_iterator it = sems.begin();
    for(;it != sems.end(); ++it)
     dbf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     dc3:	48 89 c7             	mov    %rax,%rdi
     dc6:	e8 00 00 00 00       	callq  dcb <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
     dcb:	8b 08                	mov    (%rax),%ecx
     dcd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     dd1:	ba 0a 00 00 00       	mov    $0xa,%edx
     dd6:	89 ce                	mov    %ecx,%esi
     dd8:	48 89 c7             	mov    %rax,%rdi
     ddb:	e8 00 00 00 00       	callq  de0 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
     de0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     de4:	48 89 c7             	mov    %rax,%rdi
     de7:	e8 00 00 00 00       	callq  dec <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
     dec:	48 89 c2             	mov    %rax,%rdx
     def:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     df3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # dfa <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
     dfa:	48 89 c7             	mov    %rax,%rdi
     dfd:	e8 00 00 00 00       	callq  e02 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
     e02:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e06:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     e0a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # e11 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
     e11:	48 89 ce             	mov    %rcx,%rsi
     e14:	48 89 c7             	mov    %rax,%rdi
     e17:	e8 00 00 00 00       	callq  e1c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
     e1c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     e20:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     e24:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
     e28:	48 89 ce             	mov    %rcx,%rsi
     e2b:	48 89 c7             	mov    %rax,%rdi
     e2e:	e8 00 00 00 00       	callq  e33 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
     e33:	90                   	nop
     e34:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e38:	48 89 c7             	mov    %rax,%rdi
     e3b:	e8 00 00 00 00       	callq  e40 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
     e40:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e44:	48 89 c7             	mov    %rax,%rdi
     e47:	e8 00 00 00 00       	callq  e4c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
     e4c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e50:	48 89 c7             	mov    %rax,%rdi
     e53:	e8 00 00 00 00       	callq  e58 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
     e58:	eb 3d                	jmp    e97 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
     e5a:	48 89 c3             	mov    %rax,%rbx
     e5d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e61:	48 89 c7             	mov    %rax,%rdi
     e64:	e8 00 00 00 00       	callq  e69 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
     e69:	eb 03                	jmp    e6e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
     e6b:	48 89 c3             	mov    %rax,%rbx
     e6e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e72:	48 89 c7             	mov    %rax,%rdi
     e75:	e8 00 00 00 00       	callq  e7a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
     e7a:	eb 03                	jmp    e7f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
     e7c:	48 89 c3             	mov    %rax,%rbx
     e7f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e83:	48 89 c7             	mov    %rax,%rdi
     e86:	e8 00 00 00 00       	callq  e8b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
     e8b:	48 89 d8             	mov    %rbx,%rax
     e8e:	48 89 c7             	mov    %rax,%rdi
     e91:	e8 00 00 00 00       	callq  e96 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
     e96:	90                   	nop
     e97:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     e9b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     e9f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     ea6:	00 00 
     ea8:	74 05                	je     eaf <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
     eaa:	e8 00 00 00 00       	callq  eaf <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
     eaf:	48 83 c4 68          	add    $0x68,%rsp
     eb3:	5b                   	pop    %rbx
     eb4:	5d                   	pop    %rbp
     eb5:	c3                   	retq   

0000000000000eb6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:
    }
}

     eb6:	55                   	push   %rbp
     eb7:	48 89 e5             	mov    %rsp,%rbp
     eba:	53                   	push   %rbx
     ebb:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
     ec2:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     ec6:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     eca:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
     ed1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     ed8:	00 00 
     eda:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     ede:	31 c0                	xor    %eax,%eax
void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
     ee0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
     ee4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     ee8:	48 89 d6             	mov    %rdx,%rsi
     eeb:	48 89 c7             	mov    %rax,%rdi
     eee:	e8 00 00 00 00       	callq  ef3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>
{
    QFile file(FileName);
     ef3:	be 10 00 00 00       	mov    $0x10,%esi
     ef8:	bf 01 00 00 00       	mov    $0x1,%edi
     efd:	e8 00 00 00 00       	callq  f02 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
     f02:	89 c2                	mov    %eax,%edx
     f04:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     f08:	89 d6                	mov    %edx,%esi
     f0a:	48 89 c7             	mov    %rax,%rdi
     f0d:	e8 00 00 00 00       	callq  f12 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }
     f12:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     f16:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f1a:	48 89 d6             	mov    %rdx,%rsi
     f1d:	48 89 c7             	mov    %rax,%rdi
     f20:	e8 00 00 00 00       	callq  f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    QXmlStreamReader xml(&file);
     f25:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f29:	48 89 c7             	mov    %rax,%rdi
     f2c:	e8 00 00 00 00       	callq  f31 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
     f31:	83 f0 01             	xor    $0x1,%eax
     f34:	84 c0                	test   %al,%al
     f36:	74 1a                	je     f52 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
     f38:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f3c:	48 89 c7             	mov    %rax,%rdi
     f3f:	e8 00 00 00 00       	callq  f44 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
     f44:	83 f0 01             	xor    $0x1,%eax
     f47:	84 c0                	test   %al,%al
     f49:	74 07                	je     f52 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
     f4b:	b8 01 00 00 00       	mov    $0x1,%eax
     f50:	eb 05                	jmp    f57 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
     f52:	b8 00 00 00 00       	mov    $0x0,%eax
     f57:	84 c0                	test   %al,%al
     f59:	0f 84 cb 00 00 00    	je     102a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>

    while (!xml.atEnd() && !xml.hasError())
     f5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f63:	48 89 c7             	mov    %rax,%rdi
     f66:	e8 00 00 00 00       	callq  f6b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
     f6b:	89 45 9c             	mov    %eax,-0x64(%rbp)
    {
     f6e:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
     f72:	0f 84 a6 00 00 00    	je     101e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
     f78:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
     f7c:	75 a7                	jne    f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
            continue;
        if (token == QXmlStreamReader::StartElement)
     f7e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     f82:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     f86:	48 89 d6             	mov    %rdx,%rsi
     f89:	48 89 c7             	mov    %rax,%rdi
     f8c:	e8 00 00 00 00       	callq  f91 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
     f91:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     f95:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f9c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
     f9c:	48 89 c7             	mov    %rax,%rdi
     f9f:	e8 00 00 00 00       	callq  fa4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
     fa4:	89 c3                	mov    %eax,%ebx
     fa6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     faa:	48 89 c7             	mov    %rax,%rdi
     fad:	e8 00 00 00 00       	callq  fb2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
     fb2:	84 db                	test   %bl,%bl
     fb4:	75 6e                	jne    1024 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
        {
            if (xml.name() == "sems")
     fb6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     fba:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     fbe:	48 89 d6             	mov    %rdx,%rsi
     fc1:	48 89 c7             	mov    %rax,%rdi
     fc4:	e8 00 00 00 00       	callq  fc9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
     fc9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     fcd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # fd4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
     fd4:	48 89 c7             	mov    %rax,%rdi
     fd7:	e8 00 00 00 00       	callq  fdc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
     fdc:	89 c3                	mov    %eax,%ebx
     fde:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     fe2:	48 89 c7             	mov    %rax,%rdi
     fe5:	e8 00 00 00 00       	callq  fea <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
     fea:	84 db                	test   %bl,%bl
     fec:	0f 84 33 ff ff ff    	je     f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                continue;
     ff2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
     ff9:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     ffd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    1001:	48 89 ce             	mov    %rcx,%rsi
    1004:	48 89 c7             	mov    %rax,%rdi
    1007:	e8 00 00 00 00       	callq  100c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    100c:	83 f0 01             	xor    $0x1,%eax
    100f:	84 c0                	test   %al,%al
    1011:	0f 84 0e ff ff ff    	je     f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    1017:	bb 00 00 00 00       	mov    $0x0,%ebx
            if (xml.name() == "sem"){
                if (!parseSem(xml, sems)) {
    101c:	eb 11                	jmp    102f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    101e:	90                   	nop
    101f:	e9 01 ff ff ff       	jmpq   f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
    1024:	90                   	nop
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    1025:	e9 fb fe ff ff       	jmpq   f25 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    102a:	bb 01 00 00 00       	mov    $0x1,%ebx
    102f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1033:	48 89 c7             	mov    %rax,%rdi
    1036:	e8 00 00 00 00       	callq  103b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    103b:	83 fb 01             	cmp    $0x1,%ebx
    103e:	74 07                	je     1047 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    1040:	bb 00 00 00 00       	mov    $0x0,%ebx
    1045:	eb 06                	jmp    104d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    QFile file(FileName);

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }
    1047:	90                   	nop
    1048:	bb 01 00 00 00       	mov    $0x1,%ebx
    104d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1051:	48 89 c7             	mov    %rax,%rdi
    1054:	e8 00 00 00 00       	callq  1059 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    1059:	83 fb 01             	cmp    $0x1,%ebx
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
    105c:	90                   	nop
                if (!parseSem(xml, sems)) {

                    return;
                }
            }
        }
    105d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1061:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1068:	00 00 
    106a:	74 54                	je     10c0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    106c:	eb 4d                	jmp    10bb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    106e:	48 89 c3             	mov    %rax,%rbx
    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
    1071:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1075:	48 89 c7             	mov    %rax,%rdi
    1078:	e8 00 00 00 00       	callq  107d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    107d:	eb 14                	jmp    1093 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    107f:	48 89 c3             	mov    %rax,%rbx
        {
            if (xml.name() == "sems")
    1082:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1086:	48 89 c7             	mov    %rax,%rdi
    1089:	e8 00 00 00 00       	callq  108e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    108e:	eb 03                	jmp    1093 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    1090:	48 89 c3             	mov    %rax,%rbx
    QFile file(FileName);

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }
    1093:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1097:	48 89 c7             	mov    %rax,%rdi
    109a:	e8 00 00 00 00       	callq  109f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    109f:	eb 03                	jmp    10a4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    10a1:	48 89 c3             	mov    %rax,%rbx
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
    10a4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    10a8:	48 89 c7             	mov    %rax,%rdi
    10ab:	e8 00 00 00 00       	callq  10b0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    10b0:	48 89 d8             	mov    %rbx,%rax
    10b3:	48 89 c7             	mov    %rax,%rdi
    10b6:	e8 00 00 00 00       	callq  10bb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                if (!parseSem(xml, sems)) {

                    return;
                }
            }
        }
    10bb:	e8 00 00 00 00       	callq  10c0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    10c0:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    10c7:	5b                   	pop    %rbx
    10c8:	5d                   	pop    %rbp
    10c9:	c3                   	retq   

00000000000010ca <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:
    }
}

    10ca:	55                   	push   %rbp
    10cb:	48 89 e5             	mov    %rsp,%rbp
    10ce:	53                   	push   %rbx
    10cf:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    10d6:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    10dd:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    10e4:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    10eb:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    10f1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    10f8:	00 00 
    10fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    10fe:	31 c0                	xor    %eax,%eax
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{

    1100:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    1107:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    110e:	48 89 d6             	mov    %rdx,%rsi
    1111:	48 89 c7             	mov    %rax,%rdi
    1114:	e8 00 00 00 00       	callq  1119 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>

    1119:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    1120:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1127:	48 89 d6             	mov    %rdx,%rsi
    112a:	48 89 c7             	mov    %rax,%rdi
    112d:	e8 00 00 00 00       	callq  1132 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>
    QString str = Block;
    QString str_copy = str;
    1132:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1139:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1140 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    1140:	48 89 c7             	mov    %rax,%rdi
    1143:	e8 00 00 00 00       	callq  1148 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    1148:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    114f:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1156:	b9 00 00 00 00       	mov    $0x0,%ecx
    115b:	ba 01 00 00 00       	mov    $0x1,%edx
    1160:	48 89 c7             	mov    %rax,%rdi
    1163:	e8 00 00 00 00       	callq  1168 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    1168:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    116f:	48 89 c7             	mov    %rax,%rdi
    1172:	e8 00 00 00 00       	callq  1177 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>

    1177:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    117e:	be 01 00 00 00       	mov    $0x1,%esi
    1183:	48 89 c7             	mov    %rax,%rdi
    1186:	e8 00 00 00 00       	callq  118b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QRegExp QR("[S|s]tep\\d+\\s");
    118b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1192:	48 89 c7             	mov    %rax,%rdi
    1195:	e8 00 00 00 00       	callq  119a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QR.setMinimal(true);
    119a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    11a1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11a8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    11a8:	48 89 c7             	mov    %rax,%rdi
    11ab:	e8 00 00 00 00       	callq  11b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    11b0:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    11b7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    11be:	b9 00 00 00 00       	mov    $0x0,%ecx
    11c3:	ba 01 00 00 00       	mov    $0x1,%edx
    11c8:	48 89 c7             	mov    %rax,%rdi
    11cb:	e8 00 00 00 00       	callq  11d0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    11d0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    11d7:	48 89 c7             	mov    %rax,%rdi
    11da:	e8 00 00 00 00       	callq  11df <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QChar qc;
    11df:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    11e6:	48 89 c7             	mov    %rax,%rdi
    11e9:	e8 00 00 00 00       	callq  11ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    11ee:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    11f5:	48 89 c7             	mov    %rax,%rdi
    11f8:	e8 00 00 00 00       	callq  11fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>

    11fd:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1204:	48 89 c7             	mov    %rax,%rdi
    1207:	e8 00 00 00 00       	callq  120c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QString StepN;
    120c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1213:	48 89 c7             	mov    %rax,%rdi
    1216:	e8 00 00 00 00       	callq  121b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>
    QString step;
    QStringList ThreeParts;
    121b:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    1222:	00 00 00 

    1225:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    122c:	00 00 00 
    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    122f:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    1236:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    123d:	b9 00 00 00 00       	mov    $0x0,%ecx
    1242:	ba 00 00 00 00       	mov    $0x0,%edx
    1247:	48 89 c7             	mov    %rax,%rdi
    124a:	e8 00 00 00 00       	callq  124f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    124f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
    {
    1255:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    125c:	0f 88 35 03 00 00    	js     1597 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>
        int i = QR.indexIn(str);
        if(i<0) return;

    1262:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    1268:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    126e:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    1271:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    1278:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    127c:	48 89 d6             	mov    %rdx,%rsi
    127f:	48 89 c7             	mov    %rax,%rdi
    1282:	e8 00 00 00 00       	callq  1287 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    1287:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    128b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    1292:	89 da                	mov    %ebx,%edx
    1294:	48 89 ce             	mov    %rcx,%rsi
    1297:	48 89 c7             	mov    %rax,%rdi
    129a:	e8 00 00 00 00       	callq  129f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    129f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    12a5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    12a9:	48 89 c7             	mov    %rax,%rdi
    12ac:	e8 00 00 00 00       	callq  12b1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>

    12b1:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    12b8:	75 0c                	jne    12c6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    12ba:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    12c0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
        lineInner = whatLine(str_copy, lineBase + i);
        if(lineBase == 0) lineBase = i;
    12c6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    12ca:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    12d1:	ba 00 00 00 00       	mov    $0x0,%edx
    12d6:	48 89 ce             	mov    %rcx,%rsi
    12d9:	48 89 c7             	mov    %rax,%rdi
    12dc:	e8 00 00 00 00       	callq  12e1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    12e1:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    12e5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    12ec:	48 89 d6             	mov    %rdx,%rsi
    12ef:	48 89 c7             	mov    %rax,%rdi
    12f2:	e8 00 00 00 00       	callq  12f7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    12f7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    12fb:	48 89 c7             	mov    %rax,%rdi
    12fe:	e8 00 00 00 00       	callq  1303 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>

    1303:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    130a:	48 89 c7             	mov    %rax,%rdi
    130d:	e8 00 00 00 00       	callq  1312 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    1312:	89 c3                	mov    %eax,%ebx
    1314:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    131b:	48 89 c7             	mov    %rax,%rdi
    131e:	e8 00 00 00 00       	callq  1323 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    1323:	89 da                	mov    %ebx,%edx
    1325:	29 c2                	sub    %eax,%edx
    1327:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    132b:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    1332:	48 89 ce             	mov    %rcx,%rsi
    1335:	48 89 c7             	mov    %rax,%rdi
    1338:	e8 00 00 00 00       	callq  133d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    133d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1341:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1348:	48 89 d6             	mov    %rdx,%rsi
    134b:	48 89 c7             	mov    %rax,%rdi
    134e:	e8 00 00 00 00       	callq  1353 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    1353:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1357:	48 89 c7             	mov    %rax,%rdi
    135a:	e8 00 00 00 00       	callq  135f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>
        StepArgs = QR.cap(0);
        str = str.right(str.length() - StepArgs.length());

    135f:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    1366:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    136d:	b9 00 00 00 00       	mov    $0x0,%ecx
    1372:	ba 00 00 00 00       	mov    $0x0,%edx
    1377:	48 89 c7             	mov    %rax,%rdi
    137a:	e8 00 00 00 00       	callq  137f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>

    137f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1383:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    138a:	ba 00 00 00 00       	mov    $0x0,%edx
    138f:	48 89 ce             	mov    %rcx,%rsi
    1392:	48 89 c7             	mov    %rax,%rdi
    1395:	e8 00 00 00 00       	callq  139a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    139a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    139e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13a5:	48 89 d6             	mov    %rdx,%rsi
    13a8:	48 89 c7             	mov    %rax,%rdi
    13ab:	e8 00 00 00 00       	callq  13b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    13b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13b4:	48 89 c7             	mov    %rax,%rdi
    13b7:	e8 00 00 00 00       	callq  13bc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
        //globalStepNumber = StepN.toInt();
    13bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    13c0:	be 7b 00 00 00       	mov    $0x7b,%esi
    13c5:	48 89 c7             	mov    %rax,%rdi
    13c8:	e8 00 00 00 00       	callq  13cd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    13cd:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    13d3:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    13d7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    13de:	b9 01 00 00 00       	mov    $0x1,%ecx
    13e3:	48 89 c7             	mov    %rax,%rdi
    13e6:	e8 00 00 00 00       	callq  13eb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    13eb:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        int j = str.indexOf('{',i);
    13f1:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    13f7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    13fe:	89 d6                	mov    %edx,%esi
    1400:	48 89 c7             	mov    %rax,%rdi
    1403:	e8 00 00 00 00       	callq  1408 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    1408:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    140c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1410:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1414:	48 89 c7             	mov    %rax,%rdi
    1417:	e8 00 00 00 00       	callq  141c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    141c:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        qc = str[j];
    1423:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    142a:	00 00 00 

    142d:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    1434:	00 00 00 
        int bl=1;
        int br=0;
    1437:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    143d:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    1443:	0f 84 a2 00 00 00    	je     14eb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>

        while(bl != br)
    1449:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
        {
    1450:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    1456:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    145d:	89 d6                	mov    %edx,%esi
    145f:	48 89 c7             	mov    %rax,%rdi
    1462:	e8 00 00 00 00       	callq  1467 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    1467:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    146b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    146f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1473:	48 89 c7             	mov    %rax,%rdi
    1476:	e8 00 00 00 00       	callq  147b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    147b:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            j++;
    1482:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1486:	be 7b 00 00 00       	mov    $0x7b,%esi
    148b:	48 89 c7             	mov    %rax,%rdi
    148e:	e8 00 00 00 00       	callq  1493 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    1493:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1497:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    149e:	89 d6                	mov    %edx,%esi
    14a0:	89 c7                	mov    %eax,%edi
    14a2:	e8 00 00 00 00       	callq  14a7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    14a7:	84 c0                	test   %al,%al
    14a9:	74 07                	je     14b2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    14ab:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            qc = str[j];
    14b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    14b6:	be 7d 00 00 00       	mov    $0x7d,%esi
    14bb:	48 89 c7             	mov    %rax,%rdi
    14be:	e8 00 00 00 00       	callq  14c3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    14c3:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    14c7:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    14ce:	89 d6                	mov    %edx,%esi
    14d0:	89 c7                	mov    %eax,%edi
    14d2:	e8 00 00 00 00       	callq  14d7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    14d7:	84 c0                	test   %al,%al
    14d9:	0f 84 58 ff ff ff    	je     1437 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    14df:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        int j = str.indexOf('{',i);

        qc = str[j];

        int bl=1;
        int br=0;
    14e6:	e9 4c ff ff ff       	jmpq   1437 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    14eb:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    14f1:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    14f7:	89 c1                	mov    %eax,%ecx
    14f9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    14fd:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    1503:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    150a:	48 89 c7             	mov    %rax,%rdi
    150d:	e8 00 00 00 00       	callq  1512 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    1512:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1516:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    151d:	48 89 d6             	mov    %rdx,%rsi
    1520:	48 89 c7             	mov    %rax,%rdi
    1523:	e8 00 00 00 00       	callq  1528 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    1528:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    152c:	48 89 c7             	mov    %rax,%rdi
    152f:	e8 00 00 00 00       	callq  1534 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>

    1534:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    153b:	48 89 c7             	mov    %rax,%rdi
    153e:	e8 00 00 00 00       	callq  1543 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    1543:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    1549:	89 c2                	mov    %eax,%edx
    154b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    154f:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    1556:	48 89 ce             	mov    %rcx,%rsi
    1559:	48 89 c7             	mov    %rax,%rdi
    155c:	e8 00 00 00 00       	callq  1561 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    1561:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1565:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    156c:	48 89 d6             	mov    %rdx,%rsi
    156f:	48 89 c7             	mov    %rax,%rdi
    1572:	e8 00 00 00 00       	callq  1577 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    1577:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    157b:	48 89 c7             	mov    %rax,%rdi
    157e:	e8 00 00 00 00       	callq  1583 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        step = str.mid(i,j-i);
    1583:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    1589:	83 c0 01             	add    $0x1,%eax
    158c:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QString StepN;
    QString step;
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;
    1592:	e9 98 fc ff ff       	jmpq   122f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>

    while(1==1)
    {
    1597:	90                   	nop
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    1598:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    159f:	48 89 c7             	mov    %rax,%rdi
    15a2:	e8 00 00 00 00       	callq  15a7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    15a7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    15ae:	48 89 c7             	mov    %rax,%rdi
    15b1:	e8 00 00 00 00       	callq  15b6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    15b6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    15bd:	48 89 c7             	mov    %rax,%rdi
    15c0:	e8 00 00 00 00       	callq  15c5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>
    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    15c5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    15cc:	48 89 c7             	mov    %rax,%rdi
    15cf:	e8 00 00 00 00       	callq  15d4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>

    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    15d4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15db:	48 89 c7             	mov    %rax,%rdi
    15de:	e8 00 00 00 00       	callq  15e3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    15e3:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    15ea:	48 89 c7             	mov    %rax,%rdi
    15ed:	e8 00 00 00 00       	callq  15f2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
}

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    15f2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    15f9:	48 89 c7             	mov    %rax,%rdi
    15fc:	e8 00 00 00 00       	callq  1601 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>
    }
}

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{

    1601:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1608:	48 89 c7             	mov    %rax,%rdi
    160b:	e8 00 00 00 00       	callq  1610 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    {
    1610:	90                   	nop
        }

        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }
    1611:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1615:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    161c:	00 00 
    161e:	0f 84 75 01 00 00    	je     1799 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    1624:	e9 6b 01 00 00       	jmpq   1794 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    1629:	48 89 c3             	mov    %rax,%rbx
    162c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1633:	48 89 c7             	mov    %rax,%rdi
    1636:	e8 00 00 00 00       	callq  163b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    163b:	e9 26 01 00 00       	jmpq   1766 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1640:	48 89 c3             	mov    %rax,%rbx
    1643:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    164a:	48 89 c7             	mov    %rax,%rdi
    164d:	e8 00 00 00 00       	callq  1652 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    1652:	e9 0f 01 00 00       	jmpq   1766 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1657:	48 89 c3             	mov    %rax,%rbx
    165a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1661:	48 89 c7             	mov    %rax,%rdi
    1664:	e8 00 00 00 00       	callq  1669 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    1669:	e9 e4 00 00 00       	jmpq   1752 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    166e:	48 89 c3             	mov    %rax,%rbx
    1671:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1678:	48 89 c7             	mov    %rax,%rdi
    167b:	e8 00 00 00 00       	callq  1680 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    1680:	e9 cd 00 00 00       	jmpq   1752 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    1685:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;

    1688:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    168c:	48 89 c7             	mov    %rax,%rdi
    168f:	e8 00 00 00 00       	callq  1694 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    1694:	eb 58                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1696:	48 89 c3             	mov    %rax,%rbx

        lineInner = whatLine(str_copy, lineBase + i);
        if(lineBase == 0) lineBase = i;
    1699:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    169d:	48 89 c7             	mov    %rax,%rdi
    16a0:	e8 00 00 00 00       	callq  16a5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    16a5:	eb 47                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    16a7:	48 89 c3             	mov    %rax,%rbx

    16aa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    16ae:	48 89 c7             	mov    %rax,%rdi
    16b1:	e8 00 00 00 00       	callq  16b6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    16b6:	eb 36                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    16b8:	48 89 c3             	mov    %rax,%rbx
        StepArgs = QR.cap(0);
        str = str.right(str.length() - StepArgs.length());


    16bb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    16bf:	48 89 c7             	mov    %rax,%rdi
    16c2:	e8 00 00 00 00       	callq  16c7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    16c7:	eb 25                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    16c9:	48 89 c3             	mov    %rax,%rbx
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    16cc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    16d0:	48 89 c7             	mov    %rax,%rdi
    16d3:	e8 00 00 00 00       	callq  16d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    16d8:	eb 14                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    16da:	48 89 c3             	mov    %rax,%rbx

    16dd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16e1:	48 89 c7             	mov    %rax,%rdi
    16e4:	e8 00 00 00 00       	callq  16e9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    16e9:	eb 03                	jmp    16ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    16eb:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    16ee:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    16f5:	48 89 c7             	mov    %rax,%rdi
    16f8:	e8 00 00 00 00       	callq  16fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    16fd:	eb 03                	jmp    1702 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    16ff:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    1702:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1709:	48 89 c7             	mov    %rax,%rdi
    170c:	e8 00 00 00 00       	callq  1711 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    1711:	eb 03                	jmp    1716 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    1713:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    1716:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    171d:	48 89 c7             	mov    %rax,%rdi
    1720:	e8 00 00 00 00       	callq  1725 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    1725:	eb 03                	jmp    172a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    1727:	48 89 c3             	mov    %rax,%rbx
    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    172a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1731:	48 89 c7             	mov    %rax,%rdi
    1734:	e8 00 00 00 00       	callq  1739 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    1739:	eb 03                	jmp    173e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    173b:	48 89 c3             	mov    %rax,%rbx

    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    173e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1745:	48 89 c7             	mov    %rax,%rdi
    1748:	e8 00 00 00 00       	callq  174d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    174d:	eb 03                	jmp    1752 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    174f:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    1752:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1759:	48 89 c7             	mov    %rax,%rdi
    175c:	e8 00 00 00 00       	callq  1761 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    1761:	eb 03                	jmp    1766 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1763:	48 89 c3             	mov    %rax,%rbx
}

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    1766:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    176d:	48 89 c7             	mov    %rax,%rdi
    1770:	e8 00 00 00 00       	callq  1775 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    1775:	eb 03                	jmp    177a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    1777:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{

    177a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1781:	48 89 c7             	mov    %rax,%rdi
    1784:	e8 00 00 00 00       	callq  1789 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    1789:	48 89 d8             	mov    %rbx,%rax
    178c:	48 89 c7             	mov    %rax,%rdi
    178f:	e8 00 00 00 00       	callq  1794 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        }

        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }
    1794:	e8 00 00 00 00       	callq  1799 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    1799:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    17a0:	5b                   	pop    %rbx
    17a1:	5d                   	pop    %rbp
    17a2:	c3                   	retq   
    17a3:	90                   	nop

00000000000017a4 <_ZN6Parser2peE7QString>:

}
    17a4:	55                   	push   %rbp
    17a5:	48 89 e5             	mov    %rsp,%rbp
    17a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    17ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

void Parser::pe(QString str){
    17b0:	90                   	nop
    17b1:	5d                   	pop    %rbp
    17b2:	c3                   	retq   
    17b3:	90                   	nop

00000000000017b4 <_ZN6Parser11splitBlocksE7QString>:

};

    17b4:	55                   	push   %rbp
    17b5:	48 89 e5             	mov    %rsp,%rbp
    17b8:	53                   	push   %rbx
    17b9:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    17c0:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    17c7:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    17ce:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    17d5:	00 00 
    17d7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    17db:	31 c0                	xor    %eax,%eax
void Parser::splitBlocks(QString code)
    17dd:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    17e4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    17eb:	48 89 d6             	mov    %rdx,%rsi
    17ee:	48 89 c7             	mov    %rax,%rdi
    17f1:	e8 00 00 00 00       	callq  17f6 <_ZN6Parser11splitBlocksE7QString+0x42>
{
    17f6:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    17fd:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1804:	48 89 d6             	mov    %rdx,%rsi
    1807:	48 89 c7             	mov    %rax,%rdi
    180a:	e8 00 00 00 00       	callq  180f <_ZN6Parser11splitBlocksE7QString+0x5b>
    QString str  = code;
    QString str_copy = str;
    180f:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1816:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 181d <_ZN6Parser11splitBlocksE7QString+0x69>
    181d:	48 89 c7             	mov    %rax,%rdi
    1820:	e8 00 00 00 00       	callq  1825 <_ZN6Parser11splitBlocksE7QString+0x71>
    1825:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    182c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1833:	ba 01 00 00 00       	mov    $0x1,%edx
    1838:	48 89 ce             	mov    %rcx,%rsi
    183b:	48 89 c7             	mov    %rax,%rdi
    183e:	e8 00 00 00 00       	callq  1843 <_ZN6Parser11splitBlocksE7QString+0x8f>
    1843:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    1849:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1850:	48 89 c7             	mov    %rax,%rdi
    1853:	e8 00 00 00 00       	callq  1858 <_ZN6Parser11splitBlocksE7QString+0xa4>

    1858:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    185f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1866 <_ZN6Parser11splitBlocksE7QString+0xb2>
    1866:	48 89 c7             	mov    %rax,%rdi
    1869:	e8 00 00 00 00       	callq  186e <_ZN6Parser11splitBlocksE7QString+0xba>
    186e:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    1875:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    187c:	ba 01 00 00 00       	mov    $0x1,%edx
    1881:	48 89 ce             	mov    %rcx,%rsi
    1884:	48 89 c7             	mov    %rax,%rdi
    1887:	e8 00 00 00 00       	callq  188c <_ZN6Parser11splitBlocksE7QString+0xd8>
    188c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    1892:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1899:	48 89 c7             	mov    %rax,%rdi
    189c:	e8 00 00 00 00       	callq  18a1 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BFL = str.count("{");
    18a1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    18a8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18af <_ZN6Parser11splitBlocksE7QString+0xfb>
    18af:	48 89 c7             	mov    %rax,%rdi
    18b2:	e8 00 00 00 00       	callq  18b7 <_ZN6Parser11splitBlocksE7QString+0x103>
    18b7:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    18be:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    18c5:	ba 01 00 00 00       	mov    $0x1,%edx
    18ca:	48 89 ce             	mov    %rcx,%rsi
    18cd:	48 89 c7             	mov    %rax,%rdi
    18d0:	e8 00 00 00 00       	callq  18d5 <_ZN6Parser11splitBlocksE7QString+0x121>
    18d5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    18db:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    18e2:	48 89 c7             	mov    %rax,%rdi
    18e5:	e8 00 00 00 00       	callq  18ea <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BFR = str.count("}");
    18ea:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    18f1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 18f8 <_ZN6Parser11splitBlocksE7QString+0x144>
    18f8:	48 89 c7             	mov    %rax,%rdi
    18fb:	e8 00 00 00 00       	callq  1900 <_ZN6Parser11splitBlocksE7QString+0x14c>
    1900:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    1907:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    190e:	ba 01 00 00 00       	mov    $0x1,%edx
    1913:	48 89 ce             	mov    %rcx,%rsi
    1916:	48 89 c7             	mov    %rax,%rdi
    1919:	e8 00 00 00 00       	callq  191e <_ZN6Parser11splitBlocksE7QString+0x16a>
    191e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    1924:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    192b:	48 89 c7             	mov    %rax,%rdi
    192e:	e8 00 00 00 00       	callq  1933 <_ZN6Parser11splitBlocksE7QString+0x17f>
    unsigned int BCL = str.count("(");
    unsigned int BCR = str.count(")");
    1933:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    1939:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    193f:	74 43                	je     1984 <_ZN6Parser11splitBlocksE7QString+0x1d0>

    1941:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1948:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 194f <_ZN6Parser11splitBlocksE7QString+0x19b>
    194f:	48 89 c7             	mov    %rax,%rdi
    1952:	e8 00 00 00 00       	callq  1957 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    1957:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    195e:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    1965:	48 89 d6             	mov    %rdx,%rsi
    1968:	48 89 c7             	mov    %rax,%rdi
    196b:	e8 00 00 00 00       	callq  1970 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    1970:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1977:	48 89 c7             	mov    %rax,%rdi
    197a:	e8 00 00 00 00       	callq  197f <_ZN6Parser11splitBlocksE7QString+0x1cb>
    if(BFL!=BFR){
    197f:	e9 cf 03 00 00       	jmpq   1d53 <_ZN6Parser11splitBlocksE7QString+0x59f>
        pe("Err. 1: Brakes {} are not pair.");
        return;
    }
    1984:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    198a:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    1990:	74 43                	je     19d5 <_ZN6Parser11splitBlocksE7QString+0x221>

    1992:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1999:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19a0 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    19a0:	48 89 c7             	mov    %rax,%rdi
    19a3:	e8 00 00 00 00       	callq  19a8 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    19a8:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    19af:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    19b6:	48 89 d6             	mov    %rdx,%rsi
    19b9:	48 89 c7             	mov    %rax,%rdi
    19bc:	e8 00 00 00 00       	callq  19c1 <_ZN6Parser11splitBlocksE7QString+0x20d>
    19c1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    19c8:	48 89 c7             	mov    %rax,%rdi
    19cb:	e8 00 00 00 00       	callq  19d0 <_ZN6Parser11splitBlocksE7QString+0x21c>
    if(BCL!=BCR){
    19d0:	e9 7e 03 00 00       	jmpq   1d53 <_ZN6Parser11splitBlocksE7QString+0x59f>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }
    19d5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    19dc:	48 89 c7             	mov    %rax,%rdi
    19df:	e8 00 00 00 00       	callq  19e4 <_ZN6Parser11splitBlocksE7QString+0x230>

    19e4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    19eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19f2 <_ZN6Parser11splitBlocksE7QString+0x23e>
    19f2:	48 89 c7             	mov    %rax,%rdi
    19f5:	e8 00 00 00 00       	callq  19fa <_ZN6Parser11splitBlocksE7QString+0x246>
    19fa:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    1a01:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1a08:	b9 00 00 00 00       	mov    $0x0,%ecx
    1a0d:	ba 01 00 00 00       	mov    $0x1,%edx
    1a12:	48 89 c7             	mov    %rax,%rdi
    1a15:	e8 00 00 00 00       	callq  1a1a <_ZN6Parser11splitBlocksE7QString+0x266>
    1a1a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a21:	48 89 c7             	mov    %rax,%rdi
    1a24:	e8 00 00 00 00       	callq  1a29 <_ZN6Parser11splitBlocksE7QString+0x275>
    QByteArray BlockResult;
    1a29:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    1a30:	00 00 00 
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    1a33:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a37:	48 89 c7             	mov    %rax,%rdi
    1a3a:	e8 00 00 00 00       	callq  1a3f <_ZN6Parser11splitBlocksE7QString+0x28b>
    int i = 0;
    1a3f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1a46:	48 89 c7             	mov    %rax,%rdi
    1a49:	e8 00 00 00 00       	callq  1a4e <_ZN6Parser11splitBlocksE7QString+0x29a>
    QString blockName;
    QChar qc;
    1a4e:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    1a55:	00 00 00 

    1a58:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    1a5f:	00 00 00 
    int     lineBase = 0;
    1a62:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a66:	48 89 c7             	mov    %rax,%rdi
    1a69:	e8 00 00 00 00       	callq  1a6e <_ZN6Parser11splitBlocksE7QString+0x2ba>
    int     line     = 0;
    QString block;

    while(1==1)
    1a6e:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    1a75:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1a7c:	b9 00 00 00 00       	mov    $0x0,%ecx
    1a81:	ba 00 00 00 00       	mov    $0x0,%edx
    1a86:	48 89 c7             	mov    %rax,%rdi
    1a89:	e8 00 00 00 00       	callq  1a8e <_ZN6Parser11splitBlocksE7QString+0x2da>
    1a8e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    1a94:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    1a9b:	0f 88 7b 02 00 00    	js     1d1c <_ZN6Parser11splitBlocksE7QString+0x568>
    {
        i = Block.indexIn(str);if(i<0)return;
    1aa1:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    1aa7:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    1aad:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    1ab0:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    1ab7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1abb:	48 89 d6             	mov    %rdx,%rsi
    1abe:	48 89 c7             	mov    %rax,%rdi
    1ac1:	e8 00 00 00 00       	callq  1ac6 <_ZN6Parser11splitBlocksE7QString+0x312>
    1ac6:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    1aca:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    1ad1:	89 da                	mov    %ebx,%edx
    1ad3:	48 89 ce             	mov    %rcx,%rsi
    1ad6:	48 89 c7             	mov    %rax,%rdi
    1ad9:	e8 00 00 00 00       	callq  1ade <_ZN6Parser11splitBlocksE7QString+0x32a>
    1ade:	83 c0 01             	add    $0x1,%eax
    1ae1:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    1ae7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1aeb:	48 89 c7             	mov    %rax,%rdi
    1aee:	e8 00 00 00 00       	callq  1af3 <_ZN6Parser11splitBlocksE7QString+0x33f>

    1af3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1af7:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    1afe:	ba 01 00 00 00       	mov    $0x1,%edx
    1b03:	48 89 ce             	mov    %rcx,%rsi
    1b06:	48 89 c7             	mov    %rax,%rdi
    1b09:	e8 00 00 00 00       	callq  1b0e <_ZN6Parser11splitBlocksE7QString+0x35a>
    1b0e:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1b12:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1b16:	48 89 d6             	mov    %rdx,%rsi
    1b19:	48 89 c7             	mov    %rax,%rdi
    1b1c:	e8 00 00 00 00       	callq  1b21 <_ZN6Parser11splitBlocksE7QString+0x36d>
    1b21:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1b25:	48 89 c7             	mov    %rax,%rdi
    1b28:	e8 00 00 00 00       	callq  1b2d <_ZN6Parser11splitBlocksE7QString+0x379>
        line = whatLine(str_copy, lineBase + i) + 1;
    1b2d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b31:	be 7b 00 00 00       	mov    $0x7b,%esi
    1b36:	48 89 c7             	mov    %rax,%rdi
    1b39:	e8 00 00 00 00       	callq  1b3e <_ZN6Parser11splitBlocksE7QString+0x38a>
    1b3e:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    1b44:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    1b48:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1b4f:	b9 01 00 00 00       	mov    $0x1,%ecx
    1b54:	48 89 c7             	mov    %rax,%rdi
    1b57:	e8 00 00 00 00       	callq  1b5c <_ZN6Parser11splitBlocksE7QString+0x3a8>
    1b5c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
        blockName = Block.cap(1);
        int j = str.indexOf('{',i);
    1b62:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    1b68:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1b6f:	89 d6                	mov    %edx,%esi
    1b71:	48 89 c7             	mov    %rax,%rdi
    1b74:	e8 00 00 00 00       	callq  1b79 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    1b79:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1b7d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1b81:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b85:	48 89 c7             	mov    %rax,%rdi
    1b88:	e8 00 00 00 00       	callq  1b8d <_ZN6Parser11splitBlocksE7QString+0x3d9>
    1b8d:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        qc = str[j];
    1b94:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    1b9b:	00 00 00 

    1b9e:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    1ba5:	00 00 00 
        int bl=1;
        int br=0;
    1ba8:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    1bae:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    1bb4:	0f 84 a2 00 00 00    	je     1c5c <_ZN6Parser11splitBlocksE7QString+0x4a8>

        while(bl != br)
    1bba:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
        {
    1bc1:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    1bc7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1bce:	89 d6                	mov    %edx,%esi
    1bd0:	48 89 c7             	mov    %rax,%rdi
    1bd3:	e8 00 00 00 00       	callq  1bd8 <_ZN6Parser11splitBlocksE7QString+0x424>
    1bd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1bdc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1be0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1be4:	48 89 c7             	mov    %rax,%rdi
    1be7:	e8 00 00 00 00       	callq  1bec <_ZN6Parser11splitBlocksE7QString+0x438>
    1bec:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            j++;
    1bf3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1bf7:	be 7b 00 00 00       	mov    $0x7b,%esi
    1bfc:	48 89 c7             	mov    %rax,%rdi
    1bff:	e8 00 00 00 00       	callq  1c04 <_ZN6Parser11splitBlocksE7QString+0x450>
    1c04:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1c08:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    1c0f:	89 d6                	mov    %edx,%esi
    1c11:	89 c7                	mov    %eax,%edi
    1c13:	e8 00 00 00 00       	callq  1c18 <_ZN6Parser11splitBlocksE7QString+0x464>
    1c18:	84 c0                	test   %al,%al
    1c1a:	74 07                	je     1c23 <_ZN6Parser11splitBlocksE7QString+0x46f>
    1c1c:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            qc = str[j];
    1c23:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c27:	be 7d 00 00 00       	mov    $0x7d,%esi
    1c2c:	48 89 c7             	mov    %rax,%rdi
    1c2f:	e8 00 00 00 00       	callq  1c34 <_ZN6Parser11splitBlocksE7QString+0x480>
    1c34:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1c38:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    1c3f:	89 d6                	mov    %edx,%esi
    1c41:	89 c7                	mov    %eax,%edi
    1c43:	e8 00 00 00 00       	callq  1c48 <_ZN6Parser11splitBlocksE7QString+0x494>
    1c48:	84 c0                	test   %al,%al
    1c4a:	0f 84 58 ff ff ff    	je     1ba8 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    1c50:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        int j = str.indexOf('{',i);

        qc = str[j];

        int bl=1;
        int br=0;
    1c57:	e9 4c ff ff ff       	jmpq   1ba8 <_ZN6Parser11splitBlocksE7QString+0x3f4>
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    1c5c:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    1c62:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    1c68:	89 c1                	mov    %eax,%ecx
    1c6a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c6e:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    1c74:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    1c7b:	48 89 c7             	mov    %rax,%rdi
    1c7e:	e8 00 00 00 00       	callq  1c83 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    1c83:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1c87:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c8b:	48 89 d6             	mov    %rdx,%rsi
    1c8e:	48 89 c7             	mov    %rax,%rdi
    1c91:	e8 00 00 00 00       	callq  1c96 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    1c96:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c9a:	48 89 c7             	mov    %rax,%rdi
    1c9d:	e8 00 00 00 00       	callq  1ca2 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        block = str.mid(i,j-i);
    1ca2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1ca9:	48 89 c7             	mov    %rax,%rdi
    1cac:	e8 00 00 00 00       	callq  1cb1 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    1cb1:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    1cb7:	89 c2                	mov    %eax,%edx
    1cb9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cbd:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    1cc4:	48 89 ce             	mov    %rcx,%rsi
    1cc7:	48 89 c7             	mov    %rax,%rdi
    1cca:	e8 00 00 00 00       	callq  1ccf <_ZN6Parser11splitBlocksE7QString+0x51b>
    1ccf:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1cd3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1cda:	48 89 d6             	mov    %rdx,%rsi
    1cdd:	48 89 c7             	mov    %rax,%rdi
    1ce0:	e8 00 00 00 00       	callq  1ce5 <_ZN6Parser11splitBlocksE7QString+0x531>
    1ce5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1ce9:	48 89 c7             	mov    %rax,%rdi
    1cec:	e8 00 00 00 00       	callq  1cf1 <_ZN6Parser11splitBlocksE7QString+0x53d>

    1cf1:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    1cf7:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)
        str = str.right(str.length()-j);
        lineBase += j;
    1cfd:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    1d04:	48 8d 50 70          	lea    0x70(%rax),%rdx
    1d08:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1d0c:	48 89 c6             	mov    %rax,%rsi
    1d0f:	48 89 d7             	mov    %rdx,%rdi
    1d12:	e8 00 00 00 00       	callq  1d17 <_ZN6Parser11splitBlocksE7QString+0x563>
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    1d17:	e9 52 fd ff ff       	jmpq   1a6e <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    1d1c:	90                   	nop
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    1d1d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1d21:	48 89 c7             	mov    %rax,%rdi
    1d24:	e8 00 00 00 00       	callq  1d29 <_ZN6Parser11splitBlocksE7QString+0x575>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    1d29:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d2d:	48 89 c7             	mov    %rax,%rdi
    1d30:	e8 00 00 00 00       	callq  1d35 <_ZN6Parser11splitBlocksE7QString+0x581>

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    1d35:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1d3c:	48 89 c7             	mov    %rax,%rdi
    1d3f:	e8 00 00 00 00       	callq  1d44 <_ZN6Parser11splitBlocksE7QString+0x590>
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }
    1d44:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1d4b:	48 89 c7             	mov    %rax,%rdi
    1d4e:	e8 00 00 00 00       	callq  1d53 <_ZN6Parser11splitBlocksE7QString+0x59f>
void Parser::pe(QString str){

};

void Parser::splitBlocks(QString code)
{
    1d53:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1d5a:	48 89 c7             	mov    %rax,%rdi
    1d5d:	e8 00 00 00 00       	callq  1d62 <_ZN6Parser11splitBlocksE7QString+0x5ae>

void Parser::pe(QString str){

};

void Parser::splitBlocks(QString code)
    1d62:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1d69:	48 89 c7             	mov    %rax,%rdi
    1d6c:	e8 00 00 00 00       	callq  1d71 <_ZN6Parser11splitBlocksE7QString+0x5bd>
        block = str.mid(i,j-i);

        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
    1d71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1d75:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1d7c:	00 00 
    1d7e:	0f 84 7e 01 00 00    	je     1f02 <_ZN6Parser11splitBlocksE7QString+0x74e>
    1d84:	e9 74 01 00 00       	jmpq   1efd <_ZN6Parser11splitBlocksE7QString+0x749>
    1d89:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    1d8c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1d93:	48 89 c7             	mov    %rax,%rdi
    1d96:	e8 00 00 00 00       	callq  1d9b <_ZN6Parser11splitBlocksE7QString+0x5e7>
    1d9b:	e9 2f 01 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1da0:	48 89 c3             	mov    %rax,%rbx

    1da3:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1daa:	48 89 c7             	mov    %rax,%rdi
    1dad:	e8 00 00 00 00       	callq  1db2 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    1db2:	e9 18 01 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1db7:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFL = str.count("{");
    1dba:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1dc1:	48 89 c7             	mov    %rax,%rdi
    1dc4:	e8 00 00 00 00       	callq  1dc9 <_ZN6Parser11splitBlocksE7QString+0x615>
    1dc9:	e9 01 01 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1dce:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    1dd1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1dd8:	48 89 c7             	mov    %rax,%rdi
    1ddb:	e8 00 00 00 00       	callq  1de0 <_ZN6Parser11splitBlocksE7QString+0x62c>
    1de0:	e9 ea 00 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1de5:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    unsigned int BCR = str.count(")");

    1de8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1def:	48 89 c7             	mov    %rax,%rdi
    1df2:	e8 00 00 00 00       	callq  1df7 <_ZN6Parser11splitBlocksE7QString+0x643>
    1df7:	e9 d3 00 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1dfc:	48 89 c3             	mov    %rax,%rbx
    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
        return;
    }

    1dff:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1e06:	48 89 c7             	mov    %rax,%rdi
    1e09:	e8 00 00 00 00       	callq  1e0e <_ZN6Parser11splitBlocksE7QString+0x65a>
    1e0e:	e9 bc 00 00 00       	jmpq   1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1e13:	48 89 c3             	mov    %rax,%rbx
    1e16:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1e1d:	48 89 c7             	mov    %rax,%rdi
    1e20:	e8 00 00 00 00       	callq  1e25 <_ZN6Parser11splitBlocksE7QString+0x671>
    1e25:	e9 91 00 00 00       	jmpq   1ebb <_ZN6Parser11splitBlocksE7QString+0x707>
    1e2a:	48 89 c3             	mov    %rax,%rbx
    1e2d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1e34:	48 89 c7             	mov    %rax,%rdi
    1e37:	e8 00 00 00 00       	callq  1e3c <_ZN6Parser11splitBlocksE7QString+0x688>
    1e3c:	eb 7d                	jmp    1ebb <_ZN6Parser11splitBlocksE7QString+0x707>
    1e3e:	48 89 c3             	mov    %rax,%rbx
    int     line     = 0;
    QString block;

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    1e41:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1e45:	48 89 c7             	mov    %rax,%rdi
    1e48:	e8 00 00 00 00       	callq  1e4d <_ZN6Parser11splitBlocksE7QString+0x699>
    1e4d:	eb 36                	jmp    1e85 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1e4f:	48 89 c3             	mov    %rax,%rbx

    1e52:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e56:	48 89 c7             	mov    %rax,%rdi
    1e59:	e8 00 00 00 00       	callq  1e5e <_ZN6Parser11splitBlocksE7QString+0x6aa>
    1e5e:	eb 25                	jmp    1e85 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1e60:	48 89 c3             	mov    %rax,%rbx
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    1e63:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e67:	48 89 c7             	mov    %rax,%rdi
    1e6a:	e8 00 00 00 00       	callq  1e6f <_ZN6Parser11splitBlocksE7QString+0x6bb>
    1e6f:	eb 14                	jmp    1e85 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1e71:	48 89 c3             	mov    %rax,%rbx

        block = str.mid(i,j-i);
    1e74:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1e78:	48 89 c7             	mov    %rax,%rdi
    1e7b:	e8 00 00 00 00       	callq  1e80 <_ZN6Parser11splitBlocksE7QString+0x6cc>
    1e80:	eb 03                	jmp    1e85 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1e82:	48 89 c3             	mov    %rax,%rbx
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    1e85:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1e89:	48 89 c7             	mov    %rax,%rdi
    1e8c:	e8 00 00 00 00       	callq  1e91 <_ZN6Parser11splitBlocksE7QString+0x6dd>
    1e91:	eb 03                	jmp    1e96 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    1e93:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    1e96:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e9a:	48 89 c7             	mov    %rax,%rdi
    1e9d:	e8 00 00 00 00       	callq  1ea2 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    1ea2:	eb 03                	jmp    1ea7 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    1ea4:	48 89 c3             	mov    %rax,%rbx

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    1ea7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1eae:	48 89 c7             	mov    %rax,%rdi
    1eb1:	e8 00 00 00 00       	callq  1eb6 <_ZN6Parser11splitBlocksE7QString+0x702>
    1eb6:	eb 03                	jmp    1ebb <_ZN6Parser11splitBlocksE7QString+0x707>
    1eb8:	48 89 c3             	mov    %rax,%rbx
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }
    1ebb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1ec2:	48 89 c7             	mov    %rax,%rdi
    1ec5:	e8 00 00 00 00       	callq  1eca <_ZN6Parser11splitBlocksE7QString+0x716>
    1eca:	eb 03                	jmp    1ecf <_ZN6Parser11splitBlocksE7QString+0x71b>
    1ecc:	48 89 c3             	mov    %rax,%rbx
void Parser::pe(QString str){

};

void Parser::splitBlocks(QString code)
{
    1ecf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1ed6:	48 89 c7             	mov    %rax,%rdi
    1ed9:	e8 00 00 00 00       	callq  1ede <_ZN6Parser11splitBlocksE7QString+0x72a>
    1ede:	eb 03                	jmp    1ee3 <_ZN6Parser11splitBlocksE7QString+0x72f>
    1ee0:	48 89 c3             	mov    %rax,%rbx

void Parser::pe(QString str){

};

void Parser::splitBlocks(QString code)
    1ee3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1eea:	48 89 c7             	mov    %rax,%rdi
    1eed:	e8 00 00 00 00       	callq  1ef2 <_ZN6Parser11splitBlocksE7QString+0x73e>
    1ef2:	48 89 d8             	mov    %rbx,%rax
    1ef5:	48 89 c7             	mov    %rax,%rdi
    1ef8:	e8 00 00 00 00       	callq  1efd <_ZN6Parser11splitBlocksE7QString+0x749>
        block = str.mid(i,j-i);

        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
    1efd:	e8 00 00 00 00       	callq  1f02 <_ZN6Parser11splitBlocksE7QString+0x74e>
    1f02:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    1f09:	5b                   	pop    %rbx
    1f0a:	5d                   	pop    %rbp
    1f0b:	c3                   	retq   

0000000000001f0c <_ZN6Parser10globalSemsEv>:
   }
}
    1f0c:	55                   	push   %rbp
    1f0d:	48 89 e5             	mov    %rsp,%rbp
    1f10:	53                   	push   %rbx
    1f11:	48 83 ec 48          	sub    $0x48,%rsp
    1f15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    1f19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1f20:	00 00 
    1f22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1f26:	31 c0                	xor    %eax,%eax

    1f28:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1f2c:	48 89 c7             	mov    %rax,%rdi
    1f2f:	e8 00 00 00 00       	callq  1f34 <_ZN6Parser10globalSemsEv+0x28>
void Parser::globalSems(){
    1f34:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1f38:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f3f <_ZN6Parser10globalSemsEv+0x33>
    1f3f:	48 89 c7             	mov    %rax,%rdi
    1f42:	e8 00 00 00 00       	callq  1f47 <_ZN6Parser10globalSemsEv+0x3b>
    1f47:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1f4b:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    1f4f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1f53:	48 89 ce             	mov    %rcx,%rsi
    1f56:	48 89 c7             	mov    %rax,%rdi
    1f59:	e8 00 00 00 00       	callq  1f5e <_ZN6Parser10globalSemsEv+0x52>
    1f5e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1f62:	48 89 c7             	mov    %rax,%rdi
    1f65:	e8 00 00 00 00       	callq  1f6a <_ZN6Parser10globalSemsEv+0x5e>
    QMap<QString, int> globalSems;
    1f6a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1f6e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1f72:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    1f76:	48 89 ce             	mov    %rcx,%rsi
    1f79:	48 89 c7             	mov    %rax,%rdi
    1f7c:	e8 00 00 00 00       	callq  1f81 <_ZN6Parser10globalSemsEv+0x75>
    1f81:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1f85:	48 89 c7             	mov    %rax,%rdi
    1f88:	e8 00 00 00 00       	callq  1f8d <_ZN6Parser10globalSemsEv+0x81>
        lineBase += j;

    this->Blocks.append(block);
   }
}

    1f8d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1f91:	48 89 c7             	mov    %rax,%rdi
    1f94:	e8 00 00 00 00       	callq  1f99 <_ZN6Parser10globalSemsEv+0x8d>
void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    1f99:	90                   	nop
    1f9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1f9e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1fa5:	00 00 
    1fa7:	74 32                	je     1fdb <_ZN6Parser10globalSemsEv+0xcf>
    1fa9:	eb 2b                	jmp    1fd6 <_ZN6Parser10globalSemsEv+0xca>
    1fab:	48 89 c3             	mov    %rax,%rbx

    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    1fae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1fb2:	48 89 c7             	mov    %rax,%rdi
    1fb5:	e8 00 00 00 00       	callq  1fba <_ZN6Parser10globalSemsEv+0xae>
    1fba:	eb 03                	jmp    1fbf <_ZN6Parser10globalSemsEv+0xb3>
    1fbc:	48 89 c3             	mov    %rax,%rbx
        lineBase += j;

    this->Blocks.append(block);
   }
}

    1fbf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1fc3:	48 89 c7             	mov    %rax,%rdi
    1fc6:	e8 00 00 00 00       	callq  1fcb <_ZN6Parser10globalSemsEv+0xbf>
    1fcb:	48 89 d8             	mov    %rbx,%rax
    1fce:	48 89 c7             	mov    %rax,%rdi
    1fd1:	e8 00 00 00 00       	callq  1fd6 <_ZN6Parser10globalSemsEv+0xca>
void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    1fd6:	e8 00 00 00 00       	callq  1fdb <_ZN6Parser10globalSemsEv+0xcf>
    1fdb:	48 83 c4 48          	add    $0x48,%rsp
    1fdf:	5b                   	pop    %rbx
    1fe0:	5d                   	pop    %rbp
    1fe1:	c3                   	retq   

0000000000001fe2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:
    displaySems(globalSems);
}

    1fe2:	55                   	push   %rbp
    1fe3:	48 89 e5             	mov    %rsp,%rbp
    1fe6:	53                   	push   %rbx
    1fe7:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    1fee:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    1ff5:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    1ffc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    2002:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    2009:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    2010:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2017:	00 00 
    2019:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    201d:	31 c0                	xor    %eax,%eax
void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
    201f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2026:	48 89 c7             	mov    %rax,%rdi
    2029:	e8 00 00 00 00       	callq  202e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>
{
        QByteArray result;
    202e:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    2034:	0f be d0             	movsbl %al,%edx
    2037:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    203e:	89 d6                	mov    %edx,%esi
    2040:	48 89 c7             	mov    %rax,%rdi
    2043:	e8 00 00 00 00       	callq  2048 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        result += StepN;
    2048:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    204f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2056 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    2056:	48 89 c7             	mov    %rax,%rdi
    2059:	e8 00 00 00 00       	callq  205e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    205e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2065:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 206c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    206c:	48 89 c7             	mov    %rax,%rdi
    206f:	e8 00 00 00 00       	callq  2074 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    2074:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    207b:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    2082:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2089:	b9 01 00 00 00       	mov    $0x1,%ecx
    208e:	48 89 c7             	mov    %rax,%rdi
    2091:	e8 00 00 00 00       	callq  2096 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    2096:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    209d:	48 89 c7             	mov    %rax,%rdi
    20a0:	e8 00 00 00 00       	callq  20a5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    20a5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    20ac:	48 89 c7             	mov    %rax,%rdi
    20af:	e8 00 00 00 00       	callq  20b4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>

    20b4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    20bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    20c2:	48 89 c7             	mov    %rax,%rdi
    20c5:	e8 00 00 00 00       	callq  20ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    20ca:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    20d1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20d8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    20d8:	48 89 c7             	mov    %rax,%rdi
    20db:	e8 00 00 00 00       	callq  20e0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    20e0:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    20e7:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    20ee:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    20f5:	b9 01 00 00 00       	mov    $0x1,%ecx
    20fa:	48 89 c7             	mov    %rax,%rdi
    20fd:	e8 00 00 00 00       	callq  2102 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    2102:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2109:	48 89 c7             	mov    %rax,%rdi
    210c:	e8 00 00 00 00       	callq  2111 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    2111:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2118:	48 89 c7             	mov    %rax,%rdi
    211b:	e8 00 00 00 00       	callq  2120 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("}"," ");
    2120:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2127:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 212e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    212e:	48 89 c7             	mov    %rax,%rdi
    2131:	e8 00 00 00 00       	callq  2136 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    2136:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    213d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2144 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    2144:	48 89 c7             	mov    %rax,%rdi
    2147:	e8 00 00 00 00       	callq  214c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    214c:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    2153:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    215a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2161:	b9 01 00 00 00       	mov    $0x1,%ecx
    2166:	48 89 c7             	mov    %rax,%rdi
    2169:	e8 00 00 00 00       	callq  216e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    216e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2175:	48 89 c7             	mov    %rax,%rdi
    2178:	e8 00 00 00 00       	callq  217d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    217d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2184:	48 89 c7             	mov    %rax,%rdi
    2187:	e8 00 00 00 00       	callq  218c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        text.replace("{"," ");
        text.replace("\'", "");
        //text.replace("\‘", "");
        //text.replace("\’", "");
    218c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2190:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2197 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    2197:	48 89 c7             	mov    %rax,%rdi
    219a:	e8 00 00 00 00       	callq  219f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    219f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    21a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 21aa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    21aa:	48 89 c7             	mov    %rax,%rdi
    21ad:	e8 00 00 00 00       	callq  21b2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    21b2:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    21b6:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    21ba:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    21c1:	b9 00 00 00 00       	mov    $0x0,%ecx
    21c6:	48 89 c7             	mov    %rax,%rdi
    21c9:	e8 00 00 00 00       	callq  21ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    21ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    21d2:	48 89 c7             	mov    %rax,%rdi
    21d5:	e8 00 00 00 00       	callq  21da <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    21da:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21de:	48 89 c7             	mov    %rax,%rdi
    21e1:	e8 00 00 00 00       	callq  21e6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>

        text.replace("Command ", "", Qt::CaseInsensitive);
    21e6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 21f1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    21f1:	48 89 c7             	mov    %rax,%rdi
    21f4:	e8 00 00 00 00       	callq  21f9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    21f9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21fd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2204 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    2204:	48 89 c7             	mov    %rax,%rdi
    2207:	e8 00 00 00 00       	callq  220c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    220c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2210:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    2214:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    221b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2220:	48 89 c7             	mov    %rax,%rdi
    2223:	e8 00 00 00 00       	callq  2228 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    2228:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    222c:	48 89 c7             	mov    %rax,%rdi
    222f:	e8 00 00 00 00       	callq  2234 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    2234:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2238:	48 89 c7             	mov    %rax,%rdi
    223b:	e8 00 00 00 00       	callq  2240 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    2240:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2244:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 224b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    224b:	48 89 c7             	mov    %rax,%rdi
    224e:	e8 00 00 00 00       	callq  2253 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    2253:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2257:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    225b:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    2262:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    2268:	b9 00 00 00 00       	mov    $0x0,%ecx
    226d:	48 89 c7             	mov    %rax,%rdi
    2270:	e8 00 00 00 00       	callq  2275 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    2275:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2279:	48 89 c7             	mov    %rax,%rdi
    227c:	e8 00 00 00 00       	callq  2281 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        QStringList lines = text.split("\n");
    2281:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    2288:	00 00 00 
    228b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    228f:	48 89 c7             	mov    %rax,%rdi
    2292:	e8 00 00 00 00       	callq  2297 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    2297:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    229d:	0f 9f c0             	setg   %al
    22a0:	84 c0                	test   %al,%al
    22a2:	74 6e                	je     2312 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>

        for (int i = 0; i < lines.length(); i++)
    22a4:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    22aa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    22ae:	89 d6                	mov    %edx,%esi
    22b0:	48 89 c7             	mov    %rax,%rdi
    22b3:	e8 00 00 00 00       	callq  22b8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    22b8:	48 89 c7             	mov    %rax,%rdi
    22bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22bf:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    22c5:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    22cc:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    22d3:	41 89 c8             	mov    %ecx,%r8d
    22d6:	48 89 d1             	mov    %rdx,%rcx
    22d9:	48 89 fa             	mov    %rdi,%rdx
    22dc:	48 89 c7             	mov    %rax,%rdi
    22df:	e8 00 00 00 00       	callq  22e4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    22e4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22e8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    22ef:	48 89 d6             	mov    %rdx,%rsi
    22f2:	48 89 c7             	mov    %rax,%rdi
    22f5:	e8 00 00 00 00       	callq  22fa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    22fa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22fe:	48 89 c7             	mov    %rax,%rdi
    2301:	e8 00 00 00 00       	callq  2306 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    2306:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    230d:	e9 79 ff ff ff       	jmpq   228b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
        }
    2312:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2319:	48 89 c7             	mov    %rax,%rdi
    231c:	e8 00 00 00 00       	callq  2321 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    2321:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)

    2327:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    232e:	00 00 00 
    2331:	b8 1f 00 00 00       	mov    $0x1f,%eax
    2336:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    233c:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    2342:	7e 1d                	jle    2361 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
        int t = result.length();
    2344:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    234b:	be 00 00 00 00       	mov    $0x0,%esi
    2350:	48 89 c7             	mov    %rax,%rdi
    2353:	e8 00 00 00 00       	callq  2358 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
        }

    2358:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    235f:	eb d0                	jmp    2331 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
            result.append((char)0);
        }
    2361:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    2367:	0f be d0             	movsbl %al,%edx
    236a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2371:	89 d6                	mov    %edx,%esi
    2373:	48 89 c7             	mov    %rax,%rdi
    2376:	e8 00 00 00 00       	callq  237b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        result.append(line);
    237b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    2382:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
    2389:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2390:	48 89 c6             	mov    %rax,%rsi
    2393:	48 89 d7             	mov    %rdx,%rdi
    2396:	e8 00 00 00 00       	callq  239b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    239b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    239f:	48 89 c7             	mov    %rax,%rdi
    23a2:	e8 00 00 00 00       	callq  23a7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
    23a7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    23ae:	48 89 c7             	mov    %rax,%rdi
    23b1:	e8 00 00 00 00       	callq  23b6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>
            result.append((char)0);
        }

        result.append(line);

        globalResult += result;
    23b6:	90                   	nop
    23b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23bb:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    23c2:	00 00 
    23c4:	0f 84 30 01 00 00    	je     24fa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    23ca:	e9 26 01 00 00       	jmpq   24f5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    23cf:	48 89 c3             	mov    %rax,%rbx

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;

        result += StepN;
    23d2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    23d9:	48 89 c7             	mov    %rax,%rdi
    23dc:	e8 00 00 00 00       	callq  23e1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    23e1:	eb 03                	jmp    23e6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    23e3:	48 89 c3             	mov    %rax,%rbx
    23e6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    23ed:	48 89 c7             	mov    %rax,%rdi
    23f0:	e8 00 00 00 00       	callq  23f5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    23f5:	e9 e1 00 00 00       	jmpq   24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    23fa:	48 89 c3             	mov    %rax,%rbx

    23fd:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2404:	48 89 c7             	mov    %rax,%rdi
    2407:	e8 00 00 00 00       	callq  240c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    240c:	eb 03                	jmp    2411 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    240e:	48 89 c3             	mov    %rax,%rbx
    2411:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2418:	48 89 c7             	mov    %rax,%rdi
    241b:	e8 00 00 00 00       	callq  2420 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    2420:	e9 b6 00 00 00       	jmpq   24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2425:	48 89 c3             	mov    %rax,%rbx
        text.replace("}"," ");
    2428:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    242f:	48 89 c7             	mov    %rax,%rdi
    2432:	e8 00 00 00 00       	callq  2437 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    2437:	eb 03                	jmp    243c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    2439:	48 89 c3             	mov    %rax,%rbx
    243c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2443:	48 89 c7             	mov    %rax,%rdi
    2446:	e8 00 00 00 00       	callq  244b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    244b:	e9 8b 00 00 00       	jmpq   24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2450:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
        text.replace("\'", "");
        //text.replace("\‘", "");
        //text.replace("\’", "");
    2453:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2457:	48 89 c7             	mov    %rax,%rdi
    245a:	e8 00 00 00 00       	callq  245f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    245f:	eb 03                	jmp    2464 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    2461:	48 89 c3             	mov    %rax,%rbx
    2464:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2468:	48 89 c7             	mov    %rax,%rdi
    246b:	e8 00 00 00 00       	callq  2470 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    2470:	eb 69                	jmp    24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2472:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
    2475:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2479:	48 89 c7             	mov    %rax,%rdi
    247c:	e8 00 00 00 00       	callq  2481 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    2481:	eb 03                	jmp    2486 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    2483:	48 89 c3             	mov    %rax,%rbx
    2486:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    248a:	48 89 c7             	mov    %rax,%rdi
    248d:	e8 00 00 00 00       	callq  2492 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    2492:	eb 47                	jmp    24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2494:	48 89 c3             	mov    %rax,%rbx
    2497:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    249b:	48 89 c7             	mov    %rax,%rdi
    249e:	e8 00 00 00 00       	callq  24a3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    24a3:	eb 36                	jmp    24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    24a5:	48 89 c3             	mov    %rax,%rbx
    24a8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24ac:	48 89 c7             	mov    %rax,%rdi
    24af:	e8 00 00 00 00       	callq  24b4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    24b4:	eb 25                	jmp    24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    24b6:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    24b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    24bd:	48 89 c7             	mov    %rax,%rdi
    24c0:	e8 00 00 00 00       	callq  24c5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    24c5:	eb 03                	jmp    24ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    24c7:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    24ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24ce:	48 89 c7             	mov    %rax,%rdi
    24d1:	e8 00 00 00 00       	callq  24d6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    24d6:	eb 03                	jmp    24db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    24d8:	48 89 c3             	mov    %rax,%rbx
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
    24db:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    24e2:	48 89 c7             	mov    %rax,%rdi
    24e5:	e8 00 00 00 00       	callq  24ea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    24ea:	48 89 d8             	mov    %rbx,%rax
    24ed:	48 89 c7             	mov    %rax,%rdi
    24f0:	e8 00 00 00 00       	callq  24f5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
            result.append((char)0);
        }

        result.append(line);

        globalResult += result;
    24f5:	e8 00 00 00 00       	callq  24fa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    24fa:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    2501:	5b                   	pop    %rbx
    2502:	5d                   	pop    %rbp
    2503:	c3                   	retq   

0000000000002504 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:
        //rr(result.toHex());
}

    2504:	55                   	push   %rbp
    2505:	48 89 e5             	mov    %rsp,%rbp
    2508:	53                   	push   %rbx
    2509:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    2510:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    2517:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    251e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    2525:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    252c:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    2533:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    253a:	00 00 
    253c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2540:	31 c0                	xor    %eax,%eax
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);
    2542:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2546:	be 20 00 00 00       	mov    $0x20,%esi
    254b:	48 89 c7             	mov    %rax,%rdi
    254e:	e8 00 00 00 00       	callq  2553 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    2553:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2557:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    255e:	b9 01 00 00 00       	mov    $0x1,%ecx
    2563:	ba 00 00 00 00       	mov    $0x0,%edx
    2568:	48 89 c7             	mov    %rax,%rdi
    256b:	e8 00 00 00 00       	callq  2570 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    2570:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    2576:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    257d:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    2583:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    258a:	89 d1                	mov    %edx,%ecx
    258c:	ba 00 00 00 00       	mov    $0x0,%edx
    2591:	48 89 c7             	mov    %rax,%rdi
    2594:	e8 00 00 00 00       	callq  2599 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int i = text.indexOf(' ');
    2599:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    25a0:	00 00 00 
    QString type = text.mid(0, i);
    int lastPosition = 0;
    25a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    25a7:	be 28 00 00 00       	mov    $0x28,%esi
    25ac:	48 89 c7             	mov    %rax,%rdi
    25af:	e8 00 00 00 00       	callq  25b4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    25b4:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    25ba:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    25be:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    25c5:	b9 01 00 00 00       	mov    $0x1,%ecx
    25ca:	48 89 c7             	mov    %rax,%rdi
    25cd:	e8 00 00 00 00       	callq  25d2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    25d2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    25d8:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    25de:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    25e4:	89 c1                	mov    %eax,%ecx
    25e6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    25ea:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    25f0:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    25f7:	48 89 c7             	mov    %rax,%rdi
    25fa:	e8 00 00 00 00       	callq  25ff <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    25ff:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2603:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2607:	48 89 d6             	mov    %rdx,%rsi
    260a:	48 89 c7             	mov    %rax,%rdi
    260d:	e8 00 00 00 00       	callq  2612 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    2612:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2616:	48 89 c7             	mov    %rax,%rdi
    2619:	e8 00 00 00 00       	callq  261e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    i = text.indexOf('(', lastPosition);
    261e:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2624:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    262a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    262e:	be 29 00 00 00       	mov    $0x29,%esi
    2633:	48 89 c7             	mov    %rax,%rdi
    2636:	e8 00 00 00 00       	callq  263b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    263b:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2641:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2645:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    264c:	b9 01 00 00 00       	mov    $0x1,%ecx
    2651:	48 89 c7             	mov    %rax,%rdi
    2654:	e8 00 00 00 00       	callq  2659 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    2659:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    265f:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2665:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    266b:	8d 48 ff             	lea    -0x1(%rax),%ecx
    266e:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    2674:	8d 50 01             	lea    0x1(%rax),%edx
    2677:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    267b:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    2682:	48 89 c7             	mov    %rax,%rdi
    2685:	e8 00 00 00 00       	callq  268a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    268a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    268e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2695 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    2695:	48 89 c7             	mov    %rax,%rdi
    2698:	e8 00 00 00 00       	callq  269d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    269d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    26a1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    26a5:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    26a9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    26af:	b9 01 00 00 00       	mov    $0x1,%ecx
    26b4:	48 89 c7             	mov    %rax,%rdi
    26b7:	e8 00 00 00 00       	callq  26bc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    26bc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    26c0:	48 89 c7             	mov    %rax,%rdi
    26c3:	e8 00 00 00 00       	callq  26c8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    26c8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    26cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    26d0:	48 89 d6             	mov    %rdx,%rsi
    26d3:	48 89 c7             	mov    %rax,%rdi
    26d6:	e8 00 00 00 00       	callq  26db <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    26db:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    26df:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    26e3:	48 89 d6             	mov    %rdx,%rsi
    26e6:	48 89 c7             	mov    %rax,%rdi
    26e9:	e8 00 00 00 00       	callq  26ee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    26ee:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    26f5:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    26fc:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    2703:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    2707:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    270b:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    2712:	45 89 c1             	mov    %r8d,%r9d
    2715:	49 89 f8             	mov    %rdi,%r8
    2718:	48 89 c7             	mov    %rax,%rdi
    271b:	e8 00 00 00 00       	callq  2720 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    2720:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2724:	48 89 c7             	mov    %rax,%rdi
    2727:	e8 00 00 00 00       	callq  272c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    272c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2730:	48 89 c7             	mov    %rax,%rdi
    2733:	e8 00 00 00 00       	callq  2738 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    QByteArray result = processScript(value, numbers, sems, line);
    2738:	90                   	nop
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    2739:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    273d:	48 89 c7             	mov    %rax,%rdi
    2740:	e8 00 00 00 00       	callq  2745 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    2745:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2749:	48 89 c7             	mov    %rax,%rdi
    274c:	e8 00 00 00 00       	callq  2751 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    2751:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2755:	48 89 c7             	mov    %rax,%rdi
    2758:	e8 00 00 00 00       	callq  275d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
}

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    275d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2764:	48 89 c7             	mov    %rax,%rdi
    2767:	e8 00 00 00 00       	callq  276c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);
    276c:	90                   	nop

    276d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    2774:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2778:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    277f:	00 00 
    2781:	0f 84 ee 00 00 00    	je     2875 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    2787:	e9 e4 00 00 00       	jmpq   2870 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    278c:	48 89 c3             	mov    %rax,%rbx
    278f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2793:	48 89 c7             	mov    %rax,%rdi
    2796:	e8 00 00 00 00       	callq  279b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    279b:	e9 b6 00 00 00       	jmpq   2856 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    27a0:	48 89 c3             	mov    %rax,%rbx
    27a3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27a7:	48 89 c7             	mov    %rax,%rdi
    27aa:	e8 00 00 00 00       	callq  27af <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    27af:	e9 a2 00 00 00       	jmpq   2856 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    27b4:	48 89 c3             	mov    %rax,%rbx
    27b7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    27bb:	48 89 c7             	mov    %rax,%rdi
    27be:	e8 00 00 00 00       	callq  27c3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    27c3:	eb 6f                	jmp    2834 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    27c5:	48 89 c3             	mov    %rax,%rbx
    27c8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    27cc:	48 89 c7             	mov    %rax,%rdi
    27cf:	e8 00 00 00 00       	callq  27d4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    27d4:	eb 5e                	jmp    2834 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    27d6:	48 89 c3             	mov    %rax,%rbx
    27d9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    27dd:	48 89 c7             	mov    %rax,%rdi
    27e0:	e8 00 00 00 00       	callq  27e5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    27e5:	eb 17                	jmp    27fe <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    27e7:	48 89 c3             	mov    %rax,%rbx
    27ea:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    27f1:	48 89 c7             	mov    %rax,%rdi
    27f4:	e8 00 00 00 00       	callq  27f9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    27f9:	eb 03                	jmp    27fe <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    27fb:	48 89 c3             	mov    %rax,%rbx
    27fe:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2802:	48 89 c7             	mov    %rax,%rdi
    2805:	e8 00 00 00 00       	callq  280a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    280a:	eb 17                	jmp    2823 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    280c:	48 89 c3             	mov    %rax,%rbx
    280f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    2816:	48 89 c7             	mov    %rax,%rdi
    2819:	e8 00 00 00 00       	callq  281e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    281e:	eb 03                	jmp    2823 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    2820:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    2823:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2827:	48 89 c7             	mov    %rax,%rdi
    282a:	e8 00 00 00 00       	callq  282f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    282f:	eb 03                	jmp    2834 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    2831:	48 89 c3             	mov    %rax,%rbx

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    2834:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2838:	48 89 c7             	mov    %rax,%rdi
    283b:	e8 00 00 00 00       	callq  2840 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    2840:	eb 03                	jmp    2845 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    2842:	48 89 c3             	mov    %rax,%rbx
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    2845:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2849:	48 89 c7             	mov    %rax,%rdi
    284c:	e8 00 00 00 00       	callq  2851 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    2851:	eb 03                	jmp    2856 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    2853:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    2856:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    285d:	48 89 c7             	mov    %rax,%rdi
    2860:	e8 00 00 00 00       	callq  2865 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    2865:	48 89 d8             	mov    %rbx,%rax
    2868:	48 89 c7             	mov    %rax,%rdi
    286b:	e8 00 00 00 00       	callq  2870 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    2870:	e8 00 00 00 00       	callq  2875 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    2875:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    287c:	5b                   	pop    %rbx
    287d:	5d                   	pop    %rbp
    287e:	c3                   	retq   
    287f:	90                   	nop

0000000000002880 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:
    return result;
}

    2880:	55                   	push   %rbp
    2881:	48 89 e5             	mov    %rsp,%rbp
    2884:	53                   	push   %rbx
    2885:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    288c:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    2893:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    289a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    28a1:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    28a8:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    28af:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    28b6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    28bd:	00 00 
    28bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    28c3:	31 c0                	xor    %eax,%eax
    //  Самое главное - одному вызову processScript соответствует один вызов parseLine
    //  смысл функции - конкретную строку превратить в байт-код.
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.
    28c5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    28cc:	48 89 c7             	mov    %rax,%rdi
    28cf:	e8 00 00 00 00       	callq  28d4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>

    28d4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    28db:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    28e1:	ba 0a 00 00 00       	mov    $0xa,%edx
    28e6:	89 ce                	mov    %ecx,%esi
    28e8:	48 89 c7             	mov    %rax,%rdi
    28eb:	e8 00 00 00 00       	callq  28f0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>
    QByteArray result;
    QString SLine = QString::number(line);
    28f0:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    28f7:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    28fe:	48 89 d6             	mov    %rdx,%rsi
    2901:	48 89 c7             	mov    %rax,%rdi
    2904:	e8 00 00 00 00       	callq  2909 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    2909:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    2910:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2917:	48 89 d6             	mov    %rdx,%rsi
    291a:	48 89 c7             	mov    %rax,%rdi
    291d:	e8 00 00 00 00       	callq  2922 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    2922:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2929:	48 89 c7             	mov    %rax,%rdi
    292c:	e8 00 00 00 00       	callq  2931 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>

    value = value.toLower();
    2931:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2938:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    293f:	48 89 d6             	mov    %rdx,%rsi
    2942:	48 89 c7             	mov    %rax,%rdi
    2945:	e8 00 00 00 00       	callq  294a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    294a:	83 f0 01             	xor    $0x1,%eax
    294d:	84 c0                	test   %al,%al
    294f:	0f 84 b5 00 00 00    	je     2a0a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    2955:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    295c:	48 89 c7             	mov    %rax,%rdi
    295f:	e8 00 00 00 00       	callq  2964 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    2964:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    {
        int VL = value.length();
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);

    296a:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    2971:	0f 8e c0 00 00 00    	jle    2a37 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>

        if(VL > 0) // если ключевое слово длинее нуля символов
    2977:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    297e:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2985:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 298c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    298c:	48 89 c7             	mov    %rax,%rdi
    298f:	e8 00 00 00 00       	callq  2994 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    2994:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2998:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    299f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 29a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    29a6:	48 89 ce             	mov    %rcx,%rsi
    29a9:	48 89 c7             	mov    %rax,%rdi
    29ac:	e8 00 00 00 00       	callq  29b1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    29b1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    29b5:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    29bc:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    29c0:	48 89 ce             	mov    %rcx,%rsi
    29c3:	48 89 c7             	mov    %rax,%rdi
    29c6:	e8 00 00 00 00       	callq  29cb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    29cb:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    29cf:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    29d6:	48 89 d6             	mov    %rdx,%rsi
    29d9:	48 89 c7             	mov    %rax,%rdi
    29dc:	e8 00 00 00 00       	callq  29e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    29e1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    29e5:	48 89 c7             	mov    %rax,%rdi
    29e8:	e8 00 00 00 00       	callq  29ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    29ed:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    29f1:	48 89 c7             	mov    %rax,%rdi
    29f4:	e8 00 00 00 00       	callq  29f9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    29f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2a00:	48 89 c7             	mov    %rax,%rdi
    2a03:	e8 00 00 00 00       	callq  2a08 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    2a08:	eb 2d                	jmp    2a37 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
        }
    }
    else
    2a0a:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2a11:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2a18:	48 89 d6             	mov    %rdx,%rsi
    2a1b:	48 89 c7             	mov    %rax,%rdi
    2a1e:	e8 00 00 00 00       	callq  2a23 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    2a23:	0f be d0             	movsbl %al,%edx
    2a26:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2a2d:	89 d6                	mov    %edx,%esi
    2a2f:	48 89 c7             	mov    %rax,%rdi
    2a32:	e8 00 00 00 00       	callq  2a37 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    {
        result.append(sems[value]);
    }

    2a37:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    2a3e:	00 00 00 
    2a41:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    2a48:	48 89 c7             	mov    %rax,%rdi
    2a4b:	e8 00 00 00 00       	callq  2a50 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    2a50:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    2a56:	0f 9f c0             	setg   %al
    2a59:	84 c0                	test   %al,%al
    2a5b:	0f 84 e2 02 00 00    	je     2d43 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
    //обработка символа *
    2a61:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    2a68:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    2a6e:	89 d6                	mov    %edx,%esi
    2a70:	48 89 c7             	mov    %rax,%rdi
    2a73:	e8 00 00 00 00       	callq  2a78 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    2a78:	48 89 c2             	mov    %rax,%rdx
    2a7b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2a82:	48 89 d6             	mov    %rdx,%rsi
    2a85:	48 89 c7             	mov    %rax,%rdi
    2a88:	e8 00 00 00 00       	callq  2a8d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
      for (int i = 0; i < numbers.size(); i++) {
    2a8d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2a94:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a9b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    2a9b:	48 89 c7             	mov    %rax,%rdi
    2a9e:	e8 00 00 00 00       	callq  2aa3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    2aa3:	84 c0                	test   %al,%al
    2aa5:	74 19                	je     2ac0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
        QString number = numbers[i].trimmed();
    2aa7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2aae:	be 19 00 00 00       	mov    $0x19,%esi
    2ab3:	48 89 c7             	mov    %rax,%rdi
    2ab6:	e8 00 00 00 00       	callq  2abb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    2abb:	e9 68 02 00 00       	jmpq   2d28 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            if (number == "*")
                result += (char)0x19;
    2ac0:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
            else {
    2ac7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2acb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ad2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    2ad2:	48 89 c7             	mov    %rax,%rdi
    2ad5:	e8 00 00 00 00       	callq  2ada <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    2ada:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    2ade:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ae5:	b9 01 00 00 00       	mov    $0x1,%ecx
    2aea:	ba 00 00 00 00       	mov    $0x0,%edx
    2aef:	48 89 c7             	mov    %rax,%rdi
    2af2:	e8 00 00 00 00       	callq  2af7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    2af7:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    2afd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2b01:	48 89 c7             	mov    %rax,%rdi
    2b04:	e8 00 00 00 00       	callq  2b09 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                bool ok = false;
    2b09:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b0d:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    2b13:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    2b1a:	48 89 ce             	mov    %rcx,%rsi
    2b1d:	48 89 c7             	mov    %rax,%rdi
    2b20:	e8 00 00 00 00       	callq  2b25 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    2b25:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2b29:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2b2d:	48 89 d6             	mov    %rdx,%rsi
    2b30:	48 89 c7             	mov    %rax,%rdi
    2b33:	e8 00 00 00 00       	callq  2b38 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    2b38:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b3c:	48 89 c7             	mov    %rax,%rdi
    2b3f:	e8 00 00 00 00       	callq  2b44 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                int e = number.indexOf("=");
    2b44:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2b4b:	48 89 c7             	mov    %rax,%rdi
    2b4e:	e8 00 00 00 00       	callq  2b53 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    2b53:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    2b59:	8d 50 ff             	lea    -0x1(%rax),%edx
    2b5c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2b60:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    2b67:	48 89 ce             	mov    %rcx,%rsi
    2b6a:	48 89 c7             	mov    %rax,%rdi
    2b6d:	e8 00 00 00 00       	callq  2b72 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    2b72:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2b76:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2b7a:	48 89 d6             	mov    %rdx,%rsi
    2b7d:	48 89 c7             	mov    %rax,%rdi
    2b80:	e8 00 00 00 00       	callq  2b85 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    2b85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2b89:	48 89 c7             	mov    %rax,%rdi
    2b8c:	e8 00 00 00 00       	callq  2b91 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    2b91:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2b95:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2b9c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    2b9c:	48 89 c7             	mov    %rax,%rdi
    2b9f:	e8 00 00 00 00       	callq  2ba4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>

    2ba4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2ba8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2baf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    2baf:	48 89 c7             	mov    %rax,%rdi
    2bb2:	e8 00 00 00 00       	callq  2bb7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>
                QString leftPartSem = "";
                QString rightPartSem= "";
    2bb7:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2bbb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2bc2:	48 89 d6             	mov    %rdx,%rsi
    2bc5:	48 89 c7             	mov    %rax,%rdi
    2bc8:	e8 00 00 00 00       	callq  2bcd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    2bcd:	83 f0 01             	xor    $0x1,%eax
    2bd0:	84 c0                	test   %al,%al
    2bd2:	74 38                	je     2c0c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                if (!sems.contains(leftPart)){
    2bd4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2bd8:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2bdc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2be3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    2be3:	48 89 c7             	mov    %rax,%rdi
    2be6:	e8 00 00 00 00       	callq  2beb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    2beb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2bef:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2bf3:	48 89 d6             	mov    %rdx,%rsi
    2bf6:	48 89 c7             	mov    %rax,%rdi
    2bf9:	e8 00 00 00 00       	callq  2bfe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    2bfe:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2c02:	48 89 c7             	mov    %rax,%rdi
    2c05:	e8 00 00 00 00       	callq  2c0a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    2c0a:	eb 74                	jmp    2c80 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
                }
    2c0c:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2c10:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2c17:	48 89 d6             	mov    %rdx,%rsi
    2c1a:	48 89 c7             	mov    %rax,%rdi
    2c1d:	e8 00 00 00 00       	callq  2c22 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    2c22:	0f be d0             	movsbl %al,%edx
    2c25:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2c2c:	89 d6                	mov    %edx,%esi
    2c2e:	48 89 c7             	mov    %rax,%rdi
    2c31:	e8 00 00 00 00       	callq  2c36 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                else{
    2c36:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2c3a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2c41:	48 89 d6             	mov    %rdx,%rsi
    2c44:	48 89 c7             	mov    %rax,%rdi
    2c47:	e8 00 00 00 00       	callq  2c4c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    2c4c:	89 c1                	mov    %eax,%ecx
    2c4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2c52:	ba 0a 00 00 00       	mov    $0xa,%edx
    2c57:	89 ce                	mov    %ecx,%esi
    2c59:	48 89 c7             	mov    %rax,%rdi
    2c5c:	e8 00 00 00 00       	callq  2c61 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    2c61:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2c65:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2c69:	48 89 d6             	mov    %rdx,%rsi
    2c6c:	48 89 c7             	mov    %rax,%rdi
    2c6f:	e8 00 00 00 00       	callq  2c74 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    2c74:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2c78:	48 89 c7             	mov    %rax,%rdi
    2c7b:	e8 00 00 00 00       	callq  2c80 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
                }
    2c80:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2c84:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2c8b:	48 89 d6             	mov    %rdx,%rsi
    2c8e:	48 89 c7             	mov    %rax,%rdi
    2c91:	e8 00 00 00 00       	callq  2c96 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    2c96:	83 f0 01             	xor    $0x1,%eax
    2c99:	84 c0                	test   %al,%al
    2c9b:	74 31                	je     2cce <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>

                if (!sems.contains(rightPart)){
    2c9d:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    2ca4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2ca8:	ba 0a 00 00 00       	mov    $0xa,%edx
    2cad:	48 89 ce             	mov    %rcx,%rsi
    2cb0:	48 89 c7             	mov    %rax,%rdi
    2cb3:	e8 00 00 00 00       	callq  2cb8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    2cb8:	0f be d0             	movsbl %al,%edx
    2cbb:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2cc2:	89 d6                	mov    %edx,%esi
    2cc4:	48 89 c7             	mov    %rax,%rdi
    2cc7:	e8 00 00 00 00       	callq  2ccc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    2ccc:	eb 2a                	jmp    2cf8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
    2cce:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2cd2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2cd9:	48 89 d6             	mov    %rdx,%rsi
    2cdc:	48 89 c7             	mov    %rax,%rdi
    2cdf:	e8 00 00 00 00       	callq  2ce4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    2ce4:	0f be d0             	movsbl %al,%edx
    2ce7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2cee:	89 d6                	mov    %edx,%esi
    2cf0:	48 89 c7             	mov    %rax,%rdi
    2cf3:	e8 00 00 00 00       	callq  2cf8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

    2cf8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2cfc:	48 89 c7             	mov    %rax,%rdi
    2cff:	e8 00 00 00 00       	callq  2d04 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    2d04:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2d08:	48 89 c7             	mov    %rax,%rdi
    2d0b:	e8 00 00 00 00       	callq  2d10 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    2d10:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2d14:	48 89 c7             	mov    %rax,%rdi
    2d17:	e8 00 00 00 00       	callq  2d1c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
    2d1c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2d20:	48 89 c7             	mov    %rax,%rdi
    2d23:	e8 00 00 00 00       	callq  2d28 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
    else
    {
        result.append(sems[value]);
    }

    //обработка символа *
    2d28:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2d2f:	48 89 c7             	mov    %rax,%rdi
    2d32:	e8 00 00 00 00       	callq  2d37 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    }
    else
    {
        result.append(sems[value]);
    }

    2d37:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    2d3e:	e9 fe fc ff ff       	jmpq   2a41 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                else{
                    result.append(sems[rightPart]);
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }
    2d43:	90                   	nop
    //  смысл функции - конкретную строку превратить в байт-код.
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    2d44:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2d4b:	48 89 c7             	mov    %rax,%rdi
    2d4e:	e8 00 00 00 00       	callq  2d53 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                else{
                    result.append(sems[rightPart]);
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }
    2d53:	e9 59 01 00 00       	jmpq   2eb1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    2d58:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    2d5b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2d62:	48 89 c7             	mov    %rax,%rdi
    2d65:	e8 00 00 00 00       	callq  2d6a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    2d6a:	e9 14 01 00 00       	jmpq   2e83 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2d6f:	48 89 c3             	mov    %rax,%rbx
    {
        int VL = value.length();
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    2d72:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2d76:	48 89 c7             	mov    %rax,%rdi
    2d79:	e8 00 00 00 00       	callq  2d7e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    2d7e:	eb 03                	jmp    2d83 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    2d80:	48 89 c3             	mov    %rax,%rbx
    2d83:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2d87:	48 89 c7             	mov    %rax,%rdi
    2d8a:	e8 00 00 00 00       	callq  2d8f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    2d8f:	eb 03                	jmp    2d94 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    2d91:	48 89 c3             	mov    %rax,%rbx
    2d94:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2d9b:	48 89 c7             	mov    %rax,%rdi
    2d9e:	e8 00 00 00 00       	callq  2da3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    2da3:	e9 db 00 00 00       	jmpq   2e83 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2da8:	48 89 c3             	mov    %rax,%rbx
    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
    2dab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2daf:	48 89 c7             	mov    %rax,%rdi
    2db2:	e8 00 00 00 00       	callq  2db7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    2db7:	e9 b3 00 00 00       	jmpq   2e6f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2dbc:	48 89 c3             	mov    %rax,%rbx
    2dbf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2dc3:	48 89 c7             	mov    %rax,%rdi
    2dc6:	e8 00 00 00 00       	callq  2dcb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    2dcb:	e9 9f 00 00 00       	jmpq   2e6f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2dd0:	48 89 c3             	mov    %rax,%rbx
    2dd3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2dd7:	48 89 c7             	mov    %rax,%rdi
    2dda:	e8 00 00 00 00       	callq  2ddf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    2ddf:	e9 8b 00 00 00       	jmpq   2e6f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2de4:	48 89 c3             	mov    %rax,%rbx
    2de7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2deb:	48 89 c7             	mov    %rax,%rdi
    2dee:	e8 00 00 00 00       	callq  2df3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    2df3:	eb 69                	jmp    2e5e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2df5:	48 89 c3             	mov    %rax,%rbx
    2df8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2dfc:	48 89 c7             	mov    %rax,%rdi
    2dff:	e8 00 00 00 00       	callq  2e04 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    2e04:	eb 58                	jmp    2e5e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2e06:	48 89 c3             	mov    %rax,%rbx
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){
    2e09:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2e0d:	48 89 c7             	mov    %rax,%rdi
    2e10:	e8 00 00 00 00       	callq  2e15 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    2e15:	eb 14                	jmp    2e2b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    2e17:	48 89 c3             	mov    %rax,%rbx

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
                }
                else{
    2e1a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2e1e:	48 89 c7             	mov    %rax,%rdi
    2e21:	e8 00 00 00 00       	callq  2e26 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    2e26:	eb 03                	jmp    2e2b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    2e28:	48 89 c3             	mov    %rax,%rbx
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

    2e2b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2e2f:	48 89 c7             	mov    %rax,%rdi
    2e32:	e8 00 00 00 00       	callq  2e37 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    2e37:	eb 03                	jmp    2e3c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    2e39:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    2e3c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2e40:	48 89 c7             	mov    %rax,%rdi
    2e43:	e8 00 00 00 00       	callq  2e48 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    2e48:	eb 03                	jmp    2e4d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    2e4a:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    2e4d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2e51:	48 89 c7             	mov    %rax,%rdi
    2e54:	e8 00 00 00 00       	callq  2e59 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    2e59:	eb 03                	jmp    2e5e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2e5b:	48 89 c3             	mov    %rax,%rbx
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
    2e5e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2e62:	48 89 c7             	mov    %rax,%rdi
    2e65:	e8 00 00 00 00       	callq  2e6a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    2e6a:	eb 03                	jmp    2e6f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2e6c:	48 89 c3             	mov    %rax,%rbx
    else
    {
        result.append(sems[value]);
    }

    //обработка символа *
    2e6f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2e76:	48 89 c7             	mov    %rax,%rdi
    2e79:	e8 00 00 00 00       	callq  2e7e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    2e7e:	eb 03                	jmp    2e83 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2e80:	48 89 c3             	mov    %rax,%rbx
    //  смысл функции - конкретную строку превратить в байт-код.
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    2e83:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2e8a:	48 89 c7             	mov    %rax,%rdi
    2e8d:	e8 00 00 00 00       	callq  2e92 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    2e92:	eb 03                	jmp    2e97 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    2e94:	48 89 c3             	mov    %rax,%rbx
    2e97:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2e9e:	48 89 c7             	mov    %rax,%rdi
    2ea1:	e8 00 00 00 00       	callq  2ea6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    2ea6:	48 89 d8             	mov    %rbx,%rax
    2ea9:	48 89 c7             	mov    %rax,%rdi
    2eac:	e8 00 00 00 00       	callq  2eb1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                    result.append(sems[rightPart]);
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    2eb1:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2eb8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2ebc:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2ec3:	00 00 
    2ec5:	74 05                	je     2ecc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    2ec7:	e8 00 00 00 00       	callq  2ecc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    2ecc:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    2ed3:	5b                   	pop    %rbx
    2ed4:	5d                   	pop    %rbp
    2ed5:	c3                   	retq   

0000000000002ed6 <_ZN6Parser11compileAtomE7QString>:
    return result;
}
    2ed6:	55                   	push   %rbp
    2ed7:	48 89 e5             	mov    %rsp,%rbp
    2eda:	53                   	push   %rbx
    2edb:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    2ee2:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    2ee9:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    2ef0:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    2ef7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2efe:	00 00 
    2f00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2f04:	31 c0                	xor    %eax,%eax

    2f06:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    2f0d:	48 89 c7             	mov    %rax,%rdi
    2f10:	e8 00 00 00 00       	callq  2f15 <_ZN6Parser11compileAtomE7QString+0x3f>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");
    2f15:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    2f1c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f23 <_ZN6Parser11compileAtomE7QString+0x4d>
    2f23:	48 89 c7             	mov    %rax,%rdi
    2f26:	e8 00 00 00 00       	callq  2f2b <_ZN6Parser11compileAtomE7QString+0x55>
    2f2b:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    2f32:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    2f39:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f3e:	ba 01 00 00 00       	mov    $0x1,%edx
    2f43:	48 89 c7             	mov    %rax,%rdi
    2f46:	e8 00 00 00 00       	callq  2f4b <_ZN6Parser11compileAtomE7QString+0x75>
    2f4b:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    2f52:	48 89 c7             	mov    %rax,%rdi
    2f55:	e8 00 00 00 00       	callq  2f5a <_ZN6Parser11compileAtomE7QString+0x84>

    2f5a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    2f61:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f68 <_ZN6Parser11compileAtomE7QString+0x92>
    2f68:	48 89 c7             	mov    %rax,%rdi
    2f6b:	e8 00 00 00 00       	callq  2f70 <_ZN6Parser11compileAtomE7QString+0x9a>
    2f70:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    2f77:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    2f7e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f83:	ba 01 00 00 00       	mov    $0x1,%edx
    2f88:	48 89 c7             	mov    %rax,%rdi
    2f8b:	e8 00 00 00 00       	callq  2f90 <_ZN6Parser11compileAtomE7QString+0xba>
    2f90:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    2f97:	48 89 c7             	mov    %rax,%rdi
    2f9a:	e8 00 00 00 00       	callq  2f9f <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_FUNCTION("[\w]+");
    2f9f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2fa6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2fad <_ZN6Parser11compileAtomE7QString+0xd7>
    2fad:	48 89 c7             	mov    %rax,%rdi
    2fb0:	e8 00 00 00 00       	callq  2fb5 <_ZN6Parser11compileAtomE7QString+0xdf>
    2fb5:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    2fbc:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    2fc3:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fc8:	ba 01 00 00 00       	mov    $0x1,%edx
    2fcd:	48 89 c7             	mov    %rax,%rdi
    2fd0:	e8 00 00 00 00       	callq  2fd5 <_ZN6Parser11compileAtomE7QString+0xff>
    2fd5:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2fdc:	48 89 c7             	mov    %rax,%rdi
    2fdf:	e8 00 00 00 00       	callq  2fe4 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 5. Это типа любое из ; } {  если я правильно понял
     *
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */
    2fe4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2fe8:	48 89 c7             	mov    %rax,%rdi
    2feb:	e8 00 00 00 00       	callq  2ff0 <_ZN6Parser11compileAtomE7QString+0x11a>

    2ff0:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    2ff7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2ffb:	48 89 d6             	mov    %rdx,%rsi
    2ffe:	48 89 c7             	mov    %rax,%rdi
    3001:	e8 00 00 00 00       	callq  3006 <_ZN6Parser11compileAtomE7QString+0x130>
    Sems SEMS;
    3006:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    300d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3011:	48 89 d6             	mov    %rdx,%rsi
    3014:	48 89 c7             	mov    %rax,%rdi
    3017:	e8 00 00 00 00       	callq  301c <_ZN6Parser11compileAtomE7QString+0x146>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    301c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3023:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 302a <_ZN6Parser11compileAtomE7QString+0x154>
    302a:	48 89 c7             	mov    %rax,%rdi
    302d:	e8 00 00 00 00       	callq  3032 <_ZN6Parser11compileAtomE7QString+0x15c>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    3032:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    3039:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3040:	b9 00 00 00 00       	mov    $0x0,%ecx
    3045:	ba 01 00 00 00       	mov    $0x1,%edx
    304a:	48 89 c7             	mov    %rax,%rdi
    304d:	e8 00 00 00 00       	callq  3052 <_ZN6Parser11compileAtomE7QString+0x17c>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way
    3052:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3059:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3060 <_ZN6Parser11compileAtomE7QString+0x18a>
    3060:	48 89 c7             	mov    %rax,%rdi
    3063:	e8 00 00 00 00       	callq  3068 <_ZN6Parser11compileAtomE7QString+0x192>
    3068:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    306f:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3076:	b9 00 00 00 00       	mov    $0x0,%ecx
    307b:	ba 01 00 00 00       	mov    $0x1,%edx
    3080:	48 89 c7             	mov    %rax,%rdi
    3083:	e8 00 00 00 00       	callq  3088 <_ZN6Parser11compileAtomE7QString+0x1b2>
    3088:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    308f:	48 89 c7             	mov    %rax,%rdi
    3092:	e8 00 00 00 00       	callq  3097 <_ZN6Parser11compileAtomE7QString+0x1c1>

    3097:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    309e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30a5 <_ZN6Parser11compileAtomE7QString+0x1cf>
    30a5:	48 89 c7             	mov    %rax,%rdi
    30a8:	e8 00 00 00 00       	callq  30ad <_ZN6Parser11compileAtomE7QString+0x1d7>
    30ad:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    30b4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    30bb:	b9 00 00 00 00       	mov    $0x0,%ecx
    30c0:	ba 01 00 00 00       	mov    $0x1,%edx
    30c5:	48 89 c7             	mov    %rax,%rdi
    30c8:	e8 00 00 00 00       	callq  30cd <_ZN6Parser11compileAtomE7QString+0x1f7>
    30cd:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    30d4:	48 89 c7             	mov    %rax,%rdi
    30d7:	e8 00 00 00 00       	callq  30dc <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    30dc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    30e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30ea <_ZN6Parser11compileAtomE7QString+0x214>
    30ea:	48 89 c7             	mov    %rax,%rdi
    30ed:	e8 00 00 00 00       	callq  30f2 <_ZN6Parser11compileAtomE7QString+0x21c>
    30f2:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    30f9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3100:	b9 00 00 00 00       	mov    $0x0,%ecx
    3105:	ba 01 00 00 00       	mov    $0x1,%edx
    310a:	48 89 c7             	mov    %rax,%rdi
    310d:	e8 00 00 00 00       	callq  3112 <_ZN6Parser11compileAtomE7QString+0x23c>
    3112:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3119:	48 89 c7             	mov    %rax,%rdi
    311c:	e8 00 00 00 00       	callq  3121 <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_continue("continue");        // 4
    3121:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3128:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 312f <_ZN6Parser11compileAtomE7QString+0x259>
    312f:	48 89 c7             	mov    %rax,%rdi
    3132:	e8 00 00 00 00       	callq  3137 <_ZN6Parser11compileAtomE7QString+0x261>
    3137:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    313e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3145:	b9 00 00 00 00       	mov    $0x0,%ecx
    314a:	ba 01 00 00 00       	mov    $0x1,%edx
    314f:	48 89 c7             	mov    %rax,%rdi
    3152:	e8 00 00 00 00       	callq  3157 <_ZN6Parser11compileAtomE7QString+0x281>
    3157:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    315e:	48 89 c7             	mov    %rax,%rdi
    3161:	e8 00 00 00 00       	callq  3166 <_ZN6Parser11compileAtomE7QString+0x290>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way
    3166:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    316a:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    3171:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3178 <_ZN6Parser11compileAtomE7QString+0x2a2>
    3178:	48 89 c7             	mov    %rax,%rdi
    317b:	e8 00 00 00 00       	callq  3180 <_ZN6Parser11compileAtomE7QString+0x2aa>
    3180:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    3184:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    318b:	b9 00 00 00 00       	mov    $0x0,%ecx
    3190:	ba 01 00 00 00       	mov    $0x1,%edx
    3195:	48 89 c7             	mov    %rax,%rdi
    3198:	e8 00 00 00 00       	callq  319d <_ZN6Parser11compileAtomE7QString+0x2c7>
    319d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    31a1:	48 89 c7             	mov    %rax,%rdi
    31a4:	e8 00 00 00 00       	callq  31a9 <_ZN6Parser11compileAtomE7QString+0x2d3>

    31a9:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    31b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    31b4:	b9 00 00 00 00       	mov    $0x0,%ecx
    31b9:	ba 01 00 00 00       	mov    $0x1,%edx
    31be:	48 89 c7             	mov    %rax,%rdi
    31c1:	e8 00 00 00 00       	callq  31c6 <_ZN6Parser11compileAtomE7QString+0x2f0>
    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    31c6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    31ca:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 31d1 <_ZN6Parser11compileAtomE7QString+0x2fb>
    31d1:	48 89 c7             	mov    %rax,%rdi
    31d4:	e8 00 00 00 00       	callq  31d9 <_ZN6Parser11compileAtomE7QString+0x303>
    31d9:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    31dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    31e1:	b9 00 00 00 00       	mov    $0x0,%ecx
    31e6:	ba 01 00 00 00       	mov    $0x1,%edx
    31eb:	48 89 c7             	mov    %rax,%rdi
    31ee:	e8 00 00 00 00       	callq  31f3 <_ZN6Parser11compileAtomE7QString+0x31d>
    31f3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    31f7:	48 89 c7             	mov    %rax,%rdi
    31fa:	e8 00 00 00 00       	callq  31ff <_ZN6Parser11compileAtomE7QString+0x329>
     *
     * что для этого нужно?
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */
    31ff:	90                   	nop
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    3200:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3204:	48 89 c7             	mov    %rax,%rdi
    3207:	e8 00 00 00 00       	callq  320c <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    320c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3210:	48 89 c7             	mov    %rax,%rdi
    3213:	e8 00 00 00 00       	callq  3218 <_ZN6Parser11compileAtomE7QString+0x342>

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way
    3218:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    321f:	48 89 c7             	mov    %rax,%rdi
    3222:	e8 00 00 00 00       	callq  3227 <_ZN6Parser11compileAtomE7QString+0x351>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    3227:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    322e:	48 89 c7             	mov    %rax,%rdi
    3231:	e8 00 00 00 00       	callq  3236 <_ZN6Parser11compileAtomE7QString+0x360>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    3236:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    323d:	48 89 c7             	mov    %rax,%rdi
    3240:	e8 00 00 00 00       	callq  3245 <_ZN6Parser11compileAtomE7QString+0x36f>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    3245:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    324c:	48 89 c7             	mov    %rax,%rdi
    324f:	e8 00 00 00 00       	callq  3254 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way
    3254:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    325b:	48 89 c7             	mov    %rax,%rdi
    325e:	e8 00 00 00 00       	callq  3263 <_ZN6Parser11compileAtomE7QString+0x38d>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    3263:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    326a:	48 89 c7             	mov    %rax,%rdi
    326d:	e8 00 00 00 00       	callq  3272 <_ZN6Parser11compileAtomE7QString+0x39c>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    3272:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3279:	48 89 c7             	mov    %rax,%rdi
    327c:	e8 00 00 00 00       	callq  3281 <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3281:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3288:	48 89 c7             	mov    %rax,%rdi
    328b:	e8 00 00 00 00       	callq  3290 <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    3290:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3297:	48 89 c7             	mov    %rax,%rdi
    329a:	e8 00 00 00 00       	callq  329f <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 5. Это типа любое из ; } {  если я правильно понял
     *
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */
    329f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    32a3:	48 89 c7             	mov    %rax,%rdi
    32a6:	e8 00 00 00 00       	callq  32ab <_ZN6Parser11compileAtomE7QString+0x3d5>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    32ab:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    32b2:	48 89 c7             	mov    %rax,%rdi
    32b5:	e8 00 00 00 00       	callq  32ba <_ZN6Parser11compileAtomE7QString+0x3e4>

QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    32ba:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    32c1:	48 89 c7             	mov    %rax,%rdi
    32c4:	e8 00 00 00 00       	callq  32c9 <_ZN6Parser11compileAtomE7QString+0x3f3>
}

QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");
    32c9:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    32d0:	48 89 c7             	mov    %rax,%rdi
    32d3:	e8 00 00 00 00       	callq  32d8 <_ZN6Parser11compileAtomE7QString+0x402>
     *
     * что для этого нужно?
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */
    32d8:	e9 b8 02 00 00       	jmpq   3595 <_ZN6Parser11compileAtomE7QString+0x6bf>
    32dd:	48 89 c3             	mov    %rax,%rbx
    32e0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    32e7:	48 89 c7             	mov    %rax,%rdi
    32ea:	e8 00 00 00 00       	callq  32ef <_ZN6Parser11compileAtomE7QString+0x419>
    32ef:	e9 87 02 00 00       	jmpq   357b <_ZN6Parser11compileAtomE7QString+0x6a5>
    32f4:	48 89 c3             	mov    %rax,%rbx
    32f7:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    32fe:	48 89 c7             	mov    %rax,%rdi
    3301:	e8 00 00 00 00       	callq  3306 <_ZN6Parser11compileAtomE7QString+0x430>
    3306:	e9 70 02 00 00       	jmpq   357b <_ZN6Parser11compileAtomE7QString+0x6a5>
    330b:	48 89 c3             	mov    %rax,%rbx
    330e:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    3315:	48 89 c7             	mov    %rax,%rdi
    3318:	e8 00 00 00 00       	callq  331d <_ZN6Parser11compileAtomE7QString+0x447>
    331d:	e9 45 02 00 00       	jmpq   3567 <_ZN6Parser11compileAtomE7QString+0x691>
    3322:	48 89 c3             	mov    %rax,%rbx
    3325:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    332c:	48 89 c7             	mov    %rax,%rdi
    332f:	e8 00 00 00 00       	callq  3334 <_ZN6Parser11compileAtomE7QString+0x45e>
    3334:	e9 2e 02 00 00       	jmpq   3567 <_ZN6Parser11compileAtomE7QString+0x691>
    3339:	48 89 c3             	mov    %rax,%rbx
    333c:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    3343:	48 89 c7             	mov    %rax,%rdi
    3346:	e8 00 00 00 00       	callq  334b <_ZN6Parser11compileAtomE7QString+0x475>
    334b:	e9 03 02 00 00       	jmpq   3553 <_ZN6Parser11compileAtomE7QString+0x67d>
    3350:	48 89 c3             	mov    %rax,%rbx
    3353:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    335a:	48 89 c7             	mov    %rax,%rdi
    335d:	e8 00 00 00 00       	callq  3362 <_ZN6Parser11compileAtomE7QString+0x48c>
    3362:	e9 ec 01 00 00       	jmpq   3553 <_ZN6Parser11compileAtomE7QString+0x67d>
    3367:	48 89 c3             	mov    %rax,%rbx
    336a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3371:	48 89 c7             	mov    %rax,%rdi
    3374:	e8 00 00 00 00       	callq  3379 <_ZN6Parser11compileAtomE7QString+0x4a3>
    3379:	e9 60 01 00 00       	jmpq   34de <_ZN6Parser11compileAtomE7QString+0x608>
    337e:	48 89 c3             	mov    %rax,%rbx
    3381:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3388:	48 89 c7             	mov    %rax,%rdi
    338b:	e8 00 00 00 00       	callq  3390 <_ZN6Parser11compileAtomE7QString+0x4ba>
    3390:	e9 49 01 00 00       	jmpq   34de <_ZN6Parser11compileAtomE7QString+0x608>
    3395:	48 89 c3             	mov    %rax,%rbx
    3398:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    339f:	48 89 c7             	mov    %rax,%rdi
    33a2:	e8 00 00 00 00       	callq  33a7 <_ZN6Parser11compileAtomE7QString+0x4d1>
    33a7:	e9 1e 01 00 00       	jmpq   34ca <_ZN6Parser11compileAtomE7QString+0x5f4>
    33ac:	48 89 c3             	mov    %rax,%rbx
    33af:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    33b6:	48 89 c7             	mov    %rax,%rdi
    33b9:	e8 00 00 00 00       	callq  33be <_ZN6Parser11compileAtomE7QString+0x4e8>
    33be:	e9 07 01 00 00       	jmpq   34ca <_ZN6Parser11compileAtomE7QString+0x5f4>
    33c3:	48 89 c3             	mov    %rax,%rbx
    33c6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    33cd:	48 89 c7             	mov    %rax,%rdi
    33d0:	e8 00 00 00 00       	callq  33d5 <_ZN6Parser11compileAtomE7QString+0x4ff>
    33d5:	e9 dc 00 00 00       	jmpq   34b6 <_ZN6Parser11compileAtomE7QString+0x5e0>
    33da:	48 89 c3             	mov    %rax,%rbx
    33dd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    33e4:	48 89 c7             	mov    %rax,%rdi
    33e7:	e8 00 00 00 00       	callq  33ec <_ZN6Parser11compileAtomE7QString+0x516>
    33ec:	e9 c5 00 00 00       	jmpq   34b6 <_ZN6Parser11compileAtomE7QString+0x5e0>
    33f1:	48 89 c3             	mov    %rax,%rbx
    33f4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33fb:	48 89 c7             	mov    %rax,%rdi
    33fe:	e8 00 00 00 00       	callq  3403 <_ZN6Parser11compileAtomE7QString+0x52d>
    3403:	e9 9a 00 00 00       	jmpq   34a2 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3408:	48 89 c3             	mov    %rax,%rbx
    340b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3412:	48 89 c7             	mov    %rax,%rdi
    3415:	e8 00 00 00 00       	callq  341a <_ZN6Parser11compileAtomE7QString+0x544>
    341a:	e9 83 00 00 00       	jmpq   34a2 <_ZN6Parser11compileAtomE7QString+0x5cc>
    341f:	48 89 c3             	mov    %rax,%rbx
    3422:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3426:	48 89 c7             	mov    %rax,%rdi
    3429:	e8 00 00 00 00       	callq  342e <_ZN6Parser11compileAtomE7QString+0x558>
    342e:	eb 5e                	jmp    348e <_ZN6Parser11compileAtomE7QString+0x5b8>
    3430:	48 89 c3             	mov    %rax,%rbx
    3433:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    343a:	48 89 c7             	mov    %rax,%rdi
    343d:	e8 00 00 00 00       	callq  3442 <_ZN6Parser11compileAtomE7QString+0x56c>
    3442:	eb 4a                	jmp    348e <_ZN6Parser11compileAtomE7QString+0x5b8>
    3444:	48 89 c3             	mov    %rax,%rbx
    3447:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    344b:	48 89 c7             	mov    %rax,%rdi
    344e:	e8 00 00 00 00       	callq  3453 <_ZN6Parser11compileAtomE7QString+0x57d>
    3453:	eb 14                	jmp    3469 <_ZN6Parser11compileAtomE7QString+0x593>
    3455:	48 89 c3             	mov    %rax,%rbx
    3458:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    345c:	48 89 c7             	mov    %rax,%rdi
    345f:	e8 00 00 00 00       	callq  3464 <_ZN6Parser11compileAtomE7QString+0x58e>
    3464:	eb 03                	jmp    3469 <_ZN6Parser11compileAtomE7QString+0x593>
    3466:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    3469:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    346d:	48 89 c7             	mov    %rax,%rdi
    3470:	e8 00 00 00 00       	callq  3475 <_ZN6Parser11compileAtomE7QString+0x59f>
    3475:	eb 03                	jmp    347a <_ZN6Parser11compileAtomE7QString+0x5a4>
    3477:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way
    347a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3481:	48 89 c7             	mov    %rax,%rdi
    3484:	e8 00 00 00 00       	callq  3489 <_ZN6Parser11compileAtomE7QString+0x5b3>
    3489:	eb 03                	jmp    348e <_ZN6Parser11compileAtomE7QString+0x5b8>
    348b:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    348e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3495:	48 89 c7             	mov    %rax,%rdi
    3498:	e8 00 00 00 00       	callq  349d <_ZN6Parser11compileAtomE7QString+0x5c7>
    349d:	eb 03                	jmp    34a2 <_ZN6Parser11compileAtomE7QString+0x5cc>
    349f:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    34a2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    34a9:	48 89 c7             	mov    %rax,%rdi
    34ac:	e8 00 00 00 00       	callq  34b1 <_ZN6Parser11compileAtomE7QString+0x5db>
    34b1:	eb 03                	jmp    34b6 <_ZN6Parser11compileAtomE7QString+0x5e0>
    34b3:	48 89 c3             	mov    %rax,%rbx

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    34b6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    34bd:	48 89 c7             	mov    %rax,%rdi
    34c0:	e8 00 00 00 00       	callq  34c5 <_ZN6Parser11compileAtomE7QString+0x5ef>
    34c5:	eb 03                	jmp    34ca <_ZN6Parser11compileAtomE7QString+0x5f4>
    34c7:	48 89 c3             	mov    %rax,%rbx
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way
    34ca:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    34d1:	48 89 c7             	mov    %rax,%rdi
    34d4:	e8 00 00 00 00       	callq  34d9 <_ZN6Parser11compileAtomE7QString+0x603>
    34d9:	eb 03                	jmp    34de <_ZN6Parser11compileAtomE7QString+0x608>
    34db:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    34de:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    34e5:	48 89 c7             	mov    %rax,%rdi
    34e8:	e8 00 00 00 00       	callq  34ed <_ZN6Parser11compileAtomE7QString+0x617>
    34ed:	eb 03                	jmp    34f2 <_ZN6Parser11compileAtomE7QString+0x61c>
    34ef:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    34f2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    34f9:	48 89 c7             	mov    %rax,%rdi
    34fc:	e8 00 00 00 00       	callq  3501 <_ZN6Parser11compileAtomE7QString+0x62b>
    3501:	eb 03                	jmp    3506 <_ZN6Parser11compileAtomE7QString+0x630>
    3503:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3506:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    350d:	48 89 c7             	mov    %rax,%rdi
    3510:	e8 00 00 00 00       	callq  3515 <_ZN6Parser11compileAtomE7QString+0x63f>
    3515:	eb 03                	jmp    351a <_ZN6Parser11compileAtomE7QString+0x644>
    3517:	48 89 c3             	mov    %rax,%rbx
     *
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    351a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3521:	48 89 c7             	mov    %rax,%rdi
    3524:	e8 00 00 00 00       	callq  3529 <_ZN6Parser11compileAtomE7QString+0x653>
    3529:	eb 03                	jmp    352e <_ZN6Parser11compileAtomE7QString+0x658>
    352b:	48 89 c3             	mov    %rax,%rbx
     * 5. Это типа любое из ; } {  если я правильно понял
     *
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */
    352e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3532:	48 89 c7             	mov    %rax,%rdi
    3535:	e8 00 00 00 00       	callq  353a <_ZN6Parser11compileAtomE7QString+0x664>
    353a:	eb 03                	jmp    353f <_ZN6Parser11compileAtomE7QString+0x669>
    353c:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    353f:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3546:	48 89 c7             	mov    %rax,%rdi
    3549:	e8 00 00 00 00       	callq  354e <_ZN6Parser11compileAtomE7QString+0x678>
    354e:	eb 03                	jmp    3553 <_ZN6Parser11compileAtomE7QString+0x67d>
    3550:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    3553:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    355a:	48 89 c7             	mov    %rax,%rdi
    355d:	e8 00 00 00 00       	callq  3562 <_ZN6Parser11compileAtomE7QString+0x68c>
    3562:	eb 03                	jmp    3567 <_ZN6Parser11compileAtomE7QString+0x691>
    3564:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");
    3567:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    356e:	48 89 c7             	mov    %rax,%rdi
    3571:	e8 00 00 00 00       	callq  3576 <_ZN6Parser11compileAtomE7QString+0x6a0>
    3576:	eb 03                	jmp    357b <_ZN6Parser11compileAtomE7QString+0x6a5>
    3578:	48 89 c3             	mov    %rax,%rbx
    357b:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    3582:	48 89 c7             	mov    %rax,%rdi
    3585:	e8 00 00 00 00       	callq  358a <_ZN6Parser11compileAtomE7QString+0x6b4>
    358a:	48 89 d8             	mov    %rbx,%rax
    358d:	48 89 c7             	mov    %rax,%rdi
    3590:	e8 00 00 00 00       	callq  3595 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * что для этого нужно?
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    3595:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    359c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    35a0:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    35a7:	00 00 
    35a9:	74 05                	je     35b0 <_ZN6Parser11compileAtomE7QString+0x6da>
    35ab:	e8 00 00 00 00       	callq  35b0 <_ZN6Parser11compileAtomE7QString+0x6da>
    35b0:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    35b7:	5b                   	pop    %rbx
    35b8:	5d                   	pop    %rbp
    35b9:	c3                   	retq   

00000000000035ba <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:
    return result;
}
    35ba:	55                   	push   %rbp
    35bb:	48 89 e5             	mov    %rsp,%rbp
    35be:	53                   	push   %rbx
    35bf:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    35c6:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    35cd:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    35d4:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    35db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    35e2:	00 00 
    35e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    35e8:	31 c0                	xor    %eax,%eax

    35ea:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    35ee:	48 89 c7             	mov    %rax,%rdi
    35f1:	e8 00 00 00 00       	callq  35f6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
void Parser::splitStr(QString str, QList<QString> &atoms){
    35f6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    35fd:	48 89 c7             	mov    %rax,%rdi
    3600:	e8 00 00 00 00       	callq  3605 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    3605:	85 c0                	test   %eax,%eax
    3607:	0f 9e c0             	setle  %al
    360a:	84 c0                	test   %al,%al
    360c:	74 0a                	je     3618 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    360e:	bb 00 00 00 00       	mov    $0x0,%ebx
    3613:	e9 27 01 00 00       	jmpq   373f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>
    QByteArray result;
    if(str.length()<1) return;
    3618:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    361c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3623 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    3623:	48 89 c7             	mov    %rax,%rdi
    3626:	e8 00 00 00 00       	callq  362b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    362b:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    362f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3633:	b9 00 00 00 00       	mov    $0x0,%ecx
    3638:	ba 00 00 00 00       	mov    $0x0,%edx
    363d:	48 89 c7             	mov    %rax,%rdi
    3640:	e8 00 00 00 00       	callq  3645 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    3645:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3649:	48 89 c7             	mov    %rax,%rdi
    364c:	e8 00 00 00 00       	callq  3651 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>

    3651:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3655:	be 00 00 00 00       	mov    $0x0,%esi
    365a:	48 89 c7             	mov    %rax,%rdi
    365d:	e8 00 00 00 00       	callq  3662 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>
    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    QR.setMinimal(false);

    3662:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
    //int count = 0;
    int pos = 0;
    3669:	8b 55 8c             	mov    -0x74(%rbp),%edx
    366c:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    3673:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3677:	b9 00 00 00 00       	mov    $0x0,%ecx
    367c:	48 89 c7             	mov    %rax,%rdi
    367f:	e8 00 00 00 00       	callq  3684 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    3684:	89 45 8c             	mov    %eax,-0x74(%rbp)
    3687:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    368b:	0f 95 c0             	setne  %al
    368e:	84 c0                	test   %al,%al
    3690:	0f 84 98 00 00 00    	je     372e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>

    while ((pos = QR.indexIn(str, pos)) != -1) {
    3696:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    369a:	48 89 c7             	mov    %rax,%rdi
    369d:	e8 00 00 00 00       	callq  36a2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    36a2:	01 45 8c             	add    %eax,-0x74(%rbp)
        //++count;
    36a5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    36a9:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    36ad:	ba 00 00 00 00       	mov    $0x0,%edx
    36b2:	48 89 ce             	mov    %rcx,%rsi
    36b5:	48 89 c7             	mov    %rax,%rdi
    36b8:	e8 00 00 00 00       	callq  36bd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    36bd:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    36c1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    36c8:	48 89 d6             	mov    %rdx,%rsi
    36cb:	48 89 c7             	mov    %rax,%rdi
    36ce:	e8 00 00 00 00       	callq  36d3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    36d3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    36d7:	48 89 c7             	mov    %rax,%rdi
    36da:	e8 00 00 00 00       	callq  36df <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        pos += QR.matchedLength();
    36df:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    36e3:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    36e7:	ba 00 00 00 00       	mov    $0x0,%edx
    36ec:	48 89 ce             	mov    %rcx,%rsi
    36ef:	48 89 c7             	mov    %rax,%rdi
    36f2:	e8 00 00 00 00       	callq  36f7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    36f7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    36fb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    36ff:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    3706:	48 89 ce             	mov    %rcx,%rsi
    3709:	48 89 c7             	mov    %rax,%rdi
    370c:	e8 00 00 00 00       	callq  3711 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    3711:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3715:	48 89 c7             	mov    %rax,%rdi
    3718:	e8 00 00 00 00       	callq  371d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    371d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3721:	48 89 c7             	mov    %rax,%rdi
    3724:	e8 00 00 00 00       	callq  3729 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;
    3729:	e9 3b ff ff ff       	jmpq   3669 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>
    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;
    372e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3732:	48 89 c7             	mov    %rax,%rdi
    3735:	e8 00 00 00 00       	callq  373a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    373a:	bb 01 00 00 00       	mov    $0x1,%ebx
    373f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3743:	48 89 c7             	mov    %rax,%rdi
    3746:	e8 00 00 00 00       	callq  374b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    374b:	83 fb 01             	cmp    $0x1,%ebx

    */

    return result;
}

    374e:	90                   	nop

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    374f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3753:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    375a:	00 00 
    375c:	74 76                	je     37d4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    375e:	eb 6f                	jmp    37cf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    3760:	48 89 c3             	mov    %rax,%rbx
    3763:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3767:	48 89 c7             	mov    %rax,%rdi
    376a:	e8 00 00 00 00       	callq  376f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    376f:	eb 47                	jmp    37b8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    3771:	48 89 c3             	mov    %rax,%rbx
    3774:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3778:	48 89 c7             	mov    %rax,%rdi
    377b:	e8 00 00 00 00       	callq  3780 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    3780:	eb 36                	jmp    37b8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    3782:	48 89 c3             	mov    %rax,%rbx

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
    3785:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3789:	48 89 c7             	mov    %rax,%rdi
    378c:	e8 00 00 00 00       	callq  3791 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    3791:	eb 14                	jmp    37a7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    3793:	48 89 c3             	mov    %rax,%rbx
        pos += QR.matchedLength();
    3796:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    379a:	48 89 c7             	mov    %rax,%rdi
    379d:	e8 00 00 00 00       	callq  37a2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    37a2:	eb 03                	jmp    37a7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    37a4:	48 89 c3             	mov    %rax,%rbx
    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;
    37a7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    37ab:	48 89 c7             	mov    %rax,%rdi
    37ae:	e8 00 00 00 00       	callq  37b3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    37b3:	eb 03                	jmp    37b8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    37b5:	48 89 c3             	mov    %rax,%rbx

    */

    return result;
}

    37b8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    37bc:	48 89 c7             	mov    %rax,%rdi
    37bf:	e8 00 00 00 00       	callq  37c4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    37c4:	48 89 d8             	mov    %rbx,%rax
    37c7:	48 89 c7             	mov    %rax,%rdi
    37ca:	e8 00 00 00 00       	callq  37cf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    37cf:	e8 00 00 00 00       	callq  37d4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    37d4:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    37db:	5b                   	pop    %rbx
    37dc:	5d                   	pop    %rbp
    37dd:	c3                   	retq   

00000000000037de <_Z12compileBlockR11QStringList>:
    }
}
    37de:	55                   	push   %rbp
    37df:	48 89 e5             	mov    %rsp,%rbp
    37e2:	48 83 ec 20          	sub    $0x20,%rsp
    37e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    37ea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    37ee:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    37f5:	00 00 
    37f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    37fb:	31 c0                	xor    %eax,%eax

    37fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3801:	48 89 c7             	mov    %rax,%rdi
    3804:	e8 00 00 00 00       	callq  3809 <_Z12compileBlockR11QStringList+0x2b>
QByteArray  compileBlock(QStringList &block){
    QByteArray result;
    3809:	90                   	nop

    380a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    380e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3812:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    3819:	00 00 
    381b:	74 05                	je     3822 <_Z12compileBlockR11QStringList+0x44>
    381d:	e8 00 00 00 00       	callq  3822 <_Z12compileBlockR11QStringList+0x44>
    3822:	c9                   	leaveq 
    3823:	c3                   	retq   

0000000000003824 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:
    return result;
}


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
    3824:	55                   	push   %rbp
    3825:	48 89 e5             	mov    %rsp,%rbp
    3828:	53                   	push   %rbx
    3829:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    3830:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    3837:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    383e:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    3845:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    384c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3853:	00 00 
    3855:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3859:	31 c0                	xor    %eax,%eax
// inherit copypasted code from splitBlocks(..)
    385b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3862:	48 89 c7             	mov    %rax,%rdi
    3865:	e8 00 00 00 00       	callq  386a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
{
    386a:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    3871:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3878:	b9 00 00 00 00       	mov    $0x0,%ecx
    387d:	ba 01 00 00 00       	mov    $0x1,%edx
    3882:	48 89 c7             	mov    %rax,%rdi
    3885:	e8 00 00 00 00       	callq  388a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>
    QStringList allStrings;
    QRegExp classRE(regExp);
    388a:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    3891:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3898:	48 89 d6             	mov    %rdx,%rsi
    389b:	48 89 c7             	mov    %rax,%rdi
    389e:	e8 00 00 00 00       	callq  38a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>

    38a3:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    38aa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    38b1:	48 89 d6             	mov    %rdx,%rsi
    38b4:	48 89 c7             	mov    %rax,%rdi
    38b7:	e8 00 00 00 00       	callq  38bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString str  = *code;
    38bc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    38c3:	48 89 c7             	mov    %rax,%rdi
    38c6:	e8 00 00 00 00       	callq  38cb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString str_copy = str;
    38cb:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    38d2:	48 89 c7             	mov    %rax,%rdi
    38d5:	e8 00 00 00 00       	callq  38da <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString block;
    38da:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38e1:	48 89 c7             	mov    %rax,%rdi
    38e4:	e8 00 00 00 00       	callq  38e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>
    QString excess;         // то что находится до регулярки
    QString blockName;
    38e9:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    38f0:	48 89 c7             	mov    %rax,%rdi
    38f3:	e8 00 00 00 00       	callq  38f8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    QChar qc;
    38f8:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    38ff:	00 00 00 

    3902:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    3909:	00 00 00 
    int     i        = 0;
    390c:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    3913:	00 00 00 
    int     lineBase = 0;
    int     line     = 0;
    3916:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    391d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3924 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    3924:	48 89 c7             	mov    %rax,%rdi
    3927:	e8 00 00 00 00       	callq  392c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    392c:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    3933:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    393a:	ba 01 00 00 00       	mov    $0x1,%edx
    393f:	48 89 ce             	mov    %rcx,%rsi
    3942:	48 89 c7             	mov    %rax,%rdi
    3945:	e8 00 00 00 00       	callq  394a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    394a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    3950:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3957:	48 89 c7             	mov    %rax,%rdi
    395a:	e8 00 00 00 00       	callq  395f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>

    395f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3966:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 396d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    396d:	48 89 c7             	mov    %rax,%rdi
    3970:	e8 00 00 00 00       	callq  3975 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    3975:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    397c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3983:	ba 01 00 00 00       	mov    $0x1,%edx
    3988:	48 89 ce             	mov    %rcx,%rsi
    398b:	48 89 c7             	mov    %rax,%rdi
    398e:	e8 00 00 00 00       	callq  3993 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    3993:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    3999:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    39a0:	48 89 c7             	mov    %rax,%rdi
    39a3:	e8 00 00 00 00       	callq  39a8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BFL = str.count("{");
    39a8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    39af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39b6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    39b6:	48 89 c7             	mov    %rax,%rdi
    39b9:	e8 00 00 00 00       	callq  39be <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    39be:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    39c5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    39cc:	ba 01 00 00 00       	mov    $0x1,%edx
    39d1:	48 89 ce             	mov    %rcx,%rsi
    39d4:	48 89 c7             	mov    %rax,%rdi
    39d7:	e8 00 00 00 00       	callq  39dc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    39dc:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    39e2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    39e9:	48 89 c7             	mov    %rax,%rdi
    39ec:	e8 00 00 00 00       	callq  39f1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BFR = str.count("}");
    39f1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    39f8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39ff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    39ff:	48 89 c7             	mov    %rax,%rdi
    3a02:	e8 00 00 00 00       	callq  3a07 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    3a07:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    3a0e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3a15:	ba 01 00 00 00       	mov    $0x1,%edx
    3a1a:	48 89 ce             	mov    %rcx,%rsi
    3a1d:	48 89 c7             	mov    %rax,%rdi
    3a20:	e8 00 00 00 00       	callq  3a25 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    3a25:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    3a2b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3a32:	48 89 c7             	mov    %rax,%rdi
    3a35:	e8 00 00 00 00       	callq  3a3a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>
    unsigned int BCL = str.count("(");
    unsigned int BCR = str.count(")");
    3a3a:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    3a40:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    3a46:	74 43                	je     3a8b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>

    3a48:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3a4f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3a56 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    3a56:	48 89 c7             	mov    %rax,%rdi
    3a59:	e8 00 00 00 00       	callq  3a5e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    3a5e:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3a65:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    3a6c:	48 89 d6             	mov    %rdx,%rsi
    3a6f:	48 89 c7             	mov    %rax,%rdi
    3a72:	e8 00 00 00 00       	callq  3a77 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    3a77:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3a7e:	48 89 c7             	mov    %rax,%rdi
    3a81:	e8 00 00 00 00       	callq  3a86 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
    if(BFL!=BFR){
    3a86:	e9 6f 03 00 00       	jmpq   3dfa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>
        pe("Err. 1: Brakes {} are not pair.");
        return;}
    3a8b:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    3a91:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    3a97:	74 43                	je     3adc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>

    3a99:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3aa0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3aa7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    3aa7:	48 89 c7             	mov    %rax,%rdi
    3aaa:	e8 00 00 00 00       	callq  3aaf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    3aaf:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    3ab6:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    3abd:	48 89 d6             	mov    %rdx,%rsi
    3ac0:	48 89 c7             	mov    %rax,%rdi
    3ac3:	e8 00 00 00 00       	callq  3ac8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    3ac8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3acf:	48 89 c7             	mov    %rax,%rdi
    3ad2:	e8 00 00 00 00       	callq  3ad7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
    if(BCL!=BCR){
    3ad7:	e9 1e 03 00 00       	jmpq   3dfa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    3adc:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3ae3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3aea:	b9 00 00 00 00       	mov    $0x0,%ecx
    3aef:	ba 00 00 00 00       	mov    $0x0,%edx
    3af4:	48 89 c7             	mov    %rax,%rdi
    3af7:	e8 00 00 00 00       	callq  3afc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    3afc:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    3b02:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    3b09:	0f 88 ea 02 00 00    	js     3df9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>
    {
        i = classRE.indexIn(str);if(i<0)return;
    3b0f:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    3b15:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    3b1b:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    3b1e:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    3b25:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b29:	48 89 d6             	mov    %rdx,%rsi
    3b2c:	48 89 c7             	mov    %rax,%rdi
    3b2f:	e8 00 00 00 00       	callq  3b34 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    3b34:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3b38:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    3b3f:	89 da                	mov    %ebx,%edx
    3b41:	48 89 ce             	mov    %rcx,%rsi
    3b44:	48 89 c7             	mov    %rax,%rdi
    3b47:	e8 00 00 00 00       	callq  3b4c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    3b4c:	83 c0 01             	add    $0x1,%eax
    3b4f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    3b55:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b59:	48 89 c7             	mov    %rax,%rdi
    3b5c:	e8 00 00 00 00       	callq  3b61 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>

    3b61:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b65:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    3b6c:	ba 01 00 00 00       	mov    $0x1,%edx
    3b71:	48 89 ce             	mov    %rcx,%rsi
    3b74:	48 89 c7             	mov    %rax,%rdi
    3b77:	e8 00 00 00 00       	callq  3b7c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    3b7c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b80:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3b87:	48 89 d6             	mov    %rdx,%rsi
    3b8a:	48 89 c7             	mov    %rax,%rdi
    3b8d:	e8 00 00 00 00       	callq  3b92 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    3b92:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b96:	48 89 c7             	mov    %rax,%rdi
    3b99:	e8 00 00 00 00       	callq  3b9e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        line = whatLine(str_copy, lineBase + i) + 1;
    3b9e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3ba2:	be 7b 00 00 00       	mov    $0x7b,%esi
    3ba7:	48 89 c7             	mov    %rax,%rdi
    3baa:	e8 00 00 00 00       	callq  3baf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    3baf:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    3bb5:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    3bb9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3bc0:	b9 01 00 00 00       	mov    $0x1,%ecx
    3bc5:	48 89 c7             	mov    %rax,%rdi
    3bc8:	e8 00 00 00 00       	callq  3bcd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    3bcd:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)
        blockName = classRE.cap(1);
        int j = str.indexOf('{',i);
    3bd3:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    3bd9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3be0:	89 d6                	mov    %edx,%esi
    3be2:	48 89 c7             	mov    %rax,%rdi
    3be5:	e8 00 00 00 00       	callq  3bea <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    3bea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3bee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3bf2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3bf6:	48 89 c7             	mov    %rax,%rdi
    3bf9:	e8 00 00 00 00       	callq  3bfe <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    3bfe:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        qc = str[j];
    3c05:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    3c0c:	00 00 00 

    3c0f:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    3c16:	00 00 00 
        int bl=1;
        int br=0;
    3c19:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    3c1f:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    3c25:	0f 84 a2 00 00 00    	je     3ccd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>

        while(bl != br)
    3c2b:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
        {
    3c32:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    3c38:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3c3f:	89 d6                	mov    %edx,%esi
    3c41:	48 89 c7             	mov    %rax,%rdi
    3c44:	e8 00 00 00 00       	callq  3c49 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    3c49:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3c4d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3c51:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c55:	48 89 c7             	mov    %rax,%rdi
    3c58:	e8 00 00 00 00       	callq  3c5d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    3c5d:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            j++;
    3c64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c68:	be 7b 00 00 00       	mov    $0x7b,%esi
    3c6d:	48 89 c7             	mov    %rax,%rdi
    3c70:	e8 00 00 00 00       	callq  3c75 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    3c75:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3c79:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    3c80:	89 d6                	mov    %edx,%esi
    3c82:	89 c7                	mov    %eax,%edi
    3c84:	e8 00 00 00 00       	callq  3c89 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    3c89:	84 c0                	test   %al,%al
    3c8b:	74 07                	je     3c94 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    3c8d:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            qc = str[j];
    3c94:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c98:	be 7d 00 00 00       	mov    $0x7d,%esi
    3c9d:	48 89 c7             	mov    %rax,%rdi
    3ca0:	e8 00 00 00 00       	callq  3ca5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    3ca5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3ca9:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    3cb0:	89 d6                	mov    %edx,%esi
    3cb2:	89 c7                	mov    %eax,%edi
    3cb4:	e8 00 00 00 00       	callq  3cb9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    3cb9:	84 c0                	test   %al,%al
    3cbb:	0f 84 58 ff ff ff    	je     3c19 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    3cc1:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        int j = str.indexOf('{',i);

        qc = str[j];

        int bl=1;
        int br=0;
    3cc8:	e9 4c ff ff ff       	jmpq   3c19 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    3ccd:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    3cd3:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    3cd9:	89 c1                	mov    %eax,%ecx
    3cdb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3cdf:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    3ce5:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3cec:	48 89 c7             	mov    %rax,%rdi
    3cef:	e8 00 00 00 00       	callq  3cf4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    3cf4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    3cf8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3cff:	48 89 d6             	mov    %rdx,%rsi
    3d02:	48 89 c7             	mov    %rax,%rdi
    3d05:	e8 00 00 00 00       	callq  3d0a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    3d0a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d0e:	48 89 c7             	mov    %rax,%rdi
    3d11:	e8 00 00 00 00       	callq  3d16 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>

    3d16:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d1a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3d21 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    3d21:	48 89 c7             	mov    %rax,%rdi
    3d24:	e8 00 00 00 00       	callq  3d29 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    3d29:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3d2d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3d31:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    3d38:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3d3e:	b9 00 00 00 00       	mov    $0x0,%ecx
    3d43:	48 89 c7             	mov    %rax,%rdi
    3d46:	e8 00 00 00 00       	callq  3d4b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    3d4b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3d4f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3d56:	48 89 d6             	mov    %rdx,%rsi
    3d59:	48 89 c7             	mov    %rax,%rdi
    3d5c:	e8 00 00 00 00       	callq  3d61 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    3d61:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3d65:	48 89 c7             	mov    %rax,%rdi
    3d68:	e8 00 00 00 00       	callq  3d6d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    3d6d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d71:	48 89 c7             	mov    %rax,%rdi
    3d74:	e8 00 00 00 00       	callq  3d79 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>
        block = str.mid(i,j-i);
        allStrings = block.split("\n");
    3d79:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    3d80:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    3d87:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    3d8e:	48 89 ce             	mov    %rcx,%rsi
    3d91:	48 89 c7             	mov    %rax,%rdi
    3d94:	e8 00 00 00 00       	callq  3d99 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>

        result->insert(blockName, allStrings); // Here.


    3d99:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3da0:	48 89 c7             	mov    %rax,%rdi
    3da3:	e8 00 00 00 00       	callq  3da8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    3da8:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    3dae:	89 c2                	mov    %eax,%edx
    3db0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3db4:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    3dbb:	48 89 ce             	mov    %rcx,%rsi
    3dbe:	48 89 c7             	mov    %rax,%rdi
    3dc1:	e8 00 00 00 00       	callq  3dc6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    3dc6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3dca:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3dd1:	48 89 d6             	mov    %rdx,%rsi
    3dd4:	48 89 c7             	mov    %rax,%rdi
    3dd7:	e8 00 00 00 00       	callq  3ddc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    3ddc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3de0:	48 89 c7             	mov    %rax,%rdi
    3de3:	e8 00 00 00 00       	callq  3de8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>

    3de8:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    3dee:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)
        pe("Err. 1: Brakes {} are not pair.");
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}
    3df4:	e9 e3 fc ff ff       	jmpq   3adc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>

    while(1==1)
    3df9:	90                   	nop
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    3dfa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3e01:	48 89 c7             	mov    %rax,%rdi
    3e04:	e8 00 00 00 00       	callq  3e09 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    3e09:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3e10:	48 89 c7             	mov    %rax,%rdi
    3e13:	e8 00 00 00 00       	callq  3e18 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    3e18:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3e1f:	48 89 c7             	mov    %rax,%rdi
    3e22:	e8 00 00 00 00       	callq  3e27 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    3e27:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3e2e:	48 89 c7             	mov    %rax,%rdi
    3e31:	e8 00 00 00 00       	callq  3e36 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    3e36:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3e3d:	48 89 c7             	mov    %rax,%rdi
    3e40:	e8 00 00 00 00       	callq  3e45 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>
}


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    3e45:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3e4c:	48 89 c7             	mov    %rax,%rdi
    3e4f:	e8 00 00 00 00       	callq  3e54 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>
    return result;
}


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
    3e54:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3e5b:	48 89 c7             	mov    %rax,%rdi
    3e5e:	e8 00 00 00 00       	callq  3e63 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>

        str = str.right(str.length()-j);
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
    3e63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e67:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3e6e:	00 00 
    3e70:	0f 84 89 01 00 00    	je     3fff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    3e76:	e9 7f 01 00 00       	jmpq   3ffa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    3e7b:	48 89 c3             	mov    %rax,%rbx

    QChar qc;

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;
    3e7e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3e85:	48 89 c7             	mov    %rax,%rdi
    3e88:	e8 00 00 00 00       	callq  3e8d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    3e8d:	e9 d6 00 00 00       	jmpq   3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3e92:	48 89 c3             	mov    %rax,%rbx

    3e95:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3e9c:	48 89 c7             	mov    %rax,%rdi
    3e9f:	e8 00 00 00 00       	callq  3ea4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    3ea4:	e9 bf 00 00 00       	jmpq   3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3ea9:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFL = str.count("{");
    3eac:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3eb3:	48 89 c7             	mov    %rax,%rdi
    3eb6:	e8 00 00 00 00       	callq  3ebb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    3ebb:	e9 a8 00 00 00       	jmpq   3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3ec0:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    3ec3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3eca:	48 89 c7             	mov    %rax,%rdi
    3ecd:	e8 00 00 00 00       	callq  3ed2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    3ed2:	e9 91 00 00 00       	jmpq   3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3ed7:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    unsigned int BCR = str.count(")");

    3eda:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3ee1:	48 89 c7             	mov    %rax,%rdi
    3ee4:	e8 00 00 00 00       	callq  3ee9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    3ee9:	eb 7d                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3eeb:	48 89 c3             	mov    %rax,%rbx
    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
        return;}

    3eee:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ef5:	48 89 c7             	mov    %rax,%rdi
    3ef8:	e8 00 00 00 00       	callq  3efd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    3efd:	eb 69                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3eff:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    3f02:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f06:	48 89 c7             	mov    %rax,%rdi
    3f09:	e8 00 00 00 00       	callq  3f0e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    3f0e:	eb 58                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3f10:	48 89 c3             	mov    %rax,%rbx

    3f13:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f17:	48 89 c7             	mov    %rax,%rdi
    3f1a:	e8 00 00 00 00       	callq  3f1f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    3f1f:	eb 47                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3f21:	48 89 c3             	mov    %rax,%rbx
        {
            j++;
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }
    3f24:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3f28:	48 89 c7             	mov    %rax,%rdi
    3f2b:	e8 00 00 00 00       	callq  3f30 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    3f30:	eb 36                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3f32:	48 89 c3             	mov    %rax,%rbx

    3f35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3f39:	48 89 c7             	mov    %rax,%rdi
    3f3c:	e8 00 00 00 00       	callq  3f41 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    3f41:	eb 03                	jmp    3f46 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    3f43:	48 89 c3             	mov    %rax,%rbx
    3f46:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3f4a:	48 89 c7             	mov    %rax,%rdi
    3f4d:	e8 00 00 00 00       	callq  3f52 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    3f52:	eb 14                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3f54:	48 89 c3             	mov    %rax,%rbx
        block = str.mid(i,j-i);
        allStrings = block.split("\n");

        result->insert(blockName, allStrings); // Here.


    3f57:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3f5b:	48 89 c7             	mov    %rax,%rdi
    3f5e:	e8 00 00 00 00       	callq  3f63 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    3f63:	eb 03                	jmp    3f68 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3f65:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    3f68:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3f6f:	48 89 c7             	mov    %rax,%rdi
    3f72:	e8 00 00 00 00       	callq  3f77 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    3f77:	eb 03                	jmp    3f7c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    3f79:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    3f7c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3f83:	48 89 c7             	mov    %rax,%rdi
    3f86:	e8 00 00 00 00       	callq  3f8b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    3f8b:	eb 03                	jmp    3f90 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    3f8d:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    3f90:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3f97:	48 89 c7             	mov    %rax,%rdi
    3f9a:	e8 00 00 00 00       	callq  3f9f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    3f9f:	eb 03                	jmp    3fa4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    3fa1:	48 89 c3             	mov    %rax,%rbx
void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    3fa4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3fab:	48 89 c7             	mov    %rax,%rdi
    3fae:	e8 00 00 00 00       	callq  3fb3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    3fb3:	eb 03                	jmp    3fb8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    3fb5:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    3fb8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3fbf:	48 89 c7             	mov    %rax,%rdi
    3fc2:	e8 00 00 00 00       	callq  3fc7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    3fc7:	eb 03                	jmp    3fcc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    3fc9:	48 89 c3             	mov    %rax,%rbx
}


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    3fcc:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3fd3:	48 89 c7             	mov    %rax,%rdi
    3fd6:	e8 00 00 00 00       	callq  3fdb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    3fdb:	eb 03                	jmp    3fe0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    3fdd:	48 89 c3             	mov    %rax,%rbx
    return result;
}


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
    3fe0:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3fe7:	48 89 c7             	mov    %rax,%rdi
    3fea:	e8 00 00 00 00       	callq  3fef <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    3fef:	48 89 d8             	mov    %rbx,%rax
    3ff2:	48 89 c7             	mov    %rax,%rdi
    3ff5:	e8 00 00 00 00       	callq  3ffa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>

        str = str.right(str.length()-j);
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
    3ffa:	e8 00 00 00 00       	callq  3fff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    3fff:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    4006:	5b                   	pop    %rbx
    4007:	5d                   	pop    %rbp
    4008:	c3                   	retq   
    4009:	90                   	nop

000000000000400a <_ZN6Parser8whatLineE7QStringi>:
   }
}

    400a:	55                   	push   %rbp
    400b:	48 89 e5             	mov    %rsp,%rbp
    400e:	53                   	push   %rbx
    400f:	48 83 ec 38          	sub    $0x38,%rsp
    4013:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4017:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    401b:	89 55 cc             	mov    %edx,-0x34(%rbp)
    401e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4025:	00 00 
    4027:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    402b:	31 c0                	xor    %eax,%eax
int Parser::whatLine(QString text, int position)
    402d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4031:	8b 55 cc             	mov    -0x34(%rbp),%edx
    4034:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    4038:	48 89 ce             	mov    %rcx,%rsi
    403b:	48 89 c7             	mov    %rax,%rdi
    403e:	e8 00 00 00 00       	callq  4043 <_ZN6Parser8whatLineE7QStringi+0x39>
    4043:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4047:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    404b:	48 89 d6             	mov    %rdx,%rsi
    404e:	48 89 c7             	mov    %rax,%rdi
    4051:	e8 00 00 00 00       	callq  4056 <_ZN6Parser8whatLineE7QStringi+0x4c>
    4056:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    405a:	48 89 c7             	mov    %rax,%rdi
    405d:	e8 00 00 00 00       	callq  4062 <_ZN6Parser8whatLineE7QStringi+0x58>
{
    4062:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4066:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 406d <_ZN6Parser8whatLineE7QStringi+0x63>
    406d:	48 89 c7             	mov    %rax,%rdi
    4070:	e8 00 00 00 00       	callq  4075 <_ZN6Parser8whatLineE7QStringi+0x6b>
    4075:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    4079:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    407d:	ba 01 00 00 00       	mov    $0x1,%edx
    4082:	48 89 ce             	mov    %rcx,%rsi
    4085:	48 89 c7             	mov    %rax,%rdi
    4088:	e8 00 00 00 00       	callq  408d <_ZN6Parser8whatLineE7QStringi+0x83>
    408d:	89 c3                	mov    %eax,%ebx
    408f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4093:	48 89 c7             	mov    %rax,%rdi
    4096:	e8 00 00 00 00       	callq  409b <_ZN6Parser8whatLineE7QStringi+0x91>
    409b:	89 d8                	mov    %ebx,%eax
    text = text.left(position);
    409d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    40a1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    40a8:	00 00 
    40aa:	74 3b                	je     40e7 <_ZN6Parser8whatLineE7QStringi+0xdd>
    40ac:	eb 34                	jmp    40e2 <_ZN6Parser8whatLineE7QStringi+0xd8>
    40ae:	48 89 c3             	mov    %rax,%rbx
        this->Blocks.append(block);//
        *///
   }
}

int Parser::whatLine(QString text, int position)
    40b1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    40b5:	48 89 c7             	mov    %rax,%rdi
    40b8:	e8 00 00 00 00       	callq  40bd <_ZN6Parser8whatLineE7QStringi+0xb3>
    40bd:	48 89 d8             	mov    %rbx,%rax
    40c0:	48 89 c7             	mov    %rax,%rdi
    40c3:	e8 00 00 00 00       	callq  40c8 <_ZN6Parser8whatLineE7QStringi+0xbe>
    40c8:	48 89 c3             	mov    %rax,%rbx
{
    40cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    40cf:	48 89 c7             	mov    %rax,%rdi
    40d2:	e8 00 00 00 00       	callq  40d7 <_ZN6Parser8whatLineE7QStringi+0xcd>
    40d7:	48 89 d8             	mov    %rbx,%rax
    40da:	48 89 c7             	mov    %rax,%rdi
    40dd:	e8 00 00 00 00       	callq  40e2 <_ZN6Parser8whatLineE7QStringi+0xd8>
    text = text.left(position);
    40e2:	e8 00 00 00 00       	callq  40e7 <_ZN6Parser8whatLineE7QStringi+0xdd>
    40e7:	48 83 c4 38          	add    $0x38,%rsp
    40eb:	5b                   	pop    %rbx
    40ec:	5d                   	pop    %rbp
    40ed:	c3                   	retq   

00000000000040ee <_ZN6Parser15temporary_greenEv>:
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
}

    40ee:	55                   	push   %rbp
    40ef:	48 89 e5             	mov    %rsp,%rbp
    40f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
void Parser::temporary_green()
{
    40f6:	90                   	nop
    40f7:	5d                   	pop    %rbp
    40f8:	c3                   	retq   
    40f9:	90                   	nop

00000000000040fa <_ZN6Parser8saveLogsE7QStringS0_>:

}

    40fa:	55                   	push   %rbp
    40fb:	48 89 e5             	mov    %rsp,%rbp
    40fe:	53                   	push   %rbx
    40ff:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    4106:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    410d:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    4114:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    411b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4122:	00 00 
    4124:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4128:	31 c0                	xor    %eax,%eax
void Parser::saveLogs(QString code, QString result)
    412a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4131:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4138 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    4138:	48 89 c7             	mov    %rax,%rdi
    413b:	e8 00 00 00 00       	callq  4140 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
{
    4140:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4147:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 414e <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    414e:	48 89 c7             	mov    %rax,%rdi
    4151:	e8 00 00 00 00       	callq  4156 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    4156:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    415d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4164:	48 89 d6             	mov    %rdx,%rsi
    4167:	48 89 c7             	mov    %rax,%rdi
    416a:	e8 00 00 00 00       	callq  416f <_ZN6Parser8saveLogsE7QStringS0_+0x75>

    416f:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    4176:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    417d:	48 89 d6             	mov    %rdx,%rsi
    4180:	48 89 c7             	mov    %rax,%rdi
    4183:	e8 00 00 00 00       	callq  4188 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>
    QString log1 = code;
    QString log2 = result;
    4188:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    418f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4196 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    4196:	48 89 c7             	mov    %rax,%rdi
    4199:	e8 00 00 00 00       	callq  419e <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    419e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    41a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41ac <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    41ac:	48 89 c7             	mov    %rax,%rdi
    41af:	e8 00 00 00 00       	callq  41b4 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    41b4:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    41bb:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    41c2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    41c9:	b9 01 00 00 00       	mov    $0x1,%ecx
    41ce:	48 89 c7             	mov    %rax,%rdi
    41d1:	e8 00 00 00 00       	callq  41d6 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    41d6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    41dd:	48 89 c7             	mov    %rax,%rdi
    41e0:	e8 00 00 00 00       	callq  41e5 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    41e5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    41ec:	48 89 c7             	mov    %rax,%rdi
    41ef:	e8 00 00 00 00       	callq  41f4 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>

    41f4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    41fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4202 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    4202:	48 89 c7             	mov    %rax,%rdi
    4205:	e8 00 00 00 00       	callq  420a <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    420a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4211:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4218 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    4218:	48 89 c7             	mov    %rax,%rdi
    421b:	e8 00 00 00 00       	callq  4220 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    4220:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    4227:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    422e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4235:	b9 01 00 00 00       	mov    $0x1,%ecx
    423a:	48 89 c7             	mov    %rax,%rdi
    423d:	e8 00 00 00 00       	callq  4242 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    4242:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4249:	48 89 c7             	mov    %rax,%rdi
    424c:	e8 00 00 00 00       	callq  4251 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    4251:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4258:	48 89 c7             	mov    %rax,%rdi
    425b:	e8 00 00 00 00       	callq  4260 <_ZN6Parser8saveLogsE7QStringS0_+0x166>
    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");
    4260:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    4267:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    426b:	48 89 d6             	mov    %rdx,%rsi
    426e:	48 89 c7             	mov    %rax,%rdi
    4271:	e8 00 00 00 00       	callq  4276 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>

    4276:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    427d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4281:	48 89 d6             	mov    %rdx,%rsi
    4284:	48 89 c7             	mov    %rax,%rdi
    4287:	e8 00 00 00 00       	callq  428c <_ZN6Parser8saveLogsE7QStringS0_+0x192>
    QFile file1(fileName1);
    QFile file2(fileName2);
    428c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4293:	be 02 00 00 00       	mov    $0x2,%esi
    4298:	48 89 c7             	mov    %rax,%rdi
    429b:	e8 00 00 00 00       	callq  42a0 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>

    42a0:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    42a7:	be 02 00 00 00       	mov    $0x2,%esi
    42ac:	48 89 c7             	mov    %rax,%rdi
    42af:	e8 00 00 00 00       	callq  42b4 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>
    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    42b4:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    42bb:	48 89 c7             	mov    %rax,%rdi
    42be:	e8 00 00 00 00       	callq  42c3 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    42c3:	84 c0                	test   %al,%al
    42c5:	74 1a                	je     42e1 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    42c7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    42cb:	be 04 00 00 00       	mov    $0x4,%esi
    42d0:	48 89 c7             	mov    %rax,%rdi
    42d3:	e8 00 00 00 00       	callq  42d8 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    42d8:	8b 45 d0             	mov    -0x30(%rbp),%eax
    42db:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)

    42e1:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    42e8:	48 89 c7             	mov    %rax,%rdi
    42eb:	e8 00 00 00 00       	callq  42f0 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    42f0:	84 c0                	test   %al,%al
    42f2:	74 1a                	je     430e <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    42f4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    42f8:	be 04 00 00 00       	mov    $0x4,%esi
    42fd:	48 89 c7             	mov    %rax,%rdi
    4300:	e8 00 00 00 00       	callq  4305 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    4305:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4308:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    430e:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    4314:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4318:	89 d6                	mov    %edx,%esi
    431a:	48 89 c7             	mov    %rax,%rdi
    431d:	e8 00 00 00 00       	callq  4322 <_ZN6Parser8saveLogsE7QStringS0_+0x228>

    4322:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    4328:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    432c:	89 d6                	mov    %edx,%esi
    432e:	48 89 c7             	mov    %rax,%rdi
    4331:	e8 00 00 00 00       	callq  4336 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>
    file1.open(FileMode1);
    file2.open(FileMode2);
    4336:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    433a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    433e:	48 89 d6             	mov    %rdx,%rsi
    4341:	48 89 c7             	mov    %rax,%rdi
    4344:	e8 00 00 00 00       	callq  4349 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>

    4349:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    434d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4351:	48 89 d6             	mov    %rdx,%rsi
    4354:	48 89 c7             	mov    %rax,%rdi
    4357:	e8 00 00 00 00       	callq  435c <_ZN6Parser8saveLogsE7QStringS0_+0x262>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    435c:	e8 00 00 00 00       	callq  4361 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    4361:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)

    4368:	e8 00 00 00 00       	callq  436d <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    436d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QDate date = QDate::currentDate();
    4373:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    437a:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    4381:	ba 00 00 00 00       	mov    $0x0,%edx
    4386:	48 89 ce             	mov    %rcx,%rsi
    4389:	48 89 c7             	mov    %rax,%rdi
    438c:	e8 00 00 00 00       	callq  4391 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    4391:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4398:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    439f:	ba 00 00 00 00       	mov    $0x0,%edx
    43a4:	48 89 ce             	mov    %rcx,%rsi
    43a7:	48 89 c7             	mov    %rax,%rdi
    43aa:	e8 00 00 00 00       	callq  43af <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    43af:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    43b6:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    43bd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 43c4 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    43c4:	48 89 ce             	mov    %rcx,%rsi
    43c7:	48 89 c7             	mov    %rax,%rdi
    43ca:	e8 00 00 00 00       	callq  43cf <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    43cf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    43d6:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    43dd:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    43e4:	48 89 ce             	mov    %rcx,%rsi
    43e7:	48 89 c7             	mov    %rax,%rdi
    43ea:	e8 00 00 00 00       	callq  43ef <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    43ef:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    43f6:	48 89 c7             	mov    %rax,%rdi
    43f9:	e8 00 00 00 00       	callq  43fe <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    43fe:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4405:	48 89 c7             	mov    %rax,%rdi
    4408:	e8 00 00 00 00       	callq  440d <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    440d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4414:	48 89 c7             	mov    %rax,%rdi
    4417:	e8 00 00 00 00       	callq  441c <_ZN6Parser8saveLogsE7QStringS0_+0x322>
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    441c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4423:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    442a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4431 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    4431:	48 89 c7             	mov    %rax,%rdi
    4434:	e8 00 00 00 00       	callq  4439 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    4439:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4440:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    4447:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 444e <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    444e:	48 89 ce             	mov    %rcx,%rsi
    4451:	48 89 c7             	mov    %rax,%rdi
    4454:	e8 00 00 00 00       	callq  4459 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    4459:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4460:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4464:	48 89 d6             	mov    %rdx,%rsi
    4467:	48 89 c7             	mov    %rax,%rdi
    446a:	e8 00 00 00 00       	callq  446f <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    446f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4476:	48 89 c7             	mov    %rax,%rdi
    4479:	e8 00 00 00 00       	callq  447e <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    447e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4485:	48 89 c7             	mov    %rax,%rdi
    4488:	e8 00 00 00 00       	callq  448d <_ZN6Parser8saveLogsE7QStringS0_+0x393>

    448d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4491:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    4498:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 449f <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    449f:	48 89 c7             	mov    %rax,%rdi
    44a2:	e8 00 00 00 00       	callq  44a7 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    44a7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    44ab:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    44af:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 44b6 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    44b6:	48 89 ce             	mov    %rcx,%rsi
    44b9:	48 89 c7             	mov    %rax,%rdi
    44bc:	e8 00 00 00 00       	callq  44c1 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    44c1:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    44c5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    44c9:	48 89 d6             	mov    %rdx,%rsi
    44cc:	48 89 c7             	mov    %rax,%rdi
    44cf:	e8 00 00 00 00       	callq  44d4 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    44d4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    44d8:	48 89 c7             	mov    %rax,%rdi
    44db:	e8 00 00 00 00       	callq  44e0 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    44e0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    44e4:	48 89 c7             	mov    %rax,%rdi
    44e7:	e8 00 00 00 00       	callq  44ec <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>
    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    44ec:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    44f3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    44f7:	48 89 d6             	mov    %rdx,%rsi
    44fa:	48 89 c7             	mov    %rax,%rdi
    44fd:	e8 00 00 00 00       	callq  4502 <_ZN6Parser8saveLogsE7QStringS0_+0x408>

    4502:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    4509:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    450d:	48 89 d6             	mov    %rdx,%rsi
    4510:	48 89 c7             	mov    %rax,%rdi
    4513:	e8 00 00 00 00       	callq  4518 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>
    stream1 << log1;
    stream2 << log2;
    4518:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    451c:	48 89 c7             	mov    %rax,%rdi
    451f:	e8 00 00 00 00       	callq  4524 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>

    4524:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4528:	48 89 c7             	mov    %rax,%rdi
    452b:	e8 00 00 00 00       	callq  4530 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    4530:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4537:	48 89 c7             	mov    %rax,%rdi
    453a:	e8 00 00 00 00       	callq  453f <_ZN6Parser8saveLogsE7QStringS0_+0x445>
    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    453f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4543:	48 89 c7             	mov    %rax,%rdi
    4546:	e8 00 00 00 00       	callq  454b <_ZN6Parser8saveLogsE7QStringS0_+0x451>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);
    454b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    454f:	48 89 c7             	mov    %rax,%rdi
    4552:	e8 00 00 00 00       	callq  4557 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>
    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    4557:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    455b:	48 89 c7             	mov    %rax,%rdi
    455e:	e8 00 00 00 00       	callq  4563 <_ZN6Parser8saveLogsE7QStringS0_+0x469>

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");
    4563:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4567:	48 89 c7             	mov    %rax,%rdi
    456a:	e8 00 00 00 00       	callq  456f <_ZN6Parser8saveLogsE7QStringS0_+0x475>

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    456f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4576:	48 89 c7             	mov    %rax,%rdi
    4579:	e8 00 00 00 00       	callq  457e <_ZN6Parser8saveLogsE7QStringS0_+0x484>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    457e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4585:	48 89 c7             	mov    %rax,%rdi
    4588:	e8 00 00 00 00       	callq  458d <_ZN6Parser8saveLogsE7QStringS0_+0x493>
{

}

void Parser::saveLogs(QString code, QString result)
{
    458d:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4594:	48 89 c7             	mov    %rax,%rdi
    4597:	e8 00 00 00 00       	callq  459c <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>
void Parser::temporary_green()
{

}

void Parser::saveLogs(QString code, QString result)
    459c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    45a3:	48 89 c7             	mov    %rax,%rdi
    45a6:	e8 00 00 00 00       	callq  45ab <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";

    stream1 << log1;
    stream2 << log2;

    file1.close();
    45ab:	90                   	nop
    45ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    45b0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    45b7:	00 00 
    45b9:	0f 84 d3 01 00 00    	je     4792 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    45bf:	e9 c9 01 00 00       	jmpq   478d <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    45c4:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    45c7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    45ce:	48 89 c7             	mov    %rax,%rdi
    45d1:	e8 00 00 00 00       	callq  45d6 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    45d6:	eb 03                	jmp    45db <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    45d8:	48 89 c3             	mov    %rax,%rbx
    45db:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    45e2:	48 89 c7             	mov    %rax,%rdi
    45e5:	e8 00 00 00 00       	callq  45ea <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    45ea:	e9 48 01 00 00       	jmpq   4737 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    45ef:	48 89 c3             	mov    %rax,%rbx

    45f2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    45f9:	48 89 c7             	mov    %rax,%rdi
    45fc:	e8 00 00 00 00       	callq  4601 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    4601:	eb 03                	jmp    4606 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    4603:	48 89 c3             	mov    %rax,%rbx
    4606:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    460d:	48 89 c7             	mov    %rax,%rdi
    4610:	e8 00 00 00 00       	callq  4615 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    4615:	e9 1d 01 00 00       	jmpq   4737 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    461a:	48 89 c3             	mov    %rax,%rbx
    461d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4624:	48 89 c7             	mov    %rax,%rdi
    4627:	e8 00 00 00 00       	callq  462c <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    462c:	eb 17                	jmp    4645 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    462e:	48 89 c3             	mov    %rax,%rbx
    4631:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4638:	48 89 c7             	mov    %rax,%rdi
    463b:	e8 00 00 00 00       	callq  4640 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    4640:	eb 03                	jmp    4645 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    4642:	48 89 c3             	mov    %rax,%rbx
    4645:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    464c:	48 89 c7             	mov    %rax,%rdi
    464f:	e8 00 00 00 00       	callq  4654 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    4654:	eb 17                	jmp    466d <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    4656:	48 89 c3             	mov    %rax,%rbx
    4659:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4660:	48 89 c7             	mov    %rax,%rdi
    4663:	e8 00 00 00 00       	callq  4668 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    4668:	eb 03                	jmp    466d <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    466a:	48 89 c3             	mov    %rax,%rbx
    466d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4674:	48 89 c7             	mov    %rax,%rdi
    4677:	e8 00 00 00 00       	callq  467c <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    467c:	eb 75                	jmp    46f3 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    467e:	48 89 c3             	mov    %rax,%rbx
    4681:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4688:	48 89 c7             	mov    %rax,%rdi
    468b:	e8 00 00 00 00       	callq  4690 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    4690:	eb 61                	jmp    46f3 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4692:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    4695:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    469c:	48 89 c7             	mov    %rax,%rdi
    469f:	e8 00 00 00 00       	callq  46a4 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    46a4:	eb 03                	jmp    46a9 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    46a6:	48 89 c3             	mov    %rax,%rbx
    46a9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    46b0:	48 89 c7             	mov    %rax,%rdi
    46b3:	e8 00 00 00 00       	callq  46b8 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    46b8:	eb 25                	jmp    46df <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    46ba:	48 89 c3             	mov    %rax,%rbx

    46bd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    46c1:	48 89 c7             	mov    %rax,%rdi
    46c4:	e8 00 00 00 00       	callq  46c9 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    46c9:	eb 03                	jmp    46ce <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    46cb:	48 89 c3             	mov    %rax,%rbx
    46ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46d2:	48 89 c7             	mov    %rax,%rdi
    46d5:	e8 00 00 00 00       	callq  46da <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    46da:	eb 03                	jmp    46df <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    46dc:	48 89 c3             	mov    %rax,%rbx
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    46df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    46e6:	48 89 c7             	mov    %rax,%rdi
    46e9:	e8 00 00 00 00       	callq  46ee <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    46ee:	eb 03                	jmp    46f3 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    46f0:	48 89 c3             	mov    %rax,%rbx
    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    46f3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    46f7:	48 89 c7             	mov    %rax,%rdi
    46fa:	e8 00 00 00 00       	callq  46ff <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    46ff:	eb 03                	jmp    4704 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    4701:	48 89 c3             	mov    %rax,%rbx

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);
    4704:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4708:	48 89 c7             	mov    %rax,%rdi
    470b:	e8 00 00 00 00       	callq  4710 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    4710:	eb 03                	jmp    4715 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    4712:	48 89 c3             	mov    %rax,%rbx
    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    4715:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4719:	48 89 c7             	mov    %rax,%rdi
    471c:	e8 00 00 00 00       	callq  4721 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    4721:	eb 03                	jmp    4726 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    4723:	48 89 c3             	mov    %rax,%rbx

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");
    4726:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    472a:	48 89 c7             	mov    %rax,%rdi
    472d:	e8 00 00 00 00       	callq  4732 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    4732:	eb 03                	jmp    4737 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4734:	48 89 c3             	mov    %rax,%rbx

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    4737:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    473e:	48 89 c7             	mov    %rax,%rdi
    4741:	e8 00 00 00 00       	callq  4746 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    4746:	eb 03                	jmp    474b <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    4748:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    474b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4752:	48 89 c7             	mov    %rax,%rdi
    4755:	e8 00 00 00 00       	callq  475a <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    475a:	eb 03                	jmp    475f <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    475c:	48 89 c3             	mov    %rax,%rbx
{

}

void Parser::saveLogs(QString code, QString result)
{
    475f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4766:	48 89 c7             	mov    %rax,%rdi
    4769:	e8 00 00 00 00       	callq  476e <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    476e:	eb 03                	jmp    4773 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    4770:	48 89 c3             	mov    %rax,%rbx
void Parser::temporary_green()
{

}

void Parser::saveLogs(QString code, QString result)
    4773:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    477a:	48 89 c7             	mov    %rax,%rdi
    477d:	e8 00 00 00 00       	callq  4782 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    4782:	48 89 d8             	mov    %rbx,%rax
    4785:	48 89 c7             	mov    %rax,%rdi
    4788:	e8 00 00 00 00       	callq  478d <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";

    stream1 << log1;
    stream2 << log2;

    file1.close();
    478d:	e8 00 00 00 00       	callq  4792 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    4792:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    4799:	5b                   	pop    %rbx
    479a:	5d                   	pop    %rbp
    479b:	c3                   	retq   

000000000000479c <_ZN6Parser4initEv>:
    file2.close();
}
    479c:	55                   	push   %rbp
    479d:	48 89 e5             	mov    %rsp,%rbp
    47a0:	48 83 ec 10          	sub    $0x10,%rsp
    47a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    47a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    47ac:	48 83 c0 30          	add    $0x30,%rax
    47b0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47b7 <_ZN6Parser4initEv+0x1b>
    47b7:	48 89 c7             	mov    %rax,%rdi
    47ba:	e8 00 00 00 00       	callq  47bf <_ZN6Parser4initEv+0x23>
void Parser::init(){
    47bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    47c3:	48 83 c0 38          	add    $0x38,%rax
    47c7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47ce <_ZN6Parser4initEv+0x32>
    47ce:	48 89 c7             	mov    %rax,%rdi
    47d1:	e8 00 00 00 00       	callq  47d6 <_ZN6Parser4initEv+0x3a>
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    47d6:	90                   	nop
    47d7:	c9                   	leaveq 
    47d8:	c3                   	retq   
    47d9:	90                   	nop

00000000000047da <_ZN6Parser8initSemsEv>:
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}
    47da:	55                   	push   %rbp
    47db:	48 89 e5             	mov    %rsp,%rbp
    47de:	53                   	push   %rbx
    47df:	48 83 ec 38          	sub    $0x38,%rsp
    47e3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    47e7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    47ee:	00 00 
    47f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    47f4:	31 c0                	xor    %eax,%eax

    47f6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    47fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4801:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4808 <_ZN6Parser8initSemsEv+0x2e>
    4808:	48 89 c7             	mov    %rax,%rdi
    480b:	e8 00 00 00 00       	callq  4810 <_ZN6Parser8initSemsEv+0x36>
    4810:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4814:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    481b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    481f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4823:	48 89 c6             	mov    %rax,%rsi
    4826:	48 89 cf             	mov    %rcx,%rdi
    4829:	e8 00 00 00 00       	callq  482e <_ZN6Parser8initSemsEv+0x54>
    482e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4832:	48 89 c7             	mov    %rax,%rdi
    4835:	e8 00 00 00 00       	callq  483a <_ZN6Parser8initSemsEv+0x60>
void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    483a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    4841:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4845:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 484c <_ZN6Parser8initSemsEv+0x72>
    484c:	48 89 c7             	mov    %rax,%rdi
    484f:	e8 00 00 00 00       	callq  4854 <_ZN6Parser8initSemsEv+0x7a>
    4854:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4858:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    485f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4863:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4867:	48 89 c6             	mov    %rax,%rsi
    486a:	48 89 cf             	mov    %rcx,%rdi
    486d:	e8 00 00 00 00       	callq  4872 <_ZN6Parser8initSemsEv+0x98>
    4872:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4876:	48 89 c7             	mov    %rax,%rdi
    4879:	e8 00 00 00 00       	callq  487e <_ZN6Parser8initSemsEv+0xa4>

    487e:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    4885:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4889:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4890 <_ZN6Parser8initSemsEv+0xb6>
    4890:	48 89 c7             	mov    %rax,%rdi
    4893:	e8 00 00 00 00       	callq  4898 <_ZN6Parser8initSemsEv+0xbe>
    4898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    489c:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    48a3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    48a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48ab:	48 89 c6             	mov    %rax,%rsi
    48ae:	48 89 cf             	mov    %rcx,%rdi
    48b1:	e8 00 00 00 00       	callq  48b6 <_ZN6Parser8initSemsEv+0xdc>
    48b6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48ba:	48 89 c7             	mov    %rax,%rdi
    48bd:	e8 00 00 00 00       	callq  48c2 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("rotl",             0x01);
    48c2:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    48c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 48d4 <_ZN6Parser8initSemsEv+0xfa>
    48d4:	48 89 c7             	mov    %rax,%rdi
    48d7:	e8 00 00 00 00       	callq  48dc <_ZN6Parser8initSemsEv+0x102>
    48dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    48e0:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    48e7:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    48eb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48ef:	48 89 c6             	mov    %rax,%rsi
    48f2:	48 89 cf             	mov    %rcx,%rdi
    48f5:	e8 00 00 00 00       	callq  48fa <_ZN6Parser8initSemsEv+0x120>
    48fa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48fe:	48 89 c7             	mov    %rax,%rdi
    4901:	e8 00 00 00 00       	callq  4906 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("rotr",             0x02);
    4906:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    490d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4911:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4918 <_ZN6Parser8initSemsEv+0x13e>
    4918:	48 89 c7             	mov    %rax,%rdi
    491b:	e8 00 00 00 00       	callq  4920 <_ZN6Parser8initSemsEv+0x146>
    4920:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4924:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    492b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    492f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4933:	48 89 c6             	mov    %rax,%rsi
    4936:	48 89 cf             	mov    %rcx,%rdi
    4939:	e8 00 00 00 00       	callq  493e <_ZN6Parser8initSemsEv+0x164>
    493e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4942:	48 89 c7             	mov    %rax,%rdi
    4945:	e8 00 00 00 00       	callq  494a <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("ashl",             0x03);
    494a:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    4951:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4955:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 495c <_ZN6Parser8initSemsEv+0x182>
    495c:	48 89 c7             	mov    %rax,%rdi
    495f:	e8 00 00 00 00       	callq  4964 <_ZN6Parser8initSemsEv+0x18a>
    4964:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4968:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    496f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4973:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4977:	48 89 c6             	mov    %rax,%rsi
    497a:	48 89 cf             	mov    %rcx,%rdi
    497d:	e8 00 00 00 00       	callq  4982 <_ZN6Parser8initSemsEv+0x1a8>
    4982:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4986:	48 89 c7             	mov    %rax,%rdi
    4989:	e8 00 00 00 00       	callq  498e <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("ashr",             0x04);
    498e:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    4995:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4999:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49a0 <_ZN6Parser8initSemsEv+0x1c6>
    49a0:	48 89 c7             	mov    %rax,%rdi
    49a3:	e8 00 00 00 00       	callq  49a8 <_ZN6Parser8initSemsEv+0x1ce>
    49a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    49ac:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    49b3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    49b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49bb:	48 89 c6             	mov    %rax,%rsi
    49be:	48 89 cf             	mov    %rcx,%rdi
    49c1:	e8 00 00 00 00       	callq  49c6 <_ZN6Parser8initSemsEv+0x1ec>
    49c6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49ca:	48 89 c7             	mov    %rax,%rdi
    49cd:	e8 00 00 00 00       	callq  49d2 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("iif",              0x05);
    49d2:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    49d9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49dd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49e4 <_ZN6Parser8initSemsEv+0x20a>
    49e4:	48 89 c7             	mov    %rax,%rdi
    49e7:	e8 00 00 00 00       	callq  49ec <_ZN6Parser8initSemsEv+0x212>
    49ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    49f0:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    49f7:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    49fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49ff:	48 89 c6             	mov    %rax,%rsi
    4a02:	48 89 cf             	mov    %rcx,%rdi
    4a05:	e8 00 00 00 00       	callq  4a0a <_ZN6Parser8initSemsEv+0x230>
    4a0a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a0e:	48 89 c7             	mov    %rax,%rdi
    4a11:	e8 00 00 00 00       	callq  4a16 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("read",             0x06);
    4a16:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    4a1d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a21:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a28 <_ZN6Parser8initSemsEv+0x24e>
    4a28:	48 89 c7             	mov    %rax,%rdi
    4a2b:	e8 00 00 00 00       	callq  4a30 <_ZN6Parser8initSemsEv+0x256>
    4a30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a34:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4a3b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4a3f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a43:	48 89 c6             	mov    %rax,%rsi
    4a46:	48 89 cf             	mov    %rcx,%rdi
    4a49:	e8 00 00 00 00       	callq  4a4e <_ZN6Parser8initSemsEv+0x274>
    4a4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a52:	48 89 c7             	mov    %rax,%rdi
    4a55:	e8 00 00 00 00       	callq  4a5a <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write",            0x07);
    4a5a:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    4a61:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a65:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a6c <_ZN6Parser8initSemsEv+0x292>
    4a6c:	48 89 c7             	mov    %rax,%rdi
    4a6f:	e8 00 00 00 00       	callq  4a74 <_ZN6Parser8initSemsEv+0x29a>
    4a74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a78:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4a7f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4a83:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a87:	48 89 c6             	mov    %rax,%rsi
    4a8a:	48 89 cf             	mov    %rcx,%rdi
    4a8d:	e8 00 00 00 00       	callq  4a92 <_ZN6Parser8initSemsEv+0x2b8>
    4a92:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a96:	48 89 c7             	mov    %rax,%rdi
    4a99:	e8 00 00 00 00       	callq  4a9e <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("write_all", 		0x08);
    4a9e:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    4aa5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4aa9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ab0 <_ZN6Parser8initSemsEv+0x2d6>
    4ab0:	48 89 c7             	mov    %rax,%rdi
    4ab3:	e8 00 00 00 00       	callq  4ab8 <_ZN6Parser8initSemsEv+0x2de>
    4ab8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4abc:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4ac3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ac7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4acb:	48 89 c6             	mov    %rax,%rsi
    4ace:	48 89 cf             	mov    %rcx,%rdi
    4ad1:	e8 00 00 00 00       	callq  4ad6 <_ZN6Parser8initSemsEv+0x2fc>
    4ad6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ada:	48 89 c7             	mov    %rax,%rdi
    4add:	e8 00 00 00 00       	callq  4ae2 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("write_sel", 		0x09);
    4ae2:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    4ae9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4aed:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4af4 <_ZN6Parser8initSemsEv+0x31a>
    4af4:	48 89 c7             	mov    %rax,%rdi
    4af7:	e8 00 00 00 00       	callq  4afc <_ZN6Parser8initSemsEv+0x322>
    4afc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b00:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b07:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4b0b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b0f:	48 89 c6             	mov    %rax,%rsi
    4b12:	48 89 cf             	mov    %rcx,%rdi
    4b15:	e8 00 00 00 00       	callq  4b1a <_ZN6Parser8initSemsEv+0x340>
    4b1a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b1e:	48 89 c7             	mov    %rax,%rdi
    4b21:	e8 00 00 00 00       	callq  4b26 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("on",               0x0A);
    4b26:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    4b2d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b31:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b38 <_ZN6Parser8initSemsEv+0x35e>
    4b38:	48 89 c7             	mov    %rax,%rdi
    4b3b:	e8 00 00 00 00       	callq  4b40 <_ZN6Parser8initSemsEv+0x366>
    4b40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b44:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b4b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4b4f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b53:	48 89 c6             	mov    %rax,%rsi
    4b56:	48 89 cf             	mov    %rcx,%rdi
    4b59:	e8 00 00 00 00       	callq  4b5e <_ZN6Parser8initSemsEv+0x384>
    4b5e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b62:	48 89 c7             	mov    %rax,%rdi
    4b65:	e8 00 00 00 00       	callq  4b6a <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("off",              0x0B);
    4b6a:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    4b71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b75:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b7c <_ZN6Parser8initSemsEv+0x3a2>
    4b7c:	48 89 c7             	mov    %rax,%rdi
    4b7f:	e8 00 00 00 00       	callq  4b84 <_ZN6Parser8initSemsEv+0x3aa>
    4b84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b88:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b8f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4b93:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b97:	48 89 c6             	mov    %rax,%rsi
    4b9a:	48 89 cf             	mov    %rcx,%rdi
    4b9d:	e8 00 00 00 00       	callq  4ba2 <_ZN6Parser8initSemsEv+0x3c8>
    4ba2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ba6:	48 89 c7             	mov    %rax,%rdi
    4ba9:	e8 00 00 00 00       	callq  4bae <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("local_send_event", 0x0C);
    4bae:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    4bb5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bb9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4bc0 <_ZN6Parser8initSemsEv+0x3e6>
    4bc0:	48 89 c7             	mov    %rax,%rdi
    4bc3:	e8 00 00 00 00       	callq  4bc8 <_ZN6Parser8initSemsEv+0x3ee>
    4bc8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4bcc:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4bd3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4bd7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bdb:	48 89 c6             	mov    %rax,%rsi
    4bde:	48 89 cf             	mov    %rcx,%rdi
    4be1:	e8 00 00 00 00       	callq  4be6 <_ZN6Parser8initSemsEv+0x40c>
    4be6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bea:	48 89 c7             	mov    %rax,%rdi
    4bed:	e8 00 00 00 00       	callq  4bf2 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event", 		0x0D);
    4bf2:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    4bf9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bfd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c04 <_ZN6Parser8initSemsEv+0x42a>
    4c04:	48 89 c7             	mov    %rax,%rdi
    4c07:	e8 00 00 00 00       	callq  4c0c <_ZN6Parser8initSemsEv+0x432>
    4c0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4c10:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4c17:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4c1b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c1f:	48 89 c6             	mov    %rax,%rsi
    4c22:	48 89 cf             	mov    %rcx,%rdi
    4c25:	e8 00 00 00 00       	callq  4c2a <_ZN6Parser8initSemsEv+0x450>
    4c2a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c2e:	48 89 c7             	mov    %rax,%rdi
    4c31:	e8 00 00 00 00       	callq  4c36 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sel", 	0x0E);
    4c36:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    4c3d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c41:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c48 <_ZN6Parser8initSemsEv+0x46e>
    4c48:	48 89 c7             	mov    %rax,%rdi
    4c4b:	e8 00 00 00 00       	callq  4c50 <_ZN6Parser8initSemsEv+0x476>
    4c50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4c54:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4c5b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4c5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c63:	48 89 c6             	mov    %rax,%rsi
    4c66:	48 89 cf             	mov    %rcx,%rdi
    4c69:	e8 00 00 00 00       	callq  4c6e <_ZN6Parser8initSemsEv+0x494>
    4c6e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c72:	48 89 c7             	mov    %rax,%rdi
    4c75:	e8 00 00 00 00       	callq  4c7a <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_sync", 	0x0F);
    4c7a:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    4c81:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c85:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c8c <_ZN6Parser8initSemsEv+0x4b2>
    4c8c:	48 89 c7             	mov    %rax,%rdi
    4c8f:	e8 00 00 00 00       	callq  4c94 <_ZN6Parser8initSemsEv+0x4ba>
    4c94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4c98:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4c9f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ca3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ca7:	48 89 c6             	mov    %rax,%rsi
    4caa:	48 89 cf             	mov    %rcx,%rdi
    4cad:	e8 00 00 00 00       	callq  4cb2 <_ZN6Parser8initSemsEv+0x4d8>
    4cb2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cb6:	48 89 c7             	mov    %rax,%rdi
    4cb9:	e8 00 00 00 00       	callq  4cbe <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    4cbe:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    4cc5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cc9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4cd0 <_ZN6Parser8initSemsEv+0x4f6>
    4cd0:	48 89 c7             	mov    %rax,%rdi
    4cd3:	e8 00 00 00 00       	callq  4cd8 <_ZN6Parser8initSemsEv+0x4fe>
    4cd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4cdc:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4ce3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ce7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ceb:	48 89 c6             	mov    %rax,%rsi
    4cee:	48 89 cf             	mov    %rcx,%rdi
    4cf1:	e8 00 00 00 00       	callq  4cf6 <_ZN6Parser8initSemsEv+0x51c>
    4cf6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cfa:	48 89 c7             	mov    %rax,%rdi
    4cfd:	e8 00 00 00 00       	callq  4d02 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("send_event_all",   0x11);
    4d02:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    4d09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d0d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d14 <_ZN6Parser8initSemsEv+0x53a>
    4d14:	48 89 c7             	mov    %rax,%rdi
    4d17:	e8 00 00 00 00       	callq  4d1c <_ZN6Parser8initSemsEv+0x542>
    4d1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d20:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4d27:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4d2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d2f:	48 89 c6             	mov    %rax,%rsi
    4d32:	48 89 cf             	mov    %rcx,%rdi
    4d35:	e8 00 00 00 00       	callq  4d3a <_ZN6Parser8initSemsEv+0x560>
    4d3a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d3e:	48 89 c7             	mov    %rax,%rdi
    4d41:	e8 00 00 00 00       	callq  4d46 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("end_proc", 		0x12);
    4d46:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    4d4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d51:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d58 <_ZN6Parser8initSemsEv+0x57e>
    4d58:	48 89 c7             	mov    %rax,%rdi
    4d5b:	e8 00 00 00 00       	callq  4d60 <_ZN6Parser8initSemsEv+0x586>
    4d60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d64:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4d6b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4d6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d73:	48 89 c6             	mov    %rax,%rsi
    4d76:	48 89 cf             	mov    %rcx,%rdi
    4d79:	e8 00 00 00 00       	callq  4d7e <_ZN6Parser8initSemsEv+0x5a4>
    4d7e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d82:	48 89 c7             	mov    %rax,%rdi
    4d85:	e8 00 00 00 00       	callq  4d8a <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("delay",            0x13);
    4d8a:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    4d91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d95:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d9c <_ZN6Parser8initSemsEv+0x5c2>
    4d9c:	48 89 c7             	mov    %rax,%rdi
    4d9f:	e8 00 00 00 00       	callq  4da4 <_ZN6Parser8initSemsEv+0x5ca>
    4da4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4da8:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4daf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4db3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4db7:	48 89 c6             	mov    %rax,%rsi
    4dba:	48 89 cf             	mov    %rcx,%rdi
    4dbd:	e8 00 00 00 00       	callq  4dc2 <_ZN6Parser8initSemsEv+0x5e8>
    4dc2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4dc6:	48 89 c7             	mov    %rax,%rdi
    4dc9:	e8 00 00 00 00       	callq  4dce <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("make_dialog", 		0x14);
    4dce:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    4dd5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4dd9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4de0 <_ZN6Parser8initSemsEv+0x606>
    4de0:	48 89 c7             	mov    %rax,%rdi
    4de3:	e8 00 00 00 00       	callq  4de8 <_ZN6Parser8initSemsEv+0x60e>
    4de8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4dec:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4df3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4df7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4dfb:	48 89 c6             	mov    %rax,%rsi
    4dfe:	48 89 cf             	mov    %rcx,%rdi
    4e01:	e8 00 00 00 00       	callq  4e06 <_ZN6Parser8initSemsEv+0x62c>
    4e06:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e0a:	48 89 c7             	mov    %rax,%rdi
    4e0d:	e8 00 00 00 00       	callq  4e12 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("prin",             0x15);
    4e12:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    4e19:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e1d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e24 <_ZN6Parser8initSemsEv+0x64a>
    4e24:	48 89 c7             	mov    %rax,%rdi
    4e27:	e8 00 00 00 00       	callq  4e2c <_ZN6Parser8initSemsEv+0x652>
    4e2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4e30:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4e37:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4e3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e3f:	48 89 c6             	mov    %rax,%rsi
    4e42:	48 89 cf             	mov    %rcx,%rdi
    4e45:	e8 00 00 00 00       	callq  4e4a <_ZN6Parser8initSemsEv+0x670>
    4e4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e4e:	48 89 c7             	mov    %rax,%rdi
    4e51:	e8 00 00 00 00       	callq  4e56 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("telemetry", 		0x16);
    4e56:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    4e5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e61:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e68 <_ZN6Parser8initSemsEv+0x68e>
    4e68:	48 89 c7             	mov    %rax,%rdi
    4e6b:	e8 00 00 00 00       	callq  4e70 <_ZN6Parser8initSemsEv+0x696>
    4e70:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4e74:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4e7b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4e7f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e83:	48 89 c6             	mov    %rax,%rsi
    4e86:	48 89 cf             	mov    %rcx,%rdi
    4e89:	e8 00 00 00 00       	callq  4e8e <_ZN6Parser8initSemsEv+0x6b4>
    4e8e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e92:	48 89 c7             	mov    %rax,%rdi
    4e95:	e8 00 00 00 00       	callq  4e9a <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("telemetry_reset", 	0x17);
    4e9a:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    4ea1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ea5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4eac <_ZN6Parser8initSemsEv+0x6d2>
    4eac:	48 89 c7             	mov    %rax,%rdi
    4eaf:	e8 00 00 00 00       	callq  4eb4 <_ZN6Parser8initSemsEv+0x6da>
    4eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4eb8:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4ebf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ec3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ec7:	48 89 c6             	mov    %rax,%rsi
    4eca:	48 89 cf             	mov    %rcx,%rdi
    4ecd:	e8 00 00 00 00       	callq  4ed2 <_ZN6Parser8initSemsEv+0x6f8>
    4ed2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ed6:	48 89 c7             	mov    %rax,%rdi
    4ed9:	e8 00 00 00 00       	callq  4ede <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("check_hw_connection", 	 0x18);
    4ede:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    4ee5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ee9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ef0 <_ZN6Parser8initSemsEv+0x716>
    4ef0:	48 89 c7             	mov    %rax,%rdi
    4ef3:	e8 00 00 00 00       	callq  4ef8 <_ZN6Parser8initSemsEv+0x71e>
    4ef8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4efc:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4f03:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4f07:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f0b:	48 89 c6             	mov    %rax,%rsi
    4f0e:	48 89 cf             	mov    %rcx,%rdi
    4f11:	e8 00 00 00 00       	callq  4f16 <_ZN6Parser8initSemsEv+0x73c>
    4f16:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f1a:	48 89 c7             	mov    %rax,%rdi
    4f1d:	e8 00 00 00 00       	callq  4f22 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("break",            0x19);
    4f22:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    4f29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f34 <_ZN6Parser8initSemsEv+0x75a>
    4f34:	48 89 c7             	mov    %rax,%rdi
    4f37:	e8 00 00 00 00       	callq  4f3c <_ZN6Parser8initSemsEv+0x762>
    4f3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4f40:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4f47:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4f4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f4f:	48 89 c6             	mov    %rax,%rsi
    4f52:	48 89 cf             	mov    %rcx,%rdi
    4f55:	e8 00 00 00 00       	callq  4f5a <_ZN6Parser8initSemsEv+0x780>
    4f5a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f5e:	48 89 c7             	mov    %rax,%rdi
    4f61:	e8 00 00 00 00       	callq  4f66 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("continue",         0x20);
    4f66:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    4f6d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f71:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f78 <_ZN6Parser8initSemsEv+0x79e>
    4f78:	48 89 c7             	mov    %rax,%rdi
    4f7b:	e8 00 00 00 00       	callq  4f80 <_ZN6Parser8initSemsEv+0x7a6>
    4f80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4f84:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4f8b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4f8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f93:	48 89 c6             	mov    %rax,%rsi
    4f96:	48 89 cf             	mov    %rcx,%rdi
    4f99:	e8 00 00 00 00       	callq  4f9e <_ZN6Parser8initSemsEv+0x7c4>
    4f9e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fa2:	48 89 c7             	mov    %rax,%rdi
    4fa5:	e8 00 00 00 00       	callq  4faa <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("transmitt",        0x21);
    4faa:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    4fb1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fb5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fbc <_ZN6Parser8initSemsEv+0x7e2>
    4fbc:	48 89 c7             	mov    %rax,%rdi
    4fbf:	e8 00 00 00 00       	callq  4fc4 <_ZN6Parser8initSemsEv+0x7ea>
    4fc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4fc8:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4fcf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4fd3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fd7:	48 89 c6             	mov    %rax,%rsi
    4fda:	48 89 cf             	mov    %rcx,%rdi
    4fdd:	e8 00 00 00 00       	callq  4fe2 <_ZN6Parser8initSemsEv+0x808>
    4fe2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fe6:	48 89 c7             	mov    %rax,%rdi
    4fe9:	e8 00 00 00 00       	callq  4fee <_ZN6Parser8initSemsEv+0x814>
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);
    4fee:	90                   	nop
    4fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ff3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4ffa:	00 00 
    4ffc:	0f 84 16 03 00 00    	je     5318 <_ZN6Parser8initSemsEv+0xb3e>
    5002:	e9 0c 03 00 00       	jmpq   5313 <_ZN6Parser8initSemsEv+0xb39>
    5007:	48 89 c3             	mov    %rax,%rbx

void Parser::init(){
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

    500a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    500e:	48 89 c7             	mov    %rax,%rdi
    5011:	e8 00 00 00 00       	callq  5016 <_ZN6Parser8initSemsEv+0x83c>
    5016:	48 89 d8             	mov    %rbx,%rax
    5019:	48 89 c7             	mov    %rax,%rdi
    501c:	e8 00 00 00 00       	callq  5021 <_ZN6Parser8initSemsEv+0x847>
    5021:	48 89 c3             	mov    %rax,%rbx
void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    5024:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5028:	48 89 c7             	mov    %rax,%rdi
    502b:	e8 00 00 00 00       	callq  5030 <_ZN6Parser8initSemsEv+0x856>
    5030:	48 89 d8             	mov    %rbx,%rax
    5033:	48 89 c7             	mov    %rax,%rdi
    5036:	e8 00 00 00 00       	callq  503b <_ZN6Parser8initSemsEv+0x861>
    503b:	48 89 c3             	mov    %rax,%rbx

    503e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5042:	48 89 c7             	mov    %rax,%rdi
    5045:	e8 00 00 00 00       	callq  504a <_ZN6Parser8initSemsEv+0x870>
    504a:	48 89 d8             	mov    %rbx,%rax
    504d:	48 89 c7             	mov    %rax,%rdi
    5050:	e8 00 00 00 00       	callq  5055 <_ZN6Parser8initSemsEv+0x87b>
    5055:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotl",             0x01);
    5058:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    505c:	48 89 c7             	mov    %rax,%rdi
    505f:	e8 00 00 00 00       	callq  5064 <_ZN6Parser8initSemsEv+0x88a>
    5064:	48 89 d8             	mov    %rbx,%rax
    5067:	48 89 c7             	mov    %rax,%rdi
    506a:	e8 00 00 00 00       	callq  506f <_ZN6Parser8initSemsEv+0x895>
    506f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    5072:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5076:	48 89 c7             	mov    %rax,%rdi
    5079:	e8 00 00 00 00       	callq  507e <_ZN6Parser8initSemsEv+0x8a4>
    507e:	48 89 d8             	mov    %rbx,%rax
    5081:	48 89 c7             	mov    %rax,%rdi
    5084:	e8 00 00 00 00       	callq  5089 <_ZN6Parser8initSemsEv+0x8af>
    5089:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    508c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5090:	48 89 c7             	mov    %rax,%rdi
    5093:	e8 00 00 00 00       	callq  5098 <_ZN6Parser8initSemsEv+0x8be>
    5098:	48 89 d8             	mov    %rbx,%rax
    509b:	48 89 c7             	mov    %rax,%rdi
    509e:	e8 00 00 00 00       	callq  50a3 <_ZN6Parser8initSemsEv+0x8c9>
    50a3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    50a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50aa:	48 89 c7             	mov    %rax,%rdi
    50ad:	e8 00 00 00 00       	callq  50b2 <_ZN6Parser8initSemsEv+0x8d8>
    50b2:	48 89 d8             	mov    %rbx,%rax
    50b5:	48 89 c7             	mov    %rax,%rdi
    50b8:	e8 00 00 00 00       	callq  50bd <_ZN6Parser8initSemsEv+0x8e3>
    50bd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    50c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50c4:	48 89 c7             	mov    %rax,%rdi
    50c7:	e8 00 00 00 00       	callq  50cc <_ZN6Parser8initSemsEv+0x8f2>
    50cc:	48 89 d8             	mov    %rbx,%rax
    50cf:	48 89 c7             	mov    %rax,%rdi
    50d2:	e8 00 00 00 00       	callq  50d7 <_ZN6Parser8initSemsEv+0x8fd>
    50d7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    50da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50de:	48 89 c7             	mov    %rax,%rdi
    50e1:	e8 00 00 00 00       	callq  50e6 <_ZN6Parser8initSemsEv+0x90c>
    50e6:	48 89 d8             	mov    %rbx,%rax
    50e9:	48 89 c7             	mov    %rax,%rdi
    50ec:	e8 00 00 00 00       	callq  50f1 <_ZN6Parser8initSemsEv+0x917>
    50f1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    50f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50f8:	48 89 c7             	mov    %rax,%rdi
    50fb:	e8 00 00 00 00       	callq  5100 <_ZN6Parser8initSemsEv+0x926>
    5100:	48 89 d8             	mov    %rbx,%rax
    5103:	48 89 c7             	mov    %rax,%rdi
    5106:	e8 00 00 00 00       	callq  510b <_ZN6Parser8initSemsEv+0x931>
    510b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    510e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5112:	48 89 c7             	mov    %rax,%rdi
    5115:	e8 00 00 00 00       	callq  511a <_ZN6Parser8initSemsEv+0x940>
    511a:	48 89 d8             	mov    %rbx,%rax
    511d:	48 89 c7             	mov    %rax,%rdi
    5120:	e8 00 00 00 00       	callq  5125 <_ZN6Parser8initSemsEv+0x94b>
    5125:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    5128:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    512c:	48 89 c7             	mov    %rax,%rdi
    512f:	e8 00 00 00 00       	callq  5134 <_ZN6Parser8initSemsEv+0x95a>
    5134:	48 89 d8             	mov    %rbx,%rax
    5137:	48 89 c7             	mov    %rax,%rdi
    513a:	e8 00 00 00 00       	callq  513f <_ZN6Parser8initSemsEv+0x965>
    513f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    5142:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5146:	48 89 c7             	mov    %rax,%rdi
    5149:	e8 00 00 00 00       	callq  514e <_ZN6Parser8initSemsEv+0x974>
    514e:	48 89 d8             	mov    %rbx,%rax
    5151:	48 89 c7             	mov    %rax,%rdi
    5154:	e8 00 00 00 00       	callq  5159 <_ZN6Parser8initSemsEv+0x97f>
    5159:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    515c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5160:	48 89 c7             	mov    %rax,%rdi
    5163:	e8 00 00 00 00       	callq  5168 <_ZN6Parser8initSemsEv+0x98e>
    5168:	48 89 d8             	mov    %rbx,%rax
    516b:	48 89 c7             	mov    %rax,%rdi
    516e:	e8 00 00 00 00       	callq  5173 <_ZN6Parser8initSemsEv+0x999>
    5173:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    5176:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    517a:	48 89 c7             	mov    %rax,%rdi
    517d:	e8 00 00 00 00       	callq  5182 <_ZN6Parser8initSemsEv+0x9a8>
    5182:	48 89 d8             	mov    %rbx,%rax
    5185:	48 89 c7             	mov    %rax,%rdi
    5188:	e8 00 00 00 00       	callq  518d <_ZN6Parser8initSemsEv+0x9b3>
    518d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    5190:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5194:	48 89 c7             	mov    %rax,%rdi
    5197:	e8 00 00 00 00       	callq  519c <_ZN6Parser8initSemsEv+0x9c2>
    519c:	48 89 d8             	mov    %rbx,%rax
    519f:	48 89 c7             	mov    %rax,%rdi
    51a2:	e8 00 00 00 00       	callq  51a7 <_ZN6Parser8initSemsEv+0x9cd>
    51a7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    51aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51ae:	48 89 c7             	mov    %rax,%rdi
    51b1:	e8 00 00 00 00       	callq  51b6 <_ZN6Parser8initSemsEv+0x9dc>
    51b6:	48 89 d8             	mov    %rbx,%rax
    51b9:	48 89 c7             	mov    %rax,%rdi
    51bc:	e8 00 00 00 00       	callq  51c1 <_ZN6Parser8initSemsEv+0x9e7>
    51c1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    51c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51c8:	48 89 c7             	mov    %rax,%rdi
    51cb:	e8 00 00 00 00       	callq  51d0 <_ZN6Parser8initSemsEv+0x9f6>
    51d0:	48 89 d8             	mov    %rbx,%rax
    51d3:	48 89 c7             	mov    %rax,%rdi
    51d6:	e8 00 00 00 00       	callq  51db <_ZN6Parser8initSemsEv+0xa01>
    51db:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    51de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51e2:	48 89 c7             	mov    %rax,%rdi
    51e5:	e8 00 00 00 00       	callq  51ea <_ZN6Parser8initSemsEv+0xa10>
    51ea:	48 89 d8             	mov    %rbx,%rax
    51ed:	48 89 c7             	mov    %rax,%rdi
    51f0:	e8 00 00 00 00       	callq  51f5 <_ZN6Parser8initSemsEv+0xa1b>
    51f5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    51f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51fc:	48 89 c7             	mov    %rax,%rdi
    51ff:	e8 00 00 00 00       	callq  5204 <_ZN6Parser8initSemsEv+0xa2a>
    5204:	48 89 d8             	mov    %rbx,%rax
    5207:	48 89 c7             	mov    %rax,%rdi
    520a:	e8 00 00 00 00       	callq  520f <_ZN6Parser8initSemsEv+0xa35>
    520f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    5212:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5216:	48 89 c7             	mov    %rax,%rdi
    5219:	e8 00 00 00 00       	callq  521e <_ZN6Parser8initSemsEv+0xa44>
    521e:	48 89 d8             	mov    %rbx,%rax
    5221:	48 89 c7             	mov    %rax,%rdi
    5224:	e8 00 00 00 00       	callq  5229 <_ZN6Parser8initSemsEv+0xa4f>
    5229:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    522c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5230:	48 89 c7             	mov    %rax,%rdi
    5233:	e8 00 00 00 00       	callq  5238 <_ZN6Parser8initSemsEv+0xa5e>
    5238:	48 89 d8             	mov    %rbx,%rax
    523b:	48 89 c7             	mov    %rax,%rdi
    523e:	e8 00 00 00 00       	callq  5243 <_ZN6Parser8initSemsEv+0xa69>
    5243:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    5246:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    524a:	48 89 c7             	mov    %rax,%rdi
    524d:	e8 00 00 00 00       	callq  5252 <_ZN6Parser8initSemsEv+0xa78>
    5252:	48 89 d8             	mov    %rbx,%rax
    5255:	48 89 c7             	mov    %rax,%rdi
    5258:	e8 00 00 00 00       	callq  525d <_ZN6Parser8initSemsEv+0xa83>
    525d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    5260:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5264:	48 89 c7             	mov    %rax,%rdi
    5267:	e8 00 00 00 00       	callq  526c <_ZN6Parser8initSemsEv+0xa92>
    526c:	48 89 d8             	mov    %rbx,%rax
    526f:	48 89 c7             	mov    %rax,%rdi
    5272:	e8 00 00 00 00       	callq  5277 <_ZN6Parser8initSemsEv+0xa9d>
    5277:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    527a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    527e:	48 89 c7             	mov    %rax,%rdi
    5281:	e8 00 00 00 00       	callq  5286 <_ZN6Parser8initSemsEv+0xaac>
    5286:	48 89 d8             	mov    %rbx,%rax
    5289:	48 89 c7             	mov    %rax,%rdi
    528c:	e8 00 00 00 00       	callq  5291 <_ZN6Parser8initSemsEv+0xab7>
    5291:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    5294:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5298:	48 89 c7             	mov    %rax,%rdi
    529b:	e8 00 00 00 00       	callq  52a0 <_ZN6Parser8initSemsEv+0xac6>
    52a0:	48 89 d8             	mov    %rbx,%rax
    52a3:	48 89 c7             	mov    %rax,%rdi
    52a6:	e8 00 00 00 00       	callq  52ab <_ZN6Parser8initSemsEv+0xad1>
    52ab:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    52ae:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52b2:	48 89 c7             	mov    %rax,%rdi
    52b5:	e8 00 00 00 00       	callq  52ba <_ZN6Parser8initSemsEv+0xae0>
    52ba:	48 89 d8             	mov    %rbx,%rax
    52bd:	48 89 c7             	mov    %rax,%rdi
    52c0:	e8 00 00 00 00       	callq  52c5 <_ZN6Parser8initSemsEv+0xaeb>
    52c5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    52c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52cc:	48 89 c7             	mov    %rax,%rdi
    52cf:	e8 00 00 00 00       	callq  52d4 <_ZN6Parser8initSemsEv+0xafa>
    52d4:	48 89 d8             	mov    %rbx,%rax
    52d7:	48 89 c7             	mov    %rax,%rdi
    52da:	e8 00 00 00 00       	callq  52df <_ZN6Parser8initSemsEv+0xb05>
    52df:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    52e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52e6:	48 89 c7             	mov    %rax,%rdi
    52e9:	e8 00 00 00 00       	callq  52ee <_ZN6Parser8initSemsEv+0xb14>
    52ee:	48 89 d8             	mov    %rbx,%rax
    52f1:	48 89 c7             	mov    %rax,%rdi
    52f4:	e8 00 00 00 00       	callq  52f9 <_ZN6Parser8initSemsEv+0xb1f>
    52f9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    52fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5300:	48 89 c7             	mov    %rax,%rdi
    5303:	e8 00 00 00 00       	callq  5308 <_ZN6Parser8initSemsEv+0xb2e>
    5308:	48 89 d8             	mov    %rbx,%rax
    530b:	48 89 c7             	mov    %rax,%rdi
    530e:	e8 00 00 00 00       	callq  5313 <_ZN6Parser8initSemsEv+0xb39>
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);
    5313:	e8 00 00 00 00       	callq  5318 <_ZN6Parser8initSemsEv+0xb3e>
    5318:	48 83 c4 38          	add    $0x38,%rsp
    531c:	5b                   	pop    %rbx
    531d:	5d                   	pop    %rbp
    531e:	c3                   	retq   
    531f:	90                   	nop

0000000000005320 <_ZN6Parser10testCase01Ev>:

}
    5320:	55                   	push   %rbp
    5321:	48 89 e5             	mov    %rsp,%rbp
    5324:	53                   	push   %rbx
    5325:	48 83 ec 48          	sub    $0x48,%rsp
    5329:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    532d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5334:	00 00 
    5336:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    533a:	31 c0                	xor    %eax,%eax

    533c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5340:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5347 <_ZN6Parser10testCase01Ev+0x27>
    5347:	48 89 c7             	mov    %rax,%rdi
    534a:	e8 00 00 00 00       	callq  534f <_ZN6Parser10testCase01Ev+0x2f>
void Parser::testCase01(){
    534f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5353:	48 89 c7             	mov    %rax,%rdi
    5356:	e8 00 00 00 00       	callq  535b <_ZN6Parser10testCase01Ev+0x3b>
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    535b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    535f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5363:	48 89 d6             	mov    %rdx,%rsi
    5366:	48 89 c7             	mov    %rax,%rdi
    5369:	e8 00 00 00 00       	callq  536e <_ZN6Parser10testCase01Ev+0x4e>
    536e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    5372:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    5376:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    537a:	48 89 ce             	mov    %rcx,%rsi
    537d:	48 89 c7             	mov    %rax,%rdi
    5380:	e8 00 00 00 00       	callq  5385 <_ZN6Parser10testCase01Ev+0x65>
    5385:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5389:	48 89 c7             	mov    %rax,%rdi
    538c:	e8 00 00 00 00       	callq  5391 <_ZN6Parser10testCase01Ev+0x71>
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    5391:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5395:	48 89 c7             	mov    %rax,%rdi
    5398:	e8 00 00 00 00       	callq  539d <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("transmitt",        0x21);
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);

}

    539d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    53a1:	48 89 c7             	mov    %rax,%rdi
    53a4:	e8 00 00 00 00       	callq  53a9 <_ZN6Parser10testCase01Ev+0x89>
void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    53a9:	90                   	nop
    53aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53ae:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    53b5:	00 00 
    53b7:	74 43                	je     53fc <_ZN6Parser10testCase01Ev+0xdc>
    53b9:	eb 3c                	jmp    53f7 <_ZN6Parser10testCase01Ev+0xd7>
    53bb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    53be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53c2:	48 89 c7             	mov    %rax,%rdi
    53c5:	e8 00 00 00 00       	callq  53ca <_ZN6Parser10testCase01Ev+0xaa>
    53ca:	eb 03                	jmp    53cf <_ZN6Parser10testCase01Ev+0xaf>
    53cc:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    53cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    53d3:	48 89 c7             	mov    %rax,%rdi
    53d6:	e8 00 00 00 00       	callq  53db <_ZN6Parser10testCase01Ev+0xbb>
    53db:	eb 03                	jmp    53e0 <_ZN6Parser10testCase01Ev+0xc0>
    53dd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
this->parserSems.insert("receive",          0x22);
this->parserSems.insert("debug_prnt",       0x23);

}

    53e0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    53e4:	48 89 c7             	mov    %rax,%rdi
    53e7:	e8 00 00 00 00       	callq  53ec <_ZN6Parser10testCase01Ev+0xcc>
    53ec:	48 89 d8             	mov    %rbx,%rax
    53ef:	48 89 c7             	mov    %rax,%rdi
    53f2:	e8 00 00 00 00       	callq  53f7 <_ZN6Parser10testCase01Ev+0xd7>
void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    53f7:	e8 00 00 00 00       	callq  53fc <_ZN6Parser10testCase01Ev+0xdc>
    53fc:	48 83 c4 48          	add    $0x48,%rsp
    5400:	5b                   	pop    %rbx
    5401:	5d                   	pop    %rbp
    5402:	c3                   	retq   
    5403:	90                   	nop

0000000000005404 <_ZN6Parser8HWStoHexEv>:
    splitStr(test, testResult);
}
    5404:	55                   	push   %rbp
    5405:	48 89 e5             	mov    %rsp,%rbp
    5408:	53                   	push   %rbx
    5409:	48 83 ec 48          	sub    $0x48,%rsp
    540d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    5411:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5418:	00 00 
    541a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    541e:	31 c0                	xor    %eax,%eax

void Parser::HWStoHex(){
    5420:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5424:	48 83 c0 50          	add    $0x50,%rax
    5428:	48 89 c7             	mov    %rax,%rdi
    542b:	e8 00 00 00 00       	callq  5430 <_ZN6Parser8HWStoHexEv+0x2c>

    5430:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5434:	48 05 90 00 00 00    	add    $0x90,%rax
    543a:	48 89 c7             	mov    %rax,%rdi
    543d:	e8 00 00 00 00       	callq  5442 <_ZN6Parser8HWStoHexEv+0x3e>
    5442:	89 45 cc             	mov    %eax,-0x34(%rbp)
    this->hwSequenceCompiledHex.clear();
    5445:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    int n = this->hwSequenceCompiled.size();
    544c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    5453:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5456:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    5459:	0f 8d 2f 01 00 00    	jge    558e <_ZN6Parser8HWStoHexEv+0x18a>
    int i = 0;
    545f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5463:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    546a:	8b 45 c8             	mov    -0x38(%rbp),%eax
    546d:	89 c6                	mov    %eax,%esi
    546f:	48 89 d7             	mov    %rdx,%rdi
    5472:	e8 00 00 00 00       	callq  5477 <_ZN6Parser8HWStoHexEv+0x73>
    5477:	88 45 c7             	mov    %al,-0x39(%rbp)
    for(i=0; i<n; i++){
    547a:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    547e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5482:	ba 10 00 00 00       	mov    $0x10,%edx
    5487:	89 ce                	mov    %ecx,%esi
    5489:	48 89 c7             	mov    %rax,%rdi
    548c:	e8 00 00 00 00       	callq  5491 <_ZN6Parser8HWStoHexEv+0x8d>
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    5491:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5494:	83 e0 03             	and    $0x3,%eax
    5497:	85 c0                	test   %eax,%eax
    5499:	75 17                	jne    54b2 <_ZN6Parser8HWStoHexEv+0xae>
    549b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    549f:	48 83 c0 50          	add    $0x50,%rax
    54a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54aa <_ZN6Parser8HWStoHexEv+0xa6>
    54aa:	48 89 c7             	mov    %rax,%rdi
    54ad:	e8 00 00 00 00       	callq  54b2 <_ZN6Parser8HWStoHexEv+0xae>

    54b2:	8b 45 c8             	mov    -0x38(%rbp),%eax
    54b5:	83 e0 07             	and    $0x7,%eax
    54b8:	85 c0                	test   %eax,%eax
    54ba:	75 17                	jne    54d3 <_ZN6Parser8HWStoHexEv+0xcf>
    54bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    54c0:	48 83 c0 50          	add    $0x50,%rax
    54c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54cb <_ZN6Parser8HWStoHexEv+0xc7>
    54cb:	48 89 c7             	mov    %rax,%rdi
    54ce:	e8 00 00 00 00       	callq  54d3 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    54d3:	8b 45 c8             	mov    -0x38(%rbp),%eax
    54d6:	83 e0 0f             	and    $0xf,%eax
    54d9:	85 c0                	test   %eax,%eax
    54db:	75 17                	jne    54f4 <_ZN6Parser8HWStoHexEv+0xf0>
    54dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    54e1:	48 83 c0 50          	add    $0x50,%rax
    54e5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54ec <_ZN6Parser8HWStoHexEv+0xe8>
    54ec:	48 89 c7             	mov    %rax,%rdi
    54ef:	e8 00 00 00 00       	callq  54f4 <_ZN6Parser8HWStoHexEv+0xf0>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    54f4:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    54f8:	77 17                	ja     5511 <_ZN6Parser8HWStoHexEv+0x10d>
    54fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    54fe:	48 83 c0 50          	add    $0x50,%rax
    5502:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5509 <_ZN6Parser8HWStoHexEv+0x105>
    5509:	48 89 c7             	mov    %rax,%rdi
    550c:	e8 00 00 00 00       	callq  5511 <_ZN6Parser8HWStoHexEv+0x10d>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    5511:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5515:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    5519:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5520 <_ZN6Parser8HWStoHexEv+0x11c>
    5520:	48 89 ce             	mov    %rcx,%rsi
    5523:	48 89 c7             	mov    %rax,%rdi
    5526:	e8 00 00 00 00       	callq  552b <_ZN6Parser8HWStoHexEv+0x127>
    552b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    552f:	48 8d 50 50          	lea    0x50(%rax),%rdx
    5533:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5537:	48 89 c6             	mov    %rax,%rsi
    553a:	48 89 d7             	mov    %rdx,%rdi
    553d:	e8 00 00 00 00       	callq  5542 <_ZN6Parser8HWStoHexEv+0x13e>
    5542:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5546:	48 89 c7             	mov    %rax,%rdi
    5549:	e8 00 00 00 00       	callq  554e <_ZN6Parser8HWStoHexEv+0x14a>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    554e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5552:	48 89 c7             	mov    %rax,%rdi
    5555:	e8 00 00 00 00       	callq  555a <_ZN6Parser8HWStoHexEv+0x156>
}

void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    555a:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    555e:	e9 f0 fe ff ff       	jmpq   5453 <_ZN6Parser8HWStoHexEv+0x4f>
    5563:	48 89 c3             	mov    %rax,%rbx
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    5566:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    556a:	48 89 c7             	mov    %rax,%rdi
    556d:	e8 00 00 00 00       	callq  5572 <_ZN6Parser8HWStoHexEv+0x16e>
    5572:	eb 03                	jmp    5577 <_ZN6Parser8HWStoHexEv+0x173>
    5574:	48 89 c3             	mov    %rax,%rbx
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    5577:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    557b:	48 89 c7             	mov    %rax,%rdi
    557e:	e8 00 00 00 00       	callq  5583 <_ZN6Parser8HWStoHexEv+0x17f>
    5583:	48 89 d8             	mov    %rbx,%rax
    5586:	48 89 c7             	mov    %rax,%rdi
    5589:	e8 00 00 00 00       	callq  558e <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    558e:	90                   	nop
    558f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5593:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    559a:	00 00 
    559c:	74 05                	je     55a3 <_ZN6Parser8HWStoHexEv+0x19f>
    559e:	e8 00 00 00 00       	callq  55a3 <_ZN6Parser8HWStoHexEv+0x19f>
    55a3:	48 83 c4 48          	add    $0x48,%rsp
    55a7:	5b                   	pop    %rbx
    55a8:	5d                   	pop    %rbp
    55a9:	c3                   	retq   

00000000000055aa <_ZN6Parser10compileHWSEv>:
    }
}
    55aa:	55                   	push   %rbp
    55ab:	48 89 e5             	mov    %rsp,%rbp
    55ae:	53                   	push   %rbx
    55af:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    55b6:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    55bd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    55c4:	00 00 
    55c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    55ca:	31 c0                	xor    %eax,%eax

    55cc:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    55d3:	48 89 c7             	mov    %rax,%rdi
    55d6:	e8 00 00 00 00       	callq  55db <_ZN6Parser10compileHWSEv+0x31>
void Parser::compileHWS(){
    55db:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    55e2:	48 89 c7             	mov    %rax,%rdi
    55e5:	e8 00 00 00 00       	callq  55ea <_ZN6Parser10compileHWSEv+0x40>
    QHash<QString, QStringList>::iterator it;
    55ea:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    55f1:	48 89 c7             	mov    %rax,%rdi
    55f4:	e8 00 00 00 00       	callq  55f9 <_ZN6Parser10compileHWSEv+0x4f>
    QStringList content;
    QString     hwSequenceID;

    55f9:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    //byte-code
    5600:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)
    char blockCounter = 0xFF;
    char HWS_OPCODE  = 0x06;

    5607:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    560e:	00 00 

    quint16 CRC16       = 0; // не обнуляется в цикле.
    5610:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5617:	48 89 c7             	mov    %rax,%rdi
    561a:	e8 00 00 00 00       	callq  561f <_ZN6Parser10compileHWSEv+0x75>

    QStringList hwsModules;
    561f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5626:	48 05 88 00 00 00    	add    $0x88,%rax
    562c:	48 89 c7             	mov    %rax,%rdi
    562f:	e8 00 00 00 00       	callq  5634 <_ZN6Parser10compileHWSEv+0x8a>
    5634:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    563b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5642:	48 05 88 00 00 00    	add    $0x88,%rax
    5648:	48 89 c7             	mov    %rax,%rdi
    564b:	e8 00 00 00 00       	callq  5650 <_ZN6Parser10compileHWSEv+0xa6>
    5650:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    5657:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    565e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5665:	48 89 d6             	mov    %rdx,%rsi
    5668:	48 89 c7             	mov    %rax,%rdi
    566b:	e8 00 00 00 00       	callq  5670 <_ZN6Parser10compileHWSEv+0xc6>
    5670:	84 c0                	test   %al,%al
    5672:	0f 84 e6 07 00 00    	je     5e5e <_ZN6Parser10compileHWSEv+0x8b4>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    5678:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    567f:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5686:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    568d:	89 c6                	mov    %eax,%esi
    568f:	48 89 d7             	mov    %rdx,%rdi
    5692:	e8 00 00 00 00       	callq  5697 <_ZN6Parser10compileHWSEv+0xed>

    5697:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    569e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    56a5:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    56ac:	89 c6                	mov    %eax,%esi
    56ae:	48 89 d7             	mov    %rdx,%rdi
    56b1:	e8 00 00 00 00       	callq  56b6 <_ZN6Parser10compileHWSEv+0x10c>
        this->hwSequenceCompiled.append(blockCounter);
        this->hwSequenceCompiled.append(HWS_OPCODE);
    56b6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    56bd:	48 89 c7             	mov    %rax,%rdi
    56c0:	e8 00 00 00 00       	callq  56c5 <_ZN6Parser10compileHWSEv+0x11b>
    56c5:	48 89 c2             	mov    %rax,%rdx
    56c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    56cf:	48 89 d6             	mov    %rdx,%rsi
    56d2:	48 89 c7             	mov    %rax,%rdi
    56d5:	e8 00 00 00 00       	callq  56da <_ZN6Parser10compileHWSEv+0x130>

    56da:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    56e1:	48 89 c7             	mov    %rax,%rdi
    56e4:	e8 00 00 00 00       	callq  56e9 <_ZN6Parser10compileHWSEv+0x13f>
    56e9:	48 89 c2             	mov    %rax,%rdx
    56ec:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    56f3:	48 89 d6             	mov    %rdx,%rsi
    56f6:	48 89 c7             	mov    %rax,%rdi
    56f9:	e8 00 00 00 00       	callq  56fe <_ZN6Parser10compileHWSEv+0x154>
        content         = it.value();
    56fe:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    5705:	00 00 
        hwSequenceID    = it.key();
        quint16 counter     = 0;
    5707:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    570e:	48 8d 48 28          	lea    0x28(%rax),%rcx
    5712:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5719:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5720:	48 89 ce             	mov    %rcx,%rsi
    5723:	48 89 c7             	mov    %rax,%rdi
    5726:	e8 00 00 00 00       	callq  572b <_ZN6Parser10compileHWSEv+0x181>
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    572b:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    5732:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5739:	ba 10 00 00 00       	mov    $0x10,%edx
    573e:	48 89 ce             	mov    %rcx,%rsi
    5741:	48 89 c7             	mov    %rax,%rdi
    5744:	e8 00 00 00 00       	callq  5749 <_ZN6Parser10compileHWSEv+0x19f>
    5749:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)


        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..
    5750:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    5757:	0f be c0             	movsbl %al,%eax
    575a:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5761:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5768:	89 c6                	mov    %eax,%esi
    576a:	48 89 d7             	mov    %rdx,%rdi
    576d:	e8 00 00 00 00       	callq  5772 <_ZN6Parser10compileHWSEv+0x1c8>

    5772:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    5779:	66 c1 e8 08          	shr    $0x8,%ax
    577d:	0f be c0             	movsbl %al,%eax
    5780:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5787:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    578e:	89 c6                	mov    %eax,%esi
    5790:	48 89 d7             	mov    %rdx,%rdi
    5793:	e8 00 00 00 00       	callq  5798 <_ZN6Parser10compileHWSEv+0x1ee>
        this->hwSequenceCompiled.append(HWSID%256);
        this->hwSequenceCompiled.append(HWSID/256);
    5798:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    579f:	48 05 90 00 00 00    	add    $0x90,%rax
    57a5:	48 89 c7             	mov    %rax,%rdi
    57a8:	e8 00 00 00 00       	callq  57ad <_ZN6Parser10compileHWSEv+0x203>
    57ad:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)

    57b3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    57ba:	48 05 90 00 00 00    	add    $0x90,%rax
    57c0:	48 89 c7             	mov    %rax,%rdi
    57c3:	e8 00 00 00 00       	callq  57c8 <_ZN6Parser10compileHWSEv+0x21e>
    57c8:	83 c0 02             	add    $0x2,%eax
    57cb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)
        int addrTotal = this->hwSequenceCompiled.size();
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    57d1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    57d8:	48 05 90 00 00 00    	add    $0x90,%rax
    57de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 57e5 <_ZN6Parser10compileHWSEv+0x23b>
    57e5:	48 89 c7             	mov    %rax,%rdi
    57e8:	e8 00 00 00 00       	callq  57ed <_ZN6Parser10compileHWSEv+0x243>

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

    57ed:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    57f4:	48 89 c7             	mov    %rax,%rdi
    57f7:	e8 00 00 00 00       	callq  57fc <_ZN6Parser10compileHWSEv+0x252>
    57fc:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)
        int i;
        int n = content.size();
    5802:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5806:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 580d <_ZN6Parser10compileHWSEv+0x263>
    580d:	48 89 c7             	mov    %rax,%rdi
    5810:	e8 00 00 00 00       	callq  5815 <_ZN6Parser10compileHWSEv+0x26b>
    5815:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    5819:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5820:	b9 00 00 00 00       	mov    $0x0,%ecx
    5825:	ba 01 00 00 00       	mov    $0x1,%edx
    582a:	48 89 c7             	mov    %rax,%rdi
    582d:	e8 00 00 00 00       	callq  5832 <_ZN6Parser10compileHWSEv+0x288>
    5832:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5836:	48 89 c7             	mov    %rax,%rdi
    5839:	e8 00 00 00 00       	callq  583e <_ZN6Parser10compileHWSEv+0x294>

    583e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5842:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5849 <_ZN6Parser10compileHWSEv+0x29f>
    5849:	48 89 c7             	mov    %rax,%rdi
    584c:	e8 00 00 00 00       	callq  5851 <_ZN6Parser10compileHWSEv+0x2a7>
    5851:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    5855:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    585c:	b9 00 00 00 00       	mov    $0x0,%ecx
    5861:	ba 01 00 00 00       	mov    $0x1,%edx
    5866:	48 89 c7             	mov    %rax,%rdi
    5869:	e8 00 00 00 00       	callq  586e <_ZN6Parser10compileHWSEv+0x2c4>
    586e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5872:	48 89 c7             	mov    %rax,%rdi
    5875:	e8 00 00 00 00       	callq  587a <_ZN6Parser10compileHWSEv+0x2d0>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    587a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5881:	48 89 c7             	mov    %rax,%rdi
    5884:	e8 00 00 00 00       	callq  5889 <_ZN6Parser10compileHWSEv+0x2df>

        QString line;
    5889:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    5890:	00 00 00 
    5893:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    5899:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    589f:	0f 8d 65 04 00 00    	jge    5d0a <_ZN6Parser10compileHWSEv+0x760>

    58a5:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    58ab:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    58b2:	89 d6                	mov    %edx,%esi
    58b4:	48 89 c7             	mov    %rax,%rdi
    58b7:	e8 00 00 00 00       	callq  58bc <_ZN6Parser10compileHWSEv+0x312>
    58bc:	48 89 c2             	mov    %rax,%rdx
    58bf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    58c6:	48 89 d6             	mov    %rdx,%rsi
    58c9:	48 89 c7             	mov    %rax,%rdi
    58cc:	e8 00 00 00 00       	callq  58d1 <_ZN6Parser10compileHWSEv+0x327>
        for(i=0;i<n;i++){
    58d1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    58d8:	48 8d 50 68          	lea    0x68(%rax),%rdx
    58dc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    58e3:	48 89 c6             	mov    %rax,%rsi
    58e6:	48 89 d7             	mov    %rdx,%rdi
    58e9:	e8 00 00 00 00       	callq  58ee <_ZN6Parser10compileHWSEv+0x344>
            line = content.at(i);
    58ee:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    58f5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    58fc:	b9 00 00 00 00       	mov    $0x0,%ecx
    5901:	ba 00 00 00 00       	mov    $0x0,%edx
    5906:	48 89 c7             	mov    %rax,%rdi
    5909:	e8 00 00 00 00       	callq  590e <_ZN6Parser10compileHWSEv+0x364>
    590e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            this->strings.append(line); // DEL!
    5914:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    591b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5922:	b9 00 00 00 00       	mov    $0x0,%ecx
    5927:	ba 00 00 00 00       	mov    $0x0,%edx
    592c:	48 89 c7             	mov    %rax,%rdi
    592f:	e8 00 00 00 00       	callq  5934 <_ZN6Parser10compileHWSEv+0x38a>
    5934:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            int a = QRAnchor.indexIn(line);
    593a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    593e:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    5945:	48 89 d6             	mov    %rdx,%rsi
    5948:	48 89 c7             	mov    %rax,%rdi
    594b:	e8 00 00 00 00       	callq  5950 <_ZN6Parser10compileHWSEv+0x3a6>
            int d = QRDefinition.indexIn(line);
    5950:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5954:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    595b:	48 89 d6             	mov    %rdx,%rsi
    595e:	48 89 c7             	mov    %rax,%rdi
    5961:	e8 00 00 00 00       	callq  5966 <_ZN6Parser10compileHWSEv+0x3bc>
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    5966:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    596d:	0f 8e 3e 01 00 00    	jle    5ab1 <_ZN6Parser10compileHWSEv+0x507>

            if(a>0){
                //CRC16++;
                bool anchor_detected;
    5973:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    597a:	83 c0 01             	add    $0x1,%eax
    597d:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)

    5984:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5988:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 598f <_ZN6Parser10compileHWSEv+0x3e5>
    598f:	48 89 c7             	mov    %rax,%rdi
    5992:	e8 00 00 00 00       	callq  5997 <_ZN6Parser10compileHWSEv+0x3ed>
    5997:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    599e:	48 8d 50 68          	lea    0x68(%rax),%rdx
    59a2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    59a6:	48 89 c6             	mov    %rax,%rsi
    59a9:	48 89 d7             	mov    %rdx,%rdi
    59ac:	e8 00 00 00 00       	callq  59b1 <_ZN6Parser10compileHWSEv+0x407>
    59b1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 00 00 00 00       	callq  59bd <_ZN6Parser10compileHWSEv+0x413>
                counter++;
    59bd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59c1:	be 01 00 00 00       	mov    $0x1,%esi
    59c6:	48 89 c7             	mov    %rax,%rdi
    59c9:	e8 00 00 00 00       	callq  59ce <_ZN6Parser10compileHWSEv+0x424>
    59ce:	48 89 c2             	mov    %rax,%rdx
    59d1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59d5:	48 89 d6             	mov    %rdx,%rsi
    59d8:	48 89 c7             	mov    %rax,%rdi
    59db:	e8 00 00 00 00       	callq  59e0 <_ZN6Parser10compileHWSEv+0x436>
                this->strings.append("anchor");
    59e0:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    59e7:	48 8d 48 28          	lea    0x28(%rax),%rcx
    59eb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    59ef:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    59f3:	48 89 ce             	mov    %rcx,%rsi
    59f6:	48 89 c7             	mov    %rax,%rdi
    59f9:	e8 00 00 00 00       	callq  59fe <_ZN6Parser10compileHWSEv+0x454>
    59fe:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    5a02:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a06:	ba 10 00 00 00       	mov    $0x10,%edx
    5a0b:	48 89 ce             	mov    %rcx,%rsi
    5a0e:	48 89 c7             	mov    %rax,%rdi
    5a11:	e8 00 00 00 00       	callq  5a16 <_ZN6Parser10compileHWSEv+0x46c>
    5a16:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    5a1d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a21:	48 89 c7             	mov    %rax,%rdi
    5a24:	e8 00 00 00 00       	callq  5a29 <_ZN6Parser10compileHWSEv+0x47f>
                QString anchor = anchors.at(1);
    5a29:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5a30:	48 05 90 00 00 00    	add    $0x90,%rax
    5a36:	be ff ff ff ff       	mov    $0xffffffff,%esi
    5a3b:	48 89 c7             	mov    %rax,%rdi
    5a3e:	e8 00 00 00 00       	callq  5a43 <_ZN6Parser10compileHWSEv+0x499>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    5a43:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5a4a:	48 05 90 00 00 00    	add    $0x90,%rax
    5a50:	be ff ff ff ff       	mov    $0xffffffff,%esi
    5a55:	48 89 c7             	mov    %rax,%rdi
    5a58:	e8 00 00 00 00       	callq  5a5d <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(255);
    5a5d:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    5a64:	0f be c0             	movsbl %al,%eax
    5a67:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5a6e:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5a75:	89 c6                	mov    %eax,%esi
    5a77:	48 89 d7             	mov    %rdx,%rdi
    5a7a:	e8 00 00 00 00       	callq  5a7f <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(255);
    5a7f:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    5a86:	66 c1 e8 08          	shr    $0x8,%ax
    5a8a:	0f be c0             	movsbl %al,%eax
    5a8d:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5a94:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5a9b:	89 c6                	mov    %eax,%esi
    5a9d:	48 89 d7             	mov    %rdx,%rdi
    5aa0:	e8 00 00 00 00       	callq  5aa5 <_ZN6Parser10compileHWSEv+0x4fb>

            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
    5aa5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5aa9:	48 89 c7             	mov    %rax,%rdi
    5aac:	e8 00 00 00 00       	callq  5ab1 <_ZN6Parser10compileHWSEv+0x507>
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
    5ab1:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    5ab8:	0f 8e 28 02 00 00    	jle    5ce6 <_ZN6Parser10compileHWSEv+0x73c>
            }
    5abe:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    5ac5:	83 c0 01             	add    $0x1,%eax
    5ac8:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
            if(d>0){
    5acf:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    5ad6:	83 c0 01             	add    $0x1,%eax
    5ad9:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                CRC16++;
    5ae0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5ae4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5aeb <_ZN6Parser10compileHWSEv+0x541>
    5aeb:	48 89 c7             	mov    %rax,%rdi
    5aee:	e8 00 00 00 00       	callq  5af3 <_ZN6Parser10compileHWSEv+0x549>
    5af3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5afa:	48 8d 50 68          	lea    0x68(%rax),%rdx
    5afe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5b02:	48 89 c6             	mov    %rax,%rsi
    5b05:	48 89 d7             	mov    %rdx,%rdi
    5b08:	e8 00 00 00 00       	callq  5b0d <_ZN6Parser10compileHWSEv+0x563>
    5b0d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5b11:	48 89 c7             	mov    %rax,%rdi
    5b14:	e8 00 00 00 00       	callq  5b19 <_ZN6Parser10compileHWSEv+0x56f>
                counter++;
    5b19:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5b1d:	be 01 00 00 00       	mov    $0x1,%esi
    5b22:	48 89 c7             	mov    %rax,%rdi
    5b25:	e8 00 00 00 00       	callq  5b2a <_ZN6Parser10compileHWSEv+0x580>
    5b2a:	48 89 c2             	mov    %rax,%rdx
    5b2d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5b31:	48 89 d6             	mov    %rdx,%rsi
    5b34:	48 89 c7             	mov    %rax,%rdi
    5b37:	e8 00 00 00 00       	callq  5b3c <_ZN6Parser10compileHWSEv+0x592>
                this->strings.append("definition");
    5b3c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5b40:	be 02 00 00 00       	mov    $0x2,%esi
    5b45:	48 89 c7             	mov    %rax,%rdi
    5b48:	e8 00 00 00 00       	callq  5b4d <_ZN6Parser10compileHWSEv+0x5a3>
    5b4d:	48 89 c2             	mov    %rax,%rdx
    5b50:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5b54:	48 89 d6             	mov    %rdx,%rsi
    5b57:	48 89 c7             	mov    %rax,%rdi
    5b5a:	e8 00 00 00 00       	callq  5b5f <_ZN6Parser10compileHWSEv+0x5b5>
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;
    5b5f:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)

    5b66:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5b6d:	48 8d 48 28          	lea    0x28(%rax),%rcx
    5b71:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5b75:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5b79:	48 89 ce             	mov    %rcx,%rsi
    5b7c:	48 89 c7             	mov    %rax,%rdi
    5b7f:	e8 00 00 00 00       	callq  5b84 <_ZN6Parser10compileHWSEv+0x5da>
    5b84:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    5b88:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5b8c:	ba 10 00 00 00       	mov    $0x10,%edx
    5b91:	48 89 ce             	mov    %rcx,%rsi
    5b94:	48 89 c7             	mov    %rax,%rdi
    5b97:	e8 00 00 00 00       	callq  5b9c <_ZN6Parser10compileHWSEv+0x5f2>
    5b9c:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    5ba2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5ba6:	48 89 c7             	mov    %rax,%rdi
    5ba9:	e8 00 00 00 00       	callq  5bae <_ZN6Parser10compileHWSEv+0x604>
                quint8 moduleHWID       = 0;
    5bae:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    5bb2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5bb6:	ba 0a 00 00 00       	mov    $0xa,%edx
    5bbb:	48 89 ce             	mov    %rcx,%rsi
    5bbe:	48 89 c7             	mov    %rax,%rdi
    5bc1:	e8 00 00 00 00       	callq  5bc6 <_ZN6Parser10compileHWSEv+0x61c>
    5bc6:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    5bcd:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    5bd1:	84 c0                	test   %al,%al
    5bd3:	74 6d                	je     5c42 <_ZN6Parser10compileHWSEv+0x698>

                if(module_detected){
    5bd5:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    5bd9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5be0:	ba 00 00 00 00       	mov    $0x0,%edx
    5be5:	48 89 ce             	mov    %rcx,%rsi
    5be8:	48 89 c7             	mov    %rax,%rdi
    5beb:	e8 00 00 00 00       	callq  5bf0 <_ZN6Parser10compileHWSEv+0x646>
    5bf0:	83 f0 01             	xor    $0x1,%eax
    5bf3:	84 c0                	test   %al,%al
    5bf5:	74 2a                	je     5c21 <_ZN6Parser10compileHWSEv+0x677>
                    // check, is this module in list. If not, append it, else take it number;
    5bf7:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5bfb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5c02:	48 89 d6             	mov    %rdx,%rsi
    5c05:	48 89 c7             	mov    %rax,%rdi
    5c08:	e8 00 00 00 00       	callq  5c0d <_ZN6Parser10compileHWSEv+0x663>
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    5c0d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5c14:	48 89 c7             	mov    %rax,%rdi
    5c17:	e8 00 00 00 00       	callq  5c1c <_ZN6Parser10compileHWSEv+0x672>
    5c1c:	3d fe 00 00 00       	cmp    $0xfe,%eax
                        hwsModules.append(strModuleID);
                        if(hwsModules.size()>254){
                            // error. Overflow!
                        }
    5c21:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    5c25:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5c2c:	ba 00 00 00 00       	mov    $0x0,%edx
    5c31:	48 89 ce             	mov    %rcx,%rsi
    5c34:	48 89 c7             	mov    %rax,%rdi
    5c37:	e8 00 00 00 00       	callq  5c3c <_ZN6Parser10compileHWSEv+0x692>
    5c3c:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    5c42:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    5c49:	0f be c0             	movsbl %al,%eax
    5c4c:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5c53:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5c5a:	89 c6                	mov    %eax,%esi
    5c5c:	48 89 d7             	mov    %rdx,%rdi
    5c5f:	e8 00 00 00 00       	callq  5c64 <_ZN6Parser10compileHWSEv+0x6ba>
                }
    5c64:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    5c6b:	0f be c0             	movsbl %al,%eax
    5c6e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5c75:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5c7c:	89 c6                	mov    %eax,%esi
    5c7e:	48 89 d7             	mov    %rdx,%rdi
    5c81:	e8 00 00 00 00       	callq  5c86 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(moduleHWID);
    5c86:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    5c8d:	0f be c0             	movsbl %al,%eax
    5c90:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5c97:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5c9e:	89 c6                	mov    %eax,%esi
    5ca0:	48 89 d7             	mov    %rdx,%rdi
    5ca3:	e8 00 00 00 00       	callq  5ca8 <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(moduleID);
    5ca8:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    5caf:	66 c1 e8 08          	shr    $0x8,%ax
    5cb3:	0f be c0             	movsbl %al,%eax
    5cb6:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5cbd:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5cc4:	89 c6                	mov    %eax,%esi
    5cc6:	48 89 d7             	mov    %rdx,%rdi
    5cc9:	e8 00 00 00 00       	callq  5cce <_ZN6Parser10compileHWSEv+0x724>
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    5cce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5cd2:	48 89 c7             	mov    %rax,%rdi
    5cd5:	e8 00 00 00 00       	callq  5cda <_ZN6Parser10compileHWSEv+0x730>
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
    5cda:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5cde:	48 89 c7             	mov    %rax,%rdi
    5ce1:	e8 00 00 00 00       	callq  5ce6 <_ZN6Parser10compileHWSEv+0x73c>

        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
    5ce6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5cea:	48 89 c7             	mov    %rax,%rdi
    5ced:	e8 00 00 00 00       	callq  5cf2 <_ZN6Parser10compileHWSEv+0x748>
        QString line;

        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
    5cf2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5cf6:	48 89 c7             	mov    %rax,%rdi
    5cf9:	e8 00 00 00 00       	callq  5cfe <_ZN6Parser10compileHWSEv+0x754>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    5cfe:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    5d05:	e9 89 fb ff ff       	jmpq   5893 <_ZN6Parser10compileHWSEv+0x2e9>
                }
                this->hwSequenceCompiled.append(moduleHWID);
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
    5d0a:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    5d11:	0f be d8             	movsbl %al,%ebx
    5d14:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5d1b:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    5d22:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    5d28:	89 c6                	mov    %eax,%esi
    5d2a:	48 89 d7             	mov    %rdx,%rdi
    5d2d:	e8 00 00 00 00       	callq  5d32 <_ZN6Parser10compileHWSEv+0x788>
    5d32:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5d36:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5d3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5d3e:	89 de                	mov    %ebx,%esi
    5d40:	48 89 c7             	mov    %rax,%rdi
    5d43:	e8 00 00 00 00       	callq  5d48 <_ZN6Parser10compileHWSEv+0x79e>
        }
    5d48:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    5d4f:	66 c1 e8 08          	shr    $0x8,%ax
    5d53:	0f be d8             	movsbl %al,%ebx
    5d56:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    5d5c:	8d 50 01             	lea    0x1(%rax),%edx
    5d5f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5d66:	48 05 90 00 00 00    	add    $0x90,%rax
    5d6c:	89 d6                	mov    %edx,%esi
    5d6e:	48 89 c7             	mov    %rax,%rdi
    5d71:	e8 00 00 00 00       	callq  5d76 <_ZN6Parser10compileHWSEv+0x7cc>
    5d76:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5d7a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5d7e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5d82:	89 de                	mov    %ebx,%esi
    5d84:	48 89 c7             	mov    %rax,%rdi
    5d87:	e8 00 00 00 00       	callq  5d8c <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    5d8c:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    5d93:	0f be d8             	movsbl %al,%ebx
    5d96:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5d9d:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    5da4:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    5daa:	89 c6                	mov    %eax,%esi
    5dac:	48 89 d7             	mov    %rdx,%rdi
    5daf:	e8 00 00 00 00       	callq  5db4 <_ZN6Parser10compileHWSEv+0x80a>
    5db4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5db8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5dbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5dc0:	89 de                	mov    %ebx,%esi
    5dc2:	48 89 c7             	mov    %rax,%rdi
    5dc5:	e8 00 00 00 00       	callq  5dca <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    5dca:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    5dd1:	66 c1 e8 08          	shr    $0x8,%ax
    5dd5:	0f be d8             	movsbl %al,%ebx
    5dd8:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    5dde:	8d 50 01             	lea    0x1(%rax),%edx
    5de1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5de8:	48 05 90 00 00 00    	add    $0x90,%rax
    5dee:	89 d6                	mov    %edx,%esi
    5df0:	48 89 c7             	mov    %rax,%rdi
    5df3:	e8 00 00 00 00       	callq  5df8 <_ZN6Parser10compileHWSEv+0x84e>
    5df8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5dfc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5e00:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5e04:	89 de                	mov    %ebx,%esi
    5e06:	48 89 c7             	mov    %rax,%rdi
    5e09:	e8 00 00 00 00       	callq  5e0e <_ZN6Parser10compileHWSEv+0x864>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    5e0e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5e15:	48 89 c7             	mov    %rax,%rdi
    5e18:	e8 00 00 00 00       	callq  5e1d <_ZN6Parser10compileHWSEv+0x873>

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

    5e1d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5e24:	48 89 c7             	mov    %rax,%rdi
    5e27:	e8 00 00 00 00       	callq  5e2c <_ZN6Parser10compileHWSEv+0x882>
        int addrLocal = this->hwSequenceCompiled.size() + 2;

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();
    5e2c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5e33:	48 89 c7             	mov    %rax,%rdi
    5e36:	e8 00 00 00 00       	callq  5e3b <_ZN6Parser10compileHWSEv+0x891>
        this->hwSequenceCompiled.append(blockCounter);
        this->hwSequenceCompiled.append(HWS_OPCODE);

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
    5e3b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5e42:	48 89 c7             	mov    %rax,%rdi
    5e45:	e8 00 00 00 00       	callq  5e4a <_ZN6Parser10compileHWSEv+0x8a0>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    5e4a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5e51:	48 89 c7             	mov    %rax,%rdi
    5e54:	e8 00 00 00 00       	callq  5e59 <_ZN6Parser10compileHWSEv+0x8af>
    5e59:	e9 dd f7 ff ff       	jmpq   563b <_ZN6Parser10compileHWSEv+0x91>
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    5e5e:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    5e65:	0f be d8             	movsbl %al,%ebx
    5e68:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5e6f:	48 05 90 00 00 00    	add    $0x90,%rax
    5e75:	be 04 00 00 00       	mov    $0x4,%esi
    5e7a:	48 89 c7             	mov    %rax,%rdi
    5e7d:	e8 00 00 00 00       	callq  5e82 <_ZN6Parser10compileHWSEv+0x8d8>
    5e82:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5e86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5e8a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5e8e:	89 de                	mov    %ebx,%esi
    5e90:	48 89 c7             	mov    %rax,%rdi
    5e93:	e8 00 00 00 00       	callq  5e98 <_ZN6Parser10compileHWSEv+0x8ee>
    }
    5e98:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    5e9f:	66 c1 e8 08          	shr    $0x8,%ax
    5ea3:	0f be d8             	movsbl %al,%ebx
    5ea6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5ead:	48 05 90 00 00 00    	add    $0x90,%rax
    5eb3:	be 05 00 00 00       	mov    $0x5,%esi
    5eb8:	48 89 c7             	mov    %rax,%rdi
    5ebb:	e8 00 00 00 00       	callq  5ec0 <_ZN6Parser10compileHWSEv+0x916>
    5ec0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5ec4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5ec8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5ecc:	89 de                	mov    %ebx,%esi
    5ece:	48 89 c7             	mov    %rax,%rdi
    5ed1:	e8 00 00 00 00       	callq  5ed6 <_ZN6Parser10compileHWSEv+0x92c>
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;
    5ed6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5edd:	48 89 c7             	mov    %rax,%rdi
    5ee0:	e8 00 00 00 00       	callq  5ee5 <_ZN6Parser10compileHWSEv+0x93b>
    //byte-code
    char blockCounter = 0xFF;
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.
    5ee5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5eec:	48 89 c7             	mov    %rax,%rdi
    5eef:	e8 00 00 00 00       	callq  5ef4 <_ZN6Parser10compileHWSEv+0x94a>

    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    5ef4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5efb:	48 89 c7             	mov    %rax,%rdi
    5efe:	e8 00 00 00 00       	callq  5f03 <_ZN6Parser10compileHWSEv+0x959>
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}

void Parser::compileHWS(){
    5f03:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5f0a:	48 89 c7             	mov    %rax,%rdi
    5f0d:	e8 00 00 00 00       	callq  5f12 <_ZN6Parser10compileHWSEv+0x968>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    5f12:	90                   	nop
    5f13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5f17:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5f1e:	00 00 
    5f20:	0f 84 8e 01 00 00    	je     60b4 <_ZN6Parser10compileHWSEv+0xb0a>
    5f26:	e9 84 01 00 00       	jmpq   60af <_ZN6Parser10compileHWSEv+0xb05>
    5f2b:	48 89 c3             	mov    %rax,%rbx
    5f2e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5f32:	48 89 c7             	mov    %rax,%rdi
    5f35:	e8 00 00 00 00       	callq  5f3a <_ZN6Parser10compileHWSEv+0x990>
    5f3a:	e9 1a 01 00 00       	jmpq   6059 <_ZN6Parser10compileHWSEv+0xaaf>
    5f3f:	48 89 c3             	mov    %rax,%rbx
    5f42:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5f49:	48 89 c7             	mov    %rax,%rdi
    5f4c:	e8 00 00 00 00       	callq  5f51 <_ZN6Parser10compileHWSEv+0x9a7>
    5f51:	e9 03 01 00 00       	jmpq   6059 <_ZN6Parser10compileHWSEv+0xaaf>
    5f56:	48 89 c3             	mov    %rax,%rbx
    5f59:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5f5d:	48 89 c7             	mov    %rax,%rdi
    5f60:	e8 00 00 00 00       	callq  5f65 <_ZN6Parser10compileHWSEv+0x9bb>
    5f65:	e9 db 00 00 00       	jmpq   6045 <_ZN6Parser10compileHWSEv+0xa9b>
    5f6a:	48 89 c3             	mov    %rax,%rbx
    5f6d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5f74:	48 89 c7             	mov    %rax,%rdi
    5f77:	e8 00 00 00 00       	callq  5f7c <_ZN6Parser10compileHWSEv+0x9d2>
    5f7c:	e9 c4 00 00 00       	jmpq   6045 <_ZN6Parser10compileHWSEv+0xa9b>
    5f81:	48 89 c3             	mov    %rax,%rbx
            QStringList definitions  = QRDefinition.capturedTexts();

            if(a>0){
                //CRC16++;
                bool anchor_detected;

    5f84:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5f88:	48 89 c7             	mov    %rax,%rdi
    5f8b:	e8 00 00 00 00       	callq  5f90 <_ZN6Parser10compileHWSEv+0x9e6>
    5f90:	eb 69                	jmp    5ffb <_ZN6Parser10compileHWSEv+0xa51>
    5f92:	48 89 c3             	mov    %rax,%rbx
                counter++;
                this->strings.append("anchor");
    5f95:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5f99:	48 89 c7             	mov    %rax,%rdi
    5f9c:	e8 00 00 00 00       	callq  5fa1 <_ZN6Parser10compileHWSEv+0x9f7>
    5fa1:	eb 03                	jmp    5fa6 <_ZN6Parser10compileHWSEv+0x9fc>
    5fa3:	48 89 c3             	mov    %rax,%rbx

            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
    5fa6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5faa:	48 89 c7             	mov    %rax,%rdi
    5fad:	e8 00 00 00 00       	callq  5fb2 <_ZN6Parser10compileHWSEv+0xa08>
    5fb2:	eb 47                	jmp    5ffb <_ZN6Parser10compileHWSEv+0xa51>
    5fb4:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
    5fb7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5fbb:	48 89 c7             	mov    %rax,%rdi
    5fbe:	e8 00 00 00 00       	callq  5fc3 <_ZN6Parser10compileHWSEv+0xa19>
    5fc3:	eb 36                	jmp    5ffb <_ZN6Parser10compileHWSEv+0xa51>
    5fc5:	48 89 c3             	mov    %rax,%rbx
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

    5fc8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5fcc:	48 89 c7             	mov    %rax,%rdi
    5fcf:	e8 00 00 00 00       	callq  5fd4 <_ZN6Parser10compileHWSEv+0xa2a>
    5fd4:	eb 03                	jmp    5fd9 <_ZN6Parser10compileHWSEv+0xa2f>
    5fd6:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    5fd9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5fdd:	48 89 c7             	mov    %rax,%rdi
    5fe0:	e8 00 00 00 00       	callq  5fe5 <_ZN6Parser10compileHWSEv+0xa3b>
    5fe5:	eb 03                	jmp    5fea <_ZN6Parser10compileHWSEv+0xa40>
    5fe7:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
    5fea:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5fee:	48 89 c7             	mov    %rax,%rdi
    5ff1:	e8 00 00 00 00       	callq  5ff6 <_ZN6Parser10compileHWSEv+0xa4c>
    5ff6:	eb 03                	jmp    5ffb <_ZN6Parser10compileHWSEv+0xa51>
    5ff8:	48 89 c3             	mov    %rax,%rbx

        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
    5ffb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5fff:	48 89 c7             	mov    %rax,%rdi
    6002:	e8 00 00 00 00       	callq  6007 <_ZN6Parser10compileHWSEv+0xa5d>
    6007:	eb 03                	jmp    600c <_ZN6Parser10compileHWSEv+0xa62>
    6009:	48 89 c3             	mov    %rax,%rbx
        QString line;

        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
    600c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6010:	48 89 c7             	mov    %rax,%rdi
    6013:	e8 00 00 00 00       	callq  6018 <_ZN6Parser10compileHWSEv+0xa6e>
    6018:	eb 03                	jmp    601d <_ZN6Parser10compileHWSEv+0xa73>
    601a:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    601d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6024:	48 89 c7             	mov    %rax,%rdi
    6027:	e8 00 00 00 00       	callq  602c <_ZN6Parser10compileHWSEv+0xa82>
    602c:	eb 03                	jmp    6031 <_ZN6Parser10compileHWSEv+0xa87>
    602e:	48 89 c3             	mov    %rax,%rbx

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

    6031:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6038:	48 89 c7             	mov    %rax,%rdi
    603b:	e8 00 00 00 00       	callq  6040 <_ZN6Parser10compileHWSEv+0xa96>
    6040:	eb 03                	jmp    6045 <_ZN6Parser10compileHWSEv+0xa9b>
    6042:	48 89 c3             	mov    %rax,%rbx
        int addrLocal = this->hwSequenceCompiled.size() + 2;

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();
    6045:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    604c:	48 89 c7             	mov    %rax,%rdi
    604f:	e8 00 00 00 00       	callq  6054 <_ZN6Parser10compileHWSEv+0xaaa>
    6054:	eb 03                	jmp    6059 <_ZN6Parser10compileHWSEv+0xaaf>
    6056:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append(blockCounter);
        this->hwSequenceCompiled.append(HWS_OPCODE);

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
    6059:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6060:	48 89 c7             	mov    %rax,%rdi
    6063:	e8 00 00 00 00       	callq  6068 <_ZN6Parser10compileHWSEv+0xabe>
    6068:	eb 03                	jmp    606d <_ZN6Parser10compileHWSEv+0xac3>
    606a:	48 89 c3             	mov    %rax,%rbx
    //byte-code
    char blockCounter = 0xFF;
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.
    606d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6074:	48 89 c7             	mov    %rax,%rdi
    6077:	e8 00 00 00 00       	callq  607c <_ZN6Parser10compileHWSEv+0xad2>
    607c:	eb 03                	jmp    6081 <_ZN6Parser10compileHWSEv+0xad7>
    607e:	48 89 c3             	mov    %rax,%rbx

    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    6081:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	e8 00 00 00 00       	callq  6090 <_ZN6Parser10compileHWSEv+0xae6>
    6090:	eb 03                	jmp    6095 <_ZN6Parser10compileHWSEv+0xaeb>
    6092:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}

void Parser::compileHWS(){
    6095:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    609c:	48 89 c7             	mov    %rax,%rdi
    609f:	e8 00 00 00 00       	callq  60a4 <_ZN6Parser10compileHWSEv+0xafa>
    60a4:	48 89 d8             	mov    %rbx,%rax
    60a7:	48 89 c7             	mov    %rax,%rdi
    60aa:	e8 00 00 00 00       	callq  60af <_ZN6Parser10compileHWSEv+0xb05>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    60af:	e8 00 00 00 00       	callq  60b4 <_ZN6Parser10compileHWSEv+0xb0a>
    60b4:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    60bb:	5b                   	pop    %rbx
    60bc:	5d                   	pop    %rbp
    60bd:	c3                   	retq   

00000000000060be <_ZN6Parser9selectHWSEv>:
    HWStoHex();
}
    60be:	55                   	push   %rbp
    60bf:	48 89 e5             	mov    %rsp,%rbp
    60c2:	53                   	push   %rbx
    60c3:	48 83 ec 58          	sub    $0x58,%rsp
    60c7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    60cb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    60d2:	00 00 
    60d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    60d8:	31 c0                	xor    %eax,%eax

void Parser::selectHWS(){
    60da:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)

    60e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    60e5:	48 83 c0 78          	add    $0x78,%rax
    60e9:	48 89 c7             	mov    %rax,%rdi
    60ec:	e8 00 00 00 00       	callq  60f1 <_ZN6Parser9selectHWSEv+0x33>
    60f1:	89 45 bc             	mov    %eax,-0x44(%rbp)
    int i = 0;
    int n = this->sorted.size();
    60f4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    60f8:	48 89 c7             	mov    %rax,%rdi
    60fb:	e8 00 00 00 00       	callq  6100 <_ZN6Parser9selectHWSEv+0x42>

    6100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6104:	48 89 c7             	mov    %rax,%rdi
    6107:	e8 00 00 00 00       	callq  610c <_ZN6Parser9selectHWSEv+0x4e>
    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    610c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6110:	48 83 c0 78          	add    $0x78,%rax
    6114:	48 89 c7             	mov    %rax,%rdi
    6117:	e8 00 00 00 00       	callq  611c <_ZN6Parser9selectHWSEv+0x5e>
    611c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6120:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6124:	48 83 c0 78          	add    $0x78,%rax
    6128:	48 89 c7             	mov    %rax,%rdi
    612b:	e8 00 00 00 00       	callq  6130 <_ZN6Parser9selectHWSEv+0x72>
    6130:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6134:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    6138:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    613c:	48 89 d6             	mov    %rdx,%rsi
    613f:	48 89 c7             	mov    %rax,%rdi
    6142:	e8 00 00 00 00       	callq  6147 <_ZN6Parser9selectHWSEv+0x89>
    6147:	84 c0                	test   %al,%al
    6149:	74 50                	je     619b <_ZN6Parser9selectHWSEv+0xdd>

    614b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    614f:	48 89 c7             	mov    %rax,%rdi
    6152:	e8 00 00 00 00       	callq  6157 <_ZN6Parser9selectHWSEv+0x99>
    6157:	be 00 00 00 00       	mov    $0x0,%esi
    615c:	48 89 c7             	mov    %rax,%rdi
    615f:	e8 00 00 00 00       	callq  6164 <_ZN6Parser9selectHWSEv+0xa6>
    6164:	48 89 c2             	mov    %rax,%rdx
    6167:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    616b:	48 89 d6             	mov    %rdx,%rsi
    616e:	48 89 c7             	mov    %rax,%rdi
    6171:	e8 00 00 00 00       	callq  6176 <_ZN6Parser9selectHWSEv+0xb8>
    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    6176:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    617a:	48 8d 50 68          	lea    0x68(%rax),%rdx
    617e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6182:	48 89 c6             	mov    %rax,%rsi
    6185:	48 89 d7             	mov    %rdx,%rdi
    6188:	e8 00 00 00 00       	callq  618d <_ZN6Parser9selectHWSEv+0xcf>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    618d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6191:	48 89 c7             	mov    %rax,%rdi
    6194:	e8 00 00 00 00       	callq  6199 <_ZN6Parser9selectHWSEv+0xdb>
    6199:	eb 85                	jmp    6120 <_ZN6Parser9selectHWSEv+0x62>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }
    619b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    61a2:	8b 45 b8             	mov    -0x48(%rbp),%eax
    61a5:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    61a8:	7d 06                	jge    61b0 <_ZN6Parser9selectHWSEv+0xf2>
    61aa:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    61ae:	eb f2                	jmp    61a2 <_ZN6Parser9selectHWSEv+0xe4>

void Parser::selectHWS(){

    int i = 0;
    int n = this->sorted.size();

    61b0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    61b4:	48 89 c7             	mov    %rax,%rdi
    61b7:	e8 00 00 00 00       	callq  61bc <_ZN6Parser9selectHWSEv+0xfe>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    61bc:	90                   	nop
    61bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    61c1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    61c8:	00 00 
    61ca:	74 21                	je     61ed <_ZN6Parser9selectHWSEv+0x12f>
    61cc:	eb 1a                	jmp    61e8 <_ZN6Parser9selectHWSEv+0x12a>
    61ce:	48 89 c3             	mov    %rax,%rbx

void Parser::selectHWS(){

    int i = 0;
    int n = this->sorted.size();

    61d1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    61d5:	48 89 c7             	mov    %rax,%rdi
    61d8:	e8 00 00 00 00       	callq  61dd <_ZN6Parser9selectHWSEv+0x11f>
    61dd:	48 89 d8             	mov    %rbx,%rax
    61e0:	48 89 c7             	mov    %rax,%rdi
    61e3:	e8 00 00 00 00       	callq  61e8 <_ZN6Parser9selectHWSEv+0x12a>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    61e8:	e8 00 00 00 00       	callq  61ed <_ZN6Parser9selectHWSEv+0x12f>
    61ed:	48 83 c4 58          	add    $0x58,%rsp
    61f1:	5b                   	pop    %rbx
    61f2:	5d                   	pop    %rbp
    61f3:	c3                   	retq   

00000000000061f4 <_ZN6Parser12loadIncludesEv>:
    }
}
    61f4:	55                   	push   %rbp
    61f5:	48 89 e5             	mov    %rsp,%rbp
    61f8:	53                   	push   %rbx
    61f9:	48 83 ec 68          	sub    $0x68,%rsp
    61fd:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    6201:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6208:	00 00 
    620a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    620e:	31 c0                	xor    %eax,%eax

    6210:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6214:	48 89 c7             	mov    %rax,%rdi
    6217:	e8 00 00 00 00       	callq  621c <_ZN6Parser12loadIncludesEv+0x28>
int Parser::loadIncludes(){
    QStringList::iterator it;
    621c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6220:	48 8d 50 58          	lea    0x58(%rax),%rdx
    6224:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6228:	48 89 d6             	mov    %rdx,%rsi
    622b:	48 89 c7             	mov    %rax,%rdi
    622e:	e8 00 00 00 00       	callq  6233 <_ZN6Parser12loadIncludesEv+0x3f>
    6233:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6237:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    623b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    623f:	48 8d 50 58          	lea    0x58(%rax),%rdx
    6243:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6247:	48 89 d6             	mov    %rdx,%rsi
    624a:	48 89 c7             	mov    %rax,%rdi
    624d:	e8 00 00 00 00       	callq  6252 <_ZN6Parser12loadIncludesEv+0x5e>
    6252:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6256:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    625a:	48 89 d6             	mov    %rdx,%rsi
    625d:	48 89 c7             	mov    %rax,%rdi
    6260:	e8 00 00 00 00       	callq  6265 <_ZN6Parser12loadIncludesEv+0x71>
    6265:	84 c0                	test   %al,%al
    6267:	0f 84 dc 00 00 00    	je     6349 <_ZN6Parser12loadIncludesEv+0x155>

    626d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6271:	48 89 c7             	mov    %rax,%rdi
    6274:	e8 00 00 00 00       	callq  6279 <_ZN6Parser12loadIncludesEv+0x85>
    6279:	48 89 c2             	mov    %rax,%rdx
    627c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6280:	48 89 d6             	mov    %rdx,%rsi
    6283:	48 89 c7             	mov    %rax,%rdi
    6286:	e8 00 00 00 00       	callq  628b <_ZN6Parser12loadIncludesEv+0x97>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    628b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    628f:	be 01 00 00 00       	mov    $0x1,%esi
    6294:	48 89 c7             	mov    %rax,%rdi
    6297:	e8 00 00 00 00       	callq  629c <_ZN6Parser12loadIncludesEv+0xa8>
    629c:	8b 55 d0             	mov    -0x30(%rbp),%edx
    629f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    62a3:	89 d6                	mov    %edx,%esi
    62a5:	48 89 c7             	mov    %rax,%rdi
    62a8:	e8 00 00 00 00       	callq  62ad <_ZN6Parser12loadIncludesEv+0xb9>
    62ad:	84 c0                	test   %al,%al
    62af:	74 7b                	je     632c <_ZN6Parser12loadIncludesEv+0x138>
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
    62b1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    62b5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    62b9:	48 89 d6             	mov    %rdx,%rsi
    62bc:	48 89 c7             	mov    %rax,%rdi
    62bf:	e8 00 00 00 00       	callq  62c4 <_ZN6Parser12loadIncludesEv+0xd0>
        {
    62c4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    62c8:	48 89 c7             	mov    %rax,%rdi
    62cb:	e8 00 00 00 00       	callq  62d0 <_ZN6Parser12loadIncludesEv+0xdc>
    62d0:	83 f0 01             	xor    $0x1,%eax
    62d3:	84 c0                	test   %al,%al
    62d5:	74 3d                	je     6314 <_ZN6Parser12loadIncludesEv+0x120>
           QTextStream in(&hFile);
           while (!in.atEnd())
    62d7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    62db:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    62df:	ba 00 00 00 00       	mov    $0x0,%edx
    62e4:	48 89 ce             	mov    %rcx,%rsi
    62e7:	48 89 c7             	mov    %rax,%rdi
    62ea:	e8 00 00 00 00       	callq  62ef <_ZN6Parser12loadIncludesEv+0xfb>
           {
    62ef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    62f3:	48 8d 50 60          	lea    0x60(%rax),%rdx
    62f7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    62fb:	48 89 c6             	mov    %rax,%rsi
    62fe:	48 89 d7             	mov    %rdx,%rdi
    6301:	e8 00 00 00 00       	callq  6306 <_ZN6Parser12loadIncludesEv+0x112>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    6306:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    630a:	48 89 c7             	mov    %rax,%rdi
    630d:	e8 00 00 00 00       	callq  6312 <_ZN6Parser12loadIncludesEv+0x11e>
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
    6312:	eb b0                	jmp    62c4 <_ZN6Parser12loadIncludesEv+0xd0>
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
              this->includes.append(line);
    6314:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6318:	48 89 c7             	mov    %rax,%rdi
    631b:	e8 00 00 00 00       	callq  6320 <_ZN6Parser12loadIncludesEv+0x12c>
int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
    6320:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6324:	48 89 c7             	mov    %rax,%rdi
    6327:	e8 00 00 00 00       	callq  632c <_ZN6Parser12loadIncludesEv+0x138>
    }
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    632c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6330:	48 89 c7             	mov    %rax,%rdi
    6333:	e8 00 00 00 00       	callq  6338 <_ZN6Parser12loadIncludesEv+0x144>
        //QString firstLine = this->sorted.;
    }
}

int Parser::loadIncludes(){
    QStringList::iterator it;
    6338:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    633c:	48 89 c7             	mov    %rax,%rdi
    633f:	e8 00 00 00 00       	callq  6344 <_ZN6Parser12loadIncludesEv+0x150>
    6344:	e9 f2 fe ff ff       	jmpq   623b <_ZN6Parser12loadIncludesEv+0x47>
           hFile.close();
        }
    }

    // Append includes before first line of main script;

    6349:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    634d:	48 89 c7             	mov    %rax,%rdi
    6350:	e8 00 00 00 00       	callq  6355 <_ZN6Parser12loadIncludesEv+0x161>

    6355:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6359:	48 8d 50 60          	lea    0x60(%rax),%rdx
    635d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6361:	48 89 d6             	mov    %rdx,%rsi
    6364:	48 89 c7             	mov    %rax,%rdi
    6367:	e8 00 00 00 00       	callq  636c <_ZN6Parser12loadIncludesEv+0x178>
    636c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6370:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6374:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6378:	48 8d 50 60          	lea    0x60(%rax),%rdx
    637c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6380:	48 89 d6             	mov    %rdx,%rsi
    6383:	48 89 c7             	mov    %rax,%rdi
    6386:	e8 00 00 00 00       	callq  638b <_ZN6Parser12loadIncludesEv+0x197>
    638b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    638f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6393:	48 89 d6             	mov    %rdx,%rsi
    6396:	48 89 c7             	mov    %rax,%rdi
    6399:	e8 00 00 00 00       	callq  639e <_ZN6Parser12loadIncludesEv+0x1aa>
    639e:	84 c0                	test   %al,%al
    63a0:	74 2c                	je     63ce <_ZN6Parser12loadIncludesEv+0x1da>
    QString included;
    63a2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    63a6:	48 89 c7             	mov    %rax,%rdi
    63a9:	e8 00 00 00 00       	callq  63ae <_ZN6Parser12loadIncludesEv+0x1ba>
    63ae:	48 89 c2             	mov    %rax,%rdx
    63b1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    63b5:	48 89 d6             	mov    %rdx,%rsi
    63b8:	48 89 c7             	mov    %rax,%rdi
    63bb:	e8 00 00 00 00       	callq  63c0 <_ZN6Parser12loadIncludesEv+0x1cc>
        }
    }

    // Append includes before first line of main script;


    63c0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    63c4:	48 89 c7             	mov    %rax,%rdi
    63c7:	e8 00 00 00 00       	callq  63cc <_ZN6Parser12loadIncludesEv+0x1d8>
    63cc:	eb a6                	jmp    6374 <_ZN6Parser12loadIncludesEv+0x180>
    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    63ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    63d2:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    63d6:	48 89 d6             	mov    %rdx,%rsi
    63d9:	48 89 c7             	mov    %rax,%rdi
    63dc:	e8 00 00 00 00       	callq  63e1 <_ZN6Parser12loadIncludesEv+0x1ed>
           hFile.close();
        }
    }

    // Append includes before first line of main script;

    63e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    63e5:	48 89 c7             	mov    %rax,%rdi
    63e8:	e8 00 00 00 00       	callq  63ed <_ZN6Parser12loadIncludesEv+0x1f9>

    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    63ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    63f1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    63f8:	00 00 
    63fa:	74 5d                	je     6459 <_ZN6Parser12loadIncludesEv+0x265>
    63fc:	eb 56                	jmp    6454 <_ZN6Parser12loadIncludesEv+0x260>
    63fe:	48 89 c3             	mov    %rax,%rbx
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    6401:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6405:	48 89 c7             	mov    %rax,%rdi
    6408:	e8 00 00 00 00       	callq  640d <_ZN6Parser12loadIncludesEv+0x219>
    640d:	eb 03                	jmp    6412 <_ZN6Parser12loadIncludesEv+0x21e>
    640f:	48 89 c3             	mov    %rax,%rbx
int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
    6412:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6416:	48 89 c7             	mov    %rax,%rdi
    6419:	e8 00 00 00 00       	callq  641e <_ZN6Parser12loadIncludesEv+0x22a>
    641e:	eb 03                	jmp    6423 <_ZN6Parser12loadIncludesEv+0x22f>
    6420:	48 89 c3             	mov    %rax,%rbx
    }
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    6423:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6427:	48 89 c7             	mov    %rax,%rdi
    642a:	e8 00 00 00 00       	callq  642f <_ZN6Parser12loadIncludesEv+0x23b>
    642f:	48 89 d8             	mov    %rbx,%rax
    6432:	48 89 c7             	mov    %rax,%rdi
    6435:	e8 00 00 00 00       	callq  643a <_ZN6Parser12loadIncludesEv+0x246>
    643a:	48 89 c3             	mov    %rax,%rbx
           hFile.close();
        }
    }

    // Append includes before first line of main script;

    643d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6441:	48 89 c7             	mov    %rax,%rdi
    6444:	e8 00 00 00 00       	callq  6449 <_ZN6Parser12loadIncludesEv+0x255>
    6449:	48 89 d8             	mov    %rbx,%rax
    644c:	48 89 c7             	mov    %rax,%rdi
    644f:	e8 00 00 00 00       	callq  6454 <_ZN6Parser12loadIncludesEv+0x260>

    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    6454:	e8 00 00 00 00       	callq  6459 <_ZN6Parser12loadIncludesEv+0x265>
    6459:	48 83 c4 68          	add    $0x68,%rsp
    645d:	5b                   	pop    %rbx
    645e:	5d                   	pop    %rbp
    645f:	c3                   	retq   

0000000000006460 <_ZN6Parser7compileEv>:
    this->script.prepend(included); // nice.
}
    6460:	55                   	push   %rbp
    6461:	48 89 e5             	mov    %rsp,%rbp
    6464:	53                   	push   %rbx
    6465:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    646c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    6473:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    647a:	00 00 
    647c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6480:	31 c0                	xor    %eax,%eax

int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;
    6482:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6486:	48 89 c7             	mov    %rax,%rdi
    6489:	e8 00 00 00 00       	callq  648e <_ZN6Parser7compileEv+0x2e>

    Sems semSoup;

    648e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6495:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    //return -1;
    QString *script = &this->script;
    6499:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    64a0:	48 89 c7             	mov    %rax,%rdi
    64a3:	e8 00 00 00 00       	callq  64a8 <_ZN6Parser7compileEv+0x48>

    this->init();
    //this->splitBlocks(*script); // temporary off
    64a8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    64af:	48 8d 50 30          	lea    0x30(%rax),%rdx
    64b3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    64ba:	48 89 d6             	mov    %rdx,%rsi
    64bd:	48 89 c7             	mov    %rax,%rdi
    64c0:	e8 00 00 00 00       	callq  64c5 <_ZN6Parser7compileEv+0x65>
    64c5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    64cc:	48 8d 78 78          	lea    0x78(%rax),%rdi
    64d0:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    64d7:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    64de:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    64e5:	48 89 d1             	mov    %rdx,%rcx
    64e8:	48 89 fa             	mov    %rdi,%rdx
    64eb:	48 89 c7             	mov    %rax,%rdi
    64ee:	e8 00 00 00 00       	callq  64f3 <_ZN6Parser7compileEv+0x93>
    64f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    64fa:	48 89 c7             	mov    %rax,%rdi
    64fd:	e8 00 00 00 00       	callq  6502 <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    6502:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6509:	48 8d 50 38          	lea    0x38(%rax),%rdx
    650d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6514:	48 89 d6             	mov    %rdx,%rsi
    6517:	48 89 c7             	mov    %rax,%rdi
    651a:	e8 00 00 00 00       	callq  651f <_ZN6Parser7compileEv+0xbf>
    651f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6526:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    652d:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    6534:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    653b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6542:	48 89 d1             	mov    %rdx,%rcx
    6545:	48 89 fa             	mov    %rdi,%rdx
    6548:	48 89 c7             	mov    %rax,%rdi
    654b:	e8 00 00 00 00       	callq  6550 <_ZN6Parser7compileEv+0xf0>
    6550:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6557:	48 89 c7             	mov    %rax,%rdi
    655a:	e8 00 00 00 00       	callq  655f <_ZN6Parser7compileEv+0xff>

    // теперь код поблочно лежит в контейнере sorted.
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    655f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6563:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 656a <_ZN6Parser7compileEv+0x10a>
    656a:	48 89 c7             	mov    %rax,%rdi
    656d:	e8 00 00 00 00       	callq  6572 <_ZN6Parser7compileEv+0x112>
    6572:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    6576:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    657d:	48 89 d6             	mov    %rdx,%rsi
    6580:	48 89 c7             	mov    %rax,%rdi
    6583:	e8 00 00 00 00       	callq  6588 <_ZN6Parser7compileEv+0x128>
    6588:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    658c:	48 89 c7             	mov    %rax,%rdi
    658f:	e8 00 00 00 00       	callq  6594 <_ZN6Parser7compileEv+0x134>
    // Подключить все инклуды по списку
    6594:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6598:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 659f <_ZN6Parser7compileEv+0x13f>
    659f:	48 89 c7             	mov    %rax,%rdi
    65a2:	e8 00 00 00 00       	callq  65a7 <_ZN6Parser7compileEv+0x147>
    65a7:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    65ab:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    65b2:	48 89 d6             	mov    %rdx,%rsi
    65b5:	48 89 c7             	mov    %rax,%rdi
    65b8:	e8 00 00 00 00       	callq  65bd <_ZN6Parser7compileEv+0x15d>
    65bd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    65c1:	48 89 c7             	mov    %rax,%rdi
    65c4:	e8 00 00 00 00       	callq  65c9 <_ZN6Parser7compileEv+0x169>
    this->addIncludeFile("definitions.h");
    65c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    65cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 65d4 <_ZN6Parser7compileEv+0x174>
    65d4:	48 89 c7             	mov    %rax,%rdi
    65d7:	e8 00 00 00 00       	callq  65dc <_ZN6Parser7compileEv+0x17c>
    65dc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    65e0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    65e7:	48 89 d6             	mov    %rdx,%rsi
    65ea:	48 89 c7             	mov    %rax,%rdi
    65ed:	e8 00 00 00 00       	callq  65f2 <_ZN6Parser7compileEv+0x192>
    65f2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    65f6:	48 89 c7             	mov    %rax,%rdi
    65f9:	e8 00 00 00 00       	callq  65fe <_ZN6Parser7compileEv+0x19e>
    this->addIncludeFile("project1.h");
    65fe:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6602:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6609 <_ZN6Parser7compileEv+0x1a9>
    6609:	48 89 c7             	mov    %rax,%rdi
    660c:	e8 00 00 00 00       	callq  6611 <_ZN6Parser7compileEv+0x1b1>
    6611:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6615:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    661c:	48 89 d6             	mov    %rdx,%rsi
    661f:	48 89 c7             	mov    %rax,%rdi
    6622:	e8 00 00 00 00       	callq  6627 <_ZN6Parser7compileEv+0x1c7>
    6627:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    662b:	48 89 c7             	mov    %rax,%rdi
    662e:	e8 00 00 00 00       	callq  6633 <_ZN6Parser7compileEv+0x1d3>
    this->addIncludeFile("kpa_config.h");
    6633:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    663a:	48 89 c7             	mov    %rax,%rdi
    663d:	e8 00 00 00 00       	callq  6642 <_ZN6Parser7compileEv+0x1e2>
    6642:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    this->addIncludeFile("names.h");
    int lIf = this->loadIncludes();
    6648:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    664c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6653:	48 89 d6             	mov    %rdx,%rsi
    6656:	48 89 c7             	mov    %rax,%rdi
    6659:	e8 00 00 00 00       	callq  665e <_ZN6Parser7compileEv+0x1fe>
    665e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);

    6664:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6668:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    666f:	48 89 d6             	mov    %rdx,%rsi
    6672:	48 89 c7             	mov    %rax,%rdi
    6675:	e8 00 00 00 00       	callq  667a <_ZN6Parser7compileEv+0x21a>
    667a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);

    6680:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6687:	48 89 c7             	mov    %rax,%rdi
    668a:	e8 00 00 00 00       	callq  668f <_ZN6Parser7compileEv+0x22f>
}

int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;
    668f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6693:	48 89 c7             	mov    %rax,%rdi
    6696:	e8 00 00 00 00       	callq  669b <_ZN6Parser7compileEv+0x23b>
    int cDr = this->checkDefines(script);

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    669b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    669f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    66a6:	00 00 
    66a8:	0f 84 90 00 00 00    	je     673e <_ZN6Parser7compileEv+0x2de>
    66ae:	e9 86 00 00 00       	jmpq   6739 <_ZN6Parser7compileEv+0x2d9>
    66b3:	48 89 c3             	mov    %rax,%rbx

    //return -1;
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off
    66b6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    66bd:	48 89 c7             	mov    %rax,%rdi
    66c0:	e8 00 00 00 00       	callq  66c5 <_ZN6Parser7compileEv+0x265>
    66c5:	eb 5b                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    66c7:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    66ca:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    66d1:	48 89 c7             	mov    %rax,%rdi
    66d4:	e8 00 00 00 00       	callq  66d9 <_ZN6Parser7compileEv+0x279>
    66d9:	eb 47                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    66db:	48 89 c3             	mov    %rax,%rbx

    // теперь код поблочно лежит в контейнере sorted.
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    66de:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    66e2:	48 89 c7             	mov    %rax,%rdi
    66e5:	e8 00 00 00 00       	callq  66ea <_ZN6Parser7compileEv+0x28a>
    66ea:	eb 36                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    66ec:	48 89 c3             	mov    %rax,%rbx
    // Подключить все инклуды по списку
    66ef:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    66f3:	48 89 c7             	mov    %rax,%rdi
    66f6:	e8 00 00 00 00       	callq  66fb <_ZN6Parser7compileEv+0x29b>
    66fb:	eb 25                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    66fd:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("definitions.h");
    6700:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6704:	48 89 c7             	mov    %rax,%rdi
    6707:	e8 00 00 00 00       	callq  670c <_ZN6Parser7compileEv+0x2ac>
    670c:	eb 14                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    670e:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    6711:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6715:	48 89 c7             	mov    %rax,%rdi
    6718:	e8 00 00 00 00       	callq  671d <_ZN6Parser7compileEv+0x2bd>
    671d:	eb 03                	jmp    6722 <_ZN6Parser7compileEv+0x2c2>
    671f:	48 89 c3             	mov    %rax,%rbx
}

int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;
    6722:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6726:	48 89 c7             	mov    %rax,%rdi
    6729:	e8 00 00 00 00       	callq  672e <_ZN6Parser7compileEv+0x2ce>
    672e:	48 89 d8             	mov    %rbx,%rax
    6731:	48 89 c7             	mov    %rax,%rdi
    6734:	e8 00 00 00 00       	callq  6739 <_ZN6Parser7compileEv+0x2d9>
    int cDr = this->checkDefines(script);

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    6739:	e8 00 00 00 00       	callq  673e <_ZN6Parser7compileEv+0x2de>
    673e:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    6745:	5b                   	pop    %rbx
    6746:	5d                   	pop    %rbp
    6747:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   
