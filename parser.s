
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        0000000c  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        0000000c  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000300  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  00000308  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000310  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  00000318  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000320  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  00000328  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000330  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  00000338  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000340  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  00000348  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000350  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  00000358  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000360  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  00000368  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000370  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  00000378  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000380  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  00000388  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000390  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  00000398  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000400  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  00000408  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000410  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  00000418  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000420  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  00000428  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000430  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  00000438  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000440  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  00000448  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000450  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  00000458  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000460  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  00000468  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000470  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  00000478  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000480  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  00000488  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000490  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  00000498  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000500  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  00000508  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000510  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  00000518  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000520  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  00000528  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000530  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  00000538  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000540  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  00000548  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000550  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  00000558  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000560  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  00000568  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000570  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  00000578  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000580  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  00000588  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000590  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  00000598  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000600  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  00000608  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000610  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  00000618  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000620  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  00000628  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000630  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  00000638  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000640  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  00000648  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000650  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  00000658  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000660  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  00000668  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000670  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  00000678  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000680  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  00000688  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000690  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  00000698  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000700  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  00000708  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000710  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  00000718  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000720  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  00000728  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000730  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  00000738  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000740  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  00000748  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000750  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  00000758  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000760  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  00000768  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000770  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  00000778  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000780  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  00000788  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000790  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  00000798  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000800  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  00000808  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000810  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  00000818  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000820  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  00000828  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000830  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  00000838  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000840  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  00000848  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000850  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  00000858  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000860  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  00000868  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000870  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  00000878  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000880  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  00000888  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000890  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  00000898  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000900  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  00000908  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000910  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  00000918  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000920  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  00000928  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000930  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  00000938  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000940  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  00000948  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000950  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  00000958  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000960  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  00000968  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000970  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  00000978  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000980  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  00000988  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000990  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  00000998  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aa8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000ab8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000ac8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000ad8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000ae8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000af8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b70  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b78  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b80  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b88  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b90  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b98  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000ba8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bb8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bc8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bd8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000be8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bf8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .text         00006fc6  0000000000000000  0000000000000000  00000c68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
387 .data         00000000  0000000000000000  0000000000000000  00007c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
388 .bss          00000000  0000000000000000  0000000000000000  00007c2e  2**0
                  ALLOC
389 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00007c2e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
390 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00007c40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
391 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00007c4f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00007c56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00007c6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00007c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00007c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
396 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00007cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
397 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00007cc8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
398 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00007d0a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
399 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00007d4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
400 .rodata       0000061c  0000000000000000  0000000000000000  00007d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
401 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  000083a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
402 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00008408  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
403 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  0000846f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
404 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  0000847c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
405 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  00008490  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
406 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  000084ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
407 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  000084e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
408 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  000084f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
409 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  00008556  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
410 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  000085c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
411 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  000085ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
412 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  0000866e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  000086e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
414 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000870a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
415 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  00008730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  00008744  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
417 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  0000878e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
418 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  000087b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
419 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  000087db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
420 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00008848  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
421 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00008890  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
422 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00008924  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
423 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  0000893a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  000089ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
425 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  000089e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00008a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
427 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00008a1e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00008a3c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  00008a5a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00008aec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
431 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00008b00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00008b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
433 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00008b80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
434 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00008c0c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00008c2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
436 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00008c5e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00008cd4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
438 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00008d27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00008dac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
440 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00008dbc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00008e76  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
442 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00008e91  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00008f1b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
444 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00008f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
445 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00008f38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
446 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00008f4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00008f94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00008fae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00008fe8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
450 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  0000903c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
451 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  0000905a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
452 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  0000907c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
453 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  000090a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
454 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  000090d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
455 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  000090fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  00009124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  00009130  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
458 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  0000914c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  00009172  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
460 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000918e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  000091b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  000091e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
463 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  000091f0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  00009212  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000923e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
466 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  00009252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
467 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  00009292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
468 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  000092bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  00009302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
470 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000935d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  000093b2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
472 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  00009424  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
473 .gcc_except_table 00000fc4  0000000000000000  0000000000000000  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
474 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000a408  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000a424  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000a44e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000a46a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000a526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000a540  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
480 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000a55a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
481 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000a574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000a58e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
483 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000a5b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
484 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000a5bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000a5e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000a5fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000a614  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000a61f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000a644  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
490 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000a66c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
491 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000a678  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000a6a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000a70a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000a826  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000a904  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
496 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000a9a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000aad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
498 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000aae8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000ab4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000ab86  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000ac92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
502 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000aca8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000ace8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000ad28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000ad4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
506 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000ad6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000ad88  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000af02  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000b074  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000b1e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
511 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000b1fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
512 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000b230  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
513 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000b264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
514 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000b286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
515 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000b2a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000b2c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000b2f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000b462  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000b4c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
520 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000b4e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
521 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000b544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000b566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
523 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000b57c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
524 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000b592  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000b5ac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000b5e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000b5fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000b66c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000b6c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000b6da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000b71a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000b826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
533 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000b83c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000b89e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000b8f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
536 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000b918  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000b944  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000b966  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
539 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000b988  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
540 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000ba12  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000ba78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000bb86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
543 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000bb9a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
544 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000bbbd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
545 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000bbe0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000bc3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000be14  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000be7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000be9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
550 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000bf66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000bf8c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
552 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000bfa6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000bfcc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000c02b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000c050  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000c082  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000c1bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000c27e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
559 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000c298  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
560 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000c2c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
561 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000c2e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
562 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000c2ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
563 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000c31c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
564 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000c32e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
565 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000c340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
566 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000c352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
567 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000c364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
568 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000c37e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000c4b2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
570 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000c4e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
571 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000c4f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
572 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000c504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
573 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000c516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
574 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000c528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
575 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000c542  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000c632  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000c660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
578 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000c672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
579 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000c684  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000c6a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
581 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000c6b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000c6ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000c6e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
584 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000c776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
585 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000c790  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
586 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000c7ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
587 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000c7ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000c86a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000c898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
590 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000c8aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
591 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000c8bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
592 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000c8ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000c8e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
594 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000c8fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000c9e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000ca22  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
597 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000ca84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
598 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000caca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
599 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000caf4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
600 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000cb26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
601 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000cc60  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
602 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000cd22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
603 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000cd3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
604 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000cd4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000cd7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000cda4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000cddb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000ce00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
609 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000ce7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
610 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000cec4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
611 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000cf16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
612 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000cf9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
613 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000cfc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000d06c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000d114  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
616 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000d1bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000d1d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000d24e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000d2f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000d358  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000d378  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
622 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000d39c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000d418  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
624 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000d460  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000d4b2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000d538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
627 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000d56c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
628 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000d5f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000d64c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000d670  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
631 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000d69a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000d76a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000d776  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000d88a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000d8eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000d8f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000da0a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000da6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
639 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000da76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
640 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000db8a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000dbeb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000dbf6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000dd09  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
644 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000dd18  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000dda4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000ddf8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000de1c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000de45  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
649 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000de54  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
650 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000dec6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
651 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000df28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
652 .debug_info   000228eb  0000000000000000  0000000000000000  0000df33  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
653 .debug_abbrev 00000c81  0000000000000000  0000000000000000  0003081e  2**0
                  CONTENTS, READONLY, DEBUGGING
654 .debug_aranges 00001020  0000000000000000  0000000000000000  0003149f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
655 .debug_ranges 000014e0  0000000000000000  0000000000000000  000324bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
656 .debug_macro  00000d13  0000000000000000  0000000000000000  0003399f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
657 .debug_macro  0000061c  0000000000000000  0000000000000000  000346b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
658 .debug_macro  00000022  0000000000000000  0000000000000000  00034cce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
659 .debug_macro  00000136  0000000000000000  0000000000000000  00034cf0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
660 .debug_macro  00000010  0000000000000000  0000000000000000  00034e26  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
661 .debug_macro  00000275  0000000000000000  0000000000000000  00034e36  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
662 .debug_macro  0000016f  0000000000000000  0000000000000000  000350ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
663 .debug_macro  00000016  0000000000000000  0000000000000000  0003521a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
664 .debug_macro  00000035  0000000000000000  0000000000000000  00035230  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
665 .debug_macro  00000058  0000000000000000  0000000000000000  00035265  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
666 .debug_macro  000005b4  0000000000000000  0000000000000000  000352bd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
667 .debug_macro  0000016d  0000000000000000  0000000000000000  00035871  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
668 .debug_macro  00000016  0000000000000000  0000000000000000  000359de  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
669 .debug_macro  0000009a  0000000000000000  0000000000000000  000359f4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
670 .debug_macro  00000016  0000000000000000  0000000000000000  00035a8e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
671 .debug_macro  00000018  0000000000000000  0000000000000000  00035aa4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
672 .debug_macro  00000032  0000000000000000  0000000000000000  00035abc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
673 .debug_macro  000000c0  0000000000000000  0000000000000000  00035aee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
674 .debug_macro  00000028  0000000000000000  0000000000000000  00035bae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
675 .debug_macro  00000012  0000000000000000  0000000000000000  00035bd6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
676 .debug_macro  000000cf  0000000000000000  0000000000000000  00035be8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
677 .debug_macro  0000001c  0000000000000000  0000000000000000  00035cb7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
678 .debug_macro  00000018  0000000000000000  0000000000000000  00035cd3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
679 .debug_macro  0000006e  0000000000000000  0000000000000000  00035ceb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
680 .debug_macro  00000082  0000000000000000  0000000000000000  00035d59  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
681 .debug_macro  00000012  0000000000000000  0000000000000000  00035ddb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
682 .debug_macro  00000012  0000000000000000  0000000000000000  00035ded  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
683 .debug_macro  00000016  0000000000000000  0000000000000000  00035dff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
684 .debug_macro  00000035  0000000000000000  0000000000000000  00035e15  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
685 .debug_macro  00000052  0000000000000000  0000000000000000  00035e4a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
686 .debug_macro  0000004c  0000000000000000  0000000000000000  00035e9c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
687 .debug_macro  0000001c  0000000000000000  0000000000000000  00035ee8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
688 .debug_macro  00000028  0000000000000000  0000000000000000  00035f04  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
689 .debug_macro  0000005e  0000000000000000  0000000000000000  00035f2c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
690 .debug_macro  000000e2  0000000000000000  0000000000000000  00035f8a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
691 .debug_macro  00000010  0000000000000000  0000000000000000  0003606c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
692 .debug_macro  0000004c  0000000000000000  0000000000000000  0003607c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
693 .debug_macro  00000022  0000000000000000  0000000000000000  000360c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
694 .debug_macro  00000068  0000000000000000  0000000000000000  000360ea  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
695 .debug_macro  0000007f  0000000000000000  0000000000000000  00036152  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
696 .debug_macro  0000003a  0000000000000000  0000000000000000  000361d1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
697 .debug_macro  00000019  0000000000000000  0000000000000000  0003620b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
698 .debug_macro  00000020  0000000000000000  0000000000000000  00036224  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
699 .debug_macro  00000022  0000000000000000  0000000000000000  00036244  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
700 .debug_macro  00000010  0000000000000000  0000000000000000  00036266  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
701 .debug_macro  00000016  0000000000000000  0000000000000000  00036276  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
702 .debug_macro  00000028  0000000000000000  0000000000000000  0003628c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
703 .debug_macro  00000010  0000000000000000  0000000000000000  000362b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
704 .debug_macro  00000046  0000000000000000  0000000000000000  000362c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_macro  0000001c  0000000000000000  0000000000000000  0003630a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
706 .debug_macro  00000020  0000000000000000  0000000000000000  00036326  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_macro  0000005a  0000000000000000  0000000000000000  00036346  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  00000010  0000000000000000  0000000000000000  000363a0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  00000010  0000000000000000  0000000000000000  000363b0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  000000e4  0000000000000000  0000000000000000  000363c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  0000025a  0000000000000000  0000000000000000  000364a4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  0000002d  0000000000000000  0000000000000000  000366fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000016  0000000000000000  0000000000000000  0003672b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  00000050  0000000000000000  0000000000000000  00036741  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  00000019  0000000000000000  0000000000000000  00036791  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000011  0000000000000000  0000000000000000  000367aa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  0000014b  0000000000000000  0000000000000000  000367bb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  0000001e  0000000000000000  0000000000000000  00036906  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  0000001c  0000000000000000  0000000000000000  00036924  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  00000024  0000000000000000  0000000000000000  00036940  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  00000016  0000000000000000  0000000000000000  00036964  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  00000018  0000000000000000  0000000000000000  0003697a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000019  0000000000000000  0000000000000000  00036992  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000058  0000000000000000  0000000000000000  000369ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  00000016  0000000000000000  0000000000000000  00036a03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  0000001c  0000000000000000  0000000000000000  00036a19  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  00000016  0000000000000000  0000000000000000  00036a35  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  00000022  0000000000000000  0000000000000000  00036a4b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  00000043  0000000000000000  0000000000000000  00036a6d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  0000003c  0000000000000000  0000000000000000  00036ab0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  00000173  0000000000000000  0000000000000000  00036aec  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  00000012  0000000000000000  0000000000000000  00036c5f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  00000010  0000000000000000  0000000000000000  00036c71  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  00000058  0000000000000000  0000000000000000  00036c81  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  000000b4  0000000000000000  0000000000000000  00036cd9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  00000016  0000000000000000  0000000000000000  00036d8d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000010  0000000000000000  0000000000000000  00036da3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  00000037  0000000000000000  0000000000000000  00036db3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  00000058  0000000000000000  0000000000000000  00036dea  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  00000011  0000000000000000  0000000000000000  00036e42  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  00000016  0000000000000000  0000000000000000  00036e53  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  00000010  0000000000000000  0000000000000000  00036e69  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000010  0000000000000000  0000000000000000  00036e79  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  00000022  0000000000000000  0000000000000000  00036e89  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  00000122  0000000000000000  0000000000000000  00036eab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  0000008e  0000000000000000  0000000000000000  00036fcd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  00000016  0000000000000000  0000000000000000  0003705b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  00000058  0000000000000000  0000000000000000  00037071  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  000000fa  0000000000000000  0000000000000000  000370c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000030  0000000000000000  0000000000000000  000371c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  000000c1  0000000000000000  0000000000000000  000371f3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  0000004d  0000000000000000  0000000000000000  000372b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000010  0000000000000000  0000000000000000  00037301  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000019  0000000000000000  0000000000000000  00037311  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000020  0000000000000000  0000000000000000  0003732a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000018  0000000000000000  0000000000000000  0003734a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  00000023  0000000000000000  0000000000000000  00037362  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000010  0000000000000000  0000000000000000  00037385  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  00000016  0000000000000000  0000000000000000  00037395  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000076  0000000000000000  0000000000000000  000373ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000016  0000000000000000  0000000000000000  00037421  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  00000025  0000000000000000  0000000000000000  00037437  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  000000de  0000000000000000  0000000000000000  0003745c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  0000001c  0000000000000000  0000000000000000  0003753a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000058  0000000000000000  0000000000000000  00037556  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000088  0000000000000000  0000000000000000  000375ae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000076  0000000000000000  0000000000000000  00037636  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  00000010  0000000000000000  0000000000000000  000376ac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  00000041  0000000000000000  0000000000000000  000376bc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  000000ee  0000000000000000  0000000000000000  000376fd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  000000fc  0000000000000000  0000000000000000  000377eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000010  0000000000000000  0000000000000000  000378e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  000000e5  0000000000000000  0000000000000000  000378f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  00000012  0000000000000000  0000000000000000  000379dc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000016  0000000000000000  0000000000000000  000379ee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000022  0000000000000000  0000000000000000  00037a04  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000016  0000000000000000  0000000000000000  00037a26  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  00000028  0000000000000000  0000000000000000  00037a3c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000216  0000000000000000  0000000000000000  00037a64  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000046  0000000000000000  0000000000000000  00037c7a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  0000002e  0000000000000000  0000000000000000  00037cc0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  00000027  0000000000000000  0000000000000000  00037cee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  0000001f  0000000000000000  0000000000000000  00037d15  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000016  0000000000000000  0000000000000000  00037d34  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  00000010  0000000000000000  0000000000000000  00037d4a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  00000126  0000000000000000  0000000000000000  00037d5a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_line   00004257  0000000000000000  0000000000000000  00037e80  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_str    00039ebb  0000000000000000  0000000000000000  0003c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
789 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00075f98  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
790 .comment      0000002e  0000000000000000  0000000000000000  00075fa0  2**0
                  CONTENTS, READONLY
791 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00075fce  2**0
                  CONTENTS, READONLY
792 .eh_frame     00002590  0000000000000000  0000000000000000  00075fd0  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     328:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     32f:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     336:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     33d:	00 00 
     33f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     343:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     345:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     34c:	00 00 00 
    int index   = 0;
     34f:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     356:	00 00 00 

    VarTypes VT;
     359:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     360:	48 89 c7             	mov    %rax,%rdi
     363:	e8 00 00 00 00       	callq  368 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     368:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     36f:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     376:	48 89 d6             	mov    %rdx,%rsi
     379:	48 89 c7             	mov    %rax,%rdi
     37c:	e8 00 00 00 00       	callq  381 <_ZN6Parser14checkVariablesEP7QString+0x65>
     381:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     388:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     38f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 396 <_ZN6Parser14checkVariablesEP7QString+0x7a>
     396:	48 89 ce             	mov    %rcx,%rsi
     399:	48 89 c7             	mov    %rax,%rdi
     39c:	e8 00 00 00 00       	callq  3a1 <_ZN6Parser14checkVariablesEP7QString+0x85>
     3a1:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     3a8:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     3af:	b9 00 00 00 00       	mov    $0x0,%ecx
     3b4:	ba 01 00 00 00       	mov    $0x1,%edx
     3b9:	48 89 c7             	mov    %rax,%rdi
     3bc:	e8 00 00 00 00       	callq  3c1 <_ZN6Parser14checkVariablesEP7QString+0xa5>
     3c1:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     3c8:	48 89 c7             	mov    %rax,%rdi
     3cb:	e8 00 00 00 00       	callq  3d0 <_ZN6Parser14checkVariablesEP7QString+0xb4>
     3d0:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     3d7:	48 89 c7             	mov    %rax,%rdi
     3da:	e8 00 00 00 00       	callq  3df <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     3df:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     3e6:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     3ed:	48 89 d6             	mov    %rdx,%rsi
     3f0:	48 89 c7             	mov    %rax,%rdi
     3f3:	e8 00 00 00 00       	callq  3f8 <_ZN6Parser14checkVariablesEP7QString+0xdc>
     3f8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     3ff:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     406:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 40d <_ZN6Parser14checkVariablesEP7QString+0xf1>
     40d:	48 89 ce             	mov    %rcx,%rsi
     410:	48 89 c7             	mov    %rax,%rdi
     413:	e8 00 00 00 00       	callq  418 <_ZN6Parser14checkVariablesEP7QString+0xfc>
     418:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     41f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     426:	b9 00 00 00 00       	mov    $0x0,%ecx
     42b:	ba 01 00 00 00       	mov    $0x1,%edx
     430:	48 89 c7             	mov    %rax,%rdi
     433:	e8 00 00 00 00       	callq  438 <_ZN6Parser14checkVariablesEP7QString+0x11c>
     438:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     43f:	48 89 c7             	mov    %rax,%rdi
     442:	e8 00 00 00 00       	callq  447 <_ZN6Parser14checkVariablesEP7QString+0x12b>
     447:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     44e:	48 89 c7             	mov    %rax,%rdi
     451:	e8 00 00 00 00       	callq  456 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
     456:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     45d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 464 <_ZN6Parser14checkVariablesEP7QString+0x148>
     464:	48 89 c7             	mov    %rax,%rdi
     467:	e8 00 00 00 00       	callq  46c <_ZN6Parser14checkVariablesEP7QString+0x150>
     46c:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
     473:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     47a:	b9 00 00 00 00       	mov    $0x0,%ecx
     47f:	ba 01 00 00 00       	mov    $0x1,%edx
     484:	48 89 c7             	mov    %rax,%rdi
     487:	e8 00 00 00 00       	callq  48c <_ZN6Parser14checkVariablesEP7QString+0x170>
     48c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     493:	48 89 c7             	mov    %rax,%rdi
     496:	e8 00 00 00 00       	callq  49b <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
     49b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     4a2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a9 <_ZN6Parser14checkVariablesEP7QString+0x18d>
     4a9:	48 89 c7             	mov    %rax,%rdi
     4ac:	e8 00 00 00 00       	callq  4b1 <_ZN6Parser14checkVariablesEP7QString+0x195>
     4b1:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
     4b8:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     4bf:	b9 00 00 00 00       	mov    $0x0,%ecx
     4c4:	ba 01 00 00 00       	mov    $0x1,%edx
     4c9:	48 89 c7             	mov    %rax,%rdi
     4cc:	e8 00 00 00 00       	callq  4d1 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
     4d1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     4d8:	48 89 c7             	mov    %rax,%rdi
     4db:	e8 00 00 00 00       	callq  4e0 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
     4e0:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     4e7:	48 89 c7             	mov    %rax,%rdi
     4ea:	e8 00 00 00 00       	callq  4ef <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
     4ef:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     4f6:	48 89 c7             	mov    %rax,%rdi
     4f9:	e8 00 00 00 00       	callq  4fe <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
     4fe:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     505:	48 89 c7             	mov    %rax,%rdi
     508:	e8 00 00 00 00       	callq  50d <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
     50d:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
     514:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
     517:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
     51d:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
     524:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     52b:	b9 00 00 00 00       	mov    $0x0,%ecx
     530:	48 89 c7             	mov    %rax,%rdi
     533:	e8 00 00 00 00       	callq  538 <_ZN6Parser14checkVariablesEP7QString+0x21c>
     538:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
     53e:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
     545:	0f 95 c0             	setne  %al
     548:	84 c0                	test   %al,%al
     54a:	0f 84 68 01 00 00    	je     6b8 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
     550:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     557:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     55e:	ba 01 00 00 00       	mov    $0x1,%edx
     563:	48 89 ce             	mov    %rcx,%rsi
     566:	48 89 c7             	mov    %rax,%rdi
     569:	e8 00 00 00 00       	callq  56e <_ZN6Parser14checkVariablesEP7QString+0x252>
     56e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
     575:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     57c:	48 89 d6             	mov    %rdx,%rsi
     57f:	48 89 c7             	mov    %rax,%rdi
     582:	e8 00 00 00 00       	callq  587 <_ZN6Parser14checkVariablesEP7QString+0x26b>
     587:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     58e:	48 89 c7             	mov    %rax,%rdi
     591:	e8 00 00 00 00       	callq  596 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
     596:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     59d:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     5a4:	ba 02 00 00 00       	mov    $0x2,%edx
     5a9:	48 89 ce             	mov    %rcx,%rsi
     5ac:	48 89 c7             	mov    %rax,%rdi
     5af:	e8 00 00 00 00       	callq  5b4 <_ZN6Parser14checkVariablesEP7QString+0x298>
     5b4:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
     5bb:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     5c2:	48 89 d6             	mov    %rdx,%rsi
     5c5:	48 89 c7             	mov    %rax,%rdi
     5c8:	e8 00 00 00 00       	callq  5cd <_ZN6Parser14checkVariablesEP7QString+0x2b1>
     5cd:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     5d4:	48 89 c7             	mov    %rax,%rdi
     5d7:	e8 00 00 00 00       	callq  5dc <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
     5dc:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     5e3:	48 89 c7             	mov    %rax,%rdi
     5e6:	e8 00 00 00 00       	callq  5eb <_ZN6Parser14checkVariablesEP7QString+0x2cf>
     5eb:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
     5f1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     5f8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ff <_ZN6Parser14checkVariablesEP7QString+0x2e3>
     5ff:	48 89 c7             	mov    %rax,%rdi
     602:	e8 00 00 00 00       	callq  607 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
     607:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     60e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     615:	ba 02 00 00 00       	mov    $0x2,%edx
     61a:	48 89 ce             	mov    %rcx,%rsi
     61d:	48 89 c7             	mov    %rax,%rdi
     620:	e8 00 00 00 00       	callq  625 <_ZN6Parser14checkVariablesEP7QString+0x309>
     625:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     62c:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     633:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
     63a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     640:	b9 00 00 00 00       	mov    $0x0,%ecx
     645:	48 89 c7             	mov    %rax,%rdi
     648:	e8 00 00 00 00       	callq  64d <_ZN6Parser14checkVariablesEP7QString+0x331>
     64d:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     654:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     65b:	48 89 d6             	mov    %rdx,%rsi
     65e:	48 89 c7             	mov    %rax,%rdi
     661:	e8 00 00 00 00       	callq  666 <_ZN6Parser14checkVariablesEP7QString+0x34a>
     666:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     66d:	48 89 c7             	mov    %rax,%rdi
     670:	e8 00 00 00 00       	callq  675 <_ZN6Parser14checkVariablesEP7QString+0x359>
     675:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     67c:	48 89 c7             	mov    %rax,%rdi
     67f:	e8 00 00 00 00       	callq  684 <_ZN6Parser14checkVariablesEP7QString+0x368>
     684:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     68b:	48 89 c7             	mov    %rax,%rdi
     68e:	e8 00 00 00 00       	callq  693 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
     693:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     69a:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
     6a1:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     6a8:	48 89 c6             	mov    %rax,%rsi
     6ab:	48 89 d7             	mov    %rdx,%rdi
     6ae:	e8 00 00 00 00       	callq  6b3 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
     6b3:	e9 5f fe ff ff       	jmpq   517 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
     6b8:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     6bf:	48 05 98 00 00 00    	add    $0x98,%rax
     6c5:	48 89 c7             	mov    %rax,%rdi
     6c8:	e8 00 00 00 00       	callq  6cd <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
     6cd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     6d4:	48 89 c7             	mov    %rax,%rdi
     6d7:	e8 00 00 00 00       	callq  6dc <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
     6dc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     6e3:	48 89 c7             	mov    %rax,%rdi
     6e6:	e8 00 00 00 00       	callq  6eb <_ZN6Parser14checkVariablesEP7QString+0x3cf>
     6eb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     6f2:	48 89 c7             	mov    %rax,%rdi
     6f5:	e8 00 00 00 00       	callq  6fa <_ZN6Parser14checkVariablesEP7QString+0x3de>
     6fa:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     701:	48 89 c7             	mov    %rax,%rdi
     704:	e8 00 00 00 00       	callq  709 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
     709:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     710:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
     717:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     71e:	48 89 d6             	mov    %rdx,%rsi
     721:	48 89 c7             	mov    %rax,%rdi
     724:	e8 00 00 00 00       	callq  729 <_ZN6Parser14checkVariablesEP7QString+0x40d>
     729:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     730:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
     737:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     73e:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
     745:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     74c:	48 89 d6             	mov    %rdx,%rsi
     74f:	48 89 c7             	mov    %rax,%rdi
     752:	e8 00 00 00 00       	callq  757 <_ZN6Parser14checkVariablesEP7QString+0x43b>
     757:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     75e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     765:	48 89 d6             	mov    %rdx,%rsi
     768:	48 89 c7             	mov    %rax,%rdi
     76b:	e8 00 00 00 00       	callq  770 <_ZN6Parser14checkVariablesEP7QString+0x454>
     770:	84 c0                	test   %al,%al
     772:	0f 84 de 03 00 00    	je     b56 <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
     778:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     77f:	48 89 c7             	mov    %rax,%rdi
     782:	e8 00 00 00 00       	callq  787 <_ZN6Parser14checkVariablesEP7QString+0x46b>
     787:	48 89 c2             	mov    %rax,%rdx
     78a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     791:	48 89 d6             	mov    %rdx,%rsi
     794:	48 89 c7             	mov    %rax,%rdi
     797:	e8 00 00 00 00       	callq  79c <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
     79c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     7a3:	48 89 c7             	mov    %rax,%rdi
     7a6:	e8 00 00 00 00       	callq  7ab <_ZN6Parser14checkVariablesEP7QString+0x48f>
     7ab:	48 89 c6             	mov    %rax,%rsi
     7ae:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     7b5:	b9 00 00 00 00       	mov    $0x0,%ecx
     7ba:	ba 00 00 00 00       	mov    $0x0,%edx
     7bf:	48 89 c7             	mov    %rax,%rdi
     7c2:	e8 00 00 00 00       	callq  7c7 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
     7c7:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
     7cd:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     7d4:	48 89 c7             	mov    %rax,%rdi
     7d7:	e8 00 00 00 00       	callq  7dc <_ZN6Parser14checkVariablesEP7QString+0x4c0>
     7dc:	48 89 c6             	mov    %rax,%rsi
     7df:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     7e6:	b9 00 00 00 00       	mov    $0x0,%ecx
     7eb:	ba 00 00 00 00       	mov    $0x0,%edx
     7f0:	48 89 c7             	mov    %rax,%rdi
     7f3:	e8 00 00 00 00       	callq  7f8 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
     7f8:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
     7fe:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     805:	48 89 c7             	mov    %rax,%rdi
     808:	e8 00 00 00 00       	callq  80d <_ZN6Parser14checkVariablesEP7QString+0x4f1>
     80d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
     813:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     81a:	48 89 c7             	mov    %rax,%rdi
     81d:	e8 00 00 00 00       	callq  822 <_ZN6Parser14checkVariablesEP7QString+0x506>
     822:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
     828:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
     82f:	00 00 00 

        if(ZZ>=0)
     832:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
     839:	0f 88 0d 02 00 00    	js     a4c <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
     83f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     846:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     84d:	ba 01 00 00 00       	mov    $0x1,%edx
     852:	48 89 ce             	mov    %rcx,%rsi
     855:	48 89 c7             	mov    %rax,%rdi
     858:	e8 00 00 00 00       	callq  85d <_ZN6Parser14checkVariablesEP7QString+0x541>
     85d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
     864:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     86b:	48 89 d6             	mov    %rdx,%rsi
     86e:	48 89 c7             	mov    %rax,%rdi
     871:	e8 00 00 00 00       	callq  876 <_ZN6Parser14checkVariablesEP7QString+0x55a>
     876:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     87d:	48 89 c7             	mov    %rax,%rdi
     880:	e8 00 00 00 00       	callq  885 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
     885:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     889:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     890:	ba 02 00 00 00       	mov    $0x2,%edx
     895:	48 89 ce             	mov    %rcx,%rsi
     898:	48 89 c7             	mov    %rax,%rdi
     89b:	e8 00 00 00 00       	callq  8a0 <_ZN6Parser14checkVariablesEP7QString+0x584>
     8a0:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
     8a4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     8ab:	48 89 d6             	mov    %rdx,%rsi
     8ae:	48 89 c7             	mov    %rax,%rdi
     8b1:	e8 00 00 00 00       	callq  8b6 <_ZN6Parser14checkVariablesEP7QString+0x59a>
     8b6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     8ba:	48 89 c7             	mov    %rax,%rdi
     8bd:	e8 00 00 00 00       	callq  8c2 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
     8c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     8c6:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     8cd:	ba 03 00 00 00       	mov    $0x3,%edx
     8d2:	48 89 ce             	mov    %rcx,%rsi
     8d5:	48 89 c7             	mov    %rax,%rdi
     8d8:	e8 00 00 00 00       	callq  8dd <_ZN6Parser14checkVariablesEP7QString+0x5c1>
     8dd:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
     8e1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     8e8:	48 89 d6             	mov    %rdx,%rsi
     8eb:	48 89 c7             	mov    %rax,%rdi
     8ee:	e8 00 00 00 00       	callq  8f3 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
     8f3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     8f7:	48 89 c7             	mov    %rax,%rdi
     8fa:	e8 00 00 00 00       	callq  8ff <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
     8ff:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     903:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
     90a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 911 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
     911:	48 89 ce             	mov    %rcx,%rsi
     914:	48 89 c7             	mov    %rax,%rdi
     917:	e8 00 00 00 00       	callq  91c <_ZN6Parser14checkVariablesEP7QString+0x600>
     91c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     920:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     927:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     92b:	48 89 ce             	mov    %rcx,%rsi
     92e:	48 89 c7             	mov    %rax,%rdi
     931:	e8 00 00 00 00       	callq  936 <_ZN6Parser14checkVariablesEP7QString+0x61a>
     936:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     93a:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     93e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 945 <_ZN6Parser14checkVariablesEP7QString+0x629>
     945:	48 89 ce             	mov    %rcx,%rsi
     948:	48 89 c7             	mov    %rax,%rdi
     94b:	e8 00 00 00 00       	callq  950 <_ZN6Parser14checkVariablesEP7QString+0x634>
     950:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     957:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     95e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     962:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     969:	48 89 c6             	mov    %rax,%rsi
     96c:	48 89 cf             	mov    %rcx,%rdi
     96f:	e8 00 00 00 00       	callq  974 <_ZN6Parser14checkVariablesEP7QString+0x658>
     974:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     978:	48 89 c7             	mov    %rax,%rdi
     97b:	e8 00 00 00 00       	callq  980 <_ZN6Parser14checkVariablesEP7QString+0x664>
     980:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     984:	48 89 c7             	mov    %rax,%rdi
     987:	e8 00 00 00 00       	callq  98c <_ZN6Parser14checkVariablesEP7QString+0x670>
     98c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     990:	48 89 c7             	mov    %rax,%rdi
     993:	e8 00 00 00 00       	callq  998 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
     998:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     99f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9a6 <_ZN6Parser14checkVariablesEP7QString+0x68a>
     9a6:	48 89 c7             	mov    %rax,%rdi
     9a9:	e8 00 00 00 00       	callq  9ae <_ZN6Parser14checkVariablesEP7QString+0x692>
     9ae:	84 c0                	test   %al,%al
     9b0:	74 0a                	je     9bc <_ZN6Parser14checkVariablesEP7QString+0x6a0>
     9b2:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
     9b9:	00 00 00 
            if(type=="port")    iType = 80;
     9bc:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     9c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9ca <_ZN6Parser14checkVariablesEP7QString+0x6ae>
     9ca:	48 89 c7             	mov    %rax,%rdi
     9cd:	e8 00 00 00 00       	callq  9d2 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
     9d2:	84 c0                	test   %al,%al
     9d4:	74 0a                	je     9e0 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
     9d6:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
     9dd:	00 00 00 

            index++;
     9e0:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
     9e7:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
     9ed:	88 45 e0             	mov    %al,-0x20(%rbp)
     9f0:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     9f7:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     9fe:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     a02:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     a09:	48 89 c6             	mov    %rax,%rsi
     a0c:	48 89 cf             	mov    %rcx,%rdi
     a0f:	e8 00 00 00 00       	callq  a14 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
     a14:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
     a1a:	88 45 e0             	mov    %al,-0x20(%rbp)
     a1d:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
     a23:	88 45 d0             	mov    %al,-0x30(%rbp)
     a26:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     a2d:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     a34:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     a38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     a3c:	48 89 c6             	mov    %rax,%rsi
     a3f:	48 89 cf             	mov    %rcx,%rdi
     a42:	e8 00 00 00 00       	callq  a47 <_ZN6Parser14checkVariablesEP7QString+0x72b>
     a47:	e9 e7 00 00 00       	jmpq   b33 <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
     a4c:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
     a53:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     a57:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
     a5e:	ba 00 00 00 00       	mov    $0x0,%edx
     a63:	48 89 ce             	mov    %rcx,%rsi
     a66:	48 89 c7             	mov    %rax,%rdi
     a69:	e8 00 00 00 00       	callq  a6e <_ZN6Parser14checkVariablesEP7QString+0x752>
     a6e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     a72:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     a79:	48 89 d6             	mov    %rdx,%rsi
     a7c:	48 89 c7             	mov    %rax,%rdi
     a7f:	e8 00 00 00 00       	callq  a84 <_ZN6Parser14checkVariablesEP7QString+0x768>
     a84:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     a88:	48 89 c7             	mov    %rax,%rdi
     a8b:	e8 00 00 00 00       	callq  a90 <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
     a90:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     a94:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a9b <_ZN6Parser14checkVariablesEP7QString+0x77f>
     a9b:	48 89 c7             	mov    %rax,%rdi
     a9e:	e8 00 00 00 00       	callq  aa3 <_ZN6Parser14checkVariablesEP7QString+0x787>
     aa3:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     aaa:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     ab1:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     ab5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     abc:	48 89 c6             	mov    %rax,%rsi
     abf:	48 89 cf             	mov    %rcx,%rdi
     ac2:	e8 00 00 00 00       	callq  ac7 <_ZN6Parser14checkVariablesEP7QString+0x7ab>
     ac7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     acb:	48 89 c7             	mov    %rax,%rdi
     ace:	e8 00 00 00 00       	callq  ad3 <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
     ad3:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
     ad9:	88 45 e0             	mov    %al,-0x20(%rbp)
     adc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     ae3:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     aea:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     aee:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     af5:	48 89 c6             	mov    %rax,%rsi
     af8:	48 89 cf             	mov    %rcx,%rdi
     afb:	e8 00 00 00 00       	callq  b00 <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
     b00:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
     b06:	88 45 e0             	mov    %al,-0x20(%rbp)
     b09:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
     b0f:	88 45 d0             	mov    %al,-0x30(%rbp)
     b12:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
     b19:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     b20:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     b24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b28:	48 89 c6             	mov    %rax,%rsi
     b2b:	48 89 cf             	mov    %rcx,%rdi
     b2e:	e8 00 00 00 00       	callq  b33 <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
     b33:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     b3a:	48 89 c7             	mov    %rax,%rdi
     b3d:	e8 00 00 00 00       	callq  b42 <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
     b42:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     b49:	48 89 c7             	mov    %rax,%rdi
     b4c:	e8 00 00 00 00       	callq  b51 <_ZN6Parser14checkVariablesEP7QString+0x835>
     b51:	e9 e1 fb ff ff       	jmpq   737 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
     b56:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     b5c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     b63:	48 89 c7             	mov    %rax,%rdi
     b66:	e8 00 00 00 00       	callq  b6b <_ZN6Parser14checkVariablesEP7QString+0x84f>
     b6b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     b72:	48 89 c7             	mov    %rax,%rdi
     b75:	e8 00 00 00 00       	callq  b7a <_ZN6Parser14checkVariablesEP7QString+0x85e>
     b7a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     b81:	48 89 c7             	mov    %rax,%rdi
     b84:	e8 00 00 00 00       	callq  b89 <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
     b89:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     b90:	48 89 c7             	mov    %rax,%rdi
     b93:	e8 00 00 00 00       	callq  b98 <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
     b98:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     b9f:	48 89 c7             	mov    %rax,%rdi
     ba2:	e8 00 00 00 00       	callq  ba7 <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
     ba7:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     bae:	48 89 c7             	mov    %rax,%rdi
     bb1:	e8 00 00 00 00       	callq  bb6 <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
     bb6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     bbd:	48 89 c7             	mov    %rax,%rdi
     bc0:	e8 00 00 00 00       	callq  bc5 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
     bc5:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     bcc:	48 89 c7             	mov    %rax,%rdi
     bcf:	e8 00 00 00 00       	callq  bd4 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     bd4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     bdb:	48 89 c7             	mov    %rax,%rdi
     bde:	e8 00 00 00 00       	callq  be3 <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     be3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     bea:	48 89 c7             	mov    %rax,%rdi
     bed:	e8 00 00 00 00       	callq  bf2 <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
     bf2:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     bf9:	48 89 c7             	mov    %rax,%rdi
     bfc:	e8 00 00 00 00       	callq  c01 <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
     c01:	89 d8                	mov    %ebx,%eax
}
     c03:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     c07:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     c0e:	00 00 
     c10:	0f 84 03 03 00 00    	je     f19 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
     c16:	e9 f9 02 00 00       	jmpq   f14 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
     c1b:	48 89 c3             	mov    %rax,%rbx
     c1e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     c25:	48 89 c7             	mov    %rax,%rdi
     c28:	e8 00 00 00 00       	callq  c2d <_ZN6Parser14checkVariablesEP7QString+0x911>
     c2d:	eb 17                	jmp    c46 <_ZN6Parser14checkVariablesEP7QString+0x92a>
     c2f:	48 89 c3             	mov    %rax,%rbx
     c32:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c39:	48 89 c7             	mov    %rax,%rdi
     c3c:	e8 00 00 00 00       	callq  c41 <_ZN6Parser14checkVariablesEP7QString+0x925>
     c41:	eb 03                	jmp    c46 <_ZN6Parser14checkVariablesEP7QString+0x92a>
     c43:	48 89 c3             	mov    %rax,%rbx
     c46:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     c4d:	48 89 c7             	mov    %rax,%rdi
     c50:	e8 00 00 00 00       	callq  c55 <_ZN6Parser14checkVariablesEP7QString+0x939>
     c55:	e9 a0 02 00 00       	jmpq   efa <_ZN6Parser14checkVariablesEP7QString+0xbde>
     c5a:	48 89 c3             	mov    %rax,%rbx
     c5d:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c64:	48 89 c7             	mov    %rax,%rdi
     c67:	e8 00 00 00 00       	callq  c6c <_ZN6Parser14checkVariablesEP7QString+0x950>
     c6c:	e9 89 02 00 00       	jmpq   efa <_ZN6Parser14checkVariablesEP7QString+0xbde>
     c71:	48 89 c3             	mov    %rax,%rbx
     c74:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     c7b:	48 89 c7             	mov    %rax,%rdi
     c7e:	e8 00 00 00 00       	callq  c83 <_ZN6Parser14checkVariablesEP7QString+0x967>
     c83:	eb 17                	jmp    c9c <_ZN6Parser14checkVariablesEP7QString+0x980>
     c85:	48 89 c3             	mov    %rax,%rbx
     c88:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     c8f:	48 89 c7             	mov    %rax,%rdi
     c92:	e8 00 00 00 00       	callq  c97 <_ZN6Parser14checkVariablesEP7QString+0x97b>
     c97:	eb 03                	jmp    c9c <_ZN6Parser14checkVariablesEP7QString+0x980>
     c99:	48 89 c3             	mov    %rax,%rbx
     c9c:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     ca3:	48 89 c7             	mov    %rax,%rdi
     ca6:	e8 00 00 00 00       	callq  cab <_ZN6Parser14checkVariablesEP7QString+0x98f>
     cab:	e9 36 02 00 00       	jmpq   ee6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
     cb0:	48 89 c3             	mov    %rax,%rbx
     cb3:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     cba:	48 89 c7             	mov    %rax,%rdi
     cbd:	e8 00 00 00 00       	callq  cc2 <_ZN6Parser14checkVariablesEP7QString+0x9a6>
     cc2:	e9 1f 02 00 00       	jmpq   ee6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
     cc7:	48 89 c3             	mov    %rax,%rbx
     cca:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     cd1:	48 89 c7             	mov    %rax,%rdi
     cd4:	e8 00 00 00 00       	callq  cd9 <_ZN6Parser14checkVariablesEP7QString+0x9bd>
     cd9:	e9 f4 01 00 00       	jmpq   ed2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
     cde:	48 89 c3             	mov    %rax,%rbx
     ce1:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     ce8:	48 89 c7             	mov    %rax,%rdi
     ceb:	e8 00 00 00 00       	callq  cf0 <_ZN6Parser14checkVariablesEP7QString+0x9d4>
     cf0:	e9 dd 01 00 00       	jmpq   ed2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
     cf5:	48 89 c3             	mov    %rax,%rbx
     cf8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     cff:	48 89 c7             	mov    %rax,%rdi
     d02:	e8 00 00 00 00       	callq  d07 <_ZN6Parser14checkVariablesEP7QString+0x9eb>
     d07:	e9 b2 01 00 00       	jmpq   ebe <_ZN6Parser14checkVariablesEP7QString+0xba2>
     d0c:	48 89 c3             	mov    %rax,%rbx
     d0f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     d16:	48 89 c7             	mov    %rax,%rdi
     d19:	e8 00 00 00 00       	callq  d1e <_ZN6Parser14checkVariablesEP7QString+0xa02>
     d1e:	e9 9b 01 00 00       	jmpq   ebe <_ZN6Parser14checkVariablesEP7QString+0xba2>
     d23:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
     d26:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     d2d:	48 89 c7             	mov    %rax,%rdi
     d30:	e8 00 00 00 00       	callq  d35 <_ZN6Parser14checkVariablesEP7QString+0xa19>
     d35:	e9 34 01 00 00       	jmpq   e6e <_ZN6Parser14checkVariablesEP7QString+0xb52>
     d3a:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
     d3d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     d44:	48 89 c7             	mov    %rax,%rdi
     d47:	e8 00 00 00 00       	callq  d4c <_ZN6Parser14checkVariablesEP7QString+0xa30>
     d4c:	e9 1d 01 00 00       	jmpq   e6e <_ZN6Parser14checkVariablesEP7QString+0xb52>
     d51:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
     d54:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     d5b:	48 89 c7             	mov    %rax,%rdi
     d5e:	e8 00 00 00 00       	callq  d63 <_ZN6Parser14checkVariablesEP7QString+0xa47>
     d63:	eb 03                	jmp    d68 <_ZN6Parser14checkVariablesEP7QString+0xa4c>
     d65:	48 89 c3             	mov    %rax,%rbx
     d68:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     d6f:	48 89 c7             	mov    %rax,%rdi
     d72:	e8 00 00 00 00       	callq  d77 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
     d77:	eb 03                	jmp    d7c <_ZN6Parser14checkVariablesEP7QString+0xa60>
     d79:	48 89 c3             	mov    %rax,%rbx
     d7c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     d83:	48 89 c7             	mov    %rax,%rdi
     d86:	e8 00 00 00 00       	callq  d8b <_ZN6Parser14checkVariablesEP7QString+0xa6f>
     d8b:	e9 de 00 00 00       	jmpq   e6e <_ZN6Parser14checkVariablesEP7QString+0xb52>
     d90:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
     d93:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     d9a:	48 89 c7             	mov    %rax,%rdi
     d9d:	e8 00 00 00 00       	callq  da2 <_ZN6Parser14checkVariablesEP7QString+0xa86>
     da2:	eb 7a                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     da4:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
     da7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     dab:	48 89 c7             	mov    %rax,%rdi
     dae:	e8 00 00 00 00       	callq  db3 <_ZN6Parser14checkVariablesEP7QString+0xa97>
     db3:	eb 69                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     db5:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
     db8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     dbc:	48 89 c7             	mov    %rax,%rdi
     dbf:	e8 00 00 00 00       	callq  dc4 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
     dc4:	eb 58                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     dc6:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
     dc9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     dcd:	48 89 c7             	mov    %rax,%rdi
     dd0:	e8 00 00 00 00       	callq  dd5 <_ZN6Parser14checkVariablesEP7QString+0xab9>
     dd5:	eb 03                	jmp    dda <_ZN6Parser14checkVariablesEP7QString+0xabe>
     dd7:	48 89 c3             	mov    %rax,%rbx
     dda:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     dde:	48 89 c7             	mov    %rax,%rdi
     de1:	e8 00 00 00 00       	callq  de6 <_ZN6Parser14checkVariablesEP7QString+0xaca>
     de6:	eb 03                	jmp    deb <_ZN6Parser14checkVariablesEP7QString+0xacf>
     de8:	48 89 c3             	mov    %rax,%rbx
     deb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     def:	48 89 c7             	mov    %rax,%rdi
     df2:	e8 00 00 00 00       	callq  df7 <_ZN6Parser14checkVariablesEP7QString+0xadb>
     df7:	eb 25                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     df9:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
     dfc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e00:	48 89 c7             	mov    %rax,%rdi
     e03:	e8 00 00 00 00       	callq  e08 <_ZN6Parser14checkVariablesEP7QString+0xaec>
     e08:	eb 14                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     e0a:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
     e0d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e11:	48 89 c7             	mov    %rax,%rdi
     e14:	e8 00 00 00 00       	callq  e19 <_ZN6Parser14checkVariablesEP7QString+0xafd>
     e19:	eb 03                	jmp    e1e <_ZN6Parser14checkVariablesEP7QString+0xb02>
     e1b:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
     e1e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     e25:	48 89 c7             	mov    %rax,%rdi
     e28:	e8 00 00 00 00       	callq  e2d <_ZN6Parser14checkVariablesEP7QString+0xb11>
     e2d:	eb 03                	jmp    e32 <_ZN6Parser14checkVariablesEP7QString+0xb16>
     e2f:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     e32:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     e39:	48 89 c7             	mov    %rax,%rdi
     e3c:	e8 00 00 00 00       	callq  e41 <_ZN6Parser14checkVariablesEP7QString+0xb25>
     e41:	eb 03                	jmp    e46 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
     e43:	48 89 c3             	mov    %rax,%rbx
     e46:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     e4d:	48 89 c7             	mov    %rax,%rdi
     e50:	e8 00 00 00 00       	callq  e55 <_ZN6Parser14checkVariablesEP7QString+0xb39>
     e55:	eb 03                	jmp    e5a <_ZN6Parser14checkVariablesEP7QString+0xb3e>
     e57:	48 89 c3             	mov    %rax,%rbx
     e5a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     e61:	48 89 c7             	mov    %rax,%rdi
     e64:	e8 00 00 00 00       	callq  e69 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
     e69:	eb 03                	jmp    e6e <_ZN6Parser14checkVariablesEP7QString+0xb52>
     e6b:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
     e6e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     e75:	48 89 c7             	mov    %rax,%rdi
     e78:	e8 00 00 00 00       	callq  e7d <_ZN6Parser14checkVariablesEP7QString+0xb61>
     e7d:	eb 03                	jmp    e82 <_ZN6Parser14checkVariablesEP7QString+0xb66>
     e7f:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
     e82:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     e89:	48 89 c7             	mov    %rax,%rdi
     e8c:	e8 00 00 00 00       	callq  e91 <_ZN6Parser14checkVariablesEP7QString+0xb75>
     e91:	eb 03                	jmp    e96 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
     e93:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
     e96:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     e9d:	48 89 c7             	mov    %rax,%rdi
     ea0:	e8 00 00 00 00       	callq  ea5 <_ZN6Parser14checkVariablesEP7QString+0xb89>
     ea5:	eb 03                	jmp    eaa <_ZN6Parser14checkVariablesEP7QString+0xb8e>
     ea7:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
     eaa:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     eb1:	48 89 c7             	mov    %rax,%rdi
     eb4:	e8 00 00 00 00       	callq  eb9 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
     eb9:	eb 03                	jmp    ebe <_ZN6Parser14checkVariablesEP7QString+0xba2>
     ebb:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
     ebe:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     ec5:	48 89 c7             	mov    %rax,%rdi
     ec8:	e8 00 00 00 00       	callq  ecd <_ZN6Parser14checkVariablesEP7QString+0xbb1>
     ecd:	eb 03                	jmp    ed2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
     ecf:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
     ed2:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     ed9:	48 89 c7             	mov    %rax,%rdi
     edc:	e8 00 00 00 00       	callq  ee1 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
     ee1:	eb 03                	jmp    ee6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
     ee3:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     ee6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     eed:	48 89 c7             	mov    %rax,%rdi
     ef0:	e8 00 00 00 00       	callq  ef5 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
     ef5:	eb 03                	jmp    efa <_ZN6Parser14checkVariablesEP7QString+0xbde>
     ef7:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
     efa:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     f01:	48 89 c7             	mov    %rax,%rdi
     f04:	e8 00 00 00 00       	callq  f09 <_ZN6Parser14checkVariablesEP7QString+0xbed>
     f09:	48 89 d8             	mov    %rbx,%rax
     f0c:	48 89 c7             	mov    %rax,%rdi
     f0f:	e8 00 00 00 00       	callq  f14 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
     f14:	e8 00 00 00 00       	callq  f19 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
     f19:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
     f20:	5b                   	pop    %rbx
     f21:	5d                   	pop    %rbp
     f22:	c3                   	retq   
     f23:	90                   	nop

0000000000000f24 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
     f24:	55                   	push   %rbp
     f25:	48 89 e5             	mov    %rsp,%rbp
     f28:	53                   	push   %rbx
     f29:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
     f30:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
     f37:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
     f3e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
     f45:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     f4c:	00 00 
     f4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     f52:	31 c0                	xor    %eax,%eax
    int cnt = 0;
     f54:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
     f5b:	00 00 00 
    QString result;
     f5e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     f65:	48 89 c7             	mov    %rax,%rdi
     f68:	e8 00 00 00 00       	callq  f6d <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
     f6d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     f71:	48 89 c7             	mov    %rax,%rdi
     f74:	e8 00 00 00 00       	callq  f79 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
     f79:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     f80:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     f84:	48 89 d6             	mov    %rdx,%rsi
     f87:	48 89 c7             	mov    %rax,%rdi
     f8a:	e8 00 00 00 00       	callq  f8f <_ZN6Parser17QStringList_printE11QStringList+0x6b>
     f8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     f93:	48 89 45 80          	mov    %rax,-0x80(%rbp)
     f97:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     f9e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     fa2:	48 89 d6             	mov    %rdx,%rsi
     fa5:	48 89 c7             	mov    %rax,%rdi
     fa8:	e8 00 00 00 00       	callq  fad <_ZN6Parser17QStringList_printE11QStringList+0x89>
     fad:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     fb1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     fb5:	48 89 d6             	mov    %rdx,%rsi
     fb8:	48 89 c7             	mov    %rax,%rdi
     fbb:	e8 00 00 00 00       	callq  fc0 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
     fc0:	84 c0                	test   %al,%al
     fc2:	0f 84 e0 00 00 00    	je     10a8 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
     fc8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     fcc:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
     fd2:	ba 0a 00 00 00       	mov    $0xa,%edx
     fd7:	89 ce                	mov    %ecx,%esi
     fd9:	48 89 c7             	mov    %rax,%rdi
     fdc:	e8 00 00 00 00       	callq  fe1 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
     fe1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     fe5:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     fe9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ff0 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
     ff0:	48 89 c7             	mov    %rax,%rdi
     ff3:	e8 00 00 00 00       	callq  ff8 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
     ff8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     ffc:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1000:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1007 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1007:	48 89 ce             	mov    %rcx,%rsi
    100a:	48 89 c7             	mov    %rax,%rdi
    100d:	e8 00 00 00 00       	callq  1012 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1012:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1016:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    101d:	48 89 d6             	mov    %rdx,%rsi
    1020:	48 89 c7             	mov    %rax,%rdi
    1023:	e8 00 00 00 00       	callq  1028 <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1028:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    102c:	48 89 c7             	mov    %rax,%rdi
    102f:	e8 00 00 00 00       	callq  1034 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1034:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1038:	48 89 c7             	mov    %rax,%rdi
    103b:	e8 00 00 00 00       	callq  1040 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1040:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1044:	48 89 c7             	mov    %rax,%rdi
    1047:	e8 00 00 00 00       	callq  104c <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    104c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1050:	48 89 c7             	mov    %rax,%rdi
    1053:	e8 00 00 00 00       	callq  1058 <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1058:	48 89 c2             	mov    %rax,%rdx
    105b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    105f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1066 <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1066:	48 89 c7             	mov    %rax,%rdi
    1069:	e8 00 00 00 00       	callq  106e <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    106e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1072:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1079:	48 89 d6             	mov    %rdx,%rsi
    107c:	48 89 c7             	mov    %rax,%rdi
    107f:	e8 00 00 00 00       	callq  1084 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1084:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1088:	48 89 c7             	mov    %rax,%rdi
    108b:	e8 00 00 00 00       	callq  1090 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1090:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1097:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    109b:	48 89 c7             	mov    %rax,%rdi
    109e:	e8 00 00 00 00       	callq  10a3 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    10a3:	e9 ef fe ff ff       	jmpq   f97 <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    10a8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    10af:	48 89 c7             	mov    %rax,%rdi
    10b2:	e8 00 00 00 00       	callq  10b7 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    10b7:	90                   	nop
    10b8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    10bf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    10c3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    10ca:	00 00 
    10cc:	74 68                	je     1136 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    10ce:	eb 61                	jmp    1131 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    10d0:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    10d3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    10d7:	48 89 c7             	mov    %rax,%rdi
    10da:	e8 00 00 00 00       	callq  10df <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    10df:	eb 03                	jmp    10e4 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    10e1:	48 89 c3             	mov    %rax,%rbx
    10e4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    10e8:	48 89 c7             	mov    %rax,%rdi
    10eb:	e8 00 00 00 00       	callq  10f0 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    10f0:	eb 03                	jmp    10f5 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    10f2:	48 89 c3             	mov    %rax,%rbx
    10f5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    10f9:	48 89 c7             	mov    %rax,%rdi
    10fc:	e8 00 00 00 00       	callq  1101 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1101:	eb 14                	jmp    1117 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1103:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1106:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    110a:	48 89 c7             	mov    %rax,%rdi
    110d:	e8 00 00 00 00       	callq  1112 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1112:	eb 03                	jmp    1117 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1114:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1117:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    111e:	48 89 c7             	mov    %rax,%rdi
    1121:	e8 00 00 00 00       	callq  1126 <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1126:	48 89 d8             	mov    %rbx,%rax
    1129:	48 89 c7             	mov    %rax,%rdi
    112c:	e8 00 00 00 00       	callq  1131 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1131:	e8 00 00 00 00       	callq  1136 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1136:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    113d:	5b                   	pop    %rbx
    113e:	5d                   	pop    %rbp
    113f:	c3                   	retq   

0000000000001140 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1140:	55                   	push   %rbp
    1141:	48 89 e5             	mov    %rsp,%rbp
    1144:	48 83 ec 10          	sub    $0x10,%rsp
    1148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    114c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1154:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1158:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    115c:	ba 01 00 00 00       	mov    $0x1,%edx
    1161:	48 89 c6             	mov    %rax,%rsi
    1164:	48 89 cf             	mov    %rcx,%rdi
    1167:	e8 00 00 00 00       	callq  116c <_ZN6Parser14addIncludeFileE7QString+0x2c>
    116c:	83 f0 01             	xor    $0x1,%eax
    116f:	84 c0                	test   %al,%al
    1171:	74 17                	je     118a <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1177:	48 8d 50 58          	lea    0x58(%rax),%rdx
    117b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    117f:	48 89 c6             	mov    %rax,%rsi
    1182:	48 89 d7             	mov    %rdx,%rdi
    1185:	e8 00 00 00 00       	callq  118a <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    118a:	90                   	nop
    118b:	c9                   	leaveq 
    118c:	c3                   	retq   
    118d:	90                   	nop

000000000000118e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    118e:	55                   	push   %rbp
    118f:	48 89 e5             	mov    %rsp,%rbp
    1192:	41 55                	push   %r13
    1194:	41 54                	push   %r12
    1196:	53                   	push   %rbx
    1197:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    119e:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    11a5:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    11ac:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    11b3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    11ba:	00 00 
    11bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    11c0:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    11c2:	bb 00 00 00 00       	mov    $0x0,%ebx
    11c7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    11ce:	48 89 c7             	mov    %rax,%rdi
    11d1:	e8 00 00 00 00       	callq  11d6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    11d6:	83 f8 04             	cmp    $0x4,%eax
    11d9:	74 3a                	je     1215 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    11db:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    11df:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    11e6:	48 89 d6             	mov    %rdx,%rsi
    11e9:	48 89 c7             	mov    %rax,%rdi
    11ec:	e8 00 00 00 00       	callq  11f1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    11f1:	bb 01 00 00 00       	mov    $0x1,%ebx
    11f6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    11fa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1201 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1201:	48 89 c7             	mov    %rax,%rdi
    1204:	e8 00 00 00 00       	callq  1209 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1209:	84 c0                	test   %al,%al
    120b:	74 08                	je     1215 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    120d:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1213:	eb 06                	jmp    121b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1215:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    121b:	84 db                	test   %bl,%bl
    121d:	74 0d                	je     122c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    121f:	90                   	nop
    1220:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1224:	48 89 c7             	mov    %rax,%rdi
    1227:	e8 00 00 00 00       	callq  122c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    122c:	45 84 ed             	test   %r13b,%r13b
    122f:	74 0b                	je     123c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1231:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1237:	e9 87 02 00 00       	jmpq   14c3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    123c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1243:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    124a:	48 89 d6             	mov    %rdx,%rsi
    124d:	48 89 c7             	mov    %rax,%rdi
    1250:	e8 00 00 00 00       	callq  1255 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1255:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    125c:	00 00 00 
     if (attributes.hasAttribute("id")) {
    125f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1266:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 126d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    126d:	48 89 c7             	mov    %rax,%rdi
    1270:	e8 00 00 00 00       	callq  1275 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1275:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    127c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1283:	48 89 d6             	mov    %rdx,%rsi
    1286:	48 89 c7             	mov    %rax,%rdi
    1289:	e8 00 00 00 00       	callq  128e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    128e:	89 c3                	mov    %eax,%ebx
    1290:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1297:	48 89 c7             	mov    %rax,%rdi
    129a:	e8 00 00 00 00       	callq  129f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    129f:	84 db                	test   %bl,%bl
    12a1:	74 6c                	je     130f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    12a3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    12aa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12b1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    12b1:	48 89 c7             	mov    %rax,%rdi
    12b4:	e8 00 00 00 00       	callq  12b9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    12b9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    12bd:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    12c4:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    12cb:	48 89 ce             	mov    %rcx,%rsi
    12ce:	48 89 c7             	mov    %rax,%rdi
    12d1:	e8 00 00 00 00       	callq  12d6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    12d6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    12da:	ba 0a 00 00 00       	mov    $0xa,%edx
    12df:	be 00 00 00 00       	mov    $0x0,%esi
    12e4:	48 89 c7             	mov    %rax,%rdi
    12e7:	e8 00 00 00 00       	callq  12ec <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    12ec:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    12f2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    12f6:	48 89 c7             	mov    %rax,%rdi
    12f9:	e8 00 00 00 00       	callq  12fe <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    12fe:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1305:	48 89 c7             	mov    %rax,%rdi
    1308:	e8 00 00 00 00       	callq  130d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    130d:	eb 0b                	jmp    131a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    130f:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1315:	e9 9a 01 00 00       	jmpq   14b4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    131a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1321:	48 89 c7             	mov    %rax,%rdi
    1324:	e8 00 00 00 00       	callq  1329 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1329:	bb 00 00 00 00       	mov    $0x0,%ebx
    132e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1335:	48 89 c7             	mov    %rax,%rdi
    1338:	e8 00 00 00 00       	callq  133d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    133d:	83 f8 05             	cmp    $0x5,%eax
    1340:	75 35                	jne    1377 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1342:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1346:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    134d:	48 89 d6             	mov    %rdx,%rsi
    1350:	48 89 c7             	mov    %rax,%rdi
    1353:	e8 00 00 00 00       	callq  1358 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    1358:	bb 01 00 00 00       	mov    $0x1,%ebx
    135d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1361:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1368 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    1368:	48 89 c7             	mov    %rax,%rdi
    136b:	e8 00 00 00 00       	callq  1370 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    1370:	83 f0 01             	xor    $0x1,%eax
    1373:	84 c0                	test   %al,%al
    1375:	74 08                	je     137f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    1377:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    137d:	eb 06                	jmp    1385 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    137f:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1385:	84 db                	test   %bl,%bl
    1387:	74 0d                	je     1396 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    1389:	90                   	nop
    138a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    138e:	48 89 c7             	mov    %rax,%rdi
    1391:	e8 00 00 00 00       	callq  1396 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    1396:	45 84 ed             	test   %r13b,%r13b
    1399:	0f 84 0f 01 00 00    	je     14ae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    139f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    13a6:	48 89 c7             	mov    %rax,%rdi
    13a9:	e8 00 00 00 00       	callq  13ae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    13ae:	83 f8 04             	cmp    $0x4,%eax
    13b1:	0f 94 c0             	sete   %al
    13b4:	84 c0                	test   %al,%al
    13b6:	0f 84 de 00 00 00    	je     149a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    13bc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13c0:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    13c7:	48 89 d6             	mov    %rdx,%rsi
    13ca:	48 89 c7             	mov    %rax,%rdi
    13cd:	e8 00 00 00 00       	callq  13d2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    13d2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13d6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 13dd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    13dd:	48 89 c7             	mov    %rax,%rdi
    13e0:	e8 00 00 00 00       	callq  13e5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    13e5:	89 c3                	mov    %eax,%ebx
    13e7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13eb:	48 89 c7             	mov    %rax,%rdi
    13ee:	e8 00 00 00 00       	callq  13f3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    13f3:	84 db                	test   %bl,%bl
    13f5:	0f 84 9f 00 00 00    	je     149a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    13fb:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1402:	48 89 c7             	mov    %rax,%rdi
    1405:	e8 00 00 00 00       	callq  140a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    140a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    140e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1415:	48 89 d6             	mov    %rdx,%rsi
    1418:	48 89 c7             	mov    %rax,%rdi
    141b:	e8 00 00 00 00       	callq  1420 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    1420:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1424:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1428:	48 89 d6             	mov    %rdx,%rsi
    142b:	48 89 c7             	mov    %rax,%rdi
    142e:	e8 00 00 00 00       	callq  1433 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    1433:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1437:	48 89 c7             	mov    %rax,%rdi
    143a:	e8 00 00 00 00       	callq  143f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    143f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1443:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    144a:	48 89 d6             	mov    %rdx,%rsi
    144d:	48 89 c7             	mov    %rax,%rdi
    1450:	e8 00 00 00 00       	callq  1455 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    1455:	84 c0                	test   %al,%al
    1457:	74 0d                	je     1466 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    1459:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    145f:	bb 00 00 00 00       	mov    $0x0,%ebx
    1464:	eb 22                	jmp    1488 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    1466:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    146d:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    1471:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    1478:	48 89 ce             	mov    %rcx,%rsi
    147b:	48 89 c7             	mov    %rax,%rdi
    147e:	e8 00 00 00 00       	callq  1483 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    1483:	bb 01 00 00 00       	mov    $0x1,%ebx
    1488:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    148c:	48 89 c7             	mov    %rax,%rdi
    148f:	e8 00 00 00 00       	callq  1494 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    1494:	83 fb 01             	cmp    $0x1,%ebx
    1497:	75 1b                	jne    14b4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    1499:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    149a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    14a1:	48 89 c7             	mov    %rax,%rdi
    14a4:	e8 00 00 00 00       	callq  14a9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    14a9:	e9 7b fe ff ff       	jmpq   1329 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    14ae:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    14b4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    14bb:	48 89 c7             	mov    %rax,%rdi
    14be:	e8 00 00 00 00       	callq  14c3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    14c3:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    14c6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    14ca:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    14d1:	00 00 
    14d3:	0f 84 d1 00 00 00    	je     15aa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    14d9:	e9 c7 00 00 00       	jmpq   15a5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    14de:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    14e1:	84 db                	test   %bl,%bl
    14e3:	74 0f                	je     14f4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    14e5:	90                   	nop
    14e6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    14ea:	48 89 c7             	mov    %rax,%rdi
    14ed:	e8 00 00 00 00       	callq  14f2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    14f2:	eb 01                	jmp    14f5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    14f4:	90                   	nop
    14f5:	4c 89 e0             	mov    %r12,%rax
    14f8:	48 89 c7             	mov    %rax,%rdi
    14fb:	e8 00 00 00 00       	callq  1500 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    1500:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    1503:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    150a:	48 89 c7             	mov    %rax,%rdi
    150d:	e8 00 00 00 00       	callq  1512 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    1512:	eb 77                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1514:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    1517:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    151b:	48 89 c7             	mov    %rax,%rdi
    151e:	e8 00 00 00 00       	callq  1523 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    1523:	eb 03                	jmp    1528 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    1525:	48 89 c3             	mov    %rax,%rbx
    1528:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    152f:	48 89 c7             	mov    %rax,%rdi
    1532:	e8 00 00 00 00       	callq  1537 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    1537:	eb 52                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1539:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    153c:	84 db                	test   %bl,%bl
    153e:	74 0f                	je     154f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    1540:	90                   	nop
    1541:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1545:	48 89 c7             	mov    %rax,%rdi
    1548:	e8 00 00 00 00       	callq  154d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    154d:	eb 01                	jmp    1550 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    154f:	90                   	nop
    1550:	4c 89 e3             	mov    %r12,%rbx
    1553:	eb 36                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1555:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    1558:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    155c:	48 89 c7             	mov    %rax,%rdi
    155f:	e8 00 00 00 00       	callq  1564 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    1564:	eb 25                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1566:	48 89 c3             	mov    %rax,%rbx
    1569:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    156d:	48 89 c7             	mov    %rax,%rdi
    1570:	e8 00 00 00 00       	callq  1575 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    1575:	eb 14                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1577:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    157a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    157e:	48 89 c7             	mov    %rax,%rdi
    1581:	e8 00 00 00 00       	callq  1586 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    1586:	eb 03                	jmp    158b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    1588:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    158b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1592:	48 89 c7             	mov    %rax,%rdi
    1595:	e8 00 00 00 00       	callq  159a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    159a:	48 89 d8             	mov    %rbx,%rax
    159d:	48 89 c7             	mov    %rax,%rdi
    15a0:	e8 00 00 00 00       	callq  15a5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    15a5:	e8 00 00 00 00       	callq  15aa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    15aa:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    15b1:	5b                   	pop    %rbx
    15b2:	41 5c                	pop    %r12
    15b4:	41 5d                	pop    %r13
    15b6:	5d                   	pop    %rbp
    15b7:	c3                   	retq   

00000000000015b8 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    15b8:	55                   	push   %rbp
    15b9:	48 89 e5             	mov    %rsp,%rbp
    15bc:	53                   	push   %rbx
    15bd:	48 83 ec 68          	sub    $0x68,%rsp
    15c1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    15c5:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    15c9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    15cd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    15d4:	00 00 
    15d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    15da:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    15dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    15e0:	48 89 c7             	mov    %rax,%rdi
    15e3:	e8 00 00 00 00       	callq  15e8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    15e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    15ec:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    15f0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    15f4:	48 89 d6             	mov    %rdx,%rsi
    15f7:	48 89 c7             	mov    %rax,%rdi
    15fa:	e8 00 00 00 00       	callq  15ff <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    15ff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    1603:	48 89 c7             	mov    %rax,%rdi
    1606:	e8 00 00 00 00       	callq  160b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    160b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    160f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1613:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1617:	48 89 d6             	mov    %rdx,%rsi
    161a:	48 89 c7             	mov    %rax,%rdi
    161d:	e8 00 00 00 00       	callq  1622 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    1622:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1626:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    162a:	48 89 d6             	mov    %rdx,%rsi
    162d:	48 89 c7             	mov    %rax,%rdi
    1630:	e8 00 00 00 00       	callq  1635 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    1635:	84 c0                	test   %al,%al
    1637:	0f 84 d7 00 00 00    	je     1714 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    163d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1641:	48 89 c7             	mov    %rax,%rdi
    1644:	e8 00 00 00 00       	callq  1649 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    1649:	8b 08                	mov    (%rax),%ecx
    164b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    164f:	ba 0a 00 00 00       	mov    $0xa,%edx
    1654:	89 ce                	mov    %ecx,%esi
    1656:	48 89 c7             	mov    %rax,%rdi
    1659:	e8 00 00 00 00       	callq  165e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    165e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1662:	48 89 c7             	mov    %rax,%rdi
    1665:	e8 00 00 00 00       	callq  166a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    166a:	48 89 c2             	mov    %rax,%rdx
    166d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1671:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1678 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    1678:	48 89 c7             	mov    %rax,%rdi
    167b:	e8 00 00 00 00       	callq  1680 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    1680:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1684:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1688:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 168f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    168f:	48 89 ce             	mov    %rcx,%rsi
    1692:	48 89 c7             	mov    %rax,%rdi
    1695:	e8 00 00 00 00       	callq  169a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    169a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    169e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16a2:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    16a6:	48 89 ce             	mov    %rcx,%rsi
    16a9:	48 89 c7             	mov    %rax,%rdi
    16ac:	e8 00 00 00 00       	callq  16b1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    16b1:	90                   	nop
    16b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16b6:	48 89 c7             	mov    %rax,%rdi
    16b9:	e8 00 00 00 00       	callq  16be <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    16be:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    16c2:	48 89 c7             	mov    %rax,%rdi
    16c5:	e8 00 00 00 00       	callq  16ca <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    16ca:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    16ce:	48 89 c7             	mov    %rax,%rdi
    16d1:	e8 00 00 00 00       	callq  16d6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    16d6:	eb 3d                	jmp    1715 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    16d8:	48 89 c3             	mov    %rax,%rbx
    16db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16df:	48 89 c7             	mov    %rax,%rdi
    16e2:	e8 00 00 00 00       	callq  16e7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    16e7:	eb 03                	jmp    16ec <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    16e9:	48 89 c3             	mov    %rax,%rbx
    16ec:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    16f0:	48 89 c7             	mov    %rax,%rdi
    16f3:	e8 00 00 00 00       	callq  16f8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    16f8:	eb 03                	jmp    16fd <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    16fa:	48 89 c3             	mov    %rax,%rbx
    16fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1701:	48 89 c7             	mov    %rax,%rdi
    1704:	e8 00 00 00 00       	callq  1709 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    1709:	48 89 d8             	mov    %rbx,%rax
    170c:	48 89 c7             	mov    %rax,%rdi
    170f:	e8 00 00 00 00       	callq  1714 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    1714:	90                   	nop
    1715:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    1719:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    171d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1724:	00 00 
    1726:	74 05                	je     172d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    1728:	e8 00 00 00 00       	callq  172d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    172d:	48 83 c4 68          	add    $0x68,%rsp
    1731:	5b                   	pop    %rbx
    1732:	5d                   	pop    %rbp
    1733:	c3                   	retq   

0000000000001734 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    1734:	55                   	push   %rbp
    1735:	48 89 e5             	mov    %rsp,%rbp
    1738:	53                   	push   %rbx
    1739:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    1740:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    1744:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    1748:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    174f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1756:	00 00 
    1758:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    175c:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    175e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    1762:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1766:	48 89 d6             	mov    %rdx,%rsi
    1769:	48 89 c7             	mov    %rax,%rdi
    176c:	e8 00 00 00 00       	callq  1771 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    1771:	be 10 00 00 00       	mov    $0x10,%esi
    1776:	bf 01 00 00 00       	mov    $0x1,%edi
    177b:	e8 00 00 00 00       	callq  1780 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    1780:	89 c2                	mov    %eax,%edx
    1782:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1786:	89 d6                	mov    %edx,%esi
    1788:	48 89 c7             	mov    %rax,%rdi
    178b:	e8 00 00 00 00       	callq  1790 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    1790:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1794:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1798:	48 89 d6             	mov    %rdx,%rsi
    179b:	48 89 c7             	mov    %rax,%rdi
    179e:	e8 00 00 00 00       	callq  17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    17a3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    17a7:	48 89 c7             	mov    %rax,%rdi
    17aa:	e8 00 00 00 00       	callq  17af <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    17af:	83 f0 01             	xor    $0x1,%eax
    17b2:	84 c0                	test   %al,%al
    17b4:	74 1a                	je     17d0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    17b6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    17ba:	48 89 c7             	mov    %rax,%rdi
    17bd:	e8 00 00 00 00       	callq  17c2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    17c2:	83 f0 01             	xor    $0x1,%eax
    17c5:	84 c0                	test   %al,%al
    17c7:	74 07                	je     17d0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    17c9:	b8 01 00 00 00       	mov    $0x1,%eax
    17ce:	eb 05                	jmp    17d5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    17d0:	b8 00 00 00 00       	mov    $0x0,%eax
    17d5:	84 c0                	test   %al,%al
    17d7:	0f 84 cb 00 00 00    	je     18a8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    17dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    17e1:	48 89 c7             	mov    %rax,%rdi
    17e4:	e8 00 00 00 00       	callq  17e9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    17e9:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    17ec:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    17f0:	0f 84 a6 00 00 00    	je     189c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    17f6:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    17fa:	75 a7                	jne    17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    17fc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1800:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1804:	48 89 d6             	mov    %rdx,%rsi
    1807:	48 89 c7             	mov    %rax,%rdi
    180a:	e8 00 00 00 00       	callq  180f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    180f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1813:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 181a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    181a:	48 89 c7             	mov    %rax,%rdi
    181d:	e8 00 00 00 00       	callq  1822 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    1822:	89 c3                	mov    %eax,%ebx
    1824:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1828:	48 89 c7             	mov    %rax,%rdi
    182b:	e8 00 00 00 00       	callq  1830 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    1830:	84 db                	test   %bl,%bl
    1832:	75 6e                	jne    18a2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    1834:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1838:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    183c:	48 89 d6             	mov    %rdx,%rsi
    183f:	48 89 c7             	mov    %rax,%rdi
    1842:	e8 00 00 00 00       	callq  1847 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    1847:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    184b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1852 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    1852:	48 89 c7             	mov    %rax,%rdi
    1855:	e8 00 00 00 00       	callq  185a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    185a:	89 c3                	mov    %eax,%ebx
    185c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1860:	48 89 c7             	mov    %rax,%rdi
    1863:	e8 00 00 00 00       	callq  1868 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    1868:	84 db                	test   %bl,%bl
    186a:	0f 84 33 ff ff ff    	je     17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    1870:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    1877:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    187b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    187f:	48 89 ce             	mov    %rcx,%rsi
    1882:	48 89 c7             	mov    %rax,%rdi
    1885:	e8 00 00 00 00       	callq  188a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    188a:	83 f0 01             	xor    $0x1,%eax
    188d:	84 c0                	test   %al,%al
    188f:	0f 84 0e ff ff ff    	je     17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    1895:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    189a:	eb 11                	jmp    18ad <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    189c:	90                   	nop
    189d:	e9 01 ff ff ff       	jmpq   17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    18a2:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    18a3:	e9 fb fe ff ff       	jmpq   17a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    18a8:	bb 01 00 00 00       	mov    $0x1,%ebx
    18ad:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    18b1:	48 89 c7             	mov    %rax,%rdi
    18b4:	e8 00 00 00 00       	callq  18b9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    18b9:	83 fb 01             	cmp    $0x1,%ebx
    18bc:	74 07                	je     18c5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    18be:	bb 00 00 00 00       	mov    $0x0,%ebx
    18c3:	eb 06                	jmp    18cb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    18c5:	90                   	nop
    18c6:	bb 01 00 00 00       	mov    $0x1,%ebx
    18cb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    18cf:	48 89 c7             	mov    %rax,%rdi
    18d2:	e8 00 00 00 00       	callq  18d7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    18d7:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    18da:	90                   	nop
                    return;
                }
            }
        }
    }
}
    18db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    18df:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    18e6:	00 00 
    18e8:	74 54                	je     193e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    18ea:	eb 4d                	jmp    1939 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    18ec:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    18ef:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    18f3:	48 89 c7             	mov    %rax,%rdi
    18f6:	e8 00 00 00 00       	callq  18fb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    18fb:	eb 14                	jmp    1911 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    18fd:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    1900:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1904:	48 89 c7             	mov    %rax,%rdi
    1907:	e8 00 00 00 00       	callq  190c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    190c:	eb 03                	jmp    1911 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    190e:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    1911:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1915:	48 89 c7             	mov    %rax,%rdi
    1918:	e8 00 00 00 00       	callq  191d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    191d:	eb 03                	jmp    1922 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    191f:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    1922:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1926:	48 89 c7             	mov    %rax,%rdi
    1929:	e8 00 00 00 00       	callq  192e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    192e:	48 89 d8             	mov    %rbx,%rax
    1931:	48 89 c7             	mov    %rax,%rdi
    1934:	e8 00 00 00 00       	callq  1939 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    1939:	e8 00 00 00 00       	callq  193e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    193e:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    1945:	5b                   	pop    %rbx
    1946:	5d                   	pop    %rbp
    1947:	c3                   	retq   

0000000000001948 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    1948:	55                   	push   %rbp
    1949:	48 89 e5             	mov    %rsp,%rbp
    194c:	53                   	push   %rbx
    194d:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    1954:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    195b:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    1962:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    1969:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    196f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1976:	00 00 
    1978:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    197c:	31 c0                	xor    %eax,%eax


    QString str = Block;
    197e:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    1985:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    198c:	48 89 d6             	mov    %rdx,%rsi
    198f:	48 89 c7             	mov    %rax,%rdi
    1992:	e8 00 00 00 00       	callq  1997 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    1997:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    199e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    19a5:	48 89 d6             	mov    %rdx,%rsi
    19a8:	48 89 c7             	mov    %rax,%rdi
    19ab:	e8 00 00 00 00       	callq  19b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    19b0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    19b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19be <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    19be:	48 89 c7             	mov    %rax,%rdi
    19c1:	e8 00 00 00 00       	callq  19c6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    19c6:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    19cd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19d4:	b9 00 00 00 00       	mov    $0x0,%ecx
    19d9:	ba 01 00 00 00       	mov    $0x1,%edx
    19de:	48 89 c7             	mov    %rax,%rdi
    19e1:	e8 00 00 00 00       	callq  19e6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    19e6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    19ed:	48 89 c7             	mov    %rax,%rdi
    19f0:	e8 00 00 00 00       	callq  19f5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    19f5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19fc:	be 01 00 00 00       	mov    $0x1,%esi
    1a01:	48 89 c7             	mov    %rax,%rdi
    1a04:	e8 00 00 00 00       	callq  1a09 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    1a09:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1a10:	48 89 c7             	mov    %rax,%rdi
    1a13:	e8 00 00 00 00       	callq  1a18 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    1a18:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1a1f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1a26 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    1a26:	48 89 c7             	mov    %rax,%rdi
    1a29:	e8 00 00 00 00       	callq  1a2e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    1a2e:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    1a35:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1a3c:	b9 00 00 00 00       	mov    $0x0,%ecx
    1a41:	ba 01 00 00 00       	mov    $0x1,%edx
    1a46:	48 89 c7             	mov    %rax,%rdi
    1a49:	e8 00 00 00 00       	callq  1a4e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    1a4e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1a55:	48 89 c7             	mov    %rax,%rdi
    1a58:	e8 00 00 00 00       	callq  1a5d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    1a5d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1a64:	48 89 c7             	mov    %rax,%rdi
    1a67:	e8 00 00 00 00       	callq  1a6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    1a6c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1a73:	48 89 c7             	mov    %rax,%rdi
    1a76:	e8 00 00 00 00       	callq  1a7b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    1a7b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1a82:	48 89 c7             	mov    %rax,%rdi
    1a85:	e8 00 00 00 00       	callq  1a8a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    1a8a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a91:	48 89 c7             	mov    %rax,%rdi
    1a94:	e8 00 00 00 00       	callq  1a99 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    1a99:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    1aa0:	00 00 00 
    int lineInner = 0;
    1aa3:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    1aaa:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    1aad:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    1ab4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1abb:	b9 00 00 00 00       	mov    $0x0,%ecx
    1ac0:	ba 00 00 00 00       	mov    $0x0,%edx
    1ac5:	48 89 c7             	mov    %rax,%rdi
    1ac8:	e8 00 00 00 00       	callq  1acd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    1acd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    1ad3:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    1ada:	0f 88 35 03 00 00    	js     1e15 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    1ae0:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    1ae6:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    1aec:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    1aef:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    1af6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1afa:	48 89 d6             	mov    %rdx,%rsi
    1afd:	48 89 c7             	mov    %rax,%rdi
    1b00:	e8 00 00 00 00       	callq  1b05 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    1b05:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    1b09:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    1b10:	89 da                	mov    %ebx,%edx
    1b12:	48 89 ce             	mov    %rcx,%rsi
    1b15:	48 89 c7             	mov    %rax,%rdi
    1b18:	e8 00 00 00 00       	callq  1b1d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    1b1d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    1b23:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1b27:	48 89 c7             	mov    %rax,%rdi
    1b2a:	e8 00 00 00 00       	callq  1b2f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    1b2f:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    1b36:	75 0c                	jne    1b44 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    1b38:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    1b3e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    1b44:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b48:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    1b4f:	ba 00 00 00 00       	mov    $0x0,%edx
    1b54:	48 89 ce             	mov    %rcx,%rsi
    1b57:	48 89 c7             	mov    %rax,%rdi
    1b5a:	e8 00 00 00 00       	callq  1b5f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    1b5f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1b63:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1b6a:	48 89 d6             	mov    %rdx,%rsi
    1b6d:	48 89 c7             	mov    %rax,%rdi
    1b70:	e8 00 00 00 00       	callq  1b75 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    1b75:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b79:	48 89 c7             	mov    %rax,%rdi
    1b7c:	e8 00 00 00 00       	callq  1b81 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    1b81:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1b88:	48 89 c7             	mov    %rax,%rdi
    1b8b:	e8 00 00 00 00       	callq  1b90 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    1b90:	89 c3                	mov    %eax,%ebx
    1b92:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1b99:	48 89 c7             	mov    %rax,%rdi
    1b9c:	e8 00 00 00 00       	callq  1ba1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    1ba1:	89 da                	mov    %ebx,%edx
    1ba3:	29 c2                	sub    %eax,%edx
    1ba5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1ba9:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    1bb0:	48 89 ce             	mov    %rcx,%rsi
    1bb3:	48 89 c7             	mov    %rax,%rdi
    1bb6:	e8 00 00 00 00       	callq  1bbb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    1bbb:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1bbf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1bc6:	48 89 d6             	mov    %rdx,%rsi
    1bc9:	48 89 c7             	mov    %rax,%rdi
    1bcc:	e8 00 00 00 00       	callq  1bd1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    1bd1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1bd5:	48 89 c7             	mov    %rax,%rdi
    1bd8:	e8 00 00 00 00       	callq  1bdd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    1bdd:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    1be4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1beb:	b9 00 00 00 00       	mov    $0x0,%ecx
    1bf0:	ba 00 00 00 00       	mov    $0x0,%edx
    1bf5:	48 89 c7             	mov    %rax,%rdi
    1bf8:	e8 00 00 00 00       	callq  1bfd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    1bfd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c01:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    1c08:	ba 00 00 00 00       	mov    $0x0,%edx
    1c0d:	48 89 ce             	mov    %rcx,%rsi
    1c10:	48 89 c7             	mov    %rax,%rdi
    1c13:	e8 00 00 00 00       	callq  1c18 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    1c18:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1c1c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1c23:	48 89 d6             	mov    %rdx,%rsi
    1c26:	48 89 c7             	mov    %rax,%rdi
    1c29:	e8 00 00 00 00       	callq  1c2e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    1c2e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c32:	48 89 c7             	mov    %rax,%rdi
    1c35:	e8 00 00 00 00       	callq  1c3a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    1c3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c3e:	be 7b 00 00 00       	mov    $0x7b,%esi
    1c43:	48 89 c7             	mov    %rax,%rdi
    1c46:	e8 00 00 00 00       	callq  1c4b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    1c4b:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    1c51:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    1c55:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1c5c:	b9 01 00 00 00       	mov    $0x1,%ecx
    1c61:	48 89 c7             	mov    %rax,%rdi
    1c64:	e8 00 00 00 00       	callq  1c69 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    1c69:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    1c6f:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    1c75:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1c7c:	89 d6                	mov    %edx,%esi
    1c7e:	48 89 c7             	mov    %rax,%rdi
    1c81:	e8 00 00 00 00       	callq  1c86 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    1c86:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1c8a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1c8e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c92:	48 89 c7             	mov    %rax,%rdi
    1c95:	e8 00 00 00 00       	callq  1c9a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    1c9a:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    1ca1:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    1ca8:	00 00 00 
        int br=0;
    1cab:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    1cb2:	00 00 00 

        while(bl != br)
    1cb5:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    1cbb:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    1cc1:	0f 84 a2 00 00 00    	je     1d69 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    1cc7:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    1cce:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    1cd4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1cdb:	89 d6                	mov    %edx,%esi
    1cdd:	48 89 c7             	mov    %rax,%rdi
    1ce0:	e8 00 00 00 00       	callq  1ce5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    1ce5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1ce9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1ced:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cf1:	48 89 c7             	mov    %rax,%rdi
    1cf4:	e8 00 00 00 00       	callq  1cf9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    1cf9:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    1d00:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d04:	be 7b 00 00 00       	mov    $0x7b,%esi
    1d09:	48 89 c7             	mov    %rax,%rdi
    1d0c:	e8 00 00 00 00       	callq  1d11 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    1d11:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1d15:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    1d1c:	89 d6                	mov    %edx,%esi
    1d1e:	89 c7                	mov    %eax,%edi
    1d20:	e8 00 00 00 00       	callq  1d25 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    1d25:	84 c0                	test   %al,%al
    1d27:	74 07                	je     1d30 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    1d29:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    1d30:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d34:	be 7d 00 00 00       	mov    $0x7d,%esi
    1d39:	48 89 c7             	mov    %rax,%rdi
    1d3c:	e8 00 00 00 00       	callq  1d41 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    1d41:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1d45:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    1d4c:	89 d6                	mov    %edx,%esi
    1d4e:	89 c7                	mov    %eax,%edi
    1d50:	e8 00 00 00 00       	callq  1d55 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    1d55:	84 c0                	test   %al,%al
    1d57:	0f 84 58 ff ff ff    	je     1cb5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    1d5d:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    1d64:	e9 4c ff ff ff       	jmpq   1cb5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    1d69:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    1d6f:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    1d75:	89 c1                	mov    %eax,%ecx
    1d77:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d7b:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    1d81:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    1d88:	48 89 c7             	mov    %rax,%rdi
    1d8b:	e8 00 00 00 00       	callq  1d90 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    1d90:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1d94:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1d9b:	48 89 d6             	mov    %rdx,%rsi
    1d9e:	48 89 c7             	mov    %rax,%rdi
    1da1:	e8 00 00 00 00       	callq  1da6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    1da6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1daa:	48 89 c7             	mov    %rax,%rdi
    1dad:	e8 00 00 00 00       	callq  1db2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    1db2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1db9:	48 89 c7             	mov    %rax,%rdi
    1dbc:	e8 00 00 00 00       	callq  1dc1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    1dc1:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    1dc7:	89 c2                	mov    %eax,%edx
    1dc9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1dcd:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    1dd4:	48 89 ce             	mov    %rcx,%rsi
    1dd7:	48 89 c7             	mov    %rax,%rdi
    1dda:	e8 00 00 00 00       	callq  1ddf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    1ddf:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1de3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1dea:	48 89 d6             	mov    %rdx,%rsi
    1ded:	48 89 c7             	mov    %rax,%rdi
    1df0:	e8 00 00 00 00       	callq  1df5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    1df5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1df9:	48 89 c7             	mov    %rax,%rdi
    1dfc:	e8 00 00 00 00       	callq  1e01 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    1e01:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    1e07:	83 c0 01             	add    $0x1,%eax
    1e0a:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    1e10:	e9 98 fc ff ff       	jmpq   1aad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    1e15:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    1e16:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1e1d:	48 89 c7             	mov    %rax,%rdi
    1e20:	e8 00 00 00 00       	callq  1e25 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    1e25:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1e2c:	48 89 c7             	mov    %rax,%rdi
    1e2f:	e8 00 00 00 00       	callq  1e34 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    1e34:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1e3b:	48 89 c7             	mov    %rax,%rdi
    1e3e:	e8 00 00 00 00       	callq  1e43 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    1e43:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1e4a:	48 89 c7             	mov    %rax,%rdi
    1e4d:	e8 00 00 00 00       	callq  1e52 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    1e52:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1e59:	48 89 c7             	mov    %rax,%rdi
    1e5c:	e8 00 00 00 00       	callq  1e61 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    1e61:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1e68:	48 89 c7             	mov    %rax,%rdi
    1e6b:	e8 00 00 00 00       	callq  1e70 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    1e70:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1e77:	48 89 c7             	mov    %rax,%rdi
    1e7a:	e8 00 00 00 00       	callq  1e7f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    1e7f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1e86:	48 89 c7             	mov    %rax,%rdi
    1e89:	e8 00 00 00 00       	callq  1e8e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    1e8e:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    1e8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1e93:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1e9a:	00 00 
    1e9c:	0f 84 75 01 00 00    	je     2017 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    1ea2:	e9 6b 01 00 00       	jmpq   2012 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    1ea7:	48 89 c3             	mov    %rax,%rbx
    1eaa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1eb1:	48 89 c7             	mov    %rax,%rdi
    1eb4:	e8 00 00 00 00       	callq  1eb9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    1eb9:	e9 26 01 00 00       	jmpq   1fe4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1ebe:	48 89 c3             	mov    %rax,%rbx
    1ec1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1ec8:	48 89 c7             	mov    %rax,%rdi
    1ecb:	e8 00 00 00 00       	callq  1ed0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    1ed0:	e9 0f 01 00 00       	jmpq   1fe4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1ed5:	48 89 c3             	mov    %rax,%rbx
    1ed8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1edf:	48 89 c7             	mov    %rax,%rdi
    1ee2:	e8 00 00 00 00       	callq  1ee7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    1ee7:	e9 e4 00 00 00       	jmpq   1fd0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    1eec:	48 89 c3             	mov    %rax,%rbx
    1eef:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1ef6:	48 89 c7             	mov    %rax,%rdi
    1ef9:	e8 00 00 00 00       	callq  1efe <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    1efe:	e9 cd 00 00 00       	jmpq   1fd0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    1f03:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    1f06:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f0a:	48 89 c7             	mov    %rax,%rdi
    1f0d:	e8 00 00 00 00       	callq  1f12 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    1f12:	eb 58                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f14:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    1f17:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f1b:	48 89 c7             	mov    %rax,%rdi
    1f1e:	e8 00 00 00 00       	callq  1f23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    1f23:	eb 47                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f25:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    1f28:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1f2c:	48 89 c7             	mov    %rax,%rdi
    1f2f:	e8 00 00 00 00       	callq  1f34 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    1f34:	eb 36                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f36:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    1f39:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1f3d:	48 89 c7             	mov    %rax,%rdi
    1f40:	e8 00 00 00 00       	callq  1f45 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    1f45:	eb 25                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f47:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    1f4a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1f4e:	48 89 c7             	mov    %rax,%rdi
    1f51:	e8 00 00 00 00       	callq  1f56 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    1f56:	eb 14                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f58:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    1f5b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1f5f:	48 89 c7             	mov    %rax,%rdi
    1f62:	e8 00 00 00 00       	callq  1f67 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    1f67:	eb 03                	jmp    1f6c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1f69:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    1f6c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f73:	48 89 c7             	mov    %rax,%rdi
    1f76:	e8 00 00 00 00       	callq  1f7b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    1f7b:	eb 03                	jmp    1f80 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    1f7d:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    1f80:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f87:	48 89 c7             	mov    %rax,%rdi
    1f8a:	e8 00 00 00 00       	callq  1f8f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    1f8f:	eb 03                	jmp    1f94 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    1f91:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    1f94:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f9b:	48 89 c7             	mov    %rax,%rdi
    1f9e:	e8 00 00 00 00       	callq  1fa3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    1fa3:	eb 03                	jmp    1fa8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    1fa5:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    1fa8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1faf:	48 89 c7             	mov    %rax,%rdi
    1fb2:	e8 00 00 00 00       	callq  1fb7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    1fb7:	eb 03                	jmp    1fbc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    1fb9:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    1fbc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1fc3:	48 89 c7             	mov    %rax,%rdi
    1fc6:	e8 00 00 00 00       	callq  1fcb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    1fcb:	eb 03                	jmp    1fd0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    1fcd:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    1fd0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1fd7:	48 89 c7             	mov    %rax,%rdi
    1fda:	e8 00 00 00 00       	callq  1fdf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    1fdf:	eb 03                	jmp    1fe4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    1fe1:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    1fe4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1feb:	48 89 c7             	mov    %rax,%rdi
    1fee:	e8 00 00 00 00       	callq  1ff3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    1ff3:	eb 03                	jmp    1ff8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    1ff5:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    1ff8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1fff:	48 89 c7             	mov    %rax,%rdi
    2002:	e8 00 00 00 00       	callq  2007 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2007:	48 89 d8             	mov    %rbx,%rax
    200a:	48 89 c7             	mov    %rax,%rdi
    200d:	e8 00 00 00 00       	callq  2012 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2012:	e8 00 00 00 00       	callq  2017 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2017:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    201e:	5b                   	pop    %rbx
    201f:	5d                   	pop    %rbp
    2020:	c3                   	retq   
    2021:	90                   	nop

0000000000002022 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2022:	55                   	push   %rbp
    2023:	48 89 e5             	mov    %rsp,%rbp
    2026:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    202a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    202e:	90                   	nop
    202f:	5d                   	pop    %rbp
    2030:	c3                   	retq   
    2031:	90                   	nop

0000000000002032 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2032:	55                   	push   %rbp
    2033:	48 89 e5             	mov    %rsp,%rbp
    2036:	53                   	push   %rbx
    2037:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    203e:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2045:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    204c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2053:	00 00 
    2055:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2059:	31 c0                	xor    %eax,%eax
    QString str  = code;
    205b:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2062:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2069:	48 89 d6             	mov    %rdx,%rsi
    206c:	48 89 c7             	mov    %rax,%rdi
    206f:	e8 00 00 00 00       	callq  2074 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2074:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    207b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2082:	48 89 d6             	mov    %rdx,%rsi
    2085:	48 89 c7             	mov    %rax,%rdi
    2088:	e8 00 00 00 00       	callq  208d <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    208d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2094:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 209b <_ZN6Parser11splitBlocksE7QString+0x69>
    209b:	48 89 c7             	mov    %rax,%rdi
    209e:	e8 00 00 00 00       	callq  20a3 <_ZN6Parser11splitBlocksE7QString+0x71>
    20a3:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    20aa:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    20b1:	ba 01 00 00 00       	mov    $0x1,%edx
    20b6:	48 89 ce             	mov    %rcx,%rsi
    20b9:	48 89 c7             	mov    %rax,%rdi
    20bc:	e8 00 00 00 00       	callq  20c1 <_ZN6Parser11splitBlocksE7QString+0x8f>
    20c1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    20c7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    20ce:	48 89 c7             	mov    %rax,%rdi
    20d1:	e8 00 00 00 00       	callq  20d6 <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    20d6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    20dd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20e4 <_ZN6Parser11splitBlocksE7QString+0xb2>
    20e4:	48 89 c7             	mov    %rax,%rdi
    20e7:	e8 00 00 00 00       	callq  20ec <_ZN6Parser11splitBlocksE7QString+0xba>
    20ec:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    20f3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    20fa:	ba 01 00 00 00       	mov    $0x1,%edx
    20ff:	48 89 ce             	mov    %rcx,%rsi
    2102:	48 89 c7             	mov    %rax,%rdi
    2105:	e8 00 00 00 00       	callq  210a <_ZN6Parser11splitBlocksE7QString+0xd8>
    210a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2110:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2117:	48 89 c7             	mov    %rax,%rdi
    211a:	e8 00 00 00 00       	callq  211f <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    211f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2126:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 212d <_ZN6Parser11splitBlocksE7QString+0xfb>
    212d:	48 89 c7             	mov    %rax,%rdi
    2130:	e8 00 00 00 00       	callq  2135 <_ZN6Parser11splitBlocksE7QString+0x103>
    2135:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    213c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2143:	ba 01 00 00 00       	mov    $0x1,%edx
    2148:	48 89 ce             	mov    %rcx,%rsi
    214b:	48 89 c7             	mov    %rax,%rdi
    214e:	e8 00 00 00 00       	callq  2153 <_ZN6Parser11splitBlocksE7QString+0x121>
    2153:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2159:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2160:	48 89 c7             	mov    %rax,%rdi
    2163:	e8 00 00 00 00       	callq  2168 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2168:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    216f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2176 <_ZN6Parser11splitBlocksE7QString+0x144>
    2176:	48 89 c7             	mov    %rax,%rdi
    2179:	e8 00 00 00 00       	callq  217e <_ZN6Parser11splitBlocksE7QString+0x14c>
    217e:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2185:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    218c:	ba 01 00 00 00       	mov    $0x1,%edx
    2191:	48 89 ce             	mov    %rcx,%rsi
    2194:	48 89 c7             	mov    %rax,%rdi
    2197:	e8 00 00 00 00       	callq  219c <_ZN6Parser11splitBlocksE7QString+0x16a>
    219c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    21a2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    21a9:	48 89 c7             	mov    %rax,%rdi
    21ac:	e8 00 00 00 00       	callq  21b1 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    21b1:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    21b7:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    21bd:	74 43                	je     2202 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    21bf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    21c6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 21cd <_ZN6Parser11splitBlocksE7QString+0x19b>
    21cd:	48 89 c7             	mov    %rax,%rdi
    21d0:	e8 00 00 00 00       	callq  21d5 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    21d5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    21dc:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    21e3:	48 89 d6             	mov    %rdx,%rsi
    21e6:	48 89 c7             	mov    %rax,%rdi
    21e9:	e8 00 00 00 00       	callq  21ee <_ZN6Parser11splitBlocksE7QString+0x1bc>
    21ee:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    21f5:	48 89 c7             	mov    %rax,%rdi
    21f8:	e8 00 00 00 00       	callq  21fd <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    21fd:	e9 cf 03 00 00       	jmpq   25d1 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2202:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2208:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    220e:	74 43                	je     2253 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2210:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2217:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 221e <_ZN6Parser11splitBlocksE7QString+0x1ec>
    221e:	48 89 c7             	mov    %rax,%rdi
    2221:	e8 00 00 00 00       	callq  2226 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2226:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    222d:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2234:	48 89 d6             	mov    %rdx,%rsi
    2237:	48 89 c7             	mov    %rax,%rdi
    223a:	e8 00 00 00 00       	callq  223f <_ZN6Parser11splitBlocksE7QString+0x20d>
    223f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2246:	48 89 c7             	mov    %rax,%rdi
    2249:	e8 00 00 00 00       	callq  224e <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    224e:	e9 7e 03 00 00       	jmpq   25d1 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2253:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    225a:	48 89 c7             	mov    %rax,%rdi
    225d:	e8 00 00 00 00       	callq  2262 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2262:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2269:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2270 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2270:	48 89 c7             	mov    %rax,%rdi
    2273:	e8 00 00 00 00       	callq  2278 <_ZN6Parser11splitBlocksE7QString+0x246>
    2278:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    227f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2286:	b9 00 00 00 00       	mov    $0x0,%ecx
    228b:	ba 01 00 00 00       	mov    $0x1,%edx
    2290:	48 89 c7             	mov    %rax,%rdi
    2293:	e8 00 00 00 00       	callq  2298 <_ZN6Parser11splitBlocksE7QString+0x266>
    2298:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    229f:	48 89 c7             	mov    %rax,%rdi
    22a2:	e8 00 00 00 00       	callq  22a7 <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    22a7:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    22ae:	00 00 00 
    QString blockName;
    22b1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    22b5:	48 89 c7             	mov    %rax,%rdi
    22b8:	e8 00 00 00 00       	callq  22bd <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    22bd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    22c4:	48 89 c7             	mov    %rax,%rdi
    22c7:	e8 00 00 00 00       	callq  22cc <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    22cc:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    22d3:	00 00 00 
    int     line     = 0;
    22d6:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    22dd:	00 00 00 
    QString block;
    22e0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    22e4:	48 89 c7             	mov    %rax,%rdi
    22e7:	e8 00 00 00 00       	callq  22ec <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    22ec:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    22f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    22fa:	b9 00 00 00 00       	mov    $0x0,%ecx
    22ff:	ba 00 00 00 00       	mov    $0x0,%edx
    2304:	48 89 c7             	mov    %rax,%rdi
    2307:	e8 00 00 00 00       	callq  230c <_ZN6Parser11splitBlocksE7QString+0x2da>
    230c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2312:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2319:	0f 88 7b 02 00 00    	js     259a <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    231f:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2325:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    232b:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    232e:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2335:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2339:	48 89 d6             	mov    %rdx,%rsi
    233c:	48 89 c7             	mov    %rax,%rdi
    233f:	e8 00 00 00 00       	callq  2344 <_ZN6Parser11splitBlocksE7QString+0x312>
    2344:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2348:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    234f:	89 da                	mov    %ebx,%edx
    2351:	48 89 ce             	mov    %rcx,%rsi
    2354:	48 89 c7             	mov    %rax,%rdi
    2357:	e8 00 00 00 00       	callq  235c <_ZN6Parser11splitBlocksE7QString+0x32a>
    235c:	83 c0 01             	add    $0x1,%eax
    235f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    2365:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2369:	48 89 c7             	mov    %rax,%rdi
    236c:	e8 00 00 00 00       	callq  2371 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    2371:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2375:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    237c:	ba 01 00 00 00       	mov    $0x1,%edx
    2381:	48 89 ce             	mov    %rcx,%rsi
    2384:	48 89 c7             	mov    %rax,%rdi
    2387:	e8 00 00 00 00       	callq  238c <_ZN6Parser11splitBlocksE7QString+0x35a>
    238c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2390:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2394:	48 89 d6             	mov    %rdx,%rsi
    2397:	48 89 c7             	mov    %rax,%rdi
    239a:	e8 00 00 00 00       	callq  239f <_ZN6Parser11splitBlocksE7QString+0x36d>
    239f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    23a3:	48 89 c7             	mov    %rax,%rdi
    23a6:	e8 00 00 00 00       	callq  23ab <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    23ab:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    23af:	be 7b 00 00 00       	mov    $0x7b,%esi
    23b4:	48 89 c7             	mov    %rax,%rdi
    23b7:	e8 00 00 00 00       	callq  23bc <_ZN6Parser11splitBlocksE7QString+0x38a>
    23bc:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    23c2:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    23c6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    23cd:	b9 01 00 00 00       	mov    $0x1,%ecx
    23d2:	48 89 c7             	mov    %rax,%rdi
    23d5:	e8 00 00 00 00       	callq  23da <_ZN6Parser11splitBlocksE7QString+0x3a8>
    23da:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    23e0:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    23e6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    23ed:	89 d6                	mov    %edx,%esi
    23ef:	48 89 c7             	mov    %rax,%rdi
    23f2:	e8 00 00 00 00       	callq  23f7 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    23f7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    23fb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    23ff:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2403:	48 89 c7             	mov    %rax,%rdi
    2406:	e8 00 00 00 00       	callq  240b <_ZN6Parser11splitBlocksE7QString+0x3d9>
    240b:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    2412:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    2419:	00 00 00 
        int br=0;
    241c:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    2423:	00 00 00 

        while(bl != br)
    2426:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    242c:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    2432:	0f 84 a2 00 00 00    	je     24da <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    2438:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    243f:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    2445:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    244c:	89 d6                	mov    %edx,%esi
    244e:	48 89 c7             	mov    %rax,%rdi
    2451:	e8 00 00 00 00       	callq  2456 <_ZN6Parser11splitBlocksE7QString+0x424>
    2456:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    245a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    245e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2462:	48 89 c7             	mov    %rax,%rdi
    2465:	e8 00 00 00 00       	callq  246a <_ZN6Parser11splitBlocksE7QString+0x438>
    246a:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    2471:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2475:	be 7b 00 00 00       	mov    $0x7b,%esi
    247a:	48 89 c7             	mov    %rax,%rdi
    247d:	e8 00 00 00 00       	callq  2482 <_ZN6Parser11splitBlocksE7QString+0x450>
    2482:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2486:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    248d:	89 d6                	mov    %edx,%esi
    248f:	89 c7                	mov    %eax,%edi
    2491:	e8 00 00 00 00       	callq  2496 <_ZN6Parser11splitBlocksE7QString+0x464>
    2496:	84 c0                	test   %al,%al
    2498:	74 07                	je     24a1 <_ZN6Parser11splitBlocksE7QString+0x46f>
    249a:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    24a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24a5:	be 7d 00 00 00       	mov    $0x7d,%esi
    24aa:	48 89 c7             	mov    %rax,%rdi
    24ad:	e8 00 00 00 00       	callq  24b2 <_ZN6Parser11splitBlocksE7QString+0x480>
    24b2:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    24b6:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    24bd:	89 d6                	mov    %edx,%esi
    24bf:	89 c7                	mov    %eax,%edi
    24c1:	e8 00 00 00 00       	callq  24c6 <_ZN6Parser11splitBlocksE7QString+0x494>
    24c6:	84 c0                	test   %al,%al
    24c8:	0f 84 58 ff ff ff    	je     2426 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    24ce:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    24d5:	e9 4c ff ff ff       	jmpq   2426 <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    24da:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    24e0:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    24e6:	89 c1                	mov    %eax,%ecx
    24e8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24ec:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    24f2:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    24f9:	48 89 c7             	mov    %rax,%rdi
    24fc:	e8 00 00 00 00       	callq  2501 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    2501:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2505:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2509:	48 89 d6             	mov    %rdx,%rsi
    250c:	48 89 c7             	mov    %rax,%rdi
    250f:	e8 00 00 00 00       	callq  2514 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    2514:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2518:	48 89 c7             	mov    %rax,%rdi
    251b:	e8 00 00 00 00       	callq  2520 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    2520:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2527:	48 89 c7             	mov    %rax,%rdi
    252a:	e8 00 00 00 00       	callq  252f <_ZN6Parser11splitBlocksE7QString+0x4fd>
    252f:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    2535:	89 c2                	mov    %eax,%edx
    2537:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    253b:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    2542:	48 89 ce             	mov    %rcx,%rsi
    2545:	48 89 c7             	mov    %rax,%rdi
    2548:	e8 00 00 00 00       	callq  254d <_ZN6Parser11splitBlocksE7QString+0x51b>
    254d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2551:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2558:	48 89 d6             	mov    %rdx,%rsi
    255b:	48 89 c7             	mov    %rax,%rdi
    255e:	e8 00 00 00 00       	callq  2563 <_ZN6Parser11splitBlocksE7QString+0x531>
    2563:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2567:	48 89 c7             	mov    %rax,%rdi
    256a:	e8 00 00 00 00       	callq  256f <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    256f:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    2575:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    257b:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2582:	48 8d 50 70          	lea    0x70(%rax),%rdx
    2586:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    258a:	48 89 c6             	mov    %rax,%rsi
    258d:	48 89 d7             	mov    %rdx,%rdi
    2590:	e8 00 00 00 00       	callq  2595 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    2595:	e9 52 fd ff ff       	jmpq   22ec <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    259a:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    259b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    259f:	48 89 c7             	mov    %rax,%rdi
    25a2:	e8 00 00 00 00       	callq  25a7 <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    25a7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    25ab:	48 89 c7             	mov    %rax,%rdi
    25ae:	e8 00 00 00 00       	callq  25b3 <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    25b3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    25ba:	48 89 c7             	mov    %rax,%rdi
    25bd:	e8 00 00 00 00       	callq  25c2 <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    25c2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    25c9:	48 89 c7             	mov    %rax,%rdi
    25cc:	e8 00 00 00 00       	callq  25d1 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    25d1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    25d8:	48 89 c7             	mov    %rax,%rdi
    25db:	e8 00 00 00 00       	callq  25e0 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    25e0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    25e7:	48 89 c7             	mov    %rax,%rdi
    25ea:	e8 00 00 00 00       	callq  25ef <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    25ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    25f3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    25fa:	00 00 
    25fc:	0f 84 7e 01 00 00    	je     2780 <_ZN6Parser11splitBlocksE7QString+0x74e>
    2602:	e9 74 01 00 00       	jmpq   277b <_ZN6Parser11splitBlocksE7QString+0x749>
    2607:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    260a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2611:	48 89 c7             	mov    %rax,%rdi
    2614:	e8 00 00 00 00       	callq  2619 <_ZN6Parser11splitBlocksE7QString+0x5e7>
    2619:	e9 2f 01 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    261e:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    2621:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2628:	48 89 c7             	mov    %rax,%rdi
    262b:	e8 00 00 00 00       	callq  2630 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    2630:	e9 18 01 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    2635:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    2638:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    263f:	48 89 c7             	mov    %rax,%rdi
    2642:	e8 00 00 00 00       	callq  2647 <_ZN6Parser11splitBlocksE7QString+0x615>
    2647:	e9 01 01 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    264c:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    264f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2656:	48 89 c7             	mov    %rax,%rdi
    2659:	e8 00 00 00 00       	callq  265e <_ZN6Parser11splitBlocksE7QString+0x62c>
    265e:	e9 ea 00 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    2663:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    2666:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    266d:	48 89 c7             	mov    %rax,%rdi
    2670:	e8 00 00 00 00       	callq  2675 <_ZN6Parser11splitBlocksE7QString+0x643>
    2675:	e9 d3 00 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    267a:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    267d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2684:	48 89 c7             	mov    %rax,%rdi
    2687:	e8 00 00 00 00       	callq  268c <_ZN6Parser11splitBlocksE7QString+0x65a>
    268c:	e9 bc 00 00 00       	jmpq   274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    2691:	48 89 c3             	mov    %rax,%rbx
    2694:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    269b:	48 89 c7             	mov    %rax,%rdi
    269e:	e8 00 00 00 00       	callq  26a3 <_ZN6Parser11splitBlocksE7QString+0x671>
    26a3:	e9 91 00 00 00       	jmpq   2739 <_ZN6Parser11splitBlocksE7QString+0x707>
    26a8:	48 89 c3             	mov    %rax,%rbx
    26ab:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    26b2:	48 89 c7             	mov    %rax,%rdi
    26b5:	e8 00 00 00 00       	callq  26ba <_ZN6Parser11splitBlocksE7QString+0x688>
    26ba:	eb 7d                	jmp    2739 <_ZN6Parser11splitBlocksE7QString+0x707>
    26bc:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    26bf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    26c3:	48 89 c7             	mov    %rax,%rdi
    26c6:	e8 00 00 00 00       	callq  26cb <_ZN6Parser11splitBlocksE7QString+0x699>
    26cb:	eb 36                	jmp    2703 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    26cd:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    26d0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    26d4:	48 89 c7             	mov    %rax,%rdi
    26d7:	e8 00 00 00 00       	callq  26dc <_ZN6Parser11splitBlocksE7QString+0x6aa>
    26dc:	eb 25                	jmp    2703 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    26de:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    26e1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    26e5:	48 89 c7             	mov    %rax,%rdi
    26e8:	e8 00 00 00 00       	callq  26ed <_ZN6Parser11splitBlocksE7QString+0x6bb>
    26ed:	eb 14                	jmp    2703 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    26ef:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    26f2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    26f6:	48 89 c7             	mov    %rax,%rdi
    26f9:	e8 00 00 00 00       	callq  26fe <_ZN6Parser11splitBlocksE7QString+0x6cc>
    26fe:	eb 03                	jmp    2703 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    2700:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    2703:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2707:	48 89 c7             	mov    %rax,%rdi
    270a:	e8 00 00 00 00       	callq  270f <_ZN6Parser11splitBlocksE7QString+0x6dd>
    270f:	eb 03                	jmp    2714 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    2711:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    2714:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2718:	48 89 c7             	mov    %rax,%rdi
    271b:	e8 00 00 00 00       	callq  2720 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    2720:	eb 03                	jmp    2725 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    2722:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2725:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    272c:	48 89 c7             	mov    %rax,%rdi
    272f:	e8 00 00 00 00       	callq  2734 <_ZN6Parser11splitBlocksE7QString+0x702>
    2734:	eb 03                	jmp    2739 <_ZN6Parser11splitBlocksE7QString+0x707>
    2736:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    2739:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2740:	48 89 c7             	mov    %rax,%rdi
    2743:	e8 00 00 00 00       	callq  2748 <_ZN6Parser11splitBlocksE7QString+0x716>
    2748:	eb 03                	jmp    274d <_ZN6Parser11splitBlocksE7QString+0x71b>
    274a:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    274d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2754:	48 89 c7             	mov    %rax,%rdi
    2757:	e8 00 00 00 00       	callq  275c <_ZN6Parser11splitBlocksE7QString+0x72a>
    275c:	eb 03                	jmp    2761 <_ZN6Parser11splitBlocksE7QString+0x72f>
    275e:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    2761:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2768:	48 89 c7             	mov    %rax,%rdi
    276b:	e8 00 00 00 00       	callq  2770 <_ZN6Parser11splitBlocksE7QString+0x73e>
    2770:	48 89 d8             	mov    %rbx,%rax
    2773:	48 89 c7             	mov    %rax,%rdi
    2776:	e8 00 00 00 00       	callq  277b <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    277b:	e8 00 00 00 00       	callq  2780 <_ZN6Parser11splitBlocksE7QString+0x74e>
    2780:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    2787:	5b                   	pop    %rbx
    2788:	5d                   	pop    %rbp
    2789:	c3                   	retq   

000000000000278a <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    278a:	55                   	push   %rbp
    278b:	48 89 e5             	mov    %rsp,%rbp
    278e:	53                   	push   %rbx
    278f:	48 83 ec 48          	sub    $0x48,%rsp
    2793:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    2797:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    279e:	00 00 
    27a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    27a4:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    27a6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    27aa:	48 89 c7             	mov    %rax,%rdi
    27ad:	e8 00 00 00 00       	callq  27b2 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    27b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    27b6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 27bd <_ZN6Parser10globalSemsEv+0x33>
    27bd:	48 89 c7             	mov    %rax,%rdi
    27c0:	e8 00 00 00 00       	callq  27c5 <_ZN6Parser10globalSemsEv+0x3b>
    27c5:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    27c9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    27cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    27d1:	48 89 ce             	mov    %rcx,%rsi
    27d4:	48 89 c7             	mov    %rax,%rdi
    27d7:	e8 00 00 00 00       	callq  27dc <_ZN6Parser10globalSemsEv+0x52>
    27dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    27e0:	48 89 c7             	mov    %rax,%rdi
    27e3:	e8 00 00 00 00       	callq  27e8 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    27e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    27ec:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    27f0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    27f4:	48 89 ce             	mov    %rcx,%rsi
    27f7:	48 89 c7             	mov    %rax,%rdi
    27fa:	e8 00 00 00 00       	callq  27ff <_ZN6Parser10globalSemsEv+0x75>
    27ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2803:	48 89 c7             	mov    %rax,%rdi
    2806:	e8 00 00 00 00       	callq  280b <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    280b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    280f:	48 89 c7             	mov    %rax,%rdi
    2812:	e8 00 00 00 00       	callq  2817 <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    2817:	90                   	nop
    2818:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    281c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2823:	00 00 
    2825:	74 32                	je     2859 <_ZN6Parser10globalSemsEv+0xcf>
    2827:	eb 2b                	jmp    2854 <_ZN6Parser10globalSemsEv+0xca>
    2829:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    282c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2830:	48 89 c7             	mov    %rax,%rdi
    2833:	e8 00 00 00 00       	callq  2838 <_ZN6Parser10globalSemsEv+0xae>
    2838:	eb 03                	jmp    283d <_ZN6Parser10globalSemsEv+0xb3>
    283a:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    283d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2841:	48 89 c7             	mov    %rax,%rdi
    2844:	e8 00 00 00 00       	callq  2849 <_ZN6Parser10globalSemsEv+0xbf>
    2849:	48 89 d8             	mov    %rbx,%rax
    284c:	48 89 c7             	mov    %rax,%rdi
    284f:	e8 00 00 00 00       	callq  2854 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    2854:	e8 00 00 00 00       	callq  2859 <_ZN6Parser10globalSemsEv+0xcf>
    2859:	48 83 c4 48          	add    $0x48,%rsp
    285d:	5b                   	pop    %rbx
    285e:	5d                   	pop    %rbp
    285f:	c3                   	retq   

0000000000002860 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    2860:	55                   	push   %rbp
    2861:	48 89 e5             	mov    %rsp,%rbp
    2864:	53                   	push   %rbx
    2865:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    286c:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    2873:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    287a:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    2880:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    2887:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    288e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2895:	00 00 
    2897:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    289b:	31 c0                	xor    %eax,%eax
        QByteArray result;
    289d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    28a4:	48 89 c7             	mov    %rax,%rdi
    28a7:	e8 00 00 00 00       	callq  28ac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    28ac:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    28b2:	0f be d0             	movsbl %al,%edx
    28b5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    28bc:	89 d6                	mov    %edx,%esi
    28be:	48 89 c7             	mov    %rax,%rdi
    28c1:	e8 00 00 00 00       	callq  28c6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    28c6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    28cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 28d4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    28d4:	48 89 c7             	mov    %rax,%rdi
    28d7:	e8 00 00 00 00       	callq  28dc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    28dc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    28e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 28ea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    28ea:	48 89 c7             	mov    %rax,%rdi
    28ed:	e8 00 00 00 00       	callq  28f2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    28f2:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    28f9:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    2900:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2907:	b9 01 00 00 00       	mov    $0x1,%ecx
    290c:	48 89 c7             	mov    %rax,%rdi
    290f:	e8 00 00 00 00       	callq  2914 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    2914:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    291b:	48 89 c7             	mov    %rax,%rdi
    291e:	e8 00 00 00 00       	callq  2923 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    2923:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    292a:	48 89 c7             	mov    %rax,%rdi
    292d:	e8 00 00 00 00       	callq  2932 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    2932:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2939:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2940 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    2940:	48 89 c7             	mov    %rax,%rdi
    2943:	e8 00 00 00 00       	callq  2948 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    2948:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    294f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2956 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    2956:	48 89 c7             	mov    %rax,%rdi
    2959:	e8 00 00 00 00       	callq  295e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    295e:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    2965:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    296c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2973:	b9 01 00 00 00       	mov    $0x1,%ecx
    2978:	48 89 c7             	mov    %rax,%rdi
    297b:	e8 00 00 00 00       	callq  2980 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    2980:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2987:	48 89 c7             	mov    %rax,%rdi
    298a:	e8 00 00 00 00       	callq  298f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    298f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2996:	48 89 c7             	mov    %rax,%rdi
    2999:	e8 00 00 00 00       	callq  299e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    299e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    29a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 29ac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    29ac:	48 89 c7             	mov    %rax,%rdi
    29af:	e8 00 00 00 00       	callq  29b4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    29b4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    29bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 29c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    29c2:	48 89 c7             	mov    %rax,%rdi
    29c5:	e8 00 00 00 00       	callq  29ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    29ca:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    29d1:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    29d8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    29df:	b9 01 00 00 00       	mov    $0x1,%ecx
    29e4:	48 89 c7             	mov    %rax,%rdi
    29e7:	e8 00 00 00 00       	callq  29ec <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    29ec:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    29f3:	48 89 c7             	mov    %rax,%rdi
    29f6:	e8 00 00 00 00       	callq  29fb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    29fb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2a02:	48 89 c7             	mov    %rax,%rdi
    2a05:	e8 00 00 00 00       	callq  2a0a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    2a0a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2a0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a15 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    2a15:	48 89 c7             	mov    %rax,%rdi
    2a18:	e8 00 00 00 00       	callq  2a1d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    2a1d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2a21:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a28 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    2a28:	48 89 c7             	mov    %rax,%rdi
    2a2b:	e8 00 00 00 00       	callq  2a30 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    2a30:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2a34:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    2a38:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2a3f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2a44:	48 89 c7             	mov    %rax,%rdi
    2a47:	e8 00 00 00 00       	callq  2a4c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    2a4c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2a50:	48 89 c7             	mov    %rax,%rdi
    2a53:	e8 00 00 00 00       	callq  2a58 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    2a58:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2a5c:	48 89 c7             	mov    %rax,%rdi
    2a5f:	e8 00 00 00 00       	callq  2a64 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    2a64:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2a68:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a6f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    2a6f:	48 89 c7             	mov    %rax,%rdi
    2a72:	e8 00 00 00 00       	callq  2a77 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    2a77:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2a7b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a82 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    2a82:	48 89 c7             	mov    %rax,%rdi
    2a85:	e8 00 00 00 00       	callq  2a8a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    2a8a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2a8e:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    2a92:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2a99:	b9 00 00 00 00       	mov    $0x0,%ecx
    2a9e:	48 89 c7             	mov    %rax,%rdi
    2aa1:	e8 00 00 00 00       	callq  2aa6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    2aa6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2aaa:	48 89 c7             	mov    %rax,%rdi
    2aad:	e8 00 00 00 00       	callq  2ab2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    2ab2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2ab6:	48 89 c7             	mov    %rax,%rdi
    2ab9:	e8 00 00 00 00       	callq  2abe <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    2abe:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2ac2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ac9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    2ac9:	48 89 c7             	mov    %rax,%rdi
    2acc:	e8 00 00 00 00       	callq  2ad1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    2ad1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2ad5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2ad9:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    2ae0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    2ae6:	b9 00 00 00 00       	mov    $0x0,%ecx
    2aeb:	48 89 c7             	mov    %rax,%rdi
    2aee:	e8 00 00 00 00       	callq  2af3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    2af3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2af7:	48 89 c7             	mov    %rax,%rdi
    2afa:	e8 00 00 00 00       	callq  2aff <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    2aff:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    2b06:	00 00 00 
    2b09:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b0d:	48 89 c7             	mov    %rax,%rdi
    2b10:	e8 00 00 00 00       	callq  2b15 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    2b15:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    2b1b:	0f 9f c0             	setg   %al
    2b1e:	84 c0                	test   %al,%al
    2b20:	74 6e                	je     2b90 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    2b22:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    2b28:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b2c:	89 d6                	mov    %edx,%esi
    2b2e:	48 89 c7             	mov    %rax,%rdi
    2b31:	e8 00 00 00 00       	callq  2b36 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    2b36:	48 89 c7             	mov    %rax,%rdi
    2b39:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2b3d:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    2b43:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    2b4a:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    2b51:	41 89 c8             	mov    %ecx,%r8d
    2b54:	48 89 d1             	mov    %rdx,%rcx
    2b57:	48 89 fa             	mov    %rdi,%rdx
    2b5a:	48 89 c7             	mov    %rax,%rdi
    2b5d:	e8 00 00 00 00       	callq  2b62 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    2b62:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2b66:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b6d:	48 89 d6             	mov    %rdx,%rsi
    2b70:	48 89 c7             	mov    %rax,%rdi
    2b73:	e8 00 00 00 00       	callq  2b78 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    2b78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2b7c:	48 89 c7             	mov    %rax,%rdi
    2b7f:	e8 00 00 00 00       	callq  2b84 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    2b84:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    2b8b:	e9 79 ff ff ff       	jmpq   2b09 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    2b90:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b97:	48 89 c7             	mov    %rax,%rdi
    2b9a:	e8 00 00 00 00       	callq  2b9f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    2b9f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    2ba5:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    2bac:	00 00 00 
    2baf:	b8 1f 00 00 00       	mov    $0x1f,%eax
    2bb4:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    2bba:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    2bc0:	7e 1d                	jle    2bdf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    2bc2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2bc9:	be 00 00 00 00       	mov    $0x0,%esi
    2bce:	48 89 c7             	mov    %rax,%rdi
    2bd1:	e8 00 00 00 00       	callq  2bd6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    2bd6:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    2bdd:	eb d0                	jmp    2baf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    2bdf:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    2be5:	0f be d0             	movsbl %al,%edx
    2be8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2bef:	89 d6                	mov    %edx,%esi
    2bf1:	48 89 c7             	mov    %rax,%rdi
    2bf4:	e8 00 00 00 00       	callq  2bf9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    2bf9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    2c00:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    2c07:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2c0e:	48 89 c6             	mov    %rax,%rsi
    2c11:	48 89 d7             	mov    %rdx,%rdi
    2c14:	e8 00 00 00 00       	callq  2c19 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    2c19:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2c1d:	48 89 c7             	mov    %rax,%rdi
    2c20:	e8 00 00 00 00       	callq  2c25 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    2c25:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2c2c:	48 89 c7             	mov    %rax,%rdi
    2c2f:	e8 00 00 00 00       	callq  2c34 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    2c34:	90                   	nop
    2c35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2c39:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2c40:	00 00 
    2c42:	0f 84 30 01 00 00    	je     2d78 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    2c48:	e9 26 01 00 00       	jmpq   2d73 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    2c4d:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    2c50:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c57:	48 89 c7             	mov    %rax,%rdi
    2c5a:	e8 00 00 00 00       	callq  2c5f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    2c5f:	eb 03                	jmp    2c64 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    2c61:	48 89 c3             	mov    %rax,%rbx
    2c64:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2c6b:	48 89 c7             	mov    %rax,%rdi
    2c6e:	e8 00 00 00 00       	callq  2c73 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    2c73:	e9 e1 00 00 00       	jmpq   2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2c78:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    2c7b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c82:	48 89 c7             	mov    %rax,%rdi
    2c85:	e8 00 00 00 00       	callq  2c8a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    2c8a:	eb 03                	jmp    2c8f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    2c8c:	48 89 c3             	mov    %rax,%rbx
    2c8f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c96:	48 89 c7             	mov    %rax,%rdi
    2c99:	e8 00 00 00 00       	callq  2c9e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    2c9e:	e9 b6 00 00 00       	jmpq   2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2ca3:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    2ca6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2cad:	48 89 c7             	mov    %rax,%rdi
    2cb0:	e8 00 00 00 00       	callq  2cb5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    2cb5:	eb 03                	jmp    2cba <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    2cb7:	48 89 c3             	mov    %rax,%rbx
    2cba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2cc1:	48 89 c7             	mov    %rax,%rdi
    2cc4:	e8 00 00 00 00       	callq  2cc9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    2cc9:	e9 8b 00 00 00       	jmpq   2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2cce:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    2cd1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2cd5:	48 89 c7             	mov    %rax,%rdi
    2cd8:	e8 00 00 00 00       	callq  2cdd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    2cdd:	eb 03                	jmp    2ce2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    2cdf:	48 89 c3             	mov    %rax,%rbx
    2ce2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2ce6:	48 89 c7             	mov    %rax,%rdi
    2ce9:	e8 00 00 00 00       	callq  2cee <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    2cee:	eb 69                	jmp    2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2cf0:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    2cf3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2cf7:	48 89 c7             	mov    %rax,%rdi
    2cfa:	e8 00 00 00 00       	callq  2cff <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    2cff:	eb 03                	jmp    2d04 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    2d01:	48 89 c3             	mov    %rax,%rbx
    2d04:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2d08:	48 89 c7             	mov    %rax,%rdi
    2d0b:	e8 00 00 00 00       	callq  2d10 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    2d10:	eb 47                	jmp    2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2d12:	48 89 c3             	mov    %rax,%rbx
    2d15:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2d19:	48 89 c7             	mov    %rax,%rdi
    2d1c:	e8 00 00 00 00       	callq  2d21 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    2d21:	eb 36                	jmp    2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2d23:	48 89 c3             	mov    %rax,%rbx
    2d26:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2d2a:	48 89 c7             	mov    %rax,%rdi
    2d2d:	e8 00 00 00 00       	callq  2d32 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    2d32:	eb 25                	jmp    2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2d34:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    2d37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2d3b:	48 89 c7             	mov    %rax,%rdi
    2d3e:	e8 00 00 00 00       	callq  2d43 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    2d43:	eb 03                	jmp    2d48 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    2d45:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    2d48:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2d4c:	48 89 c7             	mov    %rax,%rdi
    2d4f:	e8 00 00 00 00       	callq  2d54 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    2d54:	eb 03                	jmp    2d59 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2d56:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    2d59:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2d60:	48 89 c7             	mov    %rax,%rdi
    2d63:	e8 00 00 00 00       	callq  2d68 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    2d68:	48 89 d8             	mov    %rbx,%rax
    2d6b:	48 89 c7             	mov    %rax,%rdi
    2d6e:	e8 00 00 00 00       	callq  2d73 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    2d73:	e8 00 00 00 00       	callq  2d78 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    2d78:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    2d7f:	5b                   	pop    %rbx
    2d80:	5d                   	pop    %rbp
    2d81:	c3                   	retq   

0000000000002d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    2d82:	55                   	push   %rbp
    2d83:	48 89 e5             	mov    %rsp,%rbp
    2d86:	53                   	push   %rbx
    2d87:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    2d8e:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    2d95:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    2d9c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    2da3:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    2daa:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    2db1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2db8:	00 00 
    2dba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2dbe:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    2dc0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2dc4:	be 20 00 00 00       	mov    $0x20,%esi
    2dc9:	48 89 c7             	mov    %rax,%rdi
    2dcc:	e8 00 00 00 00       	callq  2dd1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    2dd1:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2dd5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    2ddc:	b9 01 00 00 00       	mov    $0x1,%ecx
    2de1:	ba 00 00 00 00       	mov    $0x0,%edx
    2de6:	48 89 c7             	mov    %rax,%rdi
    2de9:	e8 00 00 00 00       	callq  2dee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    2dee:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    2df4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2dfb:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    2e01:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    2e08:	89 d1                	mov    %edx,%ecx
    2e0a:	ba 00 00 00 00       	mov    $0x0,%edx
    2e0f:	48 89 c7             	mov    %rax,%rdi
    2e12:	e8 00 00 00 00       	callq  2e17 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    2e17:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    2e1e:	00 00 00 

    i = text.indexOf('(', lastPosition);
    2e21:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2e25:	be 28 00 00 00       	mov    $0x28,%esi
    2e2a:	48 89 c7             	mov    %rax,%rdi
    2e2d:	e8 00 00 00 00       	callq  2e32 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    2e32:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2e38:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2e3c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    2e43:	b9 01 00 00 00       	mov    $0x1,%ecx
    2e48:	48 89 c7             	mov    %rax,%rdi
    2e4b:	e8 00 00 00 00       	callq  2e50 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    2e50:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    2e56:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2e5c:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    2e62:	89 c1                	mov    %eax,%ecx
    2e64:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2e68:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2e6e:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    2e75:	48 89 c7             	mov    %rax,%rdi
    2e78:	e8 00 00 00 00       	callq  2e7d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    2e7d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2e81:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2e85:	48 89 d6             	mov    %rdx,%rsi
    2e88:	48 89 c7             	mov    %rax,%rdi
    2e8b:	e8 00 00 00 00       	callq  2e90 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    2e90:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2e94:	48 89 c7             	mov    %rax,%rdi
    2e97:	e8 00 00 00 00       	callq  2e9c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    2e9c:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2ea2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    2ea8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2eac:	be 29 00 00 00       	mov    $0x29,%esi
    2eb1:	48 89 c7             	mov    %rax,%rdi
    2eb4:	e8 00 00 00 00       	callq  2eb9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    2eb9:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2ebf:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2ec3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    2eca:	b9 01 00 00 00       	mov    $0x1,%ecx
    2ecf:	48 89 c7             	mov    %rax,%rdi
    2ed2:	e8 00 00 00 00       	callq  2ed7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    2ed7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    2edd:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2ee3:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    2ee9:	8d 48 ff             	lea    -0x1(%rax),%ecx
    2eec:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    2ef2:	8d 50 01             	lea    0x1(%rax),%edx
    2ef5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2ef9:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    2f00:	48 89 c7             	mov    %rax,%rdi
    2f03:	e8 00 00 00 00       	callq  2f08 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    2f08:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2f0c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f13 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    2f13:	48 89 c7             	mov    %rax,%rdi
    2f16:	e8 00 00 00 00       	callq  2f1b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    2f1b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2f1f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2f23:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    2f27:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    2f2d:	b9 01 00 00 00       	mov    $0x1,%ecx
    2f32:	48 89 c7             	mov    %rax,%rdi
    2f35:	e8 00 00 00 00       	callq  2f3a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    2f3a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2f3e:	48 89 c7             	mov    %rax,%rdi
    2f41:	e8 00 00 00 00       	callq  2f46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    2f46:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2f4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2f4e:	48 89 d6             	mov    %rdx,%rsi
    2f51:	48 89 c7             	mov    %rax,%rdi
    2f54:	e8 00 00 00 00       	callq  2f59 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    2f59:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2f5d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2f61:	48 89 d6             	mov    %rdx,%rsi
    2f64:	48 89 c7             	mov    %rax,%rdi
    2f67:	e8 00 00 00 00       	callq  2f6c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    2f6c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    2f73:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    2f7a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    2f81:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    2f85:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2f89:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    2f90:	45 89 c1             	mov    %r8d,%r9d
    2f93:	49 89 f8             	mov    %rdi,%r8
    2f96:	48 89 c7             	mov    %rax,%rdi
    2f99:	e8 00 00 00 00       	callq  2f9e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    2f9e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2fa2:	48 89 c7             	mov    %rax,%rdi
    2fa5:	e8 00 00 00 00       	callq  2faa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    2faa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2fae:	48 89 c7             	mov    %rax,%rdi
    2fb1:	e8 00 00 00 00       	callq  2fb6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    2fb6:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    2fb7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2fbb:	48 89 c7             	mov    %rax,%rdi
    2fbe:	e8 00 00 00 00       	callq  2fc3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    2fc3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2fc7:	48 89 c7             	mov    %rax,%rdi
    2fca:	e8 00 00 00 00       	callq  2fcf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    2fcf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2fd3:	48 89 c7             	mov    %rax,%rdi
    2fd6:	e8 00 00 00 00       	callq  2fdb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    2fdb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2fe2:	48 89 c7             	mov    %rax,%rdi
    2fe5:	e8 00 00 00 00       	callq  2fea <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    2fea:	90                   	nop
}
    2feb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    2ff2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2ff6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2ffd:	00 00 
    2fff:	0f 84 ee 00 00 00    	je     30f3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3005:	e9 e4 00 00 00       	jmpq   30ee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    300a:	48 89 c3             	mov    %rax,%rbx
    300d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3011:	48 89 c7             	mov    %rax,%rdi
    3014:	e8 00 00 00 00       	callq  3019 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3019:	e9 b6 00 00 00       	jmpq   30d4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    301e:	48 89 c3             	mov    %rax,%rbx
    3021:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3025:	48 89 c7             	mov    %rax,%rdi
    3028:	e8 00 00 00 00       	callq  302d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    302d:	e9 a2 00 00 00       	jmpq   30d4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3032:	48 89 c3             	mov    %rax,%rbx
    3035:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3039:	48 89 c7             	mov    %rax,%rdi
    303c:	e8 00 00 00 00       	callq  3041 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3041:	eb 6f                	jmp    30b2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3043:	48 89 c3             	mov    %rax,%rbx
    3046:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    304a:	48 89 c7             	mov    %rax,%rdi
    304d:	e8 00 00 00 00       	callq  3052 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3052:	eb 5e                	jmp    30b2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3054:	48 89 c3             	mov    %rax,%rbx
    3057:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    305b:	48 89 c7             	mov    %rax,%rdi
    305e:	e8 00 00 00 00       	callq  3063 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3063:	eb 17                	jmp    307c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3065:	48 89 c3             	mov    %rax,%rbx
    3068:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    306f:	48 89 c7             	mov    %rax,%rdi
    3072:	e8 00 00 00 00       	callq  3077 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3077:	eb 03                	jmp    307c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3079:	48 89 c3             	mov    %rax,%rbx
    307c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3080:	48 89 c7             	mov    %rax,%rdi
    3083:	e8 00 00 00 00       	callq  3088 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3088:	eb 17                	jmp    30a1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    308a:	48 89 c3             	mov    %rax,%rbx
    308d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3094:	48 89 c7             	mov    %rax,%rdi
    3097:	e8 00 00 00 00       	callq  309c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    309c:	eb 03                	jmp    30a1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    309e:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    30a1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    30a5:	48 89 c7             	mov    %rax,%rdi
    30a8:	e8 00 00 00 00       	callq  30ad <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    30ad:	eb 03                	jmp    30b2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    30af:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    30b2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    30b6:	48 89 c7             	mov    %rax,%rdi
    30b9:	e8 00 00 00 00       	callq  30be <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    30be:	eb 03                	jmp    30c3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    30c0:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    30c3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    30c7:	48 89 c7             	mov    %rax,%rdi
    30ca:	e8 00 00 00 00       	callq  30cf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    30cf:	eb 03                	jmp    30d4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    30d1:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    30d4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    30db:	48 89 c7             	mov    %rax,%rdi
    30de:	e8 00 00 00 00       	callq  30e3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    30e3:	48 89 d8             	mov    %rbx,%rax
    30e6:	48 89 c7             	mov    %rax,%rdi
    30e9:	e8 00 00 00 00       	callq  30ee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    30ee:	e8 00 00 00 00       	callq  30f3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    30f3:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    30fa:	5b                   	pop    %rbx
    30fb:	5d                   	pop    %rbp
    30fc:	c3                   	retq   
    30fd:	90                   	nop

00000000000030fe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    30fe:	55                   	push   %rbp
    30ff:	48 89 e5             	mov    %rsp,%rbp
    3102:	53                   	push   %rbx
    3103:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    310a:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3111:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3118:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    311f:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3126:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    312d:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3134:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    313b:	00 00 
    313d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3141:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3143:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    314a:	48 89 c7             	mov    %rax,%rdi
    314d:	e8 00 00 00 00       	callq  3152 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3152:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3159:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    315f:	ba 0a 00 00 00       	mov    $0xa,%edx
    3164:	89 ce                	mov    %ecx,%esi
    3166:	48 89 c7             	mov    %rax,%rdi
    3169:	e8 00 00 00 00       	callq  316e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    316e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3175:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    317c:	48 89 d6             	mov    %rdx,%rsi
    317f:	48 89 c7             	mov    %rax,%rdi
    3182:	e8 00 00 00 00       	callq  3187 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3187:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    318e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3195:	48 89 d6             	mov    %rdx,%rsi
    3198:	48 89 c7             	mov    %rax,%rdi
    319b:	e8 00 00 00 00       	callq  31a0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    31a0:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    31a7:	48 89 c7             	mov    %rax,%rdi
    31aa:	e8 00 00 00 00       	callq  31af <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    31af:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    31b6:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    31bd:	48 89 d6             	mov    %rdx,%rsi
    31c0:	48 89 c7             	mov    %rax,%rdi
    31c3:	e8 00 00 00 00       	callq  31c8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    31c8:	83 f0 01             	xor    $0x1,%eax
    31cb:	84 c0                	test   %al,%al
    31cd:	0f 84 b5 00 00 00    	je     3288 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    31d3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    31da:	48 89 c7             	mov    %rax,%rdi
    31dd:	e8 00 00 00 00       	callq  31e2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    31e2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    31e8:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    31ef:	0f 8e c0 00 00 00    	jle    32b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    31f5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    31fc:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3203:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 320a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    320a:	48 89 c7             	mov    %rax,%rdi
    320d:	e8 00 00 00 00       	callq  3212 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3212:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3216:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    321d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3224 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3224:	48 89 ce             	mov    %rcx,%rsi
    3227:	48 89 c7             	mov    %rax,%rdi
    322a:	e8 00 00 00 00       	callq  322f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    322f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3233:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    323a:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    323e:	48 89 ce             	mov    %rcx,%rsi
    3241:	48 89 c7             	mov    %rax,%rdi
    3244:	e8 00 00 00 00       	callq  3249 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3249:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    324d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3254:	48 89 d6             	mov    %rdx,%rsi
    3257:	48 89 c7             	mov    %rax,%rdi
    325a:	e8 00 00 00 00       	callq  325f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    325f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3263:	48 89 c7             	mov    %rax,%rdi
    3266:	e8 00 00 00 00       	callq  326b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    326b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    326f:	48 89 c7             	mov    %rax,%rdi
    3272:	e8 00 00 00 00       	callq  3277 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3277:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    327e:	48 89 c7             	mov    %rax,%rdi
    3281:	e8 00 00 00 00       	callq  3286 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3286:	eb 2d                	jmp    32b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3288:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    328f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3296:	48 89 d6             	mov    %rdx,%rsi
    3299:	48 89 c7             	mov    %rax,%rdi
    329c:	e8 00 00 00 00       	callq  32a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    32a1:	0f be d0             	movsbl %al,%edx
    32a4:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    32ab:	89 d6                	mov    %edx,%esi
    32ad:	48 89 c7             	mov    %rax,%rdi
    32b0:	e8 00 00 00 00       	callq  32b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    32b5:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    32bc:	00 00 00 
    32bf:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    32c6:	48 89 c7             	mov    %rax,%rdi
    32c9:	e8 00 00 00 00       	callq  32ce <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    32ce:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    32d4:	0f 9f c0             	setg   %al
    32d7:	84 c0                	test   %al,%al
    32d9:	0f 84 e2 02 00 00    	je     35c1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    32df:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    32e6:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    32ec:	89 d6                	mov    %edx,%esi
    32ee:	48 89 c7             	mov    %rax,%rdi
    32f1:	e8 00 00 00 00       	callq  32f6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    32f6:	48 89 c2             	mov    %rax,%rdx
    32f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3300:	48 89 d6             	mov    %rdx,%rsi
    3303:	48 89 c7             	mov    %rax,%rdi
    3306:	e8 00 00 00 00       	callq  330b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    330b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3312:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3319 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3319:	48 89 c7             	mov    %rax,%rdi
    331c:	e8 00 00 00 00       	callq  3321 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3321:	84 c0                	test   %al,%al
    3323:	74 19                	je     333e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3325:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    332c:	be 19 00 00 00       	mov    $0x19,%esi
    3331:	48 89 c7             	mov    %rax,%rdi
    3334:	e8 00 00 00 00       	callq  3339 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3339:	e9 68 02 00 00       	jmpq   35a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    333e:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3345:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3349:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3350 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3350:	48 89 c7             	mov    %rax,%rdi
    3353:	e8 00 00 00 00       	callq  3358 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    3358:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    335c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3363:	b9 01 00 00 00       	mov    $0x1,%ecx
    3368:	ba 00 00 00 00       	mov    $0x0,%edx
    336d:	48 89 c7             	mov    %rax,%rdi
    3370:	e8 00 00 00 00       	callq  3375 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    3375:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    337b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    337f:	48 89 c7             	mov    %rax,%rdi
    3382:	e8 00 00 00 00       	callq  3387 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    3387:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    338b:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    3391:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3398:	48 89 ce             	mov    %rcx,%rsi
    339b:	48 89 c7             	mov    %rax,%rdi
    339e:	e8 00 00 00 00       	callq  33a3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    33a3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33a7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    33ab:	48 89 d6             	mov    %rdx,%rsi
    33ae:	48 89 c7             	mov    %rax,%rdi
    33b1:	e8 00 00 00 00       	callq  33b6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    33b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    33ba:	48 89 c7             	mov    %rax,%rdi
    33bd:	e8 00 00 00 00       	callq  33c2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    33c2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    33c9:	48 89 c7             	mov    %rax,%rdi
    33cc:	e8 00 00 00 00       	callq  33d1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    33d1:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    33d7:	8d 50 ff             	lea    -0x1(%rax),%edx
    33da:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    33de:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    33e5:	48 89 ce             	mov    %rcx,%rsi
    33e8:	48 89 c7             	mov    %rax,%rdi
    33eb:	e8 00 00 00 00       	callq  33f0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    33f0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    33f4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    33f8:	48 89 d6             	mov    %rdx,%rsi
    33fb:	48 89 c7             	mov    %rax,%rdi
    33fe:	e8 00 00 00 00       	callq  3403 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    3403:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3407:	48 89 c7             	mov    %rax,%rdi
    340a:	e8 00 00 00 00       	callq  340f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    340f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3413:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 341a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    341a:	48 89 c7             	mov    %rax,%rdi
    341d:	e8 00 00 00 00       	callq  3422 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    3422:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3426:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 342d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    342d:	48 89 c7             	mov    %rax,%rdi
    3430:	e8 00 00 00 00       	callq  3435 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    3435:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3439:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3440:	48 89 d6             	mov    %rdx,%rsi
    3443:	48 89 c7             	mov    %rax,%rdi
    3446:	e8 00 00 00 00       	callq  344b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    344b:	83 f0 01             	xor    $0x1,%eax
    344e:	84 c0                	test   %al,%al
    3450:	74 38                	je     348a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    3452:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3456:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    345a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3461 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    3461:	48 89 c7             	mov    %rax,%rdi
    3464:	e8 00 00 00 00       	callq  3469 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    3469:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    346d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3471:	48 89 d6             	mov    %rdx,%rsi
    3474:	48 89 c7             	mov    %rax,%rdi
    3477:	e8 00 00 00 00       	callq  347c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    347c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3480:	48 89 c7             	mov    %rax,%rdi
    3483:	e8 00 00 00 00       	callq  3488 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    3488:	eb 74                	jmp    34fe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    348a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    348e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3495:	48 89 d6             	mov    %rdx,%rsi
    3498:	48 89 c7             	mov    %rax,%rdi
    349b:	e8 00 00 00 00       	callq  34a0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    34a0:	0f be d0             	movsbl %al,%edx
    34a3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    34aa:	89 d6                	mov    %edx,%esi
    34ac:	48 89 c7             	mov    %rax,%rdi
    34af:	e8 00 00 00 00       	callq  34b4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    34b4:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    34b8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    34bf:	48 89 d6             	mov    %rdx,%rsi
    34c2:	48 89 c7             	mov    %rax,%rdi
    34c5:	e8 00 00 00 00       	callq  34ca <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    34ca:	89 c1                	mov    %eax,%ecx
    34cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34d0:	ba 0a 00 00 00       	mov    $0xa,%edx
    34d5:	89 ce                	mov    %ecx,%esi
    34d7:	48 89 c7             	mov    %rax,%rdi
    34da:	e8 00 00 00 00       	callq  34df <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    34df:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    34e3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    34e7:	48 89 d6             	mov    %rdx,%rsi
    34ea:	48 89 c7             	mov    %rax,%rdi
    34ed:	e8 00 00 00 00       	callq  34f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    34f2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34f6:	48 89 c7             	mov    %rax,%rdi
    34f9:	e8 00 00 00 00       	callq  34fe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    34fe:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3502:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3509:	48 89 d6             	mov    %rdx,%rsi
    350c:	48 89 c7             	mov    %rax,%rdi
    350f:	e8 00 00 00 00       	callq  3514 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    3514:	83 f0 01             	xor    $0x1,%eax
    3517:	84 c0                	test   %al,%al
    3519:	74 31                	je     354c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    351b:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    3522:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3526:	ba 0a 00 00 00       	mov    $0xa,%edx
    352b:	48 89 ce             	mov    %rcx,%rsi
    352e:	48 89 c7             	mov    %rax,%rdi
    3531:	e8 00 00 00 00       	callq  3536 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    3536:	0f be d0             	movsbl %al,%edx
    3539:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3540:	89 d6                	mov    %edx,%esi
    3542:	48 89 c7             	mov    %rax,%rdi
    3545:	e8 00 00 00 00       	callq  354a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    354a:	eb 2a                	jmp    3576 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    354c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3550:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3557:	48 89 d6             	mov    %rdx,%rsi
    355a:	48 89 c7             	mov    %rax,%rdi
    355d:	e8 00 00 00 00       	callq  3562 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    3562:	0f be d0             	movsbl %al,%edx
    3565:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    356c:	89 d6                	mov    %edx,%esi
    356e:	48 89 c7             	mov    %rax,%rdi
    3571:	e8 00 00 00 00       	callq  3576 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    3576:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    357a:	48 89 c7             	mov    %rax,%rdi
    357d:	e8 00 00 00 00       	callq  3582 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    3582:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3586:	48 89 c7             	mov    %rax,%rdi
    3589:	e8 00 00 00 00       	callq  358e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    358e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3592:	48 89 c7             	mov    %rax,%rdi
    3595:	e8 00 00 00 00       	callq  359a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    359a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    359e:	48 89 c7             	mov    %rax,%rdi
    35a1:	e8 00 00 00 00       	callq  35a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    35a6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    35ad:	48 89 c7             	mov    %rax,%rdi
    35b0:	e8 00 00 00 00       	callq  35b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    35b5:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    35bc:	e9 fe fc ff ff       	jmpq   32bf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    35c1:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    35c2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    35c9:	48 89 c7             	mov    %rax,%rdi
    35cc:	e8 00 00 00 00       	callq  35d1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    35d1:	e9 59 01 00 00       	jmpq   372f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    35d6:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    35d9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    35e0:	48 89 c7             	mov    %rax,%rdi
    35e3:	e8 00 00 00 00       	callq  35e8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    35e8:	e9 14 01 00 00       	jmpq   3701 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    35ed:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    35f0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    35f4:	48 89 c7             	mov    %rax,%rdi
    35f7:	e8 00 00 00 00       	callq  35fc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    35fc:	eb 03                	jmp    3601 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    35fe:	48 89 c3             	mov    %rax,%rbx
    3601:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3605:	48 89 c7             	mov    %rax,%rdi
    3608:	e8 00 00 00 00       	callq  360d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    360d:	eb 03                	jmp    3612 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    360f:	48 89 c3             	mov    %rax,%rbx
    3612:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3619:	48 89 c7             	mov    %rax,%rdi
    361c:	e8 00 00 00 00       	callq  3621 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    3621:	e9 db 00 00 00       	jmpq   3701 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    3626:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    3629:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    362d:	48 89 c7             	mov    %rax,%rdi
    3630:	e8 00 00 00 00       	callq  3635 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    3635:	e9 b3 00 00 00       	jmpq   36ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    363a:	48 89 c3             	mov    %rax,%rbx
    363d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3641:	48 89 c7             	mov    %rax,%rdi
    3644:	e8 00 00 00 00       	callq  3649 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    3649:	e9 9f 00 00 00       	jmpq   36ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    364e:	48 89 c3             	mov    %rax,%rbx
    3651:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3655:	48 89 c7             	mov    %rax,%rdi
    3658:	e8 00 00 00 00       	callq  365d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    365d:	e9 8b 00 00 00       	jmpq   36ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    3662:	48 89 c3             	mov    %rax,%rbx
    3665:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3669:	48 89 c7             	mov    %rax,%rdi
    366c:	e8 00 00 00 00       	callq  3671 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    3671:	eb 69                	jmp    36dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    3673:	48 89 c3             	mov    %rax,%rbx
    3676:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    367a:	48 89 c7             	mov    %rax,%rdi
    367d:	e8 00 00 00 00       	callq  3682 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    3682:	eb 58                	jmp    36dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    3684:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    3687:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    368b:	48 89 c7             	mov    %rax,%rdi
    368e:	e8 00 00 00 00       	callq  3693 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    3693:	eb 14                	jmp    36a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    3695:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    3698:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    369c:	48 89 c7             	mov    %rax,%rdi
    369f:	e8 00 00 00 00       	callq  36a4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    36a4:	eb 03                	jmp    36a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    36a6:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    36a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    36ad:	48 89 c7             	mov    %rax,%rdi
    36b0:	e8 00 00 00 00       	callq  36b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    36b5:	eb 03                	jmp    36ba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    36b7:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    36ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    36be:	48 89 c7             	mov    %rax,%rdi
    36c1:	e8 00 00 00 00       	callq  36c6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    36c6:	eb 03                	jmp    36cb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    36c8:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    36cb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36cf:	48 89 c7             	mov    %rax,%rdi
    36d2:	e8 00 00 00 00       	callq  36d7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    36d7:	eb 03                	jmp    36dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    36d9:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    36dc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36e0:	48 89 c7             	mov    %rax,%rdi
    36e3:	e8 00 00 00 00       	callq  36e8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    36e8:	eb 03                	jmp    36ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    36ea:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    36ed:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    36f4:	48 89 c7             	mov    %rax,%rdi
    36f7:	e8 00 00 00 00       	callq  36fc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    36fc:	eb 03                	jmp    3701 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    36fe:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    3701:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3708:	48 89 c7             	mov    %rax,%rdi
    370b:	e8 00 00 00 00       	callq  3710 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    3710:	eb 03                	jmp    3715 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    3712:	48 89 c3             	mov    %rax,%rbx
    3715:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    371c:	48 89 c7             	mov    %rax,%rdi
    371f:	e8 00 00 00 00       	callq  3724 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    3724:	48 89 d8             	mov    %rbx,%rax
    3727:	48 89 c7             	mov    %rax,%rdi
    372a:	e8 00 00 00 00       	callq  372f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    372f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3736:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    373a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3741:	00 00 
    3743:	74 05                	je     374a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    3745:	e8 00 00 00 00       	callq  374a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    374a:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    3751:	5b                   	pop    %rbx
    3752:	5d                   	pop    %rbp
    3753:	c3                   	retq   

0000000000003754 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    3754:	55                   	push   %rbp
    3755:	48 89 e5             	mov    %rsp,%rbp
    3758:	53                   	push   %rbx
    3759:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    3760:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    3767:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    376e:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    3775:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    377c:	00 00 
    377e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3782:	31 c0                	xor    %eax,%eax
    QByteArray result;
    3784:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    378b:	48 89 c7             	mov    %rax,%rdi
    378e:	e8 00 00 00 00       	callq  3793 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    3793:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    379a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37a1 <_ZN6Parser11compileAtomE7QString+0x4d>
    37a1:	48 89 c7             	mov    %rax,%rdi
    37a4:	e8 00 00 00 00       	callq  37a9 <_ZN6Parser11compileAtomE7QString+0x55>
    37a9:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    37b0:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    37b7:	b9 00 00 00 00       	mov    $0x0,%ecx
    37bc:	ba 01 00 00 00       	mov    $0x1,%edx
    37c1:	48 89 c7             	mov    %rax,%rdi
    37c4:	e8 00 00 00 00       	callq  37c9 <_ZN6Parser11compileAtomE7QString+0x75>
    37c9:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    37d0:	48 89 c7             	mov    %rax,%rdi
    37d3:	e8 00 00 00 00       	callq  37d8 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    37d8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    37df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37e6 <_ZN6Parser11compileAtomE7QString+0x92>
    37e6:	48 89 c7             	mov    %rax,%rdi
    37e9:	e8 00 00 00 00       	callq  37ee <_ZN6Parser11compileAtomE7QString+0x9a>
    37ee:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    37f5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    37fc:	b9 00 00 00 00       	mov    $0x0,%ecx
    3801:	ba 01 00 00 00       	mov    $0x1,%edx
    3806:	48 89 c7             	mov    %rax,%rdi
    3809:	e8 00 00 00 00       	callq  380e <_ZN6Parser11compileAtomE7QString+0xba>
    380e:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    3815:	48 89 c7             	mov    %rax,%rdi
    3818:	e8 00 00 00 00       	callq  381d <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    381d:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    3824:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 382b <_ZN6Parser11compileAtomE7QString+0xd7>
    382b:	48 89 c7             	mov    %rax,%rdi
    382e:	e8 00 00 00 00       	callq  3833 <_ZN6Parser11compileAtomE7QString+0xdf>
    3833:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    383a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3841:	b9 00 00 00 00       	mov    $0x0,%ecx
    3846:	ba 01 00 00 00       	mov    $0x1,%edx
    384b:	48 89 c7             	mov    %rax,%rdi
    384e:	e8 00 00 00 00       	callq  3853 <_ZN6Parser11compileAtomE7QString+0xff>
    3853:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    385a:	48 89 c7             	mov    %rax,%rdi
    385d:	e8 00 00 00 00       	callq  3862 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3862:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3866:	48 89 c7             	mov    %rax,%rdi
    3869:	e8 00 00 00 00       	callq  386e <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    386e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3875:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3879:	48 89 d6             	mov    %rdx,%rsi
    387c:	48 89 c7             	mov    %rax,%rdi
    387f:	e8 00 00 00 00       	callq  3884 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    3884:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    388b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    388f:	48 89 d6             	mov    %rdx,%rsi
    3892:	48 89 c7             	mov    %rax,%rdi
    3895:	e8 00 00 00 00       	callq  389a <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    389a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    38a1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 38a8 <_ZN6Parser11compileAtomE7QString+0x154>
    38a8:	48 89 c7             	mov    %rax,%rdi
    38ab:	e8 00 00 00 00       	callq  38b0 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    38b0:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    38b7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    38be:	b9 00 00 00 00       	mov    $0x0,%ecx
    38c3:	ba 01 00 00 00       	mov    $0x1,%edx
    38c8:	48 89 c7             	mov    %rax,%rdi
    38cb:	e8 00 00 00 00       	callq  38d0 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    38d0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    38d7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 38de <_ZN6Parser11compileAtomE7QString+0x18a>
    38de:	48 89 c7             	mov    %rax,%rdi
    38e1:	e8 00 00 00 00       	callq  38e6 <_ZN6Parser11compileAtomE7QString+0x192>
    38e6:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    38ed:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    38f4:	b9 00 00 00 00       	mov    $0x0,%ecx
    38f9:	ba 01 00 00 00       	mov    $0x1,%edx
    38fe:	48 89 c7             	mov    %rax,%rdi
    3901:	e8 00 00 00 00       	callq  3906 <_ZN6Parser11compileAtomE7QString+0x1b2>
    3906:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    390d:	48 89 c7             	mov    %rax,%rdi
    3910:	e8 00 00 00 00       	callq  3915 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    3915:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    391c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3923 <_ZN6Parser11compileAtomE7QString+0x1cf>
    3923:	48 89 c7             	mov    %rax,%rdi
    3926:	e8 00 00 00 00       	callq  392b <_ZN6Parser11compileAtomE7QString+0x1d7>
    392b:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    3932:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3939:	b9 00 00 00 00       	mov    $0x0,%ecx
    393e:	ba 01 00 00 00       	mov    $0x1,%edx
    3943:	48 89 c7             	mov    %rax,%rdi
    3946:	e8 00 00 00 00       	callq  394b <_ZN6Parser11compileAtomE7QString+0x1f7>
    394b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3952:	48 89 c7             	mov    %rax,%rdi
    3955:	e8 00 00 00 00       	callq  395a <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    395a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3961:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3968 <_ZN6Parser11compileAtomE7QString+0x214>
    3968:	48 89 c7             	mov    %rax,%rdi
    396b:	e8 00 00 00 00       	callq  3970 <_ZN6Parser11compileAtomE7QString+0x21c>
    3970:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    3977:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    397e:	b9 00 00 00 00       	mov    $0x0,%ecx
    3983:	ba 01 00 00 00       	mov    $0x1,%edx
    3988:	48 89 c7             	mov    %rax,%rdi
    398b:	e8 00 00 00 00       	callq  3990 <_ZN6Parser11compileAtomE7QString+0x23c>
    3990:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3997:	48 89 c7             	mov    %rax,%rdi
    399a:	e8 00 00 00 00       	callq  399f <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    399f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    39a6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39ad <_ZN6Parser11compileAtomE7QString+0x259>
    39ad:	48 89 c7             	mov    %rax,%rdi
    39b0:	e8 00 00 00 00       	callq  39b5 <_ZN6Parser11compileAtomE7QString+0x261>
    39b5:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    39bc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    39c3:	b9 00 00 00 00       	mov    $0x0,%ecx
    39c8:	ba 01 00 00 00       	mov    $0x1,%edx
    39cd:	48 89 c7             	mov    %rax,%rdi
    39d0:	e8 00 00 00 00       	callq  39d5 <_ZN6Parser11compileAtomE7QString+0x281>
    39d5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    39dc:	48 89 c7             	mov    %rax,%rdi
    39df:	e8 00 00 00 00       	callq  39e4 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    39e4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    39e8:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    39ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39f6 <_ZN6Parser11compileAtomE7QString+0x2a2>
    39f6:	48 89 c7             	mov    %rax,%rdi
    39f9:	e8 00 00 00 00       	callq  39fe <_ZN6Parser11compileAtomE7QString+0x2aa>
    39fe:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    3a02:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a09:	b9 00 00 00 00       	mov    $0x0,%ecx
    3a0e:	ba 01 00 00 00       	mov    $0x1,%edx
    3a13:	48 89 c7             	mov    %rax,%rdi
    3a16:	e8 00 00 00 00       	callq  3a1b <_ZN6Parser11compileAtomE7QString+0x2c7>
    3a1b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3a1f:	48 89 c7             	mov    %rax,%rdi
    3a22:	e8 00 00 00 00       	callq  3a27 <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    3a27:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    3a2e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3a32:	b9 00 00 00 00       	mov    $0x0,%ecx
    3a37:	ba 01 00 00 00       	mov    $0x1,%edx
    3a3c:	48 89 c7             	mov    %rax,%rdi
    3a3f:	e8 00 00 00 00       	callq  3a44 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    3a44:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3a48:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3a4f <_ZN6Parser11compileAtomE7QString+0x2fb>
    3a4f:	48 89 c7             	mov    %rax,%rdi
    3a52:	e8 00 00 00 00       	callq  3a57 <_ZN6Parser11compileAtomE7QString+0x303>
    3a57:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3a5b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3a5f:	b9 00 00 00 00       	mov    $0x0,%ecx
    3a64:	ba 01 00 00 00       	mov    $0x1,%edx
    3a69:	48 89 c7             	mov    %rax,%rdi
    3a6c:	e8 00 00 00 00       	callq  3a71 <_ZN6Parser11compileAtomE7QString+0x31d>
    3a71:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3a75:	48 89 c7             	mov    %rax,%rdi
    3a78:	e8 00 00 00 00       	callq  3a7d <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    3a7d:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    3a7e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3a82:	48 89 c7             	mov    %rax,%rdi
    3a85:	e8 00 00 00 00       	callq  3a8a <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    3a8a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3a8e:	48 89 c7             	mov    %rax,%rdi
    3a91:	e8 00 00 00 00       	callq  3a96 <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    3a96:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a9d:	48 89 c7             	mov    %rax,%rdi
    3aa0:	e8 00 00 00 00       	callq  3aa5 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    3aa5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3aac:	48 89 c7             	mov    %rax,%rdi
    3aaf:	e8 00 00 00 00       	callq  3ab4 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    3ab4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3abb:	48 89 c7             	mov    %rax,%rdi
    3abe:	e8 00 00 00 00       	callq  3ac3 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    3ac3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3aca:	48 89 c7             	mov    %rax,%rdi
    3acd:	e8 00 00 00 00       	callq  3ad2 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    3ad2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3ad9:	48 89 c7             	mov    %rax,%rdi
    3adc:	e8 00 00 00 00       	callq  3ae1 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    3ae1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3ae8:	48 89 c7             	mov    %rax,%rdi
    3aeb:	e8 00 00 00 00       	callq  3af0 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    3af0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3af7:	48 89 c7             	mov    %rax,%rdi
    3afa:	e8 00 00 00 00       	callq  3aff <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    3aff:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3b06:	48 89 c7             	mov    %rax,%rdi
    3b09:	e8 00 00 00 00       	callq  3b0e <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    3b0e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3b15:	48 89 c7             	mov    %rax,%rdi
    3b18:	e8 00 00 00 00       	callq  3b1d <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3b1d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3b21:	48 89 c7             	mov    %rax,%rdi
    3b24:	e8 00 00 00 00       	callq  3b29 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    3b29:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3b30:	48 89 c7             	mov    %rax,%rdi
    3b33:	e8 00 00 00 00       	callq  3b38 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    3b38:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    3b3f:	48 89 c7             	mov    %rax,%rdi
    3b42:	e8 00 00 00 00       	callq  3b47 <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    3b47:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    3b4e:	48 89 c7             	mov    %rax,%rdi
    3b51:	e8 00 00 00 00       	callq  3b56 <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    3b56:	e9 b8 02 00 00       	jmpq   3e13 <_ZN6Parser11compileAtomE7QString+0x6bf>
    3b5b:	48 89 c3             	mov    %rax,%rbx
    3b5e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    3b65:	48 89 c7             	mov    %rax,%rdi
    3b68:	e8 00 00 00 00       	callq  3b6d <_ZN6Parser11compileAtomE7QString+0x419>
    3b6d:	e9 87 02 00 00       	jmpq   3df9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    3b72:	48 89 c3             	mov    %rax,%rbx
    3b75:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    3b7c:	48 89 c7             	mov    %rax,%rdi
    3b7f:	e8 00 00 00 00       	callq  3b84 <_ZN6Parser11compileAtomE7QString+0x430>
    3b84:	e9 70 02 00 00       	jmpq   3df9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    3b89:	48 89 c3             	mov    %rax,%rbx
    3b8c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    3b93:	48 89 c7             	mov    %rax,%rdi
    3b96:	e8 00 00 00 00       	callq  3b9b <_ZN6Parser11compileAtomE7QString+0x447>
    3b9b:	e9 45 02 00 00       	jmpq   3de5 <_ZN6Parser11compileAtomE7QString+0x691>
    3ba0:	48 89 c3             	mov    %rax,%rbx
    3ba3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    3baa:	48 89 c7             	mov    %rax,%rdi
    3bad:	e8 00 00 00 00       	callq  3bb2 <_ZN6Parser11compileAtomE7QString+0x45e>
    3bb2:	e9 2e 02 00 00       	jmpq   3de5 <_ZN6Parser11compileAtomE7QString+0x691>
    3bb7:	48 89 c3             	mov    %rax,%rbx
    3bba:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    3bc1:	48 89 c7             	mov    %rax,%rdi
    3bc4:	e8 00 00 00 00       	callq  3bc9 <_ZN6Parser11compileAtomE7QString+0x475>
    3bc9:	e9 03 02 00 00       	jmpq   3dd1 <_ZN6Parser11compileAtomE7QString+0x67d>
    3bce:	48 89 c3             	mov    %rax,%rbx
    3bd1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3bd8:	48 89 c7             	mov    %rax,%rdi
    3bdb:	e8 00 00 00 00       	callq  3be0 <_ZN6Parser11compileAtomE7QString+0x48c>
    3be0:	e9 ec 01 00 00       	jmpq   3dd1 <_ZN6Parser11compileAtomE7QString+0x67d>
    3be5:	48 89 c3             	mov    %rax,%rbx
    3be8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3bef:	48 89 c7             	mov    %rax,%rdi
    3bf2:	e8 00 00 00 00       	callq  3bf7 <_ZN6Parser11compileAtomE7QString+0x4a3>
    3bf7:	e9 60 01 00 00       	jmpq   3d5c <_ZN6Parser11compileAtomE7QString+0x608>
    3bfc:	48 89 c3             	mov    %rax,%rbx
    3bff:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3c06:	48 89 c7             	mov    %rax,%rdi
    3c09:	e8 00 00 00 00       	callq  3c0e <_ZN6Parser11compileAtomE7QString+0x4ba>
    3c0e:	e9 49 01 00 00       	jmpq   3d5c <_ZN6Parser11compileAtomE7QString+0x608>
    3c13:	48 89 c3             	mov    %rax,%rbx
    3c16:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3c1d:	48 89 c7             	mov    %rax,%rdi
    3c20:	e8 00 00 00 00       	callq  3c25 <_ZN6Parser11compileAtomE7QString+0x4d1>
    3c25:	e9 1e 01 00 00       	jmpq   3d48 <_ZN6Parser11compileAtomE7QString+0x5f4>
    3c2a:	48 89 c3             	mov    %rax,%rbx
    3c2d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3c34:	48 89 c7             	mov    %rax,%rdi
    3c37:	e8 00 00 00 00       	callq  3c3c <_ZN6Parser11compileAtomE7QString+0x4e8>
    3c3c:	e9 07 01 00 00       	jmpq   3d48 <_ZN6Parser11compileAtomE7QString+0x5f4>
    3c41:	48 89 c3             	mov    %rax,%rbx
    3c44:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3c4b:	48 89 c7             	mov    %rax,%rdi
    3c4e:	e8 00 00 00 00       	callq  3c53 <_ZN6Parser11compileAtomE7QString+0x4ff>
    3c53:	e9 dc 00 00 00       	jmpq   3d34 <_ZN6Parser11compileAtomE7QString+0x5e0>
    3c58:	48 89 c3             	mov    %rax,%rbx
    3c5b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3c62:	48 89 c7             	mov    %rax,%rdi
    3c65:	e8 00 00 00 00       	callq  3c6a <_ZN6Parser11compileAtomE7QString+0x516>
    3c6a:	e9 c5 00 00 00       	jmpq   3d34 <_ZN6Parser11compileAtomE7QString+0x5e0>
    3c6f:	48 89 c3             	mov    %rax,%rbx
    3c72:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3c79:	48 89 c7             	mov    %rax,%rdi
    3c7c:	e8 00 00 00 00       	callq  3c81 <_ZN6Parser11compileAtomE7QString+0x52d>
    3c81:	e9 9a 00 00 00       	jmpq   3d20 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3c86:	48 89 c3             	mov    %rax,%rbx
    3c89:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3c90:	48 89 c7             	mov    %rax,%rdi
    3c93:	e8 00 00 00 00       	callq  3c98 <_ZN6Parser11compileAtomE7QString+0x544>
    3c98:	e9 83 00 00 00       	jmpq   3d20 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3c9d:	48 89 c3             	mov    %rax,%rbx
    3ca0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ca4:	48 89 c7             	mov    %rax,%rdi
    3ca7:	e8 00 00 00 00       	callq  3cac <_ZN6Parser11compileAtomE7QString+0x558>
    3cac:	eb 5e                	jmp    3d0c <_ZN6Parser11compileAtomE7QString+0x5b8>
    3cae:	48 89 c3             	mov    %rax,%rbx
    3cb1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3cb8:	48 89 c7             	mov    %rax,%rdi
    3cbb:	e8 00 00 00 00       	callq  3cc0 <_ZN6Parser11compileAtomE7QString+0x56c>
    3cc0:	eb 4a                	jmp    3d0c <_ZN6Parser11compileAtomE7QString+0x5b8>
    3cc2:	48 89 c3             	mov    %rax,%rbx
    3cc5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3cc9:	48 89 c7             	mov    %rax,%rdi
    3ccc:	e8 00 00 00 00       	callq  3cd1 <_ZN6Parser11compileAtomE7QString+0x57d>
    3cd1:	eb 14                	jmp    3ce7 <_ZN6Parser11compileAtomE7QString+0x593>
    3cd3:	48 89 c3             	mov    %rax,%rbx
    3cd6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3cda:	48 89 c7             	mov    %rax,%rdi
    3cdd:	e8 00 00 00 00       	callq  3ce2 <_ZN6Parser11compileAtomE7QString+0x58e>
    3ce2:	eb 03                	jmp    3ce7 <_ZN6Parser11compileAtomE7QString+0x593>
    3ce4:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    3ce7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ceb:	48 89 c7             	mov    %rax,%rdi
    3cee:	e8 00 00 00 00       	callq  3cf3 <_ZN6Parser11compileAtomE7QString+0x59f>
    3cf3:	eb 03                	jmp    3cf8 <_ZN6Parser11compileAtomE7QString+0x5a4>
    3cf5:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    3cf8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3cff:	48 89 c7             	mov    %rax,%rdi
    3d02:	e8 00 00 00 00       	callq  3d07 <_ZN6Parser11compileAtomE7QString+0x5b3>
    3d07:	eb 03                	jmp    3d0c <_ZN6Parser11compileAtomE7QString+0x5b8>
    3d09:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    3d0c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3d13:	48 89 c7             	mov    %rax,%rdi
    3d16:	e8 00 00 00 00       	callq  3d1b <_ZN6Parser11compileAtomE7QString+0x5c7>
    3d1b:	eb 03                	jmp    3d20 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3d1d:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    3d20:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3d27:	48 89 c7             	mov    %rax,%rdi
    3d2a:	e8 00 00 00 00       	callq  3d2f <_ZN6Parser11compileAtomE7QString+0x5db>
    3d2f:	eb 03                	jmp    3d34 <_ZN6Parser11compileAtomE7QString+0x5e0>
    3d31:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    3d34:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3d3b:	48 89 c7             	mov    %rax,%rdi
    3d3e:	e8 00 00 00 00       	callq  3d43 <_ZN6Parser11compileAtomE7QString+0x5ef>
    3d43:	eb 03                	jmp    3d48 <_ZN6Parser11compileAtomE7QString+0x5f4>
    3d45:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    3d48:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3d4f:	48 89 c7             	mov    %rax,%rdi
    3d52:	e8 00 00 00 00       	callq  3d57 <_ZN6Parser11compileAtomE7QString+0x603>
    3d57:	eb 03                	jmp    3d5c <_ZN6Parser11compileAtomE7QString+0x608>
    3d59:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    3d5c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3d63:	48 89 c7             	mov    %rax,%rdi
    3d66:	e8 00 00 00 00       	callq  3d6b <_ZN6Parser11compileAtomE7QString+0x617>
    3d6b:	eb 03                	jmp    3d70 <_ZN6Parser11compileAtomE7QString+0x61c>
    3d6d:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    3d70:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3d77:	48 89 c7             	mov    %rax,%rdi
    3d7a:	e8 00 00 00 00       	callq  3d7f <_ZN6Parser11compileAtomE7QString+0x62b>
    3d7f:	eb 03                	jmp    3d84 <_ZN6Parser11compileAtomE7QString+0x630>
    3d81:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    3d84:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3d8b:	48 89 c7             	mov    %rax,%rdi
    3d8e:	e8 00 00 00 00       	callq  3d93 <_ZN6Parser11compileAtomE7QString+0x63f>
    3d93:	eb 03                	jmp    3d98 <_ZN6Parser11compileAtomE7QString+0x644>
    3d95:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    3d98:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3d9f:	48 89 c7             	mov    %rax,%rdi
    3da2:	e8 00 00 00 00       	callq  3da7 <_ZN6Parser11compileAtomE7QString+0x653>
    3da7:	eb 03                	jmp    3dac <_ZN6Parser11compileAtomE7QString+0x658>
    3da9:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3dac:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3db0:	48 89 c7             	mov    %rax,%rdi
    3db3:	e8 00 00 00 00       	callq  3db8 <_ZN6Parser11compileAtomE7QString+0x664>
    3db8:	eb 03                	jmp    3dbd <_ZN6Parser11compileAtomE7QString+0x669>
    3dba:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    3dbd:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3dc4:	48 89 c7             	mov    %rax,%rdi
    3dc7:	e8 00 00 00 00       	callq  3dcc <_ZN6Parser11compileAtomE7QString+0x678>
    3dcc:	eb 03                	jmp    3dd1 <_ZN6Parser11compileAtomE7QString+0x67d>
    3dce:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    3dd1:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    3dd8:	48 89 c7             	mov    %rax,%rdi
    3ddb:	e8 00 00 00 00       	callq  3de0 <_ZN6Parser11compileAtomE7QString+0x68c>
    3de0:	eb 03                	jmp    3de5 <_ZN6Parser11compileAtomE7QString+0x691>
    3de2:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    3de5:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    3dec:	48 89 c7             	mov    %rax,%rdi
    3def:	e8 00 00 00 00       	callq  3df4 <_ZN6Parser11compileAtomE7QString+0x6a0>
    3df4:	eb 03                	jmp    3df9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    3df6:	48 89 c3             	mov    %rax,%rbx
    3df9:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    3e00:	48 89 c7             	mov    %rax,%rdi
    3e03:	e8 00 00 00 00       	callq  3e08 <_ZN6Parser11compileAtomE7QString+0x6b4>
    3e08:	48 89 d8             	mov    %rbx,%rax
    3e0b:	48 89 c7             	mov    %rax,%rdi
    3e0e:	e8 00 00 00 00       	callq  3e13 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    3e13:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    3e1a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3e1e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3e25:	00 00 
    3e27:	74 05                	je     3e2e <_ZN6Parser11compileAtomE7QString+0x6da>
    3e29:	e8 00 00 00 00       	callq  3e2e <_ZN6Parser11compileAtomE7QString+0x6da>
    3e2e:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    3e35:	5b                   	pop    %rbx
    3e36:	5d                   	pop    %rbp
    3e37:	c3                   	retq   

0000000000003e38 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    3e38:	55                   	push   %rbp
    3e39:	48 89 e5             	mov    %rsp,%rbp
    3e3c:	53                   	push   %rbx
    3e3d:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    3e44:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    3e4b:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    3e52:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    3e59:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3e60:	00 00 
    3e62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3e66:	31 c0                	xor    %eax,%eax
    QByteArray result;
    3e68:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3e6c:	48 89 c7             	mov    %rax,%rdi
    3e6f:	e8 00 00 00 00       	callq  3e74 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    3e74:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3e7b:	48 89 c7             	mov    %rax,%rdi
    3e7e:	e8 00 00 00 00       	callq  3e83 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    3e83:	85 c0                	test   %eax,%eax
    3e85:	0f 9e c0             	setle  %al
    3e88:	84 c0                	test   %al,%al
    3e8a:	74 0a                	je     3e96 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    3e8c:	bb 00 00 00 00       	mov    $0x0,%ebx
    3e91:	e9 27 01 00 00       	jmpq   3fbd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    3e96:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3e9a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ea1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    3ea1:	48 89 c7             	mov    %rax,%rdi
    3ea4:	e8 00 00 00 00       	callq  3ea9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    3ea9:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3ead:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3eb1:	b9 00 00 00 00       	mov    $0x0,%ecx
    3eb6:	ba 00 00 00 00       	mov    $0x0,%edx
    3ebb:	48 89 c7             	mov    %rax,%rdi
    3ebe:	e8 00 00 00 00       	callq  3ec3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    3ec3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3ec7:	48 89 c7             	mov    %rax,%rdi
    3eca:	e8 00 00 00 00       	callq  3ecf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    3ecf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ed3:	be 00 00 00 00       	mov    $0x0,%esi
    3ed8:	48 89 c7             	mov    %rax,%rdi
    3edb:	e8 00 00 00 00       	callq  3ee0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    3ee0:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    3ee7:	8b 55 8c             	mov    -0x74(%rbp),%edx
    3eea:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    3ef1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ef5:	b9 00 00 00 00       	mov    $0x0,%ecx
    3efa:	48 89 c7             	mov    %rax,%rdi
    3efd:	e8 00 00 00 00       	callq  3f02 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    3f02:	89 45 8c             	mov    %eax,-0x74(%rbp)
    3f05:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    3f09:	0f 95 c0             	setne  %al
    3f0c:	84 c0                	test   %al,%al
    3f0e:	0f 84 98 00 00 00    	je     3fac <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    3f14:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3f18:	48 89 c7             	mov    %rax,%rdi
    3f1b:	e8 00 00 00 00       	callq  3f20 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    3f20:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    3f23:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3f27:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    3f2b:	ba 00 00 00 00       	mov    $0x0,%edx
    3f30:	48 89 ce             	mov    %rcx,%rsi
    3f33:	48 89 c7             	mov    %rax,%rdi
    3f36:	e8 00 00 00 00       	callq  3f3b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    3f3b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3f3f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    3f46:	48 89 d6             	mov    %rdx,%rsi
    3f49:	48 89 c7             	mov    %rax,%rdi
    3f4c:	e8 00 00 00 00       	callq  3f51 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    3f51:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3f55:	48 89 c7             	mov    %rax,%rdi
    3f58:	e8 00 00 00 00       	callq  3f5d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    3f5d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3f61:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    3f65:	ba 00 00 00 00       	mov    $0x0,%edx
    3f6a:	48 89 ce             	mov    %rcx,%rsi
    3f6d:	48 89 c7             	mov    %rax,%rdi
    3f70:	e8 00 00 00 00       	callq  3f75 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    3f75:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f79:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3f7d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    3f84:	48 89 ce             	mov    %rcx,%rsi
    3f87:	48 89 c7             	mov    %rax,%rdi
    3f8a:	e8 00 00 00 00       	callq  3f8f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    3f8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f93:	48 89 c7             	mov    %rax,%rdi
    3f96:	e8 00 00 00 00       	callq  3f9b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    3f9b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3f9f:	48 89 c7             	mov    %rax,%rdi
    3fa2:	e8 00 00 00 00       	callq  3fa7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    3fa7:	e9 3b ff ff ff       	jmpq   3ee7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    3fac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3fb0:	48 89 c7             	mov    %rax,%rdi
    3fb3:	e8 00 00 00 00       	callq  3fb8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    3fb8:	bb 01 00 00 00       	mov    $0x1,%ebx
    3fbd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3fc1:	48 89 c7             	mov    %rax,%rdi
    3fc4:	e8 00 00 00 00       	callq  3fc9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    3fc9:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    3fcc:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    3fcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3fd1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3fd8:	00 00 
    3fda:	74 76                	je     4052 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    3fdc:	eb 6f                	jmp    404d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    3fde:	48 89 c3             	mov    %rax,%rbx
    3fe1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3fe5:	48 89 c7             	mov    %rax,%rdi
    3fe8:	e8 00 00 00 00       	callq  3fed <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    3fed:	eb 47                	jmp    4036 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    3fef:	48 89 c3             	mov    %rax,%rbx
    3ff2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ff6:	48 89 c7             	mov    %rax,%rdi
    3ff9:	e8 00 00 00 00       	callq  3ffe <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    3ffe:	eb 36                	jmp    4036 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4000:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4003:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4007:	48 89 c7             	mov    %rax,%rdi
    400a:	e8 00 00 00 00       	callq  400f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    400f:	eb 14                	jmp    4025 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4011:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4014:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4018:	48 89 c7             	mov    %rax,%rdi
    401b:	e8 00 00 00 00       	callq  4020 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4020:	eb 03                	jmp    4025 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4022:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4025:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4029:	48 89 c7             	mov    %rax,%rdi
    402c:	e8 00 00 00 00       	callq  4031 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4031:	eb 03                	jmp    4036 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4033:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4036:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    403a:	48 89 c7             	mov    %rax,%rdi
    403d:	e8 00 00 00 00       	callq  4042 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4042:	48 89 d8             	mov    %rbx,%rax
    4045:	48 89 c7             	mov    %rax,%rdi
    4048:	e8 00 00 00 00       	callq  404d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    404d:	e8 00 00 00 00       	callq  4052 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4052:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4059:	5b                   	pop    %rbx
    405a:	5d                   	pop    %rbp
    405b:	c3                   	retq   

000000000000405c <_Z12compileBlockR11QStringList>:

QByteArray  compileBlock(QStringList &block){
    405c:	55                   	push   %rbp
    405d:	48 89 e5             	mov    %rsp,%rbp
    4060:	48 83 ec 20          	sub    $0x20,%rsp
    4064:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4068:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    406c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4073:	00 00 
    4075:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4079:	31 c0                	xor    %eax,%eax
    QByteArray result;
    407b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    407f:	48 89 c7             	mov    %rax,%rdi
    4082:	e8 00 00 00 00       	callq  4087 <_Z12compileBlockR11QStringList+0x2b>

    return result;
    4087:	90                   	nop
}
    4088:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    408c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4090:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    4097:	00 00 
    4099:	74 05                	je     40a0 <_Z12compileBlockR11QStringList+0x44>
    409b:	e8 00 00 00 00       	callq  40a0 <_Z12compileBlockR11QStringList+0x44>
    40a0:	c9                   	leaveq 
    40a1:	c3                   	retq   

00000000000040a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    40a2:	55                   	push   %rbp
    40a3:	48 89 e5             	mov    %rsp,%rbp
    40a6:	53                   	push   %rbx
    40a7:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    40ae:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    40b5:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    40bc:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    40c3:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    40ca:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    40d1:	00 00 
    40d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    40d7:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    40d9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    40e0:	48 89 c7             	mov    %rax,%rdi
    40e3:	e8 00 00 00 00       	callq  40e8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    40e8:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    40ef:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    40f6:	b9 00 00 00 00       	mov    $0x0,%ecx
    40fb:	ba 01 00 00 00       	mov    $0x1,%edx
    4100:	48 89 c7             	mov    %rax,%rdi
    4103:	e8 00 00 00 00       	callq  4108 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4108:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    410f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4116:	48 89 d6             	mov    %rdx,%rsi
    4119:	48 89 c7             	mov    %rax,%rdi
    411c:	e8 00 00 00 00       	callq  4121 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4121:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4128:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    412f:	48 89 d6             	mov    %rdx,%rsi
    4132:	48 89 c7             	mov    %rax,%rdi
    4135:	e8 00 00 00 00       	callq  413a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    413a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4141:	48 89 c7             	mov    %rax,%rdi
    4144:	e8 00 00 00 00       	callq  4149 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4149:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4150:	48 89 c7             	mov    %rax,%rdi
    4153:	e8 00 00 00 00       	callq  4158 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4158:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    415f:	48 89 c7             	mov    %rax,%rdi
    4162:	e8 00 00 00 00       	callq  4167 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4167:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    416e:	48 89 c7             	mov    %rax,%rdi
    4171:	e8 00 00 00 00       	callq  4176 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4176:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    417d:	00 00 00 
    int     lineBase = 0;
    4180:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4187:	00 00 00 
    int     line     = 0;
    418a:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4191:	00 00 00 

    unsigned int BFL = str.count("{");
    4194:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    419b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    41a2:	48 89 c7             	mov    %rax,%rdi
    41a5:	e8 00 00 00 00       	callq  41aa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    41aa:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    41b1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    41b8:	ba 01 00 00 00       	mov    $0x1,%edx
    41bd:	48 89 ce             	mov    %rcx,%rsi
    41c0:	48 89 c7             	mov    %rax,%rdi
    41c3:	e8 00 00 00 00       	callq  41c8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    41c8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    41ce:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    41d5:	48 89 c7             	mov    %rax,%rdi
    41d8:	e8 00 00 00 00       	callq  41dd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    41dd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    41e4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41eb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    41eb:	48 89 c7             	mov    %rax,%rdi
    41ee:	e8 00 00 00 00       	callq  41f3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    41f3:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    41fa:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4201:	ba 01 00 00 00       	mov    $0x1,%edx
    4206:	48 89 ce             	mov    %rcx,%rsi
    4209:	48 89 c7             	mov    %rax,%rdi
    420c:	e8 00 00 00 00       	callq  4211 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4211:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4217:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    421e:	48 89 c7             	mov    %rax,%rdi
    4221:	e8 00 00 00 00       	callq  4226 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4226:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    422d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4234 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4234:	48 89 c7             	mov    %rax,%rdi
    4237:	e8 00 00 00 00       	callq  423c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    423c:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4243:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    424a:	ba 01 00 00 00       	mov    $0x1,%edx
    424f:	48 89 ce             	mov    %rcx,%rsi
    4252:	48 89 c7             	mov    %rax,%rdi
    4255:	e8 00 00 00 00       	callq  425a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    425a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4260:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4267:	48 89 c7             	mov    %rax,%rdi
    426a:	e8 00 00 00 00       	callq  426f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    426f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4276:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 427d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    427d:	48 89 c7             	mov    %rax,%rdi
    4280:	e8 00 00 00 00       	callq  4285 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4285:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    428c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4293:	ba 01 00 00 00       	mov    $0x1,%edx
    4298:	48 89 ce             	mov    %rcx,%rsi
    429b:	48 89 c7             	mov    %rax,%rdi
    429e:	e8 00 00 00 00       	callq  42a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    42a3:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    42a9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    42b0:	48 89 c7             	mov    %rax,%rdi
    42b3:	e8 00 00 00 00       	callq  42b8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    42b8:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    42be:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    42c4:	74 43                	je     4309 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    42c6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    42cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 42d4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    42d4:	48 89 c7             	mov    %rax,%rdi
    42d7:	e8 00 00 00 00       	callq  42dc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    42dc:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    42e3:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    42ea:	48 89 d6             	mov    %rdx,%rsi
    42ed:	48 89 c7             	mov    %rax,%rdi
    42f0:	e8 00 00 00 00       	callq  42f5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    42f5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    42fc:	48 89 c7             	mov    %rax,%rdi
    42ff:	e8 00 00 00 00       	callq  4304 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4304:	e9 6f 03 00 00       	jmpq   4678 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4309:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    430f:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4315:	74 43                	je     435a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4317:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    431e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4325 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4325:	48 89 c7             	mov    %rax,%rdi
    4328:	e8 00 00 00 00       	callq  432d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    432d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4334:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    433b:	48 89 d6             	mov    %rdx,%rsi
    433e:	48 89 c7             	mov    %rax,%rdi
    4341:	e8 00 00 00 00       	callq  4346 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4346:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    434d:	48 89 c7             	mov    %rax,%rdi
    4350:	e8 00 00 00 00       	callq  4355 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    4355:	e9 1e 03 00 00       	jmpq   4678 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    435a:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4361:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4368:	b9 00 00 00 00       	mov    $0x0,%ecx
    436d:	ba 00 00 00 00       	mov    $0x0,%edx
    4372:	48 89 c7             	mov    %rax,%rdi
    4375:	e8 00 00 00 00       	callq  437a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    437a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    4380:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    4387:	0f 88 ea 02 00 00    	js     4677 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    438d:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    4393:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    4399:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    439c:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    43a3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    43a7:	48 89 d6             	mov    %rdx,%rsi
    43aa:	48 89 c7             	mov    %rax,%rdi
    43ad:	e8 00 00 00 00       	callq  43b2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    43b2:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    43b6:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    43bd:	89 da                	mov    %ebx,%edx
    43bf:	48 89 ce             	mov    %rcx,%rsi
    43c2:	48 89 c7             	mov    %rax,%rdi
    43c5:	e8 00 00 00 00       	callq  43ca <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    43ca:	83 c0 01             	add    $0x1,%eax
    43cd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    43d3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    43d7:	48 89 c7             	mov    %rax,%rdi
    43da:	e8 00 00 00 00       	callq  43df <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    43df:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    43e3:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    43ea:	ba 01 00 00 00       	mov    $0x1,%edx
    43ef:	48 89 ce             	mov    %rcx,%rsi
    43f2:	48 89 c7             	mov    %rax,%rdi
    43f5:	e8 00 00 00 00       	callq  43fa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    43fa:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    43fe:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4405:	48 89 d6             	mov    %rdx,%rsi
    4408:	48 89 c7             	mov    %rax,%rdi
    440b:	e8 00 00 00 00       	callq  4410 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    4410:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4414:	48 89 c7             	mov    %rax,%rdi
    4417:	e8 00 00 00 00       	callq  441c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    441c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4420:	be 7b 00 00 00       	mov    $0x7b,%esi
    4425:	48 89 c7             	mov    %rax,%rdi
    4428:	e8 00 00 00 00       	callq  442d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    442d:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    4433:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    4437:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    443e:	b9 01 00 00 00       	mov    $0x1,%ecx
    4443:	48 89 c7             	mov    %rax,%rdi
    4446:	e8 00 00 00 00       	callq  444b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    444b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    4451:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    4457:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    445e:	89 d6                	mov    %edx,%esi
    4460:	48 89 c7             	mov    %rax,%rdi
    4463:	e8 00 00 00 00       	callq  4468 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    4468:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    446c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4470:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4474:	48 89 c7             	mov    %rax,%rdi
    4477:	e8 00 00 00 00       	callq  447c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    447c:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    4483:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    448a:	00 00 00 
        int br=0;
    448d:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    4494:	00 00 00 

        while(bl != br)
    4497:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    449d:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    44a3:	0f 84 a2 00 00 00    	je     454b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    44a9:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    44b0:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    44b6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    44bd:	89 d6                	mov    %edx,%esi
    44bf:	48 89 c7             	mov    %rax,%rdi
    44c2:	e8 00 00 00 00       	callq  44c7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    44c7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    44cb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    44cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    44d3:	48 89 c7             	mov    %rax,%rdi
    44d6:	e8 00 00 00 00       	callq  44db <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    44db:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    44e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    44e6:	be 7b 00 00 00       	mov    $0x7b,%esi
    44eb:	48 89 c7             	mov    %rax,%rdi
    44ee:	e8 00 00 00 00       	callq  44f3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    44f3:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    44f7:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    44fe:	89 d6                	mov    %edx,%esi
    4500:	89 c7                	mov    %eax,%edi
    4502:	e8 00 00 00 00       	callq  4507 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    4507:	84 c0                	test   %al,%al
    4509:	74 07                	je     4512 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    450b:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    4512:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4516:	be 7d 00 00 00       	mov    $0x7d,%esi
    451b:	48 89 c7             	mov    %rax,%rdi
    451e:	e8 00 00 00 00       	callq  4523 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    4523:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    4527:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    452e:	89 d6                	mov    %edx,%esi
    4530:	89 c7                	mov    %eax,%edi
    4532:	e8 00 00 00 00       	callq  4537 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    4537:	84 c0                	test   %al,%al
    4539:	0f 84 58 ff ff ff    	je     4497 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    453f:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    4546:	e9 4c ff ff ff       	jmpq   4497 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    454b:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    4551:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    4557:	89 c1                	mov    %eax,%ecx
    4559:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    455d:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    4563:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    456a:	48 89 c7             	mov    %rax,%rdi
    456d:	e8 00 00 00 00       	callq  4572 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    4572:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    4576:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    457d:	48 89 d6             	mov    %rdx,%rsi
    4580:	48 89 c7             	mov    %rax,%rdi
    4583:	e8 00 00 00 00       	callq  4588 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    4588:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    458c:	48 89 c7             	mov    %rax,%rdi
    458f:	e8 00 00 00 00       	callq  4594 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    4594:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4598:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 459f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    459f:	48 89 c7             	mov    %rax,%rdi
    45a2:	e8 00 00 00 00       	callq  45a7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    45a7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    45ab:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    45af:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    45b6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    45bc:	b9 00 00 00 00       	mov    $0x0,%ecx
    45c1:	48 89 c7             	mov    %rax,%rdi
    45c4:	e8 00 00 00 00       	callq  45c9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    45c9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    45cd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    45d4:	48 89 d6             	mov    %rdx,%rsi
    45d7:	48 89 c7             	mov    %rax,%rdi
    45da:	e8 00 00 00 00       	callq  45df <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    45df:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    45e3:	48 89 c7             	mov    %rax,%rdi
    45e6:	e8 00 00 00 00       	callq  45eb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    45eb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    45ef:	48 89 c7             	mov    %rax,%rdi
    45f2:	e8 00 00 00 00       	callq  45f7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    45f7:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    45fe:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    4605:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    460c:	48 89 ce             	mov    %rcx,%rsi
    460f:	48 89 c7             	mov    %rax,%rdi
    4612:	e8 00 00 00 00       	callq  4617 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    4617:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    461e:	48 89 c7             	mov    %rax,%rdi
    4621:	e8 00 00 00 00       	callq  4626 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    4626:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    462c:	89 c2                	mov    %eax,%edx
    462e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4632:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    4639:	48 89 ce             	mov    %rcx,%rsi
    463c:	48 89 c7             	mov    %rax,%rdi
    463f:	e8 00 00 00 00       	callq  4644 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    4644:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4648:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    464f:	48 89 d6             	mov    %rdx,%rsi
    4652:	48 89 c7             	mov    %rax,%rdi
    4655:	e8 00 00 00 00       	callq  465a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    465a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    465e:	48 89 c7             	mov    %rax,%rdi
    4661:	e8 00 00 00 00       	callq  4666 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    4666:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    466c:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    4672:	e9 e3 fc ff ff       	jmpq   435a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    4677:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    4678:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    467f:	48 89 c7             	mov    %rax,%rdi
    4682:	e8 00 00 00 00       	callq  4687 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    4687:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    468e:	48 89 c7             	mov    %rax,%rdi
    4691:	e8 00 00 00 00       	callq  4696 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    4696:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    469d:	48 89 c7             	mov    %rax,%rdi
    46a0:	e8 00 00 00 00       	callq  46a5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    46a5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    46ac:	48 89 c7             	mov    %rax,%rdi
    46af:	e8 00 00 00 00       	callq  46b4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    46b4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    46bb:	48 89 c7             	mov    %rax,%rdi
    46be:	e8 00 00 00 00       	callq  46c3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    46c3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    46ca:	48 89 c7             	mov    %rax,%rdi
    46cd:	e8 00 00 00 00       	callq  46d2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    46d2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    46d9:	48 89 c7             	mov    %rax,%rdi
    46dc:	e8 00 00 00 00       	callq  46e1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    46e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    46e5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    46ec:	00 00 
    46ee:	0f 84 89 01 00 00    	je     487d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    46f4:	e9 7f 01 00 00       	jmpq   4878 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    46f9:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    46fc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4703:	48 89 c7             	mov    %rax,%rdi
    4706:	e8 00 00 00 00       	callq  470b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    470b:	e9 d6 00 00 00       	jmpq   47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    4710:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    4713:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    471a:	48 89 c7             	mov    %rax,%rdi
    471d:	e8 00 00 00 00       	callq  4722 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    4722:	e9 bf 00 00 00       	jmpq   47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    4727:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    472a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4731:	48 89 c7             	mov    %rax,%rdi
    4734:	e8 00 00 00 00       	callq  4739 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    4739:	e9 a8 00 00 00       	jmpq   47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    473e:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    4741:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4748:	48 89 c7             	mov    %rax,%rdi
    474b:	e8 00 00 00 00       	callq  4750 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    4750:	e9 91 00 00 00       	jmpq   47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    4755:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    4758:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    475f:	48 89 c7             	mov    %rax,%rdi
    4762:	e8 00 00 00 00       	callq  4767 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    4767:	eb 7d                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    4769:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    476c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4773:	48 89 c7             	mov    %rax,%rdi
    4776:	e8 00 00 00 00       	callq  477b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    477b:	eb 69                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    477d:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    4780:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4784:	48 89 c7             	mov    %rax,%rdi
    4787:	e8 00 00 00 00       	callq  478c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    478c:	eb 58                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    478e:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    4791:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4795:	48 89 c7             	mov    %rax,%rdi
    4798:	e8 00 00 00 00       	callq  479d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    479d:	eb 47                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    479f:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    47a2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    47a6:	48 89 c7             	mov    %rax,%rdi
    47a9:	e8 00 00 00 00       	callq  47ae <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    47ae:	eb 36                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    47b0:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    47b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47b7:	48 89 c7             	mov    %rax,%rdi
    47ba:	e8 00 00 00 00       	callq  47bf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    47bf:	eb 03                	jmp    47c4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    47c1:	48 89 c3             	mov    %rax,%rbx
    47c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    47c8:	48 89 c7             	mov    %rax,%rdi
    47cb:	e8 00 00 00 00       	callq  47d0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    47d0:	eb 14                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    47d2:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    47d5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    47d9:	48 89 c7             	mov    %rax,%rdi
    47dc:	e8 00 00 00 00       	callq  47e1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    47e1:	eb 03                	jmp    47e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    47e3:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    47e6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    47ed:	48 89 c7             	mov    %rax,%rdi
    47f0:	e8 00 00 00 00       	callq  47f5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    47f5:	eb 03                	jmp    47fa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    47f7:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    47fa:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4801:	48 89 c7             	mov    %rax,%rdi
    4804:	e8 00 00 00 00       	callq  4809 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    4809:	eb 03                	jmp    480e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    480b:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    480e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4815:	48 89 c7             	mov    %rax,%rdi
    4818:	e8 00 00 00 00       	callq  481d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    481d:	eb 03                	jmp    4822 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    481f:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    4822:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4829:	48 89 c7             	mov    %rax,%rdi
    482c:	e8 00 00 00 00       	callq  4831 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    4831:	eb 03                	jmp    4836 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    4833:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    4836:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    483d:	48 89 c7             	mov    %rax,%rdi
    4840:	e8 00 00 00 00       	callq  4845 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    4845:	eb 03                	jmp    484a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    4847:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    484a:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4851:	48 89 c7             	mov    %rax,%rdi
    4854:	e8 00 00 00 00       	callq  4859 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    4859:	eb 03                	jmp    485e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    485b:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    485e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4865:	48 89 c7             	mov    %rax,%rdi
    4868:	e8 00 00 00 00       	callq  486d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    486d:	48 89 d8             	mov    %rbx,%rax
    4870:	48 89 c7             	mov    %rax,%rdi
    4873:	e8 00 00 00 00       	callq  4878 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    4878:	e8 00 00 00 00       	callq  487d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    487d:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    4884:	5b                   	pop    %rbx
    4885:	5d                   	pop    %rbp
    4886:	c3                   	retq   
    4887:	90                   	nop

0000000000004888 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    4888:	55                   	push   %rbp
    4889:	48 89 e5             	mov    %rsp,%rbp
    488c:	53                   	push   %rbx
    488d:	48 83 ec 38          	sub    $0x38,%rsp
    4891:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4895:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4899:	89 55 cc             	mov    %edx,-0x34(%rbp)
    489c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    48a3:	00 00 
    48a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    48a9:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    48ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48af:	8b 55 cc             	mov    -0x34(%rbp),%edx
    48b2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    48b6:	48 89 ce             	mov    %rcx,%rsi
    48b9:	48 89 c7             	mov    %rax,%rdi
    48bc:	e8 00 00 00 00       	callq  48c1 <_ZN6Parser8whatLineE7QStringi+0x39>
    48c1:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    48c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    48c9:	48 89 d6             	mov    %rdx,%rsi
    48cc:	48 89 c7             	mov    %rax,%rdi
    48cf:	e8 00 00 00 00       	callq  48d4 <_ZN6Parser8whatLineE7QStringi+0x4c>
    48d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48d8:	48 89 c7             	mov    %rax,%rdi
    48db:	e8 00 00 00 00       	callq  48e0 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    48e0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48e4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 48eb <_ZN6Parser8whatLineE7QStringi+0x63>
    48eb:	48 89 c7             	mov    %rax,%rdi
    48ee:	e8 00 00 00 00       	callq  48f3 <_ZN6Parser8whatLineE7QStringi+0x6b>
    48f3:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    48f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    48fb:	ba 01 00 00 00       	mov    $0x1,%edx
    4900:	48 89 ce             	mov    %rcx,%rsi
    4903:	48 89 c7             	mov    %rax,%rdi
    4906:	e8 00 00 00 00       	callq  490b <_ZN6Parser8whatLineE7QStringi+0x83>
    490b:	89 c3                	mov    %eax,%ebx
    490d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4911:	48 89 c7             	mov    %rax,%rdi
    4914:	e8 00 00 00 00       	callq  4919 <_ZN6Parser8whatLineE7QStringi+0x91>
    4919:	89 d8                	mov    %ebx,%eax
}
    491b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    491f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4926:	00 00 
    4928:	74 3b                	je     4965 <_ZN6Parser8whatLineE7QStringi+0xdd>
    492a:	eb 34                	jmp    4960 <_ZN6Parser8whatLineE7QStringi+0xd8>
    492c:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    492f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4933:	48 89 c7             	mov    %rax,%rdi
    4936:	e8 00 00 00 00       	callq  493b <_ZN6Parser8whatLineE7QStringi+0xb3>
    493b:	48 89 d8             	mov    %rbx,%rax
    493e:	48 89 c7             	mov    %rax,%rdi
    4941:	e8 00 00 00 00       	callq  4946 <_ZN6Parser8whatLineE7QStringi+0xbe>
    4946:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    4949:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    494d:	48 89 c7             	mov    %rax,%rdi
    4950:	e8 00 00 00 00       	callq  4955 <_ZN6Parser8whatLineE7QStringi+0xcd>
    4955:	48 89 d8             	mov    %rbx,%rax
    4958:	48 89 c7             	mov    %rax,%rdi
    495b:	e8 00 00 00 00       	callq  4960 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    4960:	e8 00 00 00 00       	callq  4965 <_ZN6Parser8whatLineE7QStringi+0xdd>
    4965:	48 83 c4 38          	add    $0x38,%rsp
    4969:	5b                   	pop    %rbx
    496a:	5d                   	pop    %rbp
    496b:	c3                   	retq   

000000000000496c <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    496c:	55                   	push   %rbp
    496d:	48 89 e5             	mov    %rsp,%rbp
    4970:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    4974:	90                   	nop
    4975:	5d                   	pop    %rbp
    4976:	c3                   	retq   
    4977:	90                   	nop

0000000000004978 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    4978:	55                   	push   %rbp
    4979:	48 89 e5             	mov    %rsp,%rbp
    497c:	53                   	push   %rbx
    497d:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    4984:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    498b:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    4992:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    4999:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    49a0:	00 00 
    49a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    49a6:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    49a8:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    49af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49b6 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    49b6:	48 89 c7             	mov    %rax,%rdi
    49b9:	e8 00 00 00 00       	callq  49be <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    49be:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    49c5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49cc <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    49cc:	48 89 c7             	mov    %rax,%rdi
    49cf:	e8 00 00 00 00       	callq  49d4 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    49d4:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    49db:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    49e2:	48 89 d6             	mov    %rdx,%rsi
    49e5:	48 89 c7             	mov    %rax,%rdi
    49e8:	e8 00 00 00 00       	callq  49ed <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    49ed:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    49f4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    49fb:	48 89 d6             	mov    %rdx,%rsi
    49fe:	48 89 c7             	mov    %rax,%rdi
    4a01:	e8 00 00 00 00       	callq  4a06 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    4a06:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4a0d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a14 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    4a14:	48 89 c7             	mov    %rax,%rdi
    4a17:	e8 00 00 00 00       	callq  4a1c <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    4a1c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a23:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a2a <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    4a2a:	48 89 c7             	mov    %rax,%rdi
    4a2d:	e8 00 00 00 00       	callq  4a32 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    4a32:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    4a39:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4a40:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a47:	b9 01 00 00 00       	mov    $0x1,%ecx
    4a4c:	48 89 c7             	mov    %rax,%rdi
    4a4f:	e8 00 00 00 00       	callq  4a54 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    4a54:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a5b:	48 89 c7             	mov    %rax,%rdi
    4a5e:	e8 00 00 00 00       	callq  4a63 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    4a63:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4a6a:	48 89 c7             	mov    %rax,%rdi
    4a6d:	e8 00 00 00 00       	callq  4a72 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    4a72:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4a79:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a80 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    4a80:	48 89 c7             	mov    %rax,%rdi
    4a83:	e8 00 00 00 00       	callq  4a88 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    4a88:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4a8f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a96 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    4a96:	48 89 c7             	mov    %rax,%rdi
    4a99:	e8 00 00 00 00       	callq  4a9e <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    4a9e:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    4aa5:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    4aac:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4ab3:	b9 01 00 00 00       	mov    $0x1,%ecx
    4ab8:	48 89 c7             	mov    %rax,%rdi
    4abb:	e8 00 00 00 00       	callq  4ac0 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    4ac0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4ac7:	48 89 c7             	mov    %rax,%rdi
    4aca:	e8 00 00 00 00       	callq  4acf <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    4acf:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4ad6:	48 89 c7             	mov    %rax,%rdi
    4ad9:	e8 00 00 00 00       	callq  4ade <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    4ade:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    4ae5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4ae9:	48 89 d6             	mov    %rdx,%rsi
    4aec:	48 89 c7             	mov    %rax,%rdi
    4aef:	e8 00 00 00 00       	callq  4af4 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    4af4:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    4afb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4aff:	48 89 d6             	mov    %rdx,%rsi
    4b02:	48 89 c7             	mov    %rax,%rdi
    4b05:	e8 00 00 00 00       	callq  4b0a <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    4b0a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4b11:	be 02 00 00 00       	mov    $0x2,%esi
    4b16:	48 89 c7             	mov    %rax,%rdi
    4b19:	e8 00 00 00 00       	callq  4b1e <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    4b1e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4b25:	be 02 00 00 00       	mov    $0x2,%esi
    4b2a:	48 89 c7             	mov    %rax,%rdi
    4b2d:	e8 00 00 00 00       	callq  4b32 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    4b32:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4b39:	48 89 c7             	mov    %rax,%rdi
    4b3c:	e8 00 00 00 00       	callq  4b41 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    4b41:	84 c0                	test   %al,%al
    4b43:	74 1a                	je     4b5f <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    4b45:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4b49:	be 04 00 00 00       	mov    $0x4,%esi
    4b4e:	48 89 c7             	mov    %rax,%rdi
    4b51:	e8 00 00 00 00       	callq  4b56 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    4b56:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4b59:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    4b5f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4b66:	48 89 c7             	mov    %rax,%rdi
    4b69:	e8 00 00 00 00       	callq  4b6e <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    4b6e:	84 c0                	test   %al,%al
    4b70:	74 1a                	je     4b8c <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    4b72:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4b76:	be 04 00 00 00       	mov    $0x4,%esi
    4b7b:	48 89 c7             	mov    %rax,%rdi
    4b7e:	e8 00 00 00 00       	callq  4b83 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    4b83:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4b86:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    4b8c:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    4b92:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b96:	89 d6                	mov    %edx,%esi
    4b98:	48 89 c7             	mov    %rax,%rdi
    4b9b:	e8 00 00 00 00       	callq  4ba0 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    4ba0:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    4ba6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4baa:	89 d6                	mov    %edx,%esi
    4bac:	48 89 c7             	mov    %rax,%rdi
    4baf:	e8 00 00 00 00       	callq  4bb4 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    4bb4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    4bb8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bbc:	48 89 d6             	mov    %rdx,%rsi
    4bbf:	48 89 c7             	mov    %rax,%rdi
    4bc2:	e8 00 00 00 00       	callq  4bc7 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    4bc7:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    4bcb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4bcf:	48 89 d6             	mov    %rdx,%rsi
    4bd2:	48 89 c7             	mov    %rax,%rdi
    4bd5:	e8 00 00 00 00       	callq  4bda <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    4bda:	e8 00 00 00 00       	callq  4bdf <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    4bdf:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    4be6:	e8 00 00 00 00       	callq  4beb <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    4beb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    4bf1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4bf8:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    4bff:	ba 00 00 00 00       	mov    $0x0,%edx
    4c04:	48 89 ce             	mov    %rcx,%rsi
    4c07:	48 89 c7             	mov    %rax,%rdi
    4c0a:	e8 00 00 00 00       	callq  4c0f <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    4c0f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4c16:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    4c1d:	ba 00 00 00 00       	mov    $0x0,%edx
    4c22:	48 89 ce             	mov    %rcx,%rsi
    4c25:	48 89 c7             	mov    %rax,%rdi
    4c28:	e8 00 00 00 00       	callq  4c2d <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    4c2d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4c34:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4c3b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c42 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    4c42:	48 89 ce             	mov    %rcx,%rsi
    4c45:	48 89 c7             	mov    %rax,%rdi
    4c48:	e8 00 00 00 00       	callq  4c4d <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    4c4d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4c54:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    4c5b:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4c62:	48 89 ce             	mov    %rcx,%rsi
    4c65:	48 89 c7             	mov    %rax,%rdi
    4c68:	e8 00 00 00 00       	callq  4c6d <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    4c6d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4c74:	48 89 c7             	mov    %rax,%rdi
    4c77:	e8 00 00 00 00       	callq  4c7c <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    4c7c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4c83:	48 89 c7             	mov    %rax,%rdi
    4c86:	e8 00 00 00 00       	callq  4c8b <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    4c8b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4c92:	48 89 c7             	mov    %rax,%rdi
    4c95:	e8 00 00 00 00       	callq  4c9a <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    4c9a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4ca1:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    4ca8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4caf <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    4caf:	48 89 c7             	mov    %rax,%rdi
    4cb2:	e8 00 00 00 00       	callq  4cb7 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    4cb7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4cbe:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    4cc5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4ccc <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    4ccc:	48 89 ce             	mov    %rcx,%rsi
    4ccf:	48 89 c7             	mov    %rax,%rdi
    4cd2:	e8 00 00 00 00       	callq  4cd7 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    4cd7:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4cde:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4ce2:	48 89 d6             	mov    %rdx,%rsi
    4ce5:	48 89 c7             	mov    %rax,%rdi
    4ce8:	e8 00 00 00 00       	callq  4ced <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    4ced:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4cf4:	48 89 c7             	mov    %rax,%rdi
    4cf7:	e8 00 00 00 00       	callq  4cfc <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    4cfc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4d03:	48 89 c7             	mov    %rax,%rdi
    4d06:	e8 00 00 00 00       	callq  4d0b <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    4d0b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4d0f:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    4d16:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d1d <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    4d1d:	48 89 c7             	mov    %rax,%rdi
    4d20:	e8 00 00 00 00       	callq  4d25 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    4d25:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4d29:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    4d2d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4d34 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    4d34:	48 89 ce             	mov    %rcx,%rsi
    4d37:	48 89 c7             	mov    %rax,%rdi
    4d3a:	e8 00 00 00 00       	callq  4d3f <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    4d3f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    4d43:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4d47:	48 89 d6             	mov    %rdx,%rsi
    4d4a:	48 89 c7             	mov    %rax,%rdi
    4d4d:	e8 00 00 00 00       	callq  4d52 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    4d52:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4d56:	48 89 c7             	mov    %rax,%rdi
    4d59:	e8 00 00 00 00       	callq  4d5e <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    4d5e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4d62:	48 89 c7             	mov    %rax,%rdi
    4d65:	e8 00 00 00 00       	callq  4d6a <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    4d6a:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    4d71:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4d75:	48 89 d6             	mov    %rdx,%rsi
    4d78:	48 89 c7             	mov    %rax,%rdi
    4d7b:	e8 00 00 00 00       	callq  4d80 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    4d80:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    4d87:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4d8b:	48 89 d6             	mov    %rdx,%rsi
    4d8e:	48 89 c7             	mov    %rax,%rdi
    4d91:	e8 00 00 00 00       	callq  4d96 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    4d96:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4d9a:	48 89 c7             	mov    %rax,%rdi
    4d9d:	e8 00 00 00 00       	callq  4da2 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    4da2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4da6:	48 89 c7             	mov    %rax,%rdi
    4da9:	e8 00 00 00 00       	callq  4dae <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    4dae:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4db5:	48 89 c7             	mov    %rax,%rdi
    4db8:	e8 00 00 00 00       	callq  4dbd <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    4dbd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4dc1:	48 89 c7             	mov    %rax,%rdi
    4dc4:	e8 00 00 00 00       	callq  4dc9 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    4dc9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4dcd:	48 89 c7             	mov    %rax,%rdi
    4dd0:	e8 00 00 00 00       	callq  4dd5 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    4dd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4dd9:	48 89 c7             	mov    %rax,%rdi
    4ddc:	e8 00 00 00 00       	callq  4de1 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    4de1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4de5:	48 89 c7             	mov    %rax,%rdi
    4de8:	e8 00 00 00 00       	callq  4ded <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    4ded:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4df4:	48 89 c7             	mov    %rax,%rdi
    4df7:	e8 00 00 00 00       	callq  4dfc <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    4dfc:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4e03:	48 89 c7             	mov    %rax,%rdi
    4e06:	e8 00 00 00 00       	callq  4e0b <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    4e0b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4e12:	48 89 c7             	mov    %rax,%rdi
    4e15:	e8 00 00 00 00       	callq  4e1a <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    4e1a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4e21:	48 89 c7             	mov    %rax,%rdi
    4e24:	e8 00 00 00 00       	callq  4e29 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    4e29:	90                   	nop
    4e2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e2e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4e35:	00 00 
    4e37:	0f 84 d3 01 00 00    	je     5010 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    4e3d:	e9 c9 01 00 00       	jmpq   500b <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    4e42:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    4e45:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e4c:	48 89 c7             	mov    %rax,%rdi
    4e4f:	e8 00 00 00 00       	callq  4e54 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    4e54:	eb 03                	jmp    4e59 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    4e56:	48 89 c3             	mov    %rax,%rbx
    4e59:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4e60:	48 89 c7             	mov    %rax,%rdi
    4e63:	e8 00 00 00 00       	callq  4e68 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    4e68:	e9 48 01 00 00       	jmpq   4fb5 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4e6d:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    4e70:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4e77:	48 89 c7             	mov    %rax,%rdi
    4e7a:	e8 00 00 00 00       	callq  4e7f <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    4e7f:	eb 03                	jmp    4e84 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    4e81:	48 89 c3             	mov    %rax,%rbx
    4e84:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4e8b:	48 89 c7             	mov    %rax,%rdi
    4e8e:	e8 00 00 00 00       	callq  4e93 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    4e93:	e9 1d 01 00 00       	jmpq   4fb5 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4e98:	48 89 c3             	mov    %rax,%rbx
    4e9b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4ea2:	48 89 c7             	mov    %rax,%rdi
    4ea5:	e8 00 00 00 00       	callq  4eaa <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    4eaa:	eb 17                	jmp    4ec3 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    4eac:	48 89 c3             	mov    %rax,%rbx
    4eaf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4eb6:	48 89 c7             	mov    %rax,%rdi
    4eb9:	e8 00 00 00 00       	callq  4ebe <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    4ebe:	eb 03                	jmp    4ec3 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    4ec0:	48 89 c3             	mov    %rax,%rbx
    4ec3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4eca:	48 89 c7             	mov    %rax,%rdi
    4ecd:	e8 00 00 00 00       	callq  4ed2 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    4ed2:	eb 17                	jmp    4eeb <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    4ed4:	48 89 c3             	mov    %rax,%rbx
    4ed7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4ede:	48 89 c7             	mov    %rax,%rdi
    4ee1:	e8 00 00 00 00       	callq  4ee6 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    4ee6:	eb 03                	jmp    4eeb <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    4ee8:	48 89 c3             	mov    %rax,%rbx
    4eeb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4ef2:	48 89 c7             	mov    %rax,%rdi
    4ef5:	e8 00 00 00 00       	callq  4efa <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    4efa:	eb 75                	jmp    4f71 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4efc:	48 89 c3             	mov    %rax,%rbx
    4eff:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4f06:	48 89 c7             	mov    %rax,%rdi
    4f09:	e8 00 00 00 00       	callq  4f0e <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    4f0e:	eb 61                	jmp    4f71 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4f10:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    4f13:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4f1a:	48 89 c7             	mov    %rax,%rdi
    4f1d:	e8 00 00 00 00       	callq  4f22 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    4f22:	eb 03                	jmp    4f27 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    4f24:	48 89 c3             	mov    %rax,%rbx
    4f27:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f2e:	48 89 c7             	mov    %rax,%rdi
    4f31:	e8 00 00 00 00       	callq  4f36 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    4f36:	eb 25                	jmp    4f5d <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    4f38:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    4f3b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4f3f:	48 89 c7             	mov    %rax,%rdi
    4f42:	e8 00 00 00 00       	callq  4f47 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    4f47:	eb 03                	jmp    4f4c <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    4f49:	48 89 c3             	mov    %rax,%rbx
    4f4c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4f50:	48 89 c7             	mov    %rax,%rdi
    4f53:	e8 00 00 00 00       	callq  4f58 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    4f58:	eb 03                	jmp    4f5d <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    4f5a:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    4f5d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4f64:	48 89 c7             	mov    %rax,%rdi
    4f67:	e8 00 00 00 00       	callq  4f6c <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    4f6c:	eb 03                	jmp    4f71 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4f6e:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    4f71:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4f75:	48 89 c7             	mov    %rax,%rdi
    4f78:	e8 00 00 00 00       	callq  4f7d <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    4f7d:	eb 03                	jmp    4f82 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    4f7f:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    4f82:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4f86:	48 89 c7             	mov    %rax,%rdi
    4f89:	e8 00 00 00 00       	callq  4f8e <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    4f8e:	eb 03                	jmp    4f93 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    4f90:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    4f93:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4f97:	48 89 c7             	mov    %rax,%rdi
    4f9a:	e8 00 00 00 00       	callq  4f9f <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    4f9f:	eb 03                	jmp    4fa4 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    4fa1:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    4fa4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4fa8:	48 89 c7             	mov    %rax,%rdi
    4fab:	e8 00 00 00 00       	callq  4fb0 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    4fb0:	eb 03                	jmp    4fb5 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4fb2:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    4fb5:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4fbc:	48 89 c7             	mov    %rax,%rdi
    4fbf:	e8 00 00 00 00       	callq  4fc4 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    4fc4:	eb 03                	jmp    4fc9 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    4fc6:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    4fc9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4fd0:	48 89 c7             	mov    %rax,%rdi
    4fd3:	e8 00 00 00 00       	callq  4fd8 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    4fd8:	eb 03                	jmp    4fdd <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    4fda:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    4fdd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4fe4:	48 89 c7             	mov    %rax,%rdi
    4fe7:	e8 00 00 00 00       	callq  4fec <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    4fec:	eb 03                	jmp    4ff1 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    4fee:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    4ff1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4ff8:	48 89 c7             	mov    %rax,%rdi
    4ffb:	e8 00 00 00 00       	callq  5000 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5000:	48 89 d8             	mov    %rbx,%rax
    5003:	48 89 c7             	mov    %rax,%rdi
    5006:	e8 00 00 00 00       	callq  500b <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    500b:	e8 00 00 00 00       	callq  5010 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5010:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5017:	5b                   	pop    %rbx
    5018:	5d                   	pop    %rbp
    5019:	c3                   	retq   

000000000000501a <_ZN6Parser4initEv>:

void Parser::init(){
    501a:	55                   	push   %rbp
    501b:	48 89 e5             	mov    %rsp,%rbp
    501e:	48 83 ec 10          	sub    $0x10,%rsp
    5022:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    502a:	48 83 c0 30          	add    $0x30,%rax
    502e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5035 <_ZN6Parser4initEv+0x1b>
    5035:	48 89 c7             	mov    %rax,%rdi
    5038:	e8 00 00 00 00       	callq  503d <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    503d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5041:	48 83 c0 38          	add    $0x38,%rax
    5045:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 504c <_ZN6Parser4initEv+0x32>
    504c:	48 89 c7             	mov    %rax,%rdi
    504f:	e8 00 00 00 00       	callq  5054 <_ZN6Parser4initEv+0x3a>
}
    5054:	90                   	nop
    5055:	c9                   	leaveq 
    5056:	c3                   	retq   
    5057:	90                   	nop

0000000000005058 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5058:	55                   	push   %rbp
    5059:	48 89 e5             	mov    %rsp,%rbp
    505c:	53                   	push   %rbx
    505d:	48 83 ec 38          	sub    $0x38,%rsp
    5061:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5065:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    506c:	00 00 
    506e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5072:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5074:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    507b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    507f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5086 <_ZN6Parser8initSemsEv+0x2e>
    5086:	48 89 c7             	mov    %rax,%rdi
    5089:	e8 00 00 00 00       	callq  508e <_ZN6Parser8initSemsEv+0x36>
    508e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5092:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5099:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    509d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50a1:	48 89 c6             	mov    %rax,%rsi
    50a4:	48 89 cf             	mov    %rcx,%rdi
    50a7:	e8 00 00 00 00       	callq  50ac <_ZN6Parser8initSemsEv+0x54>
    50ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50b0:	48 89 c7             	mov    %rax,%rdi
    50b3:	e8 00 00 00 00       	callq  50b8 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    50b8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    50bf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 50ca <_ZN6Parser8initSemsEv+0x72>
    50ca:	48 89 c7             	mov    %rax,%rdi
    50cd:	e8 00 00 00 00       	callq  50d2 <_ZN6Parser8initSemsEv+0x7a>
    50d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    50d6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    50dd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    50e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50e5:	48 89 c6             	mov    %rax,%rsi
    50e8:	48 89 cf             	mov    %rcx,%rdi
    50eb:	e8 00 00 00 00       	callq  50f0 <_ZN6Parser8initSemsEv+0x98>
    50f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50f4:	48 89 c7             	mov    %rax,%rdi
    50f7:	e8 00 00 00 00       	callq  50fc <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    50fc:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5103:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5107:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 510e <_ZN6Parser8initSemsEv+0xb6>
    510e:	48 89 c7             	mov    %rax,%rdi
    5111:	e8 00 00 00 00       	callq  5116 <_ZN6Parser8initSemsEv+0xbe>
    5116:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    511a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5121:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5125:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5129:	48 89 c6             	mov    %rax,%rsi
    512c:	48 89 cf             	mov    %rcx,%rdi
    512f:	e8 00 00 00 00       	callq  5134 <_ZN6Parser8initSemsEv+0xdc>
    5134:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5138:	48 89 c7             	mov    %rax,%rdi
    513b:	e8 00 00 00 00       	callq  5140 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5140:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5147:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    514b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5152 <_ZN6Parser8initSemsEv+0xfa>
    5152:	48 89 c7             	mov    %rax,%rdi
    5155:	e8 00 00 00 00       	callq  515a <_ZN6Parser8initSemsEv+0x102>
    515a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    515e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5165:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5169:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    516d:	48 89 c6             	mov    %rax,%rsi
    5170:	48 89 cf             	mov    %rcx,%rdi
    5173:	e8 00 00 00 00       	callq  5178 <_ZN6Parser8initSemsEv+0x120>
    5178:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    517c:	48 89 c7             	mov    %rax,%rdi
    517f:	e8 00 00 00 00       	callq  5184 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5184:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    518b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    518f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5196 <_ZN6Parser8initSemsEv+0x13e>
    5196:	48 89 c7             	mov    %rax,%rdi
    5199:	e8 00 00 00 00       	callq  519e <_ZN6Parser8initSemsEv+0x146>
    519e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    51a2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    51a9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    51ad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51b1:	48 89 c6             	mov    %rax,%rsi
    51b4:	48 89 cf             	mov    %rcx,%rdi
    51b7:	e8 00 00 00 00       	callq  51bc <_ZN6Parser8initSemsEv+0x164>
    51bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51c0:	48 89 c7             	mov    %rax,%rdi
    51c3:	e8 00 00 00 00       	callq  51c8 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    51c8:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    51cf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 51da <_ZN6Parser8initSemsEv+0x182>
    51da:	48 89 c7             	mov    %rax,%rdi
    51dd:	e8 00 00 00 00       	callq  51e2 <_ZN6Parser8initSemsEv+0x18a>
    51e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    51e6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    51ed:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    51f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51f5:	48 89 c6             	mov    %rax,%rsi
    51f8:	48 89 cf             	mov    %rcx,%rdi
    51fb:	e8 00 00 00 00       	callq  5200 <_ZN6Parser8initSemsEv+0x1a8>
    5200:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5204:	48 89 c7             	mov    %rax,%rdi
    5207:	e8 00 00 00 00       	callq  520c <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    520c:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5213:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5217:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 521e <_ZN6Parser8initSemsEv+0x1c6>
    521e:	48 89 c7             	mov    %rax,%rdi
    5221:	e8 00 00 00 00       	callq  5226 <_ZN6Parser8initSemsEv+0x1ce>
    5226:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    522a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5231:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5235:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5239:	48 89 c6             	mov    %rax,%rsi
    523c:	48 89 cf             	mov    %rcx,%rdi
    523f:	e8 00 00 00 00       	callq  5244 <_ZN6Parser8initSemsEv+0x1ec>
    5244:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5248:	48 89 c7             	mov    %rax,%rdi
    524b:	e8 00 00 00 00       	callq  5250 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5250:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5257:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    525b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5262 <_ZN6Parser8initSemsEv+0x20a>
    5262:	48 89 c7             	mov    %rax,%rdi
    5265:	e8 00 00 00 00       	callq  526a <_ZN6Parser8initSemsEv+0x212>
    526a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    526e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5275:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5279:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    527d:	48 89 c6             	mov    %rax,%rsi
    5280:	48 89 cf             	mov    %rcx,%rdi
    5283:	e8 00 00 00 00       	callq  5288 <_ZN6Parser8initSemsEv+0x230>
    5288:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    528c:	48 89 c7             	mov    %rax,%rdi
    528f:	e8 00 00 00 00       	callq  5294 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5294:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    529b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    529f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 52a6 <_ZN6Parser8initSemsEv+0x24e>
    52a6:	48 89 c7             	mov    %rax,%rdi
    52a9:	e8 00 00 00 00       	callq  52ae <_ZN6Parser8initSemsEv+0x256>
    52ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    52b2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    52b9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    52bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52c1:	48 89 c6             	mov    %rax,%rsi
    52c4:	48 89 cf             	mov    %rcx,%rdi
    52c7:	e8 00 00 00 00       	callq  52cc <_ZN6Parser8initSemsEv+0x274>
    52cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52d0:	48 89 c7             	mov    %rax,%rdi
    52d3:	e8 00 00 00 00       	callq  52d8 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    52d8:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    52df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 52ea <_ZN6Parser8initSemsEv+0x292>
    52ea:	48 89 c7             	mov    %rax,%rdi
    52ed:	e8 00 00 00 00       	callq  52f2 <_ZN6Parser8initSemsEv+0x29a>
    52f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    52f6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    52fd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5301:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5305:	48 89 c6             	mov    %rax,%rsi
    5308:	48 89 cf             	mov    %rcx,%rdi
    530b:	e8 00 00 00 00       	callq  5310 <_ZN6Parser8initSemsEv+0x2b8>
    5310:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5314:	48 89 c7             	mov    %rax,%rdi
    5317:	e8 00 00 00 00       	callq  531c <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    531c:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5323:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5327:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 532e <_ZN6Parser8initSemsEv+0x2d6>
    532e:	48 89 c7             	mov    %rax,%rdi
    5331:	e8 00 00 00 00       	callq  5336 <_ZN6Parser8initSemsEv+0x2de>
    5336:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    533a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5341:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5345:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5349:	48 89 c6             	mov    %rax,%rsi
    534c:	48 89 cf             	mov    %rcx,%rdi
    534f:	e8 00 00 00 00       	callq  5354 <_ZN6Parser8initSemsEv+0x2fc>
    5354:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5358:	48 89 c7             	mov    %rax,%rdi
    535b:	e8 00 00 00 00       	callq  5360 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    5360:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    5367:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    536b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5372 <_ZN6Parser8initSemsEv+0x31a>
    5372:	48 89 c7             	mov    %rax,%rdi
    5375:	e8 00 00 00 00       	callq  537a <_ZN6Parser8initSemsEv+0x322>
    537a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    537e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5385:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5389:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    538d:	48 89 c6             	mov    %rax,%rsi
    5390:	48 89 cf             	mov    %rcx,%rdi
    5393:	e8 00 00 00 00       	callq  5398 <_ZN6Parser8initSemsEv+0x340>
    5398:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    539c:	48 89 c7             	mov    %rax,%rdi
    539f:	e8 00 00 00 00       	callq  53a4 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    53a4:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    53ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 53b6 <_ZN6Parser8initSemsEv+0x35e>
    53b6:	48 89 c7             	mov    %rax,%rdi
    53b9:	e8 00 00 00 00       	callq  53be <_ZN6Parser8initSemsEv+0x366>
    53be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    53c2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    53c9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    53cd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53d1:	48 89 c6             	mov    %rax,%rsi
    53d4:	48 89 cf             	mov    %rcx,%rdi
    53d7:	e8 00 00 00 00       	callq  53dc <_ZN6Parser8initSemsEv+0x384>
    53dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53e0:	48 89 c7             	mov    %rax,%rdi
    53e3:	e8 00 00 00 00       	callq  53e8 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    53e8:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    53ef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 53fa <_ZN6Parser8initSemsEv+0x3a2>
    53fa:	48 89 c7             	mov    %rax,%rdi
    53fd:	e8 00 00 00 00       	callq  5402 <_ZN6Parser8initSemsEv+0x3aa>
    5402:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5406:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    540d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5411:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5415:	48 89 c6             	mov    %rax,%rsi
    5418:	48 89 cf             	mov    %rcx,%rdi
    541b:	e8 00 00 00 00       	callq  5420 <_ZN6Parser8initSemsEv+0x3c8>
    5420:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5424:	48 89 c7             	mov    %rax,%rdi
    5427:	e8 00 00 00 00       	callq  542c <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    542c:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    5433:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5437:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 543e <_ZN6Parser8initSemsEv+0x3e6>
    543e:	48 89 c7             	mov    %rax,%rdi
    5441:	e8 00 00 00 00       	callq  5446 <_ZN6Parser8initSemsEv+0x3ee>
    5446:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    544a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5451:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5455:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5459:	48 89 c6             	mov    %rax,%rsi
    545c:	48 89 cf             	mov    %rcx,%rdi
    545f:	e8 00 00 00 00       	callq  5464 <_ZN6Parser8initSemsEv+0x40c>
    5464:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5468:	48 89 c7             	mov    %rax,%rdi
    546b:	e8 00 00 00 00       	callq  5470 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    5470:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    5477:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    547b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5482 <_ZN6Parser8initSemsEv+0x42a>
    5482:	48 89 c7             	mov    %rax,%rdi
    5485:	e8 00 00 00 00       	callq  548a <_ZN6Parser8initSemsEv+0x432>
    548a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    548e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5495:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5499:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    549d:	48 89 c6             	mov    %rax,%rsi
    54a0:	48 89 cf             	mov    %rcx,%rdi
    54a3:	e8 00 00 00 00       	callq  54a8 <_ZN6Parser8initSemsEv+0x450>
    54a8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    54ac:	48 89 c7             	mov    %rax,%rdi
    54af:	e8 00 00 00 00       	callq  54b4 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    54b4:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    54bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    54bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54c6 <_ZN6Parser8initSemsEv+0x46e>
    54c6:	48 89 c7             	mov    %rax,%rdi
    54c9:	e8 00 00 00 00       	callq  54ce <_ZN6Parser8initSemsEv+0x476>
    54ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    54d2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    54d9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    54dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    54e1:	48 89 c6             	mov    %rax,%rsi
    54e4:	48 89 cf             	mov    %rcx,%rdi
    54e7:	e8 00 00 00 00       	callq  54ec <_ZN6Parser8initSemsEv+0x494>
    54ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    54f0:	48 89 c7             	mov    %rax,%rdi
    54f3:	e8 00 00 00 00       	callq  54f8 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    54f8:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    54ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5503:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 550a <_ZN6Parser8initSemsEv+0x4b2>
    550a:	48 89 c7             	mov    %rax,%rdi
    550d:	e8 00 00 00 00       	callq  5512 <_ZN6Parser8initSemsEv+0x4ba>
    5512:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5516:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    551d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5521:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5525:	48 89 c6             	mov    %rax,%rsi
    5528:	48 89 cf             	mov    %rcx,%rdi
    552b:	e8 00 00 00 00       	callq  5530 <_ZN6Parser8initSemsEv+0x4d8>
    5530:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5534:	48 89 c7             	mov    %rax,%rdi
    5537:	e8 00 00 00 00       	callq  553c <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    553c:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    5543:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5547:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 554e <_ZN6Parser8initSemsEv+0x4f6>
    554e:	48 89 c7             	mov    %rax,%rdi
    5551:	e8 00 00 00 00       	callq  5556 <_ZN6Parser8initSemsEv+0x4fe>
    5556:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    555a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5561:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5565:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5569:	48 89 c6             	mov    %rax,%rsi
    556c:	48 89 cf             	mov    %rcx,%rdi
    556f:	e8 00 00 00 00       	callq  5574 <_ZN6Parser8initSemsEv+0x51c>
    5574:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5578:	48 89 c7             	mov    %rax,%rdi
    557b:	e8 00 00 00 00       	callq  5580 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    5580:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    5587:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    558b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5592 <_ZN6Parser8initSemsEv+0x53a>
    5592:	48 89 c7             	mov    %rax,%rdi
    5595:	e8 00 00 00 00       	callq  559a <_ZN6Parser8initSemsEv+0x542>
    559a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    559e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    55a5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    55a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55ad:	48 89 c6             	mov    %rax,%rsi
    55b0:	48 89 cf             	mov    %rcx,%rdi
    55b3:	e8 00 00 00 00       	callq  55b8 <_ZN6Parser8initSemsEv+0x560>
    55b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55bc:	48 89 c7             	mov    %rax,%rdi
    55bf:	e8 00 00 00 00       	callq  55c4 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    55c4:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    55cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 55d6 <_ZN6Parser8initSemsEv+0x57e>
    55d6:	48 89 c7             	mov    %rax,%rdi
    55d9:	e8 00 00 00 00       	callq  55de <_ZN6Parser8initSemsEv+0x586>
    55de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    55e2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    55e9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    55ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55f1:	48 89 c6             	mov    %rax,%rsi
    55f4:	48 89 cf             	mov    %rcx,%rdi
    55f7:	e8 00 00 00 00       	callq  55fc <_ZN6Parser8initSemsEv+0x5a4>
    55fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5600:	48 89 c7             	mov    %rax,%rdi
    5603:	e8 00 00 00 00       	callq  5608 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    5608:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    560f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5613:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 561a <_ZN6Parser8initSemsEv+0x5c2>
    561a:	48 89 c7             	mov    %rax,%rdi
    561d:	e8 00 00 00 00       	callq  5622 <_ZN6Parser8initSemsEv+0x5ca>
    5622:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5626:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    562d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5631:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5635:	48 89 c6             	mov    %rax,%rsi
    5638:	48 89 cf             	mov    %rcx,%rdi
    563b:	e8 00 00 00 00       	callq  5640 <_ZN6Parser8initSemsEv+0x5e8>
    5640:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5644:	48 89 c7             	mov    %rax,%rdi
    5647:	e8 00 00 00 00       	callq  564c <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    564c:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    5653:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5657:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 565e <_ZN6Parser8initSemsEv+0x606>
    565e:	48 89 c7             	mov    %rax,%rdi
    5661:	e8 00 00 00 00       	callq  5666 <_ZN6Parser8initSemsEv+0x60e>
    5666:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    566a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5671:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5675:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5679:	48 89 c6             	mov    %rax,%rsi
    567c:	48 89 cf             	mov    %rcx,%rdi
    567f:	e8 00 00 00 00       	callq  5684 <_ZN6Parser8initSemsEv+0x62c>
    5684:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5688:	48 89 c7             	mov    %rax,%rdi
    568b:	e8 00 00 00 00       	callq  5690 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    5690:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    5697:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    569b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56a2 <_ZN6Parser8initSemsEv+0x64a>
    56a2:	48 89 c7             	mov    %rax,%rdi
    56a5:	e8 00 00 00 00       	callq  56aa <_ZN6Parser8initSemsEv+0x652>
    56aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    56ae:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    56b5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    56b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    56bd:	48 89 c6             	mov    %rax,%rsi
    56c0:	48 89 cf             	mov    %rcx,%rdi
    56c3:	e8 00 00 00 00       	callq  56c8 <_ZN6Parser8initSemsEv+0x670>
    56c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    56cc:	48 89 c7             	mov    %rax,%rdi
    56cf:	e8 00 00 00 00       	callq  56d4 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    56d4:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    56db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    56df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56e6 <_ZN6Parser8initSemsEv+0x68e>
    56e6:	48 89 c7             	mov    %rax,%rdi
    56e9:	e8 00 00 00 00       	callq  56ee <_ZN6Parser8initSemsEv+0x696>
    56ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    56f2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    56f9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    56fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5701:	48 89 c6             	mov    %rax,%rsi
    5704:	48 89 cf             	mov    %rcx,%rdi
    5707:	e8 00 00 00 00       	callq  570c <_ZN6Parser8initSemsEv+0x6b4>
    570c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5710:	48 89 c7             	mov    %rax,%rdi
    5713:	e8 00 00 00 00       	callq  5718 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    5718:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    571f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5723:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 572a <_ZN6Parser8initSemsEv+0x6d2>
    572a:	48 89 c7             	mov    %rax,%rdi
    572d:	e8 00 00 00 00       	callq  5732 <_ZN6Parser8initSemsEv+0x6da>
    5732:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5736:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    573d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5741:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5745:	48 89 c6             	mov    %rax,%rsi
    5748:	48 89 cf             	mov    %rcx,%rdi
    574b:	e8 00 00 00 00       	callq  5750 <_ZN6Parser8initSemsEv+0x6f8>
    5750:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5754:	48 89 c7             	mov    %rax,%rdi
    5757:	e8 00 00 00 00       	callq  575c <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    575c:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    5763:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5767:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 576e <_ZN6Parser8initSemsEv+0x716>
    576e:	48 89 c7             	mov    %rax,%rdi
    5771:	e8 00 00 00 00       	callq  5776 <_ZN6Parser8initSemsEv+0x71e>
    5776:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    577a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5781:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5785:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5789:	48 89 c6             	mov    %rax,%rsi
    578c:	48 89 cf             	mov    %rcx,%rdi
    578f:	e8 00 00 00 00       	callq  5794 <_ZN6Parser8initSemsEv+0x73c>
    5794:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5798:	48 89 c7             	mov    %rax,%rdi
    579b:	e8 00 00 00 00       	callq  57a0 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    57a0:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    57a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57ab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 57b2 <_ZN6Parser8initSemsEv+0x75a>
    57b2:	48 89 c7             	mov    %rax,%rdi
    57b5:	e8 00 00 00 00       	callq  57ba <_ZN6Parser8initSemsEv+0x762>
    57ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57be:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    57c5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    57c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57cd:	48 89 c6             	mov    %rax,%rsi
    57d0:	48 89 cf             	mov    %rcx,%rdi
    57d3:	e8 00 00 00 00       	callq  57d8 <_ZN6Parser8initSemsEv+0x780>
    57d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57dc:	48 89 c7             	mov    %rax,%rdi
    57df:	e8 00 00 00 00       	callq  57e4 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    57e4:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    57eb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 57f6 <_ZN6Parser8initSemsEv+0x79e>
    57f6:	48 89 c7             	mov    %rax,%rdi
    57f9:	e8 00 00 00 00       	callq  57fe <_ZN6Parser8initSemsEv+0x7a6>
    57fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5802:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5809:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    580d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5811:	48 89 c6             	mov    %rax,%rsi
    5814:	48 89 cf             	mov    %rcx,%rdi
    5817:	e8 00 00 00 00       	callq  581c <_ZN6Parser8initSemsEv+0x7c4>
    581c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5820:	48 89 c7             	mov    %rax,%rdi
    5823:	e8 00 00 00 00       	callq  5828 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    5828:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    582f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5833:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 583a <_ZN6Parser8initSemsEv+0x7e2>
    583a:	48 89 c7             	mov    %rax,%rdi
    583d:	e8 00 00 00 00       	callq  5842 <_ZN6Parser8initSemsEv+0x7ea>
    5842:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5846:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    584d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5851:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5855:	48 89 c6             	mov    %rax,%rsi
    5858:	48 89 cf             	mov    %rcx,%rdi
    585b:	e8 00 00 00 00       	callq  5860 <_ZN6Parser8initSemsEv+0x808>
    5860:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5864:	48 89 c7             	mov    %rax,%rdi
    5867:	e8 00 00 00 00       	callq  586c <_ZN6Parser8initSemsEv+0x814>

}
    586c:	90                   	nop
    586d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5871:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5878:	00 00 
    587a:	0f 84 16 03 00 00    	je     5b96 <_ZN6Parser8initSemsEv+0xb3e>
    5880:	e9 0c 03 00 00       	jmpq   5b91 <_ZN6Parser8initSemsEv+0xb39>
    5885:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    5888:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    588c:	48 89 c7             	mov    %rax,%rdi
    588f:	e8 00 00 00 00       	callq  5894 <_ZN6Parser8initSemsEv+0x83c>
    5894:	48 89 d8             	mov    %rbx,%rax
    5897:	48 89 c7             	mov    %rax,%rdi
    589a:	e8 00 00 00 00       	callq  589f <_ZN6Parser8initSemsEv+0x847>
    589f:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    58a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58a6:	48 89 c7             	mov    %rax,%rdi
    58a9:	e8 00 00 00 00       	callq  58ae <_ZN6Parser8initSemsEv+0x856>
    58ae:	48 89 d8             	mov    %rbx,%rax
    58b1:	48 89 c7             	mov    %rax,%rdi
    58b4:	e8 00 00 00 00       	callq  58b9 <_ZN6Parser8initSemsEv+0x861>
    58b9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    58bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58c0:	48 89 c7             	mov    %rax,%rdi
    58c3:	e8 00 00 00 00       	callq  58c8 <_ZN6Parser8initSemsEv+0x870>
    58c8:	48 89 d8             	mov    %rbx,%rax
    58cb:	48 89 c7             	mov    %rax,%rdi
    58ce:	e8 00 00 00 00       	callq  58d3 <_ZN6Parser8initSemsEv+0x87b>
    58d3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    58d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58da:	48 89 c7             	mov    %rax,%rdi
    58dd:	e8 00 00 00 00       	callq  58e2 <_ZN6Parser8initSemsEv+0x88a>
    58e2:	48 89 d8             	mov    %rbx,%rax
    58e5:	48 89 c7             	mov    %rax,%rdi
    58e8:	e8 00 00 00 00       	callq  58ed <_ZN6Parser8initSemsEv+0x895>
    58ed:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    58f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58f4:	48 89 c7             	mov    %rax,%rdi
    58f7:	e8 00 00 00 00       	callq  58fc <_ZN6Parser8initSemsEv+0x8a4>
    58fc:	48 89 d8             	mov    %rbx,%rax
    58ff:	48 89 c7             	mov    %rax,%rdi
    5902:	e8 00 00 00 00       	callq  5907 <_ZN6Parser8initSemsEv+0x8af>
    5907:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    590a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    590e:	48 89 c7             	mov    %rax,%rdi
    5911:	e8 00 00 00 00       	callq  5916 <_ZN6Parser8initSemsEv+0x8be>
    5916:	48 89 d8             	mov    %rbx,%rax
    5919:	48 89 c7             	mov    %rax,%rdi
    591c:	e8 00 00 00 00       	callq  5921 <_ZN6Parser8initSemsEv+0x8c9>
    5921:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    5924:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5928:	48 89 c7             	mov    %rax,%rdi
    592b:	e8 00 00 00 00       	callq  5930 <_ZN6Parser8initSemsEv+0x8d8>
    5930:	48 89 d8             	mov    %rbx,%rax
    5933:	48 89 c7             	mov    %rax,%rdi
    5936:	e8 00 00 00 00       	callq  593b <_ZN6Parser8initSemsEv+0x8e3>
    593b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    593e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5942:	48 89 c7             	mov    %rax,%rdi
    5945:	e8 00 00 00 00       	callq  594a <_ZN6Parser8initSemsEv+0x8f2>
    594a:	48 89 d8             	mov    %rbx,%rax
    594d:	48 89 c7             	mov    %rax,%rdi
    5950:	e8 00 00 00 00       	callq  5955 <_ZN6Parser8initSemsEv+0x8fd>
    5955:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    5958:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    595c:	48 89 c7             	mov    %rax,%rdi
    595f:	e8 00 00 00 00       	callq  5964 <_ZN6Parser8initSemsEv+0x90c>
    5964:	48 89 d8             	mov    %rbx,%rax
    5967:	48 89 c7             	mov    %rax,%rdi
    596a:	e8 00 00 00 00       	callq  596f <_ZN6Parser8initSemsEv+0x917>
    596f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    5972:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5976:	48 89 c7             	mov    %rax,%rdi
    5979:	e8 00 00 00 00       	callq  597e <_ZN6Parser8initSemsEv+0x926>
    597e:	48 89 d8             	mov    %rbx,%rax
    5981:	48 89 c7             	mov    %rax,%rdi
    5984:	e8 00 00 00 00       	callq  5989 <_ZN6Parser8initSemsEv+0x931>
    5989:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    598c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5990:	48 89 c7             	mov    %rax,%rdi
    5993:	e8 00 00 00 00       	callq  5998 <_ZN6Parser8initSemsEv+0x940>
    5998:	48 89 d8             	mov    %rbx,%rax
    599b:	48 89 c7             	mov    %rax,%rdi
    599e:	e8 00 00 00 00       	callq  59a3 <_ZN6Parser8initSemsEv+0x94b>
    59a3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    59a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    59aa:	48 89 c7             	mov    %rax,%rdi
    59ad:	e8 00 00 00 00       	callq  59b2 <_ZN6Parser8initSemsEv+0x95a>
    59b2:	48 89 d8             	mov    %rbx,%rax
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 00 00 00 00       	callq  59bd <_ZN6Parser8initSemsEv+0x965>
    59bd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    59c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    59c4:	48 89 c7             	mov    %rax,%rdi
    59c7:	e8 00 00 00 00       	callq  59cc <_ZN6Parser8initSemsEv+0x974>
    59cc:	48 89 d8             	mov    %rbx,%rax
    59cf:	48 89 c7             	mov    %rax,%rdi
    59d2:	e8 00 00 00 00       	callq  59d7 <_ZN6Parser8initSemsEv+0x97f>
    59d7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    59da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    59de:	48 89 c7             	mov    %rax,%rdi
    59e1:	e8 00 00 00 00       	callq  59e6 <_ZN6Parser8initSemsEv+0x98e>
    59e6:	48 89 d8             	mov    %rbx,%rax
    59e9:	48 89 c7             	mov    %rax,%rdi
    59ec:	e8 00 00 00 00       	callq  59f1 <_ZN6Parser8initSemsEv+0x999>
    59f1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    59f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    59f8:	48 89 c7             	mov    %rax,%rdi
    59fb:	e8 00 00 00 00       	callq  5a00 <_ZN6Parser8initSemsEv+0x9a8>
    5a00:	48 89 d8             	mov    %rbx,%rax
    5a03:	48 89 c7             	mov    %rax,%rdi
    5a06:	e8 00 00 00 00       	callq  5a0b <_ZN6Parser8initSemsEv+0x9b3>
    5a0b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    5a0e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a12:	48 89 c7             	mov    %rax,%rdi
    5a15:	e8 00 00 00 00       	callq  5a1a <_ZN6Parser8initSemsEv+0x9c2>
    5a1a:	48 89 d8             	mov    %rbx,%rax
    5a1d:	48 89 c7             	mov    %rax,%rdi
    5a20:	e8 00 00 00 00       	callq  5a25 <_ZN6Parser8initSemsEv+0x9cd>
    5a25:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    5a28:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a2c:	48 89 c7             	mov    %rax,%rdi
    5a2f:	e8 00 00 00 00       	callq  5a34 <_ZN6Parser8initSemsEv+0x9dc>
    5a34:	48 89 d8             	mov    %rbx,%rax
    5a37:	48 89 c7             	mov    %rax,%rdi
    5a3a:	e8 00 00 00 00       	callq  5a3f <_ZN6Parser8initSemsEv+0x9e7>
    5a3f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    5a42:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a46:	48 89 c7             	mov    %rax,%rdi
    5a49:	e8 00 00 00 00       	callq  5a4e <_ZN6Parser8initSemsEv+0x9f6>
    5a4e:	48 89 d8             	mov    %rbx,%rax
    5a51:	48 89 c7             	mov    %rax,%rdi
    5a54:	e8 00 00 00 00       	callq  5a59 <_ZN6Parser8initSemsEv+0xa01>
    5a59:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    5a5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a60:	48 89 c7             	mov    %rax,%rdi
    5a63:	e8 00 00 00 00       	callq  5a68 <_ZN6Parser8initSemsEv+0xa10>
    5a68:	48 89 d8             	mov    %rbx,%rax
    5a6b:	48 89 c7             	mov    %rax,%rdi
    5a6e:	e8 00 00 00 00       	callq  5a73 <_ZN6Parser8initSemsEv+0xa1b>
    5a73:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    5a76:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a7a:	48 89 c7             	mov    %rax,%rdi
    5a7d:	e8 00 00 00 00       	callq  5a82 <_ZN6Parser8initSemsEv+0xa2a>
    5a82:	48 89 d8             	mov    %rbx,%rax
    5a85:	48 89 c7             	mov    %rax,%rdi
    5a88:	e8 00 00 00 00       	callq  5a8d <_ZN6Parser8initSemsEv+0xa35>
    5a8d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    5a90:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5a94:	48 89 c7             	mov    %rax,%rdi
    5a97:	e8 00 00 00 00       	callq  5a9c <_ZN6Parser8initSemsEv+0xa44>
    5a9c:	48 89 d8             	mov    %rbx,%rax
    5a9f:	48 89 c7             	mov    %rax,%rdi
    5aa2:	e8 00 00 00 00       	callq  5aa7 <_ZN6Parser8initSemsEv+0xa4f>
    5aa7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    5aaa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5aae:	48 89 c7             	mov    %rax,%rdi
    5ab1:	e8 00 00 00 00       	callq  5ab6 <_ZN6Parser8initSemsEv+0xa5e>
    5ab6:	48 89 d8             	mov    %rbx,%rax
    5ab9:	48 89 c7             	mov    %rax,%rdi
    5abc:	e8 00 00 00 00       	callq  5ac1 <_ZN6Parser8initSemsEv+0xa69>
    5ac1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    5ac4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ac8:	48 89 c7             	mov    %rax,%rdi
    5acb:	e8 00 00 00 00       	callq  5ad0 <_ZN6Parser8initSemsEv+0xa78>
    5ad0:	48 89 d8             	mov    %rbx,%rax
    5ad3:	48 89 c7             	mov    %rax,%rdi
    5ad6:	e8 00 00 00 00       	callq  5adb <_ZN6Parser8initSemsEv+0xa83>
    5adb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    5ade:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ae2:	48 89 c7             	mov    %rax,%rdi
    5ae5:	e8 00 00 00 00       	callq  5aea <_ZN6Parser8initSemsEv+0xa92>
    5aea:	48 89 d8             	mov    %rbx,%rax
    5aed:	48 89 c7             	mov    %rax,%rdi
    5af0:	e8 00 00 00 00       	callq  5af5 <_ZN6Parser8initSemsEv+0xa9d>
    5af5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    5af8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5afc:	48 89 c7             	mov    %rax,%rdi
    5aff:	e8 00 00 00 00       	callq  5b04 <_ZN6Parser8initSemsEv+0xaac>
    5b04:	48 89 d8             	mov    %rbx,%rax
    5b07:	48 89 c7             	mov    %rax,%rdi
    5b0a:	e8 00 00 00 00       	callq  5b0f <_ZN6Parser8initSemsEv+0xab7>
    5b0f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    5b12:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b16:	48 89 c7             	mov    %rax,%rdi
    5b19:	e8 00 00 00 00       	callq  5b1e <_ZN6Parser8initSemsEv+0xac6>
    5b1e:	48 89 d8             	mov    %rbx,%rax
    5b21:	48 89 c7             	mov    %rax,%rdi
    5b24:	e8 00 00 00 00       	callq  5b29 <_ZN6Parser8initSemsEv+0xad1>
    5b29:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    5b2c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b30:	48 89 c7             	mov    %rax,%rdi
    5b33:	e8 00 00 00 00       	callq  5b38 <_ZN6Parser8initSemsEv+0xae0>
    5b38:	48 89 d8             	mov    %rbx,%rax
    5b3b:	48 89 c7             	mov    %rax,%rdi
    5b3e:	e8 00 00 00 00       	callq  5b43 <_ZN6Parser8initSemsEv+0xaeb>
    5b43:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    5b46:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b4a:	48 89 c7             	mov    %rax,%rdi
    5b4d:	e8 00 00 00 00       	callq  5b52 <_ZN6Parser8initSemsEv+0xafa>
    5b52:	48 89 d8             	mov    %rbx,%rax
    5b55:	48 89 c7             	mov    %rax,%rdi
    5b58:	e8 00 00 00 00       	callq  5b5d <_ZN6Parser8initSemsEv+0xb05>
    5b5d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    5b60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b64:	48 89 c7             	mov    %rax,%rdi
    5b67:	e8 00 00 00 00       	callq  5b6c <_ZN6Parser8initSemsEv+0xb14>
    5b6c:	48 89 d8             	mov    %rbx,%rax
    5b6f:	48 89 c7             	mov    %rax,%rdi
    5b72:	e8 00 00 00 00       	callq  5b77 <_ZN6Parser8initSemsEv+0xb1f>
    5b77:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    5b7a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5b7e:	48 89 c7             	mov    %rax,%rdi
    5b81:	e8 00 00 00 00       	callq  5b86 <_ZN6Parser8initSemsEv+0xb2e>
    5b86:	48 89 d8             	mov    %rbx,%rax
    5b89:	48 89 c7             	mov    %rax,%rdi
    5b8c:	e8 00 00 00 00       	callq  5b91 <_ZN6Parser8initSemsEv+0xb39>

}
    5b91:	e8 00 00 00 00       	callq  5b96 <_ZN6Parser8initSemsEv+0xb3e>
    5b96:	48 83 c4 38          	add    $0x38,%rsp
    5b9a:	5b                   	pop    %rbx
    5b9b:	5d                   	pop    %rbp
    5b9c:	c3                   	retq   
    5b9d:	90                   	nop

0000000000005b9e <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    5b9e:	55                   	push   %rbp
    5b9f:	48 89 e5             	mov    %rsp,%rbp
    5ba2:	53                   	push   %rbx
    5ba3:	48 83 ec 48          	sub    $0x48,%rsp
    5ba7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    5bab:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5bb2:	00 00 
    5bb4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5bb8:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    5bba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5bbe:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5bc5 <_ZN6Parser10testCase01Ev+0x27>
    5bc5:	48 89 c7             	mov    %rax,%rdi
    5bc8:	e8 00 00 00 00       	callq  5bcd <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    5bcd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5bd1:	48 89 c7             	mov    %rax,%rdi
    5bd4:	e8 00 00 00 00       	callq  5bd9 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    5bd9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5bdd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5be1:	48 89 d6             	mov    %rdx,%rsi
    5be4:	48 89 c7             	mov    %rax,%rdi
    5be7:	e8 00 00 00 00       	callq  5bec <_ZN6Parser10testCase01Ev+0x4e>
    5bec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    5bf0:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    5bf4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5bf8:	48 89 ce             	mov    %rcx,%rsi
    5bfb:	48 89 c7             	mov    %rax,%rdi
    5bfe:	e8 00 00 00 00       	callq  5c03 <_ZN6Parser10testCase01Ev+0x65>
    5c03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c07:	48 89 c7             	mov    %rax,%rdi
    5c0a:	e8 00 00 00 00       	callq  5c0f <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    5c0f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c13:	48 89 c7             	mov    %rax,%rdi
    5c16:	e8 00 00 00 00       	callq  5c1b <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    5c1b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c1f:	48 89 c7             	mov    %rax,%rdi
    5c22:	e8 00 00 00 00       	callq  5c27 <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    5c27:	90                   	nop
    5c28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c2c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5c33:	00 00 
    5c35:	74 43                	je     5c7a <_ZN6Parser10testCase01Ev+0xdc>
    5c37:	eb 3c                	jmp    5c75 <_ZN6Parser10testCase01Ev+0xd7>
    5c39:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    5c3c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5c40:	48 89 c7             	mov    %rax,%rdi
    5c43:	e8 00 00 00 00       	callq  5c48 <_ZN6Parser10testCase01Ev+0xaa>
    5c48:	eb 03                	jmp    5c4d <_ZN6Parser10testCase01Ev+0xaf>
    5c4a:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    5c4d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c51:	48 89 c7             	mov    %rax,%rdi
    5c54:	e8 00 00 00 00       	callq  5c59 <_ZN6Parser10testCase01Ev+0xbb>
    5c59:	eb 03                	jmp    5c5e <_ZN6Parser10testCase01Ev+0xc0>
    5c5b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    5c5e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c62:	48 89 c7             	mov    %rax,%rdi
    5c65:	e8 00 00 00 00       	callq  5c6a <_ZN6Parser10testCase01Ev+0xcc>
    5c6a:	48 89 d8             	mov    %rbx,%rax
    5c6d:	48 89 c7             	mov    %rax,%rdi
    5c70:	e8 00 00 00 00       	callq  5c75 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    5c75:	e8 00 00 00 00       	callq  5c7a <_ZN6Parser10testCase01Ev+0xdc>
    5c7a:	48 83 c4 48          	add    $0x48,%rsp
    5c7e:	5b                   	pop    %rbx
    5c7f:	5d                   	pop    %rbp
    5c80:	c3                   	retq   
    5c81:	90                   	nop

0000000000005c82 <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    5c82:	55                   	push   %rbp
    5c83:	48 89 e5             	mov    %rsp,%rbp
    5c86:	53                   	push   %rbx
    5c87:	48 83 ec 48          	sub    $0x48,%rsp
    5c8b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    5c8f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5c96:	00 00 
    5c98:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5c9c:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    5c9e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ca2:	48 83 c0 50          	add    $0x50,%rax
    5ca6:	48 89 c7             	mov    %rax,%rdi
    5ca9:	e8 00 00 00 00       	callq  5cae <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    5cae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5cb2:	48 05 90 00 00 00    	add    $0x90,%rax
    5cb8:	48 89 c7             	mov    %rax,%rdi
    5cbb:	e8 00 00 00 00       	callq  5cc0 <_ZN6Parser8HWStoHexEv+0x3e>
    5cc0:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    5cc3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    5cca:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    5cd1:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5cd4:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    5cd7:	0f 8d 2f 01 00 00    	jge    5e0c <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    5cdd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ce1:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    5ce8:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5ceb:	89 c6                	mov    %eax,%esi
    5ced:	48 89 d7             	mov    %rdx,%rdi
    5cf0:	e8 00 00 00 00       	callq  5cf5 <_ZN6Parser8HWStoHexEv+0x73>
    5cf5:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    5cf8:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    5cfc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5d00:	ba 10 00 00 00       	mov    $0x10,%edx
    5d05:	89 ce                	mov    %ecx,%esi
    5d07:	48 89 c7             	mov    %rax,%rdi
    5d0a:	e8 00 00 00 00       	callq  5d0f <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    5d0f:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5d12:	83 e0 03             	and    $0x3,%eax
    5d15:	85 c0                	test   %eax,%eax
    5d17:	75 17                	jne    5d30 <_ZN6Parser8HWStoHexEv+0xae>
    5d19:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5d1d:	48 83 c0 50          	add    $0x50,%rax
    5d21:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d28 <_ZN6Parser8HWStoHexEv+0xa6>
    5d28:	48 89 c7             	mov    %rax,%rdi
    5d2b:	e8 00 00 00 00       	callq  5d30 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    5d30:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5d33:	83 e0 07             	and    $0x7,%eax
    5d36:	85 c0                	test   %eax,%eax
    5d38:	75 17                	jne    5d51 <_ZN6Parser8HWStoHexEv+0xcf>
    5d3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5d3e:	48 83 c0 50          	add    $0x50,%rax
    5d42:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d49 <_ZN6Parser8HWStoHexEv+0xc7>
    5d49:	48 89 c7             	mov    %rax,%rdi
    5d4c:	e8 00 00 00 00       	callq  5d51 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    5d51:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5d54:	83 e0 0f             	and    $0xf,%eax
    5d57:	85 c0                	test   %eax,%eax
    5d59:	75 17                	jne    5d72 <_ZN6Parser8HWStoHexEv+0xf0>
    5d5b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5d5f:	48 83 c0 50          	add    $0x50,%rax
    5d63:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d6a <_ZN6Parser8HWStoHexEv+0xe8>
    5d6a:	48 89 c7             	mov    %rax,%rdi
    5d6d:	e8 00 00 00 00       	callq  5d72 <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    5d72:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    5d76:	77 17                	ja     5d8f <_ZN6Parser8HWStoHexEv+0x10d>
    5d78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5d7c:	48 83 c0 50          	add    $0x50,%rax
    5d80:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d87 <_ZN6Parser8HWStoHexEv+0x105>
    5d87:	48 89 c7             	mov    %rax,%rdi
    5d8a:	e8 00 00 00 00       	callq  5d8f <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    5d8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d93:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    5d97:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5d9e <_ZN6Parser8HWStoHexEv+0x11c>
    5d9e:	48 89 ce             	mov    %rcx,%rsi
    5da1:	48 89 c7             	mov    %rax,%rdi
    5da4:	e8 00 00 00 00       	callq  5da9 <_ZN6Parser8HWStoHexEv+0x127>
    5da9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5dad:	48 8d 50 50          	lea    0x50(%rax),%rdx
    5db1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5db5:	48 89 c6             	mov    %rax,%rsi
    5db8:	48 89 d7             	mov    %rdx,%rdi
    5dbb:	e8 00 00 00 00       	callq  5dc0 <_ZN6Parser8HWStoHexEv+0x13e>
    5dc0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dc4:	48 89 c7             	mov    %rax,%rdi
    5dc7:	e8 00 00 00 00       	callq  5dcc <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    5dcc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5dd0:	48 89 c7             	mov    %rax,%rdi
    5dd3:	e8 00 00 00 00       	callq  5dd8 <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    5dd8:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    5ddc:	e9 f0 fe ff ff       	jmpq   5cd1 <_ZN6Parser8HWStoHexEv+0x4f>
    5de1:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    5de4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5de8:	48 89 c7             	mov    %rax,%rdi
    5deb:	e8 00 00 00 00       	callq  5df0 <_ZN6Parser8HWStoHexEv+0x16e>
    5df0:	eb 03                	jmp    5df5 <_ZN6Parser8HWStoHexEv+0x173>
    5df2:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    5df5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5df9:	48 89 c7             	mov    %rax,%rdi
    5dfc:	e8 00 00 00 00       	callq  5e01 <_ZN6Parser8HWStoHexEv+0x17f>
    5e01:	48 89 d8             	mov    %rbx,%rax
    5e04:	48 89 c7             	mov    %rax,%rdi
    5e07:	e8 00 00 00 00       	callq  5e0c <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    5e0c:	90                   	nop
    5e0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5e11:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5e18:	00 00 
    5e1a:	74 05                	je     5e21 <_ZN6Parser8HWStoHexEv+0x19f>
    5e1c:	e8 00 00 00 00       	callq  5e21 <_ZN6Parser8HWStoHexEv+0x19f>
    5e21:	48 83 c4 48          	add    $0x48,%rsp
    5e25:	5b                   	pop    %rbx
    5e26:	5d                   	pop    %rbp
    5e27:	c3                   	retq   

0000000000005e28 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    5e28:	55                   	push   %rbp
    5e29:	48 89 e5             	mov    %rsp,%rbp
    5e2c:	53                   	push   %rbx
    5e2d:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    5e34:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    5e3b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5e42:	00 00 
    5e44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5e48:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    5e4a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5e51:	48 89 c7             	mov    %rax,%rdi
    5e54:	e8 00 00 00 00       	callq  5e59 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    5e59:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5e60:	48 89 c7             	mov    %rax,%rdi
    5e63:	e8 00 00 00 00       	callq  5e68 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    5e68:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5e6f:	48 89 c7             	mov    %rax,%rdi
    5e72:	e8 00 00 00 00       	callq  5e77 <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    5e77:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    5e7e:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    5e85:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    5e8c:	00 00 

    QStringList hwsModules;
    5e8e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5e95:	48 89 c7             	mov    %rax,%rdi
    5e98:	e8 00 00 00 00       	callq  5e9d <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    5e9d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5ea4:	48 05 88 00 00 00    	add    $0x88,%rax
    5eaa:	48 89 c7             	mov    %rax,%rdi
    5ead:	e8 00 00 00 00       	callq  5eb2 <_ZN6Parser10compileHWSEv+0x8a>
    5eb2:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    5eb9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5ec0:	48 05 88 00 00 00    	add    $0x88,%rax
    5ec6:	48 89 c7             	mov    %rax,%rdi
    5ec9:	e8 00 00 00 00       	callq  5ece <_ZN6Parser10compileHWSEv+0xa6>
    5ece:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    5ed5:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5edc:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5ee3:	48 89 d6             	mov    %rdx,%rsi
    5ee6:	48 89 c7             	mov    %rax,%rdi
    5ee9:	e8 00 00 00 00       	callq  5eee <_ZN6Parser10compileHWSEv+0xc6>
    5eee:	84 c0                	test   %al,%al
    5ef0:	0f 84 e6 07 00 00    	je     66dc <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    5ef6:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    5efd:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5f04:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5f0b:	89 c6                	mov    %eax,%esi
    5f0d:	48 89 d7             	mov    %rdx,%rdi
    5f10:	e8 00 00 00 00       	callq  5f15 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    5f15:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    5f1c:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5f23:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5f2a:	89 c6                	mov    %eax,%esi
    5f2c:	48 89 d7             	mov    %rdx,%rdi
    5f2f:	e8 00 00 00 00       	callq  5f34 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    5f34:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5f3b:	48 89 c7             	mov    %rax,%rdi
    5f3e:	e8 00 00 00 00       	callq  5f43 <_ZN6Parser10compileHWSEv+0x11b>
    5f43:	48 89 c2             	mov    %rax,%rdx
    5f46:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5f4d:	48 89 d6             	mov    %rdx,%rsi
    5f50:	48 89 c7             	mov    %rax,%rdi
    5f53:	e8 00 00 00 00       	callq  5f58 <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    5f58:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5f5f:	48 89 c7             	mov    %rax,%rdi
    5f62:	e8 00 00 00 00       	callq  5f67 <_ZN6Parser10compileHWSEv+0x13f>
    5f67:	48 89 c2             	mov    %rax,%rdx
    5f6a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5f71:	48 89 d6             	mov    %rdx,%rsi
    5f74:	48 89 c7             	mov    %rax,%rdi
    5f77:	e8 00 00 00 00       	callq  5f7c <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    5f7c:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    5f83:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    5f85:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    5f8c:	48 8d 48 28          	lea    0x28(%rax),%rcx
    5f90:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5f97:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5f9e:	48 89 ce             	mov    %rcx,%rsi
    5fa1:	48 89 c7             	mov    %rax,%rdi
    5fa4:	e8 00 00 00 00       	callq  5fa9 <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    5fa9:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    5fb0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5fb7:	ba 10 00 00 00       	mov    $0x10,%edx
    5fbc:	48 89 ce             	mov    %rcx,%rsi
    5fbf:	48 89 c7             	mov    %rax,%rdi
    5fc2:	e8 00 00 00 00       	callq  5fc7 <_ZN6Parser10compileHWSEv+0x19f>
    5fc7:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    5fce:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    5fd5:	0f be c0             	movsbl %al,%eax
    5fd8:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    5fdf:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5fe6:	89 c6                	mov    %eax,%esi
    5fe8:	48 89 d7             	mov    %rdx,%rdi
    5feb:	e8 00 00 00 00       	callq  5ff0 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    5ff0:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    5ff7:	66 c1 e8 08          	shr    $0x8,%ax
    5ffb:	0f be c0             	movsbl %al,%eax
    5ffe:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6005:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    600c:	89 c6                	mov    %eax,%esi
    600e:	48 89 d7             	mov    %rdx,%rdi
    6011:	e8 00 00 00 00       	callq  6016 <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6016:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    601d:	48 05 90 00 00 00    	add    $0x90,%rax
    6023:	48 89 c7             	mov    %rax,%rdi
    6026:	e8 00 00 00 00       	callq  602b <_ZN6Parser10compileHWSEv+0x203>
    602b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6031:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6038:	48 05 90 00 00 00    	add    $0x90,%rax
    603e:	48 89 c7             	mov    %rax,%rdi
    6041:	e8 00 00 00 00       	callq  6046 <_ZN6Parser10compileHWSEv+0x21e>
    6046:	83 c0 02             	add    $0x2,%eax
    6049:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    604f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6056:	48 05 90 00 00 00    	add    $0x90,%rax
    605c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6063 <_ZN6Parser10compileHWSEv+0x23b>
    6063:	48 89 c7             	mov    %rax,%rdi
    6066:	e8 00 00 00 00       	callq  606b <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    606b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6072:	48 89 c7             	mov    %rax,%rdi
    6075:	e8 00 00 00 00       	callq  607a <_ZN6Parser10compileHWSEv+0x252>
    607a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6080:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6084:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 608b <_ZN6Parser10compileHWSEv+0x263>
    608b:	48 89 c7             	mov    %rax,%rdi
    608e:	e8 00 00 00 00       	callq  6093 <_ZN6Parser10compileHWSEv+0x26b>
    6093:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6097:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    609e:	b9 00 00 00 00       	mov    $0x0,%ecx
    60a3:	ba 01 00 00 00       	mov    $0x1,%edx
    60a8:	48 89 c7             	mov    %rax,%rdi
    60ab:	e8 00 00 00 00       	callq  60b0 <_ZN6Parser10compileHWSEv+0x288>
    60b0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    60b4:	48 89 c7             	mov    %rax,%rdi
    60b7:	e8 00 00 00 00       	callq  60bc <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    60bc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    60c0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60c7 <_ZN6Parser10compileHWSEv+0x29f>
    60c7:	48 89 c7             	mov    %rax,%rdi
    60ca:	e8 00 00 00 00       	callq  60cf <_ZN6Parser10compileHWSEv+0x2a7>
    60cf:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    60d3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    60da:	b9 00 00 00 00       	mov    $0x0,%ecx
    60df:	ba 01 00 00 00       	mov    $0x1,%edx
    60e4:	48 89 c7             	mov    %rax,%rdi
    60e7:	e8 00 00 00 00       	callq  60ec <_ZN6Parser10compileHWSEv+0x2c4>
    60ec:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    60f0:	48 89 c7             	mov    %rax,%rdi
    60f3:	e8 00 00 00 00       	callq  60f8 <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    60f8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    60ff:	48 89 c7             	mov    %rax,%rdi
    6102:	e8 00 00 00 00       	callq  6107 <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6107:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    610e:	00 00 00 
    6111:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6117:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    611d:	0f 8d 65 04 00 00    	jge    6588 <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6123:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6129:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6130:	89 d6                	mov    %edx,%esi
    6132:	48 89 c7             	mov    %rax,%rdi
    6135:	e8 00 00 00 00       	callq  613a <_ZN6Parser10compileHWSEv+0x312>
    613a:	48 89 c2             	mov    %rax,%rdx
    613d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6144:	48 89 d6             	mov    %rdx,%rsi
    6147:	48 89 c7             	mov    %rax,%rdi
    614a:	e8 00 00 00 00       	callq  614f <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    614f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6156:	48 8d 50 68          	lea    0x68(%rax),%rdx
    615a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6161:	48 89 c6             	mov    %rax,%rsi
    6164:	48 89 d7             	mov    %rdx,%rdi
    6167:	e8 00 00 00 00       	callq  616c <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    616c:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6173:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    617a:	b9 00 00 00 00       	mov    $0x0,%ecx
    617f:	ba 00 00 00 00       	mov    $0x0,%edx
    6184:	48 89 c7             	mov    %rax,%rdi
    6187:	e8 00 00 00 00       	callq  618c <_ZN6Parser10compileHWSEv+0x364>
    618c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6192:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6199:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    61a0:	b9 00 00 00 00       	mov    $0x0,%ecx
    61a5:	ba 00 00 00 00       	mov    $0x0,%edx
    61aa:	48 89 c7             	mov    %rax,%rdi
    61ad:	e8 00 00 00 00       	callq  61b2 <_ZN6Parser10compileHWSEv+0x38a>
    61b2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    61b8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    61bc:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    61c3:	48 89 d6             	mov    %rdx,%rsi
    61c6:	48 89 c7             	mov    %rax,%rdi
    61c9:	e8 00 00 00 00       	callq  61ce <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    61ce:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    61d2:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    61d9:	48 89 d6             	mov    %rdx,%rsi
    61dc:	48 89 c7             	mov    %rax,%rdi
    61df:	e8 00 00 00 00       	callq  61e4 <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    61e4:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    61eb:	0f 8e 3e 01 00 00    	jle    632f <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    61f1:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    61f8:	83 c0 01             	add    $0x1,%eax
    61fb:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6202:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6206:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 620d <_ZN6Parser10compileHWSEv+0x3e5>
    620d:	48 89 c7             	mov    %rax,%rdi
    6210:	e8 00 00 00 00       	callq  6215 <_ZN6Parser10compileHWSEv+0x3ed>
    6215:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    621c:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6220:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6224:	48 89 c6             	mov    %rax,%rsi
    6227:	48 89 d7             	mov    %rdx,%rdi
    622a:	e8 00 00 00 00       	callq  622f <_ZN6Parser10compileHWSEv+0x407>
    622f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6233:	48 89 c7             	mov    %rax,%rdi
    6236:	e8 00 00 00 00       	callq  623b <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    623b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    623f:	be 01 00 00 00       	mov    $0x1,%esi
    6244:	48 89 c7             	mov    %rax,%rdi
    6247:	e8 00 00 00 00       	callq  624c <_ZN6Parser10compileHWSEv+0x424>
    624c:	48 89 c2             	mov    %rax,%rdx
    624f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6253:	48 89 d6             	mov    %rdx,%rsi
    6256:	48 89 c7             	mov    %rax,%rdi
    6259:	e8 00 00 00 00       	callq  625e <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    625e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6265:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6269:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    626d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6271:	48 89 ce             	mov    %rcx,%rsi
    6274:	48 89 c7             	mov    %rax,%rdi
    6277:	e8 00 00 00 00       	callq  627c <_ZN6Parser10compileHWSEv+0x454>
    627c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6280:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6284:	ba 10 00 00 00       	mov    $0x10,%edx
    6289:	48 89 ce             	mov    %rcx,%rsi
    628c:	48 89 c7             	mov    %rax,%rdi
    628f:	e8 00 00 00 00       	callq  6294 <_ZN6Parser10compileHWSEv+0x46c>
    6294:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    629b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    629f:	48 89 c7             	mov    %rax,%rdi
    62a2:	e8 00 00 00 00       	callq  62a7 <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    62a7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    62ae:	48 05 90 00 00 00    	add    $0x90,%rax
    62b4:	be ff ff ff ff       	mov    $0xffffffff,%esi
    62b9:	48 89 c7             	mov    %rax,%rdi
    62bc:	e8 00 00 00 00       	callq  62c1 <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    62c1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    62c8:	48 05 90 00 00 00    	add    $0x90,%rax
    62ce:	be ff ff ff ff       	mov    $0xffffffff,%esi
    62d3:	48 89 c7             	mov    %rax,%rdi
    62d6:	e8 00 00 00 00       	callq  62db <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    62db:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    62e2:	0f be c0             	movsbl %al,%eax
    62e5:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    62ec:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    62f3:	89 c6                	mov    %eax,%esi
    62f5:	48 89 d7             	mov    %rdx,%rdi
    62f8:	e8 00 00 00 00       	callq  62fd <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    62fd:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6304:	66 c1 e8 08          	shr    $0x8,%ax
    6308:	0f be c0             	movsbl %al,%eax
    630b:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6312:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6319:	89 c6                	mov    %eax,%esi
    631b:	48 89 d7             	mov    %rdx,%rdi
    631e:	e8 00 00 00 00       	callq  6323 <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6323:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6327:	48 89 c7             	mov    %rax,%rdi
    632a:	e8 00 00 00 00       	callq  632f <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    632f:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6336:	0f 8e 28 02 00 00    	jle    6564 <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    633c:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6343:	83 c0 01             	add    $0x1,%eax
    6346:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    634d:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6354:	83 c0 01             	add    $0x1,%eax
    6357:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    635e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6362:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6369 <_ZN6Parser10compileHWSEv+0x541>
    6369:	48 89 c7             	mov    %rax,%rdi
    636c:	e8 00 00 00 00       	callq  6371 <_ZN6Parser10compileHWSEv+0x549>
    6371:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6378:	48 8d 50 68          	lea    0x68(%rax),%rdx
    637c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6380:	48 89 c6             	mov    %rax,%rsi
    6383:	48 89 d7             	mov    %rdx,%rdi
    6386:	e8 00 00 00 00       	callq  638b <_ZN6Parser10compileHWSEv+0x563>
    638b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    638f:	48 89 c7             	mov    %rax,%rdi
    6392:	e8 00 00 00 00       	callq  6397 <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    6397:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    639b:	be 01 00 00 00       	mov    $0x1,%esi
    63a0:	48 89 c7             	mov    %rax,%rdi
    63a3:	e8 00 00 00 00       	callq  63a8 <_ZN6Parser10compileHWSEv+0x580>
    63a8:	48 89 c2             	mov    %rax,%rdx
    63ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    63af:	48 89 d6             	mov    %rdx,%rsi
    63b2:	48 89 c7             	mov    %rax,%rdi
    63b5:	e8 00 00 00 00       	callq  63ba <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    63ba:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    63be:	be 02 00 00 00       	mov    $0x2,%esi
    63c3:	48 89 c7             	mov    %rax,%rdi
    63c6:	e8 00 00 00 00       	callq  63cb <_ZN6Parser10compileHWSEv+0x5a3>
    63cb:	48 89 c2             	mov    %rax,%rdx
    63ce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    63d2:	48 89 d6             	mov    %rdx,%rsi
    63d5:	48 89 c7             	mov    %rax,%rdi
    63d8:	e8 00 00 00 00       	callq  63dd <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    63dd:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    63e4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    63eb:	48 8d 48 28          	lea    0x28(%rax),%rcx
    63ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63f3:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    63f7:	48 89 ce             	mov    %rcx,%rsi
    63fa:	48 89 c7             	mov    %rax,%rdi
    63fd:	e8 00 00 00 00       	callq  6402 <_ZN6Parser10compileHWSEv+0x5da>
    6402:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    6406:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    640a:	ba 10 00 00 00       	mov    $0x10,%edx
    640f:	48 89 ce             	mov    %rcx,%rsi
    6412:	48 89 c7             	mov    %rax,%rdi
    6415:	e8 00 00 00 00       	callq  641a <_ZN6Parser10compileHWSEv+0x5f2>
    641a:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    6420:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6424:	48 89 c7             	mov    %rax,%rdi
    6427:	e8 00 00 00 00       	callq  642c <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    642c:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    6430:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6434:	ba 0a 00 00 00       	mov    $0xa,%edx
    6439:	48 89 ce             	mov    %rcx,%rsi
    643c:	48 89 c7             	mov    %rax,%rdi
    643f:	e8 00 00 00 00       	callq  6444 <_ZN6Parser10compileHWSEv+0x61c>
    6444:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    644b:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    644f:	84 c0                	test   %al,%al
    6451:	74 6d                	je     64c0 <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    6453:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    6457:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    645e:	ba 00 00 00 00       	mov    $0x0,%edx
    6463:	48 89 ce             	mov    %rcx,%rsi
    6466:	48 89 c7             	mov    %rax,%rdi
    6469:	e8 00 00 00 00       	callq  646e <_ZN6Parser10compileHWSEv+0x646>
    646e:	83 f0 01             	xor    $0x1,%eax
    6471:	84 c0                	test   %al,%al
    6473:	74 2a                	je     649f <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    6475:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6479:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6480:	48 89 d6             	mov    %rdx,%rsi
    6483:	48 89 c7             	mov    %rax,%rdi
    6486:	e8 00 00 00 00       	callq  648b <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    648b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6492:	48 89 c7             	mov    %rax,%rdi
    6495:	e8 00 00 00 00       	callq  649a <_ZN6Parser10compileHWSEv+0x672>
    649a:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    649f:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    64a3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    64aa:	ba 00 00 00 00       	mov    $0x0,%edx
    64af:	48 89 ce             	mov    %rcx,%rsi
    64b2:	48 89 c7             	mov    %rax,%rdi
    64b5:	e8 00 00 00 00       	callq  64ba <_ZN6Parser10compileHWSEv+0x692>
    64ba:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    64c0:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    64c7:	0f be c0             	movsbl %al,%eax
    64ca:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    64d1:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    64d8:	89 c6                	mov    %eax,%esi
    64da:	48 89 d7             	mov    %rdx,%rdi
    64dd:	e8 00 00 00 00       	callq  64e2 <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    64e2:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    64e9:	0f be c0             	movsbl %al,%eax
    64ec:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    64f3:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    64fa:	89 c6                	mov    %eax,%esi
    64fc:	48 89 d7             	mov    %rdx,%rdi
    64ff:	e8 00 00 00 00       	callq  6504 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    6504:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    650b:	0f be c0             	movsbl %al,%eax
    650e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6515:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    651c:	89 c6                	mov    %eax,%esi
    651e:	48 89 d7             	mov    %rdx,%rdi
    6521:	e8 00 00 00 00       	callq  6526 <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    6526:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    652d:	66 c1 e8 08          	shr    $0x8,%ax
    6531:	0f be c0             	movsbl %al,%eax
    6534:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    653b:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6542:	89 c6                	mov    %eax,%esi
    6544:	48 89 d7             	mov    %rdx,%rdi
    6547:	e8 00 00 00 00       	callq  654c <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    654c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6550:	48 89 c7             	mov    %rax,%rdi
    6553:	e8 00 00 00 00       	callq  6558 <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    6558:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    655c:	48 89 c7             	mov    %rax,%rdi
    655f:	e8 00 00 00 00       	callq  6564 <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    6564:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6568:	48 89 c7             	mov    %rax,%rdi
    656b:	e8 00 00 00 00       	callq  6570 <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    6570:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6574:	48 89 c7             	mov    %rax,%rdi
    6577:	e8 00 00 00 00       	callq  657c <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    657c:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    6583:	e9 89 fb ff ff       	jmpq   6111 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    6588:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    658f:	0f be d8             	movsbl %al,%ebx
    6592:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6599:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    65a0:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    65a6:	89 c6                	mov    %eax,%esi
    65a8:	48 89 d7             	mov    %rdx,%rdi
    65ab:	e8 00 00 00 00       	callq  65b0 <_ZN6Parser10compileHWSEv+0x788>
    65b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    65b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    65b8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    65bc:	89 de                	mov    %ebx,%esi
    65be:	48 89 c7             	mov    %rax,%rdi
    65c1:	e8 00 00 00 00       	callq  65c6 <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    65c6:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    65cd:	66 c1 e8 08          	shr    $0x8,%ax
    65d1:	0f be d8             	movsbl %al,%ebx
    65d4:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    65da:	8d 50 01             	lea    0x1(%rax),%edx
    65dd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    65e4:	48 05 90 00 00 00    	add    $0x90,%rax
    65ea:	89 d6                	mov    %edx,%esi
    65ec:	48 89 c7             	mov    %rax,%rdi
    65ef:	e8 00 00 00 00       	callq  65f4 <_ZN6Parser10compileHWSEv+0x7cc>
    65f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    65f8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    65fc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6600:	89 de                	mov    %ebx,%esi
    6602:	48 89 c7             	mov    %rax,%rdi
    6605:	e8 00 00 00 00       	callq  660a <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    660a:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6611:	0f be d8             	movsbl %al,%ebx
    6614:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    661b:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6622:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    6628:	89 c6                	mov    %eax,%esi
    662a:	48 89 d7             	mov    %rdx,%rdi
    662d:	e8 00 00 00 00       	callq  6632 <_ZN6Parser10compileHWSEv+0x80a>
    6632:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6636:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    663a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    663e:	89 de                	mov    %ebx,%esi
    6640:	48 89 c7             	mov    %rax,%rdi
    6643:	e8 00 00 00 00       	callq  6648 <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    6648:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    664f:	66 c1 e8 08          	shr    $0x8,%ax
    6653:	0f be d8             	movsbl %al,%ebx
    6656:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    665c:	8d 50 01             	lea    0x1(%rax),%edx
    665f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6666:	48 05 90 00 00 00    	add    $0x90,%rax
    666c:	89 d6                	mov    %edx,%esi
    666e:	48 89 c7             	mov    %rax,%rdi
    6671:	e8 00 00 00 00       	callq  6676 <_ZN6Parser10compileHWSEv+0x84e>
    6676:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    667a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    667e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6682:	89 de                	mov    %ebx,%esi
    6684:	48 89 c7             	mov    %rax,%rdi
    6687:	e8 00 00 00 00       	callq  668c <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    668c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6693:	48 89 c7             	mov    %rax,%rdi
    6696:	e8 00 00 00 00       	callq  669b <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    669b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    66a2:	48 89 c7             	mov    %rax,%rdi
    66a5:	e8 00 00 00 00       	callq  66aa <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    66aa:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    66b1:	48 89 c7             	mov    %rax,%rdi
    66b4:	e8 00 00 00 00       	callq  66b9 <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    66b9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    66c0:	48 89 c7             	mov    %rax,%rdi
    66c3:	e8 00 00 00 00       	callq  66c8 <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    66c8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    66cf:	48 89 c7             	mov    %rax,%rdi
    66d2:	e8 00 00 00 00       	callq  66d7 <_ZN6Parser10compileHWSEv+0x8af>
    66d7:	e9 dd f7 ff ff       	jmpq   5eb9 <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    66dc:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    66e3:	0f be d8             	movsbl %al,%ebx
    66e6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    66ed:	48 05 90 00 00 00    	add    $0x90,%rax
    66f3:	be 04 00 00 00       	mov    $0x4,%esi
    66f8:	48 89 c7             	mov    %rax,%rdi
    66fb:	e8 00 00 00 00       	callq  6700 <_ZN6Parser10compileHWSEv+0x8d8>
    6700:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6704:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    6708:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    670c:	89 de                	mov    %ebx,%esi
    670e:	48 89 c7             	mov    %rax,%rdi
    6711:	e8 00 00 00 00       	callq  6716 <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    6716:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    671d:	66 c1 e8 08          	shr    $0x8,%ax
    6721:	0f be d8             	movsbl %al,%ebx
    6724:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    672b:	48 05 90 00 00 00    	add    $0x90,%rax
    6731:	be 05 00 00 00       	mov    $0x5,%esi
    6736:	48 89 c7             	mov    %rax,%rdi
    6739:	e8 00 00 00 00       	callq  673e <_ZN6Parser10compileHWSEv+0x916>
    673e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6742:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    6746:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    674a:	89 de                	mov    %ebx,%esi
    674c:	48 89 c7             	mov    %rax,%rdi
    674f:	e8 00 00 00 00       	callq  6754 <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    6754:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    675b:	48 89 c7             	mov    %rax,%rdi
    675e:	e8 00 00 00 00       	callq  6763 <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    6763:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    676a:	48 89 c7             	mov    %rax,%rdi
    676d:	e8 00 00 00 00       	callq  6772 <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    6772:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6779:	48 89 c7             	mov    %rax,%rdi
    677c:	e8 00 00 00 00       	callq  6781 <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    6781:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6788:	48 89 c7             	mov    %rax,%rdi
    678b:	e8 00 00 00 00       	callq  6790 <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    6790:	90                   	nop
    6791:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6795:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    679c:	00 00 
    679e:	0f 84 8e 01 00 00    	je     6932 <_ZN6Parser10compileHWSEv+0xb0a>
    67a4:	e9 84 01 00 00       	jmpq   692d <_ZN6Parser10compileHWSEv+0xb05>
    67a9:	48 89 c3             	mov    %rax,%rbx
    67ac:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    67b0:	48 89 c7             	mov    %rax,%rdi
    67b3:	e8 00 00 00 00       	callq  67b8 <_ZN6Parser10compileHWSEv+0x990>
    67b8:	e9 1a 01 00 00       	jmpq   68d7 <_ZN6Parser10compileHWSEv+0xaaf>
    67bd:	48 89 c3             	mov    %rax,%rbx
    67c0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    67c7:	48 89 c7             	mov    %rax,%rdi
    67ca:	e8 00 00 00 00       	callq  67cf <_ZN6Parser10compileHWSEv+0x9a7>
    67cf:	e9 03 01 00 00       	jmpq   68d7 <_ZN6Parser10compileHWSEv+0xaaf>
    67d4:	48 89 c3             	mov    %rax,%rbx
    67d7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    67db:	48 89 c7             	mov    %rax,%rdi
    67de:	e8 00 00 00 00       	callq  67e3 <_ZN6Parser10compileHWSEv+0x9bb>
    67e3:	e9 db 00 00 00       	jmpq   68c3 <_ZN6Parser10compileHWSEv+0xa9b>
    67e8:	48 89 c3             	mov    %rax,%rbx
    67eb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    67f2:	48 89 c7             	mov    %rax,%rdi
    67f5:	e8 00 00 00 00       	callq  67fa <_ZN6Parser10compileHWSEv+0x9d2>
    67fa:	e9 c4 00 00 00       	jmpq   68c3 <_ZN6Parser10compileHWSEv+0xa9b>
    67ff:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    6802:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6806:	48 89 c7             	mov    %rax,%rdi
    6809:	e8 00 00 00 00       	callq  680e <_ZN6Parser10compileHWSEv+0x9e6>
    680e:	eb 69                	jmp    6879 <_ZN6Parser10compileHWSEv+0xa51>
    6810:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6813:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6817:	48 89 c7             	mov    %rax,%rdi
    681a:	e8 00 00 00 00       	callq  681f <_ZN6Parser10compileHWSEv+0x9f7>
    681f:	eb 03                	jmp    6824 <_ZN6Parser10compileHWSEv+0x9fc>
    6821:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6824:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6828:	48 89 c7             	mov    %rax,%rdi
    682b:	e8 00 00 00 00       	callq  6830 <_ZN6Parser10compileHWSEv+0xa08>
    6830:	eb 47                	jmp    6879 <_ZN6Parser10compileHWSEv+0xa51>
    6832:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    6835:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6839:	48 89 c7             	mov    %rax,%rdi
    683c:	e8 00 00 00 00       	callq  6841 <_ZN6Parser10compileHWSEv+0xa19>
    6841:	eb 36                	jmp    6879 <_ZN6Parser10compileHWSEv+0xa51>
    6843:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    6846:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    684a:	48 89 c7             	mov    %rax,%rdi
    684d:	e8 00 00 00 00       	callq  6852 <_ZN6Parser10compileHWSEv+0xa2a>
    6852:	eb 03                	jmp    6857 <_ZN6Parser10compileHWSEv+0xa2f>
    6854:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    6857:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    685b:	48 89 c7             	mov    %rax,%rdi
    685e:	e8 00 00 00 00       	callq  6863 <_ZN6Parser10compileHWSEv+0xa3b>
    6863:	eb 03                	jmp    6868 <_ZN6Parser10compileHWSEv+0xa40>
    6865:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    6868:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    686c:	48 89 c7             	mov    %rax,%rdi
    686f:	e8 00 00 00 00       	callq  6874 <_ZN6Parser10compileHWSEv+0xa4c>
    6874:	eb 03                	jmp    6879 <_ZN6Parser10compileHWSEv+0xa51>
    6876:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    6879:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    687d:	48 89 c7             	mov    %rax,%rdi
    6880:	e8 00 00 00 00       	callq  6885 <_ZN6Parser10compileHWSEv+0xa5d>
    6885:	eb 03                	jmp    688a <_ZN6Parser10compileHWSEv+0xa62>
    6887:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    688a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    688e:	48 89 c7             	mov    %rax,%rdi
    6891:	e8 00 00 00 00       	callq  6896 <_ZN6Parser10compileHWSEv+0xa6e>
    6896:	eb 03                	jmp    689b <_ZN6Parser10compileHWSEv+0xa73>
    6898:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    689b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    68a2:	48 89 c7             	mov    %rax,%rdi
    68a5:	e8 00 00 00 00       	callq  68aa <_ZN6Parser10compileHWSEv+0xa82>
    68aa:	eb 03                	jmp    68af <_ZN6Parser10compileHWSEv+0xa87>
    68ac:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    68af:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    68b6:	48 89 c7             	mov    %rax,%rdi
    68b9:	e8 00 00 00 00       	callq  68be <_ZN6Parser10compileHWSEv+0xa96>
    68be:	eb 03                	jmp    68c3 <_ZN6Parser10compileHWSEv+0xa9b>
    68c0:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    68c3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    68ca:	48 89 c7             	mov    %rax,%rdi
    68cd:	e8 00 00 00 00       	callq  68d2 <_ZN6Parser10compileHWSEv+0xaaa>
    68d2:	eb 03                	jmp    68d7 <_ZN6Parser10compileHWSEv+0xaaf>
    68d4:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    68d7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    68de:	48 89 c7             	mov    %rax,%rdi
    68e1:	e8 00 00 00 00       	callq  68e6 <_ZN6Parser10compileHWSEv+0xabe>
    68e6:	eb 03                	jmp    68eb <_ZN6Parser10compileHWSEv+0xac3>
    68e8:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    68eb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    68f2:	48 89 c7             	mov    %rax,%rdi
    68f5:	e8 00 00 00 00       	callq  68fa <_ZN6Parser10compileHWSEv+0xad2>
    68fa:	eb 03                	jmp    68ff <_ZN6Parser10compileHWSEv+0xad7>
    68fc:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    68ff:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6906:	48 89 c7             	mov    %rax,%rdi
    6909:	e8 00 00 00 00       	callq  690e <_ZN6Parser10compileHWSEv+0xae6>
    690e:	eb 03                	jmp    6913 <_ZN6Parser10compileHWSEv+0xaeb>
    6910:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    6913:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    691a:	48 89 c7             	mov    %rax,%rdi
    691d:	e8 00 00 00 00       	callq  6922 <_ZN6Parser10compileHWSEv+0xafa>
    6922:	48 89 d8             	mov    %rbx,%rax
    6925:	48 89 c7             	mov    %rax,%rdi
    6928:	e8 00 00 00 00       	callq  692d <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    692d:	e8 00 00 00 00       	callq  6932 <_ZN6Parser10compileHWSEv+0xb0a>
    6932:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    6939:	5b                   	pop    %rbx
    693a:	5d                   	pop    %rbp
    693b:	c3                   	retq   

000000000000693c <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    693c:	55                   	push   %rbp
    693d:	48 89 e5             	mov    %rsp,%rbp
    6940:	53                   	push   %rbx
    6941:	48 83 ec 58          	sub    $0x58,%rsp
    6945:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    6949:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6950:	00 00 
    6952:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6956:	31 c0                	xor    %eax,%eax

    int i = 0;
    6958:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    695f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6963:	48 83 c0 78          	add    $0x78,%rax
    6967:	48 89 c7             	mov    %rax,%rdi
    696a:	e8 00 00 00 00       	callq  696f <_ZN6Parser9selectHWSEv+0x33>
    696f:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    6972:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6976:	48 89 c7             	mov    %rax,%rdi
    6979:	e8 00 00 00 00       	callq  697e <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    697e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6982:	48 89 c7             	mov    %rax,%rdi
    6985:	e8 00 00 00 00       	callq  698a <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    698a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    698e:	48 83 c0 78          	add    $0x78,%rax
    6992:	48 89 c7             	mov    %rax,%rdi
    6995:	e8 00 00 00 00       	callq  699a <_ZN6Parser9selectHWSEv+0x5e>
    699a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    699e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    69a2:	48 83 c0 78          	add    $0x78,%rax
    69a6:	48 89 c7             	mov    %rax,%rdi
    69a9:	e8 00 00 00 00       	callq  69ae <_ZN6Parser9selectHWSEv+0x72>
    69ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    69b2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    69b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    69ba:	48 89 d6             	mov    %rdx,%rsi
    69bd:	48 89 c7             	mov    %rax,%rdi
    69c0:	e8 00 00 00 00       	callq  69c5 <_ZN6Parser9selectHWSEv+0x89>
    69c5:	84 c0                	test   %al,%al
    69c7:	74 50                	je     6a19 <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    69c9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    69cd:	48 89 c7             	mov    %rax,%rdi
    69d0:	e8 00 00 00 00       	callq  69d5 <_ZN6Parser9selectHWSEv+0x99>
    69d5:	be 00 00 00 00       	mov    $0x0,%esi
    69da:	48 89 c7             	mov    %rax,%rdi
    69dd:	e8 00 00 00 00       	callq  69e2 <_ZN6Parser9selectHWSEv+0xa6>
    69e2:	48 89 c2             	mov    %rax,%rdx
    69e5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    69e9:	48 89 d6             	mov    %rdx,%rsi
    69ec:	48 89 c7             	mov    %rax,%rdi
    69ef:	e8 00 00 00 00       	callq  69f4 <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    69f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    69f8:	48 8d 50 68          	lea    0x68(%rax),%rdx
    69fc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a00:	48 89 c6             	mov    %rax,%rsi
    6a03:	48 89 d7             	mov    %rdx,%rdi
    6a06:	e8 00 00 00 00       	callq  6a0b <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    6a0b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6a0f:	48 89 c7             	mov    %rax,%rdi
    6a12:	e8 00 00 00 00       	callq  6a17 <_ZN6Parser9selectHWSEv+0xdb>
    6a17:	eb 85                	jmp    699e <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    6a19:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    6a20:	8b 45 b8             	mov    -0x48(%rbp),%eax
    6a23:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    6a26:	7d 06                	jge    6a2e <_ZN6Parser9selectHWSEv+0xf2>
    6a28:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    6a2c:	eb f2                	jmp    6a20 <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    6a2e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a32:	48 89 c7             	mov    %rax,%rdi
    6a35:	e8 00 00 00 00       	callq  6a3a <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    6a3a:	90                   	nop
    6a3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6a3f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6a46:	00 00 
    6a48:	74 21                	je     6a6b <_ZN6Parser9selectHWSEv+0x12f>
    6a4a:	eb 1a                	jmp    6a66 <_ZN6Parser9selectHWSEv+0x12a>
    6a4c:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    6a4f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a53:	48 89 c7             	mov    %rax,%rdi
    6a56:	e8 00 00 00 00       	callq  6a5b <_ZN6Parser9selectHWSEv+0x11f>
    6a5b:	48 89 d8             	mov    %rbx,%rax
    6a5e:	48 89 c7             	mov    %rax,%rdi
    6a61:	e8 00 00 00 00       	callq  6a66 <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    6a66:	e8 00 00 00 00       	callq  6a6b <_ZN6Parser9selectHWSEv+0x12f>
    6a6b:	48 83 c4 58          	add    $0x58,%rsp
    6a6f:	5b                   	pop    %rbx
    6a70:	5d                   	pop    %rbp
    6a71:	c3                   	retq   

0000000000006a72 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    6a72:	55                   	push   %rbp
    6a73:	48 89 e5             	mov    %rsp,%rbp
    6a76:	53                   	push   %rbx
    6a77:	48 83 ec 68          	sub    $0x68,%rsp
    6a7b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    6a7f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6a86:	00 00 
    6a88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6a8c:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    6a8e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6a92:	48 89 c7             	mov    %rax,%rdi
    6a95:	e8 00 00 00 00       	callq  6a9a <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    6a9a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6a9e:	48 8d 50 58          	lea    0x58(%rax),%rdx
    6aa2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6aa6:	48 89 d6             	mov    %rdx,%rsi
    6aa9:	48 89 c7             	mov    %rax,%rdi
    6aac:	e8 00 00 00 00       	callq  6ab1 <_ZN6Parser12loadIncludesEv+0x3f>
    6ab1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6ab5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6ab9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6abd:	48 8d 50 58          	lea    0x58(%rax),%rdx
    6ac1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6ac5:	48 89 d6             	mov    %rdx,%rsi
    6ac8:	48 89 c7             	mov    %rax,%rdi
    6acb:	e8 00 00 00 00       	callq  6ad0 <_ZN6Parser12loadIncludesEv+0x5e>
    6ad0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6ad4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ad8:	48 89 d6             	mov    %rdx,%rsi
    6adb:	48 89 c7             	mov    %rax,%rdi
    6ade:	e8 00 00 00 00       	callq  6ae3 <_ZN6Parser12loadIncludesEv+0x71>
    6ae3:	84 c0                	test   %al,%al
    6ae5:	0f 84 dc 00 00 00    	je     6bc7 <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    6aeb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6aef:	48 89 c7             	mov    %rax,%rdi
    6af2:	e8 00 00 00 00       	callq  6af7 <_ZN6Parser12loadIncludesEv+0x85>
    6af7:	48 89 c2             	mov    %rax,%rdx
    6afa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6afe:	48 89 d6             	mov    %rdx,%rsi
    6b01:	48 89 c7             	mov    %rax,%rdi
    6b04:	e8 00 00 00 00       	callq  6b09 <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    6b09:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6b0d:	be 01 00 00 00       	mov    $0x1,%esi
    6b12:	48 89 c7             	mov    %rax,%rdi
    6b15:	e8 00 00 00 00       	callq  6b1a <_ZN6Parser12loadIncludesEv+0xa8>
    6b1a:	8b 55 d0             	mov    -0x30(%rbp),%edx
    6b1d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6b21:	89 d6                	mov    %edx,%esi
    6b23:	48 89 c7             	mov    %rax,%rdi
    6b26:	e8 00 00 00 00       	callq  6b2b <_ZN6Parser12loadIncludesEv+0xb9>
    6b2b:	84 c0                	test   %al,%al
    6b2d:	74 7b                	je     6baa <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    6b2f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6b33:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6b37:	48 89 d6             	mov    %rdx,%rsi
    6b3a:	48 89 c7             	mov    %rax,%rdi
    6b3d:	e8 00 00 00 00       	callq  6b42 <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    6b42:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6b46:	48 89 c7             	mov    %rax,%rdi
    6b49:	e8 00 00 00 00       	callq  6b4e <_ZN6Parser12loadIncludesEv+0xdc>
    6b4e:	83 f0 01             	xor    $0x1,%eax
    6b51:	84 c0                	test   %al,%al
    6b53:	74 3d                	je     6b92 <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    6b55:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6b59:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6b5d:	ba 00 00 00 00       	mov    $0x0,%edx
    6b62:	48 89 ce             	mov    %rcx,%rsi
    6b65:	48 89 c7             	mov    %rax,%rdi
    6b68:	e8 00 00 00 00       	callq  6b6d <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    6b6d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6b71:	48 8d 50 60          	lea    0x60(%rax),%rdx
    6b75:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6b79:	48 89 c6             	mov    %rax,%rsi
    6b7c:	48 89 d7             	mov    %rdx,%rdi
    6b7f:	e8 00 00 00 00       	callq  6b84 <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    6b84:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6b88:	48 89 c7             	mov    %rax,%rdi
    6b8b:	e8 00 00 00 00       	callq  6b90 <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    6b90:	eb b0                	jmp    6b42 <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    6b92:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6b96:	48 89 c7             	mov    %rax,%rdi
    6b99:	e8 00 00 00 00       	callq  6b9e <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    6b9e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6ba2:	48 89 c7             	mov    %rax,%rdi
    6ba5:	e8 00 00 00 00       	callq  6baa <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    6baa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6bae:	48 89 c7             	mov    %rax,%rdi
    6bb1:	e8 00 00 00 00       	callq  6bb6 <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    6bb6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6bba:	48 89 c7             	mov    %rax,%rdi
    6bbd:	e8 00 00 00 00       	callq  6bc2 <_ZN6Parser12loadIncludesEv+0x150>
    6bc2:	e9 f2 fe ff ff       	jmpq   6ab9 <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    6bc7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6bcb:	48 89 c7             	mov    %rax,%rdi
    6bce:	e8 00 00 00 00       	callq  6bd3 <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    6bd3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6bd7:	48 8d 50 60          	lea    0x60(%rax),%rdx
    6bdb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6bdf:	48 89 d6             	mov    %rdx,%rsi
    6be2:	48 89 c7             	mov    %rax,%rdi
    6be5:	e8 00 00 00 00       	callq  6bea <_ZN6Parser12loadIncludesEv+0x178>
    6bea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6bee:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6bf2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6bf6:	48 8d 50 60          	lea    0x60(%rax),%rdx
    6bfa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6bfe:	48 89 d6             	mov    %rdx,%rsi
    6c01:	48 89 c7             	mov    %rax,%rdi
    6c04:	e8 00 00 00 00       	callq  6c09 <_ZN6Parser12loadIncludesEv+0x197>
    6c09:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6c0d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c11:	48 89 d6             	mov    %rdx,%rsi
    6c14:	48 89 c7             	mov    %rax,%rdi
    6c17:	e8 00 00 00 00       	callq  6c1c <_ZN6Parser12loadIncludesEv+0x1aa>
    6c1c:	84 c0                	test   %al,%al
    6c1e:	74 2c                	je     6c4c <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    6c20:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c24:	48 89 c7             	mov    %rax,%rdi
    6c27:	e8 00 00 00 00       	callq  6c2c <_ZN6Parser12loadIncludesEv+0x1ba>
    6c2c:	48 89 c2             	mov    %rax,%rdx
    6c2f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6c33:	48 89 d6             	mov    %rdx,%rsi
    6c36:	48 89 c7             	mov    %rax,%rdi
    6c39:	e8 00 00 00 00       	callq  6c3e <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    6c3e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6c42:	48 89 c7             	mov    %rax,%rdi
    6c45:	e8 00 00 00 00       	callq  6c4a <_ZN6Parser12loadIncludesEv+0x1d8>
    6c4a:	eb a6                	jmp    6bf2 <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    6c4c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6c50:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6c54:	48 89 d6             	mov    %rdx,%rsi
    6c57:	48 89 c7             	mov    %rax,%rdi
    6c5a:	e8 00 00 00 00       	callq  6c5f <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    6c5f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6c63:	48 89 c7             	mov    %rax,%rdi
    6c66:	e8 00 00 00 00       	callq  6c6b <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    6c6b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6c6f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    6c76:	00 00 
    6c78:	74 5d                	je     6cd7 <_ZN6Parser12loadIncludesEv+0x265>
    6c7a:	eb 56                	jmp    6cd2 <_ZN6Parser12loadIncludesEv+0x260>
    6c7c:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    6c7f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6c83:	48 89 c7             	mov    %rax,%rdi
    6c86:	e8 00 00 00 00       	callq  6c8b <_ZN6Parser12loadIncludesEv+0x219>
    6c8b:	eb 03                	jmp    6c90 <_ZN6Parser12loadIncludesEv+0x21e>
    6c8d:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    6c90:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6c94:	48 89 c7             	mov    %rax,%rdi
    6c97:	e8 00 00 00 00       	callq  6c9c <_ZN6Parser12loadIncludesEv+0x22a>
    6c9c:	eb 03                	jmp    6ca1 <_ZN6Parser12loadIncludesEv+0x22f>
    6c9e:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    6ca1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6ca5:	48 89 c7             	mov    %rax,%rdi
    6ca8:	e8 00 00 00 00       	callq  6cad <_ZN6Parser12loadIncludesEv+0x23b>
    6cad:	48 89 d8             	mov    %rbx,%rax
    6cb0:	48 89 c7             	mov    %rax,%rdi
    6cb3:	e8 00 00 00 00       	callq  6cb8 <_ZN6Parser12loadIncludesEv+0x246>
    6cb8:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    6cbb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6cbf:	48 89 c7             	mov    %rax,%rdi
    6cc2:	e8 00 00 00 00       	callq  6cc7 <_ZN6Parser12loadIncludesEv+0x255>
    6cc7:	48 89 d8             	mov    %rbx,%rax
    6cca:	48 89 c7             	mov    %rax,%rdi
    6ccd:	e8 00 00 00 00       	callq  6cd2 <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    6cd2:	e8 00 00 00 00       	callq  6cd7 <_ZN6Parser12loadIncludesEv+0x265>
    6cd7:	48 83 c4 68          	add    $0x68,%rsp
    6cdb:	5b                   	pop    %rbx
    6cdc:	5d                   	pop    %rbp
    6cdd:	c3                   	retq   

0000000000006cde <_ZN6Parser7compileEv>:

int Parser::compile(){
    6cde:	55                   	push   %rbp
    6cdf:	48 89 e5             	mov    %rsp,%rbp
    6ce2:	53                   	push   %rbx
    6ce3:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    6cea:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    6cf1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6cf8:	00 00 
    6cfa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6cfe:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    6d00:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6d04:	48 89 c7             	mov    %rax,%rdi
    6d07:	e8 00 00 00 00       	callq  6d0c <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    6d0c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d13:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    6d17:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d1e:	48 89 c7             	mov    %rax,%rdi
    6d21:	e8 00 00 00 00       	callq  6d26 <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    6d26:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d2d:	48 8d 50 30          	lea    0x30(%rax),%rdx
    6d31:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d38:	48 89 d6             	mov    %rdx,%rsi
    6d3b:	48 89 c7             	mov    %rax,%rdi
    6d3e:	e8 00 00 00 00       	callq  6d43 <_ZN6Parser7compileEv+0x65>
    6d43:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d4a:	48 8d 78 78          	lea    0x78(%rax),%rdi
    6d4e:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    6d55:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6d5c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d63:	48 89 d1             	mov    %rdx,%rcx
    6d66:	48 89 fa             	mov    %rdi,%rdx
    6d69:	48 89 c7             	mov    %rax,%rdi
    6d6c:	e8 00 00 00 00       	callq  6d71 <_ZN6Parser7compileEv+0x93>
    6d71:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d78:	48 89 c7             	mov    %rax,%rdi
    6d7b:	e8 00 00 00 00       	callq  6d80 <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    6d80:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6d87:	48 8d 50 38          	lea    0x38(%rax),%rdx
    6d8b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6d92:	48 89 d6             	mov    %rdx,%rsi
    6d95:	48 89 c7             	mov    %rax,%rdi
    6d98:	e8 00 00 00 00       	callq  6d9d <_ZN6Parser7compileEv+0xbf>
    6d9d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6da4:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    6dab:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    6db2:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6db9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6dc0:	48 89 d1             	mov    %rdx,%rcx
    6dc3:	48 89 fa             	mov    %rdi,%rdx
    6dc6:	48 89 c7             	mov    %rax,%rdi
    6dc9:	e8 00 00 00 00       	callq  6dce <_ZN6Parser7compileEv+0xf0>
    6dce:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6dd5:	48 89 c7             	mov    %rax,%rdi
    6dd8:	e8 00 00 00 00       	callq  6ddd <_ZN6Parser7compileEv+0xff>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    6ddd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6de1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6de8 <_ZN6Parser7compileEv+0x10a>
    6de8:	48 89 c7             	mov    %rax,%rdi
    6deb:	e8 00 00 00 00       	callq  6df0 <_ZN6Parser7compileEv+0x112>
    6df0:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    6df4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6dfb:	48 89 d6             	mov    %rdx,%rsi
    6dfe:	48 89 c7             	mov    %rax,%rdi
    6e01:	e8 00 00 00 00       	callq  6e06 <_ZN6Parser7compileEv+0x128>
    6e06:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e0a:	48 89 c7             	mov    %rax,%rdi
    6e0d:	e8 00 00 00 00       	callq  6e12 <_ZN6Parser7compileEv+0x134>
    this->addIncludeFile("project1.h");
    6e12:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e16:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6e1d <_ZN6Parser7compileEv+0x13f>
    6e1d:	48 89 c7             	mov    %rax,%rdi
    6e20:	e8 00 00 00 00       	callq  6e25 <_ZN6Parser7compileEv+0x147>
    6e25:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    6e29:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6e30:	48 89 d6             	mov    %rdx,%rsi
    6e33:	48 89 c7             	mov    %rax,%rdi
    6e36:	e8 00 00 00 00       	callq  6e3b <_ZN6Parser7compileEv+0x15d>
    6e3b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e3f:	48 89 c7             	mov    %rax,%rdi
    6e42:	e8 00 00 00 00       	callq  6e47 <_ZN6Parser7compileEv+0x169>
    this->addIncludeFile("kpa_config.h");
    6e47:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6e4b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6e52 <_ZN6Parser7compileEv+0x174>
    6e52:	48 89 c7             	mov    %rax,%rdi
    6e55:	e8 00 00 00 00       	callq  6e5a <_ZN6Parser7compileEv+0x17c>
    6e5a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    6e5e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6e65:	48 89 d6             	mov    %rdx,%rsi
    6e68:	48 89 c7             	mov    %rax,%rdi
    6e6b:	e8 00 00 00 00       	callq  6e70 <_ZN6Parser7compileEv+0x192>
    6e70:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6e74:	48 89 c7             	mov    %rax,%rdi
    6e77:	e8 00 00 00 00       	callq  6e7c <_ZN6Parser7compileEv+0x19e>
    this->addIncludeFile("names.h");
    6e7c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6e80:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6e87 <_ZN6Parser7compileEv+0x1a9>
    6e87:	48 89 c7             	mov    %rax,%rdi
    6e8a:	e8 00 00 00 00       	callq  6e8f <_ZN6Parser7compileEv+0x1b1>
    6e8f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    6e93:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6e9a:	48 89 d6             	mov    %rdx,%rsi
    6e9d:	48 89 c7             	mov    %rax,%rdi
    6ea0:	e8 00 00 00 00       	callq  6ea5 <_ZN6Parser7compileEv+0x1c7>
    6ea5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6ea9:	48 89 c7             	mov    %rax,%rdi
    6eac:	e8 00 00 00 00       	callq  6eb1 <_ZN6Parser7compileEv+0x1d3>
    int lIf = this->loadIncludes();
    6eb1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6eb8:	48 89 c7             	mov    %rax,%rdi
    6ebb:	e8 00 00 00 00       	callq  6ec0 <_ZN6Parser7compileEv+0x1e2>
    6ec0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    6ec6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6eca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6ed1:	48 89 d6             	mov    %rdx,%rsi
    6ed4:	48 89 c7             	mov    %rax,%rdi
    6ed7:	e8 00 00 00 00       	callq  6edc <_ZN6Parser7compileEv+0x1fe>
    6edc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    6ee2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6ee6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6eed:	48 89 d6             	mov    %rdx,%rsi
    6ef0:	48 89 c7             	mov    %rax,%rdi
    6ef3:	e8 00 00 00 00       	callq  6ef8 <_ZN6Parser7compileEv+0x21a>
    6ef8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)


    compileHWS();
    6efe:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    6f05:	48 89 c7             	mov    %rax,%rdi
    6f08:	e8 00 00 00 00       	callq  6f0d <_ZN6Parser7compileEv+0x22f>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    6f0d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6f11:	48 89 c7             	mov    %rax,%rdi
    6f14:	e8 00 00 00 00       	callq  6f19 <_ZN6Parser7compileEv+0x23b>
    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
}
    6f19:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6f1d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    6f24:	00 00 
    6f26:	0f 84 90 00 00 00    	je     6fbc <_ZN6Parser7compileEv+0x2de>
    6f2c:	e9 86 00 00 00       	jmpq   6fb7 <_ZN6Parser7compileEv+0x2d9>
    6f31:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    6f34:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6f3b:	48 89 c7             	mov    %rax,%rdi
    6f3e:	e8 00 00 00 00       	callq  6f43 <_ZN6Parser7compileEv+0x265>
    6f43:	eb 5b                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f45:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    6f48:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6f4f:	48 89 c7             	mov    %rax,%rdi
    6f52:	e8 00 00 00 00       	callq  6f57 <_ZN6Parser7compileEv+0x279>
    6f57:	eb 47                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f59:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    6f5c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6f60:	48 89 c7             	mov    %rax,%rdi
    6f63:	e8 00 00 00 00       	callq  6f68 <_ZN6Parser7compileEv+0x28a>
    6f68:	eb 36                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f6a:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    6f6d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6f71:	48 89 c7             	mov    %rax,%rdi
    6f74:	e8 00 00 00 00       	callq  6f79 <_ZN6Parser7compileEv+0x29b>
    6f79:	eb 25                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f7b:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    6f7e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f82:	48 89 c7             	mov    %rax,%rdi
    6f85:	e8 00 00 00 00       	callq  6f8a <_ZN6Parser7compileEv+0x2ac>
    6f8a:	eb 14                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f8c:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    6f8f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f93:	48 89 c7             	mov    %rax,%rdi
    6f96:	e8 00 00 00 00       	callq  6f9b <_ZN6Parser7compileEv+0x2bd>
    6f9b:	eb 03                	jmp    6fa0 <_ZN6Parser7compileEv+0x2c2>
    6f9d:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    6fa0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6fa4:	48 89 c7             	mov    %rax,%rdi
    6fa7:	e8 00 00 00 00       	callq  6fac <_ZN6Parser7compileEv+0x2ce>
    6fac:	48 89 d8             	mov    %rbx,%rax
    6faf:	48 89 c7             	mov    %rax,%rdi
    6fb2:	e8 00 00 00 00       	callq  6fb7 <_ZN6Parser7compileEv+0x2d9>
    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
}
    6fb7:	e8 00 00 00 00       	callq  6fbc <_ZN6Parser7compileEv+0x2de>
    6fbc:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    6fc3:	5b                   	pop    %rbx
    6fc4:	5d                   	pop    %rbp
    6fc5:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   
