
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        0000000c  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        0000000c  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        0000000c  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .text         00007e22  0000000000000000  0000000000000000  00000c94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
392 .data         00000000  0000000000000000  0000000000000000  00008ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
393 .bss          00000000  0000000000000000  0000000000000000  00008ab6  2**0
                  ALLOC
394 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008ab6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
396 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008ad7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
397 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
398 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00008af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
399 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00008b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
400 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00008b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
401 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00008b34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
402 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00008b50  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
403 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008b92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
404 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00008bd6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
405 .rodata       00000624  0000000000000000  0000000000000000  00008c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
406 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00009234  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
407 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009298  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
408 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000092ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
409 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  0000930c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
410 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  00009320  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
411 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  0000933e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
412 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00009372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
413 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00009386  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
414 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  000093e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
415 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  00009456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000947e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
417 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  000094fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
418 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009574  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
419 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000959a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
420 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  000095c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
421 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  000095d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
422 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  0000961e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
423 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  00009646  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  0000966b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  000096d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00009720  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
427 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  000097b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
428 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  000097ca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  0000985e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
430 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009874  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
431 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  0000989a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
432 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  000098ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  000098cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
434 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  000098ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  0000997c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
436 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009990  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  000099e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009a10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009a9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009aba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009aee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
442 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009b64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009bb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
444 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00009c3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
445 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00009c4c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00009d06  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
447 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00009d21  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00009dab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
449 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00009dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
450 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00009dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
451 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00009dda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00009e24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00009e3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00009e78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00009ecc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
456 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00009eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  00009f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
458 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00009f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
459 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00009f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  00009f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
461 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  00009fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
462 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  00009fc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  00009fdc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a002  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a01e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a048  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
467 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
468 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a080  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a0a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a0ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
471 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a0e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
472 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a14c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  0000a192  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  0000a250  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
476 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
477 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a2c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a318  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
479 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a38a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
480 .gcc_except_table 00001184  0000000000000000  0000000000000000  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
481 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000b530  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
482 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000b54c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
483 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000b576  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
484 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000b592  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000b64e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
486 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000b668  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000b682  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000b69c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
489 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000b6b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
490 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b6d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
491 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b6e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000b708  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000b722  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b73c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b747  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
496 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000b76c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
497 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000b794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
498 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000b7a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000b7ca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000b832  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000b94e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000ba2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000bacc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000bbf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000bc10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000bc72  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000bcae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000bdba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
509 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000bdd0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000be10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000be50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000be72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000be92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000beb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000c19c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c30e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
518 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000c324  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000c358  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c38c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000c3ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c3ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000c3ec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000c41a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000c58a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000c5ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
527 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000c60a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c66c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
529 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000c68e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
530 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000c6a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
531 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000c6ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000c6d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
533 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000c708  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000c722  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000c794  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
536 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000c7e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000c802  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000c842  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
539 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c94e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000c964  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000c9c6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000ca1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
543 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000ca40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000ca6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000ca8e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000cab0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000cb3a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000cba0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000ccae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
550 .text._ZN5QHashI7QString11QStringListE4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000ccc2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000ce17  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
552 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000ce3a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
553 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000ce5e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000cebc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000d092  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000d0fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000d11a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000d1e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
559 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000d20a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
560 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000d224  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
561 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000d24a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
562 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000d2a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
563 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000d2ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000d300  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000d43a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000d4fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
567 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000d516  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
569 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000d55e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
570 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000d56c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000d59a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
572 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000d5ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
573 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d5be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
574 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d5d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
575 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000d5e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
576 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000d5fc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d730  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000d75e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
579 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000d770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
581 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000d7a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000d7c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
584 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d8b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
585 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000d8de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
586 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000d8f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
587 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000d902  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
588 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
589 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
590 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000d948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
591 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000d962  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
592 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d9f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000da0e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
594 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000da2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000da68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000dae8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
597 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000db16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
598 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000db28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
599 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000db3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000db4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000db5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
602 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000db78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000dc66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
604 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000dca0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000dd02  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000dd48  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000dd72  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000dda4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
609 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000dede  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
610 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000dfa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
611 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000dfba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
612 .text._ZNK5QHashI7QString11QStringListE7isEmptyEv 00000019  0000000000000000  0000000000000000  0000dfc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
613 .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E 00000035  0000000000000000  0000000000000000  0000dfe2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e018  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000e04c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
616 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000e072  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000e0a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e0ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e14a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e192  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000e1e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
622 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000e26a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e292  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
624 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e33a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e3e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000e48a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
627 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000e4a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
628 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e51c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000e5c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000e626  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
631 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e646  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e66a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e6e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e72e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000e780  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000e806  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e85a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000e87d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
639 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000e8b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
640 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000e93c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e990  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000e9b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000e9de  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000eaae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000eaba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000ebce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000ec2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000ec3a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
649 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000ed4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
650 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000edaf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
651 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000edba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
652 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000eece  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
653 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000ef2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
654 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000ef3a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
655 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000f04d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
656 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000f05c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000f0e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
658 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000f111  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
659 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000f120  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000f192  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000f1f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
662 .debug_info   00022e62  0000000000000000  0000000000000000  0000f1ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
663 .debug_abbrev 00000cb1  0000000000000000  0000000000000000  00032061  2**0
                  CONTENTS, READONLY, DEBUGGING
664 .debug_aranges 00001060  0000000000000000  0000000000000000  00032d12  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
665 .debug_ranges 00001580  0000000000000000  0000000000000000  00033d72  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
666 .debug_macro  00000d27  0000000000000000  0000000000000000  000352f2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
667 .debug_macro  0000061c  0000000000000000  0000000000000000  00036019  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
668 .debug_macro  00000022  0000000000000000  0000000000000000  00036635  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
669 .debug_macro  00000136  0000000000000000  0000000000000000  00036657  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
670 .debug_macro  00000010  0000000000000000  0000000000000000  0003678d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
671 .debug_macro  00000275  0000000000000000  0000000000000000  0003679d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
672 .debug_macro  0000016f  0000000000000000  0000000000000000  00036a12  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
673 .debug_macro  00000016  0000000000000000  0000000000000000  00036b81  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
674 .debug_macro  00000035  0000000000000000  0000000000000000  00036b97  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
675 .debug_macro  00000058  0000000000000000  0000000000000000  00036bcc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
676 .debug_macro  000005b4  0000000000000000  0000000000000000  00036c24  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
677 .debug_macro  0000016d  0000000000000000  0000000000000000  000371d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
678 .debug_macro  00000016  0000000000000000  0000000000000000  00037345  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
679 .debug_macro  0000009a  0000000000000000  0000000000000000  0003735b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
680 .debug_macro  00000016  0000000000000000  0000000000000000  000373f5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
681 .debug_macro  00000018  0000000000000000  0000000000000000  0003740b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
682 .debug_macro  00000032  0000000000000000  0000000000000000  00037423  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
683 .debug_macro  000000c0  0000000000000000  0000000000000000  00037455  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
684 .debug_macro  00000028  0000000000000000  0000000000000000  00037515  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
685 .debug_macro  00000012  0000000000000000  0000000000000000  0003753d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
686 .debug_macro  000000cf  0000000000000000  0000000000000000  0003754f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
687 .debug_macro  0000001c  0000000000000000  0000000000000000  0003761e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
688 .debug_macro  00000018  0000000000000000  0000000000000000  0003763a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
689 .debug_macro  0000006e  0000000000000000  0000000000000000  00037652  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
690 .debug_macro  00000082  0000000000000000  0000000000000000  000376c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
691 .debug_macro  00000012  0000000000000000  0000000000000000  00037742  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
692 .debug_macro  00000012  0000000000000000  0000000000000000  00037754  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
693 .debug_macro  00000016  0000000000000000  0000000000000000  00037766  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
694 .debug_macro  00000035  0000000000000000  0000000000000000  0003777c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
695 .debug_macro  00000052  0000000000000000  0000000000000000  000377b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
696 .debug_macro  0000004c  0000000000000000  0000000000000000  00037803  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
697 .debug_macro  0000001c  0000000000000000  0000000000000000  0003784f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
698 .debug_macro  00000028  0000000000000000  0000000000000000  0003786b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
699 .debug_macro  0000005e  0000000000000000  0000000000000000  00037893  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
700 .debug_macro  000000e2  0000000000000000  0000000000000000  000378f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
701 .debug_macro  00000010  0000000000000000  0000000000000000  000379d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
702 .debug_macro  0000004c  0000000000000000  0000000000000000  000379e3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
703 .debug_macro  00000022  0000000000000000  0000000000000000  00037a2f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
704 .debug_macro  00000068  0000000000000000  0000000000000000  00037a51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_macro  0000007f  0000000000000000  0000000000000000  00037ab9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
706 .debug_macro  0000003a  0000000000000000  0000000000000000  00037b38  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_macro  00000019  0000000000000000  0000000000000000  00037b72  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  00000020  0000000000000000  0000000000000000  00037b8b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  00000022  0000000000000000  0000000000000000  00037bab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  00000010  0000000000000000  0000000000000000  00037bcd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  00000016  0000000000000000  0000000000000000  00037bdd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  00000028  0000000000000000  0000000000000000  00037bf3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000010  0000000000000000  0000000000000000  00037c1b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  00000046  0000000000000000  0000000000000000  00037c2b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  0000001c  0000000000000000  0000000000000000  00037c71  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000020  0000000000000000  0000000000000000  00037c8d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  0000005a  0000000000000000  0000000000000000  00037cad  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  00000010  0000000000000000  0000000000000000  00037d07  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  00000010  0000000000000000  0000000000000000  00037d17  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  000000e4  0000000000000000  0000000000000000  00037d27  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  0000025a  0000000000000000  0000000000000000  00037e0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  0000002d  0000000000000000  0000000000000000  00038065  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000016  0000000000000000  0000000000000000  00038092  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000050  0000000000000000  0000000000000000  000380a8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  00000019  0000000000000000  0000000000000000  000380f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  00000011  0000000000000000  0000000000000000  00038111  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  0000014b  0000000000000000  0000000000000000  00038122  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  0000001e  0000000000000000  0000000000000000  0003826d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  0000001c  0000000000000000  0000000000000000  0003828b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  00000024  0000000000000000  0000000000000000  000382a7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  00000016  0000000000000000  0000000000000000  000382cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  00000018  0000000000000000  0000000000000000  000382e1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  00000019  0000000000000000  0000000000000000  000382f9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  00000058  0000000000000000  0000000000000000  00038312  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  00000016  0000000000000000  0000000000000000  0003836a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  0000001c  0000000000000000  0000000000000000  00038380  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000016  0000000000000000  0000000000000000  0003839c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  00000022  0000000000000000  0000000000000000  000383b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  00000043  0000000000000000  0000000000000000  000383d4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  0000003c  0000000000000000  0000000000000000  00038417  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  00000173  0000000000000000  0000000000000000  00038453  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  00000012  0000000000000000  0000000000000000  000385c6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000010  0000000000000000  0000000000000000  000385d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  00000058  0000000000000000  0000000000000000  000385e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  000000b4  0000000000000000  0000000000000000  00038640  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  00000016  0000000000000000  0000000000000000  000386f4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  00000010  0000000000000000  0000000000000000  0003870a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  00000037  0000000000000000  0000000000000000  0003871a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  00000058  0000000000000000  0000000000000000  00038751  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000011  0000000000000000  0000000000000000  000387a9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  00000016  0000000000000000  0000000000000000  000387ba  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  00000010  0000000000000000  0000000000000000  000387d0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000010  0000000000000000  0000000000000000  000387e0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000022  0000000000000000  0000000000000000  000387f0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000122  0000000000000000  0000000000000000  00038812  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  0000008e  0000000000000000  0000000000000000  00038934  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  00000016  0000000000000000  0000000000000000  000389c2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000058  0000000000000000  0000000000000000  000389d8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  000000fa  0000000000000000  0000000000000000  00038a30  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000030  0000000000000000  0000000000000000  00038b2a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  000000c1  0000000000000000  0000000000000000  00038b5a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  0000004d  0000000000000000  0000000000000000  00038c1b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  00000010  0000000000000000  0000000000000000  00038c68  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  00000019  0000000000000000  0000000000000000  00038c78  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000020  0000000000000000  0000000000000000  00038c91  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000018  0000000000000000  0000000000000000  00038cb1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000023  0000000000000000  0000000000000000  00038cc9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  00000010  0000000000000000  0000000000000000  00038cec  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  00000016  0000000000000000  0000000000000000  00038cfc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  00000076  0000000000000000  0000000000000000  00038d12  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  00000016  0000000000000000  0000000000000000  00038d88  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000025  0000000000000000  0000000000000000  00038d9e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  000000de  0000000000000000  0000000000000000  00038dc3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  0000001c  0000000000000000  0000000000000000  00038ea1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000058  0000000000000000  0000000000000000  00038ebd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000088  0000000000000000  0000000000000000  00038f15  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000076  0000000000000000  0000000000000000  00038f9d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  00000010  0000000000000000  0000000000000000  00039013  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000041  0000000000000000  0000000000000000  00039023  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  000000ee  0000000000000000  0000000000000000  00039064  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  000000fc  0000000000000000  0000000000000000  00039152  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  00000010  0000000000000000  0000000000000000  0003924e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  000000e5  0000000000000000  0000000000000000  0003925e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000012  0000000000000000  0000000000000000  00039343  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  00000016  0000000000000000  0000000000000000  00039355  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  00000022  0000000000000000  0000000000000000  0003936b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  00000016  0000000000000000  0000000000000000  0003938d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  00000028  0000000000000000  0000000000000000  000393a3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000216  0000000000000000  0000000000000000  000393cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000046  0000000000000000  0000000000000000  000395e1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  0000002e  0000000000000000  0000000000000000  00039627  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  00000027  0000000000000000  0000000000000000  00039655  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  0000001f  0000000000000000  0000000000000000  0003967c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000016  0000000000000000  0000000000000000  0003969b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  00000010  0000000000000000  0000000000000000  000396b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000126  0000000000000000  0000000000000000  000396c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_line   00004583  0000000000000000  0000000000000000  000397e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_str    00039ff0  0000000000000000  0000000000000000  0003dd6a  2**0
                  CONTENTS, READONLY, DEBUGGING
799 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  00077d60  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
800 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00077d68  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
801 .comment      0000002e  0000000000000000  0000000000000000  00077d70  2**0
                  CONTENTS, READONLY
802 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00077d9e  2**0
                  CONTENTS, READONLY
803 .eh_frame     00002690  0000000000000000  0000000000000000  00077da0  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhj>:

QByteArray Parser::packVariable(quint8 index, quint8 type, quint32 value){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 83 ec 38          	sub    $0x38,%rsp
     325:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     329:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
     32d:	89 c8                	mov    %ecx,%eax
     32f:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
     333:	88 55 cc             	mov    %dl,-0x34(%rbp)
     336:	88 45 c8             	mov    %al,-0x38(%rbp)
     339:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     340:	00 00 
     342:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     346:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     34c:	48 89 c7             	mov    %rax,%rdi
     34f:	e8 00 00 00 00       	callq  354 <_ZN6Parser12packVariableEhhj+0x38>
    //char counter = 0xFF;

    //result.append(counter);
    result.append(index);
     354:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
     358:	0f be d0             	movsbl %al,%edx
     35b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     35f:	89 d6                	mov    %edx,%esi
     361:	48 89 c7             	mov    %rax,%rdi
     364:	e8 00 00 00 00       	callq  369 <_ZN6Parser12packVariableEhhj+0x4d>
    result.append(type);
     369:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
     36d:	0f be d0             	movsbl %al,%edx
     370:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     374:	89 d6                	mov    %edx,%esi
     376:	48 89 c7             	mov    %rax,%rdi
     379:	e8 00 00 00 00       	callq  37e <_ZN6Parser12packVariableEhhj+0x62>
    result.append(value);
     37e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
     381:	0f be d0             	movsbl %al,%edx
     384:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     388:	89 d6                	mov    %edx,%esi
     38a:	48 89 c7             	mov    %rax,%rdi
     38d:	e8 00 00 00 00       	callq  392 <_ZN6Parser12packVariableEhhj+0x76>

    return result; // return result - ok
     392:	eb 1a                	jmp    3ae <_ZN6Parser12packVariableEhhj+0x92>
     394:	48 89 c3             	mov    %rax,%rbx
     397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     39b:	48 89 c7             	mov    %rax,%rdi
     39e:	e8 00 00 00 00       	callq  3a3 <_ZN6Parser12packVariableEhhj+0x87>
     3a3:	48 89 d8             	mov    %rbx,%rax
     3a6:	48 89 c7             	mov    %rax,%rdi
     3a9:	e8 00 00 00 00       	callq  3ae <_ZN6Parser12packVariableEhhj+0x92>
}
     3ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     3b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     3b6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     3bd:	00 00 
     3bf:	74 05                	je     3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c1:	e8 00 00 00 00       	callq  3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c6:	48 83 c4 38          	add    $0x38,%rsp
     3ca:	5b                   	pop    %rbx
     3cb:	5d                   	pop    %rbp
     3cc:	c3                   	retq   
     3cd:	90                   	nop

00000000000003ce <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     3ce:	55                   	push   %rbp
     3cf:	48 89 e5             	mov    %rsp,%rbp
     3d2:	53                   	push   %rbx
     3d3:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
     3da:	48 89 bd 88 fd ff ff 	mov    %rdi,-0x278(%rbp)
     3e1:	48 89 b5 80 fd ff ff 	mov    %rsi,-0x280(%rbp)
     3e8:	48 89 95 78 fd ff ff 	mov    %rdx,-0x288(%rbp)
     3ef:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     3f6:	00 00 
     3f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     3fc:	31 c0                	xor    %eax,%eax
    QByteArray result;
     3fe:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     405:	48 89 c7             	mov    %rax,%rdi
     408:	e8 00 00 00 00       	callq  40d <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a          headers;
     40d:	48 8d 85 9b fd ff ff 	lea    -0x265(%rbp),%rax
     414:	48 89 c7             	mov    %rax,%rdi
     417:	e8 00 00 00 00       	callq  41c <_ZN6Parser16compileVariablesEP11QStringList+0x4e>

    // копирование из checkVariables

    int varCount    = 0;
     41c:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%rbp)
     423:	00 00 00 
    int index   = 0;
     426:	c7 85 9c fd ff ff 00 	movl   $0x0,-0x264(%rbp)
     42d:	00 00 00 

    VarTypes VT;
     430:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     437:	48 89 c7             	mov    %rax,%rdi
     43a:	e8 00 00 00 00       	callq  43f <_ZN6Parser16compileVariablesEP11QStringList+0x71>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     43f:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     446:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
     44d:	48 89 d6             	mov    %rdx,%rsi
     450:	48 89 c7             	mov    %rax,%rdi
     453:	e8 00 00 00 00       	callq  458 <_ZN6Parser16compileVariablesEP11QStringList+0x8a>
     458:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     45f:	48 8d 8d d0 fd ff ff 	lea    -0x230(%rbp),%rcx
     466:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 46d <_ZN6Parser16compileVariablesEP11QStringList+0x9f>
     46d:	48 89 ce             	mov    %rcx,%rsi
     470:	48 89 c7             	mov    %rax,%rdi
     473:	e8 00 00 00 00       	callq  478 <_ZN6Parser16compileVariablesEP11QStringList+0xaa>
     478:	48 8d b5 e0 fd ff ff 	lea    -0x220(%rbp),%rsi
     47f:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     486:	b9 00 00 00 00       	mov    $0x0,%ecx
     48b:	ba 01 00 00 00       	mov    $0x1,%edx
     490:	48 89 c7             	mov    %rax,%rdi
     493:	e8 00 00 00 00       	callq  498 <_ZN6Parser16compileVariablesEP11QStringList+0xca>
     498:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     49f:	48 89 c7             	mov    %rax,%rdi
     4a2:	e8 00 00 00 00       	callq  4a7 <_ZN6Parser16compileVariablesEP11QStringList+0xd9>
     4a7:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     4ae:	48 89 c7             	mov    %rax,%rdi
     4b1:	e8 00 00 00 00       	callq  4b6 <_ZN6Parser16compileVariablesEP11QStringList+0xe8>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     4b6:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     4bd:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
     4c4:	48 89 d6             	mov    %rdx,%rsi
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser16compileVariablesEP11QStringList+0x101>
     4cf:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     4d6:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     4dd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4e4 <_ZN6Parser16compileVariablesEP11QStringList+0x116>
     4e4:	48 89 ce             	mov    %rcx,%rsi
     4e7:	48 89 c7             	mov    %rax,%rdi
     4ea:	e8 00 00 00 00       	callq  4ef <_ZN6Parser16compileVariablesEP11QStringList+0x121>
     4ef:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     4f6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     4fd:	b9 00 00 00 00       	mov    $0x0,%ecx
     502:	ba 01 00 00 00       	mov    $0x1,%edx
     507:	48 89 c7             	mov    %rax,%rdi
     50a:	e8 00 00 00 00       	callq  50f <_ZN6Parser16compileVariablesEP11QStringList+0x141>
     50f:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     516:	48 89 c7             	mov    %rax,%rdi
     519:	e8 00 00 00 00       	callq  51e <_ZN6Parser16compileVariablesEP11QStringList+0x150>
     51e:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     525:	48 89 c7             	mov    %rax,%rdi
     528:	e8 00 00 00 00       	callq  52d <_ZN6Parser16compileVariablesEP11QStringList+0x15f>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     52d:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     534:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 53b <_ZN6Parser16compileVariablesEP11QStringList+0x16d>
     53b:	48 89 c7             	mov    %rax,%rdi
     53e:	e8 00 00 00 00       	callq  543 <_ZN6Parser16compileVariablesEP11QStringList+0x175>
     543:	48 8d b5 30 fe ff ff 	lea    -0x1d0(%rbp),%rsi
     54a:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     551:	b9 00 00 00 00       	mov    $0x0,%ecx
     556:	ba 01 00 00 00       	mov    $0x1,%edx
     55b:	48 89 c7             	mov    %rax,%rdi
     55e:	e8 00 00 00 00       	callq  563 <_ZN6Parser16compileVariablesEP11QStringList+0x195>
     563:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     56a:	48 89 c7             	mov    %rax,%rdi
     56d:	e8 00 00 00 00       	callq  572 <_ZN6Parser16compileVariablesEP11QStringList+0x1a4>
    QRegExp erxVarName("\\w+");                              // имя
     572:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     579:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 580 <_ZN6Parser16compileVariablesEP11QStringList+0x1b2>
     580:	48 89 c7             	mov    %rax,%rdi
     583:	e8 00 00 00 00       	callq  588 <_ZN6Parser16compileVariablesEP11QStringList+0x1ba>
     588:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
     58f:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     596:	b9 00 00 00 00       	mov    $0x0,%ecx
     59b:	ba 01 00 00 00       	mov    $0x1,%edx
     5a0:	48 89 c7             	mov    %rax,%rdi
     5a3:	e8 00 00 00 00       	callq  5a8 <_ZN6Parser16compileVariablesEP11QStringList+0x1da>
     5a8:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     5af:	48 89 c7             	mov    %rax,%rdi
     5b2:	e8 00 00 00 00       	callq  5b7 <_ZN6Parser16compileVariablesEP11QStringList+0x1e9>

    QStringList types;
     5b7:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     5be:	48 89 c7             	mov    %rax,%rdi
     5c1:	e8 00 00 00 00       	callq  5c6 <_ZN6Parser16compileVariablesEP11QStringList+0x1f8>
    QStringList list;
     5c6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     5cd:	48 89 c7             	mov    %rax,%rdi
     5d0:	e8 00 00 00 00       	callq  5d5 <_ZN6Parser16compileVariablesEP11QStringList+0x207>
    QStringList vars;
     5d5:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     5dc:	48 89 c7             	mov    %rax,%rdi
     5df:	e8 00 00 00 00       	callq  5e4 <_ZN6Parser16compileVariablesEP11QStringList+0x216>

    int pos = 0;
     5e4:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%rbp)
     5eb:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     5ee:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     5f5:	48 89 c7             	mov    %rax,%rdi
     5f8:	e8 00 00 00 00       	callq  5fd <_ZN6Parser16compileVariablesEP11QStringList+0x22f>
    for(sit = str->begin(); sit != str->end(); ++sit){
     5fd:	48 8b 95 78 fd ff ff 	mov    -0x288(%rbp),%rdx
     604:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     60b:	48 89 d6             	mov    %rdx,%rsi
     60e:	48 89 c7             	mov    %rax,%rdi
     611:	e8 00 00 00 00       	callq  616 <_ZN6Parser16compileVariablesEP11QStringList+0x248>
     616:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
     61d:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
     624:	48 8b 95 78 fd ff ff 	mov    -0x288(%rbp),%rdx
     62b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     632:	48 89 d6             	mov    %rdx,%rsi
     635:	48 89 c7             	mov    %rax,%rdi
     638:	e8 00 00 00 00       	callq  63d <_ZN6Parser16compileVariablesEP11QStringList+0x26f>
     63d:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     644:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     64b:	48 89 d6             	mov    %rdx,%rsi
     64e:	48 89 c7             	mov    %rax,%rdi
     651:	e8 00 00 00 00       	callq  656 <_ZN6Parser16compileVariablesEP11QStringList+0x288>
     656:	84 c0                	test   %al,%al
     658:	0f 84 a0 01 00 00    	je     7fe <_ZN6Parser16compileVariablesEP11QStringList+0x430>
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     65e:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     665:	48 89 c7             	mov    %rax,%rdi
     668:	e8 00 00 00 00       	callq  66d <_ZN6Parser16compileVariablesEP11QStringList+0x29f>
     66d:	48 89 c6             	mov    %rax,%rsi
     670:	8b 95 a0 fd ff ff    	mov    -0x260(%rbp),%edx
     676:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     67d:	b9 00 00 00 00       	mov    $0x0,%ecx
     682:	48 89 c7             	mov    %rax,%rdi
     685:	e8 00 00 00 00       	callq  68a <_ZN6Parser16compileVariablesEP11QStringList+0x2bc>
     68a:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
     690:	83 bd a0 fd ff ff ff 	cmpl   $0xffffffff,-0x260(%rbp)
     697:	0f 95 c0             	setne  %al
     69a:	84 c0                	test   %al,%al
     69c:	0f 84 48 01 00 00    	je     7ea <_ZN6Parser16compileVariablesEP11QStringList+0x41c>
             types << erx.cap(1);
     6a2:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6a9:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     6b0:	ba 01 00 00 00       	mov    $0x1,%edx
     6b5:	48 89 ce             	mov    %rcx,%rsi
     6b8:	48 89 c7             	mov    %rax,%rdi
     6bb:	e8 00 00 00 00       	callq  6c0 <_ZN6Parser16compileVariablesEP11QStringList+0x2f2>
     6c0:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
     6c7:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     6ce:	48 89 d6             	mov    %rdx,%rsi
     6d1:	48 89 c7             	mov    %rax,%rdi
     6d4:	e8 00 00 00 00       	callq  6d9 <_ZN6Parser16compileVariablesEP11QStringList+0x30b>
     6d9:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6e0:	48 89 c7             	mov    %rax,%rdi
     6e3:	e8 00 00 00 00       	callq  6e8 <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
             list << erx.cap(2);
     6e8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     6ef:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     6f6:	ba 02 00 00 00       	mov    $0x2,%edx
     6fb:	48 89 ce             	mov    %rcx,%rsi
     6fe:	48 89 c7             	mov    %rax,%rdi
     701:	e8 00 00 00 00       	callq  706 <_ZN6Parser16compileVariablesEP11QStringList+0x338>
     706:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
     70d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     714:	48 89 d6             	mov    %rdx,%rsi
     717:	48 89 c7             	mov    %rax,%rdi
     71a:	e8 00 00 00 00       	callq  71f <_ZN6Parser16compileVariablesEP11QStringList+0x351>
     71f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     726:	48 89 c7             	mov    %rax,%rdi
     729:	e8 00 00 00 00       	callq  72e <_ZN6Parser16compileVariablesEP11QStringList+0x360>
             pos += erx.matchedLength();
     72e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     735:	48 89 c7             	mov    %rax,%rdi
     738:	e8 00 00 00 00       	callq  73d <_ZN6Parser16compileVariablesEP11QStringList+0x36f>
     73d:	01 85 a0 fd ff ff    	add    %eax,-0x260(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     743:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     74a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 751 <_ZN6Parser16compileVariablesEP11QStringList+0x383>
     751:	48 89 c7             	mov    %rax,%rdi
     754:	e8 00 00 00 00       	callq  759 <_ZN6Parser16compileVariablesEP11QStringList+0x38b>
     759:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     760:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     767:	ba 02 00 00 00       	mov    $0x2,%edx
     76c:	48 89 ce             	mov    %rcx,%rsi
     76f:	48 89 c7             	mov    %rax,%rdi
     772:	e8 00 00 00 00       	callq  777 <_ZN6Parser16compileVariablesEP11QStringList+0x3a9>
     777:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     77e:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     785:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
     78c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     792:	b9 00 00 00 00       	mov    $0x0,%ecx
     797:	48 89 c7             	mov    %rax,%rdi
     79a:	e8 00 00 00 00       	callq  79f <_ZN6Parser16compileVariablesEP11QStringList+0x3d1>
     79f:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     7a6:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     7ad:	48 89 d6             	mov    %rdx,%rsi
     7b0:	48 89 c7             	mov    %rax,%rdi
     7b3:	e8 00 00 00 00       	callq  7b8 <_ZN6Parser16compileVariablesEP11QStringList+0x3ea>
     7b8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     7bf:	48 89 c7             	mov    %rax,%rdi
     7c2:	e8 00 00 00 00       	callq  7c7 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     7c7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     7ce:	48 89 c7             	mov    %rax,%rdi
     7d1:	e8 00 00 00 00       	callq  7d6 <_ZN6Parser16compileVariablesEP11QStringList+0x408>
     7d6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7dd:	48 89 c7             	mov    %rax,%rdi
     7e0:	e8 00 00 00 00       	callq  7e5 <_ZN6Parser16compileVariablesEP11QStringList+0x417>
    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     7e5:	e9 74 fe ff ff       	jmpq   65e <_ZN6Parser16compileVariablesEP11QStringList+0x290>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
     7ea:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     7f1:	48 89 c7             	mov    %rax,%rdi
     7f4:	e8 00 00 00 00       	callq  7f9 <_ZN6Parser16compileVariablesEP11QStringList+0x42b>
     7f9:	e9 26 fe ff ff       	jmpq   624 <_ZN6Parser16compileVariablesEP11QStringList+0x256>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     7fe:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     805:	48 89 c7             	mov    %rax,%rdi
     808:	e8 00 00 00 00       	callq  80d <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
    QString name, type, value;
     80d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     814:	48 89 c7             	mov    %rax,%rdi
     817:	e8 00 00 00 00       	callq  81c <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
     81c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     823:	48 89 c7             	mov    %rax,%rdi
     826:	e8 00 00 00 00       	callq  82b <_ZN6Parser16compileVariablesEP11QStringList+0x45d>
     82b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     832:	48 89 c7             	mov    %rax,%rdi
     835:	e8 00 00 00 00       	callq  83a <_ZN6Parser16compileVariablesEP11QStringList+0x46c>

    for(it=vars.begin(); it!=vars.end(); ++it){
     83a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     841:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
     848:	48 89 d6             	mov    %rdx,%rsi
     84b:	48 89 c7             	mov    %rax,%rdi
     84e:	e8 00 00 00 00       	callq  853 <_ZN6Parser16compileVariablesEP11QStringList+0x485>
     853:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     85a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
     861:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     868:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
     86f:	48 89 d6             	mov    %rdx,%rsi
     872:	48 89 c7             	mov    %rax,%rdi
     875:	e8 00 00 00 00       	callq  87a <_ZN6Parser16compileVariablesEP11QStringList+0x4ac>
     87a:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     881:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     888:	48 89 d6             	mov    %rdx,%rsi
     88b:	48 89 c7             	mov    %rax,%rdi
     88e:	e8 00 00 00 00       	callq  893 <_ZN6Parser16compileVariablesEP11QStringList+0x4c5>
     893:	84 c0                	test   %al,%al
     895:	0f 84 83 03 00 00    	je     c1e <_ZN6Parser16compileVariablesEP11QStringList+0x850>
        QString all = *it;
     89b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8a2:	48 89 c7             	mov    %rax,%rdi
     8a5:	e8 00 00 00 00       	callq  8aa <_ZN6Parser16compileVariablesEP11QStringList+0x4dc>
     8aa:	48 89 c2             	mov    %rax,%rdx
     8ad:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     8b4:	48 89 d6             	mov    %rdx,%rsi
     8b7:	48 89 c7             	mov    %rax,%rdi
     8ba:	e8 00 00 00 00       	callq  8bf <_ZN6Parser16compileVariablesEP11QStringList+0x4f1>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     8bf:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8c6:	48 89 c7             	mov    %rax,%rdi
     8c9:	e8 00 00 00 00       	callq  8ce <_ZN6Parser16compileVariablesEP11QStringList+0x500>
     8ce:	48 89 c6             	mov    %rax,%rsi
     8d1:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     8d8:	b9 00 00 00 00       	mov    $0x0,%ecx
     8dd:	ba 00 00 00 00       	mov    $0x0,%edx
     8e2:	48 89 c7             	mov    %rax,%rdi
     8e5:	e8 00 00 00 00       	callq  8ea <_ZN6Parser16compileVariablesEP11QStringList+0x51c>
     8ea:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)
        // unused
        //int indexVarName = erxVarName.indexIn(*it);
        //int countRgPort  = erx_rgPort.captureCount();
        //int countVarName = erxVarName.captureCount();

        int iType = 4;
     8f0:	c7 85 a4 fd ff ff 04 	movl   $0x4,-0x25c(%rbp)
     8f7:	00 00 00 

        if(indexRgPort>=0)
     8fa:	83 bd ac fd ff ff 00 	cmpl   $0x0,-0x254(%rbp)
     901:	0f 88 0d 02 00 00    	js     b14 <_ZN6Parser16compileVariablesEP11QStringList+0x746>
        {
            name  = erx_rgPort.cap(1);
     907:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     90e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     915:	ba 01 00 00 00       	mov    $0x1,%edx
     91a:	48 89 ce             	mov    %rcx,%rsi
     91d:	48 89 c7             	mov    %rax,%rdi
     920:	e8 00 00 00 00       	callq  925 <_ZN6Parser16compileVariablesEP11QStringList+0x557>
     925:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
     92c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     933:	48 89 d6             	mov    %rdx,%rsi
     936:	48 89 c7             	mov    %rax,%rdi
     939:	e8 00 00 00 00       	callq  93e <_ZN6Parser16compileVariablesEP11QStringList+0x570>
     93e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     945:	48 89 c7             	mov    %rax,%rdi
     948:	e8 00 00 00 00       	callq  94d <_ZN6Parser16compileVariablesEP11QStringList+0x57f>
            type  = erx_rgPort.cap(2); // nothing, register, port
     94d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     951:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     958:	ba 02 00 00 00       	mov    $0x2,%edx
     95d:	48 89 ce             	mov    %rcx,%rsi
     960:	48 89 c7             	mov    %rax,%rdi
     963:	e8 00 00 00 00       	callq  968 <_ZN6Parser16compileVariablesEP11QStringList+0x59a>
     968:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
     96c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     973:	48 89 d6             	mov    %rdx,%rsi
     976:	48 89 c7             	mov    %rax,%rdi
     979:	e8 00 00 00 00       	callq  97e <_ZN6Parser16compileVariablesEP11QStringList+0x5b0>
     97e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     982:	48 89 c7             	mov    %rax,%rdi
     985:	e8 00 00 00 00       	callq  98a <_ZN6Parser16compileVariablesEP11QStringList+0x5bc>
            value = erx_rgPort.cap(3);
     98a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     98e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     995:	ba 03 00 00 00       	mov    $0x3,%edx
     99a:	48 89 ce             	mov    %rcx,%rsi
     99d:	48 89 c7             	mov    %rax,%rdi
     9a0:	e8 00 00 00 00       	callq  9a5 <_ZN6Parser16compileVariablesEP11QStringList+0x5d7>
     9a5:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
     9a9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9b0:	48 89 d6             	mov    %rdx,%rsi
     9b3:	48 89 c7             	mov    %rax,%rdi
     9b6:	e8 00 00 00 00       	callq  9bb <_ZN6Parser16compileVariablesEP11QStringList+0x5ed>
     9bb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     9bf:	48 89 c7             	mov    %rax,%rdi
     9c2:	e8 00 00 00 00       	callq  9c7 <_ZN6Parser16compileVariablesEP11QStringList+0x5f9>

            this->varMap.insert(name, value + " (" + type + ")");
     9c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     9cb:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
     9d2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 9d9 <_ZN6Parser16compileVariablesEP11QStringList+0x60b>
     9d9:	48 89 ce             	mov    %rcx,%rsi
     9dc:	48 89 c7             	mov    %rax,%rdi
     9df:	e8 00 00 00 00       	callq  9e4 <_ZN6Parser16compileVariablesEP11QStringList+0x616>
     9e4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     9e8:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     9ef:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     9f3:	48 89 ce             	mov    %rcx,%rsi
     9f6:	48 89 c7             	mov    %rax,%rdi
     9f9:	e8 00 00 00 00       	callq  9fe <_ZN6Parser16compileVariablesEP11QStringList+0x630>
     9fe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a02:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     a06:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a0d <_ZN6Parser16compileVariablesEP11QStringList+0x63f>
     a0d:	48 89 ce             	mov    %rcx,%rsi
     a10:	48 89 c7             	mov    %rax,%rdi
     a13:	e8 00 00 00 00       	callq  a18 <_ZN6Parser16compileVariablesEP11QStringList+0x64a>
     a18:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     a1f:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     a26:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a2a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     a31:	48 89 c6             	mov    %rax,%rsi
     a34:	48 89 cf             	mov    %rcx,%rdi
     a37:	e8 00 00 00 00       	callq  a3c <_ZN6Parser16compileVariablesEP11QStringList+0x66e>
     a3c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a40:	48 89 c7             	mov    %rax,%rdi
     a43:	e8 00 00 00 00       	callq  a48 <_ZN6Parser16compileVariablesEP11QStringList+0x67a>
     a48:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a4c:	48 89 c7             	mov    %rax,%rdi
     a4f:	e8 00 00 00 00       	callq  a54 <_ZN6Parser16compileVariablesEP11QStringList+0x686>
     a54:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     a58:	48 89 c7             	mov    %rax,%rdi
     a5b:	e8 00 00 00 00       	callq  a60 <_ZN6Parser16compileVariablesEP11QStringList+0x692>

            if(type=="rg")      iType = 40;
     a60:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     a67:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a6e <_ZN6Parser16compileVariablesEP11QStringList+0x6a0>
     a6e:	48 89 c7             	mov    %rax,%rdi
     a71:	e8 00 00 00 00       	callq  a76 <_ZN6Parser16compileVariablesEP11QStringList+0x6a8>
     a76:	84 c0                	test   %al,%al
     a78:	74 0a                	je     a84 <_ZN6Parser16compileVariablesEP11QStringList+0x6b6>
     a7a:	c7 85 a4 fd ff ff 28 	movl   $0x28,-0x25c(%rbp)
     a81:	00 00 00 
            if(type=="port")    iType = 80;
     a84:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     a8b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a92 <_ZN6Parser16compileVariablesEP11QStringList+0x6c4>
     a92:	48 89 c7             	mov    %rax,%rdi
     a95:	e8 00 00 00 00       	callq  a9a <_ZN6Parser16compileVariablesEP11QStringList+0x6cc>
     a9a:	84 c0                	test   %al,%al
     a9c:	74 0a                	je     aa8 <_ZN6Parser16compileVariablesEP11QStringList+0x6da>
     a9e:	c7 85 a4 fd ff ff 50 	movl   $0x50,-0x25c(%rbp)
     aa5:	00 00 00 

            index++;
     aa8:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
     aaf:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     ab5:	88 45 e0             	mov    %al,-0x20(%rbp)
     ab8:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     abf:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     ac6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     aca:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     ad1:	48 89 c6             	mov    %rax,%rsi
     ad4:	48 89 cf             	mov    %rcx,%rdi
     ad7:	e8 00 00 00 00       	callq  adc <_ZN6Parser16compileVariablesEP11QStringList+0x70e>
            this->varTypes.insert(index, iType);
     adc:	8b 85 a4 fd ff ff    	mov    -0x25c(%rbp),%eax
     ae2:	88 45 e0             	mov    %al,-0x20(%rbp)
     ae5:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     aeb:	88 45 d0             	mov    %al,-0x30(%rbp)
     aee:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     af5:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     afc:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     b00:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b04:	48 89 c6             	mov    %rax,%rsi
     b07:	48 89 cf             	mov    %rcx,%rdi
     b0a:	e8 00 00 00 00       	callq  b0f <_ZN6Parser16compileVariablesEP11QStringList+0x741>
     b0f:	e9 e7 00 00 00       	jmpq   bfb <_ZN6Parser16compileVariablesEP11QStringList+0x82d>

        }else
            {
                index++;
     b14:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
                name = erxVarName.cap(0);
     b1b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b1f:	48 8d 8d 40 fe ff ff 	lea    -0x1c0(%rbp),%rcx
     b26:	ba 00 00 00 00       	mov    $0x0,%edx
     b2b:	48 89 ce             	mov    %rcx,%rsi
     b2e:	48 89 c7             	mov    %rax,%rdi
     b31:	e8 00 00 00 00       	callq  b36 <_ZN6Parser16compileVariablesEP11QStringList+0x768>
     b36:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     b3a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     b41:	48 89 d6             	mov    %rdx,%rsi
     b44:	48 89 c7             	mov    %rax,%rdi
     b47:	e8 00 00 00 00       	callq  b4c <_ZN6Parser16compileVariablesEP11QStringList+0x77e>
     b4c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b50:	48 89 c7             	mov    %rax,%rdi
     b53:	e8 00 00 00 00       	callq  b58 <_ZN6Parser16compileVariablesEP11QStringList+0x78a>
                this->varMap.insert(name, "");
     b58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b5c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b63 <_ZN6Parser16compileVariablesEP11QStringList+0x795>
     b63:	48 89 c7             	mov    %rax,%rdi
     b66:	e8 00 00 00 00       	callq  b6b <_ZN6Parser16compileVariablesEP11QStringList+0x79d>
     b6b:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     b72:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     b79:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     b7d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     b84:	48 89 c6             	mov    %rax,%rsi
     b87:	48 89 cf             	mov    %rcx,%rdi
     b8a:	e8 00 00 00 00       	callq  b8f <_ZN6Parser16compileVariablesEP11QStringList+0x7c1>
     b8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b93:	48 89 c7             	mov    %rax,%rdi
     b96:	e8 00 00 00 00       	callq  b9b <_ZN6Parser16compileVariablesEP11QStringList+0x7cd>

                this->varIndexes.insert(name, index);
     b9b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     ba1:	88 45 e0             	mov    %al,-0x20(%rbp)
     ba4:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     bab:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     bb2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     bb6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     bbd:	48 89 c6             	mov    %rax,%rsi
     bc0:	48 89 cf             	mov    %rcx,%rdi
     bc3:	e8 00 00 00 00       	callq  bc8 <_ZN6Parser16compileVariablesEP11QStringList+0x7fa>
                this->varTypes.insert(index, iType);
     bc8:	8b 85 a4 fd ff ff    	mov    -0x25c(%rbp),%eax
     bce:	88 45 e0             	mov    %al,-0x20(%rbp)
     bd1:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     bd7:	88 45 d0             	mov    %al,-0x30(%rbp)
     bda:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     be1:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     be8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     bec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     bf0:	48 89 c6             	mov    %rax,%rsi
     bf3:	48 89 cf             	mov    %rcx,%rdi
     bf6:	e8 00 00 00 00       	callq  bfb <_ZN6Parser16compileVariablesEP11QStringList+0x82d>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     bfb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     c02:	48 89 c7             	mov    %rax,%rdi
     c05:	e8 00 00 00 00       	callq  c0a <_ZN6Parser16compileVariablesEP11QStringList+0x83c>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
     c0a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     c11:	48 89 c7             	mov    %rax,%rdi
     c14:	e8 00 00 00 00       	callq  c19 <_ZN6Parser16compileVariablesEP11QStringList+0x84b>
     c19:	e9 43 fc ff ff       	jmpq   861 <_ZN6Parser16compileVariablesEP11QStringList+0x493>
            }

    }


    return result;
     c1e:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     c1f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     c26:	48 89 c7             	mov    %rax,%rdi
     c29:	e8 00 00 00 00       	callq  c2e <_ZN6Parser16compileVariablesEP11QStringList+0x860>
     c2e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     c35:	48 89 c7             	mov    %rax,%rdi
     c38:	e8 00 00 00 00       	callq  c3d <_ZN6Parser16compileVariablesEP11QStringList+0x86f>
     c3d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     c44:	48 89 c7             	mov    %rax,%rdi
     c47:	e8 00 00 00 00       	callq  c4c <_ZN6Parser16compileVariablesEP11QStringList+0x87e>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     c4c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     c53:	48 89 c7             	mov    %rax,%rdi
     c56:	e8 00 00 00 00       	callq  c5b <_ZN6Parser16compileVariablesEP11QStringList+0x88d>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c5b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     c62:	48 89 c7             	mov    %rax,%rdi
     c65:	e8 00 00 00 00       	callq  c6a <_ZN6Parser16compileVariablesEP11QStringList+0x89c>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c6a:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     c71:	48 89 c7             	mov    %rax,%rdi
     c74:	e8 00 00 00 00       	callq  c79 <_ZN6Parser16compileVariablesEP11QStringList+0x8ab>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     c79:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     c80:	48 89 c7             	mov    %rax,%rdi
     c83:	e8 00 00 00 00       	callq  c88 <_ZN6Parser16compileVariablesEP11QStringList+0x8ba>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     c88:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     c8f:	48 89 c7             	mov    %rax,%rdi
     c92:	e8 00 00 00 00       	callq  c97 <_ZN6Parser16compileVariablesEP11QStringList+0x8c9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     c97:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c9e:	48 89 c7             	mov    %rax,%rdi
     ca1:	e8 00 00 00 00       	callq  ca6 <_ZN6Parser16compileVariablesEP11QStringList+0x8d8>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     ca6:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     cad:	48 89 c7             	mov    %rax,%rdi
     cb0:	e8 00 00 00 00       	callq  cb5 <_ZN6Parser16compileVariablesEP11QStringList+0x8e7>
    // копирование из checkVariables

    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
     cb5:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     cbc:	48 89 c7             	mov    %rax,%rdi
     cbf:	e8 00 00 00 00       	callq  cc4 <_ZN6Parser16compileVariablesEP11QStringList+0x8f6>
            }

    }


    return result;
     cc4:	e9 0d 03 00 00       	jmpq   fd6 <_ZN6Parser16compileVariablesEP11QStringList+0xc08>
     cc9:	48 89 c3             	mov    %rax,%rbx
     ccc:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     cd3:	48 89 c7             	mov    %rax,%rdi
     cd6:	e8 00 00 00 00       	callq  cdb <_ZN6Parser16compileVariablesEP11QStringList+0x90d>
     cdb:	eb 17                	jmp    cf4 <_ZN6Parser16compileVariablesEP11QStringList+0x926>
     cdd:	48 89 c3             	mov    %rax,%rbx
     ce0:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     ce7:	48 89 c7             	mov    %rax,%rdi
     cea:	e8 00 00 00 00       	callq  cef <_ZN6Parser16compileVariablesEP11QStringList+0x921>
     cef:	eb 03                	jmp    cf4 <_ZN6Parser16compileVariablesEP11QStringList+0x926>
     cf1:	48 89 c3             	mov    %rax,%rbx
     cf4:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     cfb:	48 89 c7             	mov    %rax,%rdi
     cfe:	e8 00 00 00 00       	callq  d03 <_ZN6Parser16compileVariablesEP11QStringList+0x935>
     d03:	e9 a0 02 00 00       	jmpq   fa8 <_ZN6Parser16compileVariablesEP11QStringList+0xbda>
     d08:	48 89 c3             	mov    %rax,%rbx
     d0b:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     d12:	48 89 c7             	mov    %rax,%rdi
     d15:	e8 00 00 00 00       	callq  d1a <_ZN6Parser16compileVariablesEP11QStringList+0x94c>
     d1a:	e9 89 02 00 00       	jmpq   fa8 <_ZN6Parser16compileVariablesEP11QStringList+0xbda>
     d1f:	48 89 c3             	mov    %rax,%rbx
     d22:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     d29:	48 89 c7             	mov    %rax,%rdi
     d2c:	e8 00 00 00 00       	callq  d31 <_ZN6Parser16compileVariablesEP11QStringList+0x963>
     d31:	eb 17                	jmp    d4a <_ZN6Parser16compileVariablesEP11QStringList+0x97c>
     d33:	48 89 c3             	mov    %rax,%rbx
     d36:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     d3d:	48 89 c7             	mov    %rax,%rdi
     d40:	e8 00 00 00 00       	callq  d45 <_ZN6Parser16compileVariablesEP11QStringList+0x977>
     d45:	eb 03                	jmp    d4a <_ZN6Parser16compileVariablesEP11QStringList+0x97c>
     d47:	48 89 c3             	mov    %rax,%rbx
     d4a:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     d51:	48 89 c7             	mov    %rax,%rdi
     d54:	e8 00 00 00 00       	callq  d59 <_ZN6Parser16compileVariablesEP11QStringList+0x98b>
     d59:	e9 36 02 00 00       	jmpq   f94 <_ZN6Parser16compileVariablesEP11QStringList+0xbc6>
     d5e:	48 89 c3             	mov    %rax,%rbx
     d61:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     d68:	48 89 c7             	mov    %rax,%rdi
     d6b:	e8 00 00 00 00       	callq  d70 <_ZN6Parser16compileVariablesEP11QStringList+0x9a2>
     d70:	e9 1f 02 00 00       	jmpq   f94 <_ZN6Parser16compileVariablesEP11QStringList+0xbc6>
     d75:	48 89 c3             	mov    %rax,%rbx
     d78:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     d7f:	48 89 c7             	mov    %rax,%rdi
     d82:	e8 00 00 00 00       	callq  d87 <_ZN6Parser16compileVariablesEP11QStringList+0x9b9>
     d87:	e9 f4 01 00 00       	jmpq   f80 <_ZN6Parser16compileVariablesEP11QStringList+0xbb2>
     d8c:	48 89 c3             	mov    %rax,%rbx
     d8f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d96:	48 89 c7             	mov    %rax,%rdi
     d99:	e8 00 00 00 00       	callq  d9e <_ZN6Parser16compileVariablesEP11QStringList+0x9d0>
     d9e:	e9 dd 01 00 00       	jmpq   f80 <_ZN6Parser16compileVariablesEP11QStringList+0xbb2>
     da3:	48 89 c3             	mov    %rax,%rbx
     da6:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     dad:	48 89 c7             	mov    %rax,%rdi
     db0:	e8 00 00 00 00       	callq  db5 <_ZN6Parser16compileVariablesEP11QStringList+0x9e7>
     db5:	e9 b2 01 00 00       	jmpq   f6c <_ZN6Parser16compileVariablesEP11QStringList+0xb9e>
     dba:	48 89 c3             	mov    %rax,%rbx
     dbd:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     dc4:	48 89 c7             	mov    %rax,%rdi
     dc7:	e8 00 00 00 00       	callq  dcc <_ZN6Parser16compileVariablesEP11QStringList+0x9fe>
     dcc:	e9 9b 01 00 00       	jmpq   f6c <_ZN6Parser16compileVariablesEP11QStringList+0xb9e>
     dd1:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     dd4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     ddb:	48 89 c7             	mov    %rax,%rdi
     dde:	e8 00 00 00 00       	callq  de3 <_ZN6Parser16compileVariablesEP11QStringList+0xa15>
     de3:	e9 34 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xb4e>
     de8:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     deb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     df2:	48 89 c7             	mov    %rax,%rdi
     df5:	e8 00 00 00 00       	callq  dfa <_ZN6Parser16compileVariablesEP11QStringList+0xa2c>
     dfa:	e9 1d 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xb4e>
     dff:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     e02:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     e09:	48 89 c7             	mov    %rax,%rdi
     e0c:	e8 00 00 00 00       	callq  e11 <_ZN6Parser16compileVariablesEP11QStringList+0xa43>
     e11:	eb 03                	jmp    e16 <_ZN6Parser16compileVariablesEP11QStringList+0xa48>
     e13:	48 89 c3             	mov    %rax,%rbx
     e16:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     e1d:	48 89 c7             	mov    %rax,%rdi
     e20:	e8 00 00 00 00       	callq  e25 <_ZN6Parser16compileVariablesEP11QStringList+0xa57>
     e25:	eb 03                	jmp    e2a <_ZN6Parser16compileVariablesEP11QStringList+0xa5c>
     e27:	48 89 c3             	mov    %rax,%rbx
     e2a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     e31:	48 89 c7             	mov    %rax,%rdi
     e34:	e8 00 00 00 00       	callq  e39 <_ZN6Parser16compileVariablesEP11QStringList+0xa6b>
     e39:	e9 de 00 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xb4e>
     e3e:	48 89 c3             	mov    %rax,%rbx

        int iType = 4;

        if(indexRgPort>=0)
        {
            name  = erx_rgPort.cap(1);
     e41:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     e48:	48 89 c7             	mov    %rax,%rdi
     e4b:	e8 00 00 00 00       	callq  e50 <_ZN6Parser16compileVariablesEP11QStringList+0xa82>
     e50:	eb 7a                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     e52:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
     e55:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     e59:	48 89 c7             	mov    %rax,%rdi
     e5c:	e8 00 00 00 00       	callq  e61 <_ZN6Parser16compileVariablesEP11QStringList+0xa93>
     e61:	eb 69                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     e63:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
     e66:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     e6a:	48 89 c7             	mov    %rax,%rdi
     e6d:	e8 00 00 00 00       	callq  e72 <_ZN6Parser16compileVariablesEP11QStringList+0xaa4>
     e72:	eb 58                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     e74:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
     e77:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e7b:	48 89 c7             	mov    %rax,%rdi
     e7e:	e8 00 00 00 00       	callq  e83 <_ZN6Parser16compileVariablesEP11QStringList+0xab5>
     e83:	eb 03                	jmp    e88 <_ZN6Parser16compileVariablesEP11QStringList+0xaba>
     e85:	48 89 c3             	mov    %rax,%rbx
     e88:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     e8c:	48 89 c7             	mov    %rax,%rdi
     e8f:	e8 00 00 00 00       	callq  e94 <_ZN6Parser16compileVariablesEP11QStringList+0xac6>
     e94:	eb 03                	jmp    e99 <_ZN6Parser16compileVariablesEP11QStringList+0xacb>
     e96:	48 89 c3             	mov    %rax,%rbx
     e99:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     e9d:	48 89 c7             	mov    %rax,%rdi
     ea0:	e8 00 00 00 00       	callq  ea5 <_ZN6Parser16compileVariablesEP11QStringList+0xad7>
     ea5:	eb 25                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     ea7:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
     eaa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     eae:	48 89 c7             	mov    %rax,%rdi
     eb1:	e8 00 00 00 00       	callq  eb6 <_ZN6Parser16compileVariablesEP11QStringList+0xae8>
     eb6:	eb 14                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     eb8:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
     ebb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ebf:	48 89 c7             	mov    %rax,%rdi
     ec2:	e8 00 00 00 00       	callq  ec7 <_ZN6Parser16compileVariablesEP11QStringList+0xaf9>
     ec7:	eb 03                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xafe>
     ec9:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     ecc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     ed3:	48 89 c7             	mov    %rax,%rdi
     ed6:	e8 00 00 00 00       	callq  edb <_ZN6Parser16compileVariablesEP11QStringList+0xb0d>
     edb:	eb 03                	jmp    ee0 <_ZN6Parser16compileVariablesEP11QStringList+0xb12>
     edd:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     ee0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     ee7:	48 89 c7             	mov    %rax,%rdi
     eea:	e8 00 00 00 00       	callq  eef <_ZN6Parser16compileVariablesEP11QStringList+0xb21>
     eef:	eb 03                	jmp    ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xb26>
     ef1:	48 89 c3             	mov    %rax,%rbx
     ef4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     efb:	48 89 c7             	mov    %rax,%rdi
     efe:	e8 00 00 00 00       	callq  f03 <_ZN6Parser16compileVariablesEP11QStringList+0xb35>
     f03:	eb 03                	jmp    f08 <_ZN6Parser16compileVariablesEP11QStringList+0xb3a>
     f05:	48 89 c3             	mov    %rax,%rbx
     f08:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     f0f:	48 89 c7             	mov    %rax,%rdi
     f12:	e8 00 00 00 00       	callq  f17 <_ZN6Parser16compileVariablesEP11QStringList+0xb49>
     f17:	eb 03                	jmp    f1c <_ZN6Parser16compileVariablesEP11QStringList+0xb4e>
     f19:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     f1c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     f23:	48 89 c7             	mov    %rax,%rdi
     f26:	e8 00 00 00 00       	callq  f2b <_ZN6Parser16compileVariablesEP11QStringList+0xb5d>
     f2b:	eb 03                	jmp    f30 <_ZN6Parser16compileVariablesEP11QStringList+0xb62>
     f2d:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     f30:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     f37:	48 89 c7             	mov    %rax,%rdi
     f3a:	e8 00 00 00 00       	callq  f3f <_ZN6Parser16compileVariablesEP11QStringList+0xb71>
     f3f:	eb 03                	jmp    f44 <_ZN6Parser16compileVariablesEP11QStringList+0xb76>
     f41:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     f44:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     f4b:	48 89 c7             	mov    %rax,%rdi
     f4e:	e8 00 00 00 00       	callq  f53 <_ZN6Parser16compileVariablesEP11QStringList+0xb85>
     f53:	eb 03                	jmp    f58 <_ZN6Parser16compileVariablesEP11QStringList+0xb8a>
     f55:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     f58:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     f5f:	48 89 c7             	mov    %rax,%rdi
     f62:	e8 00 00 00 00       	callq  f67 <_ZN6Parser16compileVariablesEP11QStringList+0xb99>
     f67:	eb 03                	jmp    f6c <_ZN6Parser16compileVariablesEP11QStringList+0xb9e>
     f69:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     f6c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     f73:	48 89 c7             	mov    %rax,%rdi
     f76:	e8 00 00 00 00       	callq  f7b <_ZN6Parser16compileVariablesEP11QStringList+0xbad>
     f7b:	eb 03                	jmp    f80 <_ZN6Parser16compileVariablesEP11QStringList+0xbb2>
     f7d:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     f80:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     f87:	48 89 c7             	mov    %rax,%rdi
     f8a:	e8 00 00 00 00       	callq  f8f <_ZN6Parser16compileVariablesEP11QStringList+0xbc1>
     f8f:	eb 03                	jmp    f94 <_ZN6Parser16compileVariablesEP11QStringList+0xbc6>
     f91:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     f94:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     f9b:	48 89 c7             	mov    %rax,%rdi
     f9e:	e8 00 00 00 00       	callq  fa3 <_ZN6Parser16compileVariablesEP11QStringList+0xbd5>
     fa3:	eb 03                	jmp    fa8 <_ZN6Parser16compileVariablesEP11QStringList+0xbda>
     fa5:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
     fa8:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     faf:	48 89 c7             	mov    %rax,%rdi
     fb2:	e8 00 00 00 00       	callq  fb7 <_ZN6Parser16compileVariablesEP11QStringList+0xbe9>
     fb7:	eb 03                	jmp    fbc <_ZN6Parser16compileVariablesEP11QStringList+0xbee>
     fb9:	48 89 c3             	mov    %rax,%rbx
     fbc:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     fc3:	48 89 c7             	mov    %rax,%rdi
     fc6:	e8 00 00 00 00       	callq  fcb <_ZN6Parser16compileVariablesEP11QStringList+0xbfd>
     fcb:	48 89 d8             	mov    %rbx,%rax
     fce:	48 89 c7             	mov    %rax,%rdi
     fd1:	e8 00 00 00 00       	callq  fd6 <_ZN6Parser16compileVariablesEP11QStringList+0xc08>

    }


    return result;
}
     fd6:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     fdd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     fe1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     fe8:	00 00 
     fea:	74 05                	je     ff1 <_ZN6Parser16compileVariablesEP11QStringList+0xc23>
     fec:	e8 00 00 00 00       	callq  ff1 <_ZN6Parser16compileVariablesEP11QStringList+0xc23>
     ff1:	48 81 c4 88 02 00 00 	add    $0x288,%rsp
     ff8:	5b                   	pop    %rbx
     ff9:	5d                   	pop    %rbp
     ffa:	c3                   	retq   
     ffb:	90                   	nop

0000000000000ffc <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     ffc:	55                   	push   %rbp
     ffd:	48 89 e5             	mov    %rsp,%rbp
    1000:	53                   	push   %rbx
    1001:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
    1008:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
    100f:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
    1016:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    101d:	00 00 
    101f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1023:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
    1025:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
    102c:	00 00 00 
    int index   = 0;
    102f:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
    1036:	00 00 00 

    VarTypes VT;
    1039:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1040:	48 89 c7             	mov    %rax,%rdi
    1043:	e8 00 00 00 00       	callq  1048 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1048:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    104f:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1056:	48 89 d6             	mov    %rdx,%rsi
    1059:	48 89 c7             	mov    %rax,%rdi
    105c:	e8 00 00 00 00       	callq  1061 <_ZN6Parser14checkVariablesEP7QString+0x65>
    1061:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1068:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    106f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1076 <_ZN6Parser14checkVariablesEP7QString+0x7a>
    1076:	48 89 ce             	mov    %rcx,%rsi
    1079:	48 89 c7             	mov    %rax,%rdi
    107c:	e8 00 00 00 00       	callq  1081 <_ZN6Parser14checkVariablesEP7QString+0x85>
    1081:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    1088:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    108f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1094:	ba 01 00 00 00       	mov    $0x1,%edx
    1099:	48 89 c7             	mov    %rax,%rdi
    109c:	e8 00 00 00 00       	callq  10a1 <_ZN6Parser14checkVariablesEP7QString+0xa5>
    10a1:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    10a8:	48 89 c7             	mov    %rax,%rdi
    10ab:	e8 00 00 00 00       	callq  10b0 <_ZN6Parser14checkVariablesEP7QString+0xb4>
    10b0:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    10b7:	48 89 c7             	mov    %rax,%rdi
    10ba:	e8 00 00 00 00       	callq  10bf <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    10bf:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    10c6:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    10cd:	48 89 d6             	mov    %rdx,%rsi
    10d0:	48 89 c7             	mov    %rax,%rdi
    10d3:	e8 00 00 00 00       	callq  10d8 <_ZN6Parser14checkVariablesEP7QString+0xdc>
    10d8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    10df:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    10e6:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 10ed <_ZN6Parser14checkVariablesEP7QString+0xf1>
    10ed:	48 89 ce             	mov    %rcx,%rsi
    10f0:	48 89 c7             	mov    %rax,%rdi
    10f3:	e8 00 00 00 00       	callq  10f8 <_ZN6Parser14checkVariablesEP7QString+0xfc>
    10f8:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    10ff:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1106:	b9 00 00 00 00       	mov    $0x0,%ecx
    110b:	ba 01 00 00 00       	mov    $0x1,%edx
    1110:	48 89 c7             	mov    %rax,%rdi
    1113:	e8 00 00 00 00       	callq  1118 <_ZN6Parser14checkVariablesEP7QString+0x11c>
    1118:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    111f:	48 89 c7             	mov    %rax,%rdi
    1122:	e8 00 00 00 00       	callq  1127 <_ZN6Parser14checkVariablesEP7QString+0x12b>
    1127:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    112e:	48 89 c7             	mov    %rax,%rdi
    1131:	e8 00 00 00 00       	callq  1136 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1136:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    113d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1144 <_ZN6Parser14checkVariablesEP7QString+0x148>
    1144:	48 89 c7             	mov    %rax,%rdi
    1147:	e8 00 00 00 00       	callq  114c <_ZN6Parser14checkVariablesEP7QString+0x150>
    114c:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    1153:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    115a:	b9 00 00 00 00       	mov    $0x0,%ecx
    115f:	ba 01 00 00 00       	mov    $0x1,%edx
    1164:	48 89 c7             	mov    %rax,%rdi
    1167:	e8 00 00 00 00       	callq  116c <_ZN6Parser14checkVariablesEP7QString+0x170>
    116c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1173:	48 89 c7             	mov    %rax,%rdi
    1176:	e8 00 00 00 00       	callq  117b <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    117b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1182:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1189 <_ZN6Parser14checkVariablesEP7QString+0x18d>
    1189:	48 89 c7             	mov    %rax,%rdi
    118c:	e8 00 00 00 00       	callq  1191 <_ZN6Parser14checkVariablesEP7QString+0x195>
    1191:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    1198:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    119f:	b9 00 00 00 00       	mov    $0x0,%ecx
    11a4:	ba 01 00 00 00       	mov    $0x1,%edx
    11a9:	48 89 c7             	mov    %rax,%rdi
    11ac:	e8 00 00 00 00       	callq  11b1 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    11b1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    11b8:	48 89 c7             	mov    %rax,%rdi
    11bb:	e8 00 00 00 00       	callq  11c0 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    11c0:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    11c7:	48 89 c7             	mov    %rax,%rdi
    11ca:	e8 00 00 00 00       	callq  11cf <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    11cf:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    11d6:	48 89 c7             	mov    %rax,%rdi
    11d9:	e8 00 00 00 00       	callq  11de <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    11de:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    11e5:	48 89 c7             	mov    %rax,%rdi
    11e8:	e8 00 00 00 00       	callq  11ed <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    11ed:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    11f4:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    11f7:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    11fd:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    1204:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    120b:	b9 00 00 00 00       	mov    $0x0,%ecx
    1210:	48 89 c7             	mov    %rax,%rdi
    1213:	e8 00 00 00 00       	callq  1218 <_ZN6Parser14checkVariablesEP7QString+0x21c>
    1218:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    121e:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    1225:	0f 95 c0             	setne  %al
    1228:	84 c0                	test   %al,%al
    122a:	0f 84 68 01 00 00    	je     1398 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    1230:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1237:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    123e:	ba 01 00 00 00       	mov    $0x1,%edx
    1243:	48 89 ce             	mov    %rcx,%rsi
    1246:	48 89 c7             	mov    %rax,%rdi
    1249:	e8 00 00 00 00       	callq  124e <_ZN6Parser14checkVariablesEP7QString+0x252>
    124e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    1255:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    125c:	48 89 d6             	mov    %rdx,%rsi
    125f:	48 89 c7             	mov    %rax,%rdi
    1262:	e8 00 00 00 00       	callq  1267 <_ZN6Parser14checkVariablesEP7QString+0x26b>
    1267:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    126e:	48 89 c7             	mov    %rax,%rdi
    1271:	e8 00 00 00 00       	callq  1276 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    1276:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    127d:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1284:	ba 02 00 00 00       	mov    $0x2,%edx
    1289:	48 89 ce             	mov    %rcx,%rsi
    128c:	48 89 c7             	mov    %rax,%rdi
    128f:	e8 00 00 00 00       	callq  1294 <_ZN6Parser14checkVariablesEP7QString+0x298>
    1294:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    129b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    12a2:	48 89 d6             	mov    %rdx,%rsi
    12a5:	48 89 c7             	mov    %rax,%rdi
    12a8:	e8 00 00 00 00       	callq  12ad <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    12ad:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    12b4:	48 89 c7             	mov    %rax,%rdi
    12b7:	e8 00 00 00 00       	callq  12bc <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    12bc:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    12c3:	48 89 c7             	mov    %rax,%rdi
    12c6:	e8 00 00 00 00       	callq  12cb <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    12cb:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    12d1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    12d8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12df <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    12df:	48 89 c7             	mov    %rax,%rdi
    12e2:	e8 00 00 00 00       	callq  12e7 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    12e7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    12ee:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    12f5:	ba 02 00 00 00       	mov    $0x2,%edx
    12fa:	48 89 ce             	mov    %rcx,%rsi
    12fd:	48 89 c7             	mov    %rax,%rdi
    1300:	e8 00 00 00 00       	callq  1305 <_ZN6Parser14checkVariablesEP7QString+0x309>
    1305:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    130c:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    1313:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    131a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    1320:	b9 00 00 00 00       	mov    $0x0,%ecx
    1325:	48 89 c7             	mov    %rax,%rdi
    1328:	e8 00 00 00 00       	callq  132d <_ZN6Parser14checkVariablesEP7QString+0x331>
    132d:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    1334:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    133b:	48 89 d6             	mov    %rdx,%rsi
    133e:	48 89 c7             	mov    %rax,%rdi
    1341:	e8 00 00 00 00       	callq  1346 <_ZN6Parser14checkVariablesEP7QString+0x34a>
    1346:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    134d:	48 89 c7             	mov    %rax,%rdi
    1350:	e8 00 00 00 00       	callq  1355 <_ZN6Parser14checkVariablesEP7QString+0x359>
    1355:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    135c:	48 89 c7             	mov    %rax,%rdi
    135f:	e8 00 00 00 00       	callq  1364 <_ZN6Parser14checkVariablesEP7QString+0x368>
    1364:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    136b:	48 89 c7             	mov    %rax,%rdi
    136e:	e8 00 00 00 00       	callq  1373 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    1373:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    137a:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1381:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1388:	48 89 c6             	mov    %rax,%rsi
    138b:	48 89 d7             	mov    %rdx,%rdi
    138e:	e8 00 00 00 00       	callq  1393 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    1393:	e9 5f fe ff ff       	jmpq   11f7 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    1398:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    139f:	48 05 98 00 00 00    	add    $0x98,%rax
    13a5:	48 89 c7             	mov    %rax,%rdi
    13a8:	e8 00 00 00 00       	callq  13ad <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    13ad:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    13b4:	48 89 c7             	mov    %rax,%rdi
    13b7:	e8 00 00 00 00       	callq  13bc <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    13bc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    13c3:	48 89 c7             	mov    %rax,%rdi
    13c6:	e8 00 00 00 00       	callq  13cb <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    13cb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    13d2:	48 89 c7             	mov    %rax,%rdi
    13d5:	e8 00 00 00 00       	callq  13da <_ZN6Parser14checkVariablesEP7QString+0x3de>
    13da:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    13e1:	48 89 c7             	mov    %rax,%rdi
    13e4:	e8 00 00 00 00       	callq  13e9 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    13e9:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13f0:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    13f7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13fe:	48 89 d6             	mov    %rdx,%rsi
    1401:	48 89 c7             	mov    %rax,%rdi
    1404:	e8 00 00 00 00       	callq  1409 <_ZN6Parser14checkVariablesEP7QString+0x40d>
    1409:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    1410:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    1417:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    141e:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1425:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    142c:	48 89 d6             	mov    %rdx,%rsi
    142f:	48 89 c7             	mov    %rax,%rdi
    1432:	e8 00 00 00 00       	callq  1437 <_ZN6Parser14checkVariablesEP7QString+0x43b>
    1437:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    143e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1445:	48 89 d6             	mov    %rdx,%rsi
    1448:	48 89 c7             	mov    %rax,%rdi
    144b:	e8 00 00 00 00       	callq  1450 <_ZN6Parser14checkVariablesEP7QString+0x454>
    1450:	84 c0                	test   %al,%al
    1452:	0f 84 de 03 00 00    	je     1836 <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
    1458:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    145f:	48 89 c7             	mov    %rax,%rdi
    1462:	e8 00 00 00 00       	callq  1467 <_ZN6Parser14checkVariablesEP7QString+0x46b>
    1467:	48 89 c2             	mov    %rax,%rdx
    146a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1471:	48 89 d6             	mov    %rdx,%rsi
    1474:	48 89 c7             	mov    %rax,%rdi
    1477:	e8 00 00 00 00       	callq  147c <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    147c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1483:	48 89 c7             	mov    %rax,%rdi
    1486:	e8 00 00 00 00       	callq  148b <_ZN6Parser14checkVariablesEP7QString+0x48f>
    148b:	48 89 c6             	mov    %rax,%rsi
    148e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1495:	b9 00 00 00 00       	mov    $0x0,%ecx
    149a:	ba 00 00 00 00       	mov    $0x0,%edx
    149f:	48 89 c7             	mov    %rax,%rdi
    14a2:	e8 00 00 00 00       	callq  14a7 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    14a7:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    14ad:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    14b4:	48 89 c7             	mov    %rax,%rdi
    14b7:	e8 00 00 00 00       	callq  14bc <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    14bc:	48 89 c6             	mov    %rax,%rsi
    14bf:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14c6:	b9 00 00 00 00       	mov    $0x0,%ecx
    14cb:	ba 00 00 00 00       	mov    $0x0,%edx
    14d0:	48 89 c7             	mov    %rax,%rdi
    14d3:	e8 00 00 00 00       	callq  14d8 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    14d8:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    14de:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    14e5:	48 89 c7             	mov    %rax,%rdi
    14e8:	e8 00 00 00 00       	callq  14ed <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    14ed:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    14f3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14fa:	48 89 c7             	mov    %rax,%rdi
    14fd:	e8 00 00 00 00       	callq  1502 <_ZN6Parser14checkVariablesEP7QString+0x506>
    1502:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    1508:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    150f:	00 00 00 

        if(ZZ>=0)
    1512:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    1519:	0f 88 0d 02 00 00    	js     172c <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
    151f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1526:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    152d:	ba 01 00 00 00       	mov    $0x1,%edx
    1532:	48 89 ce             	mov    %rcx,%rsi
    1535:	48 89 c7             	mov    %rax,%rdi
    1538:	e8 00 00 00 00       	callq  153d <_ZN6Parser14checkVariablesEP7QString+0x541>
    153d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1544:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    154b:	48 89 d6             	mov    %rdx,%rsi
    154e:	48 89 c7             	mov    %rax,%rdi
    1551:	e8 00 00 00 00       	callq  1556 <_ZN6Parser14checkVariablesEP7QString+0x55a>
    1556:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    155d:	48 89 c7             	mov    %rax,%rdi
    1560:	e8 00 00 00 00       	callq  1565 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    1565:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1569:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1570:	ba 02 00 00 00       	mov    $0x2,%edx
    1575:	48 89 ce             	mov    %rcx,%rsi
    1578:	48 89 c7             	mov    %rax,%rdi
    157b:	e8 00 00 00 00       	callq  1580 <_ZN6Parser14checkVariablesEP7QString+0x584>
    1580:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    1584:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    158b:	48 89 d6             	mov    %rdx,%rsi
    158e:	48 89 c7             	mov    %rax,%rdi
    1591:	e8 00 00 00 00       	callq  1596 <_ZN6Parser14checkVariablesEP7QString+0x59a>
    1596:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    159a:	48 89 c7             	mov    %rax,%rdi
    159d:	e8 00 00 00 00       	callq  15a2 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    15a2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    15a6:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    15ad:	ba 03 00 00 00       	mov    $0x3,%edx
    15b2:	48 89 ce             	mov    %rcx,%rsi
    15b5:	48 89 c7             	mov    %rax,%rdi
    15b8:	e8 00 00 00 00       	callq  15bd <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    15bd:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    15c1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    15c8:	48 89 d6             	mov    %rdx,%rsi
    15cb:	48 89 c7             	mov    %rax,%rdi
    15ce:	e8 00 00 00 00       	callq  15d3 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    15d3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    15d7:	48 89 c7             	mov    %rax,%rdi
    15da:	e8 00 00 00 00       	callq  15df <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    15df:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    15e3:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    15ea:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15f1 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    15f1:	48 89 ce             	mov    %rcx,%rsi
    15f4:	48 89 c7             	mov    %rax,%rdi
    15f7:	e8 00 00 00 00       	callq  15fc <_ZN6Parser14checkVariablesEP7QString+0x600>
    15fc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1600:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    1607:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    160b:	48 89 ce             	mov    %rcx,%rsi
    160e:	48 89 c7             	mov    %rax,%rdi
    1611:	e8 00 00 00 00       	callq  1616 <_ZN6Parser14checkVariablesEP7QString+0x61a>
    1616:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    161a:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    161e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1625 <_ZN6Parser14checkVariablesEP7QString+0x629>
    1625:	48 89 ce             	mov    %rcx,%rsi
    1628:	48 89 c7             	mov    %rax,%rdi
    162b:	e8 00 00 00 00       	callq  1630 <_ZN6Parser14checkVariablesEP7QString+0x634>
    1630:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1637:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    163e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1642:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1649:	48 89 c6             	mov    %rax,%rsi
    164c:	48 89 cf             	mov    %rcx,%rdi
    164f:	e8 00 00 00 00       	callq  1654 <_ZN6Parser14checkVariablesEP7QString+0x658>
    1654:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1658:	48 89 c7             	mov    %rax,%rdi
    165b:	e8 00 00 00 00       	callq  1660 <_ZN6Parser14checkVariablesEP7QString+0x664>
    1660:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1664:	48 89 c7             	mov    %rax,%rdi
    1667:	e8 00 00 00 00       	callq  166c <_ZN6Parser14checkVariablesEP7QString+0x670>
    166c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1670:	48 89 c7             	mov    %rax,%rdi
    1673:	e8 00 00 00 00       	callq  1678 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    1678:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    167f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1686 <_ZN6Parser14checkVariablesEP7QString+0x68a>
    1686:	48 89 c7             	mov    %rax,%rdi
    1689:	e8 00 00 00 00       	callq  168e <_ZN6Parser14checkVariablesEP7QString+0x692>
    168e:	84 c0                	test   %al,%al
    1690:	74 0a                	je     169c <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    1692:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    1699:	00 00 00 
            if(type=="port")    iType = 80;
    169c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    16a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 16aa <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    16aa:	48 89 c7             	mov    %rax,%rdi
    16ad:	e8 00 00 00 00       	callq  16b2 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    16b2:	84 c0                	test   %al,%al
    16b4:	74 0a                	je     16c0 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    16b6:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    16bd:	00 00 00 

            index++;
    16c0:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    16c7:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    16cd:	88 45 e0             	mov    %al,-0x20(%rbp)
    16d0:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16d7:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    16de:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16e2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    16e9:	48 89 c6             	mov    %rax,%rsi
    16ec:	48 89 cf             	mov    %rcx,%rdi
    16ef:	e8 00 00 00 00       	callq  16f4 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
    16f4:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    16fa:	88 45 e0             	mov    %al,-0x20(%rbp)
    16fd:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1703:	88 45 d0             	mov    %al,-0x30(%rbp)
    1706:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    170d:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    1714:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1718:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    171c:	48 89 c6             	mov    %rax,%rsi
    171f:	48 89 cf             	mov    %rcx,%rdi
    1722:	e8 00 00 00 00       	callq  1727 <_ZN6Parser14checkVariablesEP7QString+0x72b>
    1727:	e9 e7 00 00 00       	jmpq   1813 <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
    172c:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    1733:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1737:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    173e:	ba 00 00 00 00       	mov    $0x0,%edx
    1743:	48 89 ce             	mov    %rcx,%rsi
    1746:	48 89 c7             	mov    %rax,%rdi
    1749:	e8 00 00 00 00       	callq  174e <_ZN6Parser14checkVariablesEP7QString+0x752>
    174e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1752:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1759:	48 89 d6             	mov    %rdx,%rsi
    175c:	48 89 c7             	mov    %rax,%rdi
    175f:	e8 00 00 00 00       	callq  1764 <_ZN6Parser14checkVariablesEP7QString+0x768>
    1764:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1768:	48 89 c7             	mov    %rax,%rdi
    176b:	e8 00 00 00 00       	callq  1770 <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
    1770:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1774:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 177b <_ZN6Parser14checkVariablesEP7QString+0x77f>
    177b:	48 89 c7             	mov    %rax,%rdi
    177e:	e8 00 00 00 00       	callq  1783 <_ZN6Parser14checkVariablesEP7QString+0x787>
    1783:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    178a:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    1791:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1795:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    179c:	48 89 c6             	mov    %rax,%rsi
    179f:	48 89 cf             	mov    %rcx,%rdi
    17a2:	e8 00 00 00 00       	callq  17a7 <_ZN6Parser14checkVariablesEP7QString+0x7ab>
    17a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17ab:	48 89 c7             	mov    %rax,%rdi
    17ae:	e8 00 00 00 00       	callq  17b3 <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
    17b3:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    17b9:	88 45 e0             	mov    %al,-0x20(%rbp)
    17bc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17c3:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    17ca:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17ce:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    17d5:	48 89 c6             	mov    %rax,%rsi
    17d8:	48 89 cf             	mov    %rcx,%rdi
    17db:	e8 00 00 00 00       	callq  17e0 <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
    17e0:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    17e6:	88 45 e0             	mov    %al,-0x20(%rbp)
    17e9:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    17ef:	88 45 d0             	mov    %al,-0x30(%rbp)
    17f2:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17f9:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    1800:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1804:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1808:	48 89 c6             	mov    %rax,%rsi
    180b:	48 89 cf             	mov    %rcx,%rdi
    180e:	e8 00 00 00 00       	callq  1813 <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1813:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    181a:	48 89 c7             	mov    %rax,%rdi
    181d:	e8 00 00 00 00       	callq  1822 <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1822:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1829:	48 89 c7             	mov    %rax,%rdi
    182c:	e8 00 00 00 00       	callq  1831 <_ZN6Parser14checkVariablesEP7QString+0x835>
    1831:	e9 e1 fb ff ff       	jmpq   1417 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    1836:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    183c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1843:	48 89 c7             	mov    %rax,%rdi
    1846:	e8 00 00 00 00       	callq  184b <_ZN6Parser14checkVariablesEP7QString+0x84f>
    184b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1852:	48 89 c7             	mov    %rax,%rdi
    1855:	e8 00 00 00 00       	callq  185a <_ZN6Parser14checkVariablesEP7QString+0x85e>
    185a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1861:	48 89 c7             	mov    %rax,%rdi
    1864:	e8 00 00 00 00       	callq  1869 <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1869:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1870:	48 89 c7             	mov    %rax,%rdi
    1873:	e8 00 00 00 00       	callq  1878 <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1878:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    187f:	48 89 c7             	mov    %rax,%rdi
    1882:	e8 00 00 00 00       	callq  1887 <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1887:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    188e:	48 89 c7             	mov    %rax,%rdi
    1891:	e8 00 00 00 00       	callq  1896 <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1896:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    189d:	48 89 c7             	mov    %rax,%rdi
    18a0:	e8 00 00 00 00       	callq  18a5 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    18a5:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    18ac:	48 89 c7             	mov    %rax,%rdi
    18af:	e8 00 00 00 00       	callq  18b4 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    18b4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    18bb:	48 89 c7             	mov    %rax,%rdi
    18be:	e8 00 00 00 00       	callq  18c3 <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    18c3:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18ca:	48 89 c7             	mov    %rax,%rdi
    18cd:	e8 00 00 00 00       	callq  18d2 <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    18d2:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    18d9:	48 89 c7             	mov    %rax,%rdi
    18dc:	e8 00 00 00 00       	callq  18e1 <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    18e1:	89 d8                	mov    %ebx,%eax
}
    18e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    18e7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    18ee:	00 00 
    18f0:	0f 84 03 03 00 00    	je     1bf9 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    18f6:	e9 f9 02 00 00       	jmpq   1bf4 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
    18fb:	48 89 c3             	mov    %rax,%rbx
    18fe:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1905:	48 89 c7             	mov    %rax,%rdi
    1908:	e8 00 00 00 00       	callq  190d <_ZN6Parser14checkVariablesEP7QString+0x911>
    190d:	eb 17                	jmp    1926 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    190f:	48 89 c3             	mov    %rax,%rbx
    1912:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1919:	48 89 c7             	mov    %rax,%rdi
    191c:	e8 00 00 00 00       	callq  1921 <_ZN6Parser14checkVariablesEP7QString+0x925>
    1921:	eb 03                	jmp    1926 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    1923:	48 89 c3             	mov    %rax,%rbx
    1926:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    192d:	48 89 c7             	mov    %rax,%rdi
    1930:	e8 00 00 00 00       	callq  1935 <_ZN6Parser14checkVariablesEP7QString+0x939>
    1935:	e9 a0 02 00 00       	jmpq   1bda <_ZN6Parser14checkVariablesEP7QString+0xbde>
    193a:	48 89 c3             	mov    %rax,%rbx
    193d:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1944:	48 89 c7             	mov    %rax,%rdi
    1947:	e8 00 00 00 00       	callq  194c <_ZN6Parser14checkVariablesEP7QString+0x950>
    194c:	e9 89 02 00 00       	jmpq   1bda <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1951:	48 89 c3             	mov    %rax,%rbx
    1954:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    195b:	48 89 c7             	mov    %rax,%rdi
    195e:	e8 00 00 00 00       	callq  1963 <_ZN6Parser14checkVariablesEP7QString+0x967>
    1963:	eb 17                	jmp    197c <_ZN6Parser14checkVariablesEP7QString+0x980>
    1965:	48 89 c3             	mov    %rax,%rbx
    1968:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    196f:	48 89 c7             	mov    %rax,%rdi
    1972:	e8 00 00 00 00       	callq  1977 <_ZN6Parser14checkVariablesEP7QString+0x97b>
    1977:	eb 03                	jmp    197c <_ZN6Parser14checkVariablesEP7QString+0x980>
    1979:	48 89 c3             	mov    %rax,%rbx
    197c:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1983:	48 89 c7             	mov    %rax,%rdi
    1986:	e8 00 00 00 00       	callq  198b <_ZN6Parser14checkVariablesEP7QString+0x98f>
    198b:	e9 36 02 00 00       	jmpq   1bc6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1990:	48 89 c3             	mov    %rax,%rbx
    1993:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    199a:	48 89 c7             	mov    %rax,%rdi
    199d:	e8 00 00 00 00       	callq  19a2 <_ZN6Parser14checkVariablesEP7QString+0x9a6>
    19a2:	e9 1f 02 00 00       	jmpq   1bc6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    19a7:	48 89 c3             	mov    %rax,%rbx
    19aa:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    19b1:	48 89 c7             	mov    %rax,%rdi
    19b4:	e8 00 00 00 00       	callq  19b9 <_ZN6Parser14checkVariablesEP7QString+0x9bd>
    19b9:	e9 f4 01 00 00       	jmpq   1bb2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19be:	48 89 c3             	mov    %rax,%rbx
    19c1:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    19c8:	48 89 c7             	mov    %rax,%rdi
    19cb:	e8 00 00 00 00       	callq  19d0 <_ZN6Parser14checkVariablesEP7QString+0x9d4>
    19d0:	e9 dd 01 00 00       	jmpq   1bb2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19d5:	48 89 c3             	mov    %rax,%rbx
    19d8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    19df:	48 89 c7             	mov    %rax,%rdi
    19e2:	e8 00 00 00 00       	callq  19e7 <_ZN6Parser14checkVariablesEP7QString+0x9eb>
    19e7:	e9 b2 01 00 00       	jmpq   1b9e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    19ec:	48 89 c3             	mov    %rax,%rbx
    19ef:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    19f6:	48 89 c7             	mov    %rax,%rdi
    19f9:	e8 00 00 00 00       	callq  19fe <_ZN6Parser14checkVariablesEP7QString+0xa02>
    19fe:	e9 9b 01 00 00       	jmpq   1b9e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1a03:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    1a06:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1a0d:	48 89 c7             	mov    %rax,%rdi
    1a10:	e8 00 00 00 00       	callq  1a15 <_ZN6Parser14checkVariablesEP7QString+0xa19>
    1a15:	e9 34 01 00 00       	jmpq   1b4e <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1a1a:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    1a1d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1a24:	48 89 c7             	mov    %rax,%rdi
    1a27:	e8 00 00 00 00       	callq  1a2c <_ZN6Parser14checkVariablesEP7QString+0xa30>
    1a2c:	e9 1d 01 00 00       	jmpq   1b4e <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1a31:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    1a34:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1a3b:	48 89 c7             	mov    %rax,%rdi
    1a3e:	e8 00 00 00 00       	callq  1a43 <_ZN6Parser14checkVariablesEP7QString+0xa47>
    1a43:	eb 03                	jmp    1a48 <_ZN6Parser14checkVariablesEP7QString+0xa4c>
    1a45:	48 89 c3             	mov    %rax,%rbx
    1a48:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1a4f:	48 89 c7             	mov    %rax,%rdi
    1a52:	e8 00 00 00 00       	callq  1a57 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1a57:	eb 03                	jmp    1a5c <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1a59:	48 89 c3             	mov    %rax,%rbx
    1a5c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1a63:	48 89 c7             	mov    %rax,%rdi
    1a66:	e8 00 00 00 00       	callq  1a6b <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1a6b:	e9 de 00 00 00       	jmpq   1b4e <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1a70:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1a73:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a7a:	48 89 c7             	mov    %rax,%rdi
    1a7d:	e8 00 00 00 00       	callq  1a82 <_ZN6Parser14checkVariablesEP7QString+0xa86>
    1a82:	eb 7a                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a84:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1a87:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a8b:	48 89 c7             	mov    %rax,%rdi
    1a8e:	e8 00 00 00 00       	callq  1a93 <_ZN6Parser14checkVariablesEP7QString+0xa97>
    1a93:	eb 69                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a95:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1a98:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a9c:	48 89 c7             	mov    %rax,%rdi
    1a9f:	e8 00 00 00 00       	callq  1aa4 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
    1aa4:	eb 58                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1aa6:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1aa9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1aad:	48 89 c7             	mov    %rax,%rdi
    1ab0:	e8 00 00 00 00       	callq  1ab5 <_ZN6Parser14checkVariablesEP7QString+0xab9>
    1ab5:	eb 03                	jmp    1aba <_ZN6Parser14checkVariablesEP7QString+0xabe>
    1ab7:	48 89 c3             	mov    %rax,%rbx
    1aba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1abe:	48 89 c7             	mov    %rax,%rdi
    1ac1:	e8 00 00 00 00       	callq  1ac6 <_ZN6Parser14checkVariablesEP7QString+0xaca>
    1ac6:	eb 03                	jmp    1acb <_ZN6Parser14checkVariablesEP7QString+0xacf>
    1ac8:	48 89 c3             	mov    %rax,%rbx
    1acb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1acf:	48 89 c7             	mov    %rax,%rdi
    1ad2:	e8 00 00 00 00       	callq  1ad7 <_ZN6Parser14checkVariablesEP7QString+0xadb>
    1ad7:	eb 25                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1ad9:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1adc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1ae0:	48 89 c7             	mov    %rax,%rdi
    1ae3:	e8 00 00 00 00       	callq  1ae8 <_ZN6Parser14checkVariablesEP7QString+0xaec>
    1ae8:	eb 14                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1aea:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1aed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1af1:	48 89 c7             	mov    %rax,%rdi
    1af4:	e8 00 00 00 00       	callq  1af9 <_ZN6Parser14checkVariablesEP7QString+0xafd>
    1af9:	eb 03                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1afb:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1afe:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1b05:	48 89 c7             	mov    %rax,%rdi
    1b08:	e8 00 00 00 00       	callq  1b0d <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1b0d:	eb 03                	jmp    1b12 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1b0f:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1b12:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1b19:	48 89 c7             	mov    %rax,%rdi
    1b1c:	e8 00 00 00 00       	callq  1b21 <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1b21:	eb 03                	jmp    1b26 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1b23:	48 89 c3             	mov    %rax,%rbx
    1b26:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1b2d:	48 89 c7             	mov    %rax,%rdi
    1b30:	e8 00 00 00 00       	callq  1b35 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1b35:	eb 03                	jmp    1b3a <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1b37:	48 89 c3             	mov    %rax,%rbx
    1b3a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1b41:	48 89 c7             	mov    %rax,%rdi
    1b44:	e8 00 00 00 00       	callq  1b49 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1b49:	eb 03                	jmp    1b4e <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1b4b:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1b4e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1b55:	48 89 c7             	mov    %rax,%rdi
    1b58:	e8 00 00 00 00       	callq  1b5d <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1b5d:	eb 03                	jmp    1b62 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1b5f:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1b62:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1b69:	48 89 c7             	mov    %rax,%rdi
    1b6c:	e8 00 00 00 00       	callq  1b71 <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1b71:	eb 03                	jmp    1b76 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1b73:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1b76:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1b7d:	48 89 c7             	mov    %rax,%rdi
    1b80:	e8 00 00 00 00       	callq  1b85 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1b85:	eb 03                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1b87:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1b8a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1b91:	48 89 c7             	mov    %rax,%rdi
    1b94:	e8 00 00 00 00       	callq  1b99 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1b99:	eb 03                	jmp    1b9e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1b9b:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1b9e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1ba5:	48 89 c7             	mov    %rax,%rdi
    1ba8:	e8 00 00 00 00       	callq  1bad <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1bad:	eb 03                	jmp    1bb2 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1baf:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1bb2:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1bb9:	48 89 c7             	mov    %rax,%rdi
    1bbc:	e8 00 00 00 00       	callq  1bc1 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1bc1:	eb 03                	jmp    1bc6 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1bc3:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1bc6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1bcd:	48 89 c7             	mov    %rax,%rdi
    1bd0:	e8 00 00 00 00       	callq  1bd5 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1bd5:	eb 03                	jmp    1bda <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1bd7:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1bda:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1be1:	48 89 c7             	mov    %rax,%rdi
    1be4:	e8 00 00 00 00       	callq  1be9 <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1be9:	48 89 d8             	mov    %rbx,%rax
    1bec:	48 89 c7             	mov    %rax,%rdi
    1bef:	e8 00 00 00 00       	callq  1bf4 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
    1bf4:	e8 00 00 00 00       	callq  1bf9 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    1bf9:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1c00:	5b                   	pop    %rbx
    1c01:	5d                   	pop    %rbp
    1c02:	c3                   	retq   
    1c03:	90                   	nop

0000000000001c04 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1c04:	55                   	push   %rbp
    1c05:	48 89 e5             	mov    %rsp,%rbp
    1c08:	53                   	push   %rbx
    1c09:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1c10:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1c17:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1c1e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1c25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1c2c:	00 00 
    1c2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1c32:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1c34:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1c3b:	00 00 00 
    QString result;
    1c3e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1c45:	48 89 c7             	mov    %rax,%rdi
    1c48:	e8 00 00 00 00       	callq  1c4d <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1c4d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c51:	48 89 c7             	mov    %rax,%rdi
    1c54:	e8 00 00 00 00       	callq  1c59 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1c59:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c60:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c64:	48 89 d6             	mov    %rdx,%rsi
    1c67:	48 89 c7             	mov    %rax,%rdi
    1c6a:	e8 00 00 00 00       	callq  1c6f <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1c6f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1c73:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1c77:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c7e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1c82:	48 89 d6             	mov    %rdx,%rsi
    1c85:	48 89 c7             	mov    %rax,%rdi
    1c88:	e8 00 00 00 00       	callq  1c8d <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1c8d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1c91:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c95:	48 89 d6             	mov    %rdx,%rsi
    1c98:	48 89 c7             	mov    %rax,%rdi
    1c9b:	e8 00 00 00 00       	callq  1ca0 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1ca0:	84 c0                	test   %al,%al
    1ca2:	0f 84 e0 00 00 00    	je     1d88 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1ca8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1cac:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1cb2:	ba 0a 00 00 00       	mov    $0xa,%edx
    1cb7:	89 ce                	mov    %ecx,%esi
    1cb9:	48 89 c7             	mov    %rax,%rdi
    1cbc:	e8 00 00 00 00       	callq  1cc1 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1cc1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1cc5:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1cc9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1cd0 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1cd0:	48 89 c7             	mov    %rax,%rdi
    1cd3:	e8 00 00 00 00       	callq  1cd8 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1cd8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cdc:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1ce0:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1ce7 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1ce7:	48 89 ce             	mov    %rcx,%rsi
    1cea:	48 89 c7             	mov    %rax,%rdi
    1ced:	e8 00 00 00 00       	callq  1cf2 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1cf2:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1cf6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cfd:	48 89 d6             	mov    %rdx,%rsi
    1d00:	48 89 c7             	mov    %rax,%rdi
    1d03:	e8 00 00 00 00       	callq  1d08 <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1d08:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d0c:	48 89 c7             	mov    %rax,%rdi
    1d0f:	e8 00 00 00 00       	callq  1d14 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1d14:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d18:	48 89 c7             	mov    %rax,%rdi
    1d1b:	e8 00 00 00 00       	callq  1d20 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1d20:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d24:	48 89 c7             	mov    %rax,%rdi
    1d27:	e8 00 00 00 00       	callq  1d2c <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1d2c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d30:	48 89 c7             	mov    %rax,%rdi
    1d33:	e8 00 00 00 00       	callq  1d38 <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1d38:	48 89 c2             	mov    %rax,%rdx
    1d3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d3f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d46 <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1d46:	48 89 c7             	mov    %rax,%rdi
    1d49:	e8 00 00 00 00       	callq  1d4e <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1d4e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1d52:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d59:	48 89 d6             	mov    %rdx,%rsi
    1d5c:	48 89 c7             	mov    %rax,%rdi
    1d5f:	e8 00 00 00 00       	callq  1d64 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1d64:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d68:	48 89 c7             	mov    %rax,%rdi
    1d6b:	e8 00 00 00 00       	callq  1d70 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1d70:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1d77:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d7b:	48 89 c7             	mov    %rax,%rdi
    1d7e:	e8 00 00 00 00       	callq  1d83 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1d83:	e9 ef fe ff ff       	jmpq   1c77 <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1d88:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d8f:	48 89 c7             	mov    %rax,%rdi
    1d92:	e8 00 00 00 00       	callq  1d97 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1d97:	90                   	nop
    1d98:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1d9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1da3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1daa:	00 00 
    1dac:	74 68                	je     1e16 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1dae:	eb 61                	jmp    1e11 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1db0:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1db3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1db7:	48 89 c7             	mov    %rax,%rdi
    1dba:	e8 00 00 00 00       	callq  1dbf <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1dbf:	eb 03                	jmp    1dc4 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1dc1:	48 89 c3             	mov    %rax,%rbx
    1dc4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1dc8:	48 89 c7             	mov    %rax,%rdi
    1dcb:	e8 00 00 00 00       	callq  1dd0 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1dd0:	eb 03                	jmp    1dd5 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1dd2:	48 89 c3             	mov    %rax,%rbx
    1dd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1dd9:	48 89 c7             	mov    %rax,%rdi
    1ddc:	e8 00 00 00 00       	callq  1de1 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1de1:	eb 14                	jmp    1df7 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1de3:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1de6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1dea:	48 89 c7             	mov    %rax,%rdi
    1ded:	e8 00 00 00 00       	callq  1df2 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1df2:	eb 03                	jmp    1df7 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1df4:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1df7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1dfe:	48 89 c7             	mov    %rax,%rdi
    1e01:	e8 00 00 00 00       	callq  1e06 <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1e06:	48 89 d8             	mov    %rbx,%rax
    1e09:	48 89 c7             	mov    %rax,%rdi
    1e0c:	e8 00 00 00 00       	callq  1e11 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1e11:	e8 00 00 00 00       	callq  1e16 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1e16:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1e1d:	5b                   	pop    %rbx
    1e1e:	5d                   	pop    %rbp
    1e1f:	c3                   	retq   

0000000000001e20 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1e20:	55                   	push   %rbp
    1e21:	48 89 e5             	mov    %rsp,%rbp
    1e24:	48 83 ec 10          	sub    $0x10,%rsp
    1e28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e34:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1e38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e3c:	ba 01 00 00 00       	mov    $0x1,%edx
    1e41:	48 89 c6             	mov    %rax,%rsi
    1e44:	48 89 cf             	mov    %rcx,%rdi
    1e47:	e8 00 00 00 00       	callq  1e4c <_ZN6Parser14addIncludeFileE7QString+0x2c>
    1e4c:	83 f0 01             	xor    $0x1,%eax
    1e4f:	84 c0                	test   %al,%al
    1e51:	74 17                	je     1e6a <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1e53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e57:	48 8d 50 58          	lea    0x58(%rax),%rdx
    1e5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e5f:	48 89 c6             	mov    %rax,%rsi
    1e62:	48 89 d7             	mov    %rdx,%rdi
    1e65:	e8 00 00 00 00       	callq  1e6a <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    1e6a:	90                   	nop
    1e6b:	c9                   	leaveq 
    1e6c:	c3                   	retq   
    1e6d:	90                   	nop

0000000000001e6e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1e6e:	55                   	push   %rbp
    1e6f:	48 89 e5             	mov    %rsp,%rbp
    1e72:	41 55                	push   %r13
    1e74:	41 54                	push   %r12
    1e76:	53                   	push   %rbx
    1e77:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1e7e:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1e85:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1e8c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1e93:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e9a:	00 00 
    1e9c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1ea0:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1ea2:	bb 00 00 00 00       	mov    $0x0,%ebx
    1ea7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1eae:	48 89 c7             	mov    %rax,%rdi
    1eb1:	e8 00 00 00 00       	callq  1eb6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1eb6:	83 f8 04             	cmp    $0x4,%eax
    1eb9:	74 3a                	je     1ef5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1ebb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ebf:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1ec6:	48 89 d6             	mov    %rdx,%rsi
    1ec9:	48 89 c7             	mov    %rax,%rdi
    1ecc:	e8 00 00 00 00       	callq  1ed1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1ed1:	bb 01 00 00 00       	mov    $0x1,%ebx
    1ed6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1eda:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ee1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1ee1:	48 89 c7             	mov    %rax,%rdi
    1ee4:	e8 00 00 00 00       	callq  1ee9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1ee9:	84 c0                	test   %al,%al
    1eeb:	74 08                	je     1ef5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1eed:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1ef3:	eb 06                	jmp    1efb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1ef5:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1efb:	84 db                	test   %bl,%bl
    1efd:	74 0d                	je     1f0c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1eff:	90                   	nop
    1f00:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f04:	48 89 c7             	mov    %rax,%rdi
    1f07:	e8 00 00 00 00       	callq  1f0c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1f0c:	45 84 ed             	test   %r13b,%r13b
    1f0f:	74 0b                	je     1f1c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1f11:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1f17:	e9 87 02 00 00       	jmpq   21a3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1f1c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f23:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1f2a:	48 89 d6             	mov    %rdx,%rsi
    1f2d:	48 89 c7             	mov    %rax,%rdi
    1f30:	e8 00 00 00 00       	callq  1f35 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1f35:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1f3c:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1f3f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f46:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f4d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1f4d:	48 89 c7             	mov    %rax,%rdi
    1f50:	e8 00 00 00 00       	callq  1f55 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1f55:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1f5c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f63:	48 89 d6             	mov    %rdx,%rsi
    1f66:	48 89 c7             	mov    %rax,%rdi
    1f69:	e8 00 00 00 00       	callq  1f6e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1f6e:	89 c3                	mov    %eax,%ebx
    1f70:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f77:	48 89 c7             	mov    %rax,%rdi
    1f7a:	e8 00 00 00 00       	callq  1f7f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1f7f:	84 db                	test   %bl,%bl
    1f81:	74 6c                	je     1fef <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1f83:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f8a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f91 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1f91:	48 89 c7             	mov    %rax,%rdi
    1f94:	e8 00 00 00 00       	callq  1f99 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1f99:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f9d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1fa4:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1fab:	48 89 ce             	mov    %rcx,%rsi
    1fae:	48 89 c7             	mov    %rax,%rdi
    1fb1:	e8 00 00 00 00       	callq  1fb6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1fb6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1fba:	ba 0a 00 00 00       	mov    $0xa,%edx
    1fbf:	be 00 00 00 00       	mov    $0x0,%esi
    1fc4:	48 89 c7             	mov    %rax,%rdi
    1fc7:	e8 00 00 00 00       	callq  1fcc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1fcc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1fd2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1fd6:	48 89 c7             	mov    %rax,%rdi
    1fd9:	e8 00 00 00 00       	callq  1fde <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1fde:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1fe5:	48 89 c7             	mov    %rax,%rdi
    1fe8:	e8 00 00 00 00       	callq  1fed <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1fed:	eb 0b                	jmp    1ffa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1fef:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1ff5:	e9 9a 01 00 00       	jmpq   2194 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1ffa:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2001:	48 89 c7             	mov    %rax,%rdi
    2004:	e8 00 00 00 00       	callq  2009 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2009:	bb 00 00 00 00       	mov    $0x0,%ebx
    200e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2015:	48 89 c7             	mov    %rax,%rdi
    2018:	e8 00 00 00 00       	callq  201d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    201d:	83 f8 05             	cmp    $0x5,%eax
    2020:	75 35                	jne    2057 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    2022:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2026:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    202d:	48 89 d6             	mov    %rdx,%rsi
    2030:	48 89 c7             	mov    %rax,%rdi
    2033:	e8 00 00 00 00       	callq  2038 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    2038:	bb 01 00 00 00       	mov    $0x1,%ebx
    203d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2041:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2048 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    2048:	48 89 c7             	mov    %rax,%rdi
    204b:	e8 00 00 00 00       	callq  2050 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    2050:	83 f0 01             	xor    $0x1,%eax
    2053:	84 c0                	test   %al,%al
    2055:	74 08                	je     205f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    2057:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    205d:	eb 06                	jmp    2065 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    205f:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    2065:	84 db                	test   %bl,%bl
    2067:	74 0d                	je     2076 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2069:	90                   	nop
    206a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    206e:	48 89 c7             	mov    %rax,%rdi
    2071:	e8 00 00 00 00       	callq  2076 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2076:	45 84 ed             	test   %r13b,%r13b
    2079:	0f 84 0f 01 00 00    	je     218e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    207f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2086:	48 89 c7             	mov    %rax,%rdi
    2089:	e8 00 00 00 00       	callq  208e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    208e:	83 f8 04             	cmp    $0x4,%eax
    2091:	0f 94 c0             	sete   %al
    2094:	84 c0                	test   %al,%al
    2096:	0f 84 de 00 00 00    	je     217a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    209c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20a0:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20a7:	48 89 d6             	mov    %rdx,%rsi
    20aa:	48 89 c7             	mov    %rax,%rdi
    20ad:	e8 00 00 00 00       	callq  20b2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    20b2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20b6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20bd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    20bd:	48 89 c7             	mov    %rax,%rdi
    20c0:	e8 00 00 00 00       	callq  20c5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    20c5:	89 c3                	mov    %eax,%ebx
    20c7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20cb:	48 89 c7             	mov    %rax,%rdi
    20ce:	e8 00 00 00 00       	callq  20d3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    20d3:	84 db                	test   %bl,%bl
    20d5:	0f 84 9f 00 00 00    	je     217a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    20db:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    20e2:	48 89 c7             	mov    %rax,%rdi
    20e5:	e8 00 00 00 00       	callq  20ea <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    20ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20ee:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20f5:	48 89 d6             	mov    %rdx,%rsi
    20f8:	48 89 c7             	mov    %rax,%rdi
    20fb:	e8 00 00 00 00       	callq  2100 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    2100:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2104:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2108:	48 89 d6             	mov    %rdx,%rsi
    210b:	48 89 c7             	mov    %rax,%rdi
    210e:	e8 00 00 00 00       	callq  2113 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    2113:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2117:	48 89 c7             	mov    %rax,%rdi
    211a:	e8 00 00 00 00       	callq  211f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    211f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2123:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    212a:	48 89 d6             	mov    %rdx,%rsi
    212d:	48 89 c7             	mov    %rax,%rdi
    2130:	e8 00 00 00 00       	callq  2135 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    2135:	84 c0                	test   %al,%al
    2137:	74 0d                	je     2146 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    2139:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    213f:	bb 00 00 00 00       	mov    $0x0,%ebx
    2144:	eb 22                	jmp    2168 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    2146:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    214d:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    2151:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2158:	48 89 ce             	mov    %rcx,%rsi
    215b:	48 89 c7             	mov    %rax,%rdi
    215e:	e8 00 00 00 00       	callq  2163 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    2163:	bb 01 00 00 00       	mov    $0x1,%ebx
    2168:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    216c:	48 89 c7             	mov    %rax,%rdi
    216f:	e8 00 00 00 00       	callq  2174 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    2174:	83 fb 01             	cmp    $0x1,%ebx
    2177:	75 1b                	jne    2194 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    2179:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    217a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2181:	48 89 c7             	mov    %rax,%rdi
    2184:	e8 00 00 00 00       	callq  2189 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2189:	e9 7b fe ff ff       	jmpq   2009 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    218e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2194:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    219b:	48 89 c7             	mov    %rax,%rdi
    219e:	e8 00 00 00 00       	callq  21a3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    21a3:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    21a6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    21aa:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    21b1:	00 00 
    21b3:	0f 84 d1 00 00 00    	je     228a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    21b9:	e9 c7 00 00 00       	jmpq   2285 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    21be:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    21c1:	84 db                	test   %bl,%bl
    21c3:	74 0f                	je     21d4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    21c5:	90                   	nop
    21c6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    21ca:	48 89 c7             	mov    %rax,%rdi
    21cd:	e8 00 00 00 00       	callq  21d2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    21d2:	eb 01                	jmp    21d5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    21d4:	90                   	nop
    21d5:	4c 89 e0             	mov    %r12,%rax
    21d8:	48 89 c7             	mov    %rax,%rdi
    21db:	e8 00 00 00 00       	callq  21e0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    21e0:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    21e3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    21ea:	48 89 c7             	mov    %rax,%rdi
    21ed:	e8 00 00 00 00       	callq  21f2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    21f2:	eb 77                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21f4:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    21f7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21fb:	48 89 c7             	mov    %rax,%rdi
    21fe:	e8 00 00 00 00       	callq  2203 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    2203:	eb 03                	jmp    2208 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    2205:	48 89 c3             	mov    %rax,%rbx
    2208:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    220f:	48 89 c7             	mov    %rax,%rdi
    2212:	e8 00 00 00 00       	callq  2217 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    2217:	eb 52                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2219:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    221c:	84 db                	test   %bl,%bl
    221e:	74 0f                	je     222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    2220:	90                   	nop
    2221:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2225:	48 89 c7             	mov    %rax,%rdi
    2228:	e8 00 00 00 00       	callq  222d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    222d:	eb 01                	jmp    2230 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    222f:	90                   	nop
    2230:	4c 89 e3             	mov    %r12,%rbx
    2233:	eb 36                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2235:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    2238:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    223c:	48 89 c7             	mov    %rax,%rdi
    223f:	e8 00 00 00 00       	callq  2244 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    2244:	eb 25                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2246:	48 89 c3             	mov    %rax,%rbx
    2249:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    224d:	48 89 c7             	mov    %rax,%rdi
    2250:	e8 00 00 00 00       	callq  2255 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    2255:	eb 14                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2257:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    225a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    225e:	48 89 c7             	mov    %rax,%rdi
    2261:	e8 00 00 00 00       	callq  2266 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    2266:	eb 03                	jmp    226b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2268:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    226b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2272:	48 89 c7             	mov    %rax,%rdi
    2275:	e8 00 00 00 00       	callq  227a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    227a:	48 89 d8             	mov    %rbx,%rax
    227d:	48 89 c7             	mov    %rax,%rdi
    2280:	e8 00 00 00 00       	callq  2285 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    2285:	e8 00 00 00 00       	callq  228a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    228a:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    2291:	5b                   	pop    %rbx
    2292:	41 5c                	pop    %r12
    2294:	41 5d                	pop    %r13
    2296:	5d                   	pop    %rbp
    2297:	c3                   	retq   

0000000000002298 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    2298:	55                   	push   %rbp
    2299:	48 89 e5             	mov    %rsp,%rbp
    229c:	53                   	push   %rbx
    229d:	48 83 ec 68          	sub    $0x68,%rsp
    22a1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    22a5:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    22a9:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    22ad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    22b4:	00 00 
    22b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    22ba:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    22bc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    22c0:	48 89 c7             	mov    %rax,%rdi
    22c3:	e8 00 00 00 00       	callq  22c8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    22c8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    22cc:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22d0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22d4:	48 89 d6             	mov    %rdx,%rsi
    22d7:	48 89 c7             	mov    %rax,%rdi
    22da:	e8 00 00 00 00       	callq  22df <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    22df:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    22e3:	48 89 c7             	mov    %rax,%rdi
    22e6:	e8 00 00 00 00       	callq  22eb <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    22eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    22ef:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    22f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22f7:	48 89 d6             	mov    %rdx,%rsi
    22fa:	48 89 c7             	mov    %rax,%rdi
    22fd:	e8 00 00 00 00       	callq  2302 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    2302:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2306:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    230a:	48 89 d6             	mov    %rdx,%rsi
    230d:	48 89 c7             	mov    %rax,%rdi
    2310:	e8 00 00 00 00       	callq  2315 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    2315:	84 c0                	test   %al,%al
    2317:	0f 84 d7 00 00 00    	je     23f4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    231d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2321:	48 89 c7             	mov    %rax,%rdi
    2324:	e8 00 00 00 00       	callq  2329 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    2329:	8b 08                	mov    (%rax),%ecx
    232b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    232f:	ba 0a 00 00 00       	mov    $0xa,%edx
    2334:	89 ce                	mov    %ecx,%esi
    2336:	48 89 c7             	mov    %rax,%rdi
    2339:	e8 00 00 00 00       	callq  233e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    233e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2342:	48 89 c7             	mov    %rax,%rdi
    2345:	e8 00 00 00 00       	callq  234a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    234a:	48 89 c2             	mov    %rax,%rdx
    234d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2351:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2358 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    2358:	48 89 c7             	mov    %rax,%rdi
    235b:	e8 00 00 00 00       	callq  2360 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    2360:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2364:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    2368:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 236f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    236f:	48 89 ce             	mov    %rcx,%rsi
    2372:	48 89 c7             	mov    %rax,%rdi
    2375:	e8 00 00 00 00       	callq  237a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    237a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    237e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2382:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    2386:	48 89 ce             	mov    %rcx,%rsi
    2389:	48 89 c7             	mov    %rax,%rdi
    238c:	e8 00 00 00 00       	callq  2391 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    2391:	90                   	nop
    2392:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2396:	48 89 c7             	mov    %rax,%rdi
    2399:	e8 00 00 00 00       	callq  239e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    239e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    23a2:	48 89 c7             	mov    %rax,%rdi
    23a5:	e8 00 00 00 00       	callq  23aa <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    23aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23ae:	48 89 c7             	mov    %rax,%rdi
    23b1:	e8 00 00 00 00       	callq  23b6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    23b6:	eb 3d                	jmp    23f5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    23b8:	48 89 c3             	mov    %rax,%rbx
    23bb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    23bf:	48 89 c7             	mov    %rax,%rdi
    23c2:	e8 00 00 00 00       	callq  23c7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    23c7:	eb 03                	jmp    23cc <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    23c9:	48 89 c3             	mov    %rax,%rbx
    23cc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    23d0:	48 89 c7             	mov    %rax,%rdi
    23d3:	e8 00 00 00 00       	callq  23d8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    23d8:	eb 03                	jmp    23dd <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    23da:	48 89 c3             	mov    %rax,%rbx
    23dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23e1:	48 89 c7             	mov    %rax,%rdi
    23e4:	e8 00 00 00 00       	callq  23e9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    23e9:	48 89 d8             	mov    %rbx,%rax
    23ec:	48 89 c7             	mov    %rax,%rdi
    23ef:	e8 00 00 00 00       	callq  23f4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    23f4:	90                   	nop
    23f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    23f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    23fd:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2404:	00 00 
    2406:	74 05                	je     240d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    2408:	e8 00 00 00 00       	callq  240d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    240d:	48 83 c4 68          	add    $0x68,%rsp
    2411:	5b                   	pop    %rbx
    2412:	5d                   	pop    %rbp
    2413:	c3                   	retq   

0000000000002414 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    2414:	55                   	push   %rbp
    2415:	48 89 e5             	mov    %rsp,%rbp
    2418:	53                   	push   %rbx
    2419:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    2420:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    2424:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    2428:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    242f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2436:	00 00 
    2438:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    243c:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    243e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    2442:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2446:	48 89 d6             	mov    %rdx,%rsi
    2449:	48 89 c7             	mov    %rax,%rdi
    244c:	e8 00 00 00 00       	callq  2451 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    2451:	be 10 00 00 00       	mov    $0x10,%esi
    2456:	bf 01 00 00 00       	mov    $0x1,%edi
    245b:	e8 00 00 00 00       	callq  2460 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    2460:	89 c2                	mov    %eax,%edx
    2462:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2466:	89 d6                	mov    %edx,%esi
    2468:	48 89 c7             	mov    %rax,%rdi
    246b:	e8 00 00 00 00       	callq  2470 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    2470:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2474:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2478:	48 89 d6             	mov    %rdx,%rsi
    247b:	48 89 c7             	mov    %rax,%rdi
    247e:	e8 00 00 00 00       	callq  2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    2483:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2487:	48 89 c7             	mov    %rax,%rdi
    248a:	e8 00 00 00 00       	callq  248f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    248f:	83 f0 01             	xor    $0x1,%eax
    2492:	84 c0                	test   %al,%al
    2494:	74 1a                	je     24b0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2496:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    249a:	48 89 c7             	mov    %rax,%rdi
    249d:	e8 00 00 00 00       	callq  24a2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    24a2:	83 f0 01             	xor    $0x1,%eax
    24a5:	84 c0                	test   %al,%al
    24a7:	74 07                	je     24b0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    24a9:	b8 01 00 00 00       	mov    $0x1,%eax
    24ae:	eb 05                	jmp    24b5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    24b0:	b8 00 00 00 00       	mov    $0x0,%eax
    24b5:	84 c0                	test   %al,%al
    24b7:	0f 84 cb 00 00 00    	je     2588 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    24bd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    24c1:	48 89 c7             	mov    %rax,%rdi
    24c4:	e8 00 00 00 00       	callq  24c9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    24c9:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    24cc:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    24d0:	0f 84 a6 00 00 00    	je     257c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    24d6:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    24da:	75 a7                	jne    2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    24dc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24e0:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24e4:	48 89 d6             	mov    %rdx,%rsi
    24e7:	48 89 c7             	mov    %rax,%rdi
    24ea:	e8 00 00 00 00       	callq  24ef <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    24ef:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24fa <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    24fa:	48 89 c7             	mov    %rax,%rdi
    24fd:	e8 00 00 00 00       	callq  2502 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    2502:	89 c3                	mov    %eax,%ebx
    2504:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2508:	48 89 c7             	mov    %rax,%rdi
    250b:	e8 00 00 00 00       	callq  2510 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    2510:	84 db                	test   %bl,%bl
    2512:	75 6e                	jne    2582 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    2514:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2518:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    251c:	48 89 d6             	mov    %rdx,%rsi
    251f:	48 89 c7             	mov    %rax,%rdi
    2522:	e8 00 00 00 00       	callq  2527 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    2527:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    252b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2532 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    2532:	48 89 c7             	mov    %rax,%rdi
    2535:	e8 00 00 00 00       	callq  253a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    253a:	89 c3                	mov    %eax,%ebx
    253c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2540:	48 89 c7             	mov    %rax,%rdi
    2543:	e8 00 00 00 00       	callq  2548 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    2548:	84 db                	test   %bl,%bl
    254a:	0f 84 33 ff ff ff    	je     2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    2550:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    2557:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    255b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    255f:	48 89 ce             	mov    %rcx,%rsi
    2562:	48 89 c7             	mov    %rax,%rdi
    2565:	e8 00 00 00 00       	callq  256a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    256a:	83 f0 01             	xor    $0x1,%eax
    256d:	84 c0                	test   %al,%al
    256f:	0f 84 0e ff ff ff    	je     2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2575:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    257a:	eb 11                	jmp    258d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    257c:	90                   	nop
    257d:	e9 01 ff ff ff       	jmpq   2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    2582:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    2583:	e9 fb fe ff ff       	jmpq   2483 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2588:	bb 01 00 00 00       	mov    $0x1,%ebx
    258d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2591:	48 89 c7             	mov    %rax,%rdi
    2594:	e8 00 00 00 00       	callq  2599 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    2599:	83 fb 01             	cmp    $0x1,%ebx
    259c:	74 07                	je     25a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    259e:	bb 00 00 00 00       	mov    $0x0,%ebx
    25a3:	eb 06                	jmp    25ab <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25a5:	90                   	nop
    25a6:	bb 01 00 00 00       	mov    $0x1,%ebx
    25ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25af:	48 89 c7             	mov    %rax,%rdi
    25b2:	e8 00 00 00 00       	callq  25b7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    25b7:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    25ba:	90                   	nop
                    return;
                }
            }
        }
    }
}
    25bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    25bf:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    25c6:	00 00 
    25c8:	74 54                	je     261e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    25ca:	eb 4d                	jmp    2619 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    25cc:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    25cf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    25d3:	48 89 c7             	mov    %rax,%rdi
    25d6:	e8 00 00 00 00       	callq  25db <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    25db:	eb 14                	jmp    25f1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25dd:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    25e0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25e4:	48 89 c7             	mov    %rax,%rdi
    25e7:	e8 00 00 00 00       	callq  25ec <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    25ec:	eb 03                	jmp    25f1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25ee:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25f5:	48 89 c7             	mov    %rax,%rdi
    25f8:	e8 00 00 00 00       	callq  25fd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    25fd:	eb 03                	jmp    2602 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    25ff:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    2602:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2606:	48 89 c7             	mov    %rax,%rdi
    2609:	e8 00 00 00 00       	callq  260e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    260e:	48 89 d8             	mov    %rbx,%rax
    2611:	48 89 c7             	mov    %rax,%rdi
    2614:	e8 00 00 00 00       	callq  2619 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    2619:	e8 00 00 00 00       	callq  261e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    261e:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    2625:	5b                   	pop    %rbx
    2626:	5d                   	pop    %rbp
    2627:	c3                   	retq   

0000000000002628 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    2628:	55                   	push   %rbp
    2629:	48 89 e5             	mov    %rsp,%rbp
    262c:	53                   	push   %rbx
    262d:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    2634:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    263b:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    2642:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    2649:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    264f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2656:	00 00 
    2658:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    265c:	31 c0                	xor    %eax,%eax


    QString str = Block;
    265e:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    2665:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    266c:	48 89 d6             	mov    %rdx,%rsi
    266f:	48 89 c7             	mov    %rax,%rdi
    2672:	e8 00 00 00 00       	callq  2677 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    2677:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    267e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2685:	48 89 d6             	mov    %rdx,%rsi
    2688:	48 89 c7             	mov    %rax,%rdi
    268b:	e8 00 00 00 00       	callq  2690 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    2690:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2697:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 269e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    269e:	48 89 c7             	mov    %rax,%rdi
    26a1:	e8 00 00 00 00       	callq  26a6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    26a6:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    26ad:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    26b4:	b9 00 00 00 00       	mov    $0x0,%ecx
    26b9:	ba 01 00 00 00       	mov    $0x1,%edx
    26be:	48 89 c7             	mov    %rax,%rdi
    26c1:	e8 00 00 00 00       	callq  26c6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    26c6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    26cd:	48 89 c7             	mov    %rax,%rdi
    26d0:	e8 00 00 00 00       	callq  26d5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    26d5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    26dc:	be 01 00 00 00       	mov    $0x1,%esi
    26e1:	48 89 c7             	mov    %rax,%rdi
    26e4:	e8 00 00 00 00       	callq  26e9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    26e9:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    26f0:	48 89 c7             	mov    %rax,%rdi
    26f3:	e8 00 00 00 00       	callq  26f8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    26f8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26ff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2706 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    2706:	48 89 c7             	mov    %rax,%rdi
    2709:	e8 00 00 00 00       	callq  270e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    270e:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    2715:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    271c:	b9 00 00 00 00       	mov    $0x0,%ecx
    2721:	ba 01 00 00 00       	mov    $0x1,%edx
    2726:	48 89 c7             	mov    %rax,%rdi
    2729:	e8 00 00 00 00       	callq  272e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    272e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2735:	48 89 c7             	mov    %rax,%rdi
    2738:	e8 00 00 00 00       	callq  273d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    273d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2744:	48 89 c7             	mov    %rax,%rdi
    2747:	e8 00 00 00 00       	callq  274c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    274c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2753:	48 89 c7             	mov    %rax,%rdi
    2756:	e8 00 00 00 00       	callq  275b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    275b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2762:	48 89 c7             	mov    %rax,%rdi
    2765:	e8 00 00 00 00       	callq  276a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    276a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2771:	48 89 c7             	mov    %rax,%rdi
    2774:	e8 00 00 00 00       	callq  2779 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    2779:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2780:	00 00 00 
    int lineInner = 0;
    2783:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    278a:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    278d:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2794:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    279b:	b9 00 00 00 00       	mov    $0x0,%ecx
    27a0:	ba 00 00 00 00       	mov    $0x0,%edx
    27a5:	48 89 c7             	mov    %rax,%rdi
    27a8:	e8 00 00 00 00       	callq  27ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    27ad:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    27b3:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    27ba:	0f 88 35 03 00 00    	js     2af5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    27c0:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    27c6:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    27cc:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    27cf:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    27d6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27da:	48 89 d6             	mov    %rdx,%rsi
    27dd:	48 89 c7             	mov    %rax,%rdi
    27e0:	e8 00 00 00 00       	callq  27e5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    27e5:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    27e9:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    27f0:	89 da                	mov    %ebx,%edx
    27f2:	48 89 ce             	mov    %rcx,%rsi
    27f5:	48 89 c7             	mov    %rax,%rdi
    27f8:	e8 00 00 00 00       	callq  27fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    27fd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    2803:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2807:	48 89 c7             	mov    %rax,%rdi
    280a:	e8 00 00 00 00       	callq  280f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    280f:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2816:	75 0c                	jne    2824 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    2818:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    281e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    2824:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2828:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    282f:	ba 00 00 00 00       	mov    $0x0,%edx
    2834:	48 89 ce             	mov    %rcx,%rsi
    2837:	48 89 c7             	mov    %rax,%rdi
    283a:	e8 00 00 00 00       	callq  283f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    283f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2843:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    284a:	48 89 d6             	mov    %rdx,%rsi
    284d:	48 89 c7             	mov    %rax,%rdi
    2850:	e8 00 00 00 00       	callq  2855 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    2855:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2859:	48 89 c7             	mov    %rax,%rdi
    285c:	e8 00 00 00 00       	callq  2861 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    2861:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2868:	48 89 c7             	mov    %rax,%rdi
    286b:	e8 00 00 00 00       	callq  2870 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    2870:	89 c3                	mov    %eax,%ebx
    2872:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2879:	48 89 c7             	mov    %rax,%rdi
    287c:	e8 00 00 00 00       	callq  2881 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    2881:	89 da                	mov    %ebx,%edx
    2883:	29 c2                	sub    %eax,%edx
    2885:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2889:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2890:	48 89 ce             	mov    %rcx,%rsi
    2893:	48 89 c7             	mov    %rax,%rdi
    2896:	e8 00 00 00 00       	callq  289b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    289b:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    289f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    28a6:	48 89 d6             	mov    %rdx,%rsi
    28a9:	48 89 c7             	mov    %rax,%rdi
    28ac:	e8 00 00 00 00       	callq  28b1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    28b1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    28b5:	48 89 c7             	mov    %rax,%rdi
    28b8:	e8 00 00 00 00       	callq  28bd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    28bd:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    28c4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    28cb:	b9 00 00 00 00       	mov    $0x0,%ecx
    28d0:	ba 00 00 00 00       	mov    $0x0,%edx
    28d5:	48 89 c7             	mov    %rax,%rdi
    28d8:	e8 00 00 00 00       	callq  28dd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    28dd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28e1:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    28e8:	ba 00 00 00 00       	mov    $0x0,%edx
    28ed:	48 89 ce             	mov    %rcx,%rsi
    28f0:	48 89 c7             	mov    %rax,%rdi
    28f3:	e8 00 00 00 00       	callq  28f8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    28f8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    28fc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2903:	48 89 d6             	mov    %rdx,%rsi
    2906:	48 89 c7             	mov    %rax,%rdi
    2909:	e8 00 00 00 00       	callq  290e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    290e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2912:	48 89 c7             	mov    %rax,%rdi
    2915:	e8 00 00 00 00       	callq  291a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    291a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    291e:	be 7b 00 00 00       	mov    $0x7b,%esi
    2923:	48 89 c7             	mov    %rax,%rdi
    2926:	e8 00 00 00 00       	callq  292b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    292b:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2931:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    2935:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    293c:	b9 01 00 00 00       	mov    $0x1,%ecx
    2941:	48 89 c7             	mov    %rax,%rdi
    2944:	e8 00 00 00 00       	callq  2949 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    2949:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    294f:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2955:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    295c:	89 d6                	mov    %edx,%esi
    295e:	48 89 c7             	mov    %rax,%rdi
    2961:	e8 00 00 00 00       	callq  2966 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    2966:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    296a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    296e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2972:	48 89 c7             	mov    %rax,%rdi
    2975:	e8 00 00 00 00       	callq  297a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    297a:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    2981:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    2988:	00 00 00 
        int br=0;
    298b:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    2992:	00 00 00 

        while(bl != br)
    2995:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    299b:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    29a1:	0f 84 a2 00 00 00    	je     2a49 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    29a7:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    29ae:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    29b4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    29bb:	89 d6                	mov    %edx,%esi
    29bd:	48 89 c7             	mov    %rax,%rdi
    29c0:	e8 00 00 00 00       	callq  29c5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    29c5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    29c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    29cd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29d1:	48 89 c7             	mov    %rax,%rdi
    29d4:	e8 00 00 00 00       	callq  29d9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    29d9:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    29e0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29e4:	be 7b 00 00 00       	mov    $0x7b,%esi
    29e9:	48 89 c7             	mov    %rax,%rdi
    29ec:	e8 00 00 00 00       	callq  29f1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    29f1:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29f5:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29fc:	89 d6                	mov    %edx,%esi
    29fe:	89 c7                	mov    %eax,%edi
    2a00:	e8 00 00 00 00       	callq  2a05 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    2a05:	84 c0                	test   %al,%al
    2a07:	74 07                	je     2a10 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    2a09:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    2a10:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a14:	be 7d 00 00 00       	mov    $0x7d,%esi
    2a19:	48 89 c7             	mov    %rax,%rdi
    2a1c:	e8 00 00 00 00       	callq  2a21 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    2a21:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2a25:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    2a2c:	89 d6                	mov    %edx,%esi
    2a2e:	89 c7                	mov    %eax,%edi
    2a30:	e8 00 00 00 00       	callq  2a35 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    2a35:	84 c0                	test   %al,%al
    2a37:	0f 84 58 ff ff ff    	je     2995 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    2a3d:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    2a44:	e9 4c ff ff ff       	jmpq   2995 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2a49:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a4f:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2a55:	89 c1                	mov    %eax,%ecx
    2a57:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a5b:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2a61:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2a68:	48 89 c7             	mov    %rax,%rdi
    2a6b:	e8 00 00 00 00       	callq  2a70 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2a70:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a74:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2a7b:	48 89 d6             	mov    %rdx,%rsi
    2a7e:	48 89 c7             	mov    %rax,%rdi
    2a81:	e8 00 00 00 00       	callq  2a86 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2a86:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a8a:	48 89 c7             	mov    %rax,%rdi
    2a8d:	e8 00 00 00 00       	callq  2a92 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2a92:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a99:	48 89 c7             	mov    %rax,%rdi
    2a9c:	e8 00 00 00 00       	callq  2aa1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2aa1:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2aa7:	89 c2                	mov    %eax,%edx
    2aa9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2aad:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2ab4:	48 89 ce             	mov    %rcx,%rsi
    2ab7:	48 89 c7             	mov    %rax,%rdi
    2aba:	e8 00 00 00 00       	callq  2abf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2abf:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2ac3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2aca:	48 89 d6             	mov    %rdx,%rsi
    2acd:	48 89 c7             	mov    %rax,%rdi
    2ad0:	e8 00 00 00 00       	callq  2ad5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2ad5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2ad9:	48 89 c7             	mov    %rax,%rdi
    2adc:	e8 00 00 00 00       	callq  2ae1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2ae1:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2ae7:	83 c0 01             	add    $0x1,%eax
    2aea:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2af0:	e9 98 fc ff ff       	jmpq   278d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2af5:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2af6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2afd:	48 89 c7             	mov    %rax,%rdi
    2b00:	e8 00 00 00 00       	callq  2b05 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2b05:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2b0c:	48 89 c7             	mov    %rax,%rdi
    2b0f:	e8 00 00 00 00       	callq  2b14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2b14:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2b1b:	48 89 c7             	mov    %rax,%rdi
    2b1e:	e8 00 00 00 00       	callq  2b23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2b23:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2b2a:	48 89 c7             	mov    %rax,%rdi
    2b2d:	e8 00 00 00 00       	callq  2b32 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2b32:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2b39:	48 89 c7             	mov    %rax,%rdi
    2b3c:	e8 00 00 00 00       	callq  2b41 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2b41:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b48:	48 89 c7             	mov    %rax,%rdi
    2b4b:	e8 00 00 00 00       	callq  2b50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2b50:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b57:	48 89 c7             	mov    %rax,%rdi
    2b5a:	e8 00 00 00 00       	callq  2b5f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2b5f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b66:	48 89 c7             	mov    %rax,%rdi
    2b69:	e8 00 00 00 00       	callq  2b6e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b6e:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b73:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2b7a:	00 00 
    2b7c:	0f 84 75 01 00 00    	je     2cf7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2b82:	e9 6b 01 00 00       	jmpq   2cf2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2b87:	48 89 c3             	mov    %rax,%rbx
    2b8a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b91:	48 89 c7             	mov    %rax,%rdi
    2b94:	e8 00 00 00 00       	callq  2b99 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2b99:	e9 26 01 00 00       	jmpq   2cc4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b9e:	48 89 c3             	mov    %rax,%rbx
    2ba1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2ba8:	48 89 c7             	mov    %rax,%rdi
    2bab:	e8 00 00 00 00       	callq  2bb0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2bb0:	e9 0f 01 00 00       	jmpq   2cc4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2bb5:	48 89 c3             	mov    %rax,%rbx
    2bb8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2bbf:	48 89 c7             	mov    %rax,%rdi
    2bc2:	e8 00 00 00 00       	callq  2bc7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2bc7:	e9 e4 00 00 00       	jmpq   2cb0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2bcc:	48 89 c3             	mov    %rax,%rbx
    2bcf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2bd6:	48 89 c7             	mov    %rax,%rdi
    2bd9:	e8 00 00 00 00       	callq  2bde <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2bde:	e9 cd 00 00 00       	jmpq   2cb0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2be3:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2be6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2bea:	48 89 c7             	mov    %rax,%rdi
    2bed:	e8 00 00 00 00       	callq  2bf2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2bf2:	eb 58                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bf4:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2bf7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2bfb:	48 89 c7             	mov    %rax,%rdi
    2bfe:	e8 00 00 00 00       	callq  2c03 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2c03:	eb 47                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c05:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2c08:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2c0c:	48 89 c7             	mov    %rax,%rdi
    2c0f:	e8 00 00 00 00       	callq  2c14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2c14:	eb 36                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c16:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2c19:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2c1d:	48 89 c7             	mov    %rax,%rdi
    2c20:	e8 00 00 00 00       	callq  2c25 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2c25:	eb 25                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c27:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2c2a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2c2e:	48 89 c7             	mov    %rax,%rdi
    2c31:	e8 00 00 00 00       	callq  2c36 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2c36:	eb 14                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c38:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2c3b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2c3f:	48 89 c7             	mov    %rax,%rdi
    2c42:	e8 00 00 00 00       	callq  2c47 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2c47:	eb 03                	jmp    2c4c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c49:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2c4c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c53:	48 89 c7             	mov    %rax,%rdi
    2c56:	e8 00 00 00 00       	callq  2c5b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2c5b:	eb 03                	jmp    2c60 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2c5d:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2c60:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2c67:	48 89 c7             	mov    %rax,%rdi
    2c6a:	e8 00 00 00 00       	callq  2c6f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2c6f:	eb 03                	jmp    2c74 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2c71:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2c74:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c7b:	48 89 c7             	mov    %rax,%rdi
    2c7e:	e8 00 00 00 00       	callq  2c83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2c83:	eb 03                	jmp    2c88 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2c85:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2c88:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c8f:	48 89 c7             	mov    %rax,%rdi
    2c92:	e8 00 00 00 00       	callq  2c97 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2c97:	eb 03                	jmp    2c9c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2c99:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2c9c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2ca3:	48 89 c7             	mov    %rax,%rdi
    2ca6:	e8 00 00 00 00       	callq  2cab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2cab:	eb 03                	jmp    2cb0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2cad:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2cb0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2cb7:	48 89 c7             	mov    %rax,%rdi
    2cba:	e8 00 00 00 00       	callq  2cbf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2cbf:	eb 03                	jmp    2cc4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2cc1:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2cc4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2ccb:	48 89 c7             	mov    %rax,%rdi
    2cce:	e8 00 00 00 00       	callq  2cd3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2cd3:	eb 03                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2cd5:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2cd8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2cdf:	48 89 c7             	mov    %rax,%rdi
    2ce2:	e8 00 00 00 00       	callq  2ce7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2ce7:	48 89 d8             	mov    %rbx,%rax
    2cea:	48 89 c7             	mov    %rax,%rdi
    2ced:	e8 00 00 00 00       	callq  2cf2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2cf2:	e8 00 00 00 00       	callq  2cf7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2cf7:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2cfe:	5b                   	pop    %rbx
    2cff:	5d                   	pop    %rbp
    2d00:	c3                   	retq   
    2d01:	90                   	nop

0000000000002d02 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2d02:	55                   	push   %rbp
    2d03:	48 89 e5             	mov    %rsp,%rbp
    2d06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2d0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2d0e:	90                   	nop
    2d0f:	5d                   	pop    %rbp
    2d10:	c3                   	retq   
    2d11:	90                   	nop

0000000000002d12 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2d12:	55                   	push   %rbp
    2d13:	48 89 e5             	mov    %rsp,%rbp
    2d16:	53                   	push   %rbx
    2d17:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2d1e:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2d25:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2d2c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2d33:	00 00 
    2d35:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2d39:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2d3b:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2d42:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d49:	48 89 d6             	mov    %rdx,%rsi
    2d4c:	48 89 c7             	mov    %rax,%rdi
    2d4f:	e8 00 00 00 00       	callq  2d54 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2d54:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2d5b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d62:	48 89 d6             	mov    %rdx,%rsi
    2d65:	48 89 c7             	mov    %rax,%rdi
    2d68:	e8 00 00 00 00       	callq  2d6d <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2d6d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d74:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d7b <_ZN6Parser11splitBlocksE7QString+0x69>
    2d7b:	48 89 c7             	mov    %rax,%rdi
    2d7e:	e8 00 00 00 00       	callq  2d83 <_ZN6Parser11splitBlocksE7QString+0x71>
    2d83:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2d8a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d91:	ba 01 00 00 00       	mov    $0x1,%edx
    2d96:	48 89 ce             	mov    %rcx,%rsi
    2d99:	48 89 c7             	mov    %rax,%rdi
    2d9c:	e8 00 00 00 00       	callq  2da1 <_ZN6Parser11splitBlocksE7QString+0x8f>
    2da1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2da7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2dae:	48 89 c7             	mov    %rax,%rdi
    2db1:	e8 00 00 00 00       	callq  2db6 <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2db6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2dbd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dc4 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2dc4:	48 89 c7             	mov    %rax,%rdi
    2dc7:	e8 00 00 00 00       	callq  2dcc <_ZN6Parser11splitBlocksE7QString+0xba>
    2dcc:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2dd3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2dda:	ba 01 00 00 00       	mov    $0x1,%edx
    2ddf:	48 89 ce             	mov    %rcx,%rsi
    2de2:	48 89 c7             	mov    %rax,%rdi
    2de5:	e8 00 00 00 00       	callq  2dea <_ZN6Parser11splitBlocksE7QString+0xd8>
    2dea:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2df0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2df7:	48 89 c7             	mov    %rax,%rdi
    2dfa:	e8 00 00 00 00       	callq  2dff <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2dff:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2e06:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e0d <_ZN6Parser11splitBlocksE7QString+0xfb>
    2e0d:	48 89 c7             	mov    %rax,%rdi
    2e10:	e8 00 00 00 00       	callq  2e15 <_ZN6Parser11splitBlocksE7QString+0x103>
    2e15:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2e1c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e23:	ba 01 00 00 00       	mov    $0x1,%edx
    2e28:	48 89 ce             	mov    %rcx,%rsi
    2e2b:	48 89 c7             	mov    %rax,%rdi
    2e2e:	e8 00 00 00 00       	callq  2e33 <_ZN6Parser11splitBlocksE7QString+0x121>
    2e33:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2e39:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2e40:	48 89 c7             	mov    %rax,%rdi
    2e43:	e8 00 00 00 00       	callq  2e48 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2e48:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e4f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e56 <_ZN6Parser11splitBlocksE7QString+0x144>
    2e56:	48 89 c7             	mov    %rax,%rdi
    2e59:	e8 00 00 00 00       	callq  2e5e <_ZN6Parser11splitBlocksE7QString+0x14c>
    2e5e:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2e65:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e6c:	ba 01 00 00 00       	mov    $0x1,%edx
    2e71:	48 89 ce             	mov    %rcx,%rsi
    2e74:	48 89 c7             	mov    %rax,%rdi
    2e77:	e8 00 00 00 00       	callq  2e7c <_ZN6Parser11splitBlocksE7QString+0x16a>
    2e7c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2e82:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e89:	48 89 c7             	mov    %rax,%rdi
    2e8c:	e8 00 00 00 00       	callq  2e91 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2e91:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2e97:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2e9d:	74 43                	je     2ee2 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2e9f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2ea6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ead <_ZN6Parser11splitBlocksE7QString+0x19b>
    2ead:	48 89 c7             	mov    %rax,%rdi
    2eb0:	e8 00 00 00 00       	callq  2eb5 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2eb5:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2ebc:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ec3:	48 89 d6             	mov    %rdx,%rsi
    2ec6:	48 89 c7             	mov    %rax,%rdi
    2ec9:	e8 00 00 00 00       	callq  2ece <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2ece:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2ed5:	48 89 c7             	mov    %rax,%rdi
    2ed8:	e8 00 00 00 00       	callq  2edd <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2edd:	e9 cf 03 00 00       	jmpq   32b1 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2ee2:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2ee8:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2eee:	74 43                	je     2f33 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2ef0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ef7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2efe <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2efe:	48 89 c7             	mov    %rax,%rdi
    2f01:	e8 00 00 00 00       	callq  2f06 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2f06:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2f0d:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2f14:	48 89 d6             	mov    %rdx,%rsi
    2f17:	48 89 c7             	mov    %rax,%rdi
    2f1a:	e8 00 00 00 00       	callq  2f1f <_ZN6Parser11splitBlocksE7QString+0x20d>
    2f1f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2f26:	48 89 c7             	mov    %rax,%rdi
    2f29:	e8 00 00 00 00       	callq  2f2e <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2f2e:	e9 7e 03 00 00       	jmpq   32b1 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2f33:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2f3a:	48 89 c7             	mov    %rax,%rdi
    2f3d:	e8 00 00 00 00       	callq  2f42 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2f42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f49:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f50 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2f50:	48 89 c7             	mov    %rax,%rdi
    2f53:	e8 00 00 00 00       	callq  2f58 <_ZN6Parser11splitBlocksE7QString+0x246>
    2f58:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2f5f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f66:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f6b:	ba 01 00 00 00       	mov    $0x1,%edx
    2f70:	48 89 c7             	mov    %rax,%rdi
    2f73:	e8 00 00 00 00       	callq  2f78 <_ZN6Parser11splitBlocksE7QString+0x266>
    2f78:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f7f:	48 89 c7             	mov    %rax,%rdi
    2f82:	e8 00 00 00 00       	callq  2f87 <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2f87:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2f8e:	00 00 00 
    QString blockName;
    2f91:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2f95:	48 89 c7             	mov    %rax,%rdi
    2f98:	e8 00 00 00 00       	callq  2f9d <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2f9d:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2fa4:	48 89 c7             	mov    %rax,%rdi
    2fa7:	e8 00 00 00 00       	callq  2fac <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2fac:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2fb3:	00 00 00 
    int     line     = 0;
    2fb6:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2fbd:	00 00 00 
    QString block;
    2fc0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2fc4:	48 89 c7             	mov    %rax,%rdi
    2fc7:	e8 00 00 00 00       	callq  2fcc <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2fcc:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2fd3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2fda:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fdf:	ba 00 00 00 00       	mov    $0x0,%edx
    2fe4:	48 89 c7             	mov    %rax,%rdi
    2fe7:	e8 00 00 00 00       	callq  2fec <_ZN6Parser11splitBlocksE7QString+0x2da>
    2fec:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2ff2:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2ff9:	0f 88 7b 02 00 00    	js     327a <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    2fff:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    3005:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    300b:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    300e:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    3015:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3019:	48 89 d6             	mov    %rdx,%rsi
    301c:	48 89 c7             	mov    %rax,%rdi
    301f:	e8 00 00 00 00       	callq  3024 <_ZN6Parser11splitBlocksE7QString+0x312>
    3024:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    3028:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    302f:	89 da                	mov    %ebx,%edx
    3031:	48 89 ce             	mov    %rcx,%rsi
    3034:	48 89 c7             	mov    %rax,%rdi
    3037:	e8 00 00 00 00       	callq  303c <_ZN6Parser11splitBlocksE7QString+0x32a>
    303c:	83 c0 01             	add    $0x1,%eax
    303f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    3045:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3049:	48 89 c7             	mov    %rax,%rdi
    304c:	e8 00 00 00 00       	callq  3051 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    3051:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3055:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    305c:	ba 01 00 00 00       	mov    $0x1,%edx
    3061:	48 89 ce             	mov    %rcx,%rsi
    3064:	48 89 c7             	mov    %rax,%rdi
    3067:	e8 00 00 00 00       	callq  306c <_ZN6Parser11splitBlocksE7QString+0x35a>
    306c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3070:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3074:	48 89 d6             	mov    %rdx,%rsi
    3077:	48 89 c7             	mov    %rax,%rdi
    307a:	e8 00 00 00 00       	callq  307f <_ZN6Parser11splitBlocksE7QString+0x36d>
    307f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3083:	48 89 c7             	mov    %rax,%rdi
    3086:	e8 00 00 00 00       	callq  308b <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    308b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    308f:	be 7b 00 00 00       	mov    $0x7b,%esi
    3094:	48 89 c7             	mov    %rax,%rdi
    3097:	e8 00 00 00 00       	callq  309c <_ZN6Parser11splitBlocksE7QString+0x38a>
    309c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    30a2:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    30a6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30ad:	b9 01 00 00 00       	mov    $0x1,%ecx
    30b2:	48 89 c7             	mov    %rax,%rdi
    30b5:	e8 00 00 00 00       	callq  30ba <_ZN6Parser11splitBlocksE7QString+0x3a8>
    30ba:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    30c0:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    30c6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30cd:	89 d6                	mov    %edx,%esi
    30cf:	48 89 c7             	mov    %rax,%rdi
    30d2:	e8 00 00 00 00       	callq  30d7 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    30d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    30db:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    30df:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    30e3:	48 89 c7             	mov    %rax,%rdi
    30e6:	e8 00 00 00 00       	callq  30eb <_ZN6Parser11splitBlocksE7QString+0x3d9>
    30eb:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    30f2:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    30f9:	00 00 00 
        int br=0;
    30fc:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    3103:	00 00 00 

        while(bl != br)
    3106:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    310c:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    3112:	0f 84 a2 00 00 00    	je     31ba <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    3118:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    311f:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    3125:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    312c:	89 d6                	mov    %edx,%esi
    312e:	48 89 c7             	mov    %rax,%rdi
    3131:	e8 00 00 00 00       	callq  3136 <_ZN6Parser11splitBlocksE7QString+0x424>
    3136:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    313a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    313e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3142:	48 89 c7             	mov    %rax,%rdi
    3145:	e8 00 00 00 00       	callq  314a <_ZN6Parser11splitBlocksE7QString+0x438>
    314a:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    3151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3155:	be 7b 00 00 00       	mov    $0x7b,%esi
    315a:	48 89 c7             	mov    %rax,%rdi
    315d:	e8 00 00 00 00       	callq  3162 <_ZN6Parser11splitBlocksE7QString+0x450>
    3162:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3166:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    316d:	89 d6                	mov    %edx,%esi
    316f:	89 c7                	mov    %eax,%edi
    3171:	e8 00 00 00 00       	callq  3176 <_ZN6Parser11splitBlocksE7QString+0x464>
    3176:	84 c0                	test   %al,%al
    3178:	74 07                	je     3181 <_ZN6Parser11splitBlocksE7QString+0x46f>
    317a:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    3181:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3185:	be 7d 00 00 00       	mov    $0x7d,%esi
    318a:	48 89 c7             	mov    %rax,%rdi
    318d:	e8 00 00 00 00       	callq  3192 <_ZN6Parser11splitBlocksE7QString+0x480>
    3192:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3196:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    319d:	89 d6                	mov    %edx,%esi
    319f:	89 c7                	mov    %eax,%edi
    31a1:	e8 00 00 00 00       	callq  31a6 <_ZN6Parser11splitBlocksE7QString+0x494>
    31a6:	84 c0                	test   %al,%al
    31a8:	0f 84 58 ff ff ff    	je     3106 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    31ae:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    31b5:	e9 4c ff ff ff       	jmpq   3106 <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    31ba:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    31c0:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    31c6:	89 c1                	mov    %eax,%ecx
    31c8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31cc:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    31d2:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    31d9:	48 89 c7             	mov    %rax,%rdi
    31dc:	e8 00 00 00 00       	callq  31e1 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    31e1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    31e5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    31e9:	48 89 d6             	mov    %rdx,%rsi
    31ec:	48 89 c7             	mov    %rax,%rdi
    31ef:	e8 00 00 00 00       	callq  31f4 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    31f4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31f8:	48 89 c7             	mov    %rax,%rdi
    31fb:	e8 00 00 00 00       	callq  3200 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    3200:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3207:	48 89 c7             	mov    %rax,%rdi
    320a:	e8 00 00 00 00       	callq  320f <_ZN6Parser11splitBlocksE7QString+0x4fd>
    320f:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    3215:	89 c2                	mov    %eax,%edx
    3217:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    321b:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    3222:	48 89 ce             	mov    %rcx,%rsi
    3225:	48 89 c7             	mov    %rax,%rdi
    3228:	e8 00 00 00 00       	callq  322d <_ZN6Parser11splitBlocksE7QString+0x51b>
    322d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3231:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3238:	48 89 d6             	mov    %rdx,%rsi
    323b:	48 89 c7             	mov    %rax,%rdi
    323e:	e8 00 00 00 00       	callq  3243 <_ZN6Parser11splitBlocksE7QString+0x531>
    3243:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3247:	48 89 c7             	mov    %rax,%rdi
    324a:	e8 00 00 00 00       	callq  324f <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    324f:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3255:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    325b:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    3262:	48 8d 50 70          	lea    0x70(%rax),%rdx
    3266:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    326a:	48 89 c6             	mov    %rax,%rsi
    326d:	48 89 d7             	mov    %rdx,%rdi
    3270:	e8 00 00 00 00       	callq  3275 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    3275:	e9 52 fd ff ff       	jmpq   2fcc <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    327a:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    327b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    327f:	48 89 c7             	mov    %rax,%rdi
    3282:	e8 00 00 00 00       	callq  3287 <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3287:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    328b:	48 89 c7             	mov    %rax,%rdi
    328e:	e8 00 00 00 00       	callq  3293 <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3293:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    329a:	48 89 c7             	mov    %rax,%rdi
    329d:	e8 00 00 00 00       	callq  32a2 <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    32a2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    32a9:	48 89 c7             	mov    %rax,%rdi
    32ac:	e8 00 00 00 00       	callq  32b1 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    32b1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    32b8:	48 89 c7             	mov    %rax,%rdi
    32bb:	e8 00 00 00 00       	callq  32c0 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    32c0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    32c7:	48 89 c7             	mov    %rax,%rdi
    32ca:	e8 00 00 00 00       	callq  32cf <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    32cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    32d3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    32da:	00 00 
    32dc:	0f 84 7e 01 00 00    	je     3460 <_ZN6Parser11splitBlocksE7QString+0x74e>
    32e2:	e9 74 01 00 00       	jmpq   345b <_ZN6Parser11splitBlocksE7QString+0x749>
    32e7:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    32ea:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    32f1:	48 89 c7             	mov    %rax,%rdi
    32f4:	e8 00 00 00 00       	callq  32f9 <_ZN6Parser11splitBlocksE7QString+0x5e7>
    32f9:	e9 2f 01 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    32fe:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    3301:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3308:	48 89 c7             	mov    %rax,%rdi
    330b:	e8 00 00 00 00       	callq  3310 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    3310:	e9 18 01 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    3315:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    3318:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    331f:	48 89 c7             	mov    %rax,%rdi
    3322:	e8 00 00 00 00       	callq  3327 <_ZN6Parser11splitBlocksE7QString+0x615>
    3327:	e9 01 01 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    332c:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    332f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3336:	48 89 c7             	mov    %rax,%rdi
    3339:	e8 00 00 00 00       	callq  333e <_ZN6Parser11splitBlocksE7QString+0x62c>
    333e:	e9 ea 00 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    3343:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    3346:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    334d:	48 89 c7             	mov    %rax,%rdi
    3350:	e8 00 00 00 00       	callq  3355 <_ZN6Parser11splitBlocksE7QString+0x643>
    3355:	e9 d3 00 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    335a:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    335d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3364:	48 89 c7             	mov    %rax,%rdi
    3367:	e8 00 00 00 00       	callq  336c <_ZN6Parser11splitBlocksE7QString+0x65a>
    336c:	e9 bc 00 00 00       	jmpq   342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    3371:	48 89 c3             	mov    %rax,%rbx
    3374:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    337b:	48 89 c7             	mov    %rax,%rdi
    337e:	e8 00 00 00 00       	callq  3383 <_ZN6Parser11splitBlocksE7QString+0x671>
    3383:	e9 91 00 00 00       	jmpq   3419 <_ZN6Parser11splitBlocksE7QString+0x707>
    3388:	48 89 c3             	mov    %rax,%rbx
    338b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3392:	48 89 c7             	mov    %rax,%rdi
    3395:	e8 00 00 00 00       	callq  339a <_ZN6Parser11splitBlocksE7QString+0x688>
    339a:	eb 7d                	jmp    3419 <_ZN6Parser11splitBlocksE7QString+0x707>
    339c:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    339f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    33a3:	48 89 c7             	mov    %rax,%rdi
    33a6:	e8 00 00 00 00       	callq  33ab <_ZN6Parser11splitBlocksE7QString+0x699>
    33ab:	eb 36                	jmp    33e3 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    33ad:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    33b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    33b4:	48 89 c7             	mov    %rax,%rdi
    33b7:	e8 00 00 00 00       	callq  33bc <_ZN6Parser11splitBlocksE7QString+0x6aa>
    33bc:	eb 25                	jmp    33e3 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    33be:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    33c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    33c5:	48 89 c7             	mov    %rax,%rdi
    33c8:	e8 00 00 00 00       	callq  33cd <_ZN6Parser11splitBlocksE7QString+0x6bb>
    33cd:	eb 14                	jmp    33e3 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    33cf:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    33d2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    33d6:	48 89 c7             	mov    %rax,%rdi
    33d9:	e8 00 00 00 00       	callq  33de <_ZN6Parser11splitBlocksE7QString+0x6cc>
    33de:	eb 03                	jmp    33e3 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    33e0:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    33e3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    33e7:	48 89 c7             	mov    %rax,%rdi
    33ea:	e8 00 00 00 00       	callq  33ef <_ZN6Parser11splitBlocksE7QString+0x6dd>
    33ef:	eb 03                	jmp    33f4 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    33f1:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    33f4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33f8:	48 89 c7             	mov    %rax,%rdi
    33fb:	e8 00 00 00 00       	callq  3400 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    3400:	eb 03                	jmp    3405 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    3402:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3405:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    340c:	48 89 c7             	mov    %rax,%rdi
    340f:	e8 00 00 00 00       	callq  3414 <_ZN6Parser11splitBlocksE7QString+0x702>
    3414:	eb 03                	jmp    3419 <_ZN6Parser11splitBlocksE7QString+0x707>
    3416:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    3419:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3420:	48 89 c7             	mov    %rax,%rdi
    3423:	e8 00 00 00 00       	callq  3428 <_ZN6Parser11splitBlocksE7QString+0x716>
    3428:	eb 03                	jmp    342d <_ZN6Parser11splitBlocksE7QString+0x71b>
    342a:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    342d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3434:	48 89 c7             	mov    %rax,%rdi
    3437:	e8 00 00 00 00       	callq  343c <_ZN6Parser11splitBlocksE7QString+0x72a>
    343c:	eb 03                	jmp    3441 <_ZN6Parser11splitBlocksE7QString+0x72f>
    343e:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3441:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3448:	48 89 c7             	mov    %rax,%rdi
    344b:	e8 00 00 00 00       	callq  3450 <_ZN6Parser11splitBlocksE7QString+0x73e>
    3450:	48 89 d8             	mov    %rbx,%rax
    3453:	48 89 c7             	mov    %rax,%rdi
    3456:	e8 00 00 00 00       	callq  345b <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    345b:	e8 00 00 00 00       	callq  3460 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3460:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    3467:	5b                   	pop    %rbx
    3468:	5d                   	pop    %rbp
    3469:	c3                   	retq   

000000000000346a <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    346a:	55                   	push   %rbp
    346b:	48 89 e5             	mov    %rsp,%rbp
    346e:	53                   	push   %rbx
    346f:	48 83 ec 48          	sub    $0x48,%rsp
    3473:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    3477:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    347e:	00 00 
    3480:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3484:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    3486:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    348a:	48 89 c7             	mov    %rax,%rdi
    348d:	e8 00 00 00 00       	callq  3492 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    3492:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3496:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 349d <_ZN6Parser10globalSemsEv+0x33>
    349d:	48 89 c7             	mov    %rax,%rdi
    34a0:	e8 00 00 00 00       	callq  34a5 <_ZN6Parser10globalSemsEv+0x3b>
    34a5:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    34a9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    34ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    34b1:	48 89 ce             	mov    %rcx,%rsi
    34b4:	48 89 c7             	mov    %rax,%rdi
    34b7:	e8 00 00 00 00       	callq  34bc <_ZN6Parser10globalSemsEv+0x52>
    34bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    34c0:	48 89 c7             	mov    %rax,%rdi
    34c3:	e8 00 00 00 00       	callq  34c8 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    34c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34cc:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    34d0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    34d4:	48 89 ce             	mov    %rcx,%rsi
    34d7:	48 89 c7             	mov    %rax,%rdi
    34da:	e8 00 00 00 00       	callq  34df <_ZN6Parser10globalSemsEv+0x75>
    34df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34e3:	48 89 c7             	mov    %rax,%rdi
    34e6:	e8 00 00 00 00       	callq  34eb <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34ef:	48 89 c7             	mov    %rax,%rdi
    34f2:	e8 00 00 00 00       	callq  34f7 <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34f7:	90                   	nop
    34f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34fc:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3503:	00 00 
    3505:	74 32                	je     3539 <_ZN6Parser10globalSemsEv+0xcf>
    3507:	eb 2b                	jmp    3534 <_ZN6Parser10globalSemsEv+0xca>
    3509:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    350c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3510:	48 89 c7             	mov    %rax,%rdi
    3513:	e8 00 00 00 00       	callq  3518 <_ZN6Parser10globalSemsEv+0xae>
    3518:	eb 03                	jmp    351d <_ZN6Parser10globalSemsEv+0xb3>
    351a:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    351d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3521:	48 89 c7             	mov    %rax,%rdi
    3524:	e8 00 00 00 00       	callq  3529 <_ZN6Parser10globalSemsEv+0xbf>
    3529:	48 89 d8             	mov    %rbx,%rax
    352c:	48 89 c7             	mov    %rax,%rdi
    352f:	e8 00 00 00 00       	callq  3534 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    3534:	e8 00 00 00 00       	callq  3539 <_ZN6Parser10globalSemsEv+0xcf>
    3539:	48 83 c4 48          	add    $0x48,%rsp
    353d:	5b                   	pop    %rbx
    353e:	5d                   	pop    %rbp
    353f:	c3                   	retq   

0000000000003540 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    3540:	55                   	push   %rbp
    3541:	48 89 e5             	mov    %rsp,%rbp
    3544:	53                   	push   %rbx
    3545:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    354c:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    3553:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    355a:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    3560:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    3567:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    356e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3575:	00 00 
    3577:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    357b:	31 c0                	xor    %eax,%eax
        QByteArray result;
    357d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3584:	48 89 c7             	mov    %rax,%rdi
    3587:	e8 00 00 00 00       	callq  358c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    358c:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    3592:	0f be d0             	movsbl %al,%edx
    3595:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    359c:	89 d6                	mov    %edx,%esi
    359e:	48 89 c7             	mov    %rax,%rdi
    35a1:	e8 00 00 00 00       	callq  35a6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    35a6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    35ad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35b4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    35b4:	48 89 c7             	mov    %rax,%rdi
    35b7:	e8 00 00 00 00       	callq  35bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    35bc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    35ca:	48 89 c7             	mov    %rax,%rdi
    35cd:	e8 00 00 00 00       	callq  35d2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    35d2:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    35d9:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    35e0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    35e7:	b9 01 00 00 00       	mov    $0x1,%ecx
    35ec:	48 89 c7             	mov    %rax,%rdi
    35ef:	e8 00 00 00 00       	callq  35f4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    35f4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35fb:	48 89 c7             	mov    %rax,%rdi
    35fe:	e8 00 00 00 00       	callq  3603 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    3603:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    360a:	48 89 c7             	mov    %rax,%rdi
    360d:	e8 00 00 00 00       	callq  3612 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    3612:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3619:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3620 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    3620:	48 89 c7             	mov    %rax,%rdi
    3623:	e8 00 00 00 00       	callq  3628 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    3628:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    362f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3636 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    3636:	48 89 c7             	mov    %rax,%rdi
    3639:	e8 00 00 00 00       	callq  363e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    363e:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3645:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    364c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3653:	b9 01 00 00 00       	mov    $0x1,%ecx
    3658:	48 89 c7             	mov    %rax,%rdi
    365b:	e8 00 00 00 00       	callq  3660 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    3660:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3667:	48 89 c7             	mov    %rax,%rdi
    366a:	e8 00 00 00 00       	callq  366f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    366f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3676:	48 89 c7             	mov    %rax,%rdi
    3679:	e8 00 00 00 00       	callq  367e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    367e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3685:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 368c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    368c:	48 89 c7             	mov    %rax,%rdi
    368f:	e8 00 00 00 00       	callq  3694 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    3694:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    369b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36a2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    36a2:	48 89 c7             	mov    %rax,%rdi
    36a5:	e8 00 00 00 00       	callq  36aa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    36aa:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    36b1:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    36b8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36bf:	b9 01 00 00 00       	mov    $0x1,%ecx
    36c4:	48 89 c7             	mov    %rax,%rdi
    36c7:	e8 00 00 00 00       	callq  36cc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    36cc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    36d3:	48 89 c7             	mov    %rax,%rdi
    36d6:	e8 00 00 00 00       	callq  36db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    36db:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    36e2:	48 89 c7             	mov    %rax,%rdi
    36e5:	e8 00 00 00 00       	callq  36ea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    36ea:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36ee:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36f5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    36f5:	48 89 c7             	mov    %rax,%rdi
    36f8:	e8 00 00 00 00       	callq  36fd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    36fd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3701:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3708 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    3708:	48 89 c7             	mov    %rax,%rdi
    370b:	e8 00 00 00 00       	callq  3710 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    3710:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3714:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    3718:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    371f:	b9 00 00 00 00       	mov    $0x0,%ecx
    3724:	48 89 c7             	mov    %rax,%rdi
    3727:	e8 00 00 00 00       	callq  372c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    372c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3730:	48 89 c7             	mov    %rax,%rdi
    3733:	e8 00 00 00 00       	callq  3738 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    3738:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    373c:	48 89 c7             	mov    %rax,%rdi
    373f:	e8 00 00 00 00       	callq  3744 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3744:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3748:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 374f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    374f:	48 89 c7             	mov    %rax,%rdi
    3752:	e8 00 00 00 00       	callq  3757 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    3757:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    375b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3762 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    3762:	48 89 c7             	mov    %rax,%rdi
    3765:	e8 00 00 00 00       	callq  376a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    376a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    376e:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3772:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3779:	b9 00 00 00 00       	mov    $0x0,%ecx
    377e:	48 89 c7             	mov    %rax,%rdi
    3781:	e8 00 00 00 00       	callq  3786 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    3786:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    378a:	48 89 c7             	mov    %rax,%rdi
    378d:	e8 00 00 00 00       	callq  3792 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    3792:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3796:	48 89 c7             	mov    %rax,%rdi
    3799:	e8 00 00 00 00       	callq  379e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    379e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    37a2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    37a9:	48 89 c7             	mov    %rax,%rdi
    37ac:	e8 00 00 00 00       	callq  37b1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    37b1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37b5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    37b9:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    37c0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    37c6:	b9 00 00 00 00       	mov    $0x0,%ecx
    37cb:	48 89 c7             	mov    %rax,%rdi
    37ce:	e8 00 00 00 00       	callq  37d3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    37d3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    37d7:	48 89 c7             	mov    %rax,%rdi
    37da:	e8 00 00 00 00       	callq  37df <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    37df:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    37e6:	00 00 00 
    37e9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37ed:	48 89 c7             	mov    %rax,%rdi
    37f0:	e8 00 00 00 00       	callq  37f5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    37f5:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    37fb:	0f 9f c0             	setg   %al
    37fe:	84 c0                	test   %al,%al
    3800:	74 6e                	je     3870 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    3802:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    3808:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    380c:	89 d6                	mov    %edx,%esi
    380e:	48 89 c7             	mov    %rax,%rdi
    3811:	e8 00 00 00 00       	callq  3816 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    3816:	48 89 c7             	mov    %rax,%rdi
    3819:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    381d:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    3823:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    382a:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    3831:	41 89 c8             	mov    %ecx,%r8d
    3834:	48 89 d1             	mov    %rdx,%rcx
    3837:	48 89 fa             	mov    %rdi,%rdx
    383a:	48 89 c7             	mov    %rax,%rdi
    383d:	e8 00 00 00 00       	callq  3842 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    3842:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    3846:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    384d:	48 89 d6             	mov    %rdx,%rsi
    3850:	48 89 c7             	mov    %rax,%rdi
    3853:	e8 00 00 00 00       	callq  3858 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    3858:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    385c:	48 89 c7             	mov    %rax,%rdi
    385f:	e8 00 00 00 00       	callq  3864 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    3864:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    386b:	e9 79 ff ff ff       	jmpq   37e9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    3870:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3877:	48 89 c7             	mov    %rax,%rdi
    387a:	e8 00 00 00 00       	callq  387f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    387f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    3885:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    388c:	00 00 00 
    388f:	b8 1f 00 00 00       	mov    $0x1f,%eax
    3894:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    389a:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    38a0:	7e 1d                	jle    38bf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    38a2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38a9:	be 00 00 00 00       	mov    $0x0,%esi
    38ae:	48 89 c7             	mov    %rax,%rdi
    38b1:	e8 00 00 00 00       	callq  38b6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    38b6:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    38bd:	eb d0                	jmp    388f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    38bf:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    38c5:	0f be d0             	movsbl %al,%edx
    38c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38cf:	89 d6                	mov    %edx,%esi
    38d1:	48 89 c7             	mov    %rax,%rdi
    38d4:	e8 00 00 00 00       	callq  38d9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    38d9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    38e0:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    38e7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38ee:	48 89 c6             	mov    %rax,%rsi
    38f1:	48 89 d7             	mov    %rdx,%rdi
    38f4:	e8 00 00 00 00       	callq  38f9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    38f9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    38fd:	48 89 c7             	mov    %rax,%rdi
    3900:	e8 00 00 00 00       	callq  3905 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3905:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    390c:	48 89 c7             	mov    %rax,%rdi
    390f:	e8 00 00 00 00       	callq  3914 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3914:	90                   	nop
    3915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3919:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3920:	00 00 
    3922:	0f 84 30 01 00 00    	je     3a58 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3928:	e9 26 01 00 00       	jmpq   3a53 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    392d:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    3930:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3937:	48 89 c7             	mov    %rax,%rdi
    393a:	e8 00 00 00 00       	callq  393f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    393f:	eb 03                	jmp    3944 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    3941:	48 89 c3             	mov    %rax,%rbx
    3944:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    394b:	48 89 c7             	mov    %rax,%rdi
    394e:	e8 00 00 00 00       	callq  3953 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    3953:	e9 e1 00 00 00       	jmpq   3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3958:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    395b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3962:	48 89 c7             	mov    %rax,%rdi
    3965:	e8 00 00 00 00       	callq  396a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    396a:	eb 03                	jmp    396f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    396c:	48 89 c3             	mov    %rax,%rbx
    396f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3976:	48 89 c7             	mov    %rax,%rdi
    3979:	e8 00 00 00 00       	callq  397e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    397e:	e9 b6 00 00 00       	jmpq   3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3983:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    3986:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    398d:	48 89 c7             	mov    %rax,%rdi
    3990:	e8 00 00 00 00       	callq  3995 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    3995:	eb 03                	jmp    399a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    3997:	48 89 c3             	mov    %rax,%rbx
    399a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    39a1:	48 89 c7             	mov    %rax,%rdi
    39a4:	e8 00 00 00 00       	callq  39a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    39a9:	e9 8b 00 00 00       	jmpq   3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39ae:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    39b1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    39b5:	48 89 c7             	mov    %rax,%rdi
    39b8:	e8 00 00 00 00       	callq  39bd <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    39bd:	eb 03                	jmp    39c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    39bf:	48 89 c3             	mov    %rax,%rbx
    39c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    39c6:	48 89 c7             	mov    %rax,%rdi
    39c9:	e8 00 00 00 00       	callq  39ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    39ce:	eb 69                	jmp    3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39d0:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    39d3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    39d7:	48 89 c7             	mov    %rax,%rdi
    39da:	e8 00 00 00 00       	callq  39df <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    39df:	eb 03                	jmp    39e4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    39e1:	48 89 c3             	mov    %rax,%rbx
    39e4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    39e8:	48 89 c7             	mov    %rax,%rdi
    39eb:	e8 00 00 00 00       	callq  39f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    39f0:	eb 47                	jmp    3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39f2:	48 89 c3             	mov    %rax,%rbx
    39f5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39f9:	48 89 c7             	mov    %rax,%rdi
    39fc:	e8 00 00 00 00       	callq  3a01 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    3a01:	eb 36                	jmp    3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a03:	48 89 c3             	mov    %rax,%rbx
    3a06:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3a0a:	48 89 c7             	mov    %rax,%rdi
    3a0d:	e8 00 00 00 00       	callq  3a12 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    3a12:	eb 25                	jmp    3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a14:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    3a17:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3a1b:	48 89 c7             	mov    %rax,%rdi
    3a1e:	e8 00 00 00 00       	callq  3a23 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    3a23:	eb 03                	jmp    3a28 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    3a25:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    3a28:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3a2c:	48 89 c7             	mov    %rax,%rdi
    3a2f:	e8 00 00 00 00       	callq  3a34 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    3a34:	eb 03                	jmp    3a39 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a36:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3a39:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3a40:	48 89 c7             	mov    %rax,%rdi
    3a43:	e8 00 00 00 00       	callq  3a48 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    3a48:	48 89 d8             	mov    %rbx,%rax
    3a4b:	48 89 c7             	mov    %rax,%rdi
    3a4e:	e8 00 00 00 00       	callq  3a53 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3a53:	e8 00 00 00 00       	callq  3a58 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3a58:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3a5f:	5b                   	pop    %rbx
    3a60:	5d                   	pop    %rbp
    3a61:	c3                   	retq   

0000000000003a62 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3a62:	55                   	push   %rbp
    3a63:	48 89 e5             	mov    %rsp,%rbp
    3a66:	53                   	push   %rbx
    3a67:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3a6e:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3a75:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3a7c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3a83:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3a8a:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3a91:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a98:	00 00 
    3a9a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a9e:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3aa0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3aa4:	be 20 00 00 00       	mov    $0x20,%esi
    3aa9:	48 89 c7             	mov    %rax,%rdi
    3aac:	e8 00 00 00 00       	callq  3ab1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3ab1:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3ab5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3abc:	b9 01 00 00 00       	mov    $0x1,%ecx
    3ac1:	ba 00 00 00 00       	mov    $0x0,%edx
    3ac6:	48 89 c7             	mov    %rax,%rdi
    3ac9:	e8 00 00 00 00       	callq  3ace <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3ace:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3ad4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3adb:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3ae1:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3ae8:	89 d1                	mov    %edx,%ecx
    3aea:	ba 00 00 00 00       	mov    $0x0,%edx
    3aef:	48 89 c7             	mov    %rax,%rdi
    3af2:	e8 00 00 00 00       	callq  3af7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3af7:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3afe:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3b01:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b05:	be 28 00 00 00       	mov    $0x28,%esi
    3b0a:	48 89 c7             	mov    %rax,%rdi
    3b0d:	e8 00 00 00 00       	callq  3b12 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3b12:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b18:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b1c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b23:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b28:	48 89 c7             	mov    %rax,%rdi
    3b2b:	e8 00 00 00 00       	callq  3b30 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3b30:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3b36:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b3c:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b42:	89 c1                	mov    %eax,%ecx
    3b44:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b48:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b4e:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b55:	48 89 c7             	mov    %rax,%rdi
    3b58:	e8 00 00 00 00       	callq  3b5d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3b5d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b61:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b65:	48 89 d6             	mov    %rdx,%rsi
    3b68:	48 89 c7             	mov    %rax,%rdi
    3b6b:	e8 00 00 00 00       	callq  3b70 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3b70:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b74:	48 89 c7             	mov    %rax,%rdi
    3b77:	e8 00 00 00 00       	callq  3b7c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3b7c:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b82:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3b88:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b8c:	be 29 00 00 00       	mov    $0x29,%esi
    3b91:	48 89 c7             	mov    %rax,%rdi
    3b94:	e8 00 00 00 00       	callq  3b99 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3b99:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b9f:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3ba3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3baa:	b9 01 00 00 00       	mov    $0x1,%ecx
    3baf:	48 89 c7             	mov    %rax,%rdi
    3bb2:	e8 00 00 00 00       	callq  3bb7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3bb7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3bbd:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3bc3:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3bc9:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3bcc:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3bd2:	8d 50 01             	lea    0x1(%rax),%edx
    3bd5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3bd9:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3be0:	48 89 c7             	mov    %rax,%rdi
    3be3:	e8 00 00 00 00       	callq  3be8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3be8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bec:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3bf3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3bf3:	48 89 c7             	mov    %rax,%rdi
    3bf6:	e8 00 00 00 00       	callq  3bfb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3bfb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3bff:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3c03:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3c07:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3c0d:	b9 01 00 00 00       	mov    $0x1,%ecx
    3c12:	48 89 c7             	mov    %rax,%rdi
    3c15:	e8 00 00 00 00       	callq  3c1a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3c1a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3c1e:	48 89 c7             	mov    %rax,%rdi
    3c21:	e8 00 00 00 00       	callq  3c26 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3c26:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3c2a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c2e:	48 89 d6             	mov    %rdx,%rsi
    3c31:	48 89 c7             	mov    %rax,%rdi
    3c34:	e8 00 00 00 00       	callq  3c39 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3c39:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3c3d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c41:	48 89 d6             	mov    %rdx,%rsi
    3c44:	48 89 c7             	mov    %rax,%rdi
    3c47:	e8 00 00 00 00       	callq  3c4c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3c4c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c53:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3c5a:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3c61:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3c65:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c69:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3c70:	45 89 c1             	mov    %r8d,%r9d
    3c73:	49 89 f8             	mov    %rdi,%r8
    3c76:	48 89 c7             	mov    %rax,%rdi
    3c79:	e8 00 00 00 00       	callq  3c7e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3c7e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c82:	48 89 c7             	mov    %rax,%rdi
    3c85:	e8 00 00 00 00       	callq  3c8a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3c8a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c8e:	48 89 c7             	mov    %rax,%rdi
    3c91:	e8 00 00 00 00       	callq  3c96 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3c96:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c97:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c9b:	48 89 c7             	mov    %rax,%rdi
    3c9e:	e8 00 00 00 00       	callq  3ca3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3ca3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ca7:	48 89 c7             	mov    %rax,%rdi
    3caa:	e8 00 00 00 00       	callq  3caf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3caf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3cb3:	48 89 c7             	mov    %rax,%rdi
    3cb6:	e8 00 00 00 00       	callq  3cbb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3cbb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3cc2:	48 89 c7             	mov    %rax,%rdi
    3cc5:	e8 00 00 00 00       	callq  3cca <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3cca:	90                   	nop
}
    3ccb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3cd2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3cd6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3cdd:	00 00 
    3cdf:	0f 84 ee 00 00 00    	je     3dd3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3ce5:	e9 e4 00 00 00       	jmpq   3dce <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3cea:	48 89 c3             	mov    %rax,%rbx
    3ced:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3cf1:	48 89 c7             	mov    %rax,%rdi
    3cf4:	e8 00 00 00 00       	callq  3cf9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3cf9:	e9 b6 00 00 00       	jmpq   3db4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cfe:	48 89 c3             	mov    %rax,%rbx
    3d01:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d05:	48 89 c7             	mov    %rax,%rdi
    3d08:	e8 00 00 00 00       	callq  3d0d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3d0d:	e9 a2 00 00 00       	jmpq   3db4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d12:	48 89 c3             	mov    %rax,%rbx
    3d15:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3d19:	48 89 c7             	mov    %rax,%rdi
    3d1c:	e8 00 00 00 00       	callq  3d21 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3d21:	eb 6f                	jmp    3d92 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d23:	48 89 c3             	mov    %rax,%rbx
    3d26:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d2a:	48 89 c7             	mov    %rax,%rdi
    3d2d:	e8 00 00 00 00       	callq  3d32 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3d32:	eb 5e                	jmp    3d92 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d34:	48 89 c3             	mov    %rax,%rbx
    3d37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3d3b:	48 89 c7             	mov    %rax,%rdi
    3d3e:	e8 00 00 00 00       	callq  3d43 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3d43:	eb 17                	jmp    3d5c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d45:	48 89 c3             	mov    %rax,%rbx
    3d48:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d4f:	48 89 c7             	mov    %rax,%rdi
    3d52:	e8 00 00 00 00       	callq  3d57 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3d57:	eb 03                	jmp    3d5c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d59:	48 89 c3             	mov    %rax,%rbx
    3d5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d60:	48 89 c7             	mov    %rax,%rdi
    3d63:	e8 00 00 00 00       	callq  3d68 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3d68:	eb 17                	jmp    3d81 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d6a:	48 89 c3             	mov    %rax,%rbx
    3d6d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d74:	48 89 c7             	mov    %rax,%rdi
    3d77:	e8 00 00 00 00       	callq  3d7c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3d7c:	eb 03                	jmp    3d81 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d7e:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d81:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d85:	48 89 c7             	mov    %rax,%rdi
    3d88:	e8 00 00 00 00       	callq  3d8d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3d8d:	eb 03                	jmp    3d92 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d8f:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d92:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d96:	48 89 c7             	mov    %rax,%rdi
    3d99:	e8 00 00 00 00       	callq  3d9e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3d9e:	eb 03                	jmp    3da3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3da0:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3da3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3da7:	48 89 c7             	mov    %rax,%rdi
    3daa:	e8 00 00 00 00       	callq  3daf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3daf:	eb 03                	jmp    3db4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3db1:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3db4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3dbb:	48 89 c7             	mov    %rax,%rdi
    3dbe:	e8 00 00 00 00       	callq  3dc3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3dc3:	48 89 d8             	mov    %rbx,%rax
    3dc6:	48 89 c7             	mov    %rax,%rdi
    3dc9:	e8 00 00 00 00       	callq  3dce <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3dce:	e8 00 00 00 00       	callq  3dd3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3dd3:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3dda:	5b                   	pop    %rbx
    3ddb:	5d                   	pop    %rbp
    3ddc:	c3                   	retq   
    3ddd:	90                   	nop

0000000000003dde <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3dde:	55                   	push   %rbp
    3ddf:	48 89 e5             	mov    %rsp,%rbp
    3de2:	53                   	push   %rbx
    3de3:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3dea:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3df1:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3df8:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3dff:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3e06:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3e0d:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3e14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3e1b:	00 00 
    3e1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3e21:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3e23:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3e2a:	48 89 c7             	mov    %rax,%rdi
    3e2d:	e8 00 00 00 00       	callq  3e32 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3e32:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3e39:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3e3f:	ba 0a 00 00 00       	mov    $0xa,%edx
    3e44:	89 ce                	mov    %ecx,%esi
    3e46:	48 89 c7             	mov    %rax,%rdi
    3e49:	e8 00 00 00 00       	callq  3e4e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3e4e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e55:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e5c:	48 89 d6             	mov    %rdx,%rsi
    3e5f:	48 89 c7             	mov    %rax,%rdi
    3e62:	e8 00 00 00 00       	callq  3e67 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3e67:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3e6e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e75:	48 89 d6             	mov    %rdx,%rsi
    3e78:	48 89 c7             	mov    %rax,%rdi
    3e7b:	e8 00 00 00 00       	callq  3e80 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3e80:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e87:	48 89 c7             	mov    %rax,%rdi
    3e8a:	e8 00 00 00 00       	callq  3e8f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3e8f:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e96:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e9d:	48 89 d6             	mov    %rdx,%rsi
    3ea0:	48 89 c7             	mov    %rax,%rdi
    3ea3:	e8 00 00 00 00       	callq  3ea8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3ea8:	83 f0 01             	xor    $0x1,%eax
    3eab:	84 c0                	test   %al,%al
    3ead:	0f 84 b5 00 00 00    	je     3f68 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3eb3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3eba:	48 89 c7             	mov    %rax,%rdi
    3ebd:	e8 00 00 00 00       	callq  3ec2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3ec2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3ec8:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3ecf:	0f 8e c0 00 00 00    	jle    3f95 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3ed5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3edc:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3ee3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3eea <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3eea:	48 89 c7             	mov    %rax,%rdi
    3eed:	e8 00 00 00 00       	callq  3ef2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3ef2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ef6:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3efd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f04 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3f04:	48 89 ce             	mov    %rcx,%rsi
    3f07:	48 89 c7             	mov    %rax,%rdi
    3f0a:	e8 00 00 00 00       	callq  3f0f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3f0f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f13:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3f1a:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3f1e:	48 89 ce             	mov    %rcx,%rsi
    3f21:	48 89 c7             	mov    %rax,%rdi
    3f24:	e8 00 00 00 00       	callq  3f29 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3f29:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3f2d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3f34:	48 89 d6             	mov    %rdx,%rsi
    3f37:	48 89 c7             	mov    %rax,%rdi
    3f3a:	e8 00 00 00 00       	callq  3f3f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3f3f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f43:	48 89 c7             	mov    %rax,%rdi
    3f46:	e8 00 00 00 00       	callq  3f4b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3f4b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f4f:	48 89 c7             	mov    %rax,%rdi
    3f52:	e8 00 00 00 00       	callq  3f57 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3f57:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f5e:	48 89 c7             	mov    %rax,%rdi
    3f61:	e8 00 00 00 00       	callq  3f66 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3f66:	eb 2d                	jmp    3f95 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3f68:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f6f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f76:	48 89 d6             	mov    %rdx,%rsi
    3f79:	48 89 c7             	mov    %rax,%rdi
    3f7c:	e8 00 00 00 00       	callq  3f81 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3f81:	0f be d0             	movsbl %al,%edx
    3f84:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f8b:	89 d6                	mov    %edx,%esi
    3f8d:	48 89 c7             	mov    %rax,%rdi
    3f90:	e8 00 00 00 00       	callq  3f95 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3f95:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3f9c:	00 00 00 
    3f9f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3fa6:	48 89 c7             	mov    %rax,%rdi
    3fa9:	e8 00 00 00 00       	callq  3fae <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3fae:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3fb4:	0f 9f c0             	setg   %al
    3fb7:	84 c0                	test   %al,%al
    3fb9:	0f 84 e2 02 00 00    	je     42a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3fbf:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3fc6:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3fcc:	89 d6                	mov    %edx,%esi
    3fce:	48 89 c7             	mov    %rax,%rdi
    3fd1:	e8 00 00 00 00       	callq  3fd6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3fd6:	48 89 c2             	mov    %rax,%rdx
    3fd9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fe0:	48 89 d6             	mov    %rdx,%rsi
    3fe3:	48 89 c7             	mov    %rax,%rdi
    3fe6:	e8 00 00 00 00       	callq  3feb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3feb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ff2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ff9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3ff9:	48 89 c7             	mov    %rax,%rdi
    3ffc:	e8 00 00 00 00       	callq  4001 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    4001:	84 c0                	test   %al,%al
    4003:	74 19                	je     401e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    4005:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    400c:	be 19 00 00 00       	mov    $0x19,%esi
    4011:	48 89 c7             	mov    %rax,%rdi
    4014:	e8 00 00 00 00       	callq  4019 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    4019:	e9 68 02 00 00       	jmpq   4286 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    401e:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    4025:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4029:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4030 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    4030:	48 89 c7             	mov    %rax,%rdi
    4033:	e8 00 00 00 00       	callq  4038 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    4038:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    403c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4043:	b9 01 00 00 00       	mov    $0x1,%ecx
    4048:	ba 00 00 00 00       	mov    $0x0,%edx
    404d:	48 89 c7             	mov    %rax,%rdi
    4050:	e8 00 00 00 00       	callq  4055 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    4055:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    405b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    405f:	48 89 c7             	mov    %rax,%rdi
    4062:	e8 00 00 00 00       	callq  4067 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    4067:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    406b:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    4071:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4078:	48 89 ce             	mov    %rcx,%rsi
    407b:	48 89 c7             	mov    %rax,%rdi
    407e:	e8 00 00 00 00       	callq  4083 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    4083:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4087:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    408b:	48 89 d6             	mov    %rdx,%rsi
    408e:	48 89 c7             	mov    %rax,%rdi
    4091:	e8 00 00 00 00       	callq  4096 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    4096:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    409a:	48 89 c7             	mov    %rax,%rdi
    409d:	e8 00 00 00 00       	callq  40a2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    40a2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    40a9:	48 89 c7             	mov    %rax,%rdi
    40ac:	e8 00 00 00 00       	callq  40b1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    40b1:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    40b7:	8d 50 ff             	lea    -0x1(%rax),%edx
    40ba:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40be:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    40c5:	48 89 ce             	mov    %rcx,%rsi
    40c8:	48 89 c7             	mov    %rax,%rdi
    40cb:	e8 00 00 00 00       	callq  40d0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    40d0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    40d4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    40d8:	48 89 d6             	mov    %rdx,%rsi
    40db:	48 89 c7             	mov    %rax,%rdi
    40de:	e8 00 00 00 00       	callq  40e3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    40e3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40e7:	48 89 c7             	mov    %rax,%rdi
    40ea:	e8 00 00 00 00       	callq  40ef <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    40ef:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40fa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    40fa:	48 89 c7             	mov    %rax,%rdi
    40fd:	e8 00 00 00 00       	callq  4102 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    4102:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4106:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 410d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    410d:	48 89 c7             	mov    %rax,%rdi
    4110:	e8 00 00 00 00       	callq  4115 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    4115:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4119:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4120:	48 89 d6             	mov    %rdx,%rsi
    4123:	48 89 c7             	mov    %rax,%rdi
    4126:	e8 00 00 00 00       	callq  412b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    412b:	83 f0 01             	xor    $0x1,%eax
    412e:	84 c0                	test   %al,%al
    4130:	74 38                	je     416a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    4132:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4136:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    413a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4141 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    4141:	48 89 c7             	mov    %rax,%rdi
    4144:	e8 00 00 00 00       	callq  4149 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    4149:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    414d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4151:	48 89 d6             	mov    %rdx,%rsi
    4154:	48 89 c7             	mov    %rax,%rdi
    4157:	e8 00 00 00 00       	callq  415c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    415c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4160:	48 89 c7             	mov    %rax,%rdi
    4163:	e8 00 00 00 00       	callq  4168 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    4168:	eb 74                	jmp    41de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    416a:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    416e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4175:	48 89 d6             	mov    %rdx,%rsi
    4178:	48 89 c7             	mov    %rax,%rdi
    417b:	e8 00 00 00 00       	callq  4180 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    4180:	0f be d0             	movsbl %al,%edx
    4183:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    418a:	89 d6                	mov    %edx,%esi
    418c:	48 89 c7             	mov    %rax,%rdi
    418f:	e8 00 00 00 00       	callq  4194 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    4194:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4198:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    419f:	48 89 d6             	mov    %rdx,%rsi
    41a2:	48 89 c7             	mov    %rax,%rdi
    41a5:	e8 00 00 00 00       	callq  41aa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    41aa:	89 c1                	mov    %eax,%ecx
    41ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    41b0:	ba 0a 00 00 00       	mov    $0xa,%edx
    41b5:	89 ce                	mov    %ecx,%esi
    41b7:	48 89 c7             	mov    %rax,%rdi
    41ba:	e8 00 00 00 00       	callq  41bf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    41bf:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    41c3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    41c7:	48 89 d6             	mov    %rdx,%rsi
    41ca:	48 89 c7             	mov    %rax,%rdi
    41cd:	e8 00 00 00 00       	callq  41d2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    41d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    41d6:	48 89 c7             	mov    %rax,%rdi
    41d9:	e8 00 00 00 00       	callq  41de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    41de:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41e2:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41e9:	48 89 d6             	mov    %rdx,%rsi
    41ec:	48 89 c7             	mov    %rax,%rdi
    41ef:	e8 00 00 00 00       	callq  41f4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    41f4:	83 f0 01             	xor    $0x1,%eax
    41f7:	84 c0                	test   %al,%al
    41f9:	74 31                	je     422c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    41fb:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    4202:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4206:	ba 0a 00 00 00       	mov    $0xa,%edx
    420b:	48 89 ce             	mov    %rcx,%rsi
    420e:	48 89 c7             	mov    %rax,%rdi
    4211:	e8 00 00 00 00       	callq  4216 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    4216:	0f be d0             	movsbl %al,%edx
    4219:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4220:	89 d6                	mov    %edx,%esi
    4222:	48 89 c7             	mov    %rax,%rdi
    4225:	e8 00 00 00 00       	callq  422a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    422a:	eb 2a                	jmp    4256 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    422c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    4230:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4237:	48 89 d6             	mov    %rdx,%rsi
    423a:	48 89 c7             	mov    %rax,%rdi
    423d:	e8 00 00 00 00       	callq  4242 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    4242:	0f be d0             	movsbl %al,%edx
    4245:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    424c:	89 d6                	mov    %edx,%esi
    424e:	48 89 c7             	mov    %rax,%rdi
    4251:	e8 00 00 00 00       	callq  4256 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4256:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    425a:	48 89 c7             	mov    %rax,%rdi
    425d:	e8 00 00 00 00       	callq  4262 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4262:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4266:	48 89 c7             	mov    %rax,%rdi
    4269:	e8 00 00 00 00       	callq  426e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    426e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4272:	48 89 c7             	mov    %rax,%rdi
    4275:	e8 00 00 00 00       	callq  427a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    427a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    427e:	48 89 c7             	mov    %rax,%rdi
    4281:	e8 00 00 00 00       	callq  4286 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4286:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    428d:	48 89 c7             	mov    %rax,%rdi
    4290:	e8 00 00 00 00       	callq  4295 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4295:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    429c:	e9 fe fc ff ff       	jmpq   3f9f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    42a1:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    42a2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    42a9:	48 89 c7             	mov    %rax,%rdi
    42ac:	e8 00 00 00 00       	callq  42b1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    42b1:	e9 59 01 00 00       	jmpq   440f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    42b6:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    42b9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    42c0:	48 89 c7             	mov    %rax,%rdi
    42c3:	e8 00 00 00 00       	callq  42c8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    42c8:	e9 14 01 00 00       	jmpq   43e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    42cd:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    42d0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    42d4:	48 89 c7             	mov    %rax,%rdi
    42d7:	e8 00 00 00 00       	callq  42dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    42dc:	eb 03                	jmp    42e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    42de:	48 89 c3             	mov    %rax,%rbx
    42e1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42e5:	48 89 c7             	mov    %rax,%rdi
    42e8:	e8 00 00 00 00       	callq  42ed <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    42ed:	eb 03                	jmp    42f2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    42ef:	48 89 c3             	mov    %rax,%rbx
    42f2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42f9:	48 89 c7             	mov    %rax,%rdi
    42fc:	e8 00 00 00 00       	callq  4301 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    4301:	e9 db 00 00 00       	jmpq   43e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4306:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    4309:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    430d:	48 89 c7             	mov    %rax,%rdi
    4310:	e8 00 00 00 00       	callq  4315 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    4315:	e9 b3 00 00 00       	jmpq   43cd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    431a:	48 89 c3             	mov    %rax,%rbx
    431d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4321:	48 89 c7             	mov    %rax,%rdi
    4324:	e8 00 00 00 00       	callq  4329 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    4329:	e9 9f 00 00 00       	jmpq   43cd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    432e:	48 89 c3             	mov    %rax,%rbx
    4331:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4335:	48 89 c7             	mov    %rax,%rdi
    4338:	e8 00 00 00 00       	callq  433d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    433d:	e9 8b 00 00 00       	jmpq   43cd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4342:	48 89 c3             	mov    %rax,%rbx
    4345:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4349:	48 89 c7             	mov    %rax,%rdi
    434c:	e8 00 00 00 00       	callq  4351 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    4351:	eb 69                	jmp    43bc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4353:	48 89 c3             	mov    %rax,%rbx
    4356:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    435a:	48 89 c7             	mov    %rax,%rdi
    435d:	e8 00 00 00 00       	callq  4362 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    4362:	eb 58                	jmp    43bc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4364:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    4367:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    436b:	48 89 c7             	mov    %rax,%rdi
    436e:	e8 00 00 00 00       	callq  4373 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    4373:	eb 14                	jmp    4389 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4375:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    4378:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    437c:	48 89 c7             	mov    %rax,%rdi
    437f:	e8 00 00 00 00       	callq  4384 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    4384:	eb 03                	jmp    4389 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4386:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4389:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    438d:	48 89 c7             	mov    %rax,%rdi
    4390:	e8 00 00 00 00       	callq  4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    4395:	eb 03                	jmp    439a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    4397:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    439a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    439e:	48 89 c7             	mov    %rax,%rdi
    43a1:	e8 00 00 00 00       	callq  43a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    43a6:	eb 03                	jmp    43ab <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    43a8:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    43ab:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    43af:	48 89 c7             	mov    %rax,%rdi
    43b2:	e8 00 00 00 00       	callq  43b7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    43b7:	eb 03                	jmp    43bc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    43b9:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    43bc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    43c0:	48 89 c7             	mov    %rax,%rdi
    43c3:	e8 00 00 00 00       	callq  43c8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    43c8:	eb 03                	jmp    43cd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    43ca:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    43cd:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    43d4:	48 89 c7             	mov    %rax,%rdi
    43d7:	e8 00 00 00 00       	callq  43dc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    43dc:	eb 03                	jmp    43e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    43de:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    43e1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    43e8:	48 89 c7             	mov    %rax,%rdi
    43eb:	e8 00 00 00 00       	callq  43f0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    43f0:	eb 03                	jmp    43f5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    43f2:	48 89 c3             	mov    %rax,%rbx
    43f5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43fc:	48 89 c7             	mov    %rax,%rdi
    43ff:	e8 00 00 00 00       	callq  4404 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    4404:	48 89 d8             	mov    %rbx,%rax
    4407:	48 89 c7             	mov    %rax,%rdi
    440a:	e8 00 00 00 00       	callq  440f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    440f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4416:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    441a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4421:	00 00 
    4423:	74 05                	je     442a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    4425:	e8 00 00 00 00       	callq  442a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    442a:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    4431:	5b                   	pop    %rbx
    4432:	5d                   	pop    %rbp
    4433:	c3                   	retq   

0000000000004434 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    4434:	55                   	push   %rbp
    4435:	48 89 e5             	mov    %rsp,%rbp
    4438:	53                   	push   %rbx
    4439:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    4440:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    4447:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    444e:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    4455:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    445c:	00 00 
    445e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4462:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4464:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    446b:	48 89 c7             	mov    %rax,%rdi
    446e:	e8 00 00 00 00       	callq  4473 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4473:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    447a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4481 <_ZN6Parser11compileAtomE7QString+0x4d>
    4481:	48 89 c7             	mov    %rax,%rdi
    4484:	e8 00 00 00 00       	callq  4489 <_ZN6Parser11compileAtomE7QString+0x55>
    4489:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    4490:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4497:	b9 00 00 00 00       	mov    $0x0,%ecx
    449c:	ba 01 00 00 00       	mov    $0x1,%edx
    44a1:	48 89 c7             	mov    %rax,%rdi
    44a4:	e8 00 00 00 00       	callq  44a9 <_ZN6Parser11compileAtomE7QString+0x75>
    44a9:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    44b0:	48 89 c7             	mov    %rax,%rdi
    44b3:	e8 00 00 00 00       	callq  44b8 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    44b8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 44c6 <_ZN6Parser11compileAtomE7QString+0x92>
    44c6:	48 89 c7             	mov    %rax,%rdi
    44c9:	e8 00 00 00 00       	callq  44ce <_ZN6Parser11compileAtomE7QString+0x9a>
    44ce:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    44d5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    44dc:	b9 00 00 00 00       	mov    $0x0,%ecx
    44e1:	ba 01 00 00 00       	mov    $0x1,%edx
    44e6:	48 89 c7             	mov    %rax,%rdi
    44e9:	e8 00 00 00 00       	callq  44ee <_ZN6Parser11compileAtomE7QString+0xba>
    44ee:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44f5:	48 89 c7             	mov    %rax,%rdi
    44f8:	e8 00 00 00 00       	callq  44fd <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    44fd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4504:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 450b <_ZN6Parser11compileAtomE7QString+0xd7>
    450b:	48 89 c7             	mov    %rax,%rdi
    450e:	e8 00 00 00 00       	callq  4513 <_ZN6Parser11compileAtomE7QString+0xdf>
    4513:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    451a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4521:	b9 00 00 00 00       	mov    $0x0,%ecx
    4526:	ba 01 00 00 00       	mov    $0x1,%edx
    452b:	48 89 c7             	mov    %rax,%rdi
    452e:	e8 00 00 00 00       	callq  4533 <_ZN6Parser11compileAtomE7QString+0xff>
    4533:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    453a:	48 89 c7             	mov    %rax,%rdi
    453d:	e8 00 00 00 00       	callq  4542 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4542:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4546:	48 89 c7             	mov    %rax,%rdi
    4549:	e8 00 00 00 00       	callq  454e <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    454e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4555:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4559:	48 89 d6             	mov    %rdx,%rsi
    455c:	48 89 c7             	mov    %rax,%rdi
    455f:	e8 00 00 00 00       	callq  4564 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    4564:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    456b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    456f:	48 89 d6             	mov    %rdx,%rsi
    4572:	48 89 c7             	mov    %rax,%rdi
    4575:	e8 00 00 00 00       	callq  457a <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    457a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4581:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4588 <_ZN6Parser11compileAtomE7QString+0x154>
    4588:	48 89 c7             	mov    %rax,%rdi
    458b:	e8 00 00 00 00       	callq  4590 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    4590:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    4597:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    459e:	b9 00 00 00 00       	mov    $0x0,%ecx
    45a3:	ba 01 00 00 00       	mov    $0x1,%edx
    45a8:	48 89 c7             	mov    %rax,%rdi
    45ab:	e8 00 00 00 00       	callq  45b0 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    45b0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    45b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45be <_ZN6Parser11compileAtomE7QString+0x18a>
    45be:	48 89 c7             	mov    %rax,%rdi
    45c1:	e8 00 00 00 00       	callq  45c6 <_ZN6Parser11compileAtomE7QString+0x192>
    45c6:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    45cd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    45d4:	b9 00 00 00 00       	mov    $0x0,%ecx
    45d9:	ba 01 00 00 00       	mov    $0x1,%edx
    45de:	48 89 c7             	mov    %rax,%rdi
    45e1:	e8 00 00 00 00       	callq  45e6 <_ZN6Parser11compileAtomE7QString+0x1b2>
    45e6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    45ed:	48 89 c7             	mov    %rax,%rdi
    45f0:	e8 00 00 00 00       	callq  45f5 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    45f5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45fc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4603 <_ZN6Parser11compileAtomE7QString+0x1cf>
    4603:	48 89 c7             	mov    %rax,%rdi
    4606:	e8 00 00 00 00       	callq  460b <_ZN6Parser11compileAtomE7QString+0x1d7>
    460b:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    4612:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4619:	b9 00 00 00 00       	mov    $0x0,%ecx
    461e:	ba 01 00 00 00       	mov    $0x1,%edx
    4623:	48 89 c7             	mov    %rax,%rdi
    4626:	e8 00 00 00 00       	callq  462b <_ZN6Parser11compileAtomE7QString+0x1f7>
    462b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4632:	48 89 c7             	mov    %rax,%rdi
    4635:	e8 00 00 00 00       	callq  463a <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    463a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4641:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4648 <_ZN6Parser11compileAtomE7QString+0x214>
    4648:	48 89 c7             	mov    %rax,%rdi
    464b:	e8 00 00 00 00       	callq  4650 <_ZN6Parser11compileAtomE7QString+0x21c>
    4650:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    4657:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    465e:	b9 00 00 00 00       	mov    $0x0,%ecx
    4663:	ba 01 00 00 00       	mov    $0x1,%edx
    4668:	48 89 c7             	mov    %rax,%rdi
    466b:	e8 00 00 00 00       	callq  4670 <_ZN6Parser11compileAtomE7QString+0x23c>
    4670:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4677:	48 89 c7             	mov    %rax,%rdi
    467a:	e8 00 00 00 00       	callq  467f <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    467f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4686:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 468d <_ZN6Parser11compileAtomE7QString+0x259>
    468d:	48 89 c7             	mov    %rax,%rdi
    4690:	e8 00 00 00 00       	callq  4695 <_ZN6Parser11compileAtomE7QString+0x261>
    4695:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    469c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    46a3:	b9 00 00 00 00       	mov    $0x0,%ecx
    46a8:	ba 01 00 00 00       	mov    $0x1,%edx
    46ad:	48 89 c7             	mov    %rax,%rdi
    46b0:	e8 00 00 00 00       	callq  46b5 <_ZN6Parser11compileAtomE7QString+0x281>
    46b5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    46bc:	48 89 c7             	mov    %rax,%rdi
    46bf:	e8 00 00 00 00       	callq  46c4 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    46c4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46c8:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    46cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46d6 <_ZN6Parser11compileAtomE7QString+0x2a2>
    46d6:	48 89 c7             	mov    %rax,%rdi
    46d9:	e8 00 00 00 00       	callq  46de <_ZN6Parser11compileAtomE7QString+0x2aa>
    46de:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    46e2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    46e9:	b9 00 00 00 00       	mov    $0x0,%ecx
    46ee:	ba 01 00 00 00       	mov    $0x1,%edx
    46f3:	48 89 c7             	mov    %rax,%rdi
    46f6:	e8 00 00 00 00       	callq  46fb <_ZN6Parser11compileAtomE7QString+0x2c7>
    46fb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46ff:	48 89 c7             	mov    %rax,%rdi
    4702:	e8 00 00 00 00       	callq  4707 <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    4707:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    470e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4712:	b9 00 00 00 00       	mov    $0x0,%ecx
    4717:	ba 01 00 00 00       	mov    $0x1,%edx
    471c:	48 89 c7             	mov    %rax,%rdi
    471f:	e8 00 00 00 00       	callq  4724 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    4724:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4728:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 472f <_ZN6Parser11compileAtomE7QString+0x2fb>
    472f:	48 89 c7             	mov    %rax,%rdi
    4732:	e8 00 00 00 00       	callq  4737 <_ZN6Parser11compileAtomE7QString+0x303>
    4737:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    473b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    473f:	b9 00 00 00 00       	mov    $0x0,%ecx
    4744:	ba 01 00 00 00       	mov    $0x1,%edx
    4749:	48 89 c7             	mov    %rax,%rdi
    474c:	e8 00 00 00 00       	callq  4751 <_ZN6Parser11compileAtomE7QString+0x31d>
    4751:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4755:	48 89 c7             	mov    %rax,%rdi
    4758:	e8 00 00 00 00       	callq  475d <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    475d:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    475e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4762:	48 89 c7             	mov    %rax,%rdi
    4765:	e8 00 00 00 00       	callq  476a <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    476a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    476e:	48 89 c7             	mov    %rax,%rdi
    4771:	e8 00 00 00 00       	callq  4776 <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4776:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    477d:	48 89 c7             	mov    %rax,%rdi
    4780:	e8 00 00 00 00       	callq  4785 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4785:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    478c:	48 89 c7             	mov    %rax,%rdi
    478f:	e8 00 00 00 00       	callq  4794 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4794:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    479b:	48 89 c7             	mov    %rax,%rdi
    479e:	e8 00 00 00 00       	callq  47a3 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    47a3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    47aa:	48 89 c7             	mov    %rax,%rdi
    47ad:	e8 00 00 00 00       	callq  47b2 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    47b2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    47b9:	48 89 c7             	mov    %rax,%rdi
    47bc:	e8 00 00 00 00       	callq  47c1 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    47c1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    47c8:	48 89 c7             	mov    %rax,%rdi
    47cb:	e8 00 00 00 00       	callq  47d0 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    47d0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    47d7:	48 89 c7             	mov    %rax,%rdi
    47da:	e8 00 00 00 00       	callq  47df <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    47df:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    47e6:	48 89 c7             	mov    %rax,%rdi
    47e9:	e8 00 00 00 00       	callq  47ee <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    47ee:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47f5:	48 89 c7             	mov    %rax,%rdi
    47f8:	e8 00 00 00 00       	callq  47fd <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47fd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4801:	48 89 c7             	mov    %rax,%rdi
    4804:	e8 00 00 00 00       	callq  4809 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4809:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4810:	48 89 c7             	mov    %rax,%rdi
    4813:	e8 00 00 00 00       	callq  4818 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4818:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    481f:	48 89 c7             	mov    %rax,%rdi
    4822:	e8 00 00 00 00       	callq  4827 <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4827:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    482e:	48 89 c7             	mov    %rax,%rdi
    4831:	e8 00 00 00 00       	callq  4836 <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    4836:	e9 b8 02 00 00       	jmpq   4af3 <_ZN6Parser11compileAtomE7QString+0x6bf>
    483b:	48 89 c3             	mov    %rax,%rbx
    483e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4845:	48 89 c7             	mov    %rax,%rdi
    4848:	e8 00 00 00 00       	callq  484d <_ZN6Parser11compileAtomE7QString+0x419>
    484d:	e9 87 02 00 00       	jmpq   4ad9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4852:	48 89 c3             	mov    %rax,%rbx
    4855:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    485c:	48 89 c7             	mov    %rax,%rdi
    485f:	e8 00 00 00 00       	callq  4864 <_ZN6Parser11compileAtomE7QString+0x430>
    4864:	e9 70 02 00 00       	jmpq   4ad9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4869:	48 89 c3             	mov    %rax,%rbx
    486c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4873:	48 89 c7             	mov    %rax,%rdi
    4876:	e8 00 00 00 00       	callq  487b <_ZN6Parser11compileAtomE7QString+0x447>
    487b:	e9 45 02 00 00       	jmpq   4ac5 <_ZN6Parser11compileAtomE7QString+0x691>
    4880:	48 89 c3             	mov    %rax,%rbx
    4883:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    488a:	48 89 c7             	mov    %rax,%rdi
    488d:	e8 00 00 00 00       	callq  4892 <_ZN6Parser11compileAtomE7QString+0x45e>
    4892:	e9 2e 02 00 00       	jmpq   4ac5 <_ZN6Parser11compileAtomE7QString+0x691>
    4897:	48 89 c3             	mov    %rax,%rbx
    489a:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    48a1:	48 89 c7             	mov    %rax,%rdi
    48a4:	e8 00 00 00 00       	callq  48a9 <_ZN6Parser11compileAtomE7QString+0x475>
    48a9:	e9 03 02 00 00       	jmpq   4ab1 <_ZN6Parser11compileAtomE7QString+0x67d>
    48ae:	48 89 c3             	mov    %rax,%rbx
    48b1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    48b8:	48 89 c7             	mov    %rax,%rdi
    48bb:	e8 00 00 00 00       	callq  48c0 <_ZN6Parser11compileAtomE7QString+0x48c>
    48c0:	e9 ec 01 00 00       	jmpq   4ab1 <_ZN6Parser11compileAtomE7QString+0x67d>
    48c5:	48 89 c3             	mov    %rax,%rbx
    48c8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    48cf:	48 89 c7             	mov    %rax,%rdi
    48d2:	e8 00 00 00 00       	callq  48d7 <_ZN6Parser11compileAtomE7QString+0x4a3>
    48d7:	e9 60 01 00 00       	jmpq   4a3c <_ZN6Parser11compileAtomE7QString+0x608>
    48dc:	48 89 c3             	mov    %rax,%rbx
    48df:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    48e6:	48 89 c7             	mov    %rax,%rdi
    48e9:	e8 00 00 00 00       	callq  48ee <_ZN6Parser11compileAtomE7QString+0x4ba>
    48ee:	e9 49 01 00 00       	jmpq   4a3c <_ZN6Parser11compileAtomE7QString+0x608>
    48f3:	48 89 c3             	mov    %rax,%rbx
    48f6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    48fd:	48 89 c7             	mov    %rax,%rdi
    4900:	e8 00 00 00 00       	callq  4905 <_ZN6Parser11compileAtomE7QString+0x4d1>
    4905:	e9 1e 01 00 00       	jmpq   4a28 <_ZN6Parser11compileAtomE7QString+0x5f4>
    490a:	48 89 c3             	mov    %rax,%rbx
    490d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4914:	48 89 c7             	mov    %rax,%rdi
    4917:	e8 00 00 00 00       	callq  491c <_ZN6Parser11compileAtomE7QString+0x4e8>
    491c:	e9 07 01 00 00       	jmpq   4a28 <_ZN6Parser11compileAtomE7QString+0x5f4>
    4921:	48 89 c3             	mov    %rax,%rbx
    4924:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    492b:	48 89 c7             	mov    %rax,%rdi
    492e:	e8 00 00 00 00       	callq  4933 <_ZN6Parser11compileAtomE7QString+0x4ff>
    4933:	e9 dc 00 00 00       	jmpq   4a14 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4938:	48 89 c3             	mov    %rax,%rbx
    493b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4942:	48 89 c7             	mov    %rax,%rdi
    4945:	e8 00 00 00 00       	callq  494a <_ZN6Parser11compileAtomE7QString+0x516>
    494a:	e9 c5 00 00 00       	jmpq   4a14 <_ZN6Parser11compileAtomE7QString+0x5e0>
    494f:	48 89 c3             	mov    %rax,%rbx
    4952:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4959:	48 89 c7             	mov    %rax,%rdi
    495c:	e8 00 00 00 00       	callq  4961 <_ZN6Parser11compileAtomE7QString+0x52d>
    4961:	e9 9a 00 00 00       	jmpq   4a00 <_ZN6Parser11compileAtomE7QString+0x5cc>
    4966:	48 89 c3             	mov    %rax,%rbx
    4969:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4970:	48 89 c7             	mov    %rax,%rdi
    4973:	e8 00 00 00 00       	callq  4978 <_ZN6Parser11compileAtomE7QString+0x544>
    4978:	e9 83 00 00 00       	jmpq   4a00 <_ZN6Parser11compileAtomE7QString+0x5cc>
    497d:	48 89 c3             	mov    %rax,%rbx
    4980:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4984:	48 89 c7             	mov    %rax,%rdi
    4987:	e8 00 00 00 00       	callq  498c <_ZN6Parser11compileAtomE7QString+0x558>
    498c:	eb 5e                	jmp    49ec <_ZN6Parser11compileAtomE7QString+0x5b8>
    498e:	48 89 c3             	mov    %rax,%rbx
    4991:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4998:	48 89 c7             	mov    %rax,%rdi
    499b:	e8 00 00 00 00       	callq  49a0 <_ZN6Parser11compileAtomE7QString+0x56c>
    49a0:	eb 4a                	jmp    49ec <_ZN6Parser11compileAtomE7QString+0x5b8>
    49a2:	48 89 c3             	mov    %rax,%rbx
    49a5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    49a9:	48 89 c7             	mov    %rax,%rdi
    49ac:	e8 00 00 00 00       	callq  49b1 <_ZN6Parser11compileAtomE7QString+0x57d>
    49b1:	eb 14                	jmp    49c7 <_ZN6Parser11compileAtomE7QString+0x593>
    49b3:	48 89 c3             	mov    %rax,%rbx
    49b6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    49ba:	48 89 c7             	mov    %rax,%rdi
    49bd:	e8 00 00 00 00       	callq  49c2 <_ZN6Parser11compileAtomE7QString+0x58e>
    49c2:	eb 03                	jmp    49c7 <_ZN6Parser11compileAtomE7QString+0x593>
    49c4:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    49c7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    49cb:	48 89 c7             	mov    %rax,%rdi
    49ce:	e8 00 00 00 00       	callq  49d3 <_ZN6Parser11compileAtomE7QString+0x59f>
    49d3:	eb 03                	jmp    49d8 <_ZN6Parser11compileAtomE7QString+0x5a4>
    49d5:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    49d8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    49df:	48 89 c7             	mov    %rax,%rdi
    49e2:	e8 00 00 00 00       	callq  49e7 <_ZN6Parser11compileAtomE7QString+0x5b3>
    49e7:	eb 03                	jmp    49ec <_ZN6Parser11compileAtomE7QString+0x5b8>
    49e9:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    49ec:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49f3:	48 89 c7             	mov    %rax,%rdi
    49f6:	e8 00 00 00 00       	callq  49fb <_ZN6Parser11compileAtomE7QString+0x5c7>
    49fb:	eb 03                	jmp    4a00 <_ZN6Parser11compileAtomE7QString+0x5cc>
    49fd:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4a00:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4a07:	48 89 c7             	mov    %rax,%rdi
    4a0a:	e8 00 00 00 00       	callq  4a0f <_ZN6Parser11compileAtomE7QString+0x5db>
    4a0f:	eb 03                	jmp    4a14 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4a11:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4a14:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4a1b:	48 89 c7             	mov    %rax,%rdi
    4a1e:	e8 00 00 00 00       	callq  4a23 <_ZN6Parser11compileAtomE7QString+0x5ef>
    4a23:	eb 03                	jmp    4a28 <_ZN6Parser11compileAtomE7QString+0x5f4>
    4a25:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4a28:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4a2f:	48 89 c7             	mov    %rax,%rdi
    4a32:	e8 00 00 00 00       	callq  4a37 <_ZN6Parser11compileAtomE7QString+0x603>
    4a37:	eb 03                	jmp    4a3c <_ZN6Parser11compileAtomE7QString+0x608>
    4a39:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4a3c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4a43:	48 89 c7             	mov    %rax,%rdi
    4a46:	e8 00 00 00 00       	callq  4a4b <_ZN6Parser11compileAtomE7QString+0x617>
    4a4b:	eb 03                	jmp    4a50 <_ZN6Parser11compileAtomE7QString+0x61c>
    4a4d:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4a50:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a57:	48 89 c7             	mov    %rax,%rdi
    4a5a:	e8 00 00 00 00       	callq  4a5f <_ZN6Parser11compileAtomE7QString+0x62b>
    4a5f:	eb 03                	jmp    4a64 <_ZN6Parser11compileAtomE7QString+0x630>
    4a61:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4a64:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4a6b:	48 89 c7             	mov    %rax,%rdi
    4a6e:	e8 00 00 00 00       	callq  4a73 <_ZN6Parser11compileAtomE7QString+0x63f>
    4a73:	eb 03                	jmp    4a78 <_ZN6Parser11compileAtomE7QString+0x644>
    4a75:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4a78:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a7f:	48 89 c7             	mov    %rax,%rdi
    4a82:	e8 00 00 00 00       	callq  4a87 <_ZN6Parser11compileAtomE7QString+0x653>
    4a87:	eb 03                	jmp    4a8c <_ZN6Parser11compileAtomE7QString+0x658>
    4a89:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4a8c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a90:	48 89 c7             	mov    %rax,%rdi
    4a93:	e8 00 00 00 00       	callq  4a98 <_ZN6Parser11compileAtomE7QString+0x664>
    4a98:	eb 03                	jmp    4a9d <_ZN6Parser11compileAtomE7QString+0x669>
    4a9a:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4a9d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4aa4:	48 89 c7             	mov    %rax,%rdi
    4aa7:	e8 00 00 00 00       	callq  4aac <_ZN6Parser11compileAtomE7QString+0x678>
    4aac:	eb 03                	jmp    4ab1 <_ZN6Parser11compileAtomE7QString+0x67d>
    4aae:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4ab1:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4ab8:	48 89 c7             	mov    %rax,%rdi
    4abb:	e8 00 00 00 00       	callq  4ac0 <_ZN6Parser11compileAtomE7QString+0x68c>
    4ac0:	eb 03                	jmp    4ac5 <_ZN6Parser11compileAtomE7QString+0x691>
    4ac2:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4ac5:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4acc:	48 89 c7             	mov    %rax,%rdi
    4acf:	e8 00 00 00 00       	callq  4ad4 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4ad4:	eb 03                	jmp    4ad9 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4ad6:	48 89 c3             	mov    %rax,%rbx
    4ad9:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4ae0:	48 89 c7             	mov    %rax,%rdi
    4ae3:	e8 00 00 00 00       	callq  4ae8 <_ZN6Parser11compileAtomE7QString+0x6b4>
    4ae8:	48 89 d8             	mov    %rbx,%rax
    4aeb:	48 89 c7             	mov    %rax,%rdi
    4aee:	e8 00 00 00 00       	callq  4af3 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4af3:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4afa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4afe:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4b05:	00 00 
    4b07:	74 05                	je     4b0e <_ZN6Parser11compileAtomE7QString+0x6da>
    4b09:	e8 00 00 00 00       	callq  4b0e <_ZN6Parser11compileAtomE7QString+0x6da>
    4b0e:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4b15:	5b                   	pop    %rbx
    4b16:	5d                   	pop    %rbp
    4b17:	c3                   	retq   

0000000000004b18 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4b18:	55                   	push   %rbp
    4b19:	48 89 e5             	mov    %rsp,%rbp
    4b1c:	53                   	push   %rbx
    4b1d:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4b24:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4b2b:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4b32:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4b39:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4b40:	00 00 
    4b42:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4b46:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4b48:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4b4c:	48 89 c7             	mov    %rax,%rdi
    4b4f:	e8 00 00 00 00       	callq  4b54 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4b54:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4b5b:	48 89 c7             	mov    %rax,%rdi
    4b5e:	e8 00 00 00 00       	callq  4b63 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4b63:	85 c0                	test   %eax,%eax
    4b65:	0f 9e c0             	setle  %al
    4b68:	84 c0                	test   %al,%al
    4b6a:	74 0a                	je     4b76 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4b6c:	bb 00 00 00 00       	mov    $0x0,%ebx
    4b71:	e9 27 01 00 00       	jmpq   4c9d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4b76:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b7a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b81 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4b81:	48 89 c7             	mov    %rax,%rdi
    4b84:	e8 00 00 00 00       	callq  4b89 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4b89:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4b8d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b91:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b96:	ba 00 00 00 00       	mov    $0x0,%edx
    4b9b:	48 89 c7             	mov    %rax,%rdi
    4b9e:	e8 00 00 00 00       	callq  4ba3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4ba3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4ba7:	48 89 c7             	mov    %rax,%rdi
    4baa:	e8 00 00 00 00       	callq  4baf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4baf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bb3:	be 00 00 00 00       	mov    $0x0,%esi
    4bb8:	48 89 c7             	mov    %rax,%rdi
    4bbb:	e8 00 00 00 00       	callq  4bc0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4bc0:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4bc7:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4bca:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4bd1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bd5:	b9 00 00 00 00       	mov    $0x0,%ecx
    4bda:	48 89 c7             	mov    %rax,%rdi
    4bdd:	e8 00 00 00 00       	callq  4be2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4be2:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4be5:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4be9:	0f 95 c0             	setne  %al
    4bec:	84 c0                	test   %al,%al
    4bee:	0f 84 98 00 00 00    	je     4c8c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4bf4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bf8:	48 89 c7             	mov    %rax,%rdi
    4bfb:	e8 00 00 00 00       	callq  4c00 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4c00:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4c03:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c07:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4c0b:	ba 00 00 00 00       	mov    $0x0,%edx
    4c10:	48 89 ce             	mov    %rcx,%rsi
    4c13:	48 89 c7             	mov    %rax,%rdi
    4c16:	e8 00 00 00 00       	callq  4c1b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4c1b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4c1f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4c26:	48 89 d6             	mov    %rdx,%rsi
    4c29:	48 89 c7             	mov    %rax,%rdi
    4c2c:	e8 00 00 00 00       	callq  4c31 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4c31:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c35:	48 89 c7             	mov    %rax,%rdi
    4c38:	e8 00 00 00 00       	callq  4c3d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4c3d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c41:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4c45:	ba 00 00 00 00       	mov    $0x0,%edx
    4c4a:	48 89 ce             	mov    %rcx,%rsi
    4c4d:	48 89 c7             	mov    %rax,%rdi
    4c50:	e8 00 00 00 00       	callq  4c55 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4c55:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c59:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4c5d:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c64:	48 89 ce             	mov    %rcx,%rsi
    4c67:	48 89 c7             	mov    %rax,%rdi
    4c6a:	e8 00 00 00 00       	callq  4c6f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4c6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c73:	48 89 c7             	mov    %rax,%rdi
    4c76:	e8 00 00 00 00       	callq  4c7b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4c7b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c7f:	48 89 c7             	mov    %rax,%rdi
    4c82:	e8 00 00 00 00       	callq  4c87 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c87:	e9 3b ff ff ff       	jmpq   4bc7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c90:	48 89 c7             	mov    %rax,%rdi
    4c93:	e8 00 00 00 00       	callq  4c98 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4c98:	bb 01 00 00 00       	mov    $0x1,%ebx
    4c9d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4ca1:	48 89 c7             	mov    %rax,%rdi
    4ca4:	e8 00 00 00 00       	callq  4ca9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4ca9:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4cac:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4cad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4cb1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4cb8:	00 00 
    4cba:	74 76                	je     4d32 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4cbc:	eb 6f                	jmp    4d2d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4cbe:	48 89 c3             	mov    %rax,%rbx
    4cc1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4cc5:	48 89 c7             	mov    %rax,%rdi
    4cc8:	e8 00 00 00 00       	callq  4ccd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4ccd:	eb 47                	jmp    4d16 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4ccf:	48 89 c3             	mov    %rax,%rbx
    4cd2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4cd6:	48 89 c7             	mov    %rax,%rdi
    4cd9:	e8 00 00 00 00       	callq  4cde <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4cde:	eb 36                	jmp    4d16 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4ce0:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4ce3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4ce7:	48 89 c7             	mov    %rax,%rdi
    4cea:	e8 00 00 00 00       	callq  4cef <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4cef:	eb 14                	jmp    4d05 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cf1:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4cf4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4cf8:	48 89 c7             	mov    %rax,%rdi
    4cfb:	e8 00 00 00 00       	callq  4d00 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4d00:	eb 03                	jmp    4d05 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4d02:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4d05:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4d09:	48 89 c7             	mov    %rax,%rdi
    4d0c:	e8 00 00 00 00       	callq  4d11 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4d11:	eb 03                	jmp    4d16 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4d13:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4d16:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4d1a:	48 89 c7             	mov    %rax,%rdi
    4d1d:	e8 00 00 00 00       	callq  4d22 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4d22:	48 89 d8             	mov    %rbx,%rax
    4d25:	48 89 c7             	mov    %rax,%rdi
    4d28:	e8 00 00 00 00       	callq  4d2d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4d2d:	e8 00 00 00 00       	callq  4d32 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4d32:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4d39:	5b                   	pop    %rbx
    4d3a:	5d                   	pop    %rbp
    4d3b:	c3                   	retq   

0000000000004d3c <_Z12compileBlockR11QStringList>:

QByteArray  compileBlock(QStringList &block){
    4d3c:	55                   	push   %rbp
    4d3d:	48 89 e5             	mov    %rsp,%rbp
    4d40:	48 83 ec 20          	sub    $0x20,%rsp
    4d44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4d48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4d4c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d53:	00 00 
    4d55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d59:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d5f:	48 89 c7             	mov    %rax,%rdi
    4d62:	e8 00 00 00 00       	callq  4d67 <_Z12compileBlockR11QStringList+0x2b>

    return result;
    4d67:	90                   	nop
}
    4d68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4d70:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    4d77:	00 00 
    4d79:	74 05                	je     4d80 <_Z12compileBlockR11QStringList+0x44>
    4d7b:	e8 00 00 00 00       	callq  4d80 <_Z12compileBlockR11QStringList+0x44>
    4d80:	c9                   	leaveq 
    4d81:	c3                   	retq   

0000000000004d82 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4d82:	55                   	push   %rbp
    4d83:	48 89 e5             	mov    %rsp,%rbp
    4d86:	53                   	push   %rbx
    4d87:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4d8e:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4d95:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4d9c:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4da3:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4daa:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4db1:	00 00 
    4db3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4db7:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4db9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4dc0:	48 89 c7             	mov    %rax,%rdi
    4dc3:	e8 00 00 00 00       	callq  4dc8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4dc8:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4dcf:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4dd6:	b9 00 00 00 00       	mov    $0x0,%ecx
    4ddb:	ba 01 00 00 00       	mov    $0x1,%edx
    4de0:	48 89 c7             	mov    %rax,%rdi
    4de3:	e8 00 00 00 00       	callq  4de8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4de8:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4def:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4df6:	48 89 d6             	mov    %rdx,%rsi
    4df9:	48 89 c7             	mov    %rax,%rdi
    4dfc:	e8 00 00 00 00       	callq  4e01 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4e01:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4e08:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4e0f:	48 89 d6             	mov    %rdx,%rsi
    4e12:	48 89 c7             	mov    %rax,%rdi
    4e15:	e8 00 00 00 00       	callq  4e1a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4e1a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4e21:	48 89 c7             	mov    %rax,%rdi
    4e24:	e8 00 00 00 00       	callq  4e29 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4e29:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4e30:	48 89 c7             	mov    %rax,%rdi
    4e33:	e8 00 00 00 00       	callq  4e38 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4e38:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4e3f:	48 89 c7             	mov    %rax,%rdi
    4e42:	e8 00 00 00 00       	callq  4e47 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4e47:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4e4e:	48 89 c7             	mov    %rax,%rdi
    4e51:	e8 00 00 00 00       	callq  4e56 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4e56:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4e5d:	00 00 00 
    int     lineBase = 0;
    4e60:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4e67:	00 00 00 
    int     line     = 0;
    4e6a:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4e71:	00 00 00 

    unsigned int BFL = str.count("{");
    4e74:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e7b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e82 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4e82:	48 89 c7             	mov    %rax,%rdi
    4e85:	e8 00 00 00 00       	callq  4e8a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4e8a:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4e91:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e98:	ba 01 00 00 00       	mov    $0x1,%edx
    4e9d:	48 89 ce             	mov    %rcx,%rsi
    4ea0:	48 89 c7             	mov    %rax,%rdi
    4ea3:	e8 00 00 00 00       	callq  4ea8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4ea8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4eae:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4eb5:	48 89 c7             	mov    %rax,%rdi
    4eb8:	e8 00 00 00 00       	callq  4ebd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4ebd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4ec4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ecb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4ecb:	48 89 c7             	mov    %rax,%rdi
    4ece:	e8 00 00 00 00       	callq  4ed3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4ed3:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4eda:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ee1:	ba 01 00 00 00       	mov    $0x1,%edx
    4ee6:	48 89 ce             	mov    %rcx,%rsi
    4ee9:	48 89 c7             	mov    %rax,%rdi
    4eec:	e8 00 00 00 00       	callq  4ef1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4ef1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4ef7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4efe:	48 89 c7             	mov    %rax,%rdi
    4f01:	e8 00 00 00 00       	callq  4f06 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4f06:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4f0d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f14 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4f14:	48 89 c7             	mov    %rax,%rdi
    4f17:	e8 00 00 00 00       	callq  4f1c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4f1c:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4f23:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f2a:	ba 01 00 00 00       	mov    $0x1,%edx
    4f2f:	48 89 ce             	mov    %rcx,%rsi
    4f32:	48 89 c7             	mov    %rax,%rdi
    4f35:	e8 00 00 00 00       	callq  4f3a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4f3a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4f40:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4f47:	48 89 c7             	mov    %rax,%rdi
    4f4a:	e8 00 00 00 00       	callq  4f4f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4f4f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f56:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f5d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4f5d:	48 89 c7             	mov    %rax,%rdi
    4f60:	e8 00 00 00 00       	callq  4f65 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4f65:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4f6c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f73:	ba 01 00 00 00       	mov    $0x1,%edx
    4f78:	48 89 ce             	mov    %rcx,%rsi
    4f7b:	48 89 c7             	mov    %rax,%rdi
    4f7e:	e8 00 00 00 00       	callq  4f83 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4f83:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4f89:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f90:	48 89 c7             	mov    %rax,%rdi
    4f93:	e8 00 00 00 00       	callq  4f98 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4f98:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4f9e:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4fa4:	74 43                	je     4fe9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4fa6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4fad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fb4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4fb4:	48 89 c7             	mov    %rax,%rdi
    4fb7:	e8 00 00 00 00       	callq  4fbc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4fbc:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4fc3:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4fca:	48 89 d6             	mov    %rdx,%rsi
    4fcd:	48 89 c7             	mov    %rax,%rdi
    4fd0:	e8 00 00 00 00       	callq  4fd5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4fd5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4fdc:	48 89 c7             	mov    %rax,%rdi
    4fdf:	e8 00 00 00 00       	callq  4fe4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4fe4:	e9 6f 03 00 00       	jmpq   5358 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4fe9:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4fef:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4ff5:	74 43                	je     503a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4ff7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4ffe:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5005 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    5005:	48 89 c7             	mov    %rax,%rdi
    5008:	e8 00 00 00 00       	callq  500d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    500d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5014:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    501b:	48 89 d6             	mov    %rdx,%rsi
    501e:	48 89 c7             	mov    %rax,%rdi
    5021:	e8 00 00 00 00       	callq  5026 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    5026:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    502d:	48 89 c7             	mov    %rax,%rdi
    5030:	e8 00 00 00 00       	callq  5035 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    5035:	e9 1e 03 00 00       	jmpq   5358 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    503a:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5041:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5048:	b9 00 00 00 00       	mov    $0x0,%ecx
    504d:	ba 00 00 00 00       	mov    $0x0,%edx
    5052:	48 89 c7             	mov    %rax,%rdi
    5055:	e8 00 00 00 00       	callq  505a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    505a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    5060:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    5067:	0f 88 ea 02 00 00    	js     5357 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    506d:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    5073:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    5079:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    507c:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    5083:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5087:	48 89 d6             	mov    %rdx,%rsi
    508a:	48 89 c7             	mov    %rax,%rdi
    508d:	e8 00 00 00 00       	callq  5092 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    5092:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5096:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    509d:	89 da                	mov    %ebx,%edx
    509f:	48 89 ce             	mov    %rcx,%rsi
    50a2:	48 89 c7             	mov    %rax,%rdi
    50a5:	e8 00 00 00 00       	callq  50aa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    50aa:	83 c0 01             	add    $0x1,%eax
    50ad:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    50b3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    50b7:	48 89 c7             	mov    %rax,%rdi
    50ba:	e8 00 00 00 00       	callq  50bf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    50bf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50c3:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    50ca:	ba 01 00 00 00       	mov    $0x1,%edx
    50cf:	48 89 ce             	mov    %rcx,%rsi
    50d2:	48 89 c7             	mov    %rax,%rdi
    50d5:	e8 00 00 00 00       	callq  50da <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    50da:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    50de:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    50e5:	48 89 d6             	mov    %rdx,%rsi
    50e8:	48 89 c7             	mov    %rax,%rdi
    50eb:	e8 00 00 00 00       	callq  50f0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    50f0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50f4:	48 89 c7             	mov    %rax,%rdi
    50f7:	e8 00 00 00 00       	callq  50fc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    50fc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5100:	be 7b 00 00 00       	mov    $0x7b,%esi
    5105:	48 89 c7             	mov    %rax,%rdi
    5108:	e8 00 00 00 00       	callq  510d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    510d:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    5113:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    5117:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    511e:	b9 01 00 00 00       	mov    $0x1,%ecx
    5123:	48 89 c7             	mov    %rax,%rdi
    5126:	e8 00 00 00 00       	callq  512b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    512b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    5131:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5137:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    513e:	89 d6                	mov    %edx,%esi
    5140:	48 89 c7             	mov    %rax,%rdi
    5143:	e8 00 00 00 00       	callq  5148 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    5148:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    514c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5150:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5154:	48 89 c7             	mov    %rax,%rdi
    5157:	e8 00 00 00 00       	callq  515c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    515c:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    5163:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    516a:	00 00 00 
        int br=0;
    516d:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    5174:	00 00 00 

        while(bl != br)
    5177:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    517d:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    5183:	0f 84 a2 00 00 00    	je     522b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    5189:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    5190:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5196:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    519d:	89 d6                	mov    %edx,%esi
    519f:	48 89 c7             	mov    %rax,%rdi
    51a2:	e8 00 00 00 00       	callq  51a7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    51a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    51ab:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    51af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51b3:	48 89 c7             	mov    %rax,%rdi
    51b6:	e8 00 00 00 00       	callq  51bb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    51bb:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    51c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51c6:	be 7b 00 00 00       	mov    $0x7b,%esi
    51cb:	48 89 c7             	mov    %rax,%rdi
    51ce:	e8 00 00 00 00       	callq  51d3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    51d3:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51d7:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51de:	89 d6                	mov    %edx,%esi
    51e0:	89 c7                	mov    %eax,%edi
    51e2:	e8 00 00 00 00       	callq  51e7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    51e7:	84 c0                	test   %al,%al
    51e9:	74 07                	je     51f2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    51eb:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    51f2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51f6:	be 7d 00 00 00       	mov    $0x7d,%esi
    51fb:	48 89 c7             	mov    %rax,%rdi
    51fe:	e8 00 00 00 00       	callq  5203 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    5203:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    5207:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    520e:	89 d6                	mov    %edx,%esi
    5210:	89 c7                	mov    %eax,%edi
    5212:	e8 00 00 00 00       	callq  5217 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    5217:	84 c0                	test   %al,%al
    5219:	0f 84 58 ff ff ff    	je     5177 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    521f:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    5226:	e9 4c ff ff ff       	jmpq   5177 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    522b:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    5231:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    5237:	89 c1                	mov    %eax,%ecx
    5239:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    523d:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    5243:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    524a:	48 89 c7             	mov    %rax,%rdi
    524d:	e8 00 00 00 00       	callq  5252 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    5252:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5256:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    525d:	48 89 d6             	mov    %rdx,%rsi
    5260:	48 89 c7             	mov    %rax,%rdi
    5263:	e8 00 00 00 00       	callq  5268 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    5268:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    526c:	48 89 c7             	mov    %rax,%rdi
    526f:	e8 00 00 00 00       	callq  5274 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    5274:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5278:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 527f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    527f:	48 89 c7             	mov    %rax,%rdi
    5282:	e8 00 00 00 00       	callq  5287 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    5287:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    528b:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    528f:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5296:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    529c:	b9 00 00 00 00       	mov    $0x0,%ecx
    52a1:	48 89 c7             	mov    %rax,%rdi
    52a4:	e8 00 00 00 00       	callq  52a9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    52a9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    52ad:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    52b4:	48 89 d6             	mov    %rdx,%rsi
    52b7:	48 89 c7             	mov    %rax,%rdi
    52ba:	e8 00 00 00 00       	callq  52bf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    52bf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    52c3:	48 89 c7             	mov    %rax,%rdi
    52c6:	e8 00 00 00 00       	callq  52cb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    52cb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    52cf:	48 89 c7             	mov    %rax,%rdi
    52d2:	e8 00 00 00 00       	callq  52d7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    52d7:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    52de:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    52e5:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    52ec:	48 89 ce             	mov    %rcx,%rsi
    52ef:	48 89 c7             	mov    %rax,%rdi
    52f2:	e8 00 00 00 00       	callq  52f7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    52f7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52fe:	48 89 c7             	mov    %rax,%rdi
    5301:	e8 00 00 00 00       	callq  5306 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    5306:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    530c:	89 c2                	mov    %eax,%edx
    530e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5312:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    5319:	48 89 ce             	mov    %rcx,%rsi
    531c:	48 89 c7             	mov    %rax,%rdi
    531f:	e8 00 00 00 00       	callq  5324 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    5324:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    5328:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    532f:	48 89 d6             	mov    %rdx,%rsi
    5332:	48 89 c7             	mov    %rax,%rdi
    5335:	e8 00 00 00 00       	callq  533a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    533a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    533e:	48 89 c7             	mov    %rax,%rdi
    5341:	e8 00 00 00 00       	callq  5346 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    5346:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    534c:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    5352:	e9 e3 fc ff ff       	jmpq   503a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    5357:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5358:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    535f:	48 89 c7             	mov    %rax,%rdi
    5362:	e8 00 00 00 00       	callq  5367 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    5367:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    536e:	48 89 c7             	mov    %rax,%rdi
    5371:	e8 00 00 00 00       	callq  5376 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    5376:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    537d:	48 89 c7             	mov    %rax,%rdi
    5380:	e8 00 00 00 00       	callq  5385 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5385:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    538c:	48 89 c7             	mov    %rax,%rdi
    538f:	e8 00 00 00 00       	callq  5394 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5394:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    539b:	48 89 c7             	mov    %rax,%rdi
    539e:	e8 00 00 00 00       	callq  53a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    53a3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    53aa:	48 89 c7             	mov    %rax,%rdi
    53ad:	e8 00 00 00 00       	callq  53b2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    53b2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    53b9:	48 89 c7             	mov    %rax,%rdi
    53bc:	e8 00 00 00 00       	callq  53c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    53c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53c5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    53cc:	00 00 
    53ce:	0f 84 89 01 00 00    	je     555d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    53d4:	e9 7f 01 00 00       	jmpq   5558 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    53d9:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    53dc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    53e3:	48 89 c7             	mov    %rax,%rdi
    53e6:	e8 00 00 00 00       	callq  53eb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    53eb:	e9 d6 00 00 00       	jmpq   54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53f0:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    53f3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    53fa:	48 89 c7             	mov    %rax,%rdi
    53fd:	e8 00 00 00 00       	callq  5402 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    5402:	e9 bf 00 00 00       	jmpq   54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5407:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    540a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5411:	48 89 c7             	mov    %rax,%rdi
    5414:	e8 00 00 00 00       	callq  5419 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    5419:	e9 a8 00 00 00       	jmpq   54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    541e:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    5421:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5428:	48 89 c7             	mov    %rax,%rdi
    542b:	e8 00 00 00 00       	callq  5430 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    5430:	e9 91 00 00 00       	jmpq   54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5435:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    5438:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    543f:	48 89 c7             	mov    %rax,%rdi
    5442:	e8 00 00 00 00       	callq  5447 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    5447:	eb 7d                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5449:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    544c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5453:	48 89 c7             	mov    %rax,%rdi
    5456:	e8 00 00 00 00       	callq  545b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    545b:	eb 69                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    545d:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    5460:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5464:	48 89 c7             	mov    %rax,%rdi
    5467:	e8 00 00 00 00       	callq  546c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    546c:	eb 58                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    546e:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    5471:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5475:	48 89 c7             	mov    %rax,%rdi
    5478:	e8 00 00 00 00       	callq  547d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    547d:	eb 47                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    547f:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    5482:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5486:	48 89 c7             	mov    %rax,%rdi
    5489:	e8 00 00 00 00       	callq  548e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    548e:	eb 36                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5490:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    5493:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5497:	48 89 c7             	mov    %rax,%rdi
    549a:	e8 00 00 00 00       	callq  549f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    549f:	eb 03                	jmp    54a4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    54a1:	48 89 c3             	mov    %rax,%rbx
    54a4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    54a8:	48 89 c7             	mov    %rax,%rdi
    54ab:	e8 00 00 00 00       	callq  54b0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    54b0:	eb 14                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54b2:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    54b5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    54b9:	48 89 c7             	mov    %rax,%rdi
    54bc:	e8 00 00 00 00       	callq  54c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    54c1:	eb 03                	jmp    54c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54c3:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    54c6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    54cd:	48 89 c7             	mov    %rax,%rdi
    54d0:	e8 00 00 00 00       	callq  54d5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    54d5:	eb 03                	jmp    54da <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    54d7:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    54da:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    54e1:	48 89 c7             	mov    %rax,%rdi
    54e4:	e8 00 00 00 00       	callq  54e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    54e9:	eb 03                	jmp    54ee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    54eb:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    54ee:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54f5:	48 89 c7             	mov    %rax,%rdi
    54f8:	e8 00 00 00 00       	callq  54fd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    54fd:	eb 03                	jmp    5502 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    54ff:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5502:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5509:	48 89 c7             	mov    %rax,%rdi
    550c:	e8 00 00 00 00       	callq  5511 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    5511:	eb 03                	jmp    5516 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    5513:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5516:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    551d:	48 89 c7             	mov    %rax,%rdi
    5520:	e8 00 00 00 00       	callq  5525 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    5525:	eb 03                	jmp    552a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    5527:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    552a:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5531:	48 89 c7             	mov    %rax,%rdi
    5534:	e8 00 00 00 00       	callq  5539 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    5539:	eb 03                	jmp    553e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    553b:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    553e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5545:	48 89 c7             	mov    %rax,%rdi
    5548:	e8 00 00 00 00       	callq  554d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    554d:	48 89 d8             	mov    %rbx,%rax
    5550:	48 89 c7             	mov    %rax,%rdi
    5553:	e8 00 00 00 00       	callq  5558 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5558:	e8 00 00 00 00       	callq  555d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    555d:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    5564:	5b                   	pop    %rbx
    5565:	5d                   	pop    %rbp
    5566:	c3                   	retq   
    5567:	90                   	nop

0000000000005568 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    5568:	55                   	push   %rbp
    5569:	48 89 e5             	mov    %rsp,%rbp
    556c:	53                   	push   %rbx
    556d:	48 83 ec 38          	sub    $0x38,%rsp
    5571:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5575:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5579:	89 55 cc             	mov    %edx,-0x34(%rbp)
    557c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5583:	00 00 
    5585:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5589:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    558b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    558f:	8b 55 cc             	mov    -0x34(%rbp),%edx
    5592:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5596:	48 89 ce             	mov    %rcx,%rsi
    5599:	48 89 c7             	mov    %rax,%rdi
    559c:	e8 00 00 00 00       	callq  55a1 <_ZN6Parser8whatLineE7QStringi+0x39>
    55a1:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    55a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55a9:	48 89 d6             	mov    %rdx,%rsi
    55ac:	48 89 c7             	mov    %rax,%rdi
    55af:	e8 00 00 00 00       	callq  55b4 <_ZN6Parser8whatLineE7QStringi+0x4c>
    55b4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55b8:	48 89 c7             	mov    %rax,%rdi
    55bb:	e8 00 00 00 00       	callq  55c0 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    55c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 55cb <_ZN6Parser8whatLineE7QStringi+0x63>
    55cb:	48 89 c7             	mov    %rax,%rdi
    55ce:	e8 00 00 00 00       	callq  55d3 <_ZN6Parser8whatLineE7QStringi+0x6b>
    55d3:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    55d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55db:	ba 01 00 00 00       	mov    $0x1,%edx
    55e0:	48 89 ce             	mov    %rcx,%rsi
    55e3:	48 89 c7             	mov    %rax,%rdi
    55e6:	e8 00 00 00 00       	callq  55eb <_ZN6Parser8whatLineE7QStringi+0x83>
    55eb:	89 c3                	mov    %eax,%ebx
    55ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55f1:	48 89 c7             	mov    %rax,%rdi
    55f4:	e8 00 00 00 00       	callq  55f9 <_ZN6Parser8whatLineE7QStringi+0x91>
    55f9:	89 d8                	mov    %ebx,%eax
}
    55fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    55ff:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    5606:	00 00 
    5608:	74 3b                	je     5645 <_ZN6Parser8whatLineE7QStringi+0xdd>
    560a:	eb 34                	jmp    5640 <_ZN6Parser8whatLineE7QStringi+0xd8>
    560c:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    560f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5613:	48 89 c7             	mov    %rax,%rdi
    5616:	e8 00 00 00 00       	callq  561b <_ZN6Parser8whatLineE7QStringi+0xb3>
    561b:	48 89 d8             	mov    %rbx,%rax
    561e:	48 89 c7             	mov    %rax,%rdi
    5621:	e8 00 00 00 00       	callq  5626 <_ZN6Parser8whatLineE7QStringi+0xbe>
    5626:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    5629:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    562d:	48 89 c7             	mov    %rax,%rdi
    5630:	e8 00 00 00 00       	callq  5635 <_ZN6Parser8whatLineE7QStringi+0xcd>
    5635:	48 89 d8             	mov    %rbx,%rax
    5638:	48 89 c7             	mov    %rax,%rdi
    563b:	e8 00 00 00 00       	callq  5640 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    5640:	e8 00 00 00 00       	callq  5645 <_ZN6Parser8whatLineE7QStringi+0xdd>
    5645:	48 83 c4 38          	add    $0x38,%rsp
    5649:	5b                   	pop    %rbx
    564a:	5d                   	pop    %rbp
    564b:	c3                   	retq   

000000000000564c <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    564c:	55                   	push   %rbp
    564d:	48 89 e5             	mov    %rsp,%rbp
    5650:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    5654:	90                   	nop
    5655:	5d                   	pop    %rbp
    5656:	c3                   	retq   
    5657:	90                   	nop

0000000000005658 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    5658:	55                   	push   %rbp
    5659:	48 89 e5             	mov    %rsp,%rbp
    565c:	53                   	push   %rbx
    565d:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    5664:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    566b:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    5672:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    5679:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5680:	00 00 
    5682:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5686:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    5688:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    568f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5696 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    5696:	48 89 c7             	mov    %rax,%rdi
    5699:	e8 00 00 00 00       	callq  569e <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    569e:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    56a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56ac <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    56ac:	48 89 c7             	mov    %rax,%rdi
    56af:	e8 00 00 00 00       	callq  56b4 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    56b4:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    56bb:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    56c2:	48 89 d6             	mov    %rdx,%rsi
    56c5:	48 89 c7             	mov    %rax,%rdi
    56c8:	e8 00 00 00 00       	callq  56cd <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    56cd:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    56d4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    56db:	48 89 d6             	mov    %rdx,%rsi
    56de:	48 89 c7             	mov    %rax,%rdi
    56e1:	e8 00 00 00 00       	callq  56e6 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    56e6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56ed:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56f4 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    56f4:	48 89 c7             	mov    %rax,%rdi
    56f7:	e8 00 00 00 00       	callq  56fc <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    56fc:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5703:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 570a <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    570a:	48 89 c7             	mov    %rax,%rdi
    570d:	e8 00 00 00 00       	callq  5712 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    5712:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    5719:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5720:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5727:	b9 01 00 00 00       	mov    $0x1,%ecx
    572c:	48 89 c7             	mov    %rax,%rdi
    572f:	e8 00 00 00 00       	callq  5734 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    5734:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    573b:	48 89 c7             	mov    %rax,%rdi
    573e:	e8 00 00 00 00       	callq  5743 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    5743:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    574a:	48 89 c7             	mov    %rax,%rdi
    574d:	e8 00 00 00 00       	callq  5752 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    5752:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5759:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5760 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    5760:	48 89 c7             	mov    %rax,%rdi
    5763:	e8 00 00 00 00       	callq  5768 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    5768:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    576f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5776 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    5776:	48 89 c7             	mov    %rax,%rdi
    5779:	e8 00 00 00 00       	callq  577e <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    577e:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    5785:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    578c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5793:	b9 01 00 00 00       	mov    $0x1,%ecx
    5798:	48 89 c7             	mov    %rax,%rdi
    579b:	e8 00 00 00 00       	callq  57a0 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    57a0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    57a7:	48 89 c7             	mov    %rax,%rdi
    57aa:	e8 00 00 00 00       	callq  57af <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    57af:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    57b6:	48 89 c7             	mov    %rax,%rdi
    57b9:	e8 00 00 00 00       	callq  57be <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    57be:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    57c5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    57c9:	48 89 d6             	mov    %rdx,%rsi
    57cc:	48 89 c7             	mov    %rax,%rdi
    57cf:	e8 00 00 00 00       	callq  57d4 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    57d4:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    57db:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    57df:	48 89 d6             	mov    %rdx,%rsi
    57e2:	48 89 c7             	mov    %rax,%rdi
    57e5:	e8 00 00 00 00       	callq  57ea <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    57ea:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    57f1:	be 02 00 00 00       	mov    $0x2,%esi
    57f6:	48 89 c7             	mov    %rax,%rdi
    57f9:	e8 00 00 00 00       	callq  57fe <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    57fe:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    5805:	be 02 00 00 00       	mov    $0x2,%esi
    580a:	48 89 c7             	mov    %rax,%rdi
    580d:	e8 00 00 00 00       	callq  5812 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    5812:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5819:	48 89 c7             	mov    %rax,%rdi
    581c:	e8 00 00 00 00       	callq  5821 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    5821:	84 c0                	test   %al,%al
    5823:	74 1a                	je     583f <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    5825:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5829:	be 04 00 00 00       	mov    $0x4,%esi
    582e:	48 89 c7             	mov    %rax,%rdi
    5831:	e8 00 00 00 00       	callq  5836 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    5836:	8b 45 d0             	mov    -0x30(%rbp),%eax
    5839:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    583f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5846:	48 89 c7             	mov    %rax,%rdi
    5849:	e8 00 00 00 00       	callq  584e <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    584e:	84 c0                	test   %al,%al
    5850:	74 1a                	je     586c <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    5852:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5856:	be 04 00 00 00       	mov    $0x4,%esi
    585b:	48 89 c7             	mov    %rax,%rdi
    585e:	e8 00 00 00 00       	callq  5863 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    5863:	8b 45 d0             	mov    -0x30(%rbp),%eax
    5866:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    586c:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    5872:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5876:	89 d6                	mov    %edx,%esi
    5878:	48 89 c7             	mov    %rax,%rdi
    587b:	e8 00 00 00 00       	callq  5880 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    5880:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    5886:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    588a:	89 d6                	mov    %edx,%esi
    588c:	48 89 c7             	mov    %rax,%rdi
    588f:	e8 00 00 00 00       	callq  5894 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    5894:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5898:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    589c:	48 89 d6             	mov    %rdx,%rsi
    589f:	48 89 c7             	mov    %rax,%rdi
    58a2:	e8 00 00 00 00       	callq  58a7 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    58a7:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    58ab:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    58af:	48 89 d6             	mov    %rdx,%rsi
    58b2:	48 89 c7             	mov    %rax,%rdi
    58b5:	e8 00 00 00 00       	callq  58ba <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    58ba:	e8 00 00 00 00       	callq  58bf <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    58bf:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    58c6:	e8 00 00 00 00       	callq  58cb <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    58cb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    58d1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    58d8:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    58df:	ba 00 00 00 00       	mov    $0x0,%edx
    58e4:	48 89 ce             	mov    %rcx,%rsi
    58e7:	48 89 c7             	mov    %rax,%rdi
    58ea:	e8 00 00 00 00       	callq  58ef <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    58ef:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    58f6:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    58fd:	ba 00 00 00 00       	mov    $0x0,%edx
    5902:	48 89 ce             	mov    %rcx,%rsi
    5905:	48 89 c7             	mov    %rax,%rdi
    5908:	e8 00 00 00 00       	callq  590d <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    590d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5914:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    591b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5922 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    5922:	48 89 ce             	mov    %rcx,%rsi
    5925:	48 89 c7             	mov    %rax,%rdi
    5928:	e8 00 00 00 00       	callq  592d <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    592d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5934:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    593b:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    5942:	48 89 ce             	mov    %rcx,%rsi
    5945:	48 89 c7             	mov    %rax,%rdi
    5948:	e8 00 00 00 00       	callq  594d <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    594d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5954:	48 89 c7             	mov    %rax,%rdi
    5957:	e8 00 00 00 00       	callq  595c <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    595c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5963:	48 89 c7             	mov    %rax,%rdi
    5966:	e8 00 00 00 00       	callq  596b <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    596b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5972:	48 89 c7             	mov    %rax,%rdi
    5975:	e8 00 00 00 00       	callq  597a <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    597a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5981:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5988:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 598f <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    598f:	48 89 c7             	mov    %rax,%rdi
    5992:	e8 00 00 00 00       	callq  5997 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    5997:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    599e:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    59a5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59ac <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    59ac:	48 89 ce             	mov    %rcx,%rsi
    59af:	48 89 c7             	mov    %rax,%rdi
    59b2:	e8 00 00 00 00       	callq  59b7 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    59b7:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    59be:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    59c2:	48 89 d6             	mov    %rdx,%rsi
    59c5:	48 89 c7             	mov    %rax,%rdi
    59c8:	e8 00 00 00 00       	callq  59cd <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    59cd:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    59d4:	48 89 c7             	mov    %rax,%rdi
    59d7:	e8 00 00 00 00       	callq  59dc <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    59dc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    59e3:	48 89 c7             	mov    %rax,%rdi
    59e6:	e8 00 00 00 00       	callq  59eb <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    59eb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59ef:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    59f6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59fd <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    59fd:	48 89 c7             	mov    %rax,%rdi
    5a00:	e8 00 00 00 00       	callq  5a05 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    5a05:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5a09:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5a0d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5a14 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    5a14:	48 89 ce             	mov    %rcx,%rsi
    5a17:	48 89 c7             	mov    %rax,%rdi
    5a1a:	e8 00 00 00 00       	callq  5a1f <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    5a1f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5a23:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a27:	48 89 d6             	mov    %rdx,%rsi
    5a2a:	48 89 c7             	mov    %rax,%rdi
    5a2d:	e8 00 00 00 00       	callq  5a32 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    5a32:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5a36:	48 89 c7             	mov    %rax,%rdi
    5a39:	e8 00 00 00 00       	callq  5a3e <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    5a3e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5a42:	48 89 c7             	mov    %rax,%rdi
    5a45:	e8 00 00 00 00       	callq  5a4a <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    5a4a:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5a51:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a55:	48 89 d6             	mov    %rdx,%rsi
    5a58:	48 89 c7             	mov    %rax,%rdi
    5a5b:	e8 00 00 00 00       	callq  5a60 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5a60:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5a67:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a6b:	48 89 d6             	mov    %rdx,%rsi
    5a6e:	48 89 c7             	mov    %rax,%rdi
    5a71:	e8 00 00 00 00       	callq  5a76 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5a76:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a7a:	48 89 c7             	mov    %rax,%rdi
    5a7d:	e8 00 00 00 00       	callq  5a82 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5a82:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a86:	48 89 c7             	mov    %rax,%rdi
    5a89:	e8 00 00 00 00       	callq  5a8e <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5a8e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5a95:	48 89 c7             	mov    %rax,%rdi
    5a98:	e8 00 00 00 00       	callq  5a9d <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5a9d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5aa1:	48 89 c7             	mov    %rax,%rdi
    5aa4:	e8 00 00 00 00       	callq  5aa9 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5aa9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5aad:	48 89 c7             	mov    %rax,%rdi
    5ab0:	e8 00 00 00 00       	callq  5ab5 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5ab5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5ab9:	48 89 c7             	mov    %rax,%rdi
    5abc:	e8 00 00 00 00       	callq  5ac1 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5ac1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5ac5:	48 89 c7             	mov    %rax,%rdi
    5ac8:	e8 00 00 00 00       	callq  5acd <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5acd:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5ad4:	48 89 c7             	mov    %rax,%rdi
    5ad7:	e8 00 00 00 00       	callq  5adc <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5adc:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5ae3:	48 89 c7             	mov    %rax,%rdi
    5ae6:	e8 00 00 00 00       	callq  5aeb <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5aeb:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5af2:	48 89 c7             	mov    %rax,%rdi
    5af5:	e8 00 00 00 00       	callq  5afa <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5afa:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5b01:	48 89 c7             	mov    %rax,%rdi
    5b04:	e8 00 00 00 00       	callq  5b09 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5b09:	90                   	nop
    5b0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b0e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5b15:	00 00 
    5b17:	0f 84 d3 01 00 00    	je     5cf0 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5b1d:	e9 c9 01 00 00       	jmpq   5ceb <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5b22:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5b25:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5b2c:	48 89 c7             	mov    %rax,%rdi
    5b2f:	e8 00 00 00 00       	callq  5b34 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5b34:	eb 03                	jmp    5b39 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5b36:	48 89 c3             	mov    %rax,%rbx
    5b39:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5b40:	48 89 c7             	mov    %rax,%rdi
    5b43:	e8 00 00 00 00       	callq  5b48 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5b48:	e9 48 01 00 00       	jmpq   5c95 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b4d:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5b50:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5b57:	48 89 c7             	mov    %rax,%rdi
    5b5a:	e8 00 00 00 00       	callq  5b5f <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5b5f:	eb 03                	jmp    5b64 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5b61:	48 89 c3             	mov    %rax,%rbx
    5b64:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5b6b:	48 89 c7             	mov    %rax,%rdi
    5b6e:	e8 00 00 00 00       	callq  5b73 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5b73:	e9 1d 01 00 00       	jmpq   5c95 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b78:	48 89 c3             	mov    %rax,%rbx
    5b7b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b82:	48 89 c7             	mov    %rax,%rdi
    5b85:	e8 00 00 00 00       	callq  5b8a <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5b8a:	eb 17                	jmp    5ba3 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b8c:	48 89 c3             	mov    %rax,%rbx
    5b8f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b96:	48 89 c7             	mov    %rax,%rdi
    5b99:	e8 00 00 00 00       	callq  5b9e <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5b9e:	eb 03                	jmp    5ba3 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5ba0:	48 89 c3             	mov    %rax,%rbx
    5ba3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5baa:	48 89 c7             	mov    %rax,%rdi
    5bad:	e8 00 00 00 00       	callq  5bb2 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5bb2:	eb 17                	jmp    5bcb <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5bb4:	48 89 c3             	mov    %rax,%rbx
    5bb7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5bbe:	48 89 c7             	mov    %rax,%rdi
    5bc1:	e8 00 00 00 00       	callq  5bc6 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5bc6:	eb 03                	jmp    5bcb <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5bc8:	48 89 c3             	mov    %rax,%rbx
    5bcb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5bd2:	48 89 c7             	mov    %rax,%rdi
    5bd5:	e8 00 00 00 00       	callq  5bda <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5bda:	eb 75                	jmp    5c51 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5bdc:	48 89 c3             	mov    %rax,%rbx
    5bdf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5be6:	48 89 c7             	mov    %rax,%rdi
    5be9:	e8 00 00 00 00       	callq  5bee <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5bee:	eb 61                	jmp    5c51 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5bf0:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5bf3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5bfa:	48 89 c7             	mov    %rax,%rdi
    5bfd:	e8 00 00 00 00       	callq  5c02 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5c02:	eb 03                	jmp    5c07 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5c04:	48 89 c3             	mov    %rax,%rbx
    5c07:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5c0e:	48 89 c7             	mov    %rax,%rdi
    5c11:	e8 00 00 00 00       	callq  5c16 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5c16:	eb 25                	jmp    5c3d <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5c18:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5c1b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5c1f:	48 89 c7             	mov    %rax,%rdi
    5c22:	e8 00 00 00 00       	callq  5c27 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5c27:	eb 03                	jmp    5c2c <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5c29:	48 89 c3             	mov    %rax,%rbx
    5c2c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5c30:	48 89 c7             	mov    %rax,%rdi
    5c33:	e8 00 00 00 00       	callq  5c38 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5c38:	eb 03                	jmp    5c3d <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5c3a:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5c3d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c44:	48 89 c7             	mov    %rax,%rdi
    5c47:	e8 00 00 00 00       	callq  5c4c <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5c4c:	eb 03                	jmp    5c51 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c4e:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5c51:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c55:	48 89 c7             	mov    %rax,%rdi
    5c58:	e8 00 00 00 00       	callq  5c5d <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5c5d:	eb 03                	jmp    5c62 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5c5f:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5c62:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c66:	48 89 c7             	mov    %rax,%rdi
    5c69:	e8 00 00 00 00       	callq  5c6e <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5c6e:	eb 03                	jmp    5c73 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5c70:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5c73:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5c77:	48 89 c7             	mov    %rax,%rdi
    5c7a:	e8 00 00 00 00       	callq  5c7f <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5c7f:	eb 03                	jmp    5c84 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5c81:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5c84:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5c88:	48 89 c7             	mov    %rax,%rdi
    5c8b:	e8 00 00 00 00       	callq  5c90 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5c90:	eb 03                	jmp    5c95 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c92:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5c95:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5c9c:	48 89 c7             	mov    %rax,%rdi
    5c9f:	e8 00 00 00 00       	callq  5ca4 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5ca4:	eb 03                	jmp    5ca9 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5ca6:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5ca9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5cb0:	48 89 c7             	mov    %rax,%rdi
    5cb3:	e8 00 00 00 00       	callq  5cb8 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5cb8:	eb 03                	jmp    5cbd <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5cba:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5cbd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5cc4:	48 89 c7             	mov    %rax,%rdi
    5cc7:	e8 00 00 00 00       	callq  5ccc <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5ccc:	eb 03                	jmp    5cd1 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5cce:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5cd1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5cd8:	48 89 c7             	mov    %rax,%rdi
    5cdb:	e8 00 00 00 00       	callq  5ce0 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5ce0:	48 89 d8             	mov    %rbx,%rax
    5ce3:	48 89 c7             	mov    %rax,%rdi
    5ce6:	e8 00 00 00 00       	callq  5ceb <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5ceb:	e8 00 00 00 00       	callq  5cf0 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5cf0:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5cf7:	5b                   	pop    %rbx
    5cf8:	5d                   	pop    %rbp
    5cf9:	c3                   	retq   

0000000000005cfa <_ZN6Parser4initEv>:

void Parser::init(){
    5cfa:	55                   	push   %rbp
    5cfb:	48 89 e5             	mov    %rsp,%rbp
    5cfe:	48 83 ec 10          	sub    $0x10,%rsp
    5d02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d0a:	48 83 c0 30          	add    $0x30,%rax
    5d0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d15 <_ZN6Parser4initEv+0x1b>
    5d15:	48 89 c7             	mov    %rax,%rdi
    5d18:	e8 00 00 00 00       	callq  5d1d <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5d1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d21:	48 83 c0 38          	add    $0x38,%rax
    5d25:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d2c <_ZN6Parser4initEv+0x32>
    5d2c:	48 89 c7             	mov    %rax,%rdi
    5d2f:	e8 00 00 00 00       	callq  5d34 <_ZN6Parser4initEv+0x3a>
}
    5d34:	90                   	nop
    5d35:	c9                   	leaveq 
    5d36:	c3                   	retq   
    5d37:	90                   	nop

0000000000005d38 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5d38:	55                   	push   %rbp
    5d39:	48 89 e5             	mov    %rsp,%rbp
    5d3c:	53                   	push   %rbx
    5d3d:	48 83 ec 38          	sub    $0x38,%rsp
    5d41:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5d45:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d4c:	00 00 
    5d4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5d52:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5d54:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d5f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d66 <_ZN6Parser8initSemsEv+0x2e>
    5d66:	48 89 c7             	mov    %rax,%rdi
    5d69:	e8 00 00 00 00       	callq  5d6e <_ZN6Parser8initSemsEv+0x36>
    5d6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d72:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d79:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d81:	48 89 c6             	mov    %rax,%rsi
    5d84:	48 89 cf             	mov    %rcx,%rdi
    5d87:	e8 00 00 00 00       	callq  5d8c <_ZN6Parser8initSemsEv+0x54>
    5d8c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d90:	48 89 c7             	mov    %rax,%rdi
    5d93:	e8 00 00 00 00       	callq  5d98 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5d98:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d9f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5da3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5daa <_ZN6Parser8initSemsEv+0x72>
    5daa:	48 89 c7             	mov    %rax,%rdi
    5dad:	e8 00 00 00 00       	callq  5db2 <_ZN6Parser8initSemsEv+0x7a>
    5db2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5db6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5dbd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dc1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dc5:	48 89 c6             	mov    %rax,%rsi
    5dc8:	48 89 cf             	mov    %rcx,%rdi
    5dcb:	e8 00 00 00 00       	callq  5dd0 <_ZN6Parser8initSemsEv+0x98>
    5dd0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dd4:	48 89 c7             	mov    %rax,%rdi
    5dd7:	e8 00 00 00 00       	callq  5ddc <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5ddc:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5de3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5de7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dee <_ZN6Parser8initSemsEv+0xb6>
    5dee:	48 89 c7             	mov    %rax,%rdi
    5df1:	e8 00 00 00 00       	callq  5df6 <_ZN6Parser8initSemsEv+0xbe>
    5df6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dfa:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e01:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e09:	48 89 c6             	mov    %rax,%rsi
    5e0c:	48 89 cf             	mov    %rcx,%rdi
    5e0f:	e8 00 00 00 00       	callq  5e14 <_ZN6Parser8initSemsEv+0xdc>
    5e14:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e18:	48 89 c7             	mov    %rax,%rdi
    5e1b:	e8 00 00 00 00       	callq  5e20 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5e20:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5e27:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e2b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e32 <_ZN6Parser8initSemsEv+0xfa>
    5e32:	48 89 c7             	mov    %rax,%rdi
    5e35:	e8 00 00 00 00       	callq  5e3a <_ZN6Parser8initSemsEv+0x102>
    5e3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e3e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e45:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e49:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e4d:	48 89 c6             	mov    %rax,%rsi
    5e50:	48 89 cf             	mov    %rcx,%rdi
    5e53:	e8 00 00 00 00       	callq  5e58 <_ZN6Parser8initSemsEv+0x120>
    5e58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e5c:	48 89 c7             	mov    %rax,%rdi
    5e5f:	e8 00 00 00 00       	callq  5e64 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5e64:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5e6b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e6f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e76 <_ZN6Parser8initSemsEv+0x13e>
    5e76:	48 89 c7             	mov    %rax,%rdi
    5e79:	e8 00 00 00 00       	callq  5e7e <_ZN6Parser8initSemsEv+0x146>
    5e7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e82:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e89:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e8d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e91:	48 89 c6             	mov    %rax,%rsi
    5e94:	48 89 cf             	mov    %rcx,%rdi
    5e97:	e8 00 00 00 00       	callq  5e9c <_ZN6Parser8initSemsEv+0x164>
    5e9c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ea0:	48 89 c7             	mov    %rax,%rdi
    5ea3:	e8 00 00 00 00       	callq  5ea8 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5ea8:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5eaf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eb3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5eba <_ZN6Parser8initSemsEv+0x182>
    5eba:	48 89 c7             	mov    %rax,%rdi
    5ebd:	e8 00 00 00 00       	callq  5ec2 <_ZN6Parser8initSemsEv+0x18a>
    5ec2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ec6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ecd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ed1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ed5:	48 89 c6             	mov    %rax,%rsi
    5ed8:	48 89 cf             	mov    %rcx,%rdi
    5edb:	e8 00 00 00 00       	callq  5ee0 <_ZN6Parser8initSemsEv+0x1a8>
    5ee0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ee4:	48 89 c7             	mov    %rax,%rdi
    5ee7:	e8 00 00 00 00       	callq  5eec <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5eec:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5ef3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ef7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5efe <_ZN6Parser8initSemsEv+0x1c6>
    5efe:	48 89 c7             	mov    %rax,%rdi
    5f01:	e8 00 00 00 00       	callq  5f06 <_ZN6Parser8initSemsEv+0x1ce>
    5f06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f0a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f11:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f15:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f19:	48 89 c6             	mov    %rax,%rsi
    5f1c:	48 89 cf             	mov    %rcx,%rdi
    5f1f:	e8 00 00 00 00       	callq  5f24 <_ZN6Parser8initSemsEv+0x1ec>
    5f24:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f28:	48 89 c7             	mov    %rax,%rdi
    5f2b:	e8 00 00 00 00       	callq  5f30 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5f30:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5f37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f3b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f42 <_ZN6Parser8initSemsEv+0x20a>
    5f42:	48 89 c7             	mov    %rax,%rdi
    5f45:	e8 00 00 00 00       	callq  5f4a <_ZN6Parser8initSemsEv+0x212>
    5f4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f4e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f55:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f5d:	48 89 c6             	mov    %rax,%rsi
    5f60:	48 89 cf             	mov    %rcx,%rdi
    5f63:	e8 00 00 00 00       	callq  5f68 <_ZN6Parser8initSemsEv+0x230>
    5f68:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f6c:	48 89 c7             	mov    %rax,%rdi
    5f6f:	e8 00 00 00 00       	callq  5f74 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5f74:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5f7b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f7f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f86 <_ZN6Parser8initSemsEv+0x24e>
    5f86:	48 89 c7             	mov    %rax,%rdi
    5f89:	e8 00 00 00 00       	callq  5f8e <_ZN6Parser8initSemsEv+0x256>
    5f8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f92:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f99:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f9d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fa1:	48 89 c6             	mov    %rax,%rsi
    5fa4:	48 89 cf             	mov    %rcx,%rdi
    5fa7:	e8 00 00 00 00       	callq  5fac <_ZN6Parser8initSemsEv+0x274>
    5fac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fb0:	48 89 c7             	mov    %rax,%rdi
    5fb3:	e8 00 00 00 00       	callq  5fb8 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5fb8:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5fbf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fc3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fca <_ZN6Parser8initSemsEv+0x292>
    5fca:	48 89 c7             	mov    %rax,%rdi
    5fcd:	e8 00 00 00 00       	callq  5fd2 <_ZN6Parser8initSemsEv+0x29a>
    5fd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fd6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fdd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fe1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fe5:	48 89 c6             	mov    %rax,%rsi
    5fe8:	48 89 cf             	mov    %rcx,%rdi
    5feb:	e8 00 00 00 00       	callq  5ff0 <_ZN6Parser8initSemsEv+0x2b8>
    5ff0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ff4:	48 89 c7             	mov    %rax,%rdi
    5ff7:	e8 00 00 00 00       	callq  5ffc <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5ffc:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    6003:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6007:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 600e <_ZN6Parser8initSemsEv+0x2d6>
    600e:	48 89 c7             	mov    %rax,%rdi
    6011:	e8 00 00 00 00       	callq  6016 <_ZN6Parser8initSemsEv+0x2de>
    6016:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    601a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6021:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6025:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6029:	48 89 c6             	mov    %rax,%rsi
    602c:	48 89 cf             	mov    %rcx,%rdi
    602f:	e8 00 00 00 00       	callq  6034 <_ZN6Parser8initSemsEv+0x2fc>
    6034:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6038:	48 89 c7             	mov    %rax,%rdi
    603b:	e8 00 00 00 00       	callq  6040 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    6040:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    6047:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    604b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6052 <_ZN6Parser8initSemsEv+0x31a>
    6052:	48 89 c7             	mov    %rax,%rdi
    6055:	e8 00 00 00 00       	callq  605a <_ZN6Parser8initSemsEv+0x322>
    605a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    605e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6065:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6069:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    606d:	48 89 c6             	mov    %rax,%rsi
    6070:	48 89 cf             	mov    %rcx,%rdi
    6073:	e8 00 00 00 00       	callq  6078 <_ZN6Parser8initSemsEv+0x340>
    6078:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    607c:	48 89 c7             	mov    %rax,%rdi
    607f:	e8 00 00 00 00       	callq  6084 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    6084:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    608b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    608f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6096 <_ZN6Parser8initSemsEv+0x35e>
    6096:	48 89 c7             	mov    %rax,%rdi
    6099:	e8 00 00 00 00       	callq  609e <_ZN6Parser8initSemsEv+0x366>
    609e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60a2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60a9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60ad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60b1:	48 89 c6             	mov    %rax,%rsi
    60b4:	48 89 cf             	mov    %rcx,%rdi
    60b7:	e8 00 00 00 00       	callq  60bc <_ZN6Parser8initSemsEv+0x384>
    60bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60c0:	48 89 c7             	mov    %rax,%rdi
    60c3:	e8 00 00 00 00       	callq  60c8 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    60c8:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    60cf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60da <_ZN6Parser8initSemsEv+0x3a2>
    60da:	48 89 c7             	mov    %rax,%rdi
    60dd:	e8 00 00 00 00       	callq  60e2 <_ZN6Parser8initSemsEv+0x3aa>
    60e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60e6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60ed:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60f5:	48 89 c6             	mov    %rax,%rsi
    60f8:	48 89 cf             	mov    %rcx,%rdi
    60fb:	e8 00 00 00 00       	callq  6100 <_ZN6Parser8initSemsEv+0x3c8>
    6100:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6104:	48 89 c7             	mov    %rax,%rdi
    6107:	e8 00 00 00 00       	callq  610c <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    610c:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    6113:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6117:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 611e <_ZN6Parser8initSemsEv+0x3e6>
    611e:	48 89 c7             	mov    %rax,%rdi
    6121:	e8 00 00 00 00       	callq  6126 <_ZN6Parser8initSemsEv+0x3ee>
    6126:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    612a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6131:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6135:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6139:	48 89 c6             	mov    %rax,%rsi
    613c:	48 89 cf             	mov    %rcx,%rdi
    613f:	e8 00 00 00 00       	callq  6144 <_ZN6Parser8initSemsEv+0x40c>
    6144:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6148:	48 89 c7             	mov    %rax,%rdi
    614b:	e8 00 00 00 00       	callq  6150 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    6150:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    6157:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    615b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6162 <_ZN6Parser8initSemsEv+0x42a>
    6162:	48 89 c7             	mov    %rax,%rdi
    6165:	e8 00 00 00 00       	callq  616a <_ZN6Parser8initSemsEv+0x432>
    616a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    616e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6175:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6179:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    617d:	48 89 c6             	mov    %rax,%rsi
    6180:	48 89 cf             	mov    %rcx,%rdi
    6183:	e8 00 00 00 00       	callq  6188 <_ZN6Parser8initSemsEv+0x450>
    6188:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    618c:	48 89 c7             	mov    %rax,%rdi
    618f:	e8 00 00 00 00       	callq  6194 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6194:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    619b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    619f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61a6 <_ZN6Parser8initSemsEv+0x46e>
    61a6:	48 89 c7             	mov    %rax,%rdi
    61a9:	e8 00 00 00 00       	callq  61ae <_ZN6Parser8initSemsEv+0x476>
    61ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61b2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61b9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61c1:	48 89 c6             	mov    %rax,%rsi
    61c4:	48 89 cf             	mov    %rcx,%rdi
    61c7:	e8 00 00 00 00       	callq  61cc <_ZN6Parser8initSemsEv+0x494>
    61cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61d0:	48 89 c7             	mov    %rax,%rdi
    61d3:	e8 00 00 00 00       	callq  61d8 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    61d8:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    61df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61ea <_ZN6Parser8initSemsEv+0x4b2>
    61ea:	48 89 c7             	mov    %rax,%rdi
    61ed:	e8 00 00 00 00       	callq  61f2 <_ZN6Parser8initSemsEv+0x4ba>
    61f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61f6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61fd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6201:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6205:	48 89 c6             	mov    %rax,%rsi
    6208:	48 89 cf             	mov    %rcx,%rdi
    620b:	e8 00 00 00 00       	callq  6210 <_ZN6Parser8initSemsEv+0x4d8>
    6210:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6214:	48 89 c7             	mov    %rax,%rdi
    6217:	e8 00 00 00 00       	callq  621c <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    621c:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    6223:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6227:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 622e <_ZN6Parser8initSemsEv+0x4f6>
    622e:	48 89 c7             	mov    %rax,%rdi
    6231:	e8 00 00 00 00       	callq  6236 <_ZN6Parser8initSemsEv+0x4fe>
    6236:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    623a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6241:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6245:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6249:	48 89 c6             	mov    %rax,%rsi
    624c:	48 89 cf             	mov    %rcx,%rdi
    624f:	e8 00 00 00 00       	callq  6254 <_ZN6Parser8initSemsEv+0x51c>
    6254:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6258:	48 89 c7             	mov    %rax,%rdi
    625b:	e8 00 00 00 00       	callq  6260 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    6260:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    6267:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    626b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6272 <_ZN6Parser8initSemsEv+0x53a>
    6272:	48 89 c7             	mov    %rax,%rdi
    6275:	e8 00 00 00 00       	callq  627a <_ZN6Parser8initSemsEv+0x542>
    627a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    627e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6285:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6289:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    628d:	48 89 c6             	mov    %rax,%rsi
    6290:	48 89 cf             	mov    %rcx,%rdi
    6293:	e8 00 00 00 00       	callq  6298 <_ZN6Parser8initSemsEv+0x560>
    6298:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    629c:	48 89 c7             	mov    %rax,%rdi
    629f:	e8 00 00 00 00       	callq  62a4 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    62a4:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    62ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62af:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62b6 <_ZN6Parser8initSemsEv+0x57e>
    62b6:	48 89 c7             	mov    %rax,%rdi
    62b9:	e8 00 00 00 00       	callq  62be <_ZN6Parser8initSemsEv+0x586>
    62be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62c2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    62c9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62cd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62d1:	48 89 c6             	mov    %rax,%rsi
    62d4:	48 89 cf             	mov    %rcx,%rdi
    62d7:	e8 00 00 00 00       	callq  62dc <_ZN6Parser8initSemsEv+0x5a4>
    62dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62e0:	48 89 c7             	mov    %rax,%rdi
    62e3:	e8 00 00 00 00       	callq  62e8 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    62e8:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    62ef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62f3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62fa <_ZN6Parser8initSemsEv+0x5c2>
    62fa:	48 89 c7             	mov    %rax,%rdi
    62fd:	e8 00 00 00 00       	callq  6302 <_ZN6Parser8initSemsEv+0x5ca>
    6302:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6306:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    630d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6311:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6315:	48 89 c6             	mov    %rax,%rsi
    6318:	48 89 cf             	mov    %rcx,%rdi
    631b:	e8 00 00 00 00       	callq  6320 <_ZN6Parser8initSemsEv+0x5e8>
    6320:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6324:	48 89 c7             	mov    %rax,%rdi
    6327:	e8 00 00 00 00       	callq  632c <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    632c:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    6333:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6337:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 633e <_ZN6Parser8initSemsEv+0x606>
    633e:	48 89 c7             	mov    %rax,%rdi
    6341:	e8 00 00 00 00       	callq  6346 <_ZN6Parser8initSemsEv+0x60e>
    6346:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    634a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6351:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6355:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6359:	48 89 c6             	mov    %rax,%rsi
    635c:	48 89 cf             	mov    %rcx,%rdi
    635f:	e8 00 00 00 00       	callq  6364 <_ZN6Parser8initSemsEv+0x62c>
    6364:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6368:	48 89 c7             	mov    %rax,%rdi
    636b:	e8 00 00 00 00       	callq  6370 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    6370:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    6377:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    637b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6382 <_ZN6Parser8initSemsEv+0x64a>
    6382:	48 89 c7             	mov    %rax,%rdi
    6385:	e8 00 00 00 00       	callq  638a <_ZN6Parser8initSemsEv+0x652>
    638a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    638e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6395:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6399:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    639d:	48 89 c6             	mov    %rax,%rsi
    63a0:	48 89 cf             	mov    %rcx,%rdi
    63a3:	e8 00 00 00 00       	callq  63a8 <_ZN6Parser8initSemsEv+0x670>
    63a8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ac:	48 89 c7             	mov    %rax,%rdi
    63af:	e8 00 00 00 00       	callq  63b4 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    63b4:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    63bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63c6 <_ZN6Parser8initSemsEv+0x68e>
    63c6:	48 89 c7             	mov    %rax,%rdi
    63c9:	e8 00 00 00 00       	callq  63ce <_ZN6Parser8initSemsEv+0x696>
    63ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63d2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    63d9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63e1:	48 89 c6             	mov    %rax,%rsi
    63e4:	48 89 cf             	mov    %rcx,%rdi
    63e7:	e8 00 00 00 00       	callq  63ec <_ZN6Parser8initSemsEv+0x6b4>
    63ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63f0:	48 89 c7             	mov    %rax,%rdi
    63f3:	e8 00 00 00 00       	callq  63f8 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    63f8:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    63ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6403:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 640a <_ZN6Parser8initSemsEv+0x6d2>
    640a:	48 89 c7             	mov    %rax,%rdi
    640d:	e8 00 00 00 00       	callq  6412 <_ZN6Parser8initSemsEv+0x6da>
    6412:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6416:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    641d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6421:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6425:	48 89 c6             	mov    %rax,%rsi
    6428:	48 89 cf             	mov    %rcx,%rdi
    642b:	e8 00 00 00 00       	callq  6430 <_ZN6Parser8initSemsEv+0x6f8>
    6430:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6434:	48 89 c7             	mov    %rax,%rdi
    6437:	e8 00 00 00 00       	callq  643c <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    643c:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    6443:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6447:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 644e <_ZN6Parser8initSemsEv+0x716>
    644e:	48 89 c7             	mov    %rax,%rdi
    6451:	e8 00 00 00 00       	callq  6456 <_ZN6Parser8initSemsEv+0x71e>
    6456:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    645a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6461:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6465:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6469:	48 89 c6             	mov    %rax,%rsi
    646c:	48 89 cf             	mov    %rcx,%rdi
    646f:	e8 00 00 00 00       	callq  6474 <_ZN6Parser8initSemsEv+0x73c>
    6474:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6478:	48 89 c7             	mov    %rax,%rdi
    647b:	e8 00 00 00 00       	callq  6480 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    6480:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    6487:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    648b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6492 <_ZN6Parser8initSemsEv+0x75a>
    6492:	48 89 c7             	mov    %rax,%rdi
    6495:	e8 00 00 00 00       	callq  649a <_ZN6Parser8initSemsEv+0x762>
    649a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    649e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64a5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64ad:	48 89 c6             	mov    %rax,%rsi
    64b0:	48 89 cf             	mov    %rcx,%rdi
    64b3:	e8 00 00 00 00       	callq  64b8 <_ZN6Parser8initSemsEv+0x780>
    64b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64bc:	48 89 c7             	mov    %rax,%rdi
    64bf:	e8 00 00 00 00       	callq  64c4 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    64c4:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    64cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64d6 <_ZN6Parser8initSemsEv+0x79e>
    64d6:	48 89 c7             	mov    %rax,%rdi
    64d9:	e8 00 00 00 00       	callq  64de <_ZN6Parser8initSemsEv+0x7a6>
    64de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64e2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64e9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64f1:	48 89 c6             	mov    %rax,%rsi
    64f4:	48 89 cf             	mov    %rcx,%rdi
    64f7:	e8 00 00 00 00       	callq  64fc <_ZN6Parser8initSemsEv+0x7c4>
    64fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6500:	48 89 c7             	mov    %rax,%rdi
    6503:	e8 00 00 00 00       	callq  6508 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    6508:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    650f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6513:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 651a <_ZN6Parser8initSemsEv+0x7e2>
    651a:	48 89 c7             	mov    %rax,%rdi
    651d:	e8 00 00 00 00       	callq  6522 <_ZN6Parser8initSemsEv+0x7ea>
    6522:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6526:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    652d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6531:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6535:	48 89 c6             	mov    %rax,%rsi
    6538:	48 89 cf             	mov    %rcx,%rdi
    653b:	e8 00 00 00 00       	callq  6540 <_ZN6Parser8initSemsEv+0x808>
    6540:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6544:	48 89 c7             	mov    %rax,%rdi
    6547:	e8 00 00 00 00       	callq  654c <_ZN6Parser8initSemsEv+0x814>

}
    654c:	90                   	nop
    654d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6551:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6558:	00 00 
    655a:	0f 84 16 03 00 00    	je     6876 <_ZN6Parser8initSemsEv+0xb3e>
    6560:	e9 0c 03 00 00       	jmpq   6871 <_ZN6Parser8initSemsEv+0xb39>
    6565:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    6568:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    656c:	48 89 c7             	mov    %rax,%rdi
    656f:	e8 00 00 00 00       	callq  6574 <_ZN6Parser8initSemsEv+0x83c>
    6574:	48 89 d8             	mov    %rbx,%rax
    6577:	48 89 c7             	mov    %rax,%rdi
    657a:	e8 00 00 00 00       	callq  657f <_ZN6Parser8initSemsEv+0x847>
    657f:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    6582:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6586:	48 89 c7             	mov    %rax,%rdi
    6589:	e8 00 00 00 00       	callq  658e <_ZN6Parser8initSemsEv+0x856>
    658e:	48 89 d8             	mov    %rbx,%rax
    6591:	48 89 c7             	mov    %rax,%rdi
    6594:	e8 00 00 00 00       	callq  6599 <_ZN6Parser8initSemsEv+0x861>
    6599:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    659c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a0:	48 89 c7             	mov    %rax,%rdi
    65a3:	e8 00 00 00 00       	callq  65a8 <_ZN6Parser8initSemsEv+0x870>
    65a8:	48 89 d8             	mov    %rbx,%rax
    65ab:	48 89 c7             	mov    %rax,%rdi
    65ae:	e8 00 00 00 00       	callq  65b3 <_ZN6Parser8initSemsEv+0x87b>
    65b3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    65b6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65ba:	48 89 c7             	mov    %rax,%rdi
    65bd:	e8 00 00 00 00       	callq  65c2 <_ZN6Parser8initSemsEv+0x88a>
    65c2:	48 89 d8             	mov    %rbx,%rax
    65c5:	48 89 c7             	mov    %rax,%rdi
    65c8:	e8 00 00 00 00       	callq  65cd <_ZN6Parser8initSemsEv+0x895>
    65cd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    65d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65d4:	48 89 c7             	mov    %rax,%rdi
    65d7:	e8 00 00 00 00       	callq  65dc <_ZN6Parser8initSemsEv+0x8a4>
    65dc:	48 89 d8             	mov    %rbx,%rax
    65df:	48 89 c7             	mov    %rax,%rdi
    65e2:	e8 00 00 00 00       	callq  65e7 <_ZN6Parser8initSemsEv+0x8af>
    65e7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    65ea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65ee:	48 89 c7             	mov    %rax,%rdi
    65f1:	e8 00 00 00 00       	callq  65f6 <_ZN6Parser8initSemsEv+0x8be>
    65f6:	48 89 d8             	mov    %rbx,%rax
    65f9:	48 89 c7             	mov    %rax,%rdi
    65fc:	e8 00 00 00 00       	callq  6601 <_ZN6Parser8initSemsEv+0x8c9>
    6601:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    6604:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6608:	48 89 c7             	mov    %rax,%rdi
    660b:	e8 00 00 00 00       	callq  6610 <_ZN6Parser8initSemsEv+0x8d8>
    6610:	48 89 d8             	mov    %rbx,%rax
    6613:	48 89 c7             	mov    %rax,%rdi
    6616:	e8 00 00 00 00       	callq  661b <_ZN6Parser8initSemsEv+0x8e3>
    661b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    661e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6622:	48 89 c7             	mov    %rax,%rdi
    6625:	e8 00 00 00 00       	callq  662a <_ZN6Parser8initSemsEv+0x8f2>
    662a:	48 89 d8             	mov    %rbx,%rax
    662d:	48 89 c7             	mov    %rax,%rdi
    6630:	e8 00 00 00 00       	callq  6635 <_ZN6Parser8initSemsEv+0x8fd>
    6635:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    6638:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    663c:	48 89 c7             	mov    %rax,%rdi
    663f:	e8 00 00 00 00       	callq  6644 <_ZN6Parser8initSemsEv+0x90c>
    6644:	48 89 d8             	mov    %rbx,%rax
    6647:	48 89 c7             	mov    %rax,%rdi
    664a:	e8 00 00 00 00       	callq  664f <_ZN6Parser8initSemsEv+0x917>
    664f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    6652:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6656:	48 89 c7             	mov    %rax,%rdi
    6659:	e8 00 00 00 00       	callq  665e <_ZN6Parser8initSemsEv+0x926>
    665e:	48 89 d8             	mov    %rbx,%rax
    6661:	48 89 c7             	mov    %rax,%rdi
    6664:	e8 00 00 00 00       	callq  6669 <_ZN6Parser8initSemsEv+0x931>
    6669:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    666c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6670:	48 89 c7             	mov    %rax,%rdi
    6673:	e8 00 00 00 00       	callq  6678 <_ZN6Parser8initSemsEv+0x940>
    6678:	48 89 d8             	mov    %rbx,%rax
    667b:	48 89 c7             	mov    %rax,%rdi
    667e:	e8 00 00 00 00       	callq  6683 <_ZN6Parser8initSemsEv+0x94b>
    6683:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    6686:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    668a:	48 89 c7             	mov    %rax,%rdi
    668d:	e8 00 00 00 00       	callq  6692 <_ZN6Parser8initSemsEv+0x95a>
    6692:	48 89 d8             	mov    %rbx,%rax
    6695:	48 89 c7             	mov    %rax,%rdi
    6698:	e8 00 00 00 00       	callq  669d <_ZN6Parser8initSemsEv+0x965>
    669d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    66a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66a4:	48 89 c7             	mov    %rax,%rdi
    66a7:	e8 00 00 00 00       	callq  66ac <_ZN6Parser8initSemsEv+0x974>
    66ac:	48 89 d8             	mov    %rbx,%rax
    66af:	48 89 c7             	mov    %rax,%rdi
    66b2:	e8 00 00 00 00       	callq  66b7 <_ZN6Parser8initSemsEv+0x97f>
    66b7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    66ba:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66be:	48 89 c7             	mov    %rax,%rdi
    66c1:	e8 00 00 00 00       	callq  66c6 <_ZN6Parser8initSemsEv+0x98e>
    66c6:	48 89 d8             	mov    %rbx,%rax
    66c9:	48 89 c7             	mov    %rax,%rdi
    66cc:	e8 00 00 00 00       	callq  66d1 <_ZN6Parser8initSemsEv+0x999>
    66d1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    66d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66d8:	48 89 c7             	mov    %rax,%rdi
    66db:	e8 00 00 00 00       	callq  66e0 <_ZN6Parser8initSemsEv+0x9a8>
    66e0:	48 89 d8             	mov    %rbx,%rax
    66e3:	48 89 c7             	mov    %rax,%rdi
    66e6:	e8 00 00 00 00       	callq  66eb <_ZN6Parser8initSemsEv+0x9b3>
    66eb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    66ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66f2:	48 89 c7             	mov    %rax,%rdi
    66f5:	e8 00 00 00 00       	callq  66fa <_ZN6Parser8initSemsEv+0x9c2>
    66fa:	48 89 d8             	mov    %rbx,%rax
    66fd:	48 89 c7             	mov    %rax,%rdi
    6700:	e8 00 00 00 00       	callq  6705 <_ZN6Parser8initSemsEv+0x9cd>
    6705:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6708:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    670c:	48 89 c7             	mov    %rax,%rdi
    670f:	e8 00 00 00 00       	callq  6714 <_ZN6Parser8initSemsEv+0x9dc>
    6714:	48 89 d8             	mov    %rbx,%rax
    6717:	48 89 c7             	mov    %rax,%rdi
    671a:	e8 00 00 00 00       	callq  671f <_ZN6Parser8initSemsEv+0x9e7>
    671f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    6722:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6726:	48 89 c7             	mov    %rax,%rdi
    6729:	e8 00 00 00 00       	callq  672e <_ZN6Parser8initSemsEv+0x9f6>
    672e:	48 89 d8             	mov    %rbx,%rax
    6731:	48 89 c7             	mov    %rax,%rdi
    6734:	e8 00 00 00 00       	callq  6739 <_ZN6Parser8initSemsEv+0xa01>
    6739:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    673c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6740:	48 89 c7             	mov    %rax,%rdi
    6743:	e8 00 00 00 00       	callq  6748 <_ZN6Parser8initSemsEv+0xa10>
    6748:	48 89 d8             	mov    %rbx,%rax
    674b:	48 89 c7             	mov    %rax,%rdi
    674e:	e8 00 00 00 00       	callq  6753 <_ZN6Parser8initSemsEv+0xa1b>
    6753:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    6756:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    675a:	48 89 c7             	mov    %rax,%rdi
    675d:	e8 00 00 00 00       	callq  6762 <_ZN6Parser8initSemsEv+0xa2a>
    6762:	48 89 d8             	mov    %rbx,%rax
    6765:	48 89 c7             	mov    %rax,%rdi
    6768:	e8 00 00 00 00       	callq  676d <_ZN6Parser8initSemsEv+0xa35>
    676d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    6770:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6774:	48 89 c7             	mov    %rax,%rdi
    6777:	e8 00 00 00 00       	callq  677c <_ZN6Parser8initSemsEv+0xa44>
    677c:	48 89 d8             	mov    %rbx,%rax
    677f:	48 89 c7             	mov    %rax,%rdi
    6782:	e8 00 00 00 00       	callq  6787 <_ZN6Parser8initSemsEv+0xa4f>
    6787:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    678a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    678e:	48 89 c7             	mov    %rax,%rdi
    6791:	e8 00 00 00 00       	callq  6796 <_ZN6Parser8initSemsEv+0xa5e>
    6796:	48 89 d8             	mov    %rbx,%rax
    6799:	48 89 c7             	mov    %rax,%rdi
    679c:	e8 00 00 00 00       	callq  67a1 <_ZN6Parser8initSemsEv+0xa69>
    67a1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    67a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67a8:	48 89 c7             	mov    %rax,%rdi
    67ab:	e8 00 00 00 00       	callq  67b0 <_ZN6Parser8initSemsEv+0xa78>
    67b0:	48 89 d8             	mov    %rbx,%rax
    67b3:	48 89 c7             	mov    %rax,%rdi
    67b6:	e8 00 00 00 00       	callq  67bb <_ZN6Parser8initSemsEv+0xa83>
    67bb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    67be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67c2:	48 89 c7             	mov    %rax,%rdi
    67c5:	e8 00 00 00 00       	callq  67ca <_ZN6Parser8initSemsEv+0xa92>
    67ca:	48 89 d8             	mov    %rbx,%rax
    67cd:	48 89 c7             	mov    %rax,%rdi
    67d0:	e8 00 00 00 00       	callq  67d5 <_ZN6Parser8initSemsEv+0xa9d>
    67d5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    67d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67dc:	48 89 c7             	mov    %rax,%rdi
    67df:	e8 00 00 00 00       	callq  67e4 <_ZN6Parser8initSemsEv+0xaac>
    67e4:	48 89 d8             	mov    %rbx,%rax
    67e7:	48 89 c7             	mov    %rax,%rdi
    67ea:	e8 00 00 00 00       	callq  67ef <_ZN6Parser8initSemsEv+0xab7>
    67ef:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    67f2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67f6:	48 89 c7             	mov    %rax,%rdi
    67f9:	e8 00 00 00 00       	callq  67fe <_ZN6Parser8initSemsEv+0xac6>
    67fe:	48 89 d8             	mov    %rbx,%rax
    6801:	48 89 c7             	mov    %rax,%rdi
    6804:	e8 00 00 00 00       	callq  6809 <_ZN6Parser8initSemsEv+0xad1>
    6809:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    680c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6810:	48 89 c7             	mov    %rax,%rdi
    6813:	e8 00 00 00 00       	callq  6818 <_ZN6Parser8initSemsEv+0xae0>
    6818:	48 89 d8             	mov    %rbx,%rax
    681b:	48 89 c7             	mov    %rax,%rdi
    681e:	e8 00 00 00 00       	callq  6823 <_ZN6Parser8initSemsEv+0xaeb>
    6823:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    6826:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    682a:	48 89 c7             	mov    %rax,%rdi
    682d:	e8 00 00 00 00       	callq  6832 <_ZN6Parser8initSemsEv+0xafa>
    6832:	48 89 d8             	mov    %rbx,%rax
    6835:	48 89 c7             	mov    %rax,%rdi
    6838:	e8 00 00 00 00       	callq  683d <_ZN6Parser8initSemsEv+0xb05>
    683d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    6840:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6844:	48 89 c7             	mov    %rax,%rdi
    6847:	e8 00 00 00 00       	callq  684c <_ZN6Parser8initSemsEv+0xb14>
    684c:	48 89 d8             	mov    %rbx,%rax
    684f:	48 89 c7             	mov    %rax,%rdi
    6852:	e8 00 00 00 00       	callq  6857 <_ZN6Parser8initSemsEv+0xb1f>
    6857:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    685a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    685e:	48 89 c7             	mov    %rax,%rdi
    6861:	e8 00 00 00 00       	callq  6866 <_ZN6Parser8initSemsEv+0xb2e>
    6866:	48 89 d8             	mov    %rbx,%rax
    6869:	48 89 c7             	mov    %rax,%rdi
    686c:	e8 00 00 00 00       	callq  6871 <_ZN6Parser8initSemsEv+0xb39>

}
    6871:	e8 00 00 00 00       	callq  6876 <_ZN6Parser8initSemsEv+0xb3e>
    6876:	48 83 c4 38          	add    $0x38,%rsp
    687a:	5b                   	pop    %rbx
    687b:	5d                   	pop    %rbp
    687c:	c3                   	retq   
    687d:	90                   	nop

000000000000687e <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    687e:	55                   	push   %rbp
    687f:	48 89 e5             	mov    %rsp,%rbp
    6882:	53                   	push   %rbx
    6883:	48 83 ec 48          	sub    $0x48,%rsp
    6887:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    688b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6892:	00 00 
    6894:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6898:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    689a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    689e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 68a5 <_ZN6Parser10testCase01Ev+0x27>
    68a5:	48 89 c7             	mov    %rax,%rdi
    68a8:	e8 00 00 00 00       	callq  68ad <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    68ad:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68b1:	48 89 c7             	mov    %rax,%rdi
    68b4:	e8 00 00 00 00       	callq  68b9 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    68b9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    68bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68c1:	48 89 d6             	mov    %rdx,%rsi
    68c4:	48 89 c7             	mov    %rax,%rdi
    68c7:	e8 00 00 00 00       	callq  68cc <_ZN6Parser10testCase01Ev+0x4e>
    68cc:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    68d0:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    68d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    68d8:	48 89 ce             	mov    %rcx,%rsi
    68db:	48 89 c7             	mov    %rax,%rdi
    68de:	e8 00 00 00 00       	callq  68e3 <_ZN6Parser10testCase01Ev+0x65>
    68e3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68e7:	48 89 c7             	mov    %rax,%rdi
    68ea:	e8 00 00 00 00       	callq  68ef <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68f3:	48 89 c7             	mov    %rax,%rdi
    68f6:	e8 00 00 00 00       	callq  68fb <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68fb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68ff:	48 89 c7             	mov    %rax,%rdi
    6902:	e8 00 00 00 00       	callq  6907 <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6907:	90                   	nop
    6908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    690c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6913:	00 00 
    6915:	74 43                	je     695a <_ZN6Parser10testCase01Ev+0xdc>
    6917:	eb 3c                	jmp    6955 <_ZN6Parser10testCase01Ev+0xd7>
    6919:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    691c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6920:	48 89 c7             	mov    %rax,%rdi
    6923:	e8 00 00 00 00       	callq  6928 <_ZN6Parser10testCase01Ev+0xaa>
    6928:	eb 03                	jmp    692d <_ZN6Parser10testCase01Ev+0xaf>
    692a:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    692d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6931:	48 89 c7             	mov    %rax,%rdi
    6934:	e8 00 00 00 00       	callq  6939 <_ZN6Parser10testCase01Ev+0xbb>
    6939:	eb 03                	jmp    693e <_ZN6Parser10testCase01Ev+0xc0>
    693b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    693e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6942:	48 89 c7             	mov    %rax,%rdi
    6945:	e8 00 00 00 00       	callq  694a <_ZN6Parser10testCase01Ev+0xcc>
    694a:	48 89 d8             	mov    %rbx,%rax
    694d:	48 89 c7             	mov    %rax,%rdi
    6950:	e8 00 00 00 00       	callq  6955 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6955:	e8 00 00 00 00       	callq  695a <_ZN6Parser10testCase01Ev+0xdc>
    695a:	48 83 c4 48          	add    $0x48,%rsp
    695e:	5b                   	pop    %rbx
    695f:	5d                   	pop    %rbp
    6960:	c3                   	retq   
    6961:	90                   	nop

0000000000006962 <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    6962:	55                   	push   %rbp
    6963:	48 89 e5             	mov    %rsp,%rbp
    6966:	53                   	push   %rbx
    6967:	48 83 ec 48          	sub    $0x48,%rsp
    696b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    696f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6976:	00 00 
    6978:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    697c:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    697e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6982:	48 83 c0 50          	add    $0x50,%rax
    6986:	48 89 c7             	mov    %rax,%rdi
    6989:	e8 00 00 00 00       	callq  698e <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    698e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6992:	48 05 90 00 00 00    	add    $0x90,%rax
    6998:	48 89 c7             	mov    %rax,%rdi
    699b:	e8 00 00 00 00       	callq  69a0 <_ZN6Parser8HWStoHexEv+0x3e>
    69a0:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    69a3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    69aa:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    69b1:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69b4:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    69b7:	0f 8d 2f 01 00 00    	jge    6aec <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    69bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69c1:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    69c8:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69cb:	89 c6                	mov    %eax,%esi
    69cd:	48 89 d7             	mov    %rdx,%rdi
    69d0:	e8 00 00 00 00       	callq  69d5 <_ZN6Parser8HWStoHexEv+0x73>
    69d5:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    69d8:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    69dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    69e0:	ba 10 00 00 00       	mov    $0x10,%edx
    69e5:	89 ce                	mov    %ecx,%esi
    69e7:	48 89 c7             	mov    %rax,%rdi
    69ea:	e8 00 00 00 00       	callq  69ef <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    69ef:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69f2:	83 e0 03             	and    $0x3,%eax
    69f5:	85 c0                	test   %eax,%eax
    69f7:	75 17                	jne    6a10 <_ZN6Parser8HWStoHexEv+0xae>
    69f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69fd:	48 83 c0 50          	add    $0x50,%rax
    6a01:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a08 <_ZN6Parser8HWStoHexEv+0xa6>
    6a08:	48 89 c7             	mov    %rax,%rdi
    6a0b:	e8 00 00 00 00       	callq  6a10 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    6a10:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a13:	83 e0 07             	and    $0x7,%eax
    6a16:	85 c0                	test   %eax,%eax
    6a18:	75 17                	jne    6a31 <_ZN6Parser8HWStoHexEv+0xcf>
    6a1a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a1e:	48 83 c0 50          	add    $0x50,%rax
    6a22:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a29 <_ZN6Parser8HWStoHexEv+0xc7>
    6a29:	48 89 c7             	mov    %rax,%rdi
    6a2c:	e8 00 00 00 00       	callq  6a31 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    6a31:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a34:	83 e0 0f             	and    $0xf,%eax
    6a37:	85 c0                	test   %eax,%eax
    6a39:	75 17                	jne    6a52 <_ZN6Parser8HWStoHexEv+0xf0>
    6a3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a3f:	48 83 c0 50          	add    $0x50,%rax
    6a43:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a4a <_ZN6Parser8HWStoHexEv+0xe8>
    6a4a:	48 89 c7             	mov    %rax,%rdi
    6a4d:	e8 00 00 00 00       	callq  6a52 <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6a52:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6a56:	77 17                	ja     6a6f <_ZN6Parser8HWStoHexEv+0x10d>
    6a58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a5c:	48 83 c0 50          	add    $0x50,%rax
    6a60:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a67 <_ZN6Parser8HWStoHexEv+0x105>
    6a67:	48 89 c7             	mov    %rax,%rdi
    6a6a:	e8 00 00 00 00       	callq  6a6f <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6a6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a73:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6a77:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a7e <_ZN6Parser8HWStoHexEv+0x11c>
    6a7e:	48 89 ce             	mov    %rcx,%rsi
    6a81:	48 89 c7             	mov    %rax,%rdi
    6a84:	e8 00 00 00 00       	callq  6a89 <_ZN6Parser8HWStoHexEv+0x127>
    6a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a8d:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6a91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a95:	48 89 c6             	mov    %rax,%rsi
    6a98:	48 89 d7             	mov    %rdx,%rdi
    6a9b:	e8 00 00 00 00       	callq  6aa0 <_ZN6Parser8HWStoHexEv+0x13e>
    6aa0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6aa4:	48 89 c7             	mov    %rax,%rdi
    6aa7:	e8 00 00 00 00       	callq  6aac <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6aac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6ab0:	48 89 c7             	mov    %rax,%rdi
    6ab3:	e8 00 00 00 00       	callq  6ab8 <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6ab8:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6abc:	e9 f0 fe ff ff       	jmpq   69b1 <_ZN6Parser8HWStoHexEv+0x4f>
    6ac1:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6ac4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6ac8:	48 89 c7             	mov    %rax,%rdi
    6acb:	e8 00 00 00 00       	callq  6ad0 <_ZN6Parser8HWStoHexEv+0x16e>
    6ad0:	eb 03                	jmp    6ad5 <_ZN6Parser8HWStoHexEv+0x173>
    6ad2:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6ad5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6ad9:	48 89 c7             	mov    %rax,%rdi
    6adc:	e8 00 00 00 00       	callq  6ae1 <_ZN6Parser8HWStoHexEv+0x17f>
    6ae1:	48 89 d8             	mov    %rbx,%rax
    6ae4:	48 89 c7             	mov    %rax,%rdi
    6ae7:	e8 00 00 00 00       	callq  6aec <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6aec:	90                   	nop
    6aed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6af1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6af8:	00 00 
    6afa:	74 05                	je     6b01 <_ZN6Parser8HWStoHexEv+0x19f>
    6afc:	e8 00 00 00 00       	callq  6b01 <_ZN6Parser8HWStoHexEv+0x19f>
    6b01:	48 83 c4 48          	add    $0x48,%rsp
    6b05:	5b                   	pop    %rbx
    6b06:	5d                   	pop    %rbp
    6b07:	c3                   	retq   

0000000000006b08 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6b08:	55                   	push   %rbp
    6b09:	48 89 e5             	mov    %rsp,%rbp
    6b0c:	53                   	push   %rbx
    6b0d:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6b14:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6b1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6b22:	00 00 
    6b24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6b28:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6b2a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b31:	48 89 c7             	mov    %rax,%rdi
    6b34:	e8 00 00 00 00       	callq  6b39 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6b39:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6b40:	48 89 c7             	mov    %rax,%rdi
    6b43:	e8 00 00 00 00       	callq  6b48 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6b48:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6b4f:	48 89 c7             	mov    %rax,%rdi
    6b52:	e8 00 00 00 00       	callq  6b57 <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6b57:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6b5e:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6b65:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6b6c:	00 00 

    QStringList hwsModules;
    6b6e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6b75:	48 89 c7             	mov    %rax,%rdi
    6b78:	e8 00 00 00 00       	callq  6b7d <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6b7d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b84:	48 05 88 00 00 00    	add    $0x88,%rax
    6b8a:	48 89 c7             	mov    %rax,%rdi
    6b8d:	e8 00 00 00 00       	callq  6b92 <_ZN6Parser10compileHWSEv+0x8a>
    6b92:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6b99:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ba0:	48 05 88 00 00 00    	add    $0x88,%rax
    6ba6:	48 89 c7             	mov    %rax,%rdi
    6ba9:	e8 00 00 00 00       	callq  6bae <_ZN6Parser10compileHWSEv+0xa6>
    6bae:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6bb5:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6bbc:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bc3:	48 89 d6             	mov    %rdx,%rsi
    6bc6:	48 89 c7             	mov    %rax,%rdi
    6bc9:	e8 00 00 00 00       	callq  6bce <_ZN6Parser10compileHWSEv+0xc6>
    6bce:	84 c0                	test   %al,%al
    6bd0:	0f 84 e6 07 00 00    	je     73bc <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    6bd6:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6bdd:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6be4:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6beb:	89 c6                	mov    %eax,%esi
    6bed:	48 89 d7             	mov    %rdx,%rdi
    6bf0:	e8 00 00 00 00       	callq  6bf5 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6bf5:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6bfc:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c03:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6c0a:	89 c6                	mov    %eax,%esi
    6c0c:	48 89 d7             	mov    %rdx,%rdi
    6c0f:	e8 00 00 00 00       	callq  6c14 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6c14:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6c1b:	48 89 c7             	mov    %rax,%rdi
    6c1e:	e8 00 00 00 00       	callq  6c23 <_ZN6Parser10compileHWSEv+0x11b>
    6c23:	48 89 c2             	mov    %rax,%rdx
    6c26:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6c2d:	48 89 d6             	mov    %rdx,%rsi
    6c30:	48 89 c7             	mov    %rax,%rdi
    6c33:	e8 00 00 00 00       	callq  6c38 <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6c38:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6c3f:	48 89 c7             	mov    %rax,%rdi
    6c42:	e8 00 00 00 00       	callq  6c47 <_ZN6Parser10compileHWSEv+0x13f>
    6c47:	48 89 c2             	mov    %rax,%rdx
    6c4a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6c51:	48 89 d6             	mov    %rdx,%rsi
    6c54:	48 89 c7             	mov    %rax,%rdi
    6c57:	e8 00 00 00 00       	callq  6c5c <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6c5c:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6c63:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6c65:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c6c:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6c70:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c77:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6c7e:	48 89 ce             	mov    %rcx,%rsi
    6c81:	48 89 c7             	mov    %rax,%rdi
    6c84:	e8 00 00 00 00       	callq  6c89 <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6c89:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6c90:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c97:	ba 10 00 00 00       	mov    $0x10,%edx
    6c9c:	48 89 ce             	mov    %rcx,%rsi
    6c9f:	48 89 c7             	mov    %rax,%rdi
    6ca2:	e8 00 00 00 00       	callq  6ca7 <_ZN6Parser10compileHWSEv+0x19f>
    6ca7:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6cae:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6cb5:	0f be c0             	movsbl %al,%eax
    6cb8:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6cbf:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6cc6:	89 c6                	mov    %eax,%esi
    6cc8:	48 89 d7             	mov    %rdx,%rdi
    6ccb:	e8 00 00 00 00       	callq  6cd0 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6cd0:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6cd7:	66 c1 e8 08          	shr    $0x8,%ax
    6cdb:	0f be c0             	movsbl %al,%eax
    6cde:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6ce5:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6cec:	89 c6                	mov    %eax,%esi
    6cee:	48 89 d7             	mov    %rdx,%rdi
    6cf1:	e8 00 00 00 00       	callq  6cf6 <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6cf6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cfd:	48 05 90 00 00 00    	add    $0x90,%rax
    6d03:	48 89 c7             	mov    %rax,%rdi
    6d06:	e8 00 00 00 00       	callq  6d0b <_ZN6Parser10compileHWSEv+0x203>
    6d0b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6d11:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d18:	48 05 90 00 00 00    	add    $0x90,%rax
    6d1e:	48 89 c7             	mov    %rax,%rdi
    6d21:	e8 00 00 00 00       	callq  6d26 <_ZN6Parser10compileHWSEv+0x21e>
    6d26:	83 c0 02             	add    $0x2,%eax
    6d29:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6d2f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d36:	48 05 90 00 00 00    	add    $0x90,%rax
    6d3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d43 <_ZN6Parser10compileHWSEv+0x23b>
    6d43:	48 89 c7             	mov    %rax,%rdi
    6d46:	e8 00 00 00 00       	callq  6d4b <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6d4b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6d52:	48 89 c7             	mov    %rax,%rdi
    6d55:	e8 00 00 00 00       	callq  6d5a <_ZN6Parser10compileHWSEv+0x252>
    6d5a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6d60:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d64:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d6b <_ZN6Parser10compileHWSEv+0x263>
    6d6b:	48 89 c7             	mov    %rax,%rdi
    6d6e:	e8 00 00 00 00       	callq  6d73 <_ZN6Parser10compileHWSEv+0x26b>
    6d73:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6d77:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6d7e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d83:	ba 01 00 00 00       	mov    $0x1,%edx
    6d88:	48 89 c7             	mov    %rax,%rdi
    6d8b:	e8 00 00 00 00       	callq  6d90 <_ZN6Parser10compileHWSEv+0x288>
    6d90:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d94:	48 89 c7             	mov    %rax,%rdi
    6d97:	e8 00 00 00 00       	callq  6d9c <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6d9c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6da0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6da7 <_ZN6Parser10compileHWSEv+0x29f>
    6da7:	48 89 c7             	mov    %rax,%rdi
    6daa:	e8 00 00 00 00       	callq  6daf <_ZN6Parser10compileHWSEv+0x2a7>
    6daf:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6db3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6dba:	b9 00 00 00 00       	mov    $0x0,%ecx
    6dbf:	ba 01 00 00 00       	mov    $0x1,%edx
    6dc4:	48 89 c7             	mov    %rax,%rdi
    6dc7:	e8 00 00 00 00       	callq  6dcc <_ZN6Parser10compileHWSEv+0x2c4>
    6dcc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6dd0:	48 89 c7             	mov    %rax,%rdi
    6dd3:	e8 00 00 00 00       	callq  6dd8 <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6dd8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6ddf:	48 89 c7             	mov    %rax,%rdi
    6de2:	e8 00 00 00 00       	callq  6de7 <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6de7:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6dee:	00 00 00 
    6df1:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6df7:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6dfd:	0f 8d 65 04 00 00    	jge    7268 <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6e03:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6e09:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6e10:	89 d6                	mov    %edx,%esi
    6e12:	48 89 c7             	mov    %rax,%rdi
    6e15:	e8 00 00 00 00       	callq  6e1a <_ZN6Parser10compileHWSEv+0x312>
    6e1a:	48 89 c2             	mov    %rax,%rdx
    6e1d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6e24:	48 89 d6             	mov    %rdx,%rsi
    6e27:	48 89 c7             	mov    %rax,%rdi
    6e2a:	e8 00 00 00 00       	callq  6e2f <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6e2f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6e36:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6e3a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6e41:	48 89 c6             	mov    %rax,%rsi
    6e44:	48 89 d7             	mov    %rdx,%rdi
    6e47:	e8 00 00 00 00       	callq  6e4c <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    6e4c:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e53:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e5a:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e5f:	ba 00 00 00 00       	mov    $0x0,%edx
    6e64:	48 89 c7             	mov    %rax,%rdi
    6e67:	e8 00 00 00 00       	callq  6e6c <_ZN6Parser10compileHWSEv+0x364>
    6e6c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6e72:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e79:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e80:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e85:	ba 00 00 00 00       	mov    $0x0,%edx
    6e8a:	48 89 c7             	mov    %rax,%rdi
    6e8d:	e8 00 00 00 00       	callq  6e92 <_ZN6Parser10compileHWSEv+0x38a>
    6e92:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6e98:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e9c:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6ea3:	48 89 d6             	mov    %rdx,%rsi
    6ea6:	48 89 c7             	mov    %rax,%rdi
    6ea9:	e8 00 00 00 00       	callq  6eae <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    6eae:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6eb2:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6eb9:	48 89 d6             	mov    %rdx,%rsi
    6ebc:	48 89 c7             	mov    %rax,%rdi
    6ebf:	e8 00 00 00 00       	callq  6ec4 <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    6ec4:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6ecb:	0f 8e 3e 01 00 00    	jle    700f <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6ed1:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6ed8:	83 c0 01             	add    $0x1,%eax
    6edb:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6ee2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ee6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6eed <_ZN6Parser10compileHWSEv+0x3e5>
    6eed:	48 89 c7             	mov    %rax,%rdi
    6ef0:	e8 00 00 00 00       	callq  6ef5 <_ZN6Parser10compileHWSEv+0x3ed>
    6ef5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6efc:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6f00:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f04:	48 89 c6             	mov    %rax,%rsi
    6f07:	48 89 d7             	mov    %rdx,%rdi
    6f0a:	e8 00 00 00 00       	callq  6f0f <_ZN6Parser10compileHWSEv+0x407>
    6f0f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f13:	48 89 c7             	mov    %rax,%rdi
    6f16:	e8 00 00 00 00       	callq  6f1b <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    6f1b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6f1f:	be 01 00 00 00       	mov    $0x1,%esi
    6f24:	48 89 c7             	mov    %rax,%rdi
    6f27:	e8 00 00 00 00       	callq  6f2c <_ZN6Parser10compileHWSEv+0x424>
    6f2c:	48 89 c2             	mov    %rax,%rdx
    6f2f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f33:	48 89 d6             	mov    %rdx,%rsi
    6f36:	48 89 c7             	mov    %rax,%rdi
    6f39:	e8 00 00 00 00       	callq  6f3e <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6f3e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f45:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6f49:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f4d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6f51:	48 89 ce             	mov    %rcx,%rsi
    6f54:	48 89 c7             	mov    %rax,%rdi
    6f57:	e8 00 00 00 00       	callq  6f5c <_ZN6Parser10compileHWSEv+0x454>
    6f5c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6f60:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f64:	ba 10 00 00 00       	mov    $0x10,%edx
    6f69:	48 89 ce             	mov    %rcx,%rsi
    6f6c:	48 89 c7             	mov    %rax,%rdi
    6f6f:	e8 00 00 00 00       	callq  6f74 <_ZN6Parser10compileHWSEv+0x46c>
    6f74:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6f7b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f7f:	48 89 c7             	mov    %rax,%rdi
    6f82:	e8 00 00 00 00       	callq  6f87 <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    6f87:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f8e:	48 05 90 00 00 00    	add    $0x90,%rax
    6f94:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f99:	48 89 c7             	mov    %rax,%rdi
    6f9c:	e8 00 00 00 00       	callq  6fa1 <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    6fa1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6fa8:	48 05 90 00 00 00    	add    $0x90,%rax
    6fae:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6fb3:	48 89 c7             	mov    %rax,%rdi
    6fb6:	e8 00 00 00 00       	callq  6fbb <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    6fbb:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6fc2:	0f be c0             	movsbl %al,%eax
    6fc5:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6fcc:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6fd3:	89 c6                	mov    %eax,%esi
    6fd5:	48 89 d7             	mov    %rdx,%rdi
    6fd8:	e8 00 00 00 00       	callq  6fdd <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    6fdd:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6fe4:	66 c1 e8 08          	shr    $0x8,%ax
    6fe8:	0f be c0             	movsbl %al,%eax
    6feb:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6ff2:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6ff9:	89 c6                	mov    %eax,%esi
    6ffb:	48 89 d7             	mov    %rdx,%rdi
    6ffe:	e8 00 00 00 00       	callq  7003 <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    7003:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7007:	48 89 c7             	mov    %rax,%rdi
    700a:	e8 00 00 00 00       	callq  700f <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    700f:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    7016:	0f 8e 28 02 00 00    	jle    7244 <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    701c:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7023:	83 c0 01             	add    $0x1,%eax
    7026:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    702d:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7034:	83 c0 01             	add    $0x1,%eax
    7037:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    703e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7042:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7049 <_ZN6Parser10compileHWSEv+0x541>
    7049:	48 89 c7             	mov    %rax,%rdi
    704c:	e8 00 00 00 00       	callq  7051 <_ZN6Parser10compileHWSEv+0x549>
    7051:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7058:	48 8d 50 68          	lea    0x68(%rax),%rdx
    705c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7060:	48 89 c6             	mov    %rax,%rsi
    7063:	48 89 d7             	mov    %rdx,%rdi
    7066:	e8 00 00 00 00       	callq  706b <_ZN6Parser10compileHWSEv+0x563>
    706b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    706f:	48 89 c7             	mov    %rax,%rdi
    7072:	e8 00 00 00 00       	callq  7077 <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    7077:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    707b:	be 01 00 00 00       	mov    $0x1,%esi
    7080:	48 89 c7             	mov    %rax,%rdi
    7083:	e8 00 00 00 00       	callq  7088 <_ZN6Parser10compileHWSEv+0x580>
    7088:	48 89 c2             	mov    %rax,%rdx
    708b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    708f:	48 89 d6             	mov    %rdx,%rsi
    7092:	48 89 c7             	mov    %rax,%rdi
    7095:	e8 00 00 00 00       	callq  709a <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    709a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    709e:	be 02 00 00 00       	mov    $0x2,%esi
    70a3:	48 89 c7             	mov    %rax,%rdi
    70a6:	e8 00 00 00 00       	callq  70ab <_ZN6Parser10compileHWSEv+0x5a3>
    70ab:	48 89 c2             	mov    %rax,%rdx
    70ae:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70b2:	48 89 d6             	mov    %rdx,%rsi
    70b5:	48 89 c7             	mov    %rax,%rdi
    70b8:	e8 00 00 00 00       	callq  70bd <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    70bd:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    70c4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    70cb:	48 8d 48 28          	lea    0x28(%rax),%rcx
    70cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70d3:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    70d7:	48 89 ce             	mov    %rcx,%rsi
    70da:	48 89 c7             	mov    %rax,%rdi
    70dd:	e8 00 00 00 00       	callq  70e2 <_ZN6Parser10compileHWSEv+0x5da>
    70e2:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70e6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70ea:	ba 10 00 00 00       	mov    $0x10,%edx
    70ef:	48 89 ce             	mov    %rcx,%rsi
    70f2:	48 89 c7             	mov    %rax,%rdi
    70f5:	e8 00 00 00 00       	callq  70fa <_ZN6Parser10compileHWSEv+0x5f2>
    70fa:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    7100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7104:	48 89 c7             	mov    %rax,%rdi
    7107:	e8 00 00 00 00       	callq  710c <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    710c:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    7110:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7114:	ba 0a 00 00 00       	mov    $0xa,%edx
    7119:	48 89 ce             	mov    %rcx,%rsi
    711c:	48 89 c7             	mov    %rax,%rdi
    711f:	e8 00 00 00 00       	callq  7124 <_ZN6Parser10compileHWSEv+0x61c>
    7124:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    712b:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    712f:	84 c0                	test   %al,%al
    7131:	74 6d                	je     71a0 <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    7133:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    7137:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    713e:	ba 00 00 00 00       	mov    $0x0,%edx
    7143:	48 89 ce             	mov    %rcx,%rsi
    7146:	48 89 c7             	mov    %rax,%rdi
    7149:	e8 00 00 00 00       	callq  714e <_ZN6Parser10compileHWSEv+0x646>
    714e:	83 f0 01             	xor    $0x1,%eax
    7151:	84 c0                	test   %al,%al
    7153:	74 2a                	je     717f <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    7155:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7159:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7160:	48 89 d6             	mov    %rdx,%rsi
    7163:	48 89 c7             	mov    %rax,%rdi
    7166:	e8 00 00 00 00       	callq  716b <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    716b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7172:	48 89 c7             	mov    %rax,%rdi
    7175:	e8 00 00 00 00       	callq  717a <_ZN6Parser10compileHWSEv+0x672>
    717a:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    717f:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    7183:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    718a:	ba 00 00 00 00       	mov    $0x0,%edx
    718f:	48 89 ce             	mov    %rcx,%rsi
    7192:	48 89 c7             	mov    %rax,%rdi
    7195:	e8 00 00 00 00       	callq  719a <_ZN6Parser10compileHWSEv+0x692>
    719a:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    71a0:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    71a7:	0f be c0             	movsbl %al,%eax
    71aa:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71b1:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71b8:	89 c6                	mov    %eax,%esi
    71ba:	48 89 d7             	mov    %rdx,%rdi
    71bd:	e8 00 00 00 00       	callq  71c2 <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    71c2:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    71c9:	0f be c0             	movsbl %al,%eax
    71cc:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71d3:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71da:	89 c6                	mov    %eax,%esi
    71dc:	48 89 d7             	mov    %rdx,%rdi
    71df:	e8 00 00 00 00       	callq  71e4 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    71e4:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71eb:	0f be c0             	movsbl %al,%eax
    71ee:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71f5:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71fc:	89 c6                	mov    %eax,%esi
    71fe:	48 89 d7             	mov    %rdx,%rdi
    7201:	e8 00 00 00 00       	callq  7206 <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    7206:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    720d:	66 c1 e8 08          	shr    $0x8,%ax
    7211:	0f be c0             	movsbl %al,%eax
    7214:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    721b:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7222:	89 c6                	mov    %eax,%esi
    7224:	48 89 d7             	mov    %rdx,%rdi
    7227:	e8 00 00 00 00       	callq  722c <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    722c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7230:	48 89 c7             	mov    %rax,%rdi
    7233:	e8 00 00 00 00       	callq  7238 <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    7238:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    723c:	48 89 c7             	mov    %rax,%rdi
    723f:	e8 00 00 00 00       	callq  7244 <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    7244:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7248:	48 89 c7             	mov    %rax,%rdi
    724b:	e8 00 00 00 00       	callq  7250 <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7250:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7254:	48 89 c7             	mov    %rax,%rdi
    7257:	e8 00 00 00 00       	callq  725c <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    725c:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    7263:	e9 89 fb ff ff       	jmpq   6df1 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    7268:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    726f:	0f be d8             	movsbl %al,%ebx
    7272:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7279:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7280:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7286:	89 c6                	mov    %eax,%esi
    7288:	48 89 d7             	mov    %rdx,%rdi
    728b:	e8 00 00 00 00       	callq  7290 <_ZN6Parser10compileHWSEv+0x788>
    7290:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7294:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7298:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    729c:	89 de                	mov    %ebx,%esi
    729e:	48 89 c7             	mov    %rax,%rdi
    72a1:	e8 00 00 00 00       	callq  72a6 <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    72a6:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72ad:	66 c1 e8 08          	shr    $0x8,%ax
    72b1:	0f be d8             	movsbl %al,%ebx
    72b4:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    72ba:	8d 50 01             	lea    0x1(%rax),%edx
    72bd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72c4:	48 05 90 00 00 00    	add    $0x90,%rax
    72ca:	89 d6                	mov    %edx,%esi
    72cc:	48 89 c7             	mov    %rax,%rdi
    72cf:	e8 00 00 00 00       	callq  72d4 <_ZN6Parser10compileHWSEv+0x7cc>
    72d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72e0:	89 de                	mov    %ebx,%esi
    72e2:	48 89 c7             	mov    %rax,%rdi
    72e5:	e8 00 00 00 00       	callq  72ea <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    72ea:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72f1:	0f be d8             	movsbl %al,%ebx
    72f4:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72fb:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7302:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    7308:	89 c6                	mov    %eax,%esi
    730a:	48 89 d7             	mov    %rdx,%rdi
    730d:	e8 00 00 00 00       	callq  7312 <_ZN6Parser10compileHWSEv+0x80a>
    7312:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7316:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    731a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    731e:	89 de                	mov    %ebx,%esi
    7320:	48 89 c7             	mov    %rax,%rdi
    7323:	e8 00 00 00 00       	callq  7328 <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    7328:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    732f:	66 c1 e8 08          	shr    $0x8,%ax
    7333:	0f be d8             	movsbl %al,%ebx
    7336:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    733c:	8d 50 01             	lea    0x1(%rax),%edx
    733f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7346:	48 05 90 00 00 00    	add    $0x90,%rax
    734c:	89 d6                	mov    %edx,%esi
    734e:	48 89 c7             	mov    %rax,%rdi
    7351:	e8 00 00 00 00       	callq  7356 <_ZN6Parser10compileHWSEv+0x84e>
    7356:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    735a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    735e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7362:	89 de                	mov    %ebx,%esi
    7364:	48 89 c7             	mov    %rax,%rdi
    7367:	e8 00 00 00 00       	callq  736c <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    736c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7373:	48 89 c7             	mov    %rax,%rdi
    7376:	e8 00 00 00 00       	callq  737b <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    737b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7382:	48 89 c7             	mov    %rax,%rdi
    7385:	e8 00 00 00 00       	callq  738a <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    738a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7391:	48 89 c7             	mov    %rax,%rdi
    7394:	e8 00 00 00 00       	callq  7399 <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7399:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    73a0:	48 89 c7             	mov    %rax,%rdi
    73a3:	e8 00 00 00 00       	callq  73a8 <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    73a8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    73af:	48 89 c7             	mov    %rax,%rdi
    73b2:	e8 00 00 00 00       	callq  73b7 <_ZN6Parser10compileHWSEv+0x8af>
    73b7:	e9 dd f7 ff ff       	jmpq   6b99 <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    73bc:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73c3:	0f be d8             	movsbl %al,%ebx
    73c6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73cd:	48 05 90 00 00 00    	add    $0x90,%rax
    73d3:	be 04 00 00 00       	mov    $0x4,%esi
    73d8:	48 89 c7             	mov    %rax,%rdi
    73db:	e8 00 00 00 00       	callq  73e0 <_ZN6Parser10compileHWSEv+0x8d8>
    73e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73e4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73e8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73ec:	89 de                	mov    %ebx,%esi
    73ee:	48 89 c7             	mov    %rax,%rdi
    73f1:	e8 00 00 00 00       	callq  73f6 <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    73f6:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73fd:	66 c1 e8 08          	shr    $0x8,%ax
    7401:	0f be d8             	movsbl %al,%ebx
    7404:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    740b:	48 05 90 00 00 00    	add    $0x90,%rax
    7411:	be 05 00 00 00       	mov    $0x5,%esi
    7416:	48 89 c7             	mov    %rax,%rdi
    7419:	e8 00 00 00 00       	callq  741e <_ZN6Parser10compileHWSEv+0x916>
    741e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7422:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7426:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    742a:	89 de                	mov    %ebx,%esi
    742c:	48 89 c7             	mov    %rax,%rdi
    742f:	e8 00 00 00 00       	callq  7434 <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    7434:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    743b:	48 89 c7             	mov    %rax,%rdi
    743e:	e8 00 00 00 00       	callq  7443 <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    7443:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    744a:	48 89 c7             	mov    %rax,%rdi
    744d:	e8 00 00 00 00       	callq  7452 <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7452:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    7459:	48 89 c7             	mov    %rax,%rdi
    745c:	e8 00 00 00 00       	callq  7461 <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    7461:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    7468:	48 89 c7             	mov    %rax,%rdi
    746b:	e8 00 00 00 00       	callq  7470 <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7470:	90                   	nop
    7471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7475:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    747c:	00 00 
    747e:	0f 84 8e 01 00 00    	je     7612 <_ZN6Parser10compileHWSEv+0xb0a>
    7484:	e9 84 01 00 00       	jmpq   760d <_ZN6Parser10compileHWSEv+0xb05>
    7489:	48 89 c3             	mov    %rax,%rbx
    748c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7490:	48 89 c7             	mov    %rax,%rdi
    7493:	e8 00 00 00 00       	callq  7498 <_ZN6Parser10compileHWSEv+0x990>
    7498:	e9 1a 01 00 00       	jmpq   75b7 <_ZN6Parser10compileHWSEv+0xaaf>
    749d:	48 89 c3             	mov    %rax,%rbx
    74a0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    74a7:	48 89 c7             	mov    %rax,%rdi
    74aa:	e8 00 00 00 00       	callq  74af <_ZN6Parser10compileHWSEv+0x9a7>
    74af:	e9 03 01 00 00       	jmpq   75b7 <_ZN6Parser10compileHWSEv+0xaaf>
    74b4:	48 89 c3             	mov    %rax,%rbx
    74b7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    74bb:	48 89 c7             	mov    %rax,%rdi
    74be:	e8 00 00 00 00       	callq  74c3 <_ZN6Parser10compileHWSEv+0x9bb>
    74c3:	e9 db 00 00 00       	jmpq   75a3 <_ZN6Parser10compileHWSEv+0xa9b>
    74c8:	48 89 c3             	mov    %rax,%rbx
    74cb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 00 00 00 00       	callq  74da <_ZN6Parser10compileHWSEv+0x9d2>
    74da:	e9 c4 00 00 00       	jmpq   75a3 <_ZN6Parser10compileHWSEv+0xa9b>
    74df:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    74e2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    74e6:	48 89 c7             	mov    %rax,%rdi
    74e9:	e8 00 00 00 00       	callq  74ee <_ZN6Parser10compileHWSEv+0x9e6>
    74ee:	eb 69                	jmp    7559 <_ZN6Parser10compileHWSEv+0xa51>
    74f0:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    74f3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    74f7:	48 89 c7             	mov    %rax,%rdi
    74fa:	e8 00 00 00 00       	callq  74ff <_ZN6Parser10compileHWSEv+0x9f7>
    74ff:	eb 03                	jmp    7504 <_ZN6Parser10compileHWSEv+0x9fc>
    7501:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    7504:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7508:	48 89 c7             	mov    %rax,%rdi
    750b:	e8 00 00 00 00       	callq  7510 <_ZN6Parser10compileHWSEv+0xa08>
    7510:	eb 47                	jmp    7559 <_ZN6Parser10compileHWSEv+0xa51>
    7512:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    7515:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7519:	48 89 c7             	mov    %rax,%rdi
    751c:	e8 00 00 00 00       	callq  7521 <_ZN6Parser10compileHWSEv+0xa19>
    7521:	eb 36                	jmp    7559 <_ZN6Parser10compileHWSEv+0xa51>
    7523:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    7526:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    752a:	48 89 c7             	mov    %rax,%rdi
    752d:	e8 00 00 00 00       	callq  7532 <_ZN6Parser10compileHWSEv+0xa2a>
    7532:	eb 03                	jmp    7537 <_ZN6Parser10compileHWSEv+0xa2f>
    7534:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    7537:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    753b:	48 89 c7             	mov    %rax,%rdi
    753e:	e8 00 00 00 00       	callq  7543 <_ZN6Parser10compileHWSEv+0xa3b>
    7543:	eb 03                	jmp    7548 <_ZN6Parser10compileHWSEv+0xa40>
    7545:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    7548:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    754c:	48 89 c7             	mov    %rax,%rdi
    754f:	e8 00 00 00 00       	callq  7554 <_ZN6Parser10compileHWSEv+0xa4c>
    7554:	eb 03                	jmp    7559 <_ZN6Parser10compileHWSEv+0xa51>
    7556:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    7559:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    755d:	48 89 c7             	mov    %rax,%rdi
    7560:	e8 00 00 00 00       	callq  7565 <_ZN6Parser10compileHWSEv+0xa5d>
    7565:	eb 03                	jmp    756a <_ZN6Parser10compileHWSEv+0xa62>
    7567:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    756a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    756e:	48 89 c7             	mov    %rax,%rdi
    7571:	e8 00 00 00 00       	callq  7576 <_ZN6Parser10compileHWSEv+0xa6e>
    7576:	eb 03                	jmp    757b <_ZN6Parser10compileHWSEv+0xa73>
    7578:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    757b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7582:	48 89 c7             	mov    %rax,%rdi
    7585:	e8 00 00 00 00       	callq  758a <_ZN6Parser10compileHWSEv+0xa82>
    758a:	eb 03                	jmp    758f <_ZN6Parser10compileHWSEv+0xa87>
    758c:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    758f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7596:	48 89 c7             	mov    %rax,%rdi
    7599:	e8 00 00 00 00       	callq  759e <_ZN6Parser10compileHWSEv+0xa96>
    759e:	eb 03                	jmp    75a3 <_ZN6Parser10compileHWSEv+0xa9b>
    75a0:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    75a3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    75aa:	48 89 c7             	mov    %rax,%rdi
    75ad:	e8 00 00 00 00       	callq  75b2 <_ZN6Parser10compileHWSEv+0xaaa>
    75b2:	eb 03                	jmp    75b7 <_ZN6Parser10compileHWSEv+0xaaf>
    75b4:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    75b7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    75be:	48 89 c7             	mov    %rax,%rdi
    75c1:	e8 00 00 00 00       	callq  75c6 <_ZN6Parser10compileHWSEv+0xabe>
    75c6:	eb 03                	jmp    75cb <_ZN6Parser10compileHWSEv+0xac3>
    75c8:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    75cb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    75d2:	48 89 c7             	mov    %rax,%rdi
    75d5:	e8 00 00 00 00       	callq  75da <_ZN6Parser10compileHWSEv+0xad2>
    75da:	eb 03                	jmp    75df <_ZN6Parser10compileHWSEv+0xad7>
    75dc:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    75df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    75e6:	48 89 c7             	mov    %rax,%rdi
    75e9:	e8 00 00 00 00       	callq  75ee <_ZN6Parser10compileHWSEv+0xae6>
    75ee:	eb 03                	jmp    75f3 <_ZN6Parser10compileHWSEv+0xaeb>
    75f0:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    75f3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    75fa:	48 89 c7             	mov    %rax,%rdi
    75fd:	e8 00 00 00 00       	callq  7602 <_ZN6Parser10compileHWSEv+0xafa>
    7602:	48 89 d8             	mov    %rbx,%rax
    7605:	48 89 c7             	mov    %rax,%rdi
    7608:	e8 00 00 00 00       	callq  760d <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    760d:	e8 00 00 00 00       	callq  7612 <_ZN6Parser10compileHWSEv+0xb0a>
    7612:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    7619:	5b                   	pop    %rbx
    761a:	5d                   	pop    %rbp
    761b:	c3                   	retq   

000000000000761c <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    761c:	55                   	push   %rbp
    761d:	48 89 e5             	mov    %rsp,%rbp
    7620:	53                   	push   %rbx
    7621:	48 83 ec 58          	sub    $0x58,%rsp
    7625:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    7629:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7630:	00 00 
    7632:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7636:	31 c0                	xor    %eax,%eax

    int i = 0;
    7638:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    763f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7643:	48 83 c0 78          	add    $0x78,%rax
    7647:	48 89 c7             	mov    %rax,%rdi
    764a:	e8 00 00 00 00       	callq  764f <_ZN6Parser9selectHWSEv+0x33>
    764f:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    7652:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7656:	48 89 c7             	mov    %rax,%rdi
    7659:	e8 00 00 00 00       	callq  765e <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    765e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7662:	48 89 c7             	mov    %rax,%rdi
    7665:	e8 00 00 00 00       	callq  766a <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    766a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    766e:	48 83 c0 78          	add    $0x78,%rax
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 00 00 00 00       	callq  767a <_ZN6Parser9selectHWSEv+0x5e>
    767a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    767e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7682:	48 83 c0 78          	add    $0x78,%rax
    7686:	48 89 c7             	mov    %rax,%rdi
    7689:	e8 00 00 00 00       	callq  768e <_ZN6Parser9selectHWSEv+0x72>
    768e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7692:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7696:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    769a:	48 89 d6             	mov    %rdx,%rsi
    769d:	48 89 c7             	mov    %rax,%rdi
    76a0:	e8 00 00 00 00       	callq  76a5 <_ZN6Parser9selectHWSEv+0x89>
    76a5:	84 c0                	test   %al,%al
    76a7:	74 50                	je     76f9 <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    76a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76ad:	48 89 c7             	mov    %rax,%rdi
    76b0:	e8 00 00 00 00       	callq  76b5 <_ZN6Parser9selectHWSEv+0x99>
    76b5:	be 00 00 00 00       	mov    $0x0,%esi
    76ba:	48 89 c7             	mov    %rax,%rdi
    76bd:	e8 00 00 00 00       	callq  76c2 <_ZN6Parser9selectHWSEv+0xa6>
    76c2:	48 89 c2             	mov    %rax,%rdx
    76c5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76c9:	48 89 d6             	mov    %rdx,%rsi
    76cc:	48 89 c7             	mov    %rax,%rdi
    76cf:	e8 00 00 00 00       	callq  76d4 <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    76d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    76d8:	48 8d 50 68          	lea    0x68(%rax),%rdx
    76dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76e0:	48 89 c6             	mov    %rax,%rsi
    76e3:	48 89 d7             	mov    %rdx,%rdi
    76e6:	e8 00 00 00 00       	callq  76eb <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    76eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76ef:	48 89 c7             	mov    %rax,%rdi
    76f2:	e8 00 00 00 00       	callq  76f7 <_ZN6Parser9selectHWSEv+0xdb>
    76f7:	eb 85                	jmp    767e <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    76f9:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    7700:	8b 45 b8             	mov    -0x48(%rbp),%eax
    7703:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    7706:	7d 06                	jge    770e <_ZN6Parser9selectHWSEv+0xf2>
    7708:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    770c:	eb f2                	jmp    7700 <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    770e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7712:	48 89 c7             	mov    %rax,%rdi
    7715:	e8 00 00 00 00       	callq  771a <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    771a:	90                   	nop
    771b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    771f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7726:	00 00 
    7728:	74 21                	je     774b <_ZN6Parser9selectHWSEv+0x12f>
    772a:	eb 1a                	jmp    7746 <_ZN6Parser9selectHWSEv+0x12a>
    772c:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    772f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7733:	48 89 c7             	mov    %rax,%rdi
    7736:	e8 00 00 00 00       	callq  773b <_ZN6Parser9selectHWSEv+0x11f>
    773b:	48 89 d8             	mov    %rbx,%rax
    773e:	48 89 c7             	mov    %rax,%rdi
    7741:	e8 00 00 00 00       	callq  7746 <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    7746:	e8 00 00 00 00       	callq  774b <_ZN6Parser9selectHWSEv+0x12f>
    774b:	48 83 c4 58          	add    $0x58,%rsp
    774f:	5b                   	pop    %rbx
    7750:	5d                   	pop    %rbp
    7751:	c3                   	retq   

0000000000007752 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    7752:	55                   	push   %rbp
    7753:	48 89 e5             	mov    %rsp,%rbp
    7756:	53                   	push   %rbx
    7757:	48 83 ec 68          	sub    $0x68,%rsp
    775b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    775f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7766:	00 00 
    7768:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    776c:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    776e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7772:	48 89 c7             	mov    %rax,%rdi
    7775:	e8 00 00 00 00       	callq  777a <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    777a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    777e:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7782:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7786:	48 89 d6             	mov    %rdx,%rsi
    7789:	48 89 c7             	mov    %rax,%rdi
    778c:	e8 00 00 00 00       	callq  7791 <_ZN6Parser12loadIncludesEv+0x3f>
    7791:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7795:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7799:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    779d:	48 8d 50 58          	lea    0x58(%rax),%rdx
    77a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77a5:	48 89 d6             	mov    %rdx,%rsi
    77a8:	48 89 c7             	mov    %rax,%rdi
    77ab:	e8 00 00 00 00       	callq  77b0 <_ZN6Parser12loadIncludesEv+0x5e>
    77b0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    77b4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77b8:	48 89 d6             	mov    %rdx,%rsi
    77bb:	48 89 c7             	mov    %rax,%rdi
    77be:	e8 00 00 00 00       	callq  77c3 <_ZN6Parser12loadIncludesEv+0x71>
    77c3:	84 c0                	test   %al,%al
    77c5:	0f 84 dc 00 00 00    	je     78a7 <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    77cb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77cf:	48 89 c7             	mov    %rax,%rdi
    77d2:	e8 00 00 00 00       	callq  77d7 <_ZN6Parser12loadIncludesEv+0x85>
    77d7:	48 89 c2             	mov    %rax,%rdx
    77da:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77de:	48 89 d6             	mov    %rdx,%rsi
    77e1:	48 89 c7             	mov    %rax,%rdi
    77e4:	e8 00 00 00 00       	callq  77e9 <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    77e9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77ed:	be 01 00 00 00       	mov    $0x1,%esi
    77f2:	48 89 c7             	mov    %rax,%rdi
    77f5:	e8 00 00 00 00       	callq  77fa <_ZN6Parser12loadIncludesEv+0xa8>
    77fa:	8b 55 d0             	mov    -0x30(%rbp),%edx
    77fd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7801:	89 d6                	mov    %edx,%esi
    7803:	48 89 c7             	mov    %rax,%rdi
    7806:	e8 00 00 00 00       	callq  780b <_ZN6Parser12loadIncludesEv+0xb9>
    780b:	84 c0                	test   %al,%al
    780d:	74 7b                	je     788a <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    780f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    7813:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7817:	48 89 d6             	mov    %rdx,%rsi
    781a:	48 89 c7             	mov    %rax,%rdi
    781d:	e8 00 00 00 00       	callq  7822 <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    7822:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7826:	48 89 c7             	mov    %rax,%rdi
    7829:	e8 00 00 00 00       	callq  782e <_ZN6Parser12loadIncludesEv+0xdc>
    782e:	83 f0 01             	xor    $0x1,%eax
    7831:	84 c0                	test   %al,%al
    7833:	74 3d                	je     7872 <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    7835:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7839:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    783d:	ba 00 00 00 00       	mov    $0x0,%edx
    7842:	48 89 ce             	mov    %rcx,%rsi
    7845:	48 89 c7             	mov    %rax,%rdi
    7848:	e8 00 00 00 00       	callq  784d <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    784d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7851:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7855:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7859:	48 89 c6             	mov    %rax,%rsi
    785c:	48 89 d7             	mov    %rdx,%rdi
    785f:	e8 00 00 00 00       	callq  7864 <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7864:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7868:	48 89 c7             	mov    %rax,%rdi
    786b:	e8 00 00 00 00       	callq  7870 <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    7870:	eb b0                	jmp    7822 <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    7872:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7876:	48 89 c7             	mov    %rax,%rdi
    7879:	e8 00 00 00 00       	callq  787e <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    787e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7882:	48 89 c7             	mov    %rax,%rdi
    7885:	e8 00 00 00 00       	callq  788a <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    788a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    788e:	48 89 c7             	mov    %rax,%rdi
    7891:	e8 00 00 00 00       	callq  7896 <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7896:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    789a:	48 89 c7             	mov    %rax,%rdi
    789d:	e8 00 00 00 00       	callq  78a2 <_ZN6Parser12loadIncludesEv+0x150>
    78a2:	e9 f2 fe ff ff       	jmpq   7799 <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    78a7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78ab:	48 89 c7             	mov    %rax,%rdi
    78ae:	e8 00 00 00 00       	callq  78b3 <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    78b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78b7:	48 8d 50 60          	lea    0x60(%rax),%rdx
    78bb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    78bf:	48 89 d6             	mov    %rdx,%rsi
    78c2:	48 89 c7             	mov    %rax,%rdi
    78c5:	e8 00 00 00 00       	callq  78ca <_ZN6Parser12loadIncludesEv+0x178>
    78ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    78ce:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    78d2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78d6:	48 8d 50 60          	lea    0x60(%rax),%rdx
    78da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    78de:	48 89 d6             	mov    %rdx,%rsi
    78e1:	48 89 c7             	mov    %rax,%rdi
    78e4:	e8 00 00 00 00       	callq  78e9 <_ZN6Parser12loadIncludesEv+0x197>
    78e9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    78ed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78f1:	48 89 d6             	mov    %rdx,%rsi
    78f4:	48 89 c7             	mov    %rax,%rdi
    78f7:	e8 00 00 00 00       	callq  78fc <_ZN6Parser12loadIncludesEv+0x1aa>
    78fc:	84 c0                	test   %al,%al
    78fe:	74 2c                	je     792c <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    7900:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7904:	48 89 c7             	mov    %rax,%rdi
    7907:	e8 00 00 00 00       	callq  790c <_ZN6Parser12loadIncludesEv+0x1ba>
    790c:	48 89 c2             	mov    %rax,%rdx
    790f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7913:	48 89 d6             	mov    %rdx,%rsi
    7916:	48 89 c7             	mov    %rax,%rdi
    7919:	e8 00 00 00 00       	callq  791e <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    791e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7922:	48 89 c7             	mov    %rax,%rdi
    7925:	e8 00 00 00 00       	callq  792a <_ZN6Parser12loadIncludesEv+0x1d8>
    792a:	eb a6                	jmp    78d2 <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    792c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7930:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7934:	48 89 d6             	mov    %rdx,%rsi
    7937:	48 89 c7             	mov    %rax,%rdi
    793a:	e8 00 00 00 00       	callq  793f <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    793f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7943:	48 89 c7             	mov    %rax,%rdi
    7946:	e8 00 00 00 00       	callq  794b <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    794b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    794f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7956:	00 00 
    7958:	74 5d                	je     79b7 <_ZN6Parser12loadIncludesEv+0x265>
    795a:	eb 56                	jmp    79b2 <_ZN6Parser12loadIncludesEv+0x260>
    795c:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    795f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7963:	48 89 c7             	mov    %rax,%rdi
    7966:	e8 00 00 00 00       	callq  796b <_ZN6Parser12loadIncludesEv+0x219>
    796b:	eb 03                	jmp    7970 <_ZN6Parser12loadIncludesEv+0x21e>
    796d:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7970:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7974:	48 89 c7             	mov    %rax,%rdi
    7977:	e8 00 00 00 00       	callq  797c <_ZN6Parser12loadIncludesEv+0x22a>
    797c:	eb 03                	jmp    7981 <_ZN6Parser12loadIncludesEv+0x22f>
    797e:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7981:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7985:	48 89 c7             	mov    %rax,%rdi
    7988:	e8 00 00 00 00       	callq  798d <_ZN6Parser12loadIncludesEv+0x23b>
    798d:	48 89 d8             	mov    %rbx,%rax
    7990:	48 89 c7             	mov    %rax,%rdi
    7993:	e8 00 00 00 00       	callq  7998 <_ZN6Parser12loadIncludesEv+0x246>
    7998:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    799b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    799f:	48 89 c7             	mov    %rax,%rdi
    79a2:	e8 00 00 00 00       	callq  79a7 <_ZN6Parser12loadIncludesEv+0x255>
    79a7:	48 89 d8             	mov    %rbx,%rax
    79aa:	48 89 c7             	mov    %rax,%rdi
    79ad:	e8 00 00 00 00       	callq  79b2 <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    79b2:	e8 00 00 00 00       	callq  79b7 <_ZN6Parser12loadIncludesEv+0x265>
    79b7:	48 83 c4 68          	add    $0x68,%rsp
    79bb:	5b                   	pop    %rbx
    79bc:	5d                   	pop    %rbp
    79bd:	c3                   	retq   

00000000000079be <_ZN6Parser13compileModuleE7QString>:

QByteArray Parser::compileModule(QString key){
    79be:	55                   	push   %rbp
    79bf:	48 89 e5             	mov    %rsp,%rbp
    79c2:	53                   	push   %rbx
    79c3:	48 83 ec 48          	sub    $0x48,%rsp
    79c7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    79cb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    79cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    79d3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    79da:	00 00 
    79dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    79e0:	31 c0                	xor    %eax,%eax
    QStringList M = this->sorted.take(key);
    79e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    79e6:	48 8d 48 78          	lea    0x78(%rax),%rcx
    79ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    79ee:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    79f2:	48 89 ce             	mov    %rcx,%rsi
    79f5:	48 89 c7             	mov    %rax,%rdi
    79f8:	e8 00 00 00 00       	callq  79fd <_ZN6Parser13compileModuleE7QString+0x3f>
    QByteArray result;
    79fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a01:	48 89 c7             	mov    %rax,%rdi
    7a04:	e8 00 00 00 00       	callq  7a09 <_ZN6Parser13compileModuleE7QString+0x4b>

    QByteArray VARS = compileVariables(&M);
    7a09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a0d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7a11:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7a15:	48 89 ce             	mov    %rcx,%rsi
    7a18:	48 89 c7             	mov    %rax,%rdi
    7a1b:	e8 00 00 00 00       	callq  7a20 <_ZN6Parser13compileModuleE7QString+0x62>
    result.append(VARS);
    7a20:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7a24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a28:	48 89 d6             	mov    %rdx,%rsi
    7a2b:	48 89 c7             	mov    %rax,%rdi
    7a2e:	e8 00 00 00 00       	callq  7a33 <_ZN6Parser13compileModuleE7QString+0x75>

    result.append("0");
    7a33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7a3e <_ZN6Parser13compileModuleE7QString+0x80>
    7a3e:	48 89 c7             	mov    %rax,%rdi
    7a41:	e8 00 00 00 00       	callq  7a46 <_ZN6Parser13compileModuleE7QString+0x88>
    return result;
    7a46:	90                   	nop

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7a47:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a4b:	48 89 c7             	mov    %rax,%rdi
    7a4e:	e8 00 00 00 00       	callq  7a53 <_ZN6Parser13compileModuleE7QString+0x95>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a53:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a57:	48 89 c7             	mov    %rax,%rdi
    7a5a:	e8 00 00 00 00       	callq  7a5f <_ZN6Parser13compileModuleE7QString+0xa1>

    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
    7a5f:	90                   	nop
}
    7a60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a64:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7a68:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7a6f:	00 00 
    7a71:	74 3e                	je     7ab1 <_ZN6Parser13compileModuleE7QString+0xf3>
    7a73:	eb 37                	jmp    7aac <_ZN6Parser13compileModuleE7QString+0xee>
    7a75:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7a78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a7c:	48 89 c7             	mov    %rax,%rdi
    7a7f:	e8 00 00 00 00       	callq  7a84 <_ZN6Parser13compileModuleE7QString+0xc6>
    7a84:	eb 03                	jmp    7a89 <_ZN6Parser13compileModuleE7QString+0xcb>
    7a86:	48 89 c3             	mov    %rax,%rbx
    7a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a8d:	48 89 c7             	mov    %rax,%rdi
    7a90:	e8 00 00 00 00       	callq  7a95 <_ZN6Parser13compileModuleE7QString+0xd7>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a95:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a99:	48 89 c7             	mov    %rax,%rdi
    7a9c:	e8 00 00 00 00       	callq  7aa1 <_ZN6Parser13compileModuleE7QString+0xe3>
    7aa1:	48 89 d8             	mov    %rbx,%rax
    7aa4:	48 89 c7             	mov    %rax,%rdi
    7aa7:	e8 00 00 00 00       	callq  7aac <_ZN6Parser13compileModuleE7QString+0xee>
    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
}
    7aac:	e8 00 00 00 00       	callq  7ab1 <_ZN6Parser13compileModuleE7QString+0xf3>
    7ab1:	48 83 c4 48          	add    $0x48,%rsp
    7ab5:	5b                   	pop    %rbx
    7ab6:	5d                   	pop    %rbp
    7ab7:	c3                   	retq   

0000000000007ab8 <_ZN6Parser7compileEv>:

int Parser::compile(){
    7ab8:	55                   	push   %rbp
    7ab9:	48 89 e5             	mov    %rsp,%rbp
    7abc:	53                   	push   %rbx
    7abd:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    7ac4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    7acb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7ad2:	00 00 
    7ad4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7ad8:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7ada:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7ade:	48 89 c7             	mov    %rax,%rdi
    7ae1:	e8 00 00 00 00       	callq  7ae6 <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    7ae6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7aed:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7af1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7af8:	48 89 c7             	mov    %rax,%rdi
    7afb:	e8 00 00 00 00       	callq  7b00 <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7b00:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b07:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7b0b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7b12:	48 89 d6             	mov    %rdx,%rsi
    7b15:	48 89 c7             	mov    %rax,%rdi
    7b18:	e8 00 00 00 00       	callq  7b1d <_ZN6Parser7compileEv+0x65>
    7b1d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b24:	48 8d 78 78          	lea    0x78(%rax),%rdi
    7b28:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7b2f:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    7b36:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b3d:	48 89 d1             	mov    %rdx,%rcx
    7b40:	48 89 fa             	mov    %rdi,%rdx
    7b43:	48 89 c7             	mov    %rax,%rdi
    7b46:	e8 00 00 00 00       	callq  7b4b <_ZN6Parser7compileEv+0x93>
    7b4b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7b52:	48 89 c7             	mov    %rax,%rdi
    7b55:	e8 00 00 00 00       	callq  7b5a <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7b5a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b61:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7b65:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7b6c:	48 89 d6             	mov    %rdx,%rsi
    7b6f:	48 89 c7             	mov    %rax,%rdi
    7b72:	e8 00 00 00 00       	callq  7b77 <_ZN6Parser7compileEv+0xbf>
    7b77:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b7e:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    7b85:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7b8c:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    7b93:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b9a:	48 89 d1             	mov    %rdx,%rcx
    7b9d:	48 89 fa             	mov    %rdi,%rdx
    7ba0:	48 89 c7             	mov    %rax,%rdi
    7ba3:	e8 00 00 00 00       	callq  7ba8 <_ZN6Parser7compileEv+0xf0>
    7ba8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7baf:	48 89 c7             	mov    %rax,%rdi
    7bb2:	e8 00 00 00 00       	callq  7bb7 <_ZN6Parser7compileEv+0xff>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7bb7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7bbe:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7bc5 <_ZN6Parser7compileEv+0x10d>
    7bc5:	48 89 c7             	mov    %rax,%rdi
    7bc8:	e8 00 00 00 00       	callq  7bcd <_ZN6Parser7compileEv+0x115>
    7bcd:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7bd4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7bdb:	48 89 d6             	mov    %rdx,%rsi
    7bde:	48 89 c7             	mov    %rax,%rdi
    7be1:	e8 00 00 00 00       	callq  7be6 <_ZN6Parser7compileEv+0x12e>
    7be6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7bed:	48 89 c7             	mov    %rax,%rdi
    7bf0:	e8 00 00 00 00       	callq  7bf5 <_ZN6Parser7compileEv+0x13d>
    this->addIncludeFile("project1.h");
    7bf5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7bfc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c03 <_ZN6Parser7compileEv+0x14b>
    7c03:	48 89 c7             	mov    %rax,%rdi
    7c06:	e8 00 00 00 00       	callq  7c0b <_ZN6Parser7compileEv+0x153>
    7c0b:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7c12:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c19:	48 89 d6             	mov    %rdx,%rsi
    7c1c:	48 89 c7             	mov    %rax,%rdi
    7c1f:	e8 00 00 00 00       	callq  7c24 <_ZN6Parser7compileEv+0x16c>
    7c24:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7c2b:	48 89 c7             	mov    %rax,%rdi
    7c2e:	e8 00 00 00 00       	callq  7c33 <_ZN6Parser7compileEv+0x17b>
    this->addIncludeFile("kpa_config.h");
    7c33:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7c37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c3e <_ZN6Parser7compileEv+0x186>
    7c3e:	48 89 c7             	mov    %rax,%rdi
    7c41:	e8 00 00 00 00       	callq  7c46 <_ZN6Parser7compileEv+0x18e>
    7c46:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7c4a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c51:	48 89 d6             	mov    %rdx,%rsi
    7c54:	48 89 c7             	mov    %rax,%rdi
    7c57:	e8 00 00 00 00       	callq  7c5c <_ZN6Parser7compileEv+0x1a4>
    7c5c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7c60:	48 89 c7             	mov    %rax,%rdi
    7c63:	e8 00 00 00 00       	callq  7c68 <_ZN6Parser7compileEv+0x1b0>
    this->addIncludeFile("names.h");
    7c68:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c6c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c73 <_ZN6Parser7compileEv+0x1bb>
    7c73:	48 89 c7             	mov    %rax,%rdi
    7c76:	e8 00 00 00 00       	callq  7c7b <_ZN6Parser7compileEv+0x1c3>
    7c7b:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7c7f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c86:	48 89 d6             	mov    %rdx,%rsi
    7c89:	48 89 c7             	mov    %rax,%rdi
    7c8c:	e8 00 00 00 00       	callq  7c91 <_ZN6Parser7compileEv+0x1d9>
    7c91:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c95:	48 89 c7             	mov    %rax,%rdi
    7c98:	e8 00 00 00 00       	callq  7c9d <_ZN6Parser7compileEv+0x1e5>
    int lIf = this->loadIncludes();
    7c9d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7ca4:	48 89 c7             	mov    %rax,%rdi
    7ca7:	e8 00 00 00 00       	callq  7cac <_ZN6Parser7compileEv+0x1f4>
    7cac:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7cb2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7cb6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7cbd:	48 89 d6             	mov    %rdx,%rsi
    7cc0:	48 89 c7             	mov    %rax,%rdi
    7cc3:	e8 00 00 00 00       	callq  7cc8 <_ZN6Parser7compileEv+0x210>
    7cc8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7cce:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7cd2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7cd9:	48 89 d6             	mov    %rdx,%rsi
    7cdc:	48 89 c7             	mov    %rax,%rdi
    7cdf:	e8 00 00 00 00       	callq  7ce4 <_ZN6Parser7compileEv+0x22c>
    7ce4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)


    compileHWS();
    7cea:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7cf1:	48 89 c7             	mov    %rax,%rdi
    7cf4:	e8 00 00 00 00       	callq  7cf9 <_ZN6Parser7compileEv+0x241>

    QByteArray firstGrape = compileModule("KPA_IP3");
    7cf9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7cfd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d04 <_ZN6Parser7compileEv+0x24c>
    7d04:	48 89 c7             	mov    %rax,%rdi
    7d07:	e8 00 00 00 00       	callq  7d0c <_ZN6Parser7compileEv+0x254>
    7d0c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7d10:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7d14:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
    7d1b:	48 89 ce             	mov    %rcx,%rsi
    7d1e:	48 89 c7             	mov    %rax,%rdi
    7d21:	e8 00 00 00 00       	callq  7d26 <_ZN6Parser7compileEv+0x26e>
    7d26:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7d2a:	48 89 c7             	mov    %rax,%rdi
    7d2d:	e8 00 00 00 00       	callq  7d32 <_ZN6Parser7compileEv+0x27a>
    7d32:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7d36:	48 89 c7             	mov    %rax,%rdi
    7d39:	e8 00 00 00 00       	callq  7d3e <_ZN6Parser7compileEv+0x286>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7d3e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7d42:	48 89 c7             	mov    %rax,%rdi
    7d45:	e8 00 00 00 00       	callq  7d4a <_ZN6Parser7compileEv+0x292>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7d4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d4e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7d55:	00 00 
    7d57:	0f 84 bb 00 00 00    	je     7e18 <_ZN6Parser7compileEv+0x360>
    7d5d:	e9 b1 00 00 00       	jmpq   7e13 <_ZN6Parser7compileEv+0x35b>
    7d62:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7d65:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7d6c:	48 89 c7             	mov    %rax,%rdi
    7d6f:	e8 00 00 00 00       	callq  7d74 <_ZN6Parser7compileEv+0x2bc>
    7d74:	e9 83 00 00 00       	jmpq   7dfc <_ZN6Parser7compileEv+0x344>
    7d79:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7d7c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7d83:	48 89 c7             	mov    %rax,%rdi
    7d86:	e8 00 00 00 00       	callq  7d8b <_ZN6Parser7compileEv+0x2d3>
    7d8b:	eb 6f                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7d8d:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7d90:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7d97:	48 89 c7             	mov    %rax,%rdi
    7d9a:	e8 00 00 00 00       	callq  7d9f <_ZN6Parser7compileEv+0x2e7>
    7d9f:	eb 5b                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7da1:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7da4:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7dab:	48 89 c7             	mov    %rax,%rdi
    7dae:	e8 00 00 00 00       	callq  7db3 <_ZN6Parser7compileEv+0x2fb>
    7db3:	eb 47                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7db5:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7db8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7dbc:	48 89 c7             	mov    %rax,%rdi
    7dbf:	e8 00 00 00 00       	callq  7dc4 <_ZN6Parser7compileEv+0x30c>
    7dc4:	eb 36                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7dc6:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7dc9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7dcd:	48 89 c7             	mov    %rax,%rdi
    7dd0:	e8 00 00 00 00       	callq  7dd5 <_ZN6Parser7compileEv+0x31d>
    7dd5:	eb 25                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7dd7:	48 89 c3             	mov    %rax,%rbx
    7dda:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7dde:	48 89 c7             	mov    %rax,%rdi
    7de1:	e8 00 00 00 00       	callq  7de6 <_ZN6Parser7compileEv+0x32e>
    7de6:	eb 14                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7de8:	48 89 c3             	mov    %rax,%rbx
    7deb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7def:	48 89 c7             	mov    %rax,%rdi
    7df2:	e8 00 00 00 00       	callq  7df7 <_ZN6Parser7compileEv+0x33f>
    7df7:	eb 03                	jmp    7dfc <_ZN6Parser7compileEv+0x344>
    7df9:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7dfc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7e00:	48 89 c7             	mov    %rax,%rdi
    7e03:	e8 00 00 00 00       	callq  7e08 <_ZN6Parser7compileEv+0x350>
    7e08:	48 89 d8             	mov    %rbx,%rax
    7e0b:	48 89 c7             	mov    %rax,%rdi
    7e0e:	e8 00 00 00 00       	callq  7e13 <_ZN6Parser7compileEv+0x35b>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7e13:	e8 00 00 00 00       	callq  7e18 <_ZN6Parser7compileEv+0x360>
    7e18:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    7e1f:	5b                   	pop    %rbx
    7e20:	5d                   	pop    %rbp
    7e21:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE4takeERKS0_:

0000000000000000 <_ZN5QHashI7QString11QStringListE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   
