
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        0000000c  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        0000000c  0000000000000000  0000000000000000  0000010c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        00000008  0000000000000000  0000000000000000  0000014c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000154  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  0000015c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000164  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  0000016c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  00000174  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        0000000c  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        0000000c  0000000000000000  0000000000000000  00000188  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        0000000c  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  000001a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  000001a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        00000008  0000000000000000  0000000000000000  000001c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        00000008  0000000000000000  0000000000000000  000001d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000300  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  00000308  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000310  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  00000318  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000320  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  00000328  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000330  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  00000338  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000340  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  00000348  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000350  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  00000358  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000360  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  00000368  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000370  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  00000378  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000380  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  00000388  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000390  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  00000398  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000400  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  00000408  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000410  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  00000418  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000420  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  00000428  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000430  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  00000438  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000440  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  00000448  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000450  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  00000458  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000460  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  00000468  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000470  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  00000478  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000480  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  00000488  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000490  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  00000498  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000500  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  00000508  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000510  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  00000518  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000520  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  00000528  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000530  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  00000538  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000540  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  00000548  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000550  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  00000558  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000560  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  00000568  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000570  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  00000578  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000580  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  00000588  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000590  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  00000598  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000600  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  00000608  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000610  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  00000618  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000620  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  00000628  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000630  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  00000638  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000640  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  00000648  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000650  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  00000658  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000660  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  00000668  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000670  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  00000678  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000680  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  00000688  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000690  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  00000698  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000700  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  00000708  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000710  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  00000718  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000720  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  00000728  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000730  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  00000738  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000740  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  00000748  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000750  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  00000758  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000760  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  00000768  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000770  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  00000778  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000780  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  00000788  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000790  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  00000798  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000800  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  00000808  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000810  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  00000818  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000820  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  00000828  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000830  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  00000838  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000840  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  00000848  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000850  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  00000858  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000860  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  00000868  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000870  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  00000878  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000880  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  00000888  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000890  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  00000898  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000900  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  00000908  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000910  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  00000918  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000920  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  00000928  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000930  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  00000938  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000940  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  00000948  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000950  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  00000958  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000960  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  00000968  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000970  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  00000978  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000980  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  00000988  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000990  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  00000998  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a00  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a08  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a10  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a18  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a20  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a28  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a30  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a38  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a40  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a48  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a50  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a58  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a60  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a68  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .text         00005ef4  0000000000000000  0000000000000000  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
324 .data         00000000  0000000000000000  0000000000000000  00006964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
325 .bss          00000000  0000000000000000  0000000000000000  00006964  2**0
                  ALLOC
326 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00006964  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
327 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00006976  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
328 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00006985  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
329 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  0000698c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  000069a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  000069b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  000069c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  000069e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  000069fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
335 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00006a40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
336 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00006a84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
337 .rodata       00000594  0000000000000000  0000000000000000  00006ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
338 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00007054  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
339 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000070b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
340 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  000070c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  000070d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
342 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  000070f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
343 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  0000712a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  0000713e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
345 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  0000719e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
346 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  000071c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
347 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  000071ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  000071fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
349 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  00007223  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
350 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00007290  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
351 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  000072d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
352 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  0000736c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
353 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  00007382  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
354 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00007416  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
355 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  0000742c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
356 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00007452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00007466  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
358 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00007484  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
359 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  000074a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
360 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00007534  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
361 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00007548  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
362 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  000075a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  000075c8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
364 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00007654  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
365 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00007672  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
366 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  000076a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
367 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  0000771c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
368 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  0000776f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
369 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  000077f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
370 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00007804  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
371 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  000078be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
372 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  000078d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
373 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00007963  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
374 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00007974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00007980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00007992  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
377 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  000079dc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
378 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  000079f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
379 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00007a30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
380 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00007a84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
381 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00007aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00007ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00007af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  00007b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
385 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  00007b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
386 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  00007b54  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
387 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  00007b70  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
388 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  00007b96  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
389 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  00007bb2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
390 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  00007bdc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
391 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  00007c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  00007c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  00007c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  00007c86  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
395 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  00007ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
396 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  00007d27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
397 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  00007d7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
398 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  00007dee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
399 .gcc_except_table 00000dbc  0000000000000000  0000000000000000  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
400 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  00008bcc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
401 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  00008be8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
402 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  00008c04  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
403 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  00008cc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
404 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  00008cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
405 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  00008d04  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
406 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  00008d1e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
407 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  00008d38  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
408 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  00008d43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
409 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  00008d68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
410 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  00008d82  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
411 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  00008d9c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
412 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  00008da7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  00008dcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
414 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  00008df4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
415 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  00008e00  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
416 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  00008e2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
417 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  00008e92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
418 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  00008fae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
419 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000908c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
420 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000912c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
421 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  00009144  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
422 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  000091a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
423 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  000091e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  000092ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
425 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  00009304  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  00009338  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
427 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000936c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
428 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000938e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
429 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  000093ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  000093cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
431 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  000093fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000956a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  000095cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
434 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  000095ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000964c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
436 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000966e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
437 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  00009684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000969a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  000096b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  000096e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  00009702  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
442 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  00009774  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  000097c8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
444 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  000097e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  00009822  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000992e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
447 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  00009944  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  000099a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  000099fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
450 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  00009a20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
451 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  00009a4c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  00009a6e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  00009a90  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  00009b1a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  00009b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  00009b94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  00009bb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
458 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  00009bda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  00009c38  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
460 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  00009e0e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  00009e76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  00009e96  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  00009f60  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  00009f86  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  00009fac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000a00b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
467 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000a030  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000a062  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000a19c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000a25e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
471 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000a278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
472 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000a292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000a2a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000a2be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000a2fa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000a37a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000a3a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
478 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000a3ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000a3cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000a3de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
481 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000a3f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000a40a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
483 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000a4f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
484 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000a532  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000a594  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000a5c2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000a608  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000a632  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000a664  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000a79e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
491 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000a860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
492 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000a87a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
493 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000a888  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000a8bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000a8e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
496 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000a919  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000a93e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000a9ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000aa02  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000aa54  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000aada  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000aaf4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ab6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000ac14  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
505 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000ac76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000ac9e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000acbe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000ace2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000ad5e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000ada6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000adf8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
512 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000ae7e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000aeb2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000af3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000af92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000afb6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000afdf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000afea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000b0fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000b1ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000b1dc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
522 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000b268  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000b2bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000b2e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000b309  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
526 .debug_info   0001e133  0000000000000000  0000000000000000  0000b317  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
527 .debug_abbrev 00000c9a  0000000000000000  0000000000000000  0002944a  2**0
                  CONTENTS, READONLY, DEBUGGING
528 .debug_aranges 00000c30  0000000000000000  0000000000000000  0002a0e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
529 .debug_ranges 00001000  0000000000000000  0000000000000000  0002ad14  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
530 .debug_macro  00000d13  0000000000000000  0000000000000000  0002bd14  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
531 .debug_macro  0000061c  0000000000000000  0000000000000000  0002ca27  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
532 .debug_macro  00000022  0000000000000000  0000000000000000  0002d043  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
533 .debug_macro  00000136  0000000000000000  0000000000000000  0002d065  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
534 .debug_macro  00000010  0000000000000000  0000000000000000  0002d19b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
535 .debug_macro  00000275  0000000000000000  0000000000000000  0002d1ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
536 .debug_macro  0000016f  0000000000000000  0000000000000000  0002d420  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
537 .debug_macro  00000016  0000000000000000  0000000000000000  0002d58f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
538 .debug_macro  00000035  0000000000000000  0000000000000000  0002d5a5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
539 .debug_macro  00000058  0000000000000000  0000000000000000  0002d5da  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
540 .debug_macro  000005b4  0000000000000000  0000000000000000  0002d632  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
541 .debug_macro  0000016d  0000000000000000  0000000000000000  0002dbe6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
542 .debug_macro  00000016  0000000000000000  0000000000000000  0002dd53  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
543 .debug_macro  0000009a  0000000000000000  0000000000000000  0002dd69  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
544 .debug_macro  00000016  0000000000000000  0000000000000000  0002de03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
545 .debug_macro  00000018  0000000000000000  0000000000000000  0002de19  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
546 .debug_macro  00000032  0000000000000000  0000000000000000  0002de31  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
547 .debug_macro  000000c0  0000000000000000  0000000000000000  0002de63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
548 .debug_macro  00000028  0000000000000000  0000000000000000  0002df23  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
549 .debug_macro  00000012  0000000000000000  0000000000000000  0002df4b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
550 .debug_macro  000000cf  0000000000000000  0000000000000000  0002df5d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
551 .debug_macro  0000001c  0000000000000000  0000000000000000  0002e02c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
552 .debug_macro  00000018  0000000000000000  0000000000000000  0002e048  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
553 .debug_macro  0000006e  0000000000000000  0000000000000000  0002e060  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
554 .debug_macro  00000082  0000000000000000  0000000000000000  0002e0ce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
555 .debug_macro  00000012  0000000000000000  0000000000000000  0002e150  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
556 .debug_macro  00000012  0000000000000000  0000000000000000  0002e162  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
557 .debug_macro  00000016  0000000000000000  0000000000000000  0002e174  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
558 .debug_macro  00000035  0000000000000000  0000000000000000  0002e18a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
559 .debug_macro  00000052  0000000000000000  0000000000000000  0002e1bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
560 .debug_macro  0000004c  0000000000000000  0000000000000000  0002e211  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
561 .debug_macro  0000001c  0000000000000000  0000000000000000  0002e25d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
562 .debug_macro  00000028  0000000000000000  0000000000000000  0002e279  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
563 .debug_macro  0000005e  0000000000000000  0000000000000000  0002e2a1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
564 .debug_macro  000000e2  0000000000000000  0000000000000000  0002e2ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
565 .debug_macro  00000010  0000000000000000  0000000000000000  0002e3e1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
566 .debug_macro  0000004c  0000000000000000  0000000000000000  0002e3f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
567 .debug_macro  00000022  0000000000000000  0000000000000000  0002e43d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
568 .debug_macro  00000068  0000000000000000  0000000000000000  0002e45f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
569 .debug_macro  0000007f  0000000000000000  0000000000000000  0002e4c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
570 .debug_macro  0000003a  0000000000000000  0000000000000000  0002e546  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
571 .debug_macro  00000019  0000000000000000  0000000000000000  0002e580  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
572 .debug_macro  00000020  0000000000000000  0000000000000000  0002e599  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
573 .debug_macro  00000022  0000000000000000  0000000000000000  0002e5b9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
574 .debug_macro  00000010  0000000000000000  0000000000000000  0002e5db  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
575 .debug_macro  00000016  0000000000000000  0000000000000000  0002e5eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
576 .debug_macro  00000028  0000000000000000  0000000000000000  0002e601  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
577 .debug_macro  00000010  0000000000000000  0000000000000000  0002e629  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
578 .debug_macro  00000046  0000000000000000  0000000000000000  0002e639  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
579 .debug_macro  0000001c  0000000000000000  0000000000000000  0002e67f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
580 .debug_macro  00000020  0000000000000000  0000000000000000  0002e69b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
581 .debug_macro  0000005a  0000000000000000  0000000000000000  0002e6bb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
582 .debug_macro  00000010  0000000000000000  0000000000000000  0002e715  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
583 .debug_macro  00000010  0000000000000000  0000000000000000  0002e725  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
584 .debug_macro  000000e4  0000000000000000  0000000000000000  0002e735  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
585 .debug_macro  0000025a  0000000000000000  0000000000000000  0002e819  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
586 .debug_macro  0000002d  0000000000000000  0000000000000000  0002ea73  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
587 .debug_macro  00000016  0000000000000000  0000000000000000  0002eaa0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
588 .debug_macro  00000050  0000000000000000  0000000000000000  0002eab6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
589 .debug_macro  00000019  0000000000000000  0000000000000000  0002eb06  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
590 .debug_macro  00000011  0000000000000000  0000000000000000  0002eb1f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
591 .debug_macro  0000014b  0000000000000000  0000000000000000  0002eb30  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
592 .debug_macro  0000001e  0000000000000000  0000000000000000  0002ec7b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
593 .debug_macro  0000001c  0000000000000000  0000000000000000  0002ec99  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
594 .debug_macro  00000024  0000000000000000  0000000000000000  0002ecb5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
595 .debug_macro  00000016  0000000000000000  0000000000000000  0002ecd9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
596 .debug_macro  00000018  0000000000000000  0000000000000000  0002ecef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
597 .debug_macro  00000019  0000000000000000  0000000000000000  0002ed07  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
598 .debug_macro  00000058  0000000000000000  0000000000000000  0002ed20  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
599 .debug_macro  00000016  0000000000000000  0000000000000000  0002ed78  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
600 .debug_macro  0000001c  0000000000000000  0000000000000000  0002ed8e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
601 .debug_macro  00000016  0000000000000000  0000000000000000  0002edaa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
602 .debug_macro  00000022  0000000000000000  0000000000000000  0002edc0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
603 .debug_macro  00000043  0000000000000000  0000000000000000  0002ede2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
604 .debug_macro  0000003c  0000000000000000  0000000000000000  0002ee25  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
605 .debug_macro  00000173  0000000000000000  0000000000000000  0002ee61  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
606 .debug_macro  00000012  0000000000000000  0000000000000000  0002efd4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
607 .debug_macro  00000010  0000000000000000  0000000000000000  0002efe6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
608 .debug_macro  00000058  0000000000000000  0000000000000000  0002eff6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
609 .debug_macro  000000b4  0000000000000000  0000000000000000  0002f04e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
610 .debug_macro  00000016  0000000000000000  0000000000000000  0002f102  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
611 .debug_macro  00000010  0000000000000000  0000000000000000  0002f118  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
612 .debug_macro  00000037  0000000000000000  0000000000000000  0002f128  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
613 .debug_macro  00000058  0000000000000000  0000000000000000  0002f15f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
614 .debug_macro  00000011  0000000000000000  0000000000000000  0002f1b7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
615 .debug_macro  00000016  0000000000000000  0000000000000000  0002f1c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
616 .debug_macro  00000010  0000000000000000  0000000000000000  0002f1de  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
617 .debug_macro  00000010  0000000000000000  0000000000000000  0002f1ee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
618 .debug_macro  00000022  0000000000000000  0000000000000000  0002f1fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
619 .debug_macro  00000122  0000000000000000  0000000000000000  0002f220  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
620 .debug_macro  0000008e  0000000000000000  0000000000000000  0002f342  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
621 .debug_macro  00000016  0000000000000000  0000000000000000  0002f3d0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
622 .debug_macro  00000058  0000000000000000  0000000000000000  0002f3e6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
623 .debug_macro  000000fa  0000000000000000  0000000000000000  0002f43e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
624 .debug_macro  00000030  0000000000000000  0000000000000000  0002f538  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
625 .debug_macro  000000c1  0000000000000000  0000000000000000  0002f568  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
626 .debug_macro  0000004d  0000000000000000  0000000000000000  0002f629  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
627 .debug_macro  00000010  0000000000000000  0000000000000000  0002f676  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
628 .debug_macro  00000019  0000000000000000  0000000000000000  0002f686  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
629 .debug_macro  00000020  0000000000000000  0000000000000000  0002f69f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
630 .debug_macro  00000018  0000000000000000  0000000000000000  0002f6bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
631 .debug_macro  00000023  0000000000000000  0000000000000000  0002f6d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
632 .debug_macro  00000010  0000000000000000  0000000000000000  0002f6fa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
633 .debug_macro  00000016  0000000000000000  0000000000000000  0002f70a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
634 .debug_macro  00000076  0000000000000000  0000000000000000  0002f720  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
635 .debug_macro  00000016  0000000000000000  0000000000000000  0002f796  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
636 .debug_macro  00000025  0000000000000000  0000000000000000  0002f7ac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
637 .debug_macro  000000de  0000000000000000  0000000000000000  0002f7d1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
638 .debug_macro  0000001c  0000000000000000  0000000000000000  0002f8af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
639 .debug_macro  00000058  0000000000000000  0000000000000000  0002f8cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
640 .debug_macro  00000088  0000000000000000  0000000000000000  0002f923  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
641 .debug_macro  00000076  0000000000000000  0000000000000000  0002f9ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
642 .debug_macro  00000010  0000000000000000  0000000000000000  0002fa21  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
643 .debug_macro  00000041  0000000000000000  0000000000000000  0002fa31  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
644 .debug_macro  000000ee  0000000000000000  0000000000000000  0002fa72  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
645 .debug_macro  000000fc  0000000000000000  0000000000000000  0002fb60  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
646 .debug_macro  00000010  0000000000000000  0000000000000000  0002fc5c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
647 .debug_macro  000000e5  0000000000000000  0000000000000000  0002fc6c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
648 .debug_macro  00000012  0000000000000000  0000000000000000  0002fd51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
649 .debug_macro  00000016  0000000000000000  0000000000000000  0002fd63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
650 .debug_macro  00000022  0000000000000000  0000000000000000  0002fd79  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
651 .debug_macro  00000016  0000000000000000  0000000000000000  0002fd9b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
652 .debug_macro  00000028  0000000000000000  0000000000000000  0002fdb1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
653 .debug_macro  00000216  0000000000000000  0000000000000000  0002fdd9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
654 .debug_macro  00000046  0000000000000000  0000000000000000  0002ffef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
655 .debug_macro  0000002e  0000000000000000  0000000000000000  00030035  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
656 .debug_macro  00000027  0000000000000000  0000000000000000  00030063  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
657 .debug_macro  0000001f  0000000000000000  0000000000000000  0003008a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
658 .debug_macro  00000016  0000000000000000  0000000000000000  000300a9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
659 .debug_macro  00000010  0000000000000000  0000000000000000  000300bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
660 .debug_macro  00000126  0000000000000000  0000000000000000  000300cf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
661 .debug_line   00003799  0000000000000000  0000000000000000  000301f5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
662 .debug_str    000367b4  0000000000000000  0000000000000000  0003398e  2**0
                  CONTENTS, READONLY, DEBUGGING
663 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  0006a148  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
664 .comment      0000002e  0000000000000000  0000000000000000  0006a150  2**0
                  CONTENTS, READONLY
665 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0006a17e  2**0
                  CONTENTS, READONLY
666 .eh_frame     00001d60  0000000000000000  0000000000000000  0006a180  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
     328:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
     32f:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
     336:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     33d:	00 00 
     33f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     343:	31 c0                	xor    %eax,%eax
    int varCount = 0;
     345:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    VarTypes VT;
     34c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     350:	48 89 c7             	mov    %rax,%rdi
     353:	e8 00 00 00 00       	callq  358 <_ZN6Parser14checkVariablesEP7QString+0x3c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     358:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     35c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
     360:	48 89 d6             	mov    %rdx,%rsi
     363:	48 89 c7             	mov    %rax,%rdi
     366:	e8 00 00 00 00       	callq  36b <_ZN6Parser14checkVariablesEP7QString+0x4f>
     36b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     36f:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     373:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37a <_ZN6Parser14checkVariablesEP7QString+0x5e>
     37a:	48 89 ce             	mov    %rcx,%rsi
     37d:	48 89 c7             	mov    %rax,%rdi
     380:	e8 00 00 00 00       	callq  385 <_ZN6Parser14checkVariablesEP7QString+0x69>
     385:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
     389:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     38d:	b9 00 00 00 00       	mov    $0x0,%ecx
     392:	ba 01 00 00 00       	mov    $0x1,%edx
     397:	48 89 c7             	mov    %rax,%rdi
     39a:	e8 00 00 00 00       	callq  39f <_ZN6Parser14checkVariablesEP7QString+0x83>
     39f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     3a3:	48 89 c7             	mov    %rax,%rdi
     3a6:	e8 00 00 00 00       	callq  3ab <_ZN6Parser14checkVariablesEP7QString+0x8f>
     3ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     3af:	48 89 c7             	mov    %rax,%rdi
     3b2:	e8 00 00 00 00       	callq  3b7 <_ZN6Parser14checkVariablesEP7QString+0x9b>
    QStringList list;
     3b7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     3bb:	48 89 c7             	mov    %rax,%rdi
     3be:	e8 00 00 00 00       	callq  3c3 <_ZN6Parser14checkVariablesEP7QString+0xa7>
    int pos = 0;
     3c3:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)

    while ((pos = rx.indexIn(*str, pos)) != -1) {
     3ca:	8b 55 88             	mov    -0x78(%rbp),%edx
     3cd:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
     3d4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3d8:	b9 00 00 00 00       	mov    $0x0,%ecx
     3dd:	48 89 c7             	mov    %rax,%rdi
     3e0:	e8 00 00 00 00       	callq  3e5 <_ZN6Parser14checkVariablesEP7QString+0xc9>
     3e5:	89 45 88             	mov    %eax,-0x78(%rbp)
     3e8:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%rbp)
     3ec:	0f 95 c0             	setne  %al
     3ef:	84 c0                	test   %al,%al
     3f1:	74 48                	je     43b <_ZN6Parser14checkVariablesEP7QString+0x11f>
         list << rx.cap(1);
     3f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     3f7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     3fb:	ba 01 00 00 00       	mov    $0x1,%edx
     400:	48 89 ce             	mov    %rcx,%rsi
     403:	48 89 c7             	mov    %rax,%rdi
     406:	e8 00 00 00 00       	callq  40b <_ZN6Parser14checkVariablesEP7QString+0xef>
     40b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     40f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     413:	48 89 d6             	mov    %rdx,%rsi
     416:	48 89 c7             	mov    %rax,%rdi
     419:	e8 00 00 00 00       	callq  41e <_ZN6Parser14checkVariablesEP7QString+0x102>
     41e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     422:	48 89 c7             	mov    %rax,%rdi
     425:	e8 00 00 00 00       	callq  42a <_ZN6Parser14checkVariablesEP7QString+0x10e>
         pos += rx.matchedLength();
     42a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     42e:	48 89 c7             	mov    %rax,%rdi
     431:	e8 00 00 00 00       	callq  436 <_ZN6Parser14checkVariablesEP7QString+0x11a>
     436:	01 45 88             	add    %eax,-0x78(%rbp)

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QStringList list;
    int pos = 0;

    while ((pos = rx.indexIn(*str, pos)) != -1) {
     439:	eb 8f                	jmp    3ca <_ZN6Parser14checkVariablesEP7QString+0xae>
         list << rx.cap(1);
         pos += rx.matchedLength();
    }
    return varCount;
     43b:	8b 5d 8c             	mov    -0x74(%rbp),%ebx
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QStringList list;
     43e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     442:	48 89 c7             	mov    %rax,%rdi
     445:	e8 00 00 00 00       	callq  44a <_ZN6Parser14checkVariablesEP7QString+0x12e>
int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     44a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     44e:	48 89 c7             	mov    %rax,%rdi
     451:	e8 00 00 00 00       	callq  456 <_ZN6Parser14checkVariablesEP7QString+0x13a>
}

int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;
     456:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     45a:	48 89 c7             	mov    %rax,%rdi
     45d:	e8 00 00 00 00       	callq  462 <_ZN6Parser14checkVariablesEP7QString+0x146>

    while ((pos = rx.indexIn(*str, pos)) != -1) {
         list << rx.cap(1);
         pos += rx.matchedLength();
    }
    return varCount;
     462:	89 d8                	mov    %ebx,%eax
}
     464:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     468:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     46f:	00 00 
     471:	0f 84 9b 00 00 00    	je     512 <_ZN6Parser14checkVariablesEP7QString+0x1f6>
     477:	e9 91 00 00 00       	jmpq   50d <_ZN6Parser14checkVariablesEP7QString+0x1f1>
     47c:	48 89 c3             	mov    %rax,%rbx
     47f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     483:	48 89 c7             	mov    %rax,%rdi
     486:	e8 00 00 00 00       	callq  48b <_ZN6Parser14checkVariablesEP7QString+0x16f>
     48b:	eb 14                	jmp    4a1 <_ZN6Parser14checkVariablesEP7QString+0x185>
     48d:	48 89 c3             	mov    %rax,%rbx
     490:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     494:	48 89 c7             	mov    %rax,%rdi
     497:	e8 00 00 00 00       	callq  49c <_ZN6Parser14checkVariablesEP7QString+0x180>
     49c:	eb 03                	jmp    4a1 <_ZN6Parser14checkVariablesEP7QString+0x185>
     49e:	48 89 c3             	mov    %rax,%rbx
     4a1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     4a5:	48 89 c7             	mov    %rax,%rdi
     4a8:	e8 00 00 00 00       	callq  4ad <_ZN6Parser14checkVariablesEP7QString+0x191>
     4ad:	eb 47                	jmp    4f6 <_ZN6Parser14checkVariablesEP7QString+0x1da>
     4af:	48 89 c3             	mov    %rax,%rbx
     4b2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     4b6:	48 89 c7             	mov    %rax,%rdi
     4b9:	e8 00 00 00 00       	callq  4be <_ZN6Parser14checkVariablesEP7QString+0x1a2>
     4be:	eb 36                	jmp    4f6 <_ZN6Parser14checkVariablesEP7QString+0x1da>
     4c0:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QStringList list;
    int pos = 0;

    while ((pos = rx.indexIn(*str, pos)) != -1) {
         list << rx.cap(1);
     4c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser14checkVariablesEP7QString+0x1b3>
     4cf:	eb 03                	jmp    4d4 <_ZN6Parser14checkVariablesEP7QString+0x1b8>
     4d1:	48 89 c3             	mov    %rax,%rbx
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QStringList list;
     4d4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     4d8:	48 89 c7             	mov    %rax,%rdi
     4db:	e8 00 00 00 00       	callq  4e0 <_ZN6Parser14checkVariablesEP7QString+0x1c4>
     4e0:	eb 03                	jmp    4e5 <_ZN6Parser14checkVariablesEP7QString+0x1c9>
     4e2:	48 89 c3             	mov    %rax,%rbx
int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     4e5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     4e9:	48 89 c7             	mov    %rax,%rdi
     4ec:	e8 00 00 00 00       	callq  4f1 <_ZN6Parser14checkVariablesEP7QString+0x1d5>
     4f1:	eb 03                	jmp    4f6 <_ZN6Parser14checkVariablesEP7QString+0x1da>
     4f3:	48 89 c3             	mov    %rax,%rbx
}

int Parser::checkVariables(QString *str){
    int varCount = 0;

    VarTypes VT;
     4f6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     4fa:	48 89 c7             	mov    %rax,%rdi
     4fd:	e8 00 00 00 00       	callq  502 <_ZN6Parser14checkVariablesEP7QString+0x1e6>
     502:	48 89 d8             	mov    %rbx,%rax
     505:	48 89 c7             	mov    %rax,%rdi
     508:	e8 00 00 00 00       	callq  50d <_ZN6Parser14checkVariablesEP7QString+0x1f1>
    while ((pos = rx.indexIn(*str, pos)) != -1) {
         list << rx.cap(1);
         pos += rx.matchedLength();
    }
    return varCount;
}
     50d:	e8 00 00 00 00       	callq  512 <_ZN6Parser14checkVariablesEP7QString+0x1f6>
     512:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
     519:	5b                   	pop    %rbx
     51a:	5d                   	pop    %rbp
     51b:	c3                   	retq   

000000000000051c <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
     51c:	55                   	push   %rbp
     51d:	48 89 e5             	mov    %rsp,%rbp
     520:	53                   	push   %rbx
     521:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
     528:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
     52f:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
     536:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
     53d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     544:	00 00 
     546:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     54a:	31 c0                	xor    %eax,%eax
    int cnt = 0;
     54c:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
     553:	00 00 00 
    QString result;
     556:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     55d:	48 89 c7             	mov    %rax,%rdi
     560:	e8 00 00 00 00       	callq  565 <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
     565:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     569:	48 89 c7             	mov    %rax,%rdi
     56c:	e8 00 00 00 00       	callq  571 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
     571:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     578:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     57c:	48 89 d6             	mov    %rdx,%rsi
     57f:	48 89 c7             	mov    %rax,%rdi
     582:	e8 00 00 00 00       	callq  587 <_ZN6Parser17QStringList_printE11QStringList+0x6b>
     587:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     58b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
     58f:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
     596:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     59a:	48 89 d6             	mov    %rdx,%rsi
     59d:	48 89 c7             	mov    %rax,%rdi
     5a0:	e8 00 00 00 00       	callq  5a5 <_ZN6Parser17QStringList_printE11QStringList+0x89>
     5a5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     5a9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     5ad:	48 89 d6             	mov    %rdx,%rsi
     5b0:	48 89 c7             	mov    %rax,%rdi
     5b3:	e8 00 00 00 00       	callq  5b8 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
     5b8:	84 c0                	test   %al,%al
     5ba:	0f 84 e0 00 00 00    	je     6a0 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
     5c0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     5c4:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
     5ca:	ba 0a 00 00 00       	mov    $0xa,%edx
     5cf:	89 ce                	mov    %ecx,%esi
     5d1:	48 89 c7             	mov    %rax,%rdi
     5d4:	e8 00 00 00 00       	callq  5d9 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
     5d9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     5dd:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     5e1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e8 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
     5e8:	48 89 c7             	mov    %rax,%rdi
     5eb:	e8 00 00 00 00       	callq  5f0 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
     5f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     5f4:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     5f8:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5ff <_ZN6Parser17QStringList_printE11QStringList+0xe3>
     5ff:	48 89 ce             	mov    %rcx,%rsi
     602:	48 89 c7             	mov    %rax,%rdi
     605:	e8 00 00 00 00       	callq  60a <_ZN6Parser17QStringList_printE11QStringList+0xee>
     60a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     60e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     615:	48 89 d6             	mov    %rdx,%rsi
     618:	48 89 c7             	mov    %rax,%rdi
     61b:	e8 00 00 00 00       	callq  620 <_ZN6Parser17QStringList_printE11QStringList+0x104>
     620:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     624:	48 89 c7             	mov    %rax,%rdi
     627:	e8 00 00 00 00       	callq  62c <_ZN6Parser17QStringList_printE11QStringList+0x110>
     62c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     630:	48 89 c7             	mov    %rax,%rdi
     633:	e8 00 00 00 00       	callq  638 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
     638:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     63c:	48 89 c7             	mov    %rax,%rdi
     63f:	e8 00 00 00 00       	callq  644 <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
     644:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     648:	48 89 c7             	mov    %rax,%rdi
     64b:	e8 00 00 00 00       	callq  650 <_ZN6Parser17QStringList_printE11QStringList+0x134>
     650:	48 89 c2             	mov    %rax,%rdx
     653:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     657:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 65e <_ZN6Parser17QStringList_printE11QStringList+0x142>
     65e:	48 89 c7             	mov    %rax,%rdi
     661:	e8 00 00 00 00       	callq  666 <_ZN6Parser17QStringList_printE11QStringList+0x14a>
     666:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     66a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     671:	48 89 d6             	mov    %rdx,%rsi
     674:	48 89 c7             	mov    %rax,%rdi
     677:	e8 00 00 00 00       	callq  67c <_ZN6Parser17QStringList_printE11QStringList+0x160>
     67c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     680:	48 89 c7             	mov    %rax,%rdi
     683:	e8 00 00 00 00       	callq  688 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
     688:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
     68f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     693:	48 89 c7             	mov    %rax,%rdi
     696:	e8 00 00 00 00       	callq  69b <_ZN6Parser17QStringList_printE11QStringList+0x17f>
     69b:	e9 ef fe ff ff       	jmpq   58f <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
     6a0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     6a7:	48 89 c7             	mov    %rax,%rdi
     6aa:	e8 00 00 00 00       	callq  6af <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
     6af:	90                   	nop
     6b0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     6b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     6bb:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     6c2:	00 00 
     6c4:	74 68                	je     72e <_ZN6Parser17QStringList_printE11QStringList+0x212>
     6c6:	eb 61                	jmp    729 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
     6c8:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
     6cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     6cf:	48 89 c7             	mov    %rax,%rdi
     6d2:	e8 00 00 00 00       	callq  6d7 <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
     6d7:	eb 03                	jmp    6dc <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
     6d9:	48 89 c3             	mov    %rax,%rbx
     6dc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     6e0:	48 89 c7             	mov    %rax,%rdi
     6e3:	e8 00 00 00 00       	callq  6e8 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
     6e8:	eb 03                	jmp    6ed <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
     6ea:	48 89 c3             	mov    %rax,%rbx
     6ed:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     6f1:	48 89 c7             	mov    %rax,%rdi
     6f4:	e8 00 00 00 00       	callq  6f9 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
     6f9:	eb 14                	jmp    70f <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
     6fb:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
     6fe:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     702:	48 89 c7             	mov    %rax,%rdi
     705:	e8 00 00 00 00       	callq  70a <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
     70a:	eb 03                	jmp    70f <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
     70c:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
     70f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     716:	48 89 c7             	mov    %rax,%rdi
     719:	e8 00 00 00 00       	callq  71e <_ZN6Parser17QStringList_printE11QStringList+0x202>
     71e:	48 89 d8             	mov    %rbx,%rax
     721:	48 89 c7             	mov    %rax,%rdi
     724:	e8 00 00 00 00       	callq  729 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
     729:	e8 00 00 00 00       	callq  72e <_ZN6Parser17QStringList_printE11QStringList+0x212>
     72e:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     735:	5b                   	pop    %rbx
     736:	5d                   	pop    %rbp
     737:	c3                   	retq   

0000000000000738 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
     738:	55                   	push   %rbp
     739:	48 89 e5             	mov    %rsp,%rbp
     73c:	48 83 ec 10          	sub    $0x10,%rsp
     740:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     744:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
     748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     74c:	48 8d 48 58          	lea    0x58(%rax),%rcx
     750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     754:	ba 01 00 00 00       	mov    $0x1,%edx
     759:	48 89 c6             	mov    %rax,%rsi
     75c:	48 89 cf             	mov    %rcx,%rdi
     75f:	e8 00 00 00 00       	callq  764 <_ZN6Parser14addIncludeFileE7QString+0x2c>
     764:	83 f0 01             	xor    $0x1,%eax
     767:	84 c0                	test   %al,%al
     769:	74 17                	je     782 <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
     76b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     76f:	48 8d 50 58          	lea    0x58(%rax),%rdx
     773:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     777:	48 89 c6             	mov    %rax,%rsi
     77a:	48 89 d7             	mov    %rdx,%rdi
     77d:	e8 00 00 00 00       	callq  782 <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
     782:	90                   	nop
     783:	c9                   	leaveq 
     784:	c3                   	retq   
     785:	90                   	nop

0000000000000786 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
     786:	55                   	push   %rbp
     787:	48 89 e5             	mov    %rsp,%rbp
     78a:	41 55                	push   %r13
     78c:	41 54                	push   %r12
     78e:	53                   	push   %rbx
     78f:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
     796:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
     79d:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
     7a4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
     7ab:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     7b2:	00 00 
     7b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
     7b8:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
     7ba:	bb 00 00 00 00       	mov    $0x0,%ebx
     7bf:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     7c6:	48 89 c7             	mov    %rax,%rdi
     7c9:	e8 00 00 00 00       	callq  7ce <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
     7ce:	83 f8 04             	cmp    $0x4,%eax
     7d1:	74 3a                	je     80d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
     7d3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     7d7:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     7de:	48 89 d6             	mov    %rdx,%rsi
     7e1:	48 89 c7             	mov    %rax,%rdi
     7e4:	e8 00 00 00 00       	callq  7e9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
     7e9:	bb 01 00 00 00       	mov    $0x1,%ebx
     7ee:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     7f2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7f9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
     7f9:	48 89 c7             	mov    %rax,%rdi
     7fc:	e8 00 00 00 00       	callq  801 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
     801:	84 c0                	test   %al,%al
     803:	74 08                	je     80d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
     805:	41 bd 01 00 00 00    	mov    $0x1,%r13d
     80b:	eb 06                	jmp    813 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
     80d:	41 bd 00 00 00 00    	mov    $0x0,%r13d
     813:	84 db                	test   %bl,%bl
     815:	74 0d                	je     824 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
     817:	90                   	nop
     818:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     81c:	48 89 c7             	mov    %rax,%rdi
     81f:	e8 00 00 00 00       	callq  824 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
     824:	45 84 ed             	test   %r13b,%r13b
     827:	74 0b                	je     834 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
     829:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     82f:	e9 87 02 00 00       	jmpq   abb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
     834:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     83b:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     842:	48 89 d6             	mov    %rdx,%rsi
     845:	48 89 c7             	mov    %rax,%rdi
     848:	e8 00 00 00 00       	callq  84d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
     84d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
     854:	00 00 00 
     if (attributes.hasAttribute("id")) {
     857:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     85e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 865 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
     865:	48 89 c7             	mov    %rax,%rdi
     868:	e8 00 00 00 00       	callq  86d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
     86d:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     874:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     87b:	48 89 d6             	mov    %rdx,%rsi
     87e:	48 89 c7             	mov    %rax,%rdi
     881:	e8 00 00 00 00       	callq  886 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
     886:	89 c3                	mov    %eax,%ebx
     888:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     88f:	48 89 c7             	mov    %rax,%rdi
     892:	e8 00 00 00 00       	callq  897 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
     897:	84 db                	test   %bl,%bl
     899:	74 6c                	je     907 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
     89b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     8a2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 8a9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
     8a9:	48 89 c7             	mov    %rax,%rdi
     8ac:	e8 00 00 00 00       	callq  8b1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
     8b1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     8b5:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
     8bc:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
     8c3:	48 89 ce             	mov    %rcx,%rsi
     8c6:	48 89 c7             	mov    %rax,%rdi
     8c9:	e8 00 00 00 00       	callq  8ce <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
     8ce:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     8d2:	ba 0a 00 00 00       	mov    $0xa,%edx
     8d7:	be 00 00 00 00       	mov    $0x0,%esi
     8dc:	48 89 c7             	mov    %rax,%rdi
     8df:	e8 00 00 00 00       	callq  8e4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
     8e4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
     8ea:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     8ee:	48 89 c7             	mov    %rax,%rdi
     8f1:	e8 00 00 00 00       	callq  8f6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
     8f6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     8fd:	48 89 c7             	mov    %rax,%rdi
     900:	e8 00 00 00 00       	callq  905 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
     905:	eb 0b                	jmp    912 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
     907:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     90d:	e9 9a 01 00 00       	jmpq   aac <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
     912:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     919:	48 89 c7             	mov    %rax,%rdi
     91c:	e8 00 00 00 00       	callq  921 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     921:	bb 00 00 00 00       	mov    $0x0,%ebx
     926:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     92d:	48 89 c7             	mov    %rax,%rdi
     930:	e8 00 00 00 00       	callq  935 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
     935:	83 f8 05             	cmp    $0x5,%eax
     938:	75 35                	jne    96f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
     93a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     93e:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     945:	48 89 d6             	mov    %rdx,%rsi
     948:	48 89 c7             	mov    %rax,%rdi
     94b:	e8 00 00 00 00       	callq  950 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
     950:	bb 01 00 00 00       	mov    $0x1,%ebx
     955:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     959:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 960 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
     960:	48 89 c7             	mov    %rax,%rdi
     963:	e8 00 00 00 00       	callq  968 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
     968:	83 f0 01             	xor    $0x1,%eax
     96b:	84 c0                	test   %al,%al
     96d:	74 08                	je     977 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
     96f:	41 bd 01 00 00 00    	mov    $0x1,%r13d
     975:	eb 06                	jmp    97d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
     977:	41 bd 00 00 00 00    	mov    $0x0,%r13d
     97d:	84 db                	test   %bl,%bl
     97f:	74 0d                	je     98e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
     981:	90                   	nop
     982:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     986:	48 89 c7             	mov    %rax,%rdi
     989:	e8 00 00 00 00       	callq  98e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
     98e:	45 84 ed             	test   %r13b,%r13b
     991:	0f 84 0f 01 00 00    	je     aa6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
     997:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     99e:	48 89 c7             	mov    %rax,%rdi
     9a1:	e8 00 00 00 00       	callq  9a6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
     9a6:	83 f8 04             	cmp    $0x4,%eax
     9a9:	0f 94 c0             	sete   %al
     9ac:	84 c0                	test   %al,%al
     9ae:	0f 84 de 00 00 00    	je     a92 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
     9b4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     9b8:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     9bf:	48 89 d6             	mov    %rdx,%rsi
     9c2:	48 89 c7             	mov    %rax,%rdi
     9c5:	e8 00 00 00 00       	callq  9ca <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
     9ca:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     9ce:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9d5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
     9d5:	48 89 c7             	mov    %rax,%rdi
     9d8:	e8 00 00 00 00       	callq  9dd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
     9dd:	89 c3                	mov    %eax,%ebx
     9df:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     9e3:	48 89 c7             	mov    %rax,%rdi
     9e6:	e8 00 00 00 00       	callq  9eb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
     9eb:	84 db                	test   %bl,%bl
     9ed:	0f 84 9f 00 00 00    	je     a92 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
     9f3:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     9fa:	48 89 c7             	mov    %rax,%rdi
     9fd:	e8 00 00 00 00       	callq  a02 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
     a02:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a06:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
     a0d:	48 89 d6             	mov    %rdx,%rsi
     a10:	48 89 c7             	mov    %rax,%rdi
     a13:	e8 00 00 00 00       	callq  a18 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
     a18:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a1c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a20:	48 89 d6             	mov    %rdx,%rsi
     a23:	48 89 c7             	mov    %rax,%rdi
     a26:	e8 00 00 00 00       	callq  a2b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
     a2b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a2f:	48 89 c7             	mov    %rax,%rdi
     a32:	e8 00 00 00 00       	callq  a37 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
     a37:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     a3b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
     a42:	48 89 d6             	mov    %rdx,%rsi
     a45:	48 89 c7             	mov    %rax,%rdi
     a48:	e8 00 00 00 00       	callq  a4d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
     a4d:	84 c0                	test   %al,%al
     a4f:	74 0d                	je     a5e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
     a51:	41 bc 00 00 00 00    	mov    $0x0,%r12d
     a57:	bb 00 00 00 00       	mov    $0x0,%ebx
     a5c:	eb 22                	jmp    a80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
     a5e:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
     a65:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     a69:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
     a70:	48 89 ce             	mov    %rcx,%rsi
     a73:	48 89 c7             	mov    %rax,%rdi
     a76:	e8 00 00 00 00       	callq  a7b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
     a7b:	bb 01 00 00 00       	mov    $0x1,%ebx
     a80:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a84:	48 89 c7             	mov    %rax,%rdi
     a87:	e8 00 00 00 00       	callq  a8c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
     a8c:	83 fb 01             	cmp    $0x1,%ebx
     a8f:	75 1b                	jne    aac <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
     a91:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     a92:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
     a99:	48 89 c7             	mov    %rax,%rdi
     a9c:	e8 00 00 00 00       	callq  aa1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     aa1:	e9 7b fe ff ff       	jmpq   921 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
     aa6:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     aac:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     ab3:	48 89 c7             	mov    %rax,%rdi
     ab6:	e8 00 00 00 00       	callq  abb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     abb:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
     abe:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
     ac2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     ac9:	00 00 
     acb:	0f 84 d1 00 00 00    	je     ba2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
     ad1:	e9 c7 00 00 00       	jmpq   b9d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
     ad6:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
     ad9:	84 db                	test   %bl,%bl
     adb:	74 0f                	je     aec <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
     add:	90                   	nop
     ade:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     ae2:	48 89 c7             	mov    %rax,%rdi
     ae5:	e8 00 00 00 00       	callq  aea <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
     aea:	eb 01                	jmp    aed <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
     aec:	90                   	nop
     aed:	4c 89 e0             	mov    %r12,%rax
     af0:	48 89 c7             	mov    %rax,%rdi
     af3:	e8 00 00 00 00       	callq  af8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
     af8:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
     afb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     b02:	48 89 c7             	mov    %rax,%rdi
     b05:	e8 00 00 00 00       	callq  b0a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
     b0a:	eb 77                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b0c:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
     b0f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     b13:	48 89 c7             	mov    %rax,%rdi
     b16:	e8 00 00 00 00       	callq  b1b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
     b1b:	eb 03                	jmp    b20 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
     b1d:	48 89 c3             	mov    %rax,%rbx
     b20:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     b27:	48 89 c7             	mov    %rax,%rdi
     b2a:	e8 00 00 00 00       	callq  b2f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
     b2f:	eb 52                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b31:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
     b34:	84 db                	test   %bl,%bl
     b36:	74 0f                	je     b47 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
     b38:	90                   	nop
     b39:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     b3d:	48 89 c7             	mov    %rax,%rdi
     b40:	e8 00 00 00 00       	callq  b45 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
     b45:	eb 01                	jmp    b48 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
     b47:	90                   	nop
     b48:	4c 89 e3             	mov    %r12,%rbx
     b4b:	eb 36                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b4d:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
     b50:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b54:	48 89 c7             	mov    %rax,%rdi
     b57:	e8 00 00 00 00       	callq  b5c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
     b5c:	eb 25                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b5e:	48 89 c3             	mov    %rax,%rbx
     b61:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     b65:	48 89 c7             	mov    %rax,%rdi
     b68:	e8 00 00 00 00       	callq  b6d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
     b6d:	eb 14                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b6f:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
     b72:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b76:	48 89 c7             	mov    %rax,%rdi
     b79:	e8 00 00 00 00       	callq  b7e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
     b7e:	eb 03                	jmp    b83 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
     b80:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     b83:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     b8a:	48 89 c7             	mov    %rax,%rdi
     b8d:	e8 00 00 00 00       	callq  b92 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
     b92:	48 89 d8             	mov    %rbx,%rax
     b95:	48 89 c7             	mov    %rax,%rdi
     b98:	e8 00 00 00 00       	callq  b9d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
     b9d:	e8 00 00 00 00       	callq  ba2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
     ba2:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
     ba9:	5b                   	pop    %rbx
     baa:	41 5c                	pop    %r12
     bac:	41 5d                	pop    %r13
     bae:	5d                   	pop    %rbp
     baf:	c3                   	retq   

0000000000000bb0 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
     bb0:	55                   	push   %rbp
     bb1:	48 89 e5             	mov    %rsp,%rbp
     bb4:	53                   	push   %rbx
     bb5:	48 83 ec 68          	sub    $0x68,%rsp
     bb9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
     bbd:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
     bc1:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
     bc5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     bcc:	00 00 
     bce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     bd2:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
     bd4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
     bd8:	48 89 c7             	mov    %rax,%rdi
     bdb:	e8 00 00 00 00       	callq  be0 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
     be0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     be4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     be8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     bec:	48 89 d6             	mov    %rdx,%rsi
     bef:	48 89 c7             	mov    %rax,%rdi
     bf2:	e8 00 00 00 00       	callq  bf7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
     bf7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
     bfb:	48 89 c7             	mov    %rax,%rdi
     bfe:	e8 00 00 00 00       	callq  c03 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
     c03:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     c07:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     c0b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c0f:	48 89 d6             	mov    %rdx,%rsi
     c12:	48 89 c7             	mov    %rax,%rdi
     c15:	e8 00 00 00 00       	callq  c1a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
     c1a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     c1e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     c22:	48 89 d6             	mov    %rdx,%rsi
     c25:	48 89 c7             	mov    %rax,%rdi
     c28:	e8 00 00 00 00       	callq  c2d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
     c2d:	84 c0                	test   %al,%al
     c2f:	0f 84 d7 00 00 00    	je     d0c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
     c35:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     c39:	48 89 c7             	mov    %rax,%rdi
     c3c:	e8 00 00 00 00       	callq  c41 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
     c41:	8b 08                	mov    (%rax),%ecx
     c43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c47:	ba 0a 00 00 00       	mov    $0xa,%edx
     c4c:	89 ce                	mov    %ecx,%esi
     c4e:	48 89 c7             	mov    %rax,%rdi
     c51:	e8 00 00 00 00       	callq  c56 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
     c56:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     c5a:	48 89 c7             	mov    %rax,%rdi
     c5d:	e8 00 00 00 00       	callq  c62 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
     c62:	48 89 c2             	mov    %rax,%rdx
     c65:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     c69:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c70 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
     c70:	48 89 c7             	mov    %rax,%rdi
     c73:	e8 00 00 00 00       	callq  c78 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
     c78:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     c7c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     c80:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # c87 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
     c87:	48 89 ce             	mov    %rcx,%rsi
     c8a:	48 89 c7             	mov    %rax,%rdi
     c8d:	e8 00 00 00 00       	callq  c92 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
     c92:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     c96:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     c9a:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
     c9e:	48 89 ce             	mov    %rcx,%rsi
     ca1:	48 89 c7             	mov    %rax,%rdi
     ca4:	e8 00 00 00 00       	callq  ca9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
     ca9:	90                   	nop
     caa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     cae:	48 89 c7             	mov    %rax,%rdi
     cb1:	e8 00 00 00 00       	callq  cb6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
     cb6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     cba:	48 89 c7             	mov    %rax,%rdi
     cbd:	e8 00 00 00 00       	callq  cc2 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
     cc2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cc6:	48 89 c7             	mov    %rax,%rdi
     cc9:	e8 00 00 00 00       	callq  cce <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
     cce:	eb 3d                	jmp    d0d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
     cd0:	48 89 c3             	mov    %rax,%rbx
     cd3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     cd7:	48 89 c7             	mov    %rax,%rdi
     cda:	e8 00 00 00 00       	callq  cdf <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
     cdf:	eb 03                	jmp    ce4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
     ce1:	48 89 c3             	mov    %rax,%rbx
     ce4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     ce8:	48 89 c7             	mov    %rax,%rdi
     ceb:	e8 00 00 00 00       	callq  cf0 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
     cf0:	eb 03                	jmp    cf5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
     cf2:	48 89 c3             	mov    %rax,%rbx
     cf5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cf9:	48 89 c7             	mov    %rax,%rdi
     cfc:	e8 00 00 00 00       	callq  d01 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
     d01:	48 89 d8             	mov    %rbx,%rax
     d04:	48 89 c7             	mov    %rax,%rdi
     d07:	e8 00 00 00 00       	callq  d0c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
     d0c:	90                   	nop
     d0d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     d11:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     d15:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     d1c:	00 00 
     d1e:	74 05                	je     d25 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
     d20:	e8 00 00 00 00       	callq  d25 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
     d25:	48 83 c4 68          	add    $0x68,%rsp
     d29:	5b                   	pop    %rbx
     d2a:	5d                   	pop    %rbp
     d2b:	c3                   	retq   

0000000000000d2c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
     d2c:	55                   	push   %rbp
     d2d:	48 89 e5             	mov    %rsp,%rbp
     d30:	53                   	push   %rbx
     d31:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
     d38:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     d3c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     d40:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
     d47:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     d4e:	00 00 
     d50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     d54:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
     d56:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
     d5a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     d5e:	48 89 d6             	mov    %rdx,%rsi
     d61:	48 89 c7             	mov    %rax,%rdi
     d64:	e8 00 00 00 00       	callq  d69 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
     d69:	be 10 00 00 00       	mov    $0x10,%esi
     d6e:	bf 01 00 00 00       	mov    $0x1,%edi
     d73:	e8 00 00 00 00       	callq  d78 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
     d78:	89 c2                	mov    %eax,%edx
     d7a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     d7e:	89 d6                	mov    %edx,%esi
     d80:	48 89 c7             	mov    %rax,%rdi
     d83:	e8 00 00 00 00       	callq  d88 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
     d88:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     d8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     d90:	48 89 d6             	mov    %rdx,%rsi
     d93:	48 89 c7             	mov    %rax,%rdi
     d96:	e8 00 00 00 00       	callq  d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
     d9b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     d9f:	48 89 c7             	mov    %rax,%rdi
     da2:	e8 00 00 00 00       	callq  da7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
     da7:	83 f0 01             	xor    $0x1,%eax
     daa:	84 c0                	test   %al,%al
     dac:	74 1a                	je     dc8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
     dae:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     db2:	48 89 c7             	mov    %rax,%rdi
     db5:	e8 00 00 00 00       	callq  dba <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
     dba:	83 f0 01             	xor    $0x1,%eax
     dbd:	84 c0                	test   %al,%al
     dbf:	74 07                	je     dc8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
     dc1:	b8 01 00 00 00       	mov    $0x1,%eax
     dc6:	eb 05                	jmp    dcd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
     dc8:	b8 00 00 00 00       	mov    $0x0,%eax
     dcd:	84 c0                	test   %al,%al
     dcf:	0f 84 cb 00 00 00    	je     ea0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
     dd5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     dd9:	48 89 c7             	mov    %rax,%rdi
     ddc:	e8 00 00 00 00       	callq  de1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
     de1:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
     de4:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
     de8:	0f 84 a6 00 00 00    	je     e94 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
     dee:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
     df2:	75 a7                	jne    d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
     df4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     df8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     dfc:	48 89 d6             	mov    %rdx,%rsi
     dff:	48 89 c7             	mov    %rax,%rdi
     e02:	e8 00 00 00 00       	callq  e07 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
     e07:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e0b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e12 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
     e12:	48 89 c7             	mov    %rax,%rdi
     e15:	e8 00 00 00 00       	callq  e1a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
     e1a:	89 c3                	mov    %eax,%ebx
     e1c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e20:	48 89 c7             	mov    %rax,%rdi
     e23:	e8 00 00 00 00       	callq  e28 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
     e28:	84 db                	test   %bl,%bl
     e2a:	75 6e                	jne    e9a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
     e2c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e30:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     e34:	48 89 d6             	mov    %rdx,%rsi
     e37:	48 89 c7             	mov    %rax,%rdi
     e3a:	e8 00 00 00 00       	callq  e3f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
     e3f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e43:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e4a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
     e4a:	48 89 c7             	mov    %rax,%rdi
     e4d:	e8 00 00 00 00       	callq  e52 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
     e52:	89 c3                	mov    %eax,%ebx
     e54:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e58:	48 89 c7             	mov    %rax,%rdi
     e5b:	e8 00 00 00 00       	callq  e60 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
     e60:	84 db                	test   %bl,%bl
     e62:	0f 84 33 ff ff ff    	je     d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
     e68:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
     e6f:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     e73:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     e77:	48 89 ce             	mov    %rcx,%rsi
     e7a:	48 89 c7             	mov    %rax,%rdi
     e7d:	e8 00 00 00 00       	callq  e82 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
     e82:	83 f0 01             	xor    $0x1,%eax
     e85:	84 c0                	test   %al,%al
     e87:	0f 84 0e ff ff ff    	je     d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
     e8d:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
     e92:	eb 11                	jmp    ea5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
     e94:	90                   	nop
     e95:	e9 01 ff ff ff       	jmpq   d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
     e9a:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
     e9b:	e9 fb fe ff ff       	jmpq   d9b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
     ea0:	bb 01 00 00 00       	mov    $0x1,%ebx
     ea5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     ea9:	48 89 c7             	mov    %rax,%rdi
     eac:	e8 00 00 00 00       	callq  eb1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
     eb1:	83 fb 01             	cmp    $0x1,%ebx
     eb4:	74 07                	je     ebd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
     eb6:	bb 00 00 00 00       	mov    $0x0,%ebx
     ebb:	eb 06                	jmp    ec3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
     ebd:	90                   	nop
     ebe:	bb 01 00 00 00       	mov    $0x1,%ebx
     ec3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     ec7:	48 89 c7             	mov    %rax,%rdi
     eca:	e8 00 00 00 00       	callq  ecf <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
     ecf:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
     ed2:	90                   	nop
                    return;
                }
            }
        }
    }
}
     ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ed7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
     ede:	00 00 
     ee0:	74 54                	je     f36 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
     ee2:	eb 4d                	jmp    f31 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
     ee4:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
     ee7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     eeb:	48 89 c7             	mov    %rax,%rdi
     eee:	e8 00 00 00 00       	callq  ef3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
     ef3:	eb 14                	jmp    f09 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
     ef5:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
     ef8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     efc:	48 89 c7             	mov    %rax,%rdi
     eff:	e8 00 00 00 00       	callq  f04 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
     f04:	eb 03                	jmp    f09 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
     f06:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
     f09:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f0d:	48 89 c7             	mov    %rax,%rdi
     f10:	e8 00 00 00 00       	callq  f15 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
     f15:	eb 03                	jmp    f1a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
     f17:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
     f1a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     f1e:	48 89 c7             	mov    %rax,%rdi
     f21:	e8 00 00 00 00       	callq  f26 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
     f26:	48 89 d8             	mov    %rbx,%rax
     f29:	48 89 c7             	mov    %rax,%rdi
     f2c:	e8 00 00 00 00       	callq  f31 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
     f31:	e8 00 00 00 00       	callq  f36 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
     f36:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
     f3d:	5b                   	pop    %rbx
     f3e:	5d                   	pop    %rbp
     f3f:	c3                   	retq   

0000000000000f40 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
     f40:	55                   	push   %rbp
     f41:	48 89 e5             	mov    %rsp,%rbp
     f44:	53                   	push   %rbx
     f45:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
     f4c:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
     f53:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
     f5a:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
     f61:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
     f67:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     f6e:	00 00 
     f70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     f74:	31 c0                	xor    %eax,%eax


    QString str = Block;
     f76:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
     f7d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     f84:	48 89 d6             	mov    %rdx,%rsi
     f87:	48 89 c7             	mov    %rax,%rdi
     f8a:	e8 00 00 00 00       	callq  f8f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
     f8f:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     f96:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     f9d:	48 89 d6             	mov    %rdx,%rsi
     fa0:	48 89 c7             	mov    %rax,%rdi
     fa3:	e8 00 00 00 00       	callq  fa8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
     fa8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     faf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # fb6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
     fb6:	48 89 c7             	mov    %rax,%rdi
     fb9:	e8 00 00 00 00       	callq  fbe <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
     fbe:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
     fc5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     fcc:	b9 00 00 00 00       	mov    $0x0,%ecx
     fd1:	ba 01 00 00 00       	mov    $0x1,%edx
     fd6:	48 89 c7             	mov    %rax,%rdi
     fd9:	e8 00 00 00 00       	callq  fde <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
     fde:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     fe5:	48 89 c7             	mov    %rax,%rdi
     fe8:	e8 00 00 00 00       	callq  fed <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
     fed:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     ff4:	be 01 00 00 00       	mov    $0x1,%esi
     ff9:	48 89 c7             	mov    %rax,%rdi
     ffc:	e8 00 00 00 00       	callq  1001 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    1001:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1008:	48 89 c7             	mov    %rax,%rdi
    100b:	e8 00 00 00 00       	callq  1010 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    1010:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1017:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 101e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    101e:	48 89 c7             	mov    %rax,%rdi
    1021:	e8 00 00 00 00       	callq  1026 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    1026:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    102d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1034:	b9 00 00 00 00       	mov    $0x0,%ecx
    1039:	ba 01 00 00 00       	mov    $0x1,%edx
    103e:	48 89 c7             	mov    %rax,%rdi
    1041:	e8 00 00 00 00       	callq  1046 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    1046:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    104d:	48 89 c7             	mov    %rax,%rdi
    1050:	e8 00 00 00 00       	callq  1055 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    1055:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    105c:	48 89 c7             	mov    %rax,%rdi
    105f:	e8 00 00 00 00       	callq  1064 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    1064:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    106b:	48 89 c7             	mov    %rax,%rdi
    106e:	e8 00 00 00 00       	callq  1073 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    1073:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    107a:	48 89 c7             	mov    %rax,%rdi
    107d:	e8 00 00 00 00       	callq  1082 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    1082:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1089:	48 89 c7             	mov    %rax,%rdi
    108c:	e8 00 00 00 00       	callq  1091 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    1091:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    1098:	00 00 00 
    int lineInner = 0;
    109b:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    10a2:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    10a5:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    10ac:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    10b3:	b9 00 00 00 00       	mov    $0x0,%ecx
    10b8:	ba 00 00 00 00       	mov    $0x0,%edx
    10bd:	48 89 c7             	mov    %rax,%rdi
    10c0:	e8 00 00 00 00       	callq  10c5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    10c5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    10cb:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    10d2:	0f 88 35 03 00 00    	js     140d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    10d8:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    10de:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    10e4:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    10e7:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    10ee:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    10f2:	48 89 d6             	mov    %rdx,%rsi
    10f5:	48 89 c7             	mov    %rax,%rdi
    10f8:	e8 00 00 00 00       	callq  10fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    10fd:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    1101:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    1108:	89 da                	mov    %ebx,%edx
    110a:	48 89 ce             	mov    %rcx,%rsi
    110d:	48 89 c7             	mov    %rax,%rdi
    1110:	e8 00 00 00 00       	callq  1115 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    1115:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    111b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    111f:	48 89 c7             	mov    %rax,%rdi
    1122:	e8 00 00 00 00       	callq  1127 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    1127:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    112e:	75 0c                	jne    113c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    1130:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    1136:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    113c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1140:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    1147:	ba 00 00 00 00       	mov    $0x0,%edx
    114c:	48 89 ce             	mov    %rcx,%rsi
    114f:	48 89 c7             	mov    %rax,%rdi
    1152:	e8 00 00 00 00       	callq  1157 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    1157:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    115b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1162:	48 89 d6             	mov    %rdx,%rsi
    1165:	48 89 c7             	mov    %rax,%rdi
    1168:	e8 00 00 00 00       	callq  116d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    116d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1171:	48 89 c7             	mov    %rax,%rdi
    1174:	e8 00 00 00 00       	callq  1179 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    1179:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1180:	48 89 c7             	mov    %rax,%rdi
    1183:	e8 00 00 00 00       	callq  1188 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    1188:	89 c3                	mov    %eax,%ebx
    118a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1191:	48 89 c7             	mov    %rax,%rdi
    1194:	e8 00 00 00 00       	callq  1199 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    1199:	89 da                	mov    %ebx,%edx
    119b:	29 c2                	sub    %eax,%edx
    119d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    11a1:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    11a8:	48 89 ce             	mov    %rcx,%rsi
    11ab:	48 89 c7             	mov    %rax,%rdi
    11ae:	e8 00 00 00 00       	callq  11b3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    11b3:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    11b7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    11be:	48 89 d6             	mov    %rdx,%rsi
    11c1:	48 89 c7             	mov    %rax,%rdi
    11c4:	e8 00 00 00 00       	callq  11c9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    11c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    11cd:	48 89 c7             	mov    %rax,%rdi
    11d0:	e8 00 00 00 00       	callq  11d5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    11d5:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    11dc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    11e3:	b9 00 00 00 00       	mov    $0x0,%ecx
    11e8:	ba 00 00 00 00       	mov    $0x0,%edx
    11ed:	48 89 c7             	mov    %rax,%rdi
    11f0:	e8 00 00 00 00       	callq  11f5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    11f5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    11f9:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    1200:	ba 00 00 00 00       	mov    $0x0,%edx
    1205:	48 89 ce             	mov    %rcx,%rsi
    1208:	48 89 c7             	mov    %rax,%rdi
    120b:	e8 00 00 00 00       	callq  1210 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    1210:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1214:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    121b:	48 89 d6             	mov    %rdx,%rsi
    121e:	48 89 c7             	mov    %rax,%rdi
    1221:	e8 00 00 00 00       	callq  1226 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    1226:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    122a:	48 89 c7             	mov    %rax,%rdi
    122d:	e8 00 00 00 00       	callq  1232 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    1232:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1236:	be 7b 00 00 00       	mov    $0x7b,%esi
    123b:	48 89 c7             	mov    %rax,%rdi
    123e:	e8 00 00 00 00       	callq  1243 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    1243:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    1249:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    124d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1254:	b9 01 00 00 00       	mov    $0x1,%ecx
    1259:	48 89 c7             	mov    %rax,%rdi
    125c:	e8 00 00 00 00       	callq  1261 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    1261:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    1267:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    126d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1274:	89 d6                	mov    %edx,%esi
    1276:	48 89 c7             	mov    %rax,%rdi
    1279:	e8 00 00 00 00       	callq  127e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    127e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1282:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1286:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    128a:	48 89 c7             	mov    %rax,%rdi
    128d:	e8 00 00 00 00       	callq  1292 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    1292:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    1299:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    12a0:	00 00 00 
        int br=0;
    12a3:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    12aa:	00 00 00 

        while(bl != br)
    12ad:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    12b3:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    12b9:	0f 84 a2 00 00 00    	je     1361 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    12bf:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    12c6:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    12cc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    12d3:	89 d6                	mov    %edx,%esi
    12d5:	48 89 c7             	mov    %rax,%rdi
    12d8:	e8 00 00 00 00       	callq  12dd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    12dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    12e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    12e5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    12e9:	48 89 c7             	mov    %rax,%rdi
    12ec:	e8 00 00 00 00       	callq  12f1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    12f1:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    12f8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    12fc:	be 7b 00 00 00       	mov    $0x7b,%esi
    1301:	48 89 c7             	mov    %rax,%rdi
    1304:	e8 00 00 00 00       	callq  1309 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    1309:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    130d:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    1314:	89 d6                	mov    %edx,%esi
    1316:	89 c7                	mov    %eax,%edi
    1318:	e8 00 00 00 00       	callq  131d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    131d:	84 c0                	test   %al,%al
    131f:	74 07                	je     1328 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    1321:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    1328:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    132c:	be 7d 00 00 00       	mov    $0x7d,%esi
    1331:	48 89 c7             	mov    %rax,%rdi
    1334:	e8 00 00 00 00       	callq  1339 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    1339:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    133d:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    1344:	89 d6                	mov    %edx,%esi
    1346:	89 c7                	mov    %eax,%edi
    1348:	e8 00 00 00 00       	callq  134d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    134d:	84 c0                	test   %al,%al
    134f:	0f 84 58 ff ff ff    	je     12ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    1355:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    135c:	e9 4c ff ff ff       	jmpq   12ad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    1361:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    1367:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    136d:	89 c1                	mov    %eax,%ecx
    136f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1373:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    1379:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    1380:	48 89 c7             	mov    %rax,%rdi
    1383:	e8 00 00 00 00       	callq  1388 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    1388:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    138c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1393:	48 89 d6             	mov    %rdx,%rsi
    1396:	48 89 c7             	mov    %rax,%rdi
    1399:	e8 00 00 00 00       	callq  139e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    139e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    13a2:	48 89 c7             	mov    %rax,%rdi
    13a5:	e8 00 00 00 00       	callq  13aa <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    13aa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    13b1:	48 89 c7             	mov    %rax,%rdi
    13b4:	e8 00 00 00 00       	callq  13b9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    13b9:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    13bf:	89 c2                	mov    %eax,%edx
    13c1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    13c5:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    13cc:	48 89 ce             	mov    %rcx,%rsi
    13cf:	48 89 c7             	mov    %rax,%rdi
    13d2:	e8 00 00 00 00       	callq  13d7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    13d7:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    13db:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    13e2:	48 89 d6             	mov    %rdx,%rsi
    13e5:	48 89 c7             	mov    %rax,%rdi
    13e8:	e8 00 00 00 00       	callq  13ed <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    13ed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    13f1:	48 89 c7             	mov    %rax,%rdi
    13f4:	e8 00 00 00 00       	callq  13f9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    13f9:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    13ff:	83 c0 01             	add    $0x1,%eax
    1402:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    1408:	e9 98 fc ff ff       	jmpq   10a5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    140d:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    140e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1415:	48 89 c7             	mov    %rax,%rdi
    1418:	e8 00 00 00 00       	callq  141d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    141d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1424:	48 89 c7             	mov    %rax,%rdi
    1427:	e8 00 00 00 00       	callq  142c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    142c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1433:	48 89 c7             	mov    %rax,%rdi
    1436:	e8 00 00 00 00       	callq  143b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    143b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1442:	48 89 c7             	mov    %rax,%rdi
    1445:	e8 00 00 00 00       	callq  144a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    144a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1451:	48 89 c7             	mov    %rax,%rdi
    1454:	e8 00 00 00 00       	callq  1459 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    1459:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1460:	48 89 c7             	mov    %rax,%rdi
    1463:	e8 00 00 00 00       	callq  1468 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    1468:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    146f:	48 89 c7             	mov    %rax,%rdi
    1472:	e8 00 00 00 00       	callq  1477 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    1477:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    147e:	48 89 c7             	mov    %rax,%rdi
    1481:	e8 00 00 00 00       	callq  1486 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    1486:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    1487:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    148b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1492:	00 00 
    1494:	0f 84 75 01 00 00    	je     160f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    149a:	e9 6b 01 00 00       	jmpq   160a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    149f:	48 89 c3             	mov    %rax,%rbx
    14a2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    14a9:	48 89 c7             	mov    %rax,%rdi
    14ac:	e8 00 00 00 00       	callq  14b1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    14b1:	e9 26 01 00 00       	jmpq   15dc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    14b6:	48 89 c3             	mov    %rax,%rbx
    14b9:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    14c0:	48 89 c7             	mov    %rax,%rdi
    14c3:	e8 00 00 00 00       	callq  14c8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    14c8:	e9 0f 01 00 00       	jmpq   15dc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    14cd:	48 89 c3             	mov    %rax,%rbx
    14d0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    14d7:	48 89 c7             	mov    %rax,%rdi
    14da:	e8 00 00 00 00       	callq  14df <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    14df:	e9 e4 00 00 00       	jmpq   15c8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    14e4:	48 89 c3             	mov    %rax,%rbx
    14e7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14ee:	48 89 c7             	mov    %rax,%rdi
    14f1:	e8 00 00 00 00       	callq  14f6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    14f6:	e9 cd 00 00 00       	jmpq   15c8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    14fb:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    14fe:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1502:	48 89 c7             	mov    %rax,%rdi
    1505:	e8 00 00 00 00       	callq  150a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    150a:	eb 58                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    150c:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    150f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1513:	48 89 c7             	mov    %rax,%rdi
    1516:	e8 00 00 00 00       	callq  151b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    151b:	eb 47                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    151d:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    1520:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1524:	48 89 c7             	mov    %rax,%rdi
    1527:	e8 00 00 00 00       	callq  152c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    152c:	eb 36                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    152e:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    1531:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1535:	48 89 c7             	mov    %rax,%rdi
    1538:	e8 00 00 00 00       	callq  153d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    153d:	eb 25                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    153f:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    1542:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1546:	48 89 c7             	mov    %rax,%rdi
    1549:	e8 00 00 00 00       	callq  154e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    154e:	eb 14                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1550:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    1553:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1557:	48 89 c7             	mov    %rax,%rdi
    155a:	e8 00 00 00 00       	callq  155f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    155f:	eb 03                	jmp    1564 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    1561:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    1564:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    156b:	48 89 c7             	mov    %rax,%rdi
    156e:	e8 00 00 00 00       	callq  1573 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    1573:	eb 03                	jmp    1578 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    1575:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    1578:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    157f:	48 89 c7             	mov    %rax,%rdi
    1582:	e8 00 00 00 00       	callq  1587 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    1587:	eb 03                	jmp    158c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    1589:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    158c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1593:	48 89 c7             	mov    %rax,%rdi
    1596:	e8 00 00 00 00       	callq  159b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    159b:	eb 03                	jmp    15a0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    159d:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    15a0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    15a7:	48 89 c7             	mov    %rax,%rdi
    15aa:	e8 00 00 00 00       	callq  15af <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    15af:	eb 03                	jmp    15b4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    15b1:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    15b4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15bb:	48 89 c7             	mov    %rax,%rdi
    15be:	e8 00 00 00 00       	callq  15c3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    15c3:	eb 03                	jmp    15c8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    15c5:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    15c8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    15cf:	48 89 c7             	mov    %rax,%rdi
    15d2:	e8 00 00 00 00       	callq  15d7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    15d7:	eb 03                	jmp    15dc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    15d9:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    15dc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    15e3:	48 89 c7             	mov    %rax,%rdi
    15e6:	e8 00 00 00 00       	callq  15eb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    15eb:	eb 03                	jmp    15f0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    15ed:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    15f0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    15f7:	48 89 c7             	mov    %rax,%rdi
    15fa:	e8 00 00 00 00       	callq  15ff <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    15ff:	48 89 d8             	mov    %rbx,%rax
    1602:	48 89 c7             	mov    %rax,%rdi
    1605:	e8 00 00 00 00       	callq  160a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    160a:	e8 00 00 00 00       	callq  160f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    160f:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    1616:	5b                   	pop    %rbx
    1617:	5d                   	pop    %rbp
    1618:	c3                   	retq   
    1619:	90                   	nop

000000000000161a <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    161a:	55                   	push   %rbp
    161b:	48 89 e5             	mov    %rsp,%rbp
    161e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1622:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    1626:	90                   	nop
    1627:	5d                   	pop    %rbp
    1628:	c3                   	retq   
    1629:	90                   	nop

000000000000162a <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    162a:	55                   	push   %rbp
    162b:	48 89 e5             	mov    %rsp,%rbp
    162e:	53                   	push   %rbx
    162f:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    1636:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    163d:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    1644:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    164b:	00 00 
    164d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1651:	31 c0                	xor    %eax,%eax
    QString str  = code;
    1653:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    165a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1661:	48 89 d6             	mov    %rdx,%rsi
    1664:	48 89 c7             	mov    %rax,%rdi
    1667:	e8 00 00 00 00       	callq  166c <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    166c:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    1673:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    167a:	48 89 d6             	mov    %rdx,%rsi
    167d:	48 89 c7             	mov    %rax,%rdi
    1680:	e8 00 00 00 00       	callq  1685 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    1685:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    168c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1693 <_ZN6Parser11splitBlocksE7QString+0x69>
    1693:	48 89 c7             	mov    %rax,%rdi
    1696:	e8 00 00 00 00       	callq  169b <_ZN6Parser11splitBlocksE7QString+0x71>
    169b:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    16a2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    16a9:	ba 01 00 00 00       	mov    $0x1,%edx
    16ae:	48 89 ce             	mov    %rcx,%rsi
    16b1:	48 89 c7             	mov    %rax,%rdi
    16b4:	e8 00 00 00 00       	callq  16b9 <_ZN6Parser11splitBlocksE7QString+0x8f>
    16b9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    16bf:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    16c6:	48 89 c7             	mov    %rax,%rdi
    16c9:	e8 00 00 00 00       	callq  16ce <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    16ce:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    16d5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 16dc <_ZN6Parser11splitBlocksE7QString+0xb2>
    16dc:	48 89 c7             	mov    %rax,%rdi
    16df:	e8 00 00 00 00       	callq  16e4 <_ZN6Parser11splitBlocksE7QString+0xba>
    16e4:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    16eb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    16f2:	ba 01 00 00 00       	mov    $0x1,%edx
    16f7:	48 89 ce             	mov    %rcx,%rsi
    16fa:	48 89 c7             	mov    %rax,%rdi
    16fd:	e8 00 00 00 00       	callq  1702 <_ZN6Parser11splitBlocksE7QString+0xd8>
    1702:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    1708:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    170f:	48 89 c7             	mov    %rax,%rdi
    1712:	e8 00 00 00 00       	callq  1717 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    1717:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    171e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1725 <_ZN6Parser11splitBlocksE7QString+0xfb>
    1725:	48 89 c7             	mov    %rax,%rdi
    1728:	e8 00 00 00 00       	callq  172d <_ZN6Parser11splitBlocksE7QString+0x103>
    172d:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    1734:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    173b:	ba 01 00 00 00       	mov    $0x1,%edx
    1740:	48 89 ce             	mov    %rcx,%rsi
    1743:	48 89 c7             	mov    %rax,%rdi
    1746:	e8 00 00 00 00       	callq  174b <_ZN6Parser11splitBlocksE7QString+0x121>
    174b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    1751:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1758:	48 89 c7             	mov    %rax,%rdi
    175b:	e8 00 00 00 00       	callq  1760 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    1760:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1767:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 176e <_ZN6Parser11splitBlocksE7QString+0x144>
    176e:	48 89 c7             	mov    %rax,%rdi
    1771:	e8 00 00 00 00       	callq  1776 <_ZN6Parser11splitBlocksE7QString+0x14c>
    1776:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    177d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1784:	ba 01 00 00 00       	mov    $0x1,%edx
    1789:	48 89 ce             	mov    %rcx,%rsi
    178c:	48 89 c7             	mov    %rax,%rdi
    178f:	e8 00 00 00 00       	callq  1794 <_ZN6Parser11splitBlocksE7QString+0x16a>
    1794:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    179a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    17a1:	48 89 c7             	mov    %rax,%rdi
    17a4:	e8 00 00 00 00       	callq  17a9 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    17a9:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    17af:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    17b5:	74 43                	je     17fa <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    17b7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    17be:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17c5 <_ZN6Parser11splitBlocksE7QString+0x19b>
    17c5:	48 89 c7             	mov    %rax,%rdi
    17c8:	e8 00 00 00 00       	callq  17cd <_ZN6Parser11splitBlocksE7QString+0x1a3>
    17cd:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    17d4:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    17db:	48 89 d6             	mov    %rdx,%rsi
    17de:	48 89 c7             	mov    %rax,%rdi
    17e1:	e8 00 00 00 00       	callq  17e6 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    17e6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    17ed:	48 89 c7             	mov    %rax,%rdi
    17f0:	e8 00 00 00 00       	callq  17f5 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    17f5:	e9 cf 03 00 00       	jmpq   1bc9 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    17fa:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    1800:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    1806:	74 43                	je     184b <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    1808:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    180f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1816 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    1816:	48 89 c7             	mov    %rax,%rdi
    1819:	e8 00 00 00 00       	callq  181e <_ZN6Parser11splitBlocksE7QString+0x1f4>
    181e:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    1825:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    182c:	48 89 d6             	mov    %rdx,%rsi
    182f:	48 89 c7             	mov    %rax,%rdi
    1832:	e8 00 00 00 00       	callq  1837 <_ZN6Parser11splitBlocksE7QString+0x20d>
    1837:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    183e:	48 89 c7             	mov    %rax,%rdi
    1841:	e8 00 00 00 00       	callq  1846 <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    1846:	e9 7e 03 00 00       	jmpq   1bc9 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    184b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1852:	48 89 c7             	mov    %rax,%rdi
    1855:	e8 00 00 00 00       	callq  185a <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    185a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1861:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1868 <_ZN6Parser11splitBlocksE7QString+0x23e>
    1868:	48 89 c7             	mov    %rax,%rdi
    186b:	e8 00 00 00 00       	callq  1870 <_ZN6Parser11splitBlocksE7QString+0x246>
    1870:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    1877:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    187e:	b9 00 00 00 00       	mov    $0x0,%ecx
    1883:	ba 01 00 00 00       	mov    $0x1,%edx
    1888:	48 89 c7             	mov    %rax,%rdi
    188b:	e8 00 00 00 00       	callq  1890 <_ZN6Parser11splitBlocksE7QString+0x266>
    1890:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1897:	48 89 c7             	mov    %rax,%rdi
    189a:	e8 00 00 00 00       	callq  189f <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    189f:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    18a6:	00 00 00 
    QString blockName;
    18a9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    18ad:	48 89 c7             	mov    %rax,%rdi
    18b0:	e8 00 00 00 00       	callq  18b5 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    18b5:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    18bc:	48 89 c7             	mov    %rax,%rdi
    18bf:	e8 00 00 00 00       	callq  18c4 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    18c4:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    18cb:	00 00 00 
    int     line     = 0;
    18ce:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    18d5:	00 00 00 
    QString block;
    18d8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    18dc:	48 89 c7             	mov    %rax,%rdi
    18df:	e8 00 00 00 00       	callq  18e4 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    18e4:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    18eb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    18f2:	b9 00 00 00 00       	mov    $0x0,%ecx
    18f7:	ba 00 00 00 00       	mov    $0x0,%edx
    18fc:	48 89 c7             	mov    %rax,%rdi
    18ff:	e8 00 00 00 00       	callq  1904 <_ZN6Parser11splitBlocksE7QString+0x2da>
    1904:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    190a:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    1911:	0f 88 7b 02 00 00    	js     1b92 <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    1917:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    191d:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    1923:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    1926:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    192d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1931:	48 89 d6             	mov    %rdx,%rsi
    1934:	48 89 c7             	mov    %rax,%rdi
    1937:	e8 00 00 00 00       	callq  193c <_ZN6Parser11splitBlocksE7QString+0x312>
    193c:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    1940:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    1947:	89 da                	mov    %ebx,%edx
    1949:	48 89 ce             	mov    %rcx,%rsi
    194c:	48 89 c7             	mov    %rax,%rdi
    194f:	e8 00 00 00 00       	callq  1954 <_ZN6Parser11splitBlocksE7QString+0x32a>
    1954:	83 c0 01             	add    $0x1,%eax
    1957:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    195d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1961:	48 89 c7             	mov    %rax,%rdi
    1964:	e8 00 00 00 00       	callq  1969 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    1969:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    196d:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    1974:	ba 01 00 00 00       	mov    $0x1,%edx
    1979:	48 89 ce             	mov    %rcx,%rsi
    197c:	48 89 c7             	mov    %rax,%rdi
    197f:	e8 00 00 00 00       	callq  1984 <_ZN6Parser11splitBlocksE7QString+0x35a>
    1984:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1988:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    198c:	48 89 d6             	mov    %rdx,%rsi
    198f:	48 89 c7             	mov    %rax,%rdi
    1992:	e8 00 00 00 00       	callq  1997 <_ZN6Parser11splitBlocksE7QString+0x36d>
    1997:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    199b:	48 89 c7             	mov    %rax,%rdi
    199e:	e8 00 00 00 00       	callq  19a3 <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    19a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    19a7:	be 7b 00 00 00       	mov    $0x7b,%esi
    19ac:	48 89 c7             	mov    %rax,%rdi
    19af:	e8 00 00 00 00       	callq  19b4 <_ZN6Parser11splitBlocksE7QString+0x38a>
    19b4:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    19ba:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    19be:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19c5:	b9 01 00 00 00       	mov    $0x1,%ecx
    19ca:	48 89 c7             	mov    %rax,%rdi
    19cd:	e8 00 00 00 00       	callq  19d2 <_ZN6Parser11splitBlocksE7QString+0x3a8>
    19d2:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    19d8:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    19de:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19e5:	89 d6                	mov    %edx,%esi
    19e7:	48 89 c7             	mov    %rax,%rdi
    19ea:	e8 00 00 00 00       	callq  19ef <_ZN6Parser11splitBlocksE7QString+0x3c5>
    19ef:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    19f3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    19f7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    19fb:	48 89 c7             	mov    %rax,%rdi
    19fe:	e8 00 00 00 00       	callq  1a03 <_ZN6Parser11splitBlocksE7QString+0x3d9>
    1a03:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    1a0a:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    1a11:	00 00 00 
        int br=0;
    1a14:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    1a1b:	00 00 00 

        while(bl != br)
    1a1e:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    1a24:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    1a2a:	0f 84 a2 00 00 00    	je     1ad2 <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    1a30:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    1a37:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    1a3d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1a44:	89 d6                	mov    %edx,%esi
    1a46:	48 89 c7             	mov    %rax,%rdi
    1a49:	e8 00 00 00 00       	callq  1a4e <_ZN6Parser11splitBlocksE7QString+0x424>
    1a4e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1a52:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1a56:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a5a:	48 89 c7             	mov    %rax,%rdi
    1a5d:	e8 00 00 00 00       	callq  1a62 <_ZN6Parser11splitBlocksE7QString+0x438>
    1a62:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    1a69:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a6d:	be 7b 00 00 00       	mov    $0x7b,%esi
    1a72:	48 89 c7             	mov    %rax,%rdi
    1a75:	e8 00 00 00 00       	callq  1a7a <_ZN6Parser11splitBlocksE7QString+0x450>
    1a7a:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1a7e:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    1a85:	89 d6                	mov    %edx,%esi
    1a87:	89 c7                	mov    %eax,%edi
    1a89:	e8 00 00 00 00       	callq  1a8e <_ZN6Parser11splitBlocksE7QString+0x464>
    1a8e:	84 c0                	test   %al,%al
    1a90:	74 07                	je     1a99 <_ZN6Parser11splitBlocksE7QString+0x46f>
    1a92:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    1a99:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a9d:	be 7d 00 00 00       	mov    $0x7d,%esi
    1aa2:	48 89 c7             	mov    %rax,%rdi
    1aa5:	e8 00 00 00 00       	callq  1aaa <_ZN6Parser11splitBlocksE7QString+0x480>
    1aaa:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    1aae:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    1ab5:	89 d6                	mov    %edx,%esi
    1ab7:	89 c7                	mov    %eax,%edi
    1ab9:	e8 00 00 00 00       	callq  1abe <_ZN6Parser11splitBlocksE7QString+0x494>
    1abe:	84 c0                	test   %al,%al
    1ac0:	0f 84 58 ff ff ff    	je     1a1e <_ZN6Parser11splitBlocksE7QString+0x3f4>
    1ac6:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    1acd:	e9 4c ff ff ff       	jmpq   1a1e <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    1ad2:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    1ad8:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    1ade:	89 c1                	mov    %eax,%ecx
    1ae0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1ae4:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    1aea:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    1af1:	48 89 c7             	mov    %rax,%rdi
    1af4:	e8 00 00 00 00       	callq  1af9 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    1af9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1afd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b01:	48 89 d6             	mov    %rdx,%rsi
    1b04:	48 89 c7             	mov    %rax,%rdi
    1b07:	e8 00 00 00 00       	callq  1b0c <_ZN6Parser11splitBlocksE7QString+0x4e2>
    1b0c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1b10:	48 89 c7             	mov    %rax,%rdi
    1b13:	e8 00 00 00 00       	callq  1b18 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    1b18:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1b1f:	48 89 c7             	mov    %rax,%rdi
    1b22:	e8 00 00 00 00       	callq  1b27 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    1b27:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    1b2d:	89 c2                	mov    %eax,%edx
    1b2f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b33:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    1b3a:	48 89 ce             	mov    %rcx,%rsi
    1b3d:	48 89 c7             	mov    %rax,%rdi
    1b40:	e8 00 00 00 00       	callq  1b45 <_ZN6Parser11splitBlocksE7QString+0x51b>
    1b45:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1b49:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1b50:	48 89 d6             	mov    %rdx,%rsi
    1b53:	48 89 c7             	mov    %rax,%rdi
    1b56:	e8 00 00 00 00       	callq  1b5b <_ZN6Parser11splitBlocksE7QString+0x531>
    1b5b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b5f:	48 89 c7             	mov    %rax,%rdi
    1b62:	e8 00 00 00 00       	callq  1b67 <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    1b67:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    1b6d:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    1b73:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    1b7a:	48 8d 50 70          	lea    0x70(%rax),%rdx
    1b7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b82:	48 89 c6             	mov    %rax,%rsi
    1b85:	48 89 d7             	mov    %rdx,%rdi
    1b88:	e8 00 00 00 00       	callq  1b8d <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    1b8d:	e9 52 fd ff ff       	jmpq   18e4 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    1b92:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    1b93:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b97:	48 89 c7             	mov    %rax,%rdi
    1b9a:	e8 00 00 00 00       	callq  1b9f <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    1b9f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ba3:	48 89 c7             	mov    %rax,%rdi
    1ba6:	e8 00 00 00 00       	callq  1bab <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    1bab:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1bb2:	48 89 c7             	mov    %rax,%rdi
    1bb5:	e8 00 00 00 00       	callq  1bba <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    1bba:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1bc1:	48 89 c7             	mov    %rax,%rdi
    1bc4:	e8 00 00 00 00       	callq  1bc9 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    1bc9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1bd0:	48 89 c7             	mov    %rax,%rdi
    1bd3:	e8 00 00 00 00       	callq  1bd8 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    1bd8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1bdf:	48 89 c7             	mov    %rax,%rdi
    1be2:	e8 00 00 00 00       	callq  1be7 <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    1be7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1beb:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1bf2:	00 00 
    1bf4:	0f 84 7e 01 00 00    	je     1d78 <_ZN6Parser11splitBlocksE7QString+0x74e>
    1bfa:	e9 74 01 00 00       	jmpq   1d73 <_ZN6Parser11splitBlocksE7QString+0x749>
    1bff:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    1c02:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1c09:	48 89 c7             	mov    %rax,%rdi
    1c0c:	e8 00 00 00 00       	callq  1c11 <_ZN6Parser11splitBlocksE7QString+0x5e7>
    1c11:	e9 2f 01 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c16:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    1c19:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1c20:	48 89 c7             	mov    %rax,%rdi
    1c23:	e8 00 00 00 00       	callq  1c28 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    1c28:	e9 18 01 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c2d:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    1c30:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1c37:	48 89 c7             	mov    %rax,%rdi
    1c3a:	e8 00 00 00 00       	callq  1c3f <_ZN6Parser11splitBlocksE7QString+0x615>
    1c3f:	e9 01 01 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c44:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    1c47:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1c4e:	48 89 c7             	mov    %rax,%rdi
    1c51:	e8 00 00 00 00       	callq  1c56 <_ZN6Parser11splitBlocksE7QString+0x62c>
    1c56:	e9 ea 00 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c5b:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    1c5e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1c65:	48 89 c7             	mov    %rax,%rdi
    1c68:	e8 00 00 00 00       	callq  1c6d <_ZN6Parser11splitBlocksE7QString+0x643>
    1c6d:	e9 d3 00 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c72:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    1c75:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1c7c:	48 89 c7             	mov    %rax,%rdi
    1c7f:	e8 00 00 00 00       	callq  1c84 <_ZN6Parser11splitBlocksE7QString+0x65a>
    1c84:	e9 bc 00 00 00       	jmpq   1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1c89:	48 89 c3             	mov    %rax,%rbx
    1c8c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1c93:	48 89 c7             	mov    %rax,%rdi
    1c96:	e8 00 00 00 00       	callq  1c9b <_ZN6Parser11splitBlocksE7QString+0x671>
    1c9b:	e9 91 00 00 00       	jmpq   1d31 <_ZN6Parser11splitBlocksE7QString+0x707>
    1ca0:	48 89 c3             	mov    %rax,%rbx
    1ca3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1caa:	48 89 c7             	mov    %rax,%rdi
    1cad:	e8 00 00 00 00       	callq  1cb2 <_ZN6Parser11splitBlocksE7QString+0x688>
    1cb2:	eb 7d                	jmp    1d31 <_ZN6Parser11splitBlocksE7QString+0x707>
    1cb4:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    1cb7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1cbb:	48 89 c7             	mov    %rax,%rdi
    1cbe:	e8 00 00 00 00       	callq  1cc3 <_ZN6Parser11splitBlocksE7QString+0x699>
    1cc3:	eb 36                	jmp    1cfb <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1cc5:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    1cc8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1ccc:	48 89 c7             	mov    %rax,%rdi
    1ccf:	e8 00 00 00 00       	callq  1cd4 <_ZN6Parser11splitBlocksE7QString+0x6aa>
    1cd4:	eb 25                	jmp    1cfb <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1cd6:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    1cd9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1cdd:	48 89 c7             	mov    %rax,%rdi
    1ce0:	e8 00 00 00 00       	callq  1ce5 <_ZN6Parser11splitBlocksE7QString+0x6bb>
    1ce5:	eb 14                	jmp    1cfb <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1ce7:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    1cea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cee:	48 89 c7             	mov    %rax,%rdi
    1cf1:	e8 00 00 00 00       	callq  1cf6 <_ZN6Parser11splitBlocksE7QString+0x6cc>
    1cf6:	eb 03                	jmp    1cfb <_ZN6Parser11splitBlocksE7QString+0x6d1>
    1cf8:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    1cfb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1cff:	48 89 c7             	mov    %rax,%rdi
    1d02:	e8 00 00 00 00       	callq  1d07 <_ZN6Parser11splitBlocksE7QString+0x6dd>
    1d07:	eb 03                	jmp    1d0c <_ZN6Parser11splitBlocksE7QString+0x6e2>
    1d09:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    1d0c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d10:	48 89 c7             	mov    %rax,%rdi
    1d13:	e8 00 00 00 00       	callq  1d18 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    1d18:	eb 03                	jmp    1d1d <_ZN6Parser11splitBlocksE7QString+0x6f3>
    1d1a:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    1d1d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1d24:	48 89 c7             	mov    %rax,%rdi
    1d27:	e8 00 00 00 00       	callq  1d2c <_ZN6Parser11splitBlocksE7QString+0x702>
    1d2c:	eb 03                	jmp    1d31 <_ZN6Parser11splitBlocksE7QString+0x707>
    1d2e:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    1d31:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1d38:	48 89 c7             	mov    %rax,%rdi
    1d3b:	e8 00 00 00 00       	callq  1d40 <_ZN6Parser11splitBlocksE7QString+0x716>
    1d40:	eb 03                	jmp    1d45 <_ZN6Parser11splitBlocksE7QString+0x71b>
    1d42:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    1d45:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1d4c:	48 89 c7             	mov    %rax,%rdi
    1d4f:	e8 00 00 00 00       	callq  1d54 <_ZN6Parser11splitBlocksE7QString+0x72a>
    1d54:	eb 03                	jmp    1d59 <_ZN6Parser11splitBlocksE7QString+0x72f>
    1d56:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    1d59:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1d60:	48 89 c7             	mov    %rax,%rdi
    1d63:	e8 00 00 00 00       	callq  1d68 <_ZN6Parser11splitBlocksE7QString+0x73e>
    1d68:	48 89 d8             	mov    %rbx,%rax
    1d6b:	48 89 c7             	mov    %rax,%rdi
    1d6e:	e8 00 00 00 00       	callq  1d73 <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    1d73:	e8 00 00 00 00       	callq  1d78 <_ZN6Parser11splitBlocksE7QString+0x74e>
    1d78:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    1d7f:	5b                   	pop    %rbx
    1d80:	5d                   	pop    %rbp
    1d81:	c3                   	retq   

0000000000001d82 <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    1d82:	55                   	push   %rbp
    1d83:	48 89 e5             	mov    %rsp,%rbp
    1d86:	53                   	push   %rbx
    1d87:	48 83 ec 48          	sub    $0x48,%rsp
    1d8b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    1d8f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1d96:	00 00 
    1d98:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1d9c:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    1d9e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1da2:	48 89 c7             	mov    %rax,%rdi
    1da5:	e8 00 00 00 00       	callq  1daa <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    1daa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1dae:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1db5 <_ZN6Parser10globalSemsEv+0x33>
    1db5:	48 89 c7             	mov    %rax,%rdi
    1db8:	e8 00 00 00 00       	callq  1dbd <_ZN6Parser10globalSemsEv+0x3b>
    1dbd:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1dc1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    1dc5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1dc9:	48 89 ce             	mov    %rcx,%rsi
    1dcc:	48 89 c7             	mov    %rax,%rdi
    1dcf:	e8 00 00 00 00       	callq  1dd4 <_ZN6Parser10globalSemsEv+0x52>
    1dd4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1dd8:	48 89 c7             	mov    %rax,%rdi
    1ddb:	e8 00 00 00 00       	callq  1de0 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    1de0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1de4:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1de8:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    1dec:	48 89 ce             	mov    %rcx,%rsi
    1def:	48 89 c7             	mov    %rax,%rdi
    1df2:	e8 00 00 00 00       	callq  1df7 <_ZN6Parser10globalSemsEv+0x75>
    1df7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1dfb:	48 89 c7             	mov    %rax,%rdi
    1dfe:	e8 00 00 00 00       	callq  1e03 <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    1e03:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e07:	48 89 c7             	mov    %rax,%rdi
    1e0a:	e8 00 00 00 00       	callq  1e0f <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    1e0f:	90                   	nop
    1e10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1e14:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1e1b:	00 00 
    1e1d:	74 32                	je     1e51 <_ZN6Parser10globalSemsEv+0xcf>
    1e1f:	eb 2b                	jmp    1e4c <_ZN6Parser10globalSemsEv+0xca>
    1e21:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    1e24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1e28:	48 89 c7             	mov    %rax,%rdi
    1e2b:	e8 00 00 00 00       	callq  1e30 <_ZN6Parser10globalSemsEv+0xae>
    1e30:	eb 03                	jmp    1e35 <_ZN6Parser10globalSemsEv+0xb3>
    1e32:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    1e35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e39:	48 89 c7             	mov    %rax,%rdi
    1e3c:	e8 00 00 00 00       	callq  1e41 <_ZN6Parser10globalSemsEv+0xbf>
    1e41:	48 89 d8             	mov    %rbx,%rax
    1e44:	48 89 c7             	mov    %rax,%rdi
    1e47:	e8 00 00 00 00       	callq  1e4c <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    1e4c:	e8 00 00 00 00       	callq  1e51 <_ZN6Parser10globalSemsEv+0xcf>
    1e51:	48 83 c4 48          	add    $0x48,%rsp
    1e55:	5b                   	pop    %rbx
    1e56:	5d                   	pop    %rbp
    1e57:	c3                   	retq   

0000000000001e58 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    1e58:	55                   	push   %rbp
    1e59:	48 89 e5             	mov    %rsp,%rbp
    1e5c:	53                   	push   %rbx
    1e5d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    1e64:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    1e6b:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    1e72:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    1e78:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    1e7f:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    1e86:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e8d:	00 00 
    1e8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1e93:	31 c0                	xor    %eax,%eax
        QByteArray result;
    1e95:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1e9c:	48 89 c7             	mov    %rax,%rdi
    1e9f:	e8 00 00 00 00       	callq  1ea4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    1ea4:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    1eaa:	0f be d0             	movsbl %al,%edx
    1ead:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1eb4:	89 d6                	mov    %edx,%esi
    1eb6:	48 89 c7             	mov    %rax,%rdi
    1eb9:	e8 00 00 00 00       	callq  1ebe <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    1ebe:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1ec5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ecc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    1ecc:	48 89 c7             	mov    %rax,%rdi
    1ecf:	e8 00 00 00 00       	callq  1ed4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    1ed4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1edb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ee2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    1ee2:	48 89 c7             	mov    %rax,%rdi
    1ee5:	e8 00 00 00 00       	callq  1eea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    1eea:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    1ef1:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    1ef8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    1eff:	b9 01 00 00 00       	mov    $0x1,%ecx
    1f04:	48 89 c7             	mov    %rax,%rdi
    1f07:	e8 00 00 00 00       	callq  1f0c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    1f0c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1f13:	48 89 c7             	mov    %rax,%rdi
    1f16:	e8 00 00 00 00       	callq  1f1b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    1f1b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1f22:	48 89 c7             	mov    %rax,%rdi
    1f25:	e8 00 00 00 00       	callq  1f2a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    1f2a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f31:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f38 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    1f38:	48 89 c7             	mov    %rax,%rdi
    1f3b:	e8 00 00 00 00       	callq  1f40 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    1f40:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1f47:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f4e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    1f4e:	48 89 c7             	mov    %rax,%rdi
    1f51:	e8 00 00 00 00       	callq  1f56 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    1f56:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    1f5d:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    1f64:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    1f6b:	b9 01 00 00 00       	mov    $0x1,%ecx
    1f70:	48 89 c7             	mov    %rax,%rdi
    1f73:	e8 00 00 00 00       	callq  1f78 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    1f78:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1f7f:	48 89 c7             	mov    %rax,%rdi
    1f82:	e8 00 00 00 00       	callq  1f87 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    1f87:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f8e:	48 89 c7             	mov    %rax,%rdi
    1f91:	e8 00 00 00 00       	callq  1f96 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    1f96:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f9d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1fa4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    1fa4:	48 89 c7             	mov    %rax,%rdi
    1fa7:	e8 00 00 00 00       	callq  1fac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    1fac:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1fb3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1fba <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    1fba:	48 89 c7             	mov    %rax,%rdi
    1fbd:	e8 00 00 00 00       	callq  1fc2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    1fc2:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1fc9:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    1fd0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    1fd7:	b9 01 00 00 00       	mov    $0x1,%ecx
    1fdc:	48 89 c7             	mov    %rax,%rdi
    1fdf:	e8 00 00 00 00       	callq  1fe4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    1fe4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1feb:	48 89 c7             	mov    %rax,%rdi
    1fee:	e8 00 00 00 00       	callq  1ff3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    1ff3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1ffa:	48 89 c7             	mov    %rax,%rdi
    1ffd:	e8 00 00 00 00       	callq  2002 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    2002:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2006:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 200d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    200d:	48 89 c7             	mov    %rax,%rdi
    2010:	e8 00 00 00 00       	callq  2015 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    2015:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2019:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2020 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    2020:	48 89 c7             	mov    %rax,%rdi
    2023:	e8 00 00 00 00       	callq  2028 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    2028:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    202c:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    2030:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2037:	b9 00 00 00 00       	mov    $0x0,%ecx
    203c:	48 89 c7             	mov    %rax,%rdi
    203f:	e8 00 00 00 00       	callq  2044 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    2044:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2048:	48 89 c7             	mov    %rax,%rdi
    204b:	e8 00 00 00 00       	callq  2050 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    2050:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2054:	48 89 c7             	mov    %rax,%rdi
    2057:	e8 00 00 00 00       	callq  205c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    205c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2060:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2067 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    2067:	48 89 c7             	mov    %rax,%rdi
    206a:	e8 00 00 00 00       	callq  206f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    206f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2073:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 207a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    207a:	48 89 c7             	mov    %rax,%rdi
    207d:	e8 00 00 00 00       	callq  2082 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    2082:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2086:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    208a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    2091:	b9 00 00 00 00       	mov    $0x0,%ecx
    2096:	48 89 c7             	mov    %rax,%rdi
    2099:	e8 00 00 00 00       	callq  209e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    209e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    20a2:	48 89 c7             	mov    %rax,%rdi
    20a5:	e8 00 00 00 00       	callq  20aa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    20aa:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20ae:	48 89 c7             	mov    %rax,%rdi
    20b1:	e8 00 00 00 00       	callq  20b6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    20b6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    20ba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20c1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    20c1:	48 89 c7             	mov    %rax,%rdi
    20c4:	e8 00 00 00 00       	callq  20c9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    20c9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20cd:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    20d1:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    20d8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    20de:	b9 00 00 00 00       	mov    $0x0,%ecx
    20e3:	48 89 c7             	mov    %rax,%rdi
    20e6:	e8 00 00 00 00       	callq  20eb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    20eb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    20ef:	48 89 c7             	mov    %rax,%rdi
    20f2:	e8 00 00 00 00       	callq  20f7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    20f7:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    20fe:	00 00 00 
    2101:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2105:	48 89 c7             	mov    %rax,%rdi
    2108:	e8 00 00 00 00       	callq  210d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    210d:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    2113:	0f 9f c0             	setg   %al
    2116:	84 c0                	test   %al,%al
    2118:	74 6e                	je     2188 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    211a:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    2120:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2124:	89 d6                	mov    %edx,%esi
    2126:	48 89 c7             	mov    %rax,%rdi
    2129:	e8 00 00 00 00       	callq  212e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    212e:	48 89 c7             	mov    %rax,%rdi
    2131:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2135:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    213b:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    2142:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    2149:	41 89 c8             	mov    %ecx,%r8d
    214c:	48 89 d1             	mov    %rdx,%rcx
    214f:	48 89 fa             	mov    %rdi,%rdx
    2152:	48 89 c7             	mov    %rax,%rdi
    2155:	e8 00 00 00 00       	callq  215a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    215a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    215e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2165:	48 89 d6             	mov    %rdx,%rsi
    2168:	48 89 c7             	mov    %rax,%rdi
    216b:	e8 00 00 00 00       	callq  2170 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    2170:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2174:	48 89 c7             	mov    %rax,%rdi
    2177:	e8 00 00 00 00       	callq  217c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    217c:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    2183:	e9 79 ff ff ff       	jmpq   2101 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    2188:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    218f:	48 89 c7             	mov    %rax,%rdi
    2192:	e8 00 00 00 00       	callq  2197 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    2197:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    219d:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    21a4:	00 00 00 
    21a7:	b8 1f 00 00 00       	mov    $0x1f,%eax
    21ac:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    21b2:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    21b8:	7e 1d                	jle    21d7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    21ba:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    21c1:	be 00 00 00 00       	mov    $0x0,%esi
    21c6:	48 89 c7             	mov    %rax,%rdi
    21c9:	e8 00 00 00 00       	callq  21ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    21ce:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    21d5:	eb d0                	jmp    21a7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    21d7:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    21dd:	0f be d0             	movsbl %al,%edx
    21e0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    21e7:	89 d6                	mov    %edx,%esi
    21e9:	48 89 c7             	mov    %rax,%rdi
    21ec:	e8 00 00 00 00       	callq  21f1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    21f1:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    21f8:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
    21ff:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2206:	48 89 c6             	mov    %rax,%rsi
    2209:	48 89 d7             	mov    %rdx,%rdi
    220c:	e8 00 00 00 00       	callq  2211 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    2211:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2215:	48 89 c7             	mov    %rax,%rdi
    2218:	e8 00 00 00 00       	callq  221d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    221d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2224:	48 89 c7             	mov    %rax,%rdi
    2227:	e8 00 00 00 00       	callq  222c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    222c:	90                   	nop
    222d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2231:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2238:	00 00 
    223a:	0f 84 30 01 00 00    	je     2370 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    2240:	e9 26 01 00 00       	jmpq   236b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    2245:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    2248:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    224f:	48 89 c7             	mov    %rax,%rdi
    2252:	e8 00 00 00 00       	callq  2257 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    2257:	eb 03                	jmp    225c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    2259:	48 89 c3             	mov    %rax,%rbx
    225c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2263:	48 89 c7             	mov    %rax,%rdi
    2266:	e8 00 00 00 00       	callq  226b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    226b:	e9 e1 00 00 00       	jmpq   2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    2270:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    2273:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    227a:	48 89 c7             	mov    %rax,%rdi
    227d:	e8 00 00 00 00       	callq  2282 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    2282:	eb 03                	jmp    2287 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    2284:	48 89 c3             	mov    %rax,%rbx
    2287:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    228e:	48 89 c7             	mov    %rax,%rdi
    2291:	e8 00 00 00 00       	callq  2296 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    2296:	e9 b6 00 00 00       	jmpq   2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    229b:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    229e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    22a5:	48 89 c7             	mov    %rax,%rdi
    22a8:	e8 00 00 00 00       	callq  22ad <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    22ad:	eb 03                	jmp    22b2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    22af:	48 89 c3             	mov    %rax,%rbx
    22b2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    22b9:	48 89 c7             	mov    %rax,%rdi
    22bc:	e8 00 00 00 00       	callq  22c1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    22c1:	e9 8b 00 00 00       	jmpq   2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    22c6:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    22c9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    22cd:	48 89 c7             	mov    %rax,%rdi
    22d0:	e8 00 00 00 00       	callq  22d5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    22d5:	eb 03                	jmp    22da <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    22d7:	48 89 c3             	mov    %rax,%rbx
    22da:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    22de:	48 89 c7             	mov    %rax,%rdi
    22e1:	e8 00 00 00 00       	callq  22e6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    22e6:	eb 69                	jmp    2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    22e8:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    22eb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    22ef:	48 89 c7             	mov    %rax,%rdi
    22f2:	e8 00 00 00 00       	callq  22f7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    22f7:	eb 03                	jmp    22fc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    22f9:	48 89 c3             	mov    %rax,%rbx
    22fc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2300:	48 89 c7             	mov    %rax,%rdi
    2303:	e8 00 00 00 00       	callq  2308 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    2308:	eb 47                	jmp    2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    230a:	48 89 c3             	mov    %rax,%rbx
    230d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2311:	48 89 c7             	mov    %rax,%rdi
    2314:	e8 00 00 00 00       	callq  2319 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    2319:	eb 36                	jmp    2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    231b:	48 89 c3             	mov    %rax,%rbx
    231e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2322:	48 89 c7             	mov    %rax,%rdi
    2325:	e8 00 00 00 00       	callq  232a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    232a:	eb 25                	jmp    2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    232c:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    232f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2333:	48 89 c7             	mov    %rax,%rdi
    2336:	e8 00 00 00 00       	callq  233b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    233b:	eb 03                	jmp    2340 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    233d:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    2340:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2344:	48 89 c7             	mov    %rax,%rdi
    2347:	e8 00 00 00 00       	callq  234c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    234c:	eb 03                	jmp    2351 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    234e:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    2351:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2358:	48 89 c7             	mov    %rax,%rdi
    235b:	e8 00 00 00 00       	callq  2360 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    2360:	48 89 d8             	mov    %rbx,%rax
    2363:	48 89 c7             	mov    %rax,%rdi
    2366:	e8 00 00 00 00       	callq  236b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    236b:	e8 00 00 00 00       	callq  2370 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    2370:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    2377:	5b                   	pop    %rbx
    2378:	5d                   	pop    %rbp
    2379:	c3                   	retq   

000000000000237a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    237a:	55                   	push   %rbp
    237b:	48 89 e5             	mov    %rsp,%rbp
    237e:	53                   	push   %rbx
    237f:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    2386:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    238d:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    2394:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    239b:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    23a2:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    23a9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    23b0:	00 00 
    23b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    23b6:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    23b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23bc:	be 20 00 00 00       	mov    $0x20,%esi
    23c1:	48 89 c7             	mov    %rax,%rdi
    23c4:	e8 00 00 00 00       	callq  23c9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    23c9:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    23cd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    23d4:	b9 01 00 00 00       	mov    $0x1,%ecx
    23d9:	ba 00 00 00 00       	mov    $0x0,%edx
    23de:	48 89 c7             	mov    %rax,%rdi
    23e1:	e8 00 00 00 00       	callq  23e6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    23e6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    23ec:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    23f3:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    23f9:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    2400:	89 d1                	mov    %edx,%ecx
    2402:	ba 00 00 00 00       	mov    $0x0,%edx
    2407:	48 89 c7             	mov    %rax,%rdi
    240a:	e8 00 00 00 00       	callq  240f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    240f:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    2416:	00 00 00 

    i = text.indexOf('(', lastPosition);
    2419:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    241d:	be 28 00 00 00       	mov    $0x28,%esi
    2422:	48 89 c7             	mov    %rax,%rdi
    2425:	e8 00 00 00 00       	callq  242a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    242a:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2430:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    2434:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    243b:	b9 01 00 00 00       	mov    $0x1,%ecx
    2440:	48 89 c7             	mov    %rax,%rdi
    2443:	e8 00 00 00 00       	callq  2448 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    2448:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    244e:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    2454:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    245a:	89 c1                	mov    %eax,%ecx
    245c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2460:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    2466:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    246d:	48 89 c7             	mov    %rax,%rdi
    2470:	e8 00 00 00 00       	callq  2475 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    2475:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2479:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    247d:	48 89 d6             	mov    %rdx,%rsi
    2480:	48 89 c7             	mov    %rax,%rdi
    2483:	e8 00 00 00 00       	callq  2488 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    2488:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    248c:	48 89 c7             	mov    %rax,%rdi
    248f:	e8 00 00 00 00       	callq  2494 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    2494:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    249a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    24a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    24a4:	be 29 00 00 00       	mov    $0x29,%esi
    24a9:	48 89 c7             	mov    %rax,%rdi
    24ac:	e8 00 00 00 00       	callq  24b1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    24b1:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    24b7:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    24bb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    24c2:	b9 01 00 00 00       	mov    $0x1,%ecx
    24c7:	48 89 c7             	mov    %rax,%rdi
    24ca:	e8 00 00 00 00       	callq  24cf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    24cf:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    24d5:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    24db:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    24e1:	8d 48 ff             	lea    -0x1(%rax),%ecx
    24e4:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    24ea:	8d 50 01             	lea    0x1(%rax),%edx
    24ed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    24f1:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    24f8:	48 89 c7             	mov    %rax,%rdi
    24fb:	e8 00 00 00 00       	callq  2500 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    2500:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2504:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 250b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    250b:	48 89 c7             	mov    %rax,%rdi
    250e:	e8 00 00 00 00       	callq  2513 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    2513:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2517:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    251b:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    251f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    2525:	b9 01 00 00 00       	mov    $0x1,%ecx
    252a:	48 89 c7             	mov    %rax,%rdi
    252d:	e8 00 00 00 00       	callq  2532 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    2532:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2536:	48 89 c7             	mov    %rax,%rdi
    2539:	e8 00 00 00 00       	callq  253e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    253e:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2542:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2546:	48 89 d6             	mov    %rdx,%rsi
    2549:	48 89 c7             	mov    %rax,%rdi
    254c:	e8 00 00 00 00       	callq  2551 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    2551:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2555:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2559:	48 89 d6             	mov    %rdx,%rsi
    255c:	48 89 c7             	mov    %rax,%rdi
    255f:	e8 00 00 00 00       	callq  2564 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    2564:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    256b:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    2572:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    2579:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    257d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2581:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    2588:	45 89 c1             	mov    %r8d,%r9d
    258b:	49 89 f8             	mov    %rdi,%r8
    258e:	48 89 c7             	mov    %rax,%rdi
    2591:	e8 00 00 00 00       	callq  2596 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    2596:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    259a:	48 89 c7             	mov    %rax,%rdi
    259d:	e8 00 00 00 00       	callq  25a2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    25a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    25a6:	48 89 c7             	mov    %rax,%rdi
    25a9:	e8 00 00 00 00       	callq  25ae <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    25ae:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    25af:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25b3:	48 89 c7             	mov    %rax,%rdi
    25b6:	e8 00 00 00 00       	callq  25bb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    25bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25bf:	48 89 c7             	mov    %rax,%rdi
    25c2:	e8 00 00 00 00       	callq  25c7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    25c7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    25cb:	48 89 c7             	mov    %rax,%rdi
    25ce:	e8 00 00 00 00       	callq  25d3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    25d3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    25da:	48 89 c7             	mov    %rax,%rdi
    25dd:	e8 00 00 00 00       	callq  25e2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    25e2:	90                   	nop
}
    25e3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    25ea:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    25ee:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    25f5:	00 00 
    25f7:	0f 84 ee 00 00 00    	je     26eb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    25fd:	e9 e4 00 00 00       	jmpq   26e6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    2602:	48 89 c3             	mov    %rax,%rbx
    2605:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2609:	48 89 c7             	mov    %rax,%rdi
    260c:	e8 00 00 00 00       	callq  2611 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    2611:	e9 b6 00 00 00       	jmpq   26cc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    2616:	48 89 c3             	mov    %rax,%rbx
    2619:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    261d:	48 89 c7             	mov    %rax,%rdi
    2620:	e8 00 00 00 00       	callq  2625 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    2625:	e9 a2 00 00 00       	jmpq   26cc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    262a:	48 89 c3             	mov    %rax,%rbx
    262d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2631:	48 89 c7             	mov    %rax,%rdi
    2634:	e8 00 00 00 00       	callq  2639 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    2639:	eb 6f                	jmp    26aa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    263b:	48 89 c3             	mov    %rax,%rbx
    263e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2642:	48 89 c7             	mov    %rax,%rdi
    2645:	e8 00 00 00 00       	callq  264a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    264a:	eb 5e                	jmp    26aa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    264c:	48 89 c3             	mov    %rax,%rbx
    264f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2653:	48 89 c7             	mov    %rax,%rdi
    2656:	e8 00 00 00 00       	callq  265b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    265b:	eb 17                	jmp    2674 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    265d:	48 89 c3             	mov    %rax,%rbx
    2660:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    2667:	48 89 c7             	mov    %rax,%rdi
    266a:	e8 00 00 00 00       	callq  266f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    266f:	eb 03                	jmp    2674 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    2671:	48 89 c3             	mov    %rax,%rbx
    2674:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2678:	48 89 c7             	mov    %rax,%rdi
    267b:	e8 00 00 00 00       	callq  2680 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    2680:	eb 17                	jmp    2699 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    2682:	48 89 c3             	mov    %rax,%rbx
    2685:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    268c:	48 89 c7             	mov    %rax,%rdi
    268f:	e8 00 00 00 00       	callq  2694 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    2694:	eb 03                	jmp    2699 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    2696:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    2699:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    269d:	48 89 c7             	mov    %rax,%rdi
    26a0:	e8 00 00 00 00       	callq  26a5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    26a5:	eb 03                	jmp    26aa <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    26a7:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    26aa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    26ae:	48 89 c7             	mov    %rax,%rdi
    26b1:	e8 00 00 00 00       	callq  26b6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    26b6:	eb 03                	jmp    26bb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    26b8:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    26bb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    26bf:	48 89 c7             	mov    %rax,%rdi
    26c2:	e8 00 00 00 00       	callq  26c7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    26c7:	eb 03                	jmp    26cc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    26c9:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    26cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    26d3:	48 89 c7             	mov    %rax,%rdi
    26d6:	e8 00 00 00 00       	callq  26db <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    26db:	48 89 d8             	mov    %rbx,%rax
    26de:	48 89 c7             	mov    %rax,%rdi
    26e1:	e8 00 00 00 00       	callq  26e6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    26e6:	e8 00 00 00 00       	callq  26eb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    26eb:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    26f2:	5b                   	pop    %rbx
    26f3:	5d                   	pop    %rbp
    26f4:	c3                   	retq   
    26f5:	90                   	nop

00000000000026f6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    26f6:	55                   	push   %rbp
    26f7:	48 89 e5             	mov    %rsp,%rbp
    26fa:	53                   	push   %rbx
    26fb:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    2702:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    2709:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    2710:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    2717:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    271e:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    2725:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    272c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2733:	00 00 
    2735:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2739:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    273b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2742:	48 89 c7             	mov    %rax,%rdi
    2745:	e8 00 00 00 00       	callq  274a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    274a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2751:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    2757:	ba 0a 00 00 00       	mov    $0xa,%edx
    275c:	89 ce                	mov    %ecx,%esi
    275e:	48 89 c7             	mov    %rax,%rdi
    2761:	e8 00 00 00 00       	callq  2766 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    2766:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    276d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2774:	48 89 d6             	mov    %rdx,%rsi
    2777:	48 89 c7             	mov    %rax,%rdi
    277a:	e8 00 00 00 00       	callq  277f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    277f:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    2786:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    278d:	48 89 d6             	mov    %rdx,%rsi
    2790:	48 89 c7             	mov    %rax,%rdi
    2793:	e8 00 00 00 00       	callq  2798 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    2798:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    279f:	48 89 c7             	mov    %rax,%rdi
    27a2:	e8 00 00 00 00       	callq  27a7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    27a7:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    27ae:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    27b5:	48 89 d6             	mov    %rdx,%rsi
    27b8:	48 89 c7             	mov    %rax,%rdi
    27bb:	e8 00 00 00 00       	callq  27c0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    27c0:	83 f0 01             	xor    $0x1,%eax
    27c3:	84 c0                	test   %al,%al
    27c5:	0f 84 b5 00 00 00    	je     2880 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    27cb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    27d2:	48 89 c7             	mov    %rax,%rdi
    27d5:	e8 00 00 00 00       	callq  27da <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    27da:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    27e0:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    27e7:	0f 8e c0 00 00 00    	jle    28ad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    27ed:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    27f4:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    27fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2802 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    2802:	48 89 c7             	mov    %rax,%rdi
    2805:	e8 00 00 00 00       	callq  280a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    280a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    280e:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    2815:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 281c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    281c:	48 89 ce             	mov    %rcx,%rsi
    281f:	48 89 c7             	mov    %rax,%rdi
    2822:	e8 00 00 00 00       	callq  2827 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    2827:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    282b:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    2832:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    2836:	48 89 ce             	mov    %rcx,%rsi
    2839:	48 89 c7             	mov    %rax,%rdi
    283c:	e8 00 00 00 00       	callq  2841 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    2841:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2845:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    284c:	48 89 d6             	mov    %rdx,%rsi
    284f:	48 89 c7             	mov    %rax,%rdi
    2852:	e8 00 00 00 00       	callq  2857 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    2857:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    285b:	48 89 c7             	mov    %rax,%rdi
    285e:	e8 00 00 00 00       	callq  2863 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    2863:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2867:	48 89 c7             	mov    %rax,%rdi
    286a:	e8 00 00 00 00       	callq  286f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    286f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2876:	48 89 c7             	mov    %rax,%rdi
    2879:	e8 00 00 00 00       	callq  287e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    287e:	eb 2d                	jmp    28ad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    2880:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2887:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    288e:	48 89 d6             	mov    %rdx,%rsi
    2891:	48 89 c7             	mov    %rax,%rdi
    2894:	e8 00 00 00 00       	callq  2899 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    2899:	0f be d0             	movsbl %al,%edx
    289c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    28a3:	89 d6                	mov    %edx,%esi
    28a5:	48 89 c7             	mov    %rax,%rdi
    28a8:	e8 00 00 00 00       	callq  28ad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    28ad:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    28b4:	00 00 00 
    28b7:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    28be:	48 89 c7             	mov    %rax,%rdi
    28c1:	e8 00 00 00 00       	callq  28c6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    28c6:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    28cc:	0f 9f c0             	setg   %al
    28cf:	84 c0                	test   %al,%al
    28d1:	0f 84 e2 02 00 00    	je     2bb9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    28d7:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    28de:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    28e4:	89 d6                	mov    %edx,%esi
    28e6:	48 89 c7             	mov    %rax,%rdi
    28e9:	e8 00 00 00 00       	callq  28ee <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    28ee:	48 89 c2             	mov    %rax,%rdx
    28f1:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    28f8:	48 89 d6             	mov    %rdx,%rsi
    28fb:	48 89 c7             	mov    %rax,%rdi
    28fe:	e8 00 00 00 00       	callq  2903 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    2903:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    290a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2911 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    2911:	48 89 c7             	mov    %rax,%rdi
    2914:	e8 00 00 00 00       	callq  2919 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    2919:	84 c0                	test   %al,%al
    291b:	74 19                	je     2936 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    291d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2924:	be 19 00 00 00       	mov    $0x19,%esi
    2929:	48 89 c7             	mov    %rax,%rdi
    292c:	e8 00 00 00 00       	callq  2931 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    2931:	e9 68 02 00 00       	jmpq   2b9e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    2936:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    293d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2941:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2948 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    2948:	48 89 c7             	mov    %rax,%rdi
    294b:	e8 00 00 00 00       	callq  2950 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    2950:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    2954:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    295b:	b9 01 00 00 00       	mov    $0x1,%ecx
    2960:	ba 00 00 00 00       	mov    $0x0,%edx
    2965:	48 89 c7             	mov    %rax,%rdi
    2968:	e8 00 00 00 00       	callq  296d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    296d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    2973:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2977:	48 89 c7             	mov    %rax,%rdi
    297a:	e8 00 00 00 00       	callq  297f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    297f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2983:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    2989:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    2990:	48 89 ce             	mov    %rcx,%rsi
    2993:	48 89 c7             	mov    %rax,%rdi
    2996:	e8 00 00 00 00       	callq  299b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    299b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    299f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    29a3:	48 89 d6             	mov    %rdx,%rsi
    29a6:	48 89 c7             	mov    %rax,%rdi
    29a9:	e8 00 00 00 00       	callq  29ae <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    29ae:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    29b2:	48 89 c7             	mov    %rax,%rdi
    29b5:	e8 00 00 00 00       	callq  29ba <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    29ba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    29c1:	48 89 c7             	mov    %rax,%rdi
    29c4:	e8 00 00 00 00       	callq  29c9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    29c9:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    29cf:	8d 50 ff             	lea    -0x1(%rax),%edx
    29d2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    29d6:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    29dd:	48 89 ce             	mov    %rcx,%rsi
    29e0:	48 89 c7             	mov    %rax,%rdi
    29e3:	e8 00 00 00 00       	callq  29e8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    29e8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    29ec:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    29f0:	48 89 d6             	mov    %rdx,%rsi
    29f3:	48 89 c7             	mov    %rax,%rdi
    29f6:	e8 00 00 00 00       	callq  29fb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    29fb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    29ff:	48 89 c7             	mov    %rax,%rdi
    2a02:	e8 00 00 00 00       	callq  2a07 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    2a07:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2a0b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a12 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    2a12:	48 89 c7             	mov    %rax,%rdi
    2a15:	e8 00 00 00 00       	callq  2a1a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    2a1a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a1e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a25 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    2a25:	48 89 c7             	mov    %rax,%rdi
    2a28:	e8 00 00 00 00       	callq  2a2d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    2a2d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2a31:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2a38:	48 89 d6             	mov    %rdx,%rsi
    2a3b:	48 89 c7             	mov    %rax,%rdi
    2a3e:	e8 00 00 00 00       	callq  2a43 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    2a43:	83 f0 01             	xor    $0x1,%eax
    2a46:	84 c0                	test   %al,%al
    2a48:	74 38                	je     2a82 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    2a4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a4e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2a52:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2a59 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    2a59:	48 89 c7             	mov    %rax,%rdi
    2a5c:	e8 00 00 00 00       	callq  2a61 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    2a61:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a65:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2a69:	48 89 d6             	mov    %rdx,%rsi
    2a6c:	48 89 c7             	mov    %rax,%rdi
    2a6f:	e8 00 00 00 00       	callq  2a74 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    2a74:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a78:	48 89 c7             	mov    %rax,%rdi
    2a7b:	e8 00 00 00 00       	callq  2a80 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    2a80:	eb 74                	jmp    2af6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    2a82:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2a86:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2a8d:	48 89 d6             	mov    %rdx,%rsi
    2a90:	48 89 c7             	mov    %rax,%rdi
    2a93:	e8 00 00 00 00       	callq  2a98 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    2a98:	0f be d0             	movsbl %al,%edx
    2a9b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2aa2:	89 d6                	mov    %edx,%esi
    2aa4:	48 89 c7             	mov    %rax,%rdi
    2aa7:	e8 00 00 00 00       	callq  2aac <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    2aac:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    2ab0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2ab7:	48 89 d6             	mov    %rdx,%rsi
    2aba:	48 89 c7             	mov    %rax,%rdi
    2abd:	e8 00 00 00 00       	callq  2ac2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    2ac2:	89 c1                	mov    %eax,%ecx
    2ac4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2ac8:	ba 0a 00 00 00       	mov    $0xa,%edx
    2acd:	89 ce                	mov    %ecx,%esi
    2acf:	48 89 c7             	mov    %rax,%rdi
    2ad2:	e8 00 00 00 00       	callq  2ad7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    2ad7:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2adb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2adf:	48 89 d6             	mov    %rdx,%rsi
    2ae2:	48 89 c7             	mov    %rax,%rdi
    2ae5:	e8 00 00 00 00       	callq  2aea <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    2aea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2aee:	48 89 c7             	mov    %rax,%rdi
    2af1:	e8 00 00 00 00       	callq  2af6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    2af6:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2afa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2b01:	48 89 d6             	mov    %rdx,%rsi
    2b04:	48 89 c7             	mov    %rax,%rdi
    2b07:	e8 00 00 00 00       	callq  2b0c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    2b0c:	83 f0 01             	xor    $0x1,%eax
    2b0f:	84 c0                	test   %al,%al
    2b11:	74 31                	je     2b44 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    2b13:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    2b1a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2b1e:	ba 0a 00 00 00       	mov    $0xa,%edx
    2b23:	48 89 ce             	mov    %rcx,%rsi
    2b26:	48 89 c7             	mov    %rax,%rdi
    2b29:	e8 00 00 00 00       	callq  2b2e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    2b2e:	0f be d0             	movsbl %al,%edx
    2b31:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2b38:	89 d6                	mov    %edx,%esi
    2b3a:	48 89 c7             	mov    %rax,%rdi
    2b3d:	e8 00 00 00 00       	callq  2b42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    2b42:	eb 2a                	jmp    2b6e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    2b44:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    2b48:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    2b4f:	48 89 d6             	mov    %rdx,%rsi
    2b52:	48 89 c7             	mov    %rax,%rdi
    2b55:	e8 00 00 00 00       	callq  2b5a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    2b5a:	0f be d0             	movsbl %al,%edx
    2b5d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2b64:	89 d6                	mov    %edx,%esi
    2b66:	48 89 c7             	mov    %rax,%rdi
    2b69:	e8 00 00 00 00       	callq  2b6e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    2b6e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b72:	48 89 c7             	mov    %rax,%rdi
    2b75:	e8 00 00 00 00       	callq  2b7a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    2b7a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2b7e:	48 89 c7             	mov    %rax,%rdi
    2b81:	e8 00 00 00 00       	callq  2b86 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    2b86:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2b8a:	48 89 c7             	mov    %rax,%rdi
    2b8d:	e8 00 00 00 00       	callq  2b92 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    2b92:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2b96:	48 89 c7             	mov    %rax,%rdi
    2b99:	e8 00 00 00 00       	callq  2b9e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    2b9e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ba5:	48 89 c7             	mov    %rax,%rdi
    2ba8:	e8 00 00 00 00       	callq  2bad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    2bad:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    2bb4:	e9 fe fc ff ff       	jmpq   28b7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    2bb9:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    2bba:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2bc1:	48 89 c7             	mov    %rax,%rdi
    2bc4:	e8 00 00 00 00       	callq  2bc9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    2bc9:	e9 59 01 00 00       	jmpq   2d27 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    2bce:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    2bd1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2bd8:	48 89 c7             	mov    %rax,%rdi
    2bdb:	e8 00 00 00 00       	callq  2be0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    2be0:	e9 14 01 00 00       	jmpq   2cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2be5:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    2be8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2bec:	48 89 c7             	mov    %rax,%rdi
    2bef:	e8 00 00 00 00       	callq  2bf4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    2bf4:	eb 03                	jmp    2bf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    2bf6:	48 89 c3             	mov    %rax,%rbx
    2bf9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2bfd:	48 89 c7             	mov    %rax,%rdi
    2c00:	e8 00 00 00 00       	callq  2c05 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    2c05:	eb 03                	jmp    2c0a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    2c07:	48 89 c3             	mov    %rax,%rbx
    2c0a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c11:	48 89 c7             	mov    %rax,%rdi
    2c14:	e8 00 00 00 00       	callq  2c19 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    2c19:	e9 db 00 00 00       	jmpq   2cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2c1e:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    2c21:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2c25:	48 89 c7             	mov    %rax,%rdi
    2c28:	e8 00 00 00 00       	callq  2c2d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    2c2d:	e9 b3 00 00 00       	jmpq   2ce5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2c32:	48 89 c3             	mov    %rax,%rbx
    2c35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2c39:	48 89 c7             	mov    %rax,%rdi
    2c3c:	e8 00 00 00 00       	callq  2c41 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    2c41:	e9 9f 00 00 00       	jmpq   2ce5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2c46:	48 89 c3             	mov    %rax,%rbx
    2c49:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2c4d:	48 89 c7             	mov    %rax,%rdi
    2c50:	e8 00 00 00 00       	callq  2c55 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    2c55:	e9 8b 00 00 00       	jmpq   2ce5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2c5a:	48 89 c3             	mov    %rax,%rbx
    2c5d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2c61:	48 89 c7             	mov    %rax,%rdi
    2c64:	e8 00 00 00 00       	callq  2c69 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    2c69:	eb 69                	jmp    2cd4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2c6b:	48 89 c3             	mov    %rax,%rbx
    2c6e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2c72:	48 89 c7             	mov    %rax,%rdi
    2c75:	e8 00 00 00 00       	callq  2c7a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    2c7a:	eb 58                	jmp    2cd4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2c7c:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    2c7f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2c83:	48 89 c7             	mov    %rax,%rdi
    2c86:	e8 00 00 00 00       	callq  2c8b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    2c8b:	eb 14                	jmp    2ca1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    2c8d:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    2c90:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2c94:	48 89 c7             	mov    %rax,%rdi
    2c97:	e8 00 00 00 00       	callq  2c9c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    2c9c:	eb 03                	jmp    2ca1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    2c9e:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    2ca1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2ca5:	48 89 c7             	mov    %rax,%rdi
    2ca8:	e8 00 00 00 00       	callq  2cad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    2cad:	eb 03                	jmp    2cb2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    2caf:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    2cb2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2cb6:	48 89 c7             	mov    %rax,%rdi
    2cb9:	e8 00 00 00 00       	callq  2cbe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    2cbe:	eb 03                	jmp    2cc3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    2cc0:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    2cc3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2cc7:	48 89 c7             	mov    %rax,%rdi
    2cca:	e8 00 00 00 00       	callq  2ccf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    2ccf:	eb 03                	jmp    2cd4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    2cd1:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    2cd4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2cd8:	48 89 c7             	mov    %rax,%rdi
    2cdb:	e8 00 00 00 00       	callq  2ce0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    2ce0:	eb 03                	jmp    2ce5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    2ce2:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    2ce5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2cec:	48 89 c7             	mov    %rax,%rdi
    2cef:	e8 00 00 00 00       	callq  2cf4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    2cf4:	eb 03                	jmp    2cf9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    2cf6:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    2cf9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2d00:	48 89 c7             	mov    %rax,%rdi
    2d03:	e8 00 00 00 00       	callq  2d08 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    2d08:	eb 03                	jmp    2d0d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    2d0a:	48 89 c3             	mov    %rax,%rbx
    2d0d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2d14:	48 89 c7             	mov    %rax,%rdi
    2d17:	e8 00 00 00 00       	callq  2d1c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    2d1c:	48 89 d8             	mov    %rbx,%rax
    2d1f:	48 89 c7             	mov    %rax,%rdi
    2d22:	e8 00 00 00 00       	callq  2d27 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    2d27:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2d2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2d32:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2d39:	00 00 
    2d3b:	74 05                	je     2d42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    2d3d:	e8 00 00 00 00       	callq  2d42 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    2d42:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    2d49:	5b                   	pop    %rbx
    2d4a:	5d                   	pop    %rbp
    2d4b:	c3                   	retq   

0000000000002d4c <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    2d4c:	55                   	push   %rbp
    2d4d:	48 89 e5             	mov    %rsp,%rbp
    2d50:	53                   	push   %rbx
    2d51:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    2d58:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    2d5f:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    2d66:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    2d6d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2d74:	00 00 
    2d76:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2d7a:	31 c0                	xor    %eax,%eax
    QByteArray result;
    2d7c:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    2d83:	48 89 c7             	mov    %rax,%rdi
    2d86:	e8 00 00 00 00       	callq  2d8b <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    2d8b:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    2d92:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d99 <_ZN6Parser11compileAtomE7QString+0x4d>
    2d99:	48 89 c7             	mov    %rax,%rdi
    2d9c:	e8 00 00 00 00       	callq  2da1 <_ZN6Parser11compileAtomE7QString+0x55>
    2da1:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    2da8:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    2daf:	b9 00 00 00 00       	mov    $0x0,%ecx
    2db4:	ba 01 00 00 00       	mov    $0x1,%edx
    2db9:	48 89 c7             	mov    %rax,%rdi
    2dbc:	e8 00 00 00 00       	callq  2dc1 <_ZN6Parser11compileAtomE7QString+0x75>
    2dc1:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    2dc8:	48 89 c7             	mov    %rax,%rdi
    2dcb:	e8 00 00 00 00       	callq  2dd0 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    2dd0:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    2dd7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dde <_ZN6Parser11compileAtomE7QString+0x92>
    2dde:	48 89 c7             	mov    %rax,%rdi
    2de1:	e8 00 00 00 00       	callq  2de6 <_ZN6Parser11compileAtomE7QString+0x9a>
    2de6:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    2ded:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    2df4:	b9 00 00 00 00       	mov    $0x0,%ecx
    2df9:	ba 01 00 00 00       	mov    $0x1,%edx
    2dfe:	48 89 c7             	mov    %rax,%rdi
    2e01:	e8 00 00 00 00       	callq  2e06 <_ZN6Parser11compileAtomE7QString+0xba>
    2e06:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    2e0d:	48 89 c7             	mov    %rax,%rdi
    2e10:	e8 00 00 00 00       	callq  2e15 <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    2e15:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2e1c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e23 <_ZN6Parser11compileAtomE7QString+0xd7>
    2e23:	48 89 c7             	mov    %rax,%rdi
    2e26:	e8 00 00 00 00       	callq  2e2b <_ZN6Parser11compileAtomE7QString+0xdf>
    2e2b:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    2e32:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    2e39:	b9 00 00 00 00       	mov    $0x0,%ecx
    2e3e:	ba 01 00 00 00       	mov    $0x1,%edx
    2e43:	48 89 c7             	mov    %rax,%rdi
    2e46:	e8 00 00 00 00       	callq  2e4b <_ZN6Parser11compileAtomE7QString+0xff>
    2e4b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2e52:	48 89 c7             	mov    %rax,%rdi
    2e55:	e8 00 00 00 00       	callq  2e5a <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    2e5a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2e5e:	48 89 c7             	mov    %rax,%rdi
    2e61:	e8 00 00 00 00       	callq  2e66 <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    2e66:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    2e6d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2e71:	48 89 d6             	mov    %rdx,%rsi
    2e74:	48 89 c7             	mov    %rax,%rdi
    2e77:	e8 00 00 00 00       	callq  2e7c <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    2e7c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    2e83:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2e87:	48 89 d6             	mov    %rdx,%rsi
    2e8a:	48 89 c7             	mov    %rax,%rdi
    2e8d:	e8 00 00 00 00       	callq  2e92 <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    2e92:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e99:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ea0 <_ZN6Parser11compileAtomE7QString+0x154>
    2ea0:	48 89 c7             	mov    %rax,%rdi
    2ea3:	e8 00 00 00 00       	callq  2ea8 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    2ea8:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    2eaf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2eb6:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ebb:	ba 01 00 00 00       	mov    $0x1,%edx
    2ec0:	48 89 c7             	mov    %rax,%rdi
    2ec3:	e8 00 00 00 00       	callq  2ec8 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    2ec8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2ecf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ed6 <_ZN6Parser11compileAtomE7QString+0x18a>
    2ed6:	48 89 c7             	mov    %rax,%rdi
    2ed9:	e8 00 00 00 00       	callq  2ede <_ZN6Parser11compileAtomE7QString+0x192>
    2ede:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    2ee5:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2eec:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ef1:	ba 01 00 00 00       	mov    $0x1,%edx
    2ef6:	48 89 c7             	mov    %rax,%rdi
    2ef9:	e8 00 00 00 00       	callq  2efe <_ZN6Parser11compileAtomE7QString+0x1b2>
    2efe:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2f05:	48 89 c7             	mov    %rax,%rdi
    2f08:	e8 00 00 00 00       	callq  2f0d <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    2f0d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2f14:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f1b <_ZN6Parser11compileAtomE7QString+0x1cf>
    2f1b:	48 89 c7             	mov    %rax,%rdi
    2f1e:	e8 00 00 00 00       	callq  2f23 <_ZN6Parser11compileAtomE7QString+0x1d7>
    2f23:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    2f2a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2f31:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f36:	ba 01 00 00 00       	mov    $0x1,%edx
    2f3b:	48 89 c7             	mov    %rax,%rdi
    2f3e:	e8 00 00 00 00       	callq  2f43 <_ZN6Parser11compileAtomE7QString+0x1f7>
    2f43:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2f4a:	48 89 c7             	mov    %rax,%rdi
    2f4d:	e8 00 00 00 00       	callq  2f52 <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    2f52:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2f59:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f60 <_ZN6Parser11compileAtomE7QString+0x214>
    2f60:	48 89 c7             	mov    %rax,%rdi
    2f63:	e8 00 00 00 00       	callq  2f68 <_ZN6Parser11compileAtomE7QString+0x21c>
    2f68:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2f6f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2f76:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f7b:	ba 01 00 00 00       	mov    $0x1,%edx
    2f80:	48 89 c7             	mov    %rax,%rdi
    2f83:	e8 00 00 00 00       	callq  2f88 <_ZN6Parser11compileAtomE7QString+0x23c>
    2f88:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2f8f:	48 89 c7             	mov    %rax,%rdi
    2f92:	e8 00 00 00 00       	callq  2f97 <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    2f97:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f9e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2fa5 <_ZN6Parser11compileAtomE7QString+0x259>
    2fa5:	48 89 c7             	mov    %rax,%rdi
    2fa8:	e8 00 00 00 00       	callq  2fad <_ZN6Parser11compileAtomE7QString+0x261>
    2fad:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    2fb4:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2fbb:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fc0:	ba 01 00 00 00       	mov    $0x1,%edx
    2fc5:	48 89 c7             	mov    %rax,%rdi
    2fc8:	e8 00 00 00 00       	callq  2fcd <_ZN6Parser11compileAtomE7QString+0x281>
    2fcd:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2fd4:	48 89 c7             	mov    %rax,%rdi
    2fd7:	e8 00 00 00 00       	callq  2fdc <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    2fdc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2fe0:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2fe7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2fee <_ZN6Parser11compileAtomE7QString+0x2a2>
    2fee:	48 89 c7             	mov    %rax,%rdi
    2ff1:	e8 00 00 00 00       	callq  2ff6 <_ZN6Parser11compileAtomE7QString+0x2aa>
    2ff6:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    2ffa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3001:	b9 00 00 00 00       	mov    $0x0,%ecx
    3006:	ba 01 00 00 00       	mov    $0x1,%edx
    300b:	48 89 c7             	mov    %rax,%rdi
    300e:	e8 00 00 00 00       	callq  3013 <_ZN6Parser11compileAtomE7QString+0x2c7>
    3013:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3017:	48 89 c7             	mov    %rax,%rdi
    301a:	e8 00 00 00 00       	callq  301f <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    301f:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    3026:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    302a:	b9 00 00 00 00       	mov    $0x0,%ecx
    302f:	ba 01 00 00 00       	mov    $0x1,%edx
    3034:	48 89 c7             	mov    %rax,%rdi
    3037:	e8 00 00 00 00       	callq  303c <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    303c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3040:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3047 <_ZN6Parser11compileAtomE7QString+0x2fb>
    3047:	48 89 c7             	mov    %rax,%rdi
    304a:	e8 00 00 00 00       	callq  304f <_ZN6Parser11compileAtomE7QString+0x303>
    304f:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3053:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3057:	b9 00 00 00 00       	mov    $0x0,%ecx
    305c:	ba 01 00 00 00       	mov    $0x1,%edx
    3061:	48 89 c7             	mov    %rax,%rdi
    3064:	e8 00 00 00 00       	callq  3069 <_ZN6Parser11compileAtomE7QString+0x31d>
    3069:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    306d:	48 89 c7             	mov    %rax,%rdi
    3070:	e8 00 00 00 00       	callq  3075 <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    3075:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    3076:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    307a:	48 89 c7             	mov    %rax,%rdi
    307d:	e8 00 00 00 00       	callq  3082 <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    3082:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3086:	48 89 c7             	mov    %rax,%rdi
    3089:	e8 00 00 00 00       	callq  308e <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    308e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3095:	48 89 c7             	mov    %rax,%rdi
    3098:	e8 00 00 00 00       	callq  309d <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    309d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    30a4:	48 89 c7             	mov    %rax,%rdi
    30a7:	e8 00 00 00 00       	callq  30ac <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    30ac:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    30b3:	48 89 c7             	mov    %rax,%rdi
    30b6:	e8 00 00 00 00       	callq  30bb <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    30bb:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    30c2:	48 89 c7             	mov    %rax,%rdi
    30c5:	e8 00 00 00 00       	callq  30ca <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    30ca:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    30d1:	48 89 c7             	mov    %rax,%rdi
    30d4:	e8 00 00 00 00       	callq  30d9 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    30d9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    30e0:	48 89 c7             	mov    %rax,%rdi
    30e3:	e8 00 00 00 00       	callq  30e8 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    30e8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30ef:	48 89 c7             	mov    %rax,%rdi
    30f2:	e8 00 00 00 00       	callq  30f7 <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    30f7:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    30fe:	48 89 c7             	mov    %rax,%rdi
    3101:	e8 00 00 00 00       	callq  3106 <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    3106:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    310d:	48 89 c7             	mov    %rax,%rdi
    3110:	e8 00 00 00 00       	callq  3115 <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    3115:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3119:	48 89 c7             	mov    %rax,%rdi
    311c:	e8 00 00 00 00       	callq  3121 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    3121:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3128:	48 89 c7             	mov    %rax,%rdi
    312b:	e8 00 00 00 00       	callq  3130 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    3130:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    3137:	48 89 c7             	mov    %rax,%rdi
    313a:	e8 00 00 00 00       	callq  313f <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    313f:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    3146:	48 89 c7             	mov    %rax,%rdi
    3149:	e8 00 00 00 00       	callq  314e <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    314e:	e9 b8 02 00 00       	jmpq   340b <_ZN6Parser11compileAtomE7QString+0x6bf>
    3153:	48 89 c3             	mov    %rax,%rbx
    3156:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    315d:	48 89 c7             	mov    %rax,%rdi
    3160:	e8 00 00 00 00       	callq  3165 <_ZN6Parser11compileAtomE7QString+0x419>
    3165:	e9 87 02 00 00       	jmpq   33f1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    316a:	48 89 c3             	mov    %rax,%rbx
    316d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    3174:	48 89 c7             	mov    %rax,%rdi
    3177:	e8 00 00 00 00       	callq  317c <_ZN6Parser11compileAtomE7QString+0x430>
    317c:	e9 70 02 00 00       	jmpq   33f1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    3181:	48 89 c3             	mov    %rax,%rbx
    3184:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    318b:	48 89 c7             	mov    %rax,%rdi
    318e:	e8 00 00 00 00       	callq  3193 <_ZN6Parser11compileAtomE7QString+0x447>
    3193:	e9 45 02 00 00       	jmpq   33dd <_ZN6Parser11compileAtomE7QString+0x691>
    3198:	48 89 c3             	mov    %rax,%rbx
    319b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    31a2:	48 89 c7             	mov    %rax,%rdi
    31a5:	e8 00 00 00 00       	callq  31aa <_ZN6Parser11compileAtomE7QString+0x45e>
    31aa:	e9 2e 02 00 00       	jmpq   33dd <_ZN6Parser11compileAtomE7QString+0x691>
    31af:	48 89 c3             	mov    %rax,%rbx
    31b2:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    31b9:	48 89 c7             	mov    %rax,%rdi
    31bc:	e8 00 00 00 00       	callq  31c1 <_ZN6Parser11compileAtomE7QString+0x475>
    31c1:	e9 03 02 00 00       	jmpq   33c9 <_ZN6Parser11compileAtomE7QString+0x67d>
    31c6:	48 89 c3             	mov    %rax,%rbx
    31c9:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    31d0:	48 89 c7             	mov    %rax,%rdi
    31d3:	e8 00 00 00 00       	callq  31d8 <_ZN6Parser11compileAtomE7QString+0x48c>
    31d8:	e9 ec 01 00 00       	jmpq   33c9 <_ZN6Parser11compileAtomE7QString+0x67d>
    31dd:	48 89 c3             	mov    %rax,%rbx
    31e0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    31e7:	48 89 c7             	mov    %rax,%rdi
    31ea:	e8 00 00 00 00       	callq  31ef <_ZN6Parser11compileAtomE7QString+0x4a3>
    31ef:	e9 60 01 00 00       	jmpq   3354 <_ZN6Parser11compileAtomE7QString+0x608>
    31f4:	48 89 c3             	mov    %rax,%rbx
    31f7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    31fe:	48 89 c7             	mov    %rax,%rdi
    3201:	e8 00 00 00 00       	callq  3206 <_ZN6Parser11compileAtomE7QString+0x4ba>
    3206:	e9 49 01 00 00       	jmpq   3354 <_ZN6Parser11compileAtomE7QString+0x608>
    320b:	48 89 c3             	mov    %rax,%rbx
    320e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3215:	48 89 c7             	mov    %rax,%rdi
    3218:	e8 00 00 00 00       	callq  321d <_ZN6Parser11compileAtomE7QString+0x4d1>
    321d:	e9 1e 01 00 00       	jmpq   3340 <_ZN6Parser11compileAtomE7QString+0x5f4>
    3222:	48 89 c3             	mov    %rax,%rbx
    3225:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    322c:	48 89 c7             	mov    %rax,%rdi
    322f:	e8 00 00 00 00       	callq  3234 <_ZN6Parser11compileAtomE7QString+0x4e8>
    3234:	e9 07 01 00 00       	jmpq   3340 <_ZN6Parser11compileAtomE7QString+0x5f4>
    3239:	48 89 c3             	mov    %rax,%rbx
    323c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3243:	48 89 c7             	mov    %rax,%rdi
    3246:	e8 00 00 00 00       	callq  324b <_ZN6Parser11compileAtomE7QString+0x4ff>
    324b:	e9 dc 00 00 00       	jmpq   332c <_ZN6Parser11compileAtomE7QString+0x5e0>
    3250:	48 89 c3             	mov    %rax,%rbx
    3253:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    325a:	48 89 c7             	mov    %rax,%rdi
    325d:	e8 00 00 00 00       	callq  3262 <_ZN6Parser11compileAtomE7QString+0x516>
    3262:	e9 c5 00 00 00       	jmpq   332c <_ZN6Parser11compileAtomE7QString+0x5e0>
    3267:	48 89 c3             	mov    %rax,%rbx
    326a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3271:	48 89 c7             	mov    %rax,%rdi
    3274:	e8 00 00 00 00       	callq  3279 <_ZN6Parser11compileAtomE7QString+0x52d>
    3279:	e9 9a 00 00 00       	jmpq   3318 <_ZN6Parser11compileAtomE7QString+0x5cc>
    327e:	48 89 c3             	mov    %rax,%rbx
    3281:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3288:	48 89 c7             	mov    %rax,%rdi
    328b:	e8 00 00 00 00       	callq  3290 <_ZN6Parser11compileAtomE7QString+0x544>
    3290:	e9 83 00 00 00       	jmpq   3318 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3295:	48 89 c3             	mov    %rax,%rbx
    3298:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    329c:	48 89 c7             	mov    %rax,%rdi
    329f:	e8 00 00 00 00       	callq  32a4 <_ZN6Parser11compileAtomE7QString+0x558>
    32a4:	eb 5e                	jmp    3304 <_ZN6Parser11compileAtomE7QString+0x5b8>
    32a6:	48 89 c3             	mov    %rax,%rbx
    32a9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    32b0:	48 89 c7             	mov    %rax,%rdi
    32b3:	e8 00 00 00 00       	callq  32b8 <_ZN6Parser11compileAtomE7QString+0x56c>
    32b8:	eb 4a                	jmp    3304 <_ZN6Parser11compileAtomE7QString+0x5b8>
    32ba:	48 89 c3             	mov    %rax,%rbx
    32bd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    32c1:	48 89 c7             	mov    %rax,%rdi
    32c4:	e8 00 00 00 00       	callq  32c9 <_ZN6Parser11compileAtomE7QString+0x57d>
    32c9:	eb 14                	jmp    32df <_ZN6Parser11compileAtomE7QString+0x593>
    32cb:	48 89 c3             	mov    %rax,%rbx
    32ce:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    32d2:	48 89 c7             	mov    %rax,%rdi
    32d5:	e8 00 00 00 00       	callq  32da <_ZN6Parser11compileAtomE7QString+0x58e>
    32da:	eb 03                	jmp    32df <_ZN6Parser11compileAtomE7QString+0x593>
    32dc:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    32df:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    32e3:	48 89 c7             	mov    %rax,%rdi
    32e6:	e8 00 00 00 00       	callq  32eb <_ZN6Parser11compileAtomE7QString+0x59f>
    32eb:	eb 03                	jmp    32f0 <_ZN6Parser11compileAtomE7QString+0x5a4>
    32ed:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    32f0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    32f7:	48 89 c7             	mov    %rax,%rdi
    32fa:	e8 00 00 00 00       	callq  32ff <_ZN6Parser11compileAtomE7QString+0x5b3>
    32ff:	eb 03                	jmp    3304 <_ZN6Parser11compileAtomE7QString+0x5b8>
    3301:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    3304:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    330b:	48 89 c7             	mov    %rax,%rdi
    330e:	e8 00 00 00 00       	callq  3313 <_ZN6Parser11compileAtomE7QString+0x5c7>
    3313:	eb 03                	jmp    3318 <_ZN6Parser11compileAtomE7QString+0x5cc>
    3315:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    3318:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    331f:	48 89 c7             	mov    %rax,%rdi
    3322:	e8 00 00 00 00       	callq  3327 <_ZN6Parser11compileAtomE7QString+0x5db>
    3327:	eb 03                	jmp    332c <_ZN6Parser11compileAtomE7QString+0x5e0>
    3329:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    332c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3333:	48 89 c7             	mov    %rax,%rdi
    3336:	e8 00 00 00 00       	callq  333b <_ZN6Parser11compileAtomE7QString+0x5ef>
    333b:	eb 03                	jmp    3340 <_ZN6Parser11compileAtomE7QString+0x5f4>
    333d:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    3340:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3347:	48 89 c7             	mov    %rax,%rdi
    334a:	e8 00 00 00 00       	callq  334f <_ZN6Parser11compileAtomE7QString+0x603>
    334f:	eb 03                	jmp    3354 <_ZN6Parser11compileAtomE7QString+0x608>
    3351:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    3354:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    335b:	48 89 c7             	mov    %rax,%rdi
    335e:	e8 00 00 00 00       	callq  3363 <_ZN6Parser11compileAtomE7QString+0x617>
    3363:	eb 03                	jmp    3368 <_ZN6Parser11compileAtomE7QString+0x61c>
    3365:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    3368:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    336f:	48 89 c7             	mov    %rax,%rdi
    3372:	e8 00 00 00 00       	callq  3377 <_ZN6Parser11compileAtomE7QString+0x62b>
    3377:	eb 03                	jmp    337c <_ZN6Parser11compileAtomE7QString+0x630>
    3379:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    337c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3383:	48 89 c7             	mov    %rax,%rdi
    3386:	e8 00 00 00 00       	callq  338b <_ZN6Parser11compileAtomE7QString+0x63f>
    338b:	eb 03                	jmp    3390 <_ZN6Parser11compileAtomE7QString+0x644>
    338d:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    3390:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3397:	48 89 c7             	mov    %rax,%rdi
    339a:	e8 00 00 00 00       	callq  339f <_ZN6Parser11compileAtomE7QString+0x653>
    339f:	eb 03                	jmp    33a4 <_ZN6Parser11compileAtomE7QString+0x658>
    33a1:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    33a4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    33a8:	48 89 c7             	mov    %rax,%rdi
    33ab:	e8 00 00 00 00       	callq  33b0 <_ZN6Parser11compileAtomE7QString+0x664>
    33b0:	eb 03                	jmp    33b5 <_ZN6Parser11compileAtomE7QString+0x669>
    33b2:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    33b5:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    33bc:	48 89 c7             	mov    %rax,%rdi
    33bf:	e8 00 00 00 00       	callq  33c4 <_ZN6Parser11compileAtomE7QString+0x678>
    33c4:	eb 03                	jmp    33c9 <_ZN6Parser11compileAtomE7QString+0x67d>
    33c6:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    33c9:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    33d0:	48 89 c7             	mov    %rax,%rdi
    33d3:	e8 00 00 00 00       	callq  33d8 <_ZN6Parser11compileAtomE7QString+0x68c>
    33d8:	eb 03                	jmp    33dd <_ZN6Parser11compileAtomE7QString+0x691>
    33da:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    33dd:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    33e4:	48 89 c7             	mov    %rax,%rdi
    33e7:	e8 00 00 00 00       	callq  33ec <_ZN6Parser11compileAtomE7QString+0x6a0>
    33ec:	eb 03                	jmp    33f1 <_ZN6Parser11compileAtomE7QString+0x6a5>
    33ee:	48 89 c3             	mov    %rax,%rbx
    33f1:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    33f8:	48 89 c7             	mov    %rax,%rdi
    33fb:	e8 00 00 00 00       	callq  3400 <_ZN6Parser11compileAtomE7QString+0x6b4>
    3400:	48 89 d8             	mov    %rbx,%rax
    3403:	48 89 c7             	mov    %rax,%rdi
    3406:	e8 00 00 00 00       	callq  340b <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    340b:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    3412:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3416:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    341d:	00 00 
    341f:	74 05                	je     3426 <_ZN6Parser11compileAtomE7QString+0x6da>
    3421:	e8 00 00 00 00       	callq  3426 <_ZN6Parser11compileAtomE7QString+0x6da>
    3426:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    342d:	5b                   	pop    %rbx
    342e:	5d                   	pop    %rbp
    342f:	c3                   	retq   

0000000000003430 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    3430:	55                   	push   %rbp
    3431:	48 89 e5             	mov    %rsp,%rbp
    3434:	53                   	push   %rbx
    3435:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    343c:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    3443:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    344a:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    3451:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3458:	00 00 
    345a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    345e:	31 c0                	xor    %eax,%eax
    QByteArray result;
    3460:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3464:	48 89 c7             	mov    %rax,%rdi
    3467:	e8 00 00 00 00       	callq  346c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    346c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3473:	48 89 c7             	mov    %rax,%rdi
    3476:	e8 00 00 00 00       	callq  347b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    347b:	85 c0                	test   %eax,%eax
    347d:	0f 9e c0             	setle  %al
    3480:	84 c0                	test   %al,%al
    3482:	74 0a                	je     348e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    3484:	bb 00 00 00 00       	mov    $0x0,%ebx
    3489:	e9 27 01 00 00       	jmpq   35b5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    348e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3492:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3499 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    3499:	48 89 c7             	mov    %rax,%rdi
    349c:	e8 00 00 00 00       	callq  34a1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    34a1:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    34a5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    34a9:	b9 00 00 00 00       	mov    $0x0,%ecx
    34ae:	ba 00 00 00 00       	mov    $0x0,%edx
    34b3:	48 89 c7             	mov    %rax,%rdi
    34b6:	e8 00 00 00 00       	callq  34bb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    34bb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    34bf:	48 89 c7             	mov    %rax,%rdi
    34c2:	e8 00 00 00 00       	callq  34c7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    34c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    34cb:	be 00 00 00 00       	mov    $0x0,%esi
    34d0:	48 89 c7             	mov    %rax,%rdi
    34d3:	e8 00 00 00 00       	callq  34d8 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    34d8:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    34df:	8b 55 8c             	mov    -0x74(%rbp),%edx
    34e2:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    34e9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    34ed:	b9 00 00 00 00       	mov    $0x0,%ecx
    34f2:	48 89 c7             	mov    %rax,%rdi
    34f5:	e8 00 00 00 00       	callq  34fa <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    34fa:	89 45 8c             	mov    %eax,-0x74(%rbp)
    34fd:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    3501:	0f 95 c0             	setne  %al
    3504:	84 c0                	test   %al,%al
    3506:	0f 84 98 00 00 00    	je     35a4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    350c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3510:	48 89 c7             	mov    %rax,%rdi
    3513:	e8 00 00 00 00       	callq  3518 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    3518:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    351b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    351f:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    3523:	ba 00 00 00 00       	mov    $0x0,%edx
    3528:	48 89 ce             	mov    %rcx,%rsi
    352b:	48 89 c7             	mov    %rax,%rdi
    352e:	e8 00 00 00 00       	callq  3533 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    3533:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3537:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    353e:	48 89 d6             	mov    %rdx,%rsi
    3541:	48 89 c7             	mov    %rax,%rdi
    3544:	e8 00 00 00 00       	callq  3549 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    3549:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    354d:	48 89 c7             	mov    %rax,%rdi
    3550:	e8 00 00 00 00       	callq  3555 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    3555:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3559:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    355d:	ba 00 00 00 00       	mov    $0x0,%edx
    3562:	48 89 ce             	mov    %rcx,%rsi
    3565:	48 89 c7             	mov    %rax,%rdi
    3568:	e8 00 00 00 00       	callq  356d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    356d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3571:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3575:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    357c:	48 89 ce             	mov    %rcx,%rsi
    357f:	48 89 c7             	mov    %rax,%rdi
    3582:	e8 00 00 00 00       	callq  3587 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    3587:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    358b:	48 89 c7             	mov    %rax,%rdi
    358e:	e8 00 00 00 00       	callq  3593 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    3593:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3597:	48 89 c7             	mov    %rax,%rdi
    359a:	e8 00 00 00 00       	callq  359f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    359f:	e9 3b ff ff ff       	jmpq   34df <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    35a4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    35a8:	48 89 c7             	mov    %rax,%rdi
    35ab:	e8 00 00 00 00       	callq  35b0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    35b0:	bb 01 00 00 00       	mov    $0x1,%ebx
    35b5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    35b9:	48 89 c7             	mov    %rax,%rdi
    35bc:	e8 00 00 00 00       	callq  35c1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    35c1:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    35c4:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    35c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    35c9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    35d0:	00 00 
    35d2:	74 76                	je     364a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    35d4:	eb 6f                	jmp    3645 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    35d6:	48 89 c3             	mov    %rax,%rbx
    35d9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    35dd:	48 89 c7             	mov    %rax,%rdi
    35e0:	e8 00 00 00 00       	callq  35e5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    35e5:	eb 47                	jmp    362e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    35e7:	48 89 c3             	mov    %rax,%rbx
    35ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    35ee:	48 89 c7             	mov    %rax,%rdi
    35f1:	e8 00 00 00 00       	callq  35f6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    35f6:	eb 36                	jmp    362e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    35f8:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    35fb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    35ff:	48 89 c7             	mov    %rax,%rdi
    3602:	e8 00 00 00 00       	callq  3607 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    3607:	eb 14                	jmp    361d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    3609:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    360c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3610:	48 89 c7             	mov    %rax,%rdi
    3613:	e8 00 00 00 00       	callq  3618 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    3618:	eb 03                	jmp    361d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    361a:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    361d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3621:	48 89 c7             	mov    %rax,%rdi
    3624:	e8 00 00 00 00       	callq  3629 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    3629:	eb 03                	jmp    362e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    362b:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    362e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3632:	48 89 c7             	mov    %rax,%rdi
    3635:	e8 00 00 00 00       	callq  363a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    363a:	48 89 d8             	mov    %rbx,%rax
    363d:	48 89 c7             	mov    %rax,%rdi
    3640:	e8 00 00 00 00       	callq  3645 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    3645:	e8 00 00 00 00       	callq  364a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    364a:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    3651:	5b                   	pop    %rbx
    3652:	5d                   	pop    %rbp
    3653:	c3                   	retq   

0000000000003654 <_Z12compileBlockR11QStringList>:

QByteArray  compileBlock(QStringList &block){
    3654:	55                   	push   %rbp
    3655:	48 89 e5             	mov    %rsp,%rbp
    3658:	48 83 ec 20          	sub    $0x20,%rsp
    365c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3660:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3664:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    366b:	00 00 
    366d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3671:	31 c0                	xor    %eax,%eax
    QByteArray result;
    3673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3677:	48 89 c7             	mov    %rax,%rdi
    367a:	e8 00 00 00 00       	callq  367f <_Z12compileBlockR11QStringList+0x2b>

    return result;
    367f:	90                   	nop
}
    3680:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3684:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3688:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    368f:	00 00 
    3691:	74 05                	je     3698 <_Z12compileBlockR11QStringList+0x44>
    3693:	e8 00 00 00 00       	callq  3698 <_Z12compileBlockR11QStringList+0x44>
    3698:	c9                   	leaveq 
    3699:	c3                   	retq   

000000000000369a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    369a:	55                   	push   %rbp
    369b:	48 89 e5             	mov    %rsp,%rbp
    369e:	53                   	push   %rbx
    369f:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    36a6:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    36ad:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    36b4:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    36bb:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    36c2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    36c9:	00 00 
    36cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    36cf:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    36d1:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    36d8:	48 89 c7             	mov    %rax,%rdi
    36db:	e8 00 00 00 00       	callq  36e0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    36e0:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    36e7:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    36ee:	b9 00 00 00 00       	mov    $0x0,%ecx
    36f3:	ba 01 00 00 00       	mov    $0x1,%edx
    36f8:	48 89 c7             	mov    %rax,%rdi
    36fb:	e8 00 00 00 00       	callq  3700 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    3700:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    3707:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    370e:	48 89 d6             	mov    %rdx,%rsi
    3711:	48 89 c7             	mov    %rax,%rdi
    3714:	e8 00 00 00 00       	callq  3719 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    3719:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    3720:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3727:	48 89 d6             	mov    %rdx,%rsi
    372a:	48 89 c7             	mov    %rax,%rdi
    372d:	e8 00 00 00 00       	callq  3732 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    3732:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3739:	48 89 c7             	mov    %rax,%rdi
    373c:	e8 00 00 00 00       	callq  3741 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    3741:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3748:	48 89 c7             	mov    %rax,%rdi
    374b:	e8 00 00 00 00       	callq  3750 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    3750:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3757:	48 89 c7             	mov    %rax,%rdi
    375a:	e8 00 00 00 00       	callq  375f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    375f:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    3766:	48 89 c7             	mov    %rax,%rdi
    3769:	e8 00 00 00 00       	callq  376e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    376e:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    3775:	00 00 00 
    int     lineBase = 0;
    3778:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    377f:	00 00 00 
    int     line     = 0;
    3782:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    3789:	00 00 00 

    unsigned int BFL = str.count("{");
    378c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3793:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 379a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    379a:	48 89 c7             	mov    %rax,%rdi
    379d:	e8 00 00 00 00       	callq  37a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    37a2:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    37a9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    37b0:	ba 01 00 00 00       	mov    $0x1,%edx
    37b5:	48 89 ce             	mov    %rcx,%rsi
    37b8:	48 89 c7             	mov    %rax,%rdi
    37bb:	e8 00 00 00 00       	callq  37c0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    37c0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    37c6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    37cd:	48 89 c7             	mov    %rax,%rdi
    37d0:	e8 00 00 00 00       	callq  37d5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    37d5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    37dc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    37e3:	48 89 c7             	mov    %rax,%rdi
    37e6:	e8 00 00 00 00       	callq  37eb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    37eb:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    37f2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    37f9:	ba 01 00 00 00       	mov    $0x1,%edx
    37fe:	48 89 ce             	mov    %rcx,%rsi
    3801:	48 89 c7             	mov    %rax,%rdi
    3804:	e8 00 00 00 00       	callq  3809 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    3809:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    380f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3816:	48 89 c7             	mov    %rax,%rdi
    3819:	e8 00 00 00 00       	callq  381e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    381e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3825:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 382c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    382c:	48 89 c7             	mov    %rax,%rdi
    382f:	e8 00 00 00 00       	callq  3834 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    3834:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    383b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3842:	ba 01 00 00 00       	mov    $0x1,%edx
    3847:	48 89 ce             	mov    %rcx,%rsi
    384a:	48 89 c7             	mov    %rax,%rdi
    384d:	e8 00 00 00 00       	callq  3852 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    3852:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    3858:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    385f:	48 89 c7             	mov    %rax,%rdi
    3862:	e8 00 00 00 00       	callq  3867 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    3867:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    386e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3875 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    3875:	48 89 c7             	mov    %rax,%rdi
    3878:	e8 00 00 00 00       	callq  387d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    387d:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    3884:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    388b:	ba 01 00 00 00       	mov    $0x1,%edx
    3890:	48 89 ce             	mov    %rcx,%rsi
    3893:	48 89 c7             	mov    %rax,%rdi
    3896:	e8 00 00 00 00       	callq  389b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    389b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    38a1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    38a8:	48 89 c7             	mov    %rax,%rdi
    38ab:	e8 00 00 00 00       	callq  38b0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    38b0:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    38b6:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    38bc:	74 43                	je     3901 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    38be:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    38c5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 38cc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    38cc:	48 89 c7             	mov    %rax,%rdi
    38cf:	e8 00 00 00 00       	callq  38d4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    38d4:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    38db:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    38e2:	48 89 d6             	mov    %rdx,%rsi
    38e5:	48 89 c7             	mov    %rax,%rdi
    38e8:	e8 00 00 00 00       	callq  38ed <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    38ed:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    38f4:	48 89 c7             	mov    %rax,%rdi
    38f7:	e8 00 00 00 00       	callq  38fc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    38fc:	e9 6f 03 00 00       	jmpq   3c70 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    3901:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    3907:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    390d:	74 43                	je     3952 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    390f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3916:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 391d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    391d:	48 89 c7             	mov    %rax,%rdi
    3920:	e8 00 00 00 00       	callq  3925 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    3925:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    392c:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    3933:	48 89 d6             	mov    %rdx,%rsi
    3936:	48 89 c7             	mov    %rax,%rdi
    3939:	e8 00 00 00 00       	callq  393e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    393e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3945:	48 89 c7             	mov    %rax,%rdi
    3948:	e8 00 00 00 00       	callq  394d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    394d:	e9 1e 03 00 00       	jmpq   3c70 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    3952:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3959:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3960:	b9 00 00 00 00       	mov    $0x0,%ecx
    3965:	ba 00 00 00 00       	mov    $0x0,%edx
    396a:	48 89 c7             	mov    %rax,%rdi
    396d:	e8 00 00 00 00       	callq  3972 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    3972:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    3978:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    397f:	0f 88 ea 02 00 00    	js     3c6f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    3985:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    398b:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    3991:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    3994:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    399b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    399f:	48 89 d6             	mov    %rdx,%rsi
    39a2:	48 89 c7             	mov    %rax,%rdi
    39a5:	e8 00 00 00 00       	callq  39aa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    39aa:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    39ae:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    39b5:	89 da                	mov    %ebx,%edx
    39b7:	48 89 ce             	mov    %rcx,%rsi
    39ba:	48 89 c7             	mov    %rax,%rdi
    39bd:	e8 00 00 00 00       	callq  39c2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    39c2:	83 c0 01             	add    $0x1,%eax
    39c5:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    39cb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    39cf:	48 89 c7             	mov    %rax,%rdi
    39d2:	e8 00 00 00 00       	callq  39d7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    39d7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    39db:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    39e2:	ba 01 00 00 00       	mov    $0x1,%edx
    39e7:	48 89 ce             	mov    %rcx,%rsi
    39ea:	48 89 c7             	mov    %rax,%rdi
    39ed:	e8 00 00 00 00       	callq  39f2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    39f2:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    39f6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    39fd:	48 89 d6             	mov    %rdx,%rsi
    3a00:	48 89 c7             	mov    %rax,%rdi
    3a03:	e8 00 00 00 00       	callq  3a08 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    3a08:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3a0c:	48 89 c7             	mov    %rax,%rdi
    3a0f:	e8 00 00 00 00       	callq  3a14 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    3a14:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3a18:	be 7b 00 00 00       	mov    $0x7b,%esi
    3a1d:	48 89 c7             	mov    %rax,%rdi
    3a20:	e8 00 00 00 00       	callq  3a25 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    3a25:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    3a2b:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    3a2f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3a36:	b9 01 00 00 00       	mov    $0x1,%ecx
    3a3b:	48 89 c7             	mov    %rax,%rdi
    3a3e:	e8 00 00 00 00       	callq  3a43 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    3a43:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    3a49:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    3a4f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3a56:	89 d6                	mov    %edx,%esi
    3a58:	48 89 c7             	mov    %rax,%rdi
    3a5b:	e8 00 00 00 00       	callq  3a60 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    3a60:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3a64:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3a68:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3a6c:	48 89 c7             	mov    %rax,%rdi
    3a6f:	e8 00 00 00 00       	callq  3a74 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    3a74:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    3a7b:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    3a82:	00 00 00 
        int br=0;
    3a85:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    3a8c:	00 00 00 

        while(bl != br)
    3a8f:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    3a95:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    3a9b:	0f 84 a2 00 00 00    	je     3b43 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    3aa1:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    3aa8:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    3aae:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3ab5:	89 d6                	mov    %edx,%esi
    3ab7:	48 89 c7             	mov    %rax,%rdi
    3aba:	e8 00 00 00 00       	callq  3abf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    3abf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3ac3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3ac7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3acb:	48 89 c7             	mov    %rax,%rdi
    3ace:	e8 00 00 00 00       	callq  3ad3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    3ad3:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    3ada:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3ade:	be 7b 00 00 00       	mov    $0x7b,%esi
    3ae3:	48 89 c7             	mov    %rax,%rdi
    3ae6:	e8 00 00 00 00       	callq  3aeb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    3aeb:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3aef:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    3af6:	89 d6                	mov    %edx,%esi
    3af8:	89 c7                	mov    %eax,%edi
    3afa:	e8 00 00 00 00       	callq  3aff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    3aff:	84 c0                	test   %al,%al
    3b01:	74 07                	je     3b0a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    3b03:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    3b0a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3b0e:	be 7d 00 00 00       	mov    $0x7d,%esi
    3b13:	48 89 c7             	mov    %rax,%rdi
    3b16:	e8 00 00 00 00       	callq  3b1b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    3b1b:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3b1f:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    3b26:	89 d6                	mov    %edx,%esi
    3b28:	89 c7                	mov    %eax,%edi
    3b2a:	e8 00 00 00 00       	callq  3b2f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    3b2f:	84 c0                	test   %al,%al
    3b31:	0f 84 58 ff ff ff    	je     3a8f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    3b37:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    3b3e:	e9 4c ff ff ff       	jmpq   3a8f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3b43:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    3b49:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    3b4f:	89 c1                	mov    %eax,%ecx
    3b51:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3b55:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    3b5b:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3b62:	48 89 c7             	mov    %rax,%rdi
    3b65:	e8 00 00 00 00       	callq  3b6a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    3b6a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    3b6e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3b75:	48 89 d6             	mov    %rdx,%rsi
    3b78:	48 89 c7             	mov    %rax,%rdi
    3b7b:	e8 00 00 00 00       	callq  3b80 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    3b80:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3b84:	48 89 c7             	mov    %rax,%rdi
    3b87:	e8 00 00 00 00       	callq  3b8c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    3b8c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3b90:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3b97 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    3b97:	48 89 c7             	mov    %rax,%rdi
    3b9a:	e8 00 00 00 00       	callq  3b9f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    3b9f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ba3:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3ba7:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    3bae:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3bb4:	b9 00 00 00 00       	mov    $0x0,%ecx
    3bb9:	48 89 c7             	mov    %rax,%rdi
    3bbc:	e8 00 00 00 00       	callq  3bc1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    3bc1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3bc5:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3bcc:	48 89 d6             	mov    %rdx,%rsi
    3bcf:	48 89 c7             	mov    %rax,%rdi
    3bd2:	e8 00 00 00 00       	callq  3bd7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    3bd7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bdb:	48 89 c7             	mov    %rax,%rdi
    3bde:	e8 00 00 00 00       	callq  3be3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    3be3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3be7:	48 89 c7             	mov    %rax,%rdi
    3bea:	e8 00 00 00 00       	callq  3bef <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    3bef:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    3bf6:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    3bfd:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    3c04:	48 89 ce             	mov    %rcx,%rsi
    3c07:	48 89 c7             	mov    %rax,%rdi
    3c0a:	e8 00 00 00 00       	callq  3c0f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    3c0f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3c16:	48 89 c7             	mov    %rax,%rdi
    3c19:	e8 00 00 00 00       	callq  3c1e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    3c1e:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    3c24:	89 c2                	mov    %eax,%edx
    3c26:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c2a:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    3c31:	48 89 ce             	mov    %rcx,%rsi
    3c34:	48 89 c7             	mov    %rax,%rdi
    3c37:	e8 00 00 00 00       	callq  3c3c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    3c3c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c40:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3c47:	48 89 d6             	mov    %rdx,%rsi
    3c4a:	48 89 c7             	mov    %rax,%rdi
    3c4d:	e8 00 00 00 00       	callq  3c52 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    3c52:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c56:	48 89 c7             	mov    %rax,%rdi
    3c59:	e8 00 00 00 00       	callq  3c5e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    3c5e:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    3c64:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    3c6a:	e9 e3 fc ff ff       	jmpq   3952 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    3c6f:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    3c70:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3c77:	48 89 c7             	mov    %rax,%rdi
    3c7a:	e8 00 00 00 00       	callq  3c7f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    3c7f:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3c86:	48 89 c7             	mov    %rax,%rdi
    3c89:	e8 00 00 00 00       	callq  3c8e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    3c8e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3c95:	48 89 c7             	mov    %rax,%rdi
    3c98:	e8 00 00 00 00       	callq  3c9d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    3c9d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3ca4:	48 89 c7             	mov    %rax,%rdi
    3ca7:	e8 00 00 00 00       	callq  3cac <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    3cac:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3cb3:	48 89 c7             	mov    %rax,%rdi
    3cb6:	e8 00 00 00 00       	callq  3cbb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    3cbb:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3cc2:	48 89 c7             	mov    %rax,%rdi
    3cc5:	e8 00 00 00 00       	callq  3cca <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    3cca:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3cd1:	48 89 c7             	mov    %rax,%rdi
    3cd4:	e8 00 00 00 00       	callq  3cd9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    3cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3cdd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3ce4:	00 00 
    3ce6:	0f 84 89 01 00 00    	je     3e75 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    3cec:	e9 7f 01 00 00       	jmpq   3e70 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    3cf1:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    3cf4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3cfb:	48 89 c7             	mov    %rax,%rdi
    3cfe:	e8 00 00 00 00       	callq  3d03 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    3d03:	e9 d6 00 00 00       	jmpq   3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d08:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    3d0b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3d12:	48 89 c7             	mov    %rax,%rdi
    3d15:	e8 00 00 00 00       	callq  3d1a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    3d1a:	e9 bf 00 00 00       	jmpq   3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d1f:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    3d22:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3d29:	48 89 c7             	mov    %rax,%rdi
    3d2c:	e8 00 00 00 00       	callq  3d31 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    3d31:	e9 a8 00 00 00       	jmpq   3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d36:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    3d39:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3d40:	48 89 c7             	mov    %rax,%rdi
    3d43:	e8 00 00 00 00       	callq  3d48 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    3d48:	e9 91 00 00 00       	jmpq   3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d4d:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    3d50:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3d57:	48 89 c7             	mov    %rax,%rdi
    3d5a:	e8 00 00 00 00       	callq  3d5f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    3d5f:	eb 7d                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d61:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    3d64:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d6b:	48 89 c7             	mov    %rax,%rdi
    3d6e:	e8 00 00 00 00       	callq  3d73 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    3d73:	eb 69                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d75:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    3d78:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d7c:	48 89 c7             	mov    %rax,%rdi
    3d7f:	e8 00 00 00 00       	callq  3d84 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    3d84:	eb 58                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d86:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    3d89:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3d8d:	48 89 c7             	mov    %rax,%rdi
    3d90:	e8 00 00 00 00       	callq  3d95 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    3d95:	eb 47                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3d97:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3d9a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d9e:	48 89 c7             	mov    %rax,%rdi
    3da1:	e8 00 00 00 00       	callq  3da6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    3da6:	eb 36                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3da8:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    3dab:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3daf:	48 89 c7             	mov    %rax,%rdi
    3db2:	e8 00 00 00 00       	callq  3db7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    3db7:	eb 03                	jmp    3dbc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    3db9:	48 89 c3             	mov    %rax,%rbx
    3dbc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3dc0:	48 89 c7             	mov    %rax,%rdi
    3dc3:	e8 00 00 00 00       	callq  3dc8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    3dc8:	eb 14                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3dca:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    3dcd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3dd1:	48 89 c7             	mov    %rax,%rdi
    3dd4:	e8 00 00 00 00       	callq  3dd9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    3dd9:	eb 03                	jmp    3dde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    3ddb:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    3dde:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3de5:	48 89 c7             	mov    %rax,%rdi
    3de8:	e8 00 00 00 00       	callq  3ded <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    3ded:	eb 03                	jmp    3df2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    3def:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    3df2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3df9:	48 89 c7             	mov    %rax,%rdi
    3dfc:	e8 00 00 00 00       	callq  3e01 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    3e01:	eb 03                	jmp    3e06 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    3e03:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    3e06:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    3e0d:	48 89 c7             	mov    %rax,%rdi
    3e10:	e8 00 00 00 00       	callq  3e15 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    3e15:	eb 03                	jmp    3e1a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    3e17:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    3e1a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3e21:	48 89 c7             	mov    %rax,%rdi
    3e24:	e8 00 00 00 00       	callq  3e29 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    3e29:	eb 03                	jmp    3e2e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    3e2b:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    3e2e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3e35:	48 89 c7             	mov    %rax,%rdi
    3e38:	e8 00 00 00 00       	callq  3e3d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    3e3d:	eb 03                	jmp    3e42 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    3e3f:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    3e42:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3e49:	48 89 c7             	mov    %rax,%rdi
    3e4c:	e8 00 00 00 00       	callq  3e51 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    3e51:	eb 03                	jmp    3e56 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    3e53:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    3e56:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3e5d:	48 89 c7             	mov    %rax,%rdi
    3e60:	e8 00 00 00 00       	callq  3e65 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    3e65:	48 89 d8             	mov    %rbx,%rax
    3e68:	48 89 c7             	mov    %rax,%rdi
    3e6b:	e8 00 00 00 00       	callq  3e70 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    3e70:	e8 00 00 00 00       	callq  3e75 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    3e75:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    3e7c:	5b                   	pop    %rbx
    3e7d:	5d                   	pop    %rbp
    3e7e:	c3                   	retq   
    3e7f:	90                   	nop

0000000000003e80 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    3e80:	55                   	push   %rbp
    3e81:	48 89 e5             	mov    %rsp,%rbp
    3e84:	53                   	push   %rbx
    3e85:	48 83 ec 38          	sub    $0x38,%rsp
    3e89:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3e8d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3e91:	89 55 cc             	mov    %edx,-0x34(%rbp)
    3e94:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3e9b:	00 00 
    3e9d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3ea1:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    3ea3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ea7:	8b 55 cc             	mov    -0x34(%rbp),%edx
    3eaa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    3eae:	48 89 ce             	mov    %rcx,%rsi
    3eb1:	48 89 c7             	mov    %rax,%rdi
    3eb4:	e8 00 00 00 00       	callq  3eb9 <_ZN6Parser8whatLineE7QStringi+0x39>
    3eb9:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    3ebd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ec1:	48 89 d6             	mov    %rdx,%rsi
    3ec4:	48 89 c7             	mov    %rax,%rdi
    3ec7:	e8 00 00 00 00       	callq  3ecc <_ZN6Parser8whatLineE7QStringi+0x4c>
    3ecc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ed0:	48 89 c7             	mov    %rax,%rdi
    3ed3:	e8 00 00 00 00       	callq  3ed8 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    3ed8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3edc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ee3 <_ZN6Parser8whatLineE7QStringi+0x63>
    3ee3:	48 89 c7             	mov    %rax,%rdi
    3ee6:	e8 00 00 00 00       	callq  3eeb <_ZN6Parser8whatLineE7QStringi+0x6b>
    3eeb:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3eef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ef3:	ba 01 00 00 00       	mov    $0x1,%edx
    3ef8:	48 89 ce             	mov    %rcx,%rsi
    3efb:	48 89 c7             	mov    %rax,%rdi
    3efe:	e8 00 00 00 00       	callq  3f03 <_ZN6Parser8whatLineE7QStringi+0x83>
    3f03:	89 c3                	mov    %eax,%ebx
    3f05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f09:	48 89 c7             	mov    %rax,%rdi
    3f0c:	e8 00 00 00 00       	callq  3f11 <_ZN6Parser8whatLineE7QStringi+0x91>
    3f11:	89 d8                	mov    %ebx,%eax
}
    3f13:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3f17:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3f1e:	00 00 
    3f20:	74 3b                	je     3f5d <_ZN6Parser8whatLineE7QStringi+0xdd>
    3f22:	eb 34                	jmp    3f58 <_ZN6Parser8whatLineE7QStringi+0xd8>
    3f24:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    3f27:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f2b:	48 89 c7             	mov    %rax,%rdi
    3f2e:	e8 00 00 00 00       	callq  3f33 <_ZN6Parser8whatLineE7QStringi+0xb3>
    3f33:	48 89 d8             	mov    %rbx,%rax
    3f36:	48 89 c7             	mov    %rax,%rdi
    3f39:	e8 00 00 00 00       	callq  3f3e <_ZN6Parser8whatLineE7QStringi+0xbe>
    3f3e:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    3f41:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3f45:	48 89 c7             	mov    %rax,%rdi
    3f48:	e8 00 00 00 00       	callq  3f4d <_ZN6Parser8whatLineE7QStringi+0xcd>
    3f4d:	48 89 d8             	mov    %rbx,%rax
    3f50:	48 89 c7             	mov    %rax,%rdi
    3f53:	e8 00 00 00 00       	callq  3f58 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    3f58:	e8 00 00 00 00       	callq  3f5d <_ZN6Parser8whatLineE7QStringi+0xdd>
    3f5d:	48 83 c4 38          	add    $0x38,%rsp
    3f61:	5b                   	pop    %rbx
    3f62:	5d                   	pop    %rbp
    3f63:	c3                   	retq   

0000000000003f64 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    3f64:	55                   	push   %rbp
    3f65:	48 89 e5             	mov    %rsp,%rbp
    3f68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    3f6c:	90                   	nop
    3f6d:	5d                   	pop    %rbp
    3f6e:	c3                   	retq   
    3f6f:	90                   	nop

0000000000003f70 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    3f70:	55                   	push   %rbp
    3f71:	48 89 e5             	mov    %rsp,%rbp
    3f74:	53                   	push   %rbx
    3f75:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    3f7c:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    3f83:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    3f8a:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    3f91:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3f98:	00 00 
    3f9a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3f9e:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    3fa0:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    3fa7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fae <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    3fae:	48 89 c7             	mov    %rax,%rdi
    3fb1:	e8 00 00 00 00       	callq  3fb6 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    3fb6:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    3fbd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fc4 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    3fc4:	48 89 c7             	mov    %rax,%rdi
    3fc7:	e8 00 00 00 00       	callq  3fcc <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    3fcc:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    3fd3:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    3fda:	48 89 d6             	mov    %rdx,%rsi
    3fdd:	48 89 c7             	mov    %rax,%rdi
    3fe0:	e8 00 00 00 00       	callq  3fe5 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    3fe5:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    3fec:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    3ff3:	48 89 d6             	mov    %rdx,%rsi
    3ff6:	48 89 c7             	mov    %rax,%rdi
    3ff9:	e8 00 00 00 00       	callq  3ffe <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    3ffe:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4005:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 400c <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    400c:	48 89 c7             	mov    %rax,%rdi
    400f:	e8 00 00 00 00       	callq  4014 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    4014:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    401b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4022 <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    4022:	48 89 c7             	mov    %rax,%rdi
    4025:	e8 00 00 00 00       	callq  402a <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    402a:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    4031:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4038:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    403f:	b9 01 00 00 00       	mov    $0x1,%ecx
    4044:	48 89 c7             	mov    %rax,%rdi
    4047:	e8 00 00 00 00       	callq  404c <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    404c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4053:	48 89 c7             	mov    %rax,%rdi
    4056:	e8 00 00 00 00       	callq  405b <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    405b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4062:	48 89 c7             	mov    %rax,%rdi
    4065:	e8 00 00 00 00       	callq  406a <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    406a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4071:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4078 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    4078:	48 89 c7             	mov    %rax,%rdi
    407b:	e8 00 00 00 00       	callq  4080 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    4080:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4087:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 408e <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    408e:	48 89 c7             	mov    %rax,%rdi
    4091:	e8 00 00 00 00       	callq  4096 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    4096:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    409d:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    40a4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    40ab:	b9 01 00 00 00       	mov    $0x1,%ecx
    40b0:	48 89 c7             	mov    %rax,%rdi
    40b3:	e8 00 00 00 00       	callq  40b8 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    40b8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    40bf:	48 89 c7             	mov    %rax,%rdi
    40c2:	e8 00 00 00 00       	callq  40c7 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    40c7:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    40ce:	48 89 c7             	mov    %rax,%rdi
    40d1:	e8 00 00 00 00       	callq  40d6 <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    40d6:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    40dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40e1:	48 89 d6             	mov    %rdx,%rsi
    40e4:	48 89 c7             	mov    %rax,%rdi
    40e7:	e8 00 00 00 00       	callq  40ec <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    40ec:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    40f3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40f7:	48 89 d6             	mov    %rdx,%rsi
    40fa:	48 89 c7             	mov    %rax,%rdi
    40fd:	e8 00 00 00 00       	callq  4102 <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    4102:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4109:	be 02 00 00 00       	mov    $0x2,%esi
    410e:	48 89 c7             	mov    %rax,%rdi
    4111:	e8 00 00 00 00       	callq  4116 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    4116:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    411d:	be 02 00 00 00       	mov    $0x2,%esi
    4122:	48 89 c7             	mov    %rax,%rdi
    4125:	e8 00 00 00 00       	callq  412a <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    412a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4131:	48 89 c7             	mov    %rax,%rdi
    4134:	e8 00 00 00 00       	callq  4139 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    4139:	84 c0                	test   %al,%al
    413b:	74 1a                	je     4157 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    413d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4141:	be 04 00 00 00       	mov    $0x4,%esi
    4146:	48 89 c7             	mov    %rax,%rdi
    4149:	e8 00 00 00 00       	callq  414e <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    414e:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4151:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    4157:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    415e:	48 89 c7             	mov    %rax,%rdi
    4161:	e8 00 00 00 00       	callq  4166 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    4166:	84 c0                	test   %al,%al
    4168:	74 1a                	je     4184 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    416a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    416e:	be 04 00 00 00       	mov    $0x4,%esi
    4173:	48 89 c7             	mov    %rax,%rdi
    4176:	e8 00 00 00 00       	callq  417b <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    417b:	8b 45 d0             	mov    -0x30(%rbp),%eax
    417e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    4184:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    418a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    418e:	89 d6                	mov    %edx,%esi
    4190:	48 89 c7             	mov    %rax,%rdi
    4193:	e8 00 00 00 00       	callq  4198 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    4198:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    419e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    41a2:	89 d6                	mov    %edx,%esi
    41a4:	48 89 c7             	mov    %rax,%rdi
    41a7:	e8 00 00 00 00       	callq  41ac <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    41ac:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    41b0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    41b4:	48 89 d6             	mov    %rdx,%rsi
    41b7:	48 89 c7             	mov    %rax,%rdi
    41ba:	e8 00 00 00 00       	callq  41bf <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    41bf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    41c3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    41c7:	48 89 d6             	mov    %rdx,%rsi
    41ca:	48 89 c7             	mov    %rax,%rdi
    41cd:	e8 00 00 00 00       	callq  41d2 <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    41d2:	e8 00 00 00 00       	callq  41d7 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    41d7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    41de:	e8 00 00 00 00       	callq  41e3 <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    41e3:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    41e9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    41f0:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    41f7:	ba 00 00 00 00       	mov    $0x0,%edx
    41fc:	48 89 ce             	mov    %rcx,%rsi
    41ff:	48 89 c7             	mov    %rax,%rdi
    4202:	e8 00 00 00 00       	callq  4207 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    4207:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    420e:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    4215:	ba 00 00 00 00       	mov    $0x0,%edx
    421a:	48 89 ce             	mov    %rcx,%rsi
    421d:	48 89 c7             	mov    %rax,%rdi
    4220:	e8 00 00 00 00       	callq  4225 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    4225:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    422c:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4233:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 423a <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    423a:	48 89 ce             	mov    %rcx,%rsi
    423d:	48 89 c7             	mov    %rax,%rdi
    4240:	e8 00 00 00 00       	callq  4245 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    4245:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    424c:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    4253:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    425a:	48 89 ce             	mov    %rcx,%rsi
    425d:	48 89 c7             	mov    %rax,%rdi
    4260:	e8 00 00 00 00       	callq  4265 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    4265:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    426c:	48 89 c7             	mov    %rax,%rdi
    426f:	e8 00 00 00 00       	callq  4274 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    4274:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    427b:	48 89 c7             	mov    %rax,%rdi
    427e:	e8 00 00 00 00       	callq  4283 <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    4283:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    428a:	48 89 c7             	mov    %rax,%rdi
    428d:	e8 00 00 00 00       	callq  4292 <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    4292:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4299:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    42a0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 42a7 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    42a7:	48 89 c7             	mov    %rax,%rdi
    42aa:	e8 00 00 00 00       	callq  42af <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    42af:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42b6:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    42bd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 42c4 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    42c4:	48 89 ce             	mov    %rcx,%rsi
    42c7:	48 89 c7             	mov    %rax,%rdi
    42ca:	e8 00 00 00 00       	callq  42cf <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    42cf:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    42d6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42da:	48 89 d6             	mov    %rdx,%rsi
    42dd:	48 89 c7             	mov    %rax,%rdi
    42e0:	e8 00 00 00 00       	callq  42e5 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    42e5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42ec:	48 89 c7             	mov    %rax,%rdi
    42ef:	e8 00 00 00 00       	callq  42f4 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    42f4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    42fb:	48 89 c7             	mov    %rax,%rdi
    42fe:	e8 00 00 00 00       	callq  4303 <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    4303:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4307:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    430e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4315 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    4315:	48 89 c7             	mov    %rax,%rdi
    4318:	e8 00 00 00 00       	callq  431d <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    431d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4321:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    4325:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 432c <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    432c:	48 89 ce             	mov    %rcx,%rsi
    432f:	48 89 c7             	mov    %rax,%rdi
    4332:	e8 00 00 00 00       	callq  4337 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    4337:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    433b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    433f:	48 89 d6             	mov    %rdx,%rsi
    4342:	48 89 c7             	mov    %rax,%rdi
    4345:	e8 00 00 00 00       	callq  434a <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    434a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    434e:	48 89 c7             	mov    %rax,%rdi
    4351:	e8 00 00 00 00       	callq  4356 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    4356:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    435a:	48 89 c7             	mov    %rax,%rdi
    435d:	e8 00 00 00 00       	callq  4362 <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    4362:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    4369:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    436d:	48 89 d6             	mov    %rdx,%rsi
    4370:	48 89 c7             	mov    %rax,%rdi
    4373:	e8 00 00 00 00       	callq  4378 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    4378:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    437f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4383:	48 89 d6             	mov    %rdx,%rsi
    4386:	48 89 c7             	mov    %rax,%rdi
    4389:	e8 00 00 00 00       	callq  438e <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    438e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4392:	48 89 c7             	mov    %rax,%rdi
    4395:	e8 00 00 00 00       	callq  439a <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    439a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    439e:	48 89 c7             	mov    %rax,%rdi
    43a1:	e8 00 00 00 00       	callq  43a6 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    43a6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    43ad:	48 89 c7             	mov    %rax,%rdi
    43b0:	e8 00 00 00 00       	callq  43b5 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    43b5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    43b9:	48 89 c7             	mov    %rax,%rdi
    43bc:	e8 00 00 00 00       	callq  43c1 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    43c1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    43c5:	48 89 c7             	mov    %rax,%rdi
    43c8:	e8 00 00 00 00       	callq  43cd <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    43cd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    43d1:	48 89 c7             	mov    %rax,%rdi
    43d4:	e8 00 00 00 00       	callq  43d9 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    43d9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    43dd:	48 89 c7             	mov    %rax,%rdi
    43e0:	e8 00 00 00 00       	callq  43e5 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    43e5:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    43ec:	48 89 c7             	mov    %rax,%rdi
    43ef:	e8 00 00 00 00       	callq  43f4 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    43f4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    43fb:	48 89 c7             	mov    %rax,%rdi
    43fe:	e8 00 00 00 00       	callq  4403 <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    4403:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    440a:	48 89 c7             	mov    %rax,%rdi
    440d:	e8 00 00 00 00       	callq  4412 <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    4412:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4419:	48 89 c7             	mov    %rax,%rdi
    441c:	e8 00 00 00 00       	callq  4421 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    4421:	90                   	nop
    4422:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4426:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    442d:	00 00 
    442f:	0f 84 d3 01 00 00    	je     4608 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    4435:	e9 c9 01 00 00       	jmpq   4603 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    443a:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    443d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4444:	48 89 c7             	mov    %rax,%rdi
    4447:	e8 00 00 00 00       	callq  444c <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    444c:	eb 03                	jmp    4451 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    444e:	48 89 c3             	mov    %rax,%rbx
    4451:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4458:	48 89 c7             	mov    %rax,%rdi
    445b:	e8 00 00 00 00       	callq  4460 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    4460:	e9 48 01 00 00       	jmpq   45ad <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4465:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    4468:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    446f:	48 89 c7             	mov    %rax,%rdi
    4472:	e8 00 00 00 00       	callq  4477 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    4477:	eb 03                	jmp    447c <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    4479:	48 89 c3             	mov    %rax,%rbx
    447c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4483:	48 89 c7             	mov    %rax,%rdi
    4486:	e8 00 00 00 00       	callq  448b <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    448b:	e9 1d 01 00 00       	jmpq   45ad <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    4490:	48 89 c3             	mov    %rax,%rbx
    4493:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    449a:	48 89 c7             	mov    %rax,%rdi
    449d:	e8 00 00 00 00       	callq  44a2 <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    44a2:	eb 17                	jmp    44bb <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    44a4:	48 89 c3             	mov    %rax,%rbx
    44a7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    44ae:	48 89 c7             	mov    %rax,%rdi
    44b1:	e8 00 00 00 00       	callq  44b6 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    44b6:	eb 03                	jmp    44bb <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    44b8:	48 89 c3             	mov    %rax,%rbx
    44bb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    44c2:	48 89 c7             	mov    %rax,%rdi
    44c5:	e8 00 00 00 00       	callq  44ca <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    44ca:	eb 17                	jmp    44e3 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    44cc:	48 89 c3             	mov    %rax,%rbx
    44cf:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    44d6:	48 89 c7             	mov    %rax,%rdi
    44d9:	e8 00 00 00 00       	callq  44de <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    44de:	eb 03                	jmp    44e3 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    44e0:	48 89 c3             	mov    %rax,%rbx
    44e3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    44ea:	48 89 c7             	mov    %rax,%rdi
    44ed:	e8 00 00 00 00       	callq  44f2 <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    44f2:	eb 75                	jmp    4569 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    44f4:	48 89 c3             	mov    %rax,%rbx
    44f7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    44fe:	48 89 c7             	mov    %rax,%rdi
    4501:	e8 00 00 00 00       	callq  4506 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    4506:	eb 61                	jmp    4569 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4508:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    450b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4512:	48 89 c7             	mov    %rax,%rdi
    4515:	e8 00 00 00 00       	callq  451a <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    451a:	eb 03                	jmp    451f <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    451c:	48 89 c3             	mov    %rax,%rbx
    451f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4526:	48 89 c7             	mov    %rax,%rdi
    4529:	e8 00 00 00 00       	callq  452e <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    452e:	eb 25                	jmp    4555 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    4530:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    4533:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4537:	48 89 c7             	mov    %rax,%rdi
    453a:	e8 00 00 00 00       	callq  453f <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    453f:	eb 03                	jmp    4544 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    4541:	48 89 c3             	mov    %rax,%rbx
    4544:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4548:	48 89 c7             	mov    %rax,%rdi
    454b:	e8 00 00 00 00       	callq  4550 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    4550:	eb 03                	jmp    4555 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    4552:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    4555:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    455c:	48 89 c7             	mov    %rax,%rdi
    455f:	e8 00 00 00 00       	callq  4564 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    4564:	eb 03                	jmp    4569 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    4566:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    4569:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    456d:	48 89 c7             	mov    %rax,%rdi
    4570:	e8 00 00 00 00       	callq  4575 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    4575:	eb 03                	jmp    457a <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    4577:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    457a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    457e:	48 89 c7             	mov    %rax,%rdi
    4581:	e8 00 00 00 00       	callq  4586 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    4586:	eb 03                	jmp    458b <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    4588:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    458b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    458f:	48 89 c7             	mov    %rax,%rdi
    4592:	e8 00 00 00 00       	callq  4597 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    4597:	eb 03                	jmp    459c <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    4599:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    459c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    45a0:	48 89 c7             	mov    %rax,%rdi
    45a3:	e8 00 00 00 00       	callq  45a8 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    45a8:	eb 03                	jmp    45ad <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    45aa:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    45ad:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    45b4:	48 89 c7             	mov    %rax,%rdi
    45b7:	e8 00 00 00 00       	callq  45bc <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    45bc:	eb 03                	jmp    45c1 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    45be:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    45c1:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    45c8:	48 89 c7             	mov    %rax,%rdi
    45cb:	e8 00 00 00 00       	callq  45d0 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    45d0:	eb 03                	jmp    45d5 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    45d2:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    45d5:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    45dc:	48 89 c7             	mov    %rax,%rdi
    45df:	e8 00 00 00 00       	callq  45e4 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    45e4:	eb 03                	jmp    45e9 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    45e6:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    45e9:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    45f0:	48 89 c7             	mov    %rax,%rdi
    45f3:	e8 00 00 00 00       	callq  45f8 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    45f8:	48 89 d8             	mov    %rbx,%rax
    45fb:	48 89 c7             	mov    %rax,%rdi
    45fe:	e8 00 00 00 00       	callq  4603 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    4603:	e8 00 00 00 00       	callq  4608 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    4608:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    460f:	5b                   	pop    %rbx
    4610:	5d                   	pop    %rbp
    4611:	c3                   	retq   

0000000000004612 <_ZN6Parser4initEv>:

void Parser::init(){
    4612:	55                   	push   %rbp
    4613:	48 89 e5             	mov    %rsp,%rbp
    4616:	48 83 ec 10          	sub    $0x10,%rsp
    461a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    461e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4622:	48 83 c0 30          	add    $0x30,%rax
    4626:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 462d <_ZN6Parser4initEv+0x1b>
    462d:	48 89 c7             	mov    %rax,%rdi
    4630:	e8 00 00 00 00       	callq  4635 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    4635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4639:	48 83 c0 38          	add    $0x38,%rax
    463d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4644 <_ZN6Parser4initEv+0x32>
    4644:	48 89 c7             	mov    %rax,%rdi
    4647:	e8 00 00 00 00       	callq  464c <_ZN6Parser4initEv+0x3a>
}
    464c:	90                   	nop
    464d:	c9                   	leaveq 
    464e:	c3                   	retq   
    464f:	90                   	nop

0000000000004650 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    4650:	55                   	push   %rbp
    4651:	48 89 e5             	mov    %rsp,%rbp
    4654:	53                   	push   %rbx
    4655:	48 83 ec 38          	sub    $0x38,%rsp
    4659:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    465d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4664:	00 00 
    4666:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    466a:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    466c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    4673:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4677:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 467e <_ZN6Parser8initSemsEv+0x2e>
    467e:	48 89 c7             	mov    %rax,%rdi
    4681:	e8 00 00 00 00       	callq  4686 <_ZN6Parser8initSemsEv+0x36>
    4686:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    468a:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4691:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4695:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4699:	48 89 c6             	mov    %rax,%rsi
    469c:	48 89 cf             	mov    %rcx,%rdi
    469f:	e8 00 00 00 00       	callq  46a4 <_ZN6Parser8initSemsEv+0x54>
    46a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46a8:	48 89 c7             	mov    %rax,%rdi
    46ab:	e8 00 00 00 00       	callq  46b0 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    46b0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    46b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46c2 <_ZN6Parser8initSemsEv+0x72>
    46c2:	48 89 c7             	mov    %rax,%rdi
    46c5:	e8 00 00 00 00       	callq  46ca <_ZN6Parser8initSemsEv+0x7a>
    46ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    46ce:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    46d5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    46d9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46dd:	48 89 c6             	mov    %rax,%rsi
    46e0:	48 89 cf             	mov    %rcx,%rdi
    46e3:	e8 00 00 00 00       	callq  46e8 <_ZN6Parser8initSemsEv+0x98>
    46e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46ec:	48 89 c7             	mov    %rax,%rdi
    46ef:	e8 00 00 00 00       	callq  46f4 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    46f4:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    46fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46ff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4706 <_ZN6Parser8initSemsEv+0xb6>
    4706:	48 89 c7             	mov    %rax,%rdi
    4709:	e8 00 00 00 00       	callq  470e <_ZN6Parser8initSemsEv+0xbe>
    470e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4712:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4719:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    471d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4721:	48 89 c6             	mov    %rax,%rsi
    4724:	48 89 cf             	mov    %rcx,%rdi
    4727:	e8 00 00 00 00       	callq  472c <_ZN6Parser8initSemsEv+0xdc>
    472c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4730:	48 89 c7             	mov    %rax,%rdi
    4733:	e8 00 00 00 00       	callq  4738 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    4738:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    473f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4743:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 474a <_ZN6Parser8initSemsEv+0xfa>
    474a:	48 89 c7             	mov    %rax,%rdi
    474d:	e8 00 00 00 00       	callq  4752 <_ZN6Parser8initSemsEv+0x102>
    4752:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4756:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    475d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4761:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4765:	48 89 c6             	mov    %rax,%rsi
    4768:	48 89 cf             	mov    %rcx,%rdi
    476b:	e8 00 00 00 00       	callq  4770 <_ZN6Parser8initSemsEv+0x120>
    4770:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4774:	48 89 c7             	mov    %rax,%rdi
    4777:	e8 00 00 00 00       	callq  477c <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    477c:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    4783:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4787:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 478e <_ZN6Parser8initSemsEv+0x13e>
    478e:	48 89 c7             	mov    %rax,%rdi
    4791:	e8 00 00 00 00       	callq  4796 <_ZN6Parser8initSemsEv+0x146>
    4796:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    479a:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    47a1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    47a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    47a9:	48 89 c6             	mov    %rax,%rsi
    47ac:	48 89 cf             	mov    %rcx,%rdi
    47af:	e8 00 00 00 00       	callq  47b4 <_ZN6Parser8initSemsEv+0x164>
    47b4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    47b8:	48 89 c7             	mov    %rax,%rdi
    47bb:	e8 00 00 00 00       	callq  47c0 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    47c0:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    47c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    47cb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47d2 <_ZN6Parser8initSemsEv+0x182>
    47d2:	48 89 c7             	mov    %rax,%rdi
    47d5:	e8 00 00 00 00       	callq  47da <_ZN6Parser8initSemsEv+0x18a>
    47da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    47de:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    47e5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    47e9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    47ed:	48 89 c6             	mov    %rax,%rsi
    47f0:	48 89 cf             	mov    %rcx,%rdi
    47f3:	e8 00 00 00 00       	callq  47f8 <_ZN6Parser8initSemsEv+0x1a8>
    47f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    47fc:	48 89 c7             	mov    %rax,%rdi
    47ff:	e8 00 00 00 00       	callq  4804 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    4804:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    480b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    480f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4816 <_ZN6Parser8initSemsEv+0x1c6>
    4816:	48 89 c7             	mov    %rax,%rdi
    4819:	e8 00 00 00 00       	callq  481e <_ZN6Parser8initSemsEv+0x1ce>
    481e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4822:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4829:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    482d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4831:	48 89 c6             	mov    %rax,%rsi
    4834:	48 89 cf             	mov    %rcx,%rdi
    4837:	e8 00 00 00 00       	callq  483c <_ZN6Parser8initSemsEv+0x1ec>
    483c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4840:	48 89 c7             	mov    %rax,%rdi
    4843:	e8 00 00 00 00       	callq  4848 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    4848:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    484f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4853:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 485a <_ZN6Parser8initSemsEv+0x20a>
    485a:	48 89 c7             	mov    %rax,%rdi
    485d:	e8 00 00 00 00       	callq  4862 <_ZN6Parser8initSemsEv+0x212>
    4862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4866:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    486d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4871:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4875:	48 89 c6             	mov    %rax,%rsi
    4878:	48 89 cf             	mov    %rcx,%rdi
    487b:	e8 00 00 00 00       	callq  4880 <_ZN6Parser8initSemsEv+0x230>
    4880:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4884:	48 89 c7             	mov    %rax,%rdi
    4887:	e8 00 00 00 00       	callq  488c <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    488c:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    4893:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4897:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 489e <_ZN6Parser8initSemsEv+0x24e>
    489e:	48 89 c7             	mov    %rax,%rdi
    48a1:	e8 00 00 00 00       	callq  48a6 <_ZN6Parser8initSemsEv+0x256>
    48a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    48aa:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    48b1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    48b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48b9:	48 89 c6             	mov    %rax,%rsi
    48bc:	48 89 cf             	mov    %rcx,%rdi
    48bf:	e8 00 00 00 00       	callq  48c4 <_ZN6Parser8initSemsEv+0x274>
    48c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48c8:	48 89 c7             	mov    %rax,%rdi
    48cb:	e8 00 00 00 00       	callq  48d0 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    48d0:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    48d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48db:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 48e2 <_ZN6Parser8initSemsEv+0x292>
    48e2:	48 89 c7             	mov    %rax,%rdi
    48e5:	e8 00 00 00 00       	callq  48ea <_ZN6Parser8initSemsEv+0x29a>
    48ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    48ee:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    48f5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    48f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    48fd:	48 89 c6             	mov    %rax,%rsi
    4900:	48 89 cf             	mov    %rcx,%rdi
    4903:	e8 00 00 00 00       	callq  4908 <_ZN6Parser8initSemsEv+0x2b8>
    4908:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    490c:	48 89 c7             	mov    %rax,%rdi
    490f:	e8 00 00 00 00       	callq  4914 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    4914:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    491b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    491f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4926 <_ZN6Parser8initSemsEv+0x2d6>
    4926:	48 89 c7             	mov    %rax,%rdi
    4929:	e8 00 00 00 00       	callq  492e <_ZN6Parser8initSemsEv+0x2de>
    492e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4932:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4939:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    493d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4941:	48 89 c6             	mov    %rax,%rsi
    4944:	48 89 cf             	mov    %rcx,%rdi
    4947:	e8 00 00 00 00       	callq  494c <_ZN6Parser8initSemsEv+0x2fc>
    494c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4950:	48 89 c7             	mov    %rax,%rdi
    4953:	e8 00 00 00 00       	callq  4958 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    4958:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    495f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4963:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 496a <_ZN6Parser8initSemsEv+0x31a>
    496a:	48 89 c7             	mov    %rax,%rdi
    496d:	e8 00 00 00 00       	callq  4972 <_ZN6Parser8initSemsEv+0x322>
    4972:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4976:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    497d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4981:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4985:	48 89 c6             	mov    %rax,%rsi
    4988:	48 89 cf             	mov    %rcx,%rdi
    498b:	e8 00 00 00 00       	callq  4990 <_ZN6Parser8initSemsEv+0x340>
    4990:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4994:	48 89 c7             	mov    %rax,%rdi
    4997:	e8 00 00 00 00       	callq  499c <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    499c:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    49a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49ae <_ZN6Parser8initSemsEv+0x35e>
    49ae:	48 89 c7             	mov    %rax,%rdi
    49b1:	e8 00 00 00 00       	callq  49b6 <_ZN6Parser8initSemsEv+0x366>
    49b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    49ba:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    49c1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    49c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49c9:	48 89 c6             	mov    %rax,%rsi
    49cc:	48 89 cf             	mov    %rcx,%rdi
    49cf:	e8 00 00 00 00       	callq  49d4 <_ZN6Parser8initSemsEv+0x384>
    49d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49d8:	48 89 c7             	mov    %rax,%rdi
    49db:	e8 00 00 00 00       	callq  49e0 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    49e0:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    49e7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    49eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 49f2 <_ZN6Parser8initSemsEv+0x3a2>
    49f2:	48 89 c7             	mov    %rax,%rdi
    49f5:	e8 00 00 00 00       	callq  49fa <_ZN6Parser8initSemsEv+0x3aa>
    49fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    49fe:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4a05:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4a09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a0d:	48 89 c6             	mov    %rax,%rsi
    4a10:	48 89 cf             	mov    %rcx,%rdi
    4a13:	e8 00 00 00 00       	callq  4a18 <_ZN6Parser8initSemsEv+0x3c8>
    4a18:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a1c:	48 89 c7             	mov    %rax,%rdi
    4a1f:	e8 00 00 00 00       	callq  4a24 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    4a24:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    4a2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a2f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a36 <_ZN6Parser8initSemsEv+0x3e6>
    4a36:	48 89 c7             	mov    %rax,%rdi
    4a39:	e8 00 00 00 00       	callq  4a3e <_ZN6Parser8initSemsEv+0x3ee>
    4a3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a42:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4a49:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4a4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a51:	48 89 c6             	mov    %rax,%rsi
    4a54:	48 89 cf             	mov    %rcx,%rdi
    4a57:	e8 00 00 00 00       	callq  4a5c <_ZN6Parser8initSemsEv+0x40c>
    4a5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a60:	48 89 c7             	mov    %rax,%rdi
    4a63:	e8 00 00 00 00       	callq  4a68 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    4a68:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    4a6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a73:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4a7a <_ZN6Parser8initSemsEv+0x42a>
    4a7a:	48 89 c7             	mov    %rax,%rdi
    4a7d:	e8 00 00 00 00       	callq  4a82 <_ZN6Parser8initSemsEv+0x432>
    4a82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a86:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4a8d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4a91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4a95:	48 89 c6             	mov    %rax,%rsi
    4a98:	48 89 cf             	mov    %rcx,%rdi
    4a9b:	e8 00 00 00 00       	callq  4aa0 <_ZN6Parser8initSemsEv+0x450>
    4aa0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4aa4:	48 89 c7             	mov    %rax,%rdi
    4aa7:	e8 00 00 00 00       	callq  4aac <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    4aac:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    4ab3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ab7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4abe <_ZN6Parser8initSemsEv+0x46e>
    4abe:	48 89 c7             	mov    %rax,%rdi
    4ac1:	e8 00 00 00 00       	callq  4ac6 <_ZN6Parser8initSemsEv+0x476>
    4ac6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4aca:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4ad1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ad5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ad9:	48 89 c6             	mov    %rax,%rsi
    4adc:	48 89 cf             	mov    %rcx,%rdi
    4adf:	e8 00 00 00 00       	callq  4ae4 <_ZN6Parser8initSemsEv+0x494>
    4ae4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ae8:	48 89 c7             	mov    %rax,%rdi
    4aeb:	e8 00 00 00 00       	callq  4af0 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    4af0:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    4af7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4afb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b02 <_ZN6Parser8initSemsEv+0x4b2>
    4b02:	48 89 c7             	mov    %rax,%rdi
    4b05:	e8 00 00 00 00       	callq  4b0a <_ZN6Parser8initSemsEv+0x4ba>
    4b0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b0e:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b15:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4b19:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b1d:	48 89 c6             	mov    %rax,%rsi
    4b20:	48 89 cf             	mov    %rcx,%rdi
    4b23:	e8 00 00 00 00       	callq  4b28 <_ZN6Parser8initSemsEv+0x4d8>
    4b28:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b2c:	48 89 c7             	mov    %rax,%rdi
    4b2f:	e8 00 00 00 00       	callq  4b34 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    4b34:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    4b3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b3f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b46 <_ZN6Parser8initSemsEv+0x4f6>
    4b46:	48 89 c7             	mov    %rax,%rdi
    4b49:	e8 00 00 00 00       	callq  4b4e <_ZN6Parser8initSemsEv+0x4fe>
    4b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b52:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b59:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4b5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b61:	48 89 c6             	mov    %rax,%rsi
    4b64:	48 89 cf             	mov    %rcx,%rdi
    4b67:	e8 00 00 00 00       	callq  4b6c <_ZN6Parser8initSemsEv+0x51c>
    4b6c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b70:	48 89 c7             	mov    %rax,%rdi
    4b73:	e8 00 00 00 00       	callq  4b78 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    4b78:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    4b7f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4b83:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b8a <_ZN6Parser8initSemsEv+0x53a>
    4b8a:	48 89 c7             	mov    %rax,%rdi
    4b8d:	e8 00 00 00 00       	callq  4b92 <_ZN6Parser8initSemsEv+0x542>
    4b92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b96:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4b9d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4ba1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ba5:	48 89 c6             	mov    %rax,%rsi
    4ba8:	48 89 cf             	mov    %rcx,%rdi
    4bab:	e8 00 00 00 00       	callq  4bb0 <_ZN6Parser8initSemsEv+0x560>
    4bb0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bb4:	48 89 c7             	mov    %rax,%rdi
    4bb7:	e8 00 00 00 00       	callq  4bbc <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    4bbc:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    4bc3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bc7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4bce <_ZN6Parser8initSemsEv+0x57e>
    4bce:	48 89 c7             	mov    %rax,%rdi
    4bd1:	e8 00 00 00 00       	callq  4bd6 <_ZN6Parser8initSemsEv+0x586>
    4bd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4bda:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4be1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4be5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4be9:	48 89 c6             	mov    %rax,%rsi
    4bec:	48 89 cf             	mov    %rcx,%rdi
    4bef:	e8 00 00 00 00       	callq  4bf4 <_ZN6Parser8initSemsEv+0x5a4>
    4bf4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4bf8:	48 89 c7             	mov    %rax,%rdi
    4bfb:	e8 00 00 00 00       	callq  4c00 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    4c00:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    4c07:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c0b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c12 <_ZN6Parser8initSemsEv+0x5c2>
    4c12:	48 89 c7             	mov    %rax,%rdi
    4c15:	e8 00 00 00 00       	callq  4c1a <_ZN6Parser8initSemsEv+0x5ca>
    4c1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4c1e:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4c25:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4c29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c2d:	48 89 c6             	mov    %rax,%rsi
    4c30:	48 89 cf             	mov    %rcx,%rdi
    4c33:	e8 00 00 00 00       	callq  4c38 <_ZN6Parser8initSemsEv+0x5e8>
    4c38:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c3c:	48 89 c7             	mov    %rax,%rdi
    4c3f:	e8 00 00 00 00       	callq  4c44 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    4c44:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    4c4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c4f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c56 <_ZN6Parser8initSemsEv+0x606>
    4c56:	48 89 c7             	mov    %rax,%rdi
    4c59:	e8 00 00 00 00       	callq  4c5e <_ZN6Parser8initSemsEv+0x60e>
    4c5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4c62:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4c69:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4c6d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c71:	48 89 c6             	mov    %rax,%rsi
    4c74:	48 89 cf             	mov    %rcx,%rdi
    4c77:	e8 00 00 00 00       	callq  4c7c <_ZN6Parser8initSemsEv+0x62c>
    4c7c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c80:	48 89 c7             	mov    %rax,%rdi
    4c83:	e8 00 00 00 00       	callq  4c88 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    4c88:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    4c8f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c93:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c9a <_ZN6Parser8initSemsEv+0x64a>
    4c9a:	48 89 c7             	mov    %rax,%rdi
    4c9d:	e8 00 00 00 00       	callq  4ca2 <_ZN6Parser8initSemsEv+0x652>
    4ca2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4ca6:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4cad:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4cb1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cb5:	48 89 c6             	mov    %rax,%rsi
    4cb8:	48 89 cf             	mov    %rcx,%rdi
    4cbb:	e8 00 00 00 00       	callq  4cc0 <_ZN6Parser8initSemsEv+0x670>
    4cc0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cc4:	48 89 c7             	mov    %rax,%rdi
    4cc7:	e8 00 00 00 00       	callq  4ccc <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    4ccc:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    4cd3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cd7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4cde <_ZN6Parser8initSemsEv+0x68e>
    4cde:	48 89 c7             	mov    %rax,%rdi
    4ce1:	e8 00 00 00 00       	callq  4ce6 <_ZN6Parser8initSemsEv+0x696>
    4ce6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4cea:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4cf1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4cf5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cf9:	48 89 c6             	mov    %rax,%rsi
    4cfc:	48 89 cf             	mov    %rcx,%rdi
    4cff:	e8 00 00 00 00       	callq  4d04 <_ZN6Parser8initSemsEv+0x6b4>
    4d04:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d08:	48 89 c7             	mov    %rax,%rdi
    4d0b:	e8 00 00 00 00       	callq  4d10 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    4d10:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    4d17:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d1b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d22 <_ZN6Parser8initSemsEv+0x6d2>
    4d22:	48 89 c7             	mov    %rax,%rdi
    4d25:	e8 00 00 00 00       	callq  4d2a <_ZN6Parser8initSemsEv+0x6da>
    4d2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d2e:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4d35:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4d39:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d3d:	48 89 c6             	mov    %rax,%rsi
    4d40:	48 89 cf             	mov    %rcx,%rdi
    4d43:	e8 00 00 00 00       	callq  4d48 <_ZN6Parser8initSemsEv+0x6f8>
    4d48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d4c:	48 89 c7             	mov    %rax,%rdi
    4d4f:	e8 00 00 00 00       	callq  4d54 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    4d54:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    4d5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d5f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d66 <_ZN6Parser8initSemsEv+0x716>
    4d66:	48 89 c7             	mov    %rax,%rdi
    4d69:	e8 00 00 00 00       	callq  4d6e <_ZN6Parser8initSemsEv+0x71e>
    4d6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d72:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4d79:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4d7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d81:	48 89 c6             	mov    %rax,%rsi
    4d84:	48 89 cf             	mov    %rcx,%rdi
    4d87:	e8 00 00 00 00       	callq  4d8c <_ZN6Parser8initSemsEv+0x73c>
    4d8c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4d90:	48 89 c7             	mov    %rax,%rdi
    4d93:	e8 00 00 00 00       	callq  4d98 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    4d98:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    4d9f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4da3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4daa <_ZN6Parser8initSemsEv+0x75a>
    4daa:	48 89 c7             	mov    %rax,%rdi
    4dad:	e8 00 00 00 00       	callq  4db2 <_ZN6Parser8initSemsEv+0x762>
    4db2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4db6:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4dbd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4dc1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4dc5:	48 89 c6             	mov    %rax,%rsi
    4dc8:	48 89 cf             	mov    %rcx,%rdi
    4dcb:	e8 00 00 00 00       	callq  4dd0 <_ZN6Parser8initSemsEv+0x780>
    4dd0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4dd4:	48 89 c7             	mov    %rax,%rdi
    4dd7:	e8 00 00 00 00       	callq  4ddc <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    4ddc:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    4de3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4de7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4dee <_ZN6Parser8initSemsEv+0x79e>
    4dee:	48 89 c7             	mov    %rax,%rdi
    4df1:	e8 00 00 00 00       	callq  4df6 <_ZN6Parser8initSemsEv+0x7a6>
    4df6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4dfa:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4e01:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4e05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e09:	48 89 c6             	mov    %rax,%rsi
    4e0c:	48 89 cf             	mov    %rcx,%rdi
    4e0f:	e8 00 00 00 00       	callq  4e14 <_ZN6Parser8initSemsEv+0x7c4>
    4e14:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e18:	48 89 c7             	mov    %rax,%rdi
    4e1b:	e8 00 00 00 00       	callq  4e20 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    4e20:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    4e27:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e2b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e32 <_ZN6Parser8initSemsEv+0x7e2>
    4e32:	48 89 c7             	mov    %rax,%rdi
    4e35:	e8 00 00 00 00       	callq  4e3a <_ZN6Parser8initSemsEv+0x7ea>
    4e3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4e3e:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    4e45:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    4e49:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e4d:	48 89 c6             	mov    %rax,%rsi
    4e50:	48 89 cf             	mov    %rcx,%rdi
    4e53:	e8 00 00 00 00       	callq  4e58 <_ZN6Parser8initSemsEv+0x808>
    4e58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e5c:	48 89 c7             	mov    %rax,%rdi
    4e5f:	e8 00 00 00 00       	callq  4e64 <_ZN6Parser8initSemsEv+0x814>

}
    4e64:	90                   	nop
    4e65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e69:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4e70:	00 00 
    4e72:	0f 84 16 03 00 00    	je     518e <_ZN6Parser8initSemsEv+0xb3e>
    4e78:	e9 0c 03 00 00       	jmpq   5189 <_ZN6Parser8initSemsEv+0xb39>
    4e7d:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    4e80:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e84:	48 89 c7             	mov    %rax,%rdi
    4e87:	e8 00 00 00 00       	callq  4e8c <_ZN6Parser8initSemsEv+0x83c>
    4e8c:	48 89 d8             	mov    %rbx,%rax
    4e8f:	48 89 c7             	mov    %rax,%rdi
    4e92:	e8 00 00 00 00       	callq  4e97 <_ZN6Parser8initSemsEv+0x847>
    4e97:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    4e9a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4e9e:	48 89 c7             	mov    %rax,%rdi
    4ea1:	e8 00 00 00 00       	callq  4ea6 <_ZN6Parser8initSemsEv+0x856>
    4ea6:	48 89 d8             	mov    %rbx,%rax
    4ea9:	48 89 c7             	mov    %rax,%rdi
    4eac:	e8 00 00 00 00       	callq  4eb1 <_ZN6Parser8initSemsEv+0x861>
    4eb1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    4eb4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4eb8:	48 89 c7             	mov    %rax,%rdi
    4ebb:	e8 00 00 00 00       	callq  4ec0 <_ZN6Parser8initSemsEv+0x870>
    4ec0:	48 89 d8             	mov    %rbx,%rax
    4ec3:	48 89 c7             	mov    %rax,%rdi
    4ec6:	e8 00 00 00 00       	callq  4ecb <_ZN6Parser8initSemsEv+0x87b>
    4ecb:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    4ece:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ed2:	48 89 c7             	mov    %rax,%rdi
    4ed5:	e8 00 00 00 00       	callq  4eda <_ZN6Parser8initSemsEv+0x88a>
    4eda:	48 89 d8             	mov    %rbx,%rax
    4edd:	48 89 c7             	mov    %rax,%rdi
    4ee0:	e8 00 00 00 00       	callq  4ee5 <_ZN6Parser8initSemsEv+0x895>
    4ee5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    4ee8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4eec:	48 89 c7             	mov    %rax,%rdi
    4eef:	e8 00 00 00 00       	callq  4ef4 <_ZN6Parser8initSemsEv+0x8a4>
    4ef4:	48 89 d8             	mov    %rbx,%rax
    4ef7:	48 89 c7             	mov    %rax,%rdi
    4efa:	e8 00 00 00 00       	callq  4eff <_ZN6Parser8initSemsEv+0x8af>
    4eff:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    4f02:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f06:	48 89 c7             	mov    %rax,%rdi
    4f09:	e8 00 00 00 00       	callq  4f0e <_ZN6Parser8initSemsEv+0x8be>
    4f0e:	48 89 d8             	mov    %rbx,%rax
    4f11:	48 89 c7             	mov    %rax,%rdi
    4f14:	e8 00 00 00 00       	callq  4f19 <_ZN6Parser8initSemsEv+0x8c9>
    4f19:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    4f1c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f20:	48 89 c7             	mov    %rax,%rdi
    4f23:	e8 00 00 00 00       	callq  4f28 <_ZN6Parser8initSemsEv+0x8d8>
    4f28:	48 89 d8             	mov    %rbx,%rax
    4f2b:	48 89 c7             	mov    %rax,%rdi
    4f2e:	e8 00 00 00 00       	callq  4f33 <_ZN6Parser8initSemsEv+0x8e3>
    4f33:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    4f36:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f3a:	48 89 c7             	mov    %rax,%rdi
    4f3d:	e8 00 00 00 00       	callq  4f42 <_ZN6Parser8initSemsEv+0x8f2>
    4f42:	48 89 d8             	mov    %rbx,%rax
    4f45:	48 89 c7             	mov    %rax,%rdi
    4f48:	e8 00 00 00 00       	callq  4f4d <_ZN6Parser8initSemsEv+0x8fd>
    4f4d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    4f50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f54:	48 89 c7             	mov    %rax,%rdi
    4f57:	e8 00 00 00 00       	callq  4f5c <_ZN6Parser8initSemsEv+0x90c>
    4f5c:	48 89 d8             	mov    %rbx,%rax
    4f5f:	48 89 c7             	mov    %rax,%rdi
    4f62:	e8 00 00 00 00       	callq  4f67 <_ZN6Parser8initSemsEv+0x917>
    4f67:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    4f6a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f6e:	48 89 c7             	mov    %rax,%rdi
    4f71:	e8 00 00 00 00       	callq  4f76 <_ZN6Parser8initSemsEv+0x926>
    4f76:	48 89 d8             	mov    %rbx,%rax
    4f79:	48 89 c7             	mov    %rax,%rdi
    4f7c:	e8 00 00 00 00       	callq  4f81 <_ZN6Parser8initSemsEv+0x931>
    4f81:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    4f84:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4f88:	48 89 c7             	mov    %rax,%rdi
    4f8b:	e8 00 00 00 00       	callq  4f90 <_ZN6Parser8initSemsEv+0x940>
    4f90:	48 89 d8             	mov    %rbx,%rax
    4f93:	48 89 c7             	mov    %rax,%rdi
    4f96:	e8 00 00 00 00       	callq  4f9b <_ZN6Parser8initSemsEv+0x94b>
    4f9b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    4f9e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fa2:	48 89 c7             	mov    %rax,%rdi
    4fa5:	e8 00 00 00 00       	callq  4faa <_ZN6Parser8initSemsEv+0x95a>
    4faa:	48 89 d8             	mov    %rbx,%rax
    4fad:	48 89 c7             	mov    %rax,%rdi
    4fb0:	e8 00 00 00 00       	callq  4fb5 <_ZN6Parser8initSemsEv+0x965>
    4fb5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    4fb8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fbc:	48 89 c7             	mov    %rax,%rdi
    4fbf:	e8 00 00 00 00       	callq  4fc4 <_ZN6Parser8initSemsEv+0x974>
    4fc4:	48 89 d8             	mov    %rbx,%rax
    4fc7:	48 89 c7             	mov    %rax,%rdi
    4fca:	e8 00 00 00 00       	callq  4fcf <_ZN6Parser8initSemsEv+0x97f>
    4fcf:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    4fd2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4fd6:	48 89 c7             	mov    %rax,%rdi
    4fd9:	e8 00 00 00 00       	callq  4fde <_ZN6Parser8initSemsEv+0x98e>
    4fde:	48 89 d8             	mov    %rbx,%rax
    4fe1:	48 89 c7             	mov    %rax,%rdi
    4fe4:	e8 00 00 00 00       	callq  4fe9 <_ZN6Parser8initSemsEv+0x999>
    4fe9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    4fec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ff0:	48 89 c7             	mov    %rax,%rdi
    4ff3:	e8 00 00 00 00       	callq  4ff8 <_ZN6Parser8initSemsEv+0x9a8>
    4ff8:	48 89 d8             	mov    %rbx,%rax
    4ffb:	48 89 c7             	mov    %rax,%rdi
    4ffe:	e8 00 00 00 00       	callq  5003 <_ZN6Parser8initSemsEv+0x9b3>
    5003:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    5006:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    500a:	48 89 c7             	mov    %rax,%rdi
    500d:	e8 00 00 00 00       	callq  5012 <_ZN6Parser8initSemsEv+0x9c2>
    5012:	48 89 d8             	mov    %rbx,%rax
    5015:	48 89 c7             	mov    %rax,%rdi
    5018:	e8 00 00 00 00       	callq  501d <_ZN6Parser8initSemsEv+0x9cd>
    501d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    5020:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5024:	48 89 c7             	mov    %rax,%rdi
    5027:	e8 00 00 00 00       	callq  502c <_ZN6Parser8initSemsEv+0x9dc>
    502c:	48 89 d8             	mov    %rbx,%rax
    502f:	48 89 c7             	mov    %rax,%rdi
    5032:	e8 00 00 00 00       	callq  5037 <_ZN6Parser8initSemsEv+0x9e7>
    5037:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    503a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    503e:	48 89 c7             	mov    %rax,%rdi
    5041:	e8 00 00 00 00       	callq  5046 <_ZN6Parser8initSemsEv+0x9f6>
    5046:	48 89 d8             	mov    %rbx,%rax
    5049:	48 89 c7             	mov    %rax,%rdi
    504c:	e8 00 00 00 00       	callq  5051 <_ZN6Parser8initSemsEv+0xa01>
    5051:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    5054:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5058:	48 89 c7             	mov    %rax,%rdi
    505b:	e8 00 00 00 00       	callq  5060 <_ZN6Parser8initSemsEv+0xa10>
    5060:	48 89 d8             	mov    %rbx,%rax
    5063:	48 89 c7             	mov    %rax,%rdi
    5066:	e8 00 00 00 00       	callq  506b <_ZN6Parser8initSemsEv+0xa1b>
    506b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    506e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5072:	48 89 c7             	mov    %rax,%rdi
    5075:	e8 00 00 00 00       	callq  507a <_ZN6Parser8initSemsEv+0xa2a>
    507a:	48 89 d8             	mov    %rbx,%rax
    507d:	48 89 c7             	mov    %rax,%rdi
    5080:	e8 00 00 00 00       	callq  5085 <_ZN6Parser8initSemsEv+0xa35>
    5085:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    5088:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    508c:	48 89 c7             	mov    %rax,%rdi
    508f:	e8 00 00 00 00       	callq  5094 <_ZN6Parser8initSemsEv+0xa44>
    5094:	48 89 d8             	mov    %rbx,%rax
    5097:	48 89 c7             	mov    %rax,%rdi
    509a:	e8 00 00 00 00       	callq  509f <_ZN6Parser8initSemsEv+0xa4f>
    509f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    50a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50a6:	48 89 c7             	mov    %rax,%rdi
    50a9:	e8 00 00 00 00       	callq  50ae <_ZN6Parser8initSemsEv+0xa5e>
    50ae:	48 89 d8             	mov    %rbx,%rax
    50b1:	48 89 c7             	mov    %rax,%rdi
    50b4:	e8 00 00 00 00       	callq  50b9 <_ZN6Parser8initSemsEv+0xa69>
    50b9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    50bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50c0:	48 89 c7             	mov    %rax,%rdi
    50c3:	e8 00 00 00 00       	callq  50c8 <_ZN6Parser8initSemsEv+0xa78>
    50c8:	48 89 d8             	mov    %rbx,%rax
    50cb:	48 89 c7             	mov    %rax,%rdi
    50ce:	e8 00 00 00 00       	callq  50d3 <_ZN6Parser8initSemsEv+0xa83>
    50d3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    50d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50da:	48 89 c7             	mov    %rax,%rdi
    50dd:	e8 00 00 00 00       	callq  50e2 <_ZN6Parser8initSemsEv+0xa92>
    50e2:	48 89 d8             	mov    %rbx,%rax
    50e5:	48 89 c7             	mov    %rax,%rdi
    50e8:	e8 00 00 00 00       	callq  50ed <_ZN6Parser8initSemsEv+0xa9d>
    50ed:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    50f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    50f4:	48 89 c7             	mov    %rax,%rdi
    50f7:	e8 00 00 00 00       	callq  50fc <_ZN6Parser8initSemsEv+0xaac>
    50fc:	48 89 d8             	mov    %rbx,%rax
    50ff:	48 89 c7             	mov    %rax,%rdi
    5102:	e8 00 00 00 00       	callq  5107 <_ZN6Parser8initSemsEv+0xab7>
    5107:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    510a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    510e:	48 89 c7             	mov    %rax,%rdi
    5111:	e8 00 00 00 00       	callq  5116 <_ZN6Parser8initSemsEv+0xac6>
    5116:	48 89 d8             	mov    %rbx,%rax
    5119:	48 89 c7             	mov    %rax,%rdi
    511c:	e8 00 00 00 00       	callq  5121 <_ZN6Parser8initSemsEv+0xad1>
    5121:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    5124:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5128:	48 89 c7             	mov    %rax,%rdi
    512b:	e8 00 00 00 00       	callq  5130 <_ZN6Parser8initSemsEv+0xae0>
    5130:	48 89 d8             	mov    %rbx,%rax
    5133:	48 89 c7             	mov    %rax,%rdi
    5136:	e8 00 00 00 00       	callq  513b <_ZN6Parser8initSemsEv+0xaeb>
    513b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    513e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5142:	48 89 c7             	mov    %rax,%rdi
    5145:	e8 00 00 00 00       	callq  514a <_ZN6Parser8initSemsEv+0xafa>
    514a:	48 89 d8             	mov    %rbx,%rax
    514d:	48 89 c7             	mov    %rax,%rdi
    5150:	e8 00 00 00 00       	callq  5155 <_ZN6Parser8initSemsEv+0xb05>
    5155:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    5158:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    515c:	48 89 c7             	mov    %rax,%rdi
    515f:	e8 00 00 00 00       	callq  5164 <_ZN6Parser8initSemsEv+0xb14>
    5164:	48 89 d8             	mov    %rbx,%rax
    5167:	48 89 c7             	mov    %rax,%rdi
    516a:	e8 00 00 00 00       	callq  516f <_ZN6Parser8initSemsEv+0xb1f>
    516f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    5172:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5176:	48 89 c7             	mov    %rax,%rdi
    5179:	e8 00 00 00 00       	callq  517e <_ZN6Parser8initSemsEv+0xb2e>
    517e:	48 89 d8             	mov    %rbx,%rax
    5181:	48 89 c7             	mov    %rax,%rdi
    5184:	e8 00 00 00 00       	callq  5189 <_ZN6Parser8initSemsEv+0xb39>

}
    5189:	e8 00 00 00 00       	callq  518e <_ZN6Parser8initSemsEv+0xb3e>
    518e:	48 83 c4 38          	add    $0x38,%rsp
    5192:	5b                   	pop    %rbx
    5193:	5d                   	pop    %rbp
    5194:	c3                   	retq   
    5195:	90                   	nop

0000000000005196 <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    5196:	55                   	push   %rbp
    5197:	48 89 e5             	mov    %rsp,%rbp
    519a:	53                   	push   %rbx
    519b:	48 83 ec 48          	sub    $0x48,%rsp
    519f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    51a3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    51aa:	00 00 
    51ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    51b0:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    51b2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    51b6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 51bd <_ZN6Parser10testCase01Ev+0x27>
    51bd:	48 89 c7             	mov    %rax,%rdi
    51c0:	e8 00 00 00 00       	callq  51c5 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    51c5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51c9:	48 89 c7             	mov    %rax,%rdi
    51cc:	e8 00 00 00 00       	callq  51d1 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    51d1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    51d5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51d9:	48 89 d6             	mov    %rdx,%rsi
    51dc:	48 89 c7             	mov    %rax,%rdi
    51df:	e8 00 00 00 00       	callq  51e4 <_ZN6Parser10testCase01Ev+0x4e>
    51e4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    51e8:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    51ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    51f0:	48 89 ce             	mov    %rcx,%rsi
    51f3:	48 89 c7             	mov    %rax,%rdi
    51f6:	e8 00 00 00 00       	callq  51fb <_ZN6Parser10testCase01Ev+0x65>
    51fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51ff:	48 89 c7             	mov    %rax,%rdi
    5202:	e8 00 00 00 00       	callq  5207 <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    5207:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    520b:	48 89 c7             	mov    %rax,%rdi
    520e:	e8 00 00 00 00       	callq  5213 <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    5213:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5217:	48 89 c7             	mov    %rax,%rdi
    521a:	e8 00 00 00 00       	callq  521f <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    521f:	90                   	nop
    5220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5224:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    522b:	00 00 
    522d:	74 43                	je     5272 <_ZN6Parser10testCase01Ev+0xdc>
    522f:	eb 3c                	jmp    526d <_ZN6Parser10testCase01Ev+0xd7>
    5231:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    5234:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5238:	48 89 c7             	mov    %rax,%rdi
    523b:	e8 00 00 00 00       	callq  5240 <_ZN6Parser10testCase01Ev+0xaa>
    5240:	eb 03                	jmp    5245 <_ZN6Parser10testCase01Ev+0xaf>
    5242:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    5245:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5249:	48 89 c7             	mov    %rax,%rdi
    524c:	e8 00 00 00 00       	callq  5251 <_ZN6Parser10testCase01Ev+0xbb>
    5251:	eb 03                	jmp    5256 <_ZN6Parser10testCase01Ev+0xc0>
    5253:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    5256:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    525a:	48 89 c7             	mov    %rax,%rdi
    525d:	e8 00 00 00 00       	callq  5262 <_ZN6Parser10testCase01Ev+0xcc>
    5262:	48 89 d8             	mov    %rbx,%rax
    5265:	48 89 c7             	mov    %rax,%rdi
    5268:	e8 00 00 00 00       	callq  526d <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    526d:	e8 00 00 00 00       	callq  5272 <_ZN6Parser10testCase01Ev+0xdc>
    5272:	48 83 c4 48          	add    $0x48,%rsp
    5276:	5b                   	pop    %rbx
    5277:	5d                   	pop    %rbp
    5278:	c3                   	retq   
    5279:	90                   	nop

000000000000527a <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    527a:	55                   	push   %rbp
    527b:	48 89 e5             	mov    %rsp,%rbp
    527e:	53                   	push   %rbx
    527f:	48 83 ec 48          	sub    $0x48,%rsp
    5283:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    5287:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    528e:	00 00 
    5290:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5294:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    5296:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    529a:	48 83 c0 50          	add    $0x50,%rax
    529e:	48 89 c7             	mov    %rax,%rdi
    52a1:	e8 00 00 00 00       	callq  52a6 <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    52a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    52aa:	48 05 90 00 00 00    	add    $0x90,%rax
    52b0:	48 89 c7             	mov    %rax,%rdi
    52b3:	e8 00 00 00 00       	callq  52b8 <_ZN6Parser8HWStoHexEv+0x3e>
    52b8:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    52bb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    52c2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    52c9:	8b 45 c8             	mov    -0x38(%rbp),%eax
    52cc:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    52cf:	0f 8d 0e 01 00 00    	jge    53e3 <_ZN6Parser8HWStoHexEv+0x169>
        unsigned char c = this->hwSequenceCompiled.at(i);
    52d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    52d9:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    52e0:	8b 45 c8             	mov    -0x38(%rbp),%eax
    52e3:	89 c6                	mov    %eax,%esi
    52e5:	48 89 d7             	mov    %rdx,%rdi
    52e8:	e8 00 00 00 00       	callq  52ed <_ZN6Parser8HWStoHexEv+0x73>
    52ed:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    52f0:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    52f4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52f8:	ba 10 00 00 00       	mov    $0x10,%edx
    52fd:	89 ce                	mov    %ecx,%esi
    52ff:	48 89 c7             	mov    %rax,%rdi
    5302:	e8 00 00 00 00       	callq  5307 <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    5307:	8b 45 c8             	mov    -0x38(%rbp),%eax
    530a:	83 e0 07             	and    $0x7,%eax
    530d:	85 c0                	test   %eax,%eax
    530f:	75 17                	jne    5328 <_ZN6Parser8HWStoHexEv+0xae>
    5311:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5315:	48 83 c0 50          	add    $0x50,%rax
    5319:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5320 <_ZN6Parser8HWStoHexEv+0xa6>
    5320:	48 89 c7             	mov    %rax,%rdi
    5323:	e8 00 00 00 00       	callq  5328 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    5328:	8b 45 c8             	mov    -0x38(%rbp),%eax
    532b:	83 e0 0f             	and    $0xf,%eax
    532e:	85 c0                	test   %eax,%eax
    5330:	75 17                	jne    5349 <_ZN6Parser8HWStoHexEv+0xcf>
    5332:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5336:	48 83 c0 50          	add    $0x50,%rax
    533a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5341 <_ZN6Parser8HWStoHexEv+0xc7>
    5341:	48 89 c7             	mov    %rax,%rdi
    5344:	e8 00 00 00 00       	callq  5349 <_ZN6Parser8HWStoHexEv+0xcf>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    5349:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    534d:	77 17                	ja     5366 <_ZN6Parser8HWStoHexEv+0xec>
    534f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5353:	48 83 c0 50          	add    $0x50,%rax
    5357:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 535e <_ZN6Parser8HWStoHexEv+0xe4>
    535e:	48 89 c7             	mov    %rax,%rdi
    5361:	e8 00 00 00 00       	callq  5366 <_ZN6Parser8HWStoHexEv+0xec>
        this->hwSequenceCompiledHex.append(hex + " ");
    5366:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    536a:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    536e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5375 <_ZN6Parser8HWStoHexEv+0xfb>
    5375:	48 89 ce             	mov    %rcx,%rsi
    5378:	48 89 c7             	mov    %rax,%rdi
    537b:	e8 00 00 00 00       	callq  5380 <_ZN6Parser8HWStoHexEv+0x106>
    5380:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5384:	48 8d 50 50          	lea    0x50(%rax),%rdx
    5388:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    538c:	48 89 c6             	mov    %rax,%rsi
    538f:	48 89 d7             	mov    %rdx,%rdi
    5392:	e8 00 00 00 00       	callq  5397 <_ZN6Parser8HWStoHexEv+0x11d>
    5397:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    539b:	48 89 c7             	mov    %rax,%rdi
    539e:	e8 00 00 00 00       	callq  53a3 <_ZN6Parser8HWStoHexEv+0x129>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    53a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    53a7:	48 89 c7             	mov    %rax,%rdi
    53aa:	e8 00 00 00 00       	callq  53af <_ZN6Parser8HWStoHexEv+0x135>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    53af:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    53b3:	e9 11 ff ff ff       	jmpq   52c9 <_ZN6Parser8HWStoHexEv+0x4f>
    53b8:	48 89 c3             	mov    %rax,%rbx
        QString hex = QString::number(c, 16);

        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    53bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    53bf:	48 89 c7             	mov    %rax,%rdi
    53c2:	e8 00 00 00 00       	callq  53c7 <_ZN6Parser8HWStoHexEv+0x14d>
    53c7:	eb 03                	jmp    53cc <_ZN6Parser8HWStoHexEv+0x152>
    53c9:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    53cc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    53d0:	48 89 c7             	mov    %rax,%rdi
    53d3:	e8 00 00 00 00       	callq  53d8 <_ZN6Parser8HWStoHexEv+0x15e>
    53d8:	48 89 d8             	mov    %rbx,%rax
    53db:	48 89 c7             	mov    %rax,%rdi
    53de:	e8 00 00 00 00       	callq  53e3 <_ZN6Parser8HWStoHexEv+0x169>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    53e3:	90                   	nop
    53e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53e8:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    53ef:	00 00 
    53f1:	74 05                	je     53f8 <_ZN6Parser8HWStoHexEv+0x17e>
    53f3:	e8 00 00 00 00       	callq  53f8 <_ZN6Parser8HWStoHexEv+0x17e>
    53f8:	48 83 c4 48          	add    $0x48,%rsp
    53fc:	5b                   	pop    %rbx
    53fd:	5d                   	pop    %rbp
    53fe:	c3                   	retq   
    53ff:	90                   	nop

0000000000005400 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    5400:	55                   	push   %rbp
    5401:	48 89 e5             	mov    %rsp,%rbp
    5404:	53                   	push   %rbx
    5405:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    540c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
    5413:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    541a:	00 00 
    541c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5420:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    5422:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5429:	48 89 c7             	mov    %rax,%rdi
    542c:	e8 00 00 00 00       	callq  5431 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    5431:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5438:	48 89 c7             	mov    %rax,%rdi
    543b:	e8 00 00 00 00       	callq  5440 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    5440:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5447:	48 89 c7             	mov    %rax,%rdi
    544a:	e8 00 00 00 00       	callq  544f <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    544f:	c6 85 14 ff ff ff ff 	movb   $0xff,-0xec(%rbp)
    char HWS_OPCODE  = 0x06;
    5456:	c6 85 15 ff ff ff 06 	movb   $0x6,-0xeb(%rbp)

    this->hwSequenceCompiled.append(blockCounter);
    545d:	0f be 85 14 ff ff ff 	movsbl -0xec(%rbp),%eax
    5464:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    546b:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5472:	89 c6                	mov    %eax,%esi
    5474:	48 89 d7             	mov    %rdx,%rdi
    5477:	e8 00 00 00 00       	callq  547c <_ZN6Parser10compileHWSEv+0x7c>
    this->hwSequenceCompiled.append(HWS_OPCODE);
    547c:	0f be 85 15 ff ff ff 	movsbl -0xeb(%rbp),%eax
    5483:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    548a:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5491:	89 c6                	mov    %eax,%esi
    5493:	48 89 d7             	mov    %rdx,%rdi
    5496:	e8 00 00 00 00       	callq  549b <_ZN6Parser10compileHWSEv+0x9b>
    quint16 CRC16       = 0; // не обнуляется в цикле.
    549b:	66 c7 85 18 ff ff ff 	movw   $0x0,-0xe8(%rbp)
    54a2:	00 00 

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    54a4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    54ab:	48 05 88 00 00 00    	add    $0x88,%rax
    54b1:	48 89 c7             	mov    %rax,%rdi
    54b4:	e8 00 00 00 00       	callq  54b9 <_ZN6Parser10compileHWSEv+0xb9>
    54b9:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    54c0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    54c7:	48 05 88 00 00 00    	add    $0x88,%rax
    54cd:	48 89 c7             	mov    %rax,%rdi
    54d0:	e8 00 00 00 00       	callq  54d5 <_ZN6Parser10compileHWSEv+0xd5>
    54d5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    54d9:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    54dd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    54e4:	48 89 d6             	mov    %rdx,%rsi
    54e7:	48 89 c7             	mov    %rax,%rdi
    54ea:	e8 00 00 00 00       	callq  54ef <_ZN6Parser10compileHWSEv+0xef>
    54ef:	84 c0                	test   %al,%al
    54f1:	0f 84 04 05 00 00    	je     59fb <_ZN6Parser10compileHWSEv+0x5fb>
        content         = it.value();
    54f7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    54fe:	48 89 c7             	mov    %rax,%rdi
    5501:	e8 00 00 00 00       	callq  5506 <_ZN6Parser10compileHWSEv+0x106>
    5506:	48 89 c2             	mov    %rax,%rdx
    5509:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5510:	48 89 d6             	mov    %rdx,%rsi
    5513:	48 89 c7             	mov    %rax,%rdi
    5516:	e8 00 00 00 00       	callq  551b <_ZN6Parser10compileHWSEv+0x11b>
        hwSequenceID    = it.key();
    551b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5522:	48 89 c7             	mov    %rax,%rdi
    5525:	e8 00 00 00 00       	callq  552a <_ZN6Parser10compileHWSEv+0x12a>
    552a:	48 89 c2             	mov    %rax,%rdx
    552d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5534:	48 89 d6             	mov    %rdx,%rsi
    5537:	48 89 c7             	mov    %rax,%rdi
    553a:	e8 00 00 00 00       	callq  553f <_ZN6Parser10compileHWSEv+0x13f>
        quint16 counter     = 0;
    553f:	66 c7 85 1a ff ff ff 	movw   $0x0,-0xe6(%rbp)
    5546:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    5548:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    554f:	48 8d 48 28          	lea    0x28(%rax),%rcx
    5553:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    555a:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    5561:	48 89 ce             	mov    %rcx,%rsi
    5564:	48 89 c7             	mov    %rax,%rdi
    5567:	e8 00 00 00 00       	callq  556c <_ZN6Parser10compileHWSEv+0x16c>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    556c:	48 8d 8d 12 ff ff ff 	lea    -0xee(%rbp),%rcx
    5573:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    557a:	ba 10 00 00 00       	mov    $0x10,%edx
    557f:	48 89 ce             	mov    %rcx,%rsi
    5582:	48 89 c7             	mov    %rax,%rdi
    5585:	e8 00 00 00 00       	callq  558a <_ZN6Parser10compileHWSEv+0x18a>
    558a:	66 89 85 1c ff ff ff 	mov    %ax,-0xe4(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    5591:	0f b7 85 1c ff ff ff 	movzwl -0xe4(%rbp),%eax
    5598:	0f be c0             	movsbl %al,%eax
    559b:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    55a2:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    55a9:	89 c6                	mov    %eax,%esi
    55ab:	48 89 d7             	mov    %rdx,%rdi
    55ae:	e8 00 00 00 00       	callq  55b3 <_ZN6Parser10compileHWSEv+0x1b3>
        this->hwSequenceCompiled.append(HWSID/256);
    55b3:	0f b7 85 1c ff ff ff 	movzwl -0xe4(%rbp),%eax
    55ba:	66 c1 e8 08          	shr    $0x8,%ax
    55be:	0f be c0             	movsbl %al,%eax
    55c1:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    55c8:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    55cf:	89 c6                	mov    %eax,%esi
    55d1:	48 89 d7             	mov    %rdx,%rdi
    55d4:	e8 00 00 00 00       	callq  55d9 <_ZN6Parser10compileHWSEv+0x1d9>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    55d9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    55e0:	48 05 90 00 00 00    	add    $0x90,%rax
    55e6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 55ed <_ZN6Parser10compileHWSEv+0x1ed>
    55ed:	48 89 c7             	mov    %rax,%rdi
    55f0:	e8 00 00 00 00       	callq  55f5 <_ZN6Parser10compileHWSEv+0x1f5>

        int i;
        int n = content.size();
    55f5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    55fc:	48 89 c7             	mov    %rax,%rdi
    55ff:	e8 00 00 00 00       	callq  5604 <_ZN6Parser10compileHWSEv+0x204>
    5604:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    560a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    560e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5615 <_ZN6Parser10compileHWSEv+0x215>
    5615:	48 89 c7             	mov    %rax,%rdi
    5618:	e8 00 00 00 00       	callq  561d <_ZN6Parser10compileHWSEv+0x21d>
    561d:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    5621:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5628:	b9 00 00 00 00       	mov    $0x0,%ecx
    562d:	ba 01 00 00 00       	mov    $0x1,%edx
    5632:	48 89 c7             	mov    %rax,%rdi
    5635:	e8 00 00 00 00       	callq  563a <_ZN6Parser10compileHWSEv+0x23a>
    563a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    563e:	48 89 c7             	mov    %rax,%rdi
    5641:	e8 00 00 00 00       	callq  5646 <_ZN6Parser10compileHWSEv+0x246>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    5646:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    564a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5651 <_ZN6Parser10compileHWSEv+0x251>
    5651:	48 89 c7             	mov    %rax,%rdi
    5654:	e8 00 00 00 00       	callq  5659 <_ZN6Parser10compileHWSEv+0x259>
    5659:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    565d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5661:	b9 00 00 00 00       	mov    $0x0,%ecx
    5666:	ba 01 00 00 00       	mov    $0x1,%edx
    566b:	48 89 c7             	mov    %rax,%rdi
    566e:	e8 00 00 00 00       	callq  5673 <_ZN6Parser10compileHWSEv+0x273>
    5673:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5677:	48 89 c7             	mov    %rax,%rdi
    567a:	e8 00 00 00 00       	callq  567f <_ZN6Parser10compileHWSEv+0x27f>

        QString line;
    567f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5683:	48 89 c7             	mov    %rax,%rdi
    5686:	e8 00 00 00 00       	callq  568b <_ZN6Parser10compileHWSEv+0x28b>

        for(i=0;i<n;i++){
    568b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%rbp)
    5692:	00 00 00 
    5695:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    569b:	3b 85 24 ff ff ff    	cmp    -0xdc(%rbp),%eax
    56a1:	0f 8d 0a 03 00 00    	jge    59b1 <_ZN6Parser10compileHWSEv+0x5b1>
            line = content.at(i);
    56a7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx
    56ad:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    56b4:	89 d6                	mov    %edx,%esi
    56b6:	48 89 c7             	mov    %rax,%rdi
    56b9:	e8 00 00 00 00       	callq  56be <_ZN6Parser10compileHWSEv+0x2be>
    56be:	48 89 c2             	mov    %rax,%rdx
    56c1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    56c5:	48 89 d6             	mov    %rdx,%rsi
    56c8:	48 89 c7             	mov    %rax,%rdi
    56cb:	e8 00 00 00 00       	callq  56d0 <_ZN6Parser10compileHWSEv+0x2d0>
            this->strings.append(line); // DEL!
    56d0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    56d7:	48 8d 50 68          	lea    0x68(%rax),%rdx
    56db:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    56df:	48 89 c6             	mov    %rax,%rsi
    56e2:	48 89 d7             	mov    %rdx,%rdi
    56e5:	e8 00 00 00 00       	callq  56ea <_ZN6Parser10compileHWSEv+0x2ea>
            int a = QRAnchor.indexIn(line);
    56ea:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    56ee:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    56f5:	b9 00 00 00 00       	mov    $0x0,%ecx
    56fa:	ba 00 00 00 00       	mov    $0x0,%edx
    56ff:	48 89 c7             	mov    %rax,%rdi
    5702:	e8 00 00 00 00       	callq  5707 <_ZN6Parser10compileHWSEv+0x307>
    5707:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
            int d = QRDefinition.indexIn(line);
    570d:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    5711:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5715:	b9 00 00 00 00       	mov    $0x0,%ecx
    571a:	ba 00 00 00 00       	mov    $0x0,%edx
    571f:	48 89 c7             	mov    %rax,%rdi
    5722:	e8 00 00 00 00       	callq  5727 <_ZN6Parser10compileHWSEv+0x327>
    5727:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    572d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5731:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5738:	48 89 d6             	mov    %rdx,%rsi
    573b:	48 89 c7             	mov    %rax,%rdi
    573e:	e8 00 00 00 00       	callq  5743 <_ZN6Parser10compileHWSEv+0x343>
            QStringList definitions  = QRDefinition.capturedTexts();
    5743:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5747:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    574b:	48 89 d6             	mov    %rdx,%rsi
    574e:	48 89 c7             	mov    %rax,%rdi
    5751:	e8 00 00 00 00       	callq  5756 <_ZN6Parser10compileHWSEv+0x356>

            if(a>0){
    5756:	83 bd 28 ff ff ff 00 	cmpl   $0x0,-0xd8(%rbp)
    575d:	0f 8e 8a 00 00 00    	jle    57ed <_ZN6Parser10compileHWSEv+0x3ed>
                CRC16++;
    5763:	0f b7 85 18 ff ff ff 	movzwl -0xe8(%rbp),%eax
    576a:	83 c0 01             	add    $0x1,%eax
    576d:	66 89 85 18 ff ff ff 	mov    %ax,-0xe8(%rbp)
                counter++;
    5774:	0f b7 85 1a ff ff ff 	movzwl -0xe6(%rbp),%eax
    577b:	83 c0 01             	add    $0x1,%eax
    577e:	66 89 85 1a ff ff ff 	mov    %ax,-0xe6(%rbp)
                this->strings.append("anchor");
    5785:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5789:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5790 <_ZN6Parser10compileHWSEv+0x390>
    5790:	48 89 c7             	mov    %rax,%rdi
    5793:	e8 00 00 00 00       	callq  5798 <_ZN6Parser10compileHWSEv+0x398>
    5798:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    579f:	48 8d 50 68          	lea    0x68(%rax),%rdx
    57a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    57a7:	48 89 c6             	mov    %rax,%rsi
    57aa:	48 89 d7             	mov    %rdx,%rdi
    57ad:	e8 00 00 00 00       	callq  57b2 <_ZN6Parser10compileHWSEv+0x3b2>
    57b2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    57b6:	48 89 c7             	mov    %rax,%rdi
    57b9:	e8 00 00 00 00       	callq  57be <_ZN6Parser10compileHWSEv+0x3be>
                QString anchor = anchors.at(1);
    57be:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    57c2:	be 01 00 00 00       	mov    $0x1,%esi
    57c7:	48 89 c7             	mov    %rax,%rdi
    57ca:	e8 00 00 00 00       	callq  57cf <_ZN6Parser10compileHWSEv+0x3cf>
    57cf:	48 89 c2             	mov    %rax,%rdx
    57d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57d6:	48 89 d6             	mov    %rdx,%rsi
    57d9:	48 89 c7             	mov    %rax,%rdi
    57dc:	e8 00 00 00 00       	callq  57e1 <_ZN6Parser10compileHWSEv+0x3e1>
    57e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    57e5:	48 89 c7             	mov    %rax,%rdi
    57e8:	e8 00 00 00 00       	callq  57ed <_ZN6Parser10compileHWSEv+0x3ed>
            }

            if(d>0){
    57ed:	83 bd 2c ff ff ff 00 	cmpl   $0x0,-0xd4(%rbp)
    57f4:	0f 8e 93 01 00 00    	jle    598d <_ZN6Parser10compileHWSEv+0x58d>
                CRC16++;
    57fa:	0f b7 85 18 ff ff ff 	movzwl -0xe8(%rbp),%eax
    5801:	83 c0 01             	add    $0x1,%eax
    5804:	66 89 85 18 ff ff ff 	mov    %ax,-0xe8(%rbp)
                counter++;
    580b:	0f b7 85 1a ff ff ff 	movzwl -0xe6(%rbp),%eax
    5812:	83 c0 01             	add    $0x1,%eax
    5815:	66 89 85 1a ff ff ff 	mov    %ax,-0xe6(%rbp)
                this->strings.append("definition");
    581c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5820:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5827 <_ZN6Parser10compileHWSEv+0x427>
    5827:	48 89 c7             	mov    %rax,%rdi
    582a:	e8 00 00 00 00       	callq  582f <_ZN6Parser10compileHWSEv+0x42f>
    582f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    5836:	48 8d 50 68          	lea    0x68(%rax),%rdx
    583a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    583e:	48 89 c6             	mov    %rax,%rsi
    5841:	48 89 d7             	mov    %rdx,%rdi
    5844:	e8 00 00 00 00       	callq  5849 <_ZN6Parser10compileHWSEv+0x449>
    5849:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    584d:	48 89 c7             	mov    %rax,%rdi
    5850:	e8 00 00 00 00       	callq  5855 <_ZN6Parser10compileHWSEv+0x455>
                QString strModuleID         = definitions.at(1);
    5855:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5859:	be 01 00 00 00       	mov    $0x1,%esi
    585e:	48 89 c7             	mov    %rax,%rdi
    5861:	e8 00 00 00 00       	callq  5866 <_ZN6Parser10compileHWSEv+0x466>
    5866:	48 89 c2             	mov    %rax,%rdx
    5869:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    586d:	48 89 d6             	mov    %rdx,%rsi
    5870:	48 89 c7             	mov    %rax,%rdi
    5873:	e8 00 00 00 00       	callq  5878 <_ZN6Parser10compileHWSEv+0x478>
                QString strModulePosition   = definitions.at(2);
    5878:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    587c:	be 02 00 00 00       	mov    $0x2,%esi
    5881:	48 89 c7             	mov    %rax,%rdi
    5884:	e8 00 00 00 00       	callq  5889 <_ZN6Parser10compileHWSEv+0x489>
    5889:	48 89 c2             	mov    %rax,%rdx
    588c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5890:	48 89 d6             	mov    %rdx,%rsi
    5893:	48 89 c7             	mov    %rax,%rdi
    5896:	e8 00 00 00 00       	callq  589b <_ZN6Parser10compileHWSEv+0x49b>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    589b:	c6 85 16 ff ff ff 00 	movb   $0x0,-0xea(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    58a2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    58a9:	48 8d 48 28          	lea    0x28(%rax),%rcx
    58ad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58b1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    58b5:	48 89 ce             	mov    %rcx,%rsi
    58b8:	48 89 c7             	mov    %rax,%rdi
    58bb:	e8 00 00 00 00       	callq  58c0 <_ZN6Parser10compileHWSEv+0x4c0>
    58c0:	48 8d 8d 13 ff ff ff 	lea    -0xed(%rbp),%rcx
    58c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58cb:	ba 10 00 00 00       	mov    $0x10,%edx
    58d0:	48 89 ce             	mov    %rcx,%rsi
    58d3:	48 89 c7             	mov    %rax,%rdi
    58d6:	e8 00 00 00 00       	callq  58db <_ZN6Parser10compileHWSEv+0x4db>
    58db:	88 85 17 ff ff ff    	mov    %al,-0xe9(%rbp)
    58e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    58e5:	48 89 c7             	mov    %rax,%rdi
    58e8:	e8 00 00 00 00       	callq  58ed <_ZN6Parser10compileHWSEv+0x4ed>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    58ed:	48 8d 8d 13 ff ff ff 	lea    -0xed(%rbp),%rcx
    58f4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    58f8:	ba 0a 00 00 00       	mov    $0xa,%edx
    58fd:	48 89 ce             	mov    %rcx,%rsi
    5900:	48 89 c7             	mov    %rax,%rdi
    5903:	e8 00 00 00 00       	callq  5908 <_ZN6Parser10compileHWSEv+0x508>
    5908:	66 89 85 1e ff ff ff 	mov    %ax,-0xe2(%rbp)

                this->hwSequenceCompiled.append(moduleHWID);
    590f:	0f b6 85 16 ff ff ff 	movzbl -0xea(%rbp),%eax
    5916:	0f be c0             	movsbl %al,%eax
    5919:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    5920:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5927:	89 c6                	mov    %eax,%esi
    5929:	48 89 d7             	mov    %rdx,%rdi
    592c:	e8 00 00 00 00       	callq  5931 <_ZN6Parser10compileHWSEv+0x531>
                this->hwSequenceCompiled.append(moduleID);
    5931:	0f b6 85 17 ff ff ff 	movzbl -0xe9(%rbp),%eax
    5938:	0f be c0             	movsbl %al,%eax
    593b:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    5942:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    5949:	89 c6                	mov    %eax,%esi
    594b:	48 89 d7             	mov    %rdx,%rdi
    594e:	e8 00 00 00 00       	callq  5953 <_ZN6Parser10compileHWSEv+0x553>
                this->hwSequenceCompiled.append(modulePosition);
    5953:	0f b7 85 1e ff ff ff 	movzwl -0xe2(%rbp),%eax
    595a:	0f be c0             	movsbl %al,%eax
    595d:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    5964:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    596b:	89 c6                	mov    %eax,%esi
    596d:	48 89 d7             	mov    %rdx,%rdi
    5970:	e8 00 00 00 00       	callq  5975 <_ZN6Parser10compileHWSEv+0x575>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    5975:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5979:	48 89 c7             	mov    %rax,%rdi
    597c:	e8 00 00 00 00       	callq  5981 <_ZN6Parser10compileHWSEv+0x581>

            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    5981:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5985:	48 89 c7             	mov    %rax,%rdi
    5988:	e8 00 00 00 00       	callq  598d <_ZN6Parser10compileHWSEv+0x58d>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    598d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5991:	48 89 c7             	mov    %rax,%rdi
    5994:	e8 00 00 00 00       	callq  5999 <_ZN6Parser10compileHWSEv+0x599>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    5999:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    599d:	48 89 c7             	mov    %rax,%rdi
    59a0:	e8 00 00 00 00       	callq  59a5 <_ZN6Parser10compileHWSEv+0x5a5>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    59a5:	83 85 20 ff ff ff 01 	addl   $0x1,-0xe0(%rbp)
    59ac:	e9 e4 fc ff ff       	jmpq   5695 <_ZN6Parser10compileHWSEv+0x295>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    59b1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 00 00 00 00       	callq  59bd <_ZN6Parser10compileHWSEv+0x5bd>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    59bd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59c1:	48 89 c7             	mov    %rax,%rdi
    59c4:	e8 00 00 00 00       	callq  59c9 <_ZN6Parser10compileHWSEv+0x5c9>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    59c9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    59d0:	48 89 c7             	mov    %rax,%rdi
    59d3:	e8 00 00 00 00       	callq  59d8 <_ZN6Parser10compileHWSEv+0x5d8>
    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    59d8:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    59df:	48 89 c7             	mov    %rax,%rdi
    59e2:	e8 00 00 00 00       	callq  59e7 <_ZN6Parser10compileHWSEv+0x5e7>

    this->hwSequenceCompiled.append(blockCounter);
    this->hwSequenceCompiled.append(HWS_OPCODE);
    quint16 CRC16       = 0; // не обнуляется в цикле.

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    59e7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    59ee:	48 89 c7             	mov    %rax,%rdi
    59f1:	e8 00 00 00 00       	callq  59f6 <_ZN6Parser10compileHWSEv+0x5f6>
    59f6:	e9 c5 fa ff ff       	jmpq   54c0 <_ZN6Parser10compileHWSEv+0xc0>
            }
        }
    }


    HWStoHex();
    59fb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    5a02:	48 89 c7             	mov    %rax,%rdi
    5a05:	e8 00 00 00 00       	callq  5a0a <_ZN6Parser10compileHWSEv+0x60a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    5a0a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5a11:	48 89 c7             	mov    %rax,%rdi
    5a14:	e8 00 00 00 00       	callq  5a19 <_ZN6Parser10compileHWSEv+0x619>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    5a19:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5a20:	48 89 c7             	mov    %rax,%rdi
    5a23:	e8 00 00 00 00       	callq  5a28 <_ZN6Parser10compileHWSEv+0x628>
        }
    }


    HWStoHex();
}
    5a28:	90                   	nop
    5a29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a2d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5a34:	00 00 
    5a36:	0f 84 4f 01 00 00    	je     5b8b <_ZN6Parser10compileHWSEv+0x78b>
    5a3c:	e9 45 01 00 00       	jmpq   5b86 <_ZN6Parser10compileHWSEv+0x786>
    5a41:	48 89 c3             	mov    %rax,%rbx
    5a44:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a48:	48 89 c7             	mov    %rax,%rdi
    5a4b:	e8 00 00 00 00       	callq  5a50 <_ZN6Parser10compileHWSEv+0x650>
    5a50:	e9 ef 00 00 00       	jmpq   5b44 <_ZN6Parser10compileHWSEv+0x744>
    5a55:	48 89 c3             	mov    %rax,%rbx
    5a58:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5a5f:	48 89 c7             	mov    %rax,%rdi
    5a62:	e8 00 00 00 00       	callq  5a67 <_ZN6Parser10compileHWSEv+0x667>
    5a67:	e9 d8 00 00 00       	jmpq   5b44 <_ZN6Parser10compileHWSEv+0x744>
    5a6c:	48 89 c3             	mov    %rax,%rbx
    5a6f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a73:	48 89 c7             	mov    %rax,%rdi
    5a76:	e8 00 00 00 00       	callq  5a7b <_ZN6Parser10compileHWSEv+0x67b>
    5a7b:	e9 b0 00 00 00       	jmpq   5b30 <_ZN6Parser10compileHWSEv+0x730>
    5a80:	48 89 c3             	mov    %rax,%rbx
    5a83:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5a87:	48 89 c7             	mov    %rax,%rdi
    5a8a:	e8 00 00 00 00       	callq  5a8f <_ZN6Parser10compileHWSEv+0x68f>
    5a8f:	e9 9c 00 00 00       	jmpq   5b30 <_ZN6Parser10compileHWSEv+0x730>
    5a94:	48 89 c3             	mov    %rax,%rbx
            QStringList definitions  = QRDefinition.capturedTexts();

            if(a>0){
                CRC16++;
                counter++;
                this->strings.append("anchor");
    5a97:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a9b:	48 89 c7             	mov    %rax,%rdi
    5a9e:	e8 00 00 00 00       	callq  5aa3 <_ZN6Parser10compileHWSEv+0x6a3>
    5aa3:	eb 47                	jmp    5aec <_ZN6Parser10compileHWSEv+0x6ec>
    5aa5:	48 89 c3             	mov    %rax,%rbx
            }

            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    5aa8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5aac:	48 89 c7             	mov    %rax,%rdi
    5aaf:	e8 00 00 00 00       	callq  5ab4 <_ZN6Parser10compileHWSEv+0x6b4>
    5ab4:	eb 36                	jmp    5aec <_ZN6Parser10compileHWSEv+0x6ec>
    5ab6:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    5ab9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5abd:	48 89 c7             	mov    %rax,%rdi
    5ac0:	e8 00 00 00 00       	callq  5ac5 <_ZN6Parser10compileHWSEv+0x6c5>
    5ac5:	eb 03                	jmp    5aca <_ZN6Parser10compileHWSEv+0x6ca>
    5ac7:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    5aca:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5ace:	48 89 c7             	mov    %rax,%rdi
    5ad1:	e8 00 00 00 00       	callq  5ad6 <_ZN6Parser10compileHWSEv+0x6d6>
    5ad6:	eb 03                	jmp    5adb <_ZN6Parser10compileHWSEv+0x6db>
    5ad8:	48 89 c3             	mov    %rax,%rbx

            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    5adb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5adf:	48 89 c7             	mov    %rax,%rdi
    5ae2:	e8 00 00 00 00       	callq  5ae7 <_ZN6Parser10compileHWSEv+0x6e7>
    5ae7:	eb 03                	jmp    5aec <_ZN6Parser10compileHWSEv+0x6ec>
    5ae9:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    5aec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5af0:	48 89 c7             	mov    %rax,%rdi
    5af3:	e8 00 00 00 00       	callq  5af8 <_ZN6Parser10compileHWSEv+0x6f8>
    5af8:	eb 03                	jmp    5afd <_ZN6Parser10compileHWSEv+0x6fd>
    5afa:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    5afd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5b01:	48 89 c7             	mov    %rax,%rdi
    5b04:	e8 00 00 00 00       	callq  5b09 <_ZN6Parser10compileHWSEv+0x709>
    5b09:	eb 03                	jmp    5b0e <_ZN6Parser10compileHWSEv+0x70e>
    5b0b:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    5b0e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5b12:	48 89 c7             	mov    %rax,%rdi
    5b15:	e8 00 00 00 00       	callq  5b1a <_ZN6Parser10compileHWSEv+0x71a>
    5b1a:	eb 03                	jmp    5b1f <_ZN6Parser10compileHWSEv+0x71f>
    5b1c:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    5b1f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5b23:	48 89 c7             	mov    %rax,%rdi
    5b26:	e8 00 00 00 00       	callq  5b2b <_ZN6Parser10compileHWSEv+0x72b>
    5b2b:	eb 03                	jmp    5b30 <_ZN6Parser10compileHWSEv+0x730>
    5b2d:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    5b30:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5b37:	48 89 c7             	mov    %rax,%rdi
    5b3a:	e8 00 00 00 00       	callq  5b3f <_ZN6Parser10compileHWSEv+0x73f>
    5b3f:	eb 03                	jmp    5b44 <_ZN6Parser10compileHWSEv+0x744>
    5b41:	48 89 c3             	mov    %rax,%rbx
    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    5b44:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5b4b:	48 89 c7             	mov    %rax,%rdi
    5b4e:	e8 00 00 00 00       	callq  5b53 <_ZN6Parser10compileHWSEv+0x753>
    5b53:	eb 03                	jmp    5b58 <_ZN6Parser10compileHWSEv+0x758>
    5b55:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    5b58:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5b5f:	48 89 c7             	mov    %rax,%rdi
    5b62:	e8 00 00 00 00       	callq  5b67 <_ZN6Parser10compileHWSEv+0x767>
    5b67:	eb 03                	jmp    5b6c <_ZN6Parser10compileHWSEv+0x76c>
    5b69:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    5b6c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b73:	48 89 c7             	mov    %rax,%rdi
    5b76:	e8 00 00 00 00       	callq  5b7b <_ZN6Parser10compileHWSEv+0x77b>
    5b7b:	48 89 d8             	mov    %rbx,%rax
    5b7e:	48 89 c7             	mov    %rax,%rdi
    5b81:	e8 00 00 00 00       	callq  5b86 <_ZN6Parser10compileHWSEv+0x786>
        }
    }


    HWStoHex();
}
    5b86:	e8 00 00 00 00       	callq  5b8b <_ZN6Parser10compileHWSEv+0x78b>
    5b8b:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
    5b92:	5b                   	pop    %rbx
    5b93:	5d                   	pop    %rbp
    5b94:	c3                   	retq   
    5b95:	90                   	nop

0000000000005b96 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    5b96:	55                   	push   %rbp
    5b97:	48 89 e5             	mov    %rsp,%rbp
    5b9a:	53                   	push   %rbx
    5b9b:	48 83 ec 58          	sub    $0x58,%rsp
    5b9f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    5ba3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5baa:	00 00 
    5bac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5bb0:	31 c0                	xor    %eax,%eax

    int i = 0;
    5bb2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    5bb9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    5bbd:	48 83 c0 78          	add    $0x78,%rax
    5bc1:	48 89 c7             	mov    %rax,%rdi
    5bc4:	e8 00 00 00 00       	callq  5bc9 <_ZN6Parser9selectHWSEv+0x33>
    5bc9:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    5bcc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5bd0:	48 89 c7             	mov    %rax,%rdi
    5bd3:	e8 00 00 00 00       	callq  5bd8 <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    5bd8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5bdc:	48 89 c7             	mov    %rax,%rdi
    5bdf:	e8 00 00 00 00       	callq  5be4 <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    5be4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    5be8:	48 83 c0 78          	add    $0x78,%rax
    5bec:	48 89 c7             	mov    %rax,%rdi
    5bef:	e8 00 00 00 00       	callq  5bf4 <_ZN6Parser9selectHWSEv+0x5e>
    5bf4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    5bf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    5bfc:	48 83 c0 78          	add    $0x78,%rax
    5c00:	48 89 c7             	mov    %rax,%rdi
    5c03:	e8 00 00 00 00       	callq  5c08 <_ZN6Parser9selectHWSEv+0x72>
    5c08:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    5c0c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5c10:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c14:	48 89 d6             	mov    %rdx,%rsi
    5c17:	48 89 c7             	mov    %rax,%rdi
    5c1a:	e8 00 00 00 00       	callq  5c1f <_ZN6Parser9selectHWSEv+0x89>
    5c1f:	84 c0                	test   %al,%al
    5c21:	74 50                	je     5c73 <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    5c23:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c27:	48 89 c7             	mov    %rax,%rdi
    5c2a:	e8 00 00 00 00       	callq  5c2f <_ZN6Parser9selectHWSEv+0x99>
    5c2f:	be 00 00 00 00       	mov    $0x0,%esi
    5c34:	48 89 c7             	mov    %rax,%rdi
    5c37:	e8 00 00 00 00       	callq  5c3c <_ZN6Parser9selectHWSEv+0xa6>
    5c3c:	48 89 c2             	mov    %rax,%rdx
    5c3f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c43:	48 89 d6             	mov    %rdx,%rsi
    5c46:	48 89 c7             	mov    %rax,%rdi
    5c49:	e8 00 00 00 00       	callq  5c4e <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    5c4e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    5c52:	48 8d 50 68          	lea    0x68(%rax),%rdx
    5c56:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c5a:	48 89 c6             	mov    %rax,%rsi
    5c5d:	48 89 d7             	mov    %rdx,%rdi
    5c60:	e8 00 00 00 00       	callq  5c65 <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    5c65:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c69:	48 89 c7             	mov    %rax,%rdi
    5c6c:	e8 00 00 00 00       	callq  5c71 <_ZN6Parser9selectHWSEv+0xdb>
    5c71:	eb 85                	jmp    5bf8 <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    5c73:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    5c7a:	8b 45 b8             	mov    -0x48(%rbp),%eax
    5c7d:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    5c80:	7d 06                	jge    5c88 <_ZN6Parser9selectHWSEv+0xf2>
    5c82:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    5c86:	eb f2                	jmp    5c7a <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    5c88:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c8c:	48 89 c7             	mov    %rax,%rdi
    5c8f:	e8 00 00 00 00       	callq  5c94 <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    5c94:	90                   	nop
    5c95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c99:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ca0:	00 00 
    5ca2:	74 21                	je     5cc5 <_ZN6Parser9selectHWSEv+0x12f>
    5ca4:	eb 1a                	jmp    5cc0 <_ZN6Parser9selectHWSEv+0x12a>
    5ca6:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    5ca9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5cad:	48 89 c7             	mov    %rax,%rdi
    5cb0:	e8 00 00 00 00       	callq  5cb5 <_ZN6Parser9selectHWSEv+0x11f>
    5cb5:	48 89 d8             	mov    %rbx,%rax
    5cb8:	48 89 c7             	mov    %rax,%rdi
    5cbb:	e8 00 00 00 00       	callq  5cc0 <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    5cc0:	e8 00 00 00 00       	callq  5cc5 <_ZN6Parser9selectHWSEv+0x12f>
    5cc5:	48 83 c4 58          	add    $0x58,%rsp
    5cc9:	5b                   	pop    %rbx
    5cca:	5d                   	pop    %rbp
    5ccb:	c3                   	retq   

0000000000005ccc <_ZN6Parser7compileEv>:

int Parser::compile(){
    5ccc:	55                   	push   %rbp
    5ccd:	48 89 e5             	mov    %rsp,%rbp
    5cd0:	53                   	push   %rbx
    5cd1:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    5cd8:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    5cdf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5ce6:	00 00 
    5ce8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5cec:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    5cee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5cf2:	48 89 c7             	mov    %rax,%rdi
    5cf5:	e8 00 00 00 00       	callq  5cfa <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    5cfa:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d01:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    5d05:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d0c:	48 89 c7             	mov    %rax,%rdi
    5d0f:	e8 00 00 00 00       	callq  5d14 <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    5d14:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d1b:	48 8d 50 30          	lea    0x30(%rax),%rdx
    5d1f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5d23:	48 89 d6             	mov    %rdx,%rsi
    5d26:	48 89 c7             	mov    %rax,%rdi
    5d29:	e8 00 00 00 00       	callq  5d2e <_ZN6Parser7compileEv+0x62>
    5d2e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d35:	48 8d 78 78          	lea    0x78(%rax),%rdi
    5d39:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    5d40:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    5d44:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d4b:	48 89 d1             	mov    %rdx,%rcx
    5d4e:	48 89 fa             	mov    %rdi,%rdx
    5d51:	48 89 c7             	mov    %rax,%rdi
    5d54:	e8 00 00 00 00       	callq  5d59 <_ZN6Parser7compileEv+0x8d>
    5d59:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5d5d:	48 89 c7             	mov    %rax,%rdi
    5d60:	e8 00 00 00 00       	callq  5d65 <_ZN6Parser7compileEv+0x99>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    5d65:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d6c:	48 8d 50 38          	lea    0x38(%rax),%rdx
    5d70:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5d74:	48 89 d6             	mov    %rdx,%rsi
    5d77:	48 89 c7             	mov    %rax,%rdi
    5d7a:	e8 00 00 00 00       	callq  5d7f <_ZN6Parser7compileEv+0xb3>
    5d7f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d86:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    5d8d:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    5d94:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5d98:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5d9f:	48 89 d1             	mov    %rdx,%rcx
    5da2:	48 89 fa             	mov    %rdi,%rdx
    5da5:	48 89 c7             	mov    %rax,%rdi
    5da8:	e8 00 00 00 00       	callq  5dad <_ZN6Parser7compileEv+0xe1>
    5dad:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5db1:	48 89 c7             	mov    %rax,%rdi
    5db4:	e8 00 00 00 00       	callq  5db9 <_ZN6Parser7compileEv+0xed>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    5db9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5dbd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dc4 <_ZN6Parser7compileEv+0xf8>
    5dc4:	48 89 c7             	mov    %rax,%rdi
    5dc7:	e8 00 00 00 00       	callq  5dcc <_ZN6Parser7compileEv+0x100>
    5dcc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5dd0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5dd7:	48 89 d6             	mov    %rdx,%rsi
    5dda:	48 89 c7             	mov    %rax,%rdi
    5ddd:	e8 00 00 00 00       	callq  5de2 <_ZN6Parser7compileEv+0x116>
    5de2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5de6:	48 89 c7             	mov    %rax,%rdi
    5de9:	e8 00 00 00 00       	callq  5dee <_ZN6Parser7compileEv+0x122>
    this->addIncludeFile("project1.h");
    5dee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5df2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5df9 <_ZN6Parser7compileEv+0x12d>
    5df9:	48 89 c7             	mov    %rax,%rdi
    5dfc:	e8 00 00 00 00       	callq  5e01 <_ZN6Parser7compileEv+0x135>
    5e01:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5e05:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5e0c:	48 89 d6             	mov    %rdx,%rsi
    5e0f:	48 89 c7             	mov    %rax,%rdi
    5e12:	e8 00 00 00 00       	callq  5e17 <_ZN6Parser7compileEv+0x14b>
    5e17:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5e1b:	48 89 c7             	mov    %rax,%rdi
    5e1e:	e8 00 00 00 00       	callq  5e23 <_ZN6Parser7compileEv+0x157>

    // Найти все #define
    int cDr = this->checkDefines(script);
    5e23:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    5e27:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5e2e:	48 89 d6             	mov    %rdx,%rsi
    5e31:	48 89 c7             	mov    %rax,%rdi
    5e34:	e8 00 00 00 00       	callq  5e39 <_ZN6Parser7compileEv+0x16d>
    5e39:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    5e3f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    5e43:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5e4a:	48 89 d6             	mov    %rdx,%rsi
    5e4d:	48 89 c7             	mov    %rax,%rdi
    5e50:	e8 00 00 00 00       	callq  5e55 <_ZN6Parser7compileEv+0x189>
    5e55:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)


    compileHWS();
    5e5b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5e62:	48 89 c7             	mov    %rax,%rdi
    5e65:	e8 00 00 00 00       	callq  5e6a <_ZN6Parser7compileEv+0x19e>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    5e6a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5e6e:	48 89 c7             	mov    %rax,%rdi
    5e71:	e8 00 00 00 00       	callq  5e76 <_ZN6Parser7compileEv+0x1aa>
    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
}
    5e76:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    5e7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    5e81:	00 00 
    5e83:	74 65                	je     5eea <_ZN6Parser7compileEv+0x21e>
    5e85:	eb 5e                	jmp    5ee5 <_ZN6Parser7compileEv+0x219>
    5e87:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    5e8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5e8e:	48 89 c7             	mov    %rax,%rdi
    5e91:	e8 00 00 00 00       	callq  5e96 <_ZN6Parser7compileEv+0x1ca>
    5e96:	eb 36                	jmp    5ece <_ZN6Parser7compileEv+0x202>
    5e98:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    5e9b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5e9f:	48 89 c7             	mov    %rax,%rdi
    5ea2:	e8 00 00 00 00       	callq  5ea7 <_ZN6Parser7compileEv+0x1db>
    5ea7:	eb 25                	jmp    5ece <_ZN6Parser7compileEv+0x202>
    5ea9:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    5eac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5eb0:	48 89 c7             	mov    %rax,%rdi
    5eb3:	e8 00 00 00 00       	callq  5eb8 <_ZN6Parser7compileEv+0x1ec>
    5eb8:	eb 14                	jmp    5ece <_ZN6Parser7compileEv+0x202>
    5eba:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    5ebd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5ec1:	48 89 c7             	mov    %rax,%rdi
    5ec4:	e8 00 00 00 00       	callq  5ec9 <_ZN6Parser7compileEv+0x1fd>
    5ec9:	eb 03                	jmp    5ece <_ZN6Parser7compileEv+0x202>
    5ecb:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    5ece:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5ed2:	48 89 c7             	mov    %rax,%rdi
    5ed5:	e8 00 00 00 00       	callq  5eda <_ZN6Parser7compileEv+0x20e>
    5eda:	48 89 d8             	mov    %rbx,%rax
    5edd:	48 89 c7             	mov    %rax,%rdi
    5ee0:	e8 00 00 00 00       	callq  5ee5 <_ZN6Parser7compileEv+0x219>
    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);


    compileHWS();
}
    5ee5:	e8 00 00 00 00       	callq  5eea <_ZN6Parser7compileEv+0x21e>
    5eea:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    5ef1:	5b                   	pop    %rbx
    5ef2:	5d                   	pop    %rbp
    5ef3:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   
