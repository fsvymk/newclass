
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        0000000c  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  00000150  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        0000000c  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        0000000c  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        0000000c  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  000002b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000cac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .text         00007eae  0000000000000000  0000000000000000  00000cc4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
398 .data         00000000  0000000000000000  0000000000000000  00008b72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
399 .bss          00000000  0000000000000000  0000000000000000  00008b72  2**0
                  ALLOC
400 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008b72  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
401 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008b84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
402 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008b93  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
403 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
404 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00008bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
405 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00008bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
406 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00008bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
407 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00008bf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
408 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00008c0c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
409 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008c4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
410 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00008c92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
411 .rodata       00000624  0000000000000000  0000000000000000  00008cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
412 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  000092ec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009350  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
414 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000093b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
415 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  000093c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  000093d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
417 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  000093f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
418 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  0000942a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
419 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  0000943e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
420 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  0000949e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
421 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  0000950e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
422 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  00009536  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
423 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  000095b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  0000962c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  00009652  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  00009678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
427 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  0000968c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  000096d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  000096fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  00009723  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
431 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00009790  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  000097d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  0000986c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
434 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  00009882  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00009916  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
436 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  0000992c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00009952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00009966  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00009984  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  000099a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00009a34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
442 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009a48  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
443 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00009aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
444 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009ac8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009b54  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009b72  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009ba6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009c1c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009c6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
450 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00009cf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
451 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00009d04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00009dbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
453 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00009dd9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00009e63  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
455 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00009e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00009e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00009e92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
458 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00009edc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00009ef6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
460 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00009f30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00009f84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00009fa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
463 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  00009fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
464 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00009fe8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
465 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  0000a01c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
466 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  0000a044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
467 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  0000a06c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
468 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  0000a078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
469 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  0000a084  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  0000a0a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a0c6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
472 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a0e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
473 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a10c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
475 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a144  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a166  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
478 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a1a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a1e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a210  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
481 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  0000a256  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
482 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  0000a314  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
483 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a32c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a387  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a3dc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a44e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .gcc_except_table 0000119c  0000000000000000  0000000000000000  0000a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
488 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000b60c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000b628  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000b652  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
491 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000b66e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000b72a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
493 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000b744  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
494 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000b75e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
495 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000b778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
496 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000b792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
497 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b7b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b7bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000b7e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000b7fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b818  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b823  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000b848  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
504 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000b870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000b87c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000b8a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000b90e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000ba2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000bb08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000bba8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000bcd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000bcec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
513 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000bd4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000bd8a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000be96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
516 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000bea2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000becc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000bf34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
519 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000bf4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000bf8a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
521 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000bfca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000bfec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
523 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c00c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000c02a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c1a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000c316  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
528 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000c49e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000c4d2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
531 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000c528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
532 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c548  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
533 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000c566  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000c594  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000c704  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
536 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000c766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
537 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000c784  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c7e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
539 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000c808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000c81e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
541 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000c834  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000c84e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000c882  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000c89c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000c90e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000c962  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000c97c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000c9bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000cac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
550 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000cade  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000cb40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
552 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000cb98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
553 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000cbba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000cbe6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000cc08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000cc2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000ccb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000cd1a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
559 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000ce28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 .text._ZN5QHashI7QString11QStringListE4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000ce3c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
561 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000cf91  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
562 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000cfb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
563 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000cfd8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000d036  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000d20c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000d274  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
567 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000d294  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000d35e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000d384  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
570 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000d39e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000d3c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000d423  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
573 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000d448  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
574 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000d47a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
575 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000d5b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000d676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
577 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d690  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000d6ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
579 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d71c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000d736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
581 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000d744  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
582 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000d772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000d784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
584 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
585 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d7a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
586 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000d7ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
587 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000d7d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d908  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000d936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
590 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000d948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
591 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000d95a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
592 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000d96c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000d97e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
594 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000d998  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000da88  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000dab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
597 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000dac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
598 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000dada  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
599 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000dafc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000db0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000db20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
602 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000db3a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000dbcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
604 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000dbe6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000dc04  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000dc40  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000dcc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000dcee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
609 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000dd00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
610 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000dd12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
611 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000dd24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
612 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000dd36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
613 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000dd50  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000de3e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000de78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
616 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000deda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000df20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000df4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000df7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000e0b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000e178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
622 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000e192  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
623 .text._ZNK5QHashI7QString11QStringListE7isEmptyEv 00000019  0000000000000000  0000000000000000  0000e1a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
624 .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E 00000035  0000000000000000  0000000000000000  0000e1ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e1f0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000e224  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
627 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000e24a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
628 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000e281  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e2a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e322  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
631 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e36a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000e3bc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e442  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000e476  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e49e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e546  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e5ee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000e696  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
639 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000e6b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
640 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000e728  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000e7d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000e832  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000e852  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e876  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e8f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e93a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000e98c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000ea12  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
649 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000ea66  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
650 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000ea89  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
651 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000eabc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
652 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000eb48  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
653 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000eb9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
654 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000ebc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
655 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000ebea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
656 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000ecba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000ecc6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
658 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000edda  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
659 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000ee3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000ee46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000ef5a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
662 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000efbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
663 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000efc6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
664 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000f0da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
665 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000f13b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
666 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000f146  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
667 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000f259  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
668 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000f268  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000f2f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
670 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000f31d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
671 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000f32c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
672 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000f39e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
673 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000f400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
674 .debug_info   00023094  0000000000000000  0000000000000000  0000f40b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
675 .debug_abbrev 00000cb1  0000000000000000  0000000000000000  0003249f  2**0
                  CONTENTS, READONLY, DEBUGGING
676 .debug_aranges 000010c0  0000000000000000  0000000000000000  00033150  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
677 .debug_ranges 000015e0  0000000000000000  0000000000000000  00034210  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
678 .debug_macro  00000d27  0000000000000000  0000000000000000  000357f0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
679 .debug_macro  0000061c  0000000000000000  0000000000000000  00036517  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
680 .debug_macro  00000022  0000000000000000  0000000000000000  00036b33  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
681 .debug_macro  00000136  0000000000000000  0000000000000000  00036b55  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
682 .debug_macro  00000010  0000000000000000  0000000000000000  00036c8b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
683 .debug_macro  00000275  0000000000000000  0000000000000000  00036c9b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
684 .debug_macro  0000016f  0000000000000000  0000000000000000  00036f10  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
685 .debug_macro  00000016  0000000000000000  0000000000000000  0003707f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
686 .debug_macro  00000035  0000000000000000  0000000000000000  00037095  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
687 .debug_macro  00000058  0000000000000000  0000000000000000  000370ca  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
688 .debug_macro  000005b4  0000000000000000  0000000000000000  00037122  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
689 .debug_macro  0000016d  0000000000000000  0000000000000000  000376d6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
690 .debug_macro  00000016  0000000000000000  0000000000000000  00037843  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
691 .debug_macro  0000009a  0000000000000000  0000000000000000  00037859  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
692 .debug_macro  00000016  0000000000000000  0000000000000000  000378f3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
693 .debug_macro  00000018  0000000000000000  0000000000000000  00037909  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
694 .debug_macro  00000032  0000000000000000  0000000000000000  00037921  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
695 .debug_macro  000000c0  0000000000000000  0000000000000000  00037953  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
696 .debug_macro  00000028  0000000000000000  0000000000000000  00037a13  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
697 .debug_macro  00000012  0000000000000000  0000000000000000  00037a3b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
698 .debug_macro  000000cf  0000000000000000  0000000000000000  00037a4d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
699 .debug_macro  0000001c  0000000000000000  0000000000000000  00037b1c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
700 .debug_macro  00000018  0000000000000000  0000000000000000  00037b38  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
701 .debug_macro  0000006e  0000000000000000  0000000000000000  00037b50  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
702 .debug_macro  00000082  0000000000000000  0000000000000000  00037bbe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
703 .debug_macro  00000012  0000000000000000  0000000000000000  00037c40  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
704 .debug_macro  00000012  0000000000000000  0000000000000000  00037c52  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_macro  00000016  0000000000000000  0000000000000000  00037c64  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
706 .debug_macro  00000035  0000000000000000  0000000000000000  00037c7a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_macro  00000052  0000000000000000  0000000000000000  00037caf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  0000004c  0000000000000000  0000000000000000  00037d01  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  0000001c  0000000000000000  0000000000000000  00037d4d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  00000028  0000000000000000  0000000000000000  00037d69  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  0000005e  0000000000000000  0000000000000000  00037d91  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  000000e2  0000000000000000  0000000000000000  00037def  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000010  0000000000000000  0000000000000000  00037ed1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  0000004c  0000000000000000  0000000000000000  00037ee1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  00000022  0000000000000000  0000000000000000  00037f2d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000068  0000000000000000  0000000000000000  00037f4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  0000007f  0000000000000000  0000000000000000  00037fb7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  0000003a  0000000000000000  0000000000000000  00038036  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  00000019  0000000000000000  0000000000000000  00038070  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  00000020  0000000000000000  0000000000000000  00038089  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  00000022  0000000000000000  0000000000000000  000380a9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  00000010  0000000000000000  0000000000000000  000380cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000016  0000000000000000  0000000000000000  000380db  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000028  0000000000000000  0000000000000000  000380f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  00000010  0000000000000000  0000000000000000  00038119  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  00000046  0000000000000000  0000000000000000  00038129  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  0000001c  0000000000000000  0000000000000000  0003816f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  00000020  0000000000000000  0000000000000000  0003818b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  0000005a  0000000000000000  0000000000000000  000381ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  00000010  0000000000000000  0000000000000000  00038205  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  00000010  0000000000000000  0000000000000000  00038215  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  000000e4  0000000000000000  0000000000000000  00038225  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  0000025a  0000000000000000  0000000000000000  00038309  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  0000002d  0000000000000000  0000000000000000  00038563  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  00000016  0000000000000000  0000000000000000  00038590  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  00000050  0000000000000000  0000000000000000  000385a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000019  0000000000000000  0000000000000000  000385f6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  00000011  0000000000000000  0000000000000000  0003860f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  0000014b  0000000000000000  0000000000000000  00038620  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  0000001e  0000000000000000  0000000000000000  0003876b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  0000001c  0000000000000000  0000000000000000  00038789  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  00000024  0000000000000000  0000000000000000  000387a5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000016  0000000000000000  0000000000000000  000387c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  00000018  0000000000000000  0000000000000000  000387df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  00000019  0000000000000000  0000000000000000  000387f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  00000058  0000000000000000  0000000000000000  00038810  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  00000016  0000000000000000  0000000000000000  00038868  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  0000001c  0000000000000000  0000000000000000  0003887e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  00000016  0000000000000000  0000000000000000  0003889a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000022  0000000000000000  0000000000000000  000388b0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  00000043  0000000000000000  0000000000000000  000388d2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  0000003c  0000000000000000  0000000000000000  00038915  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000173  0000000000000000  0000000000000000  00038951  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000012  0000000000000000  0000000000000000  00038ac4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000010  0000000000000000  0000000000000000  00038ad6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000058  0000000000000000  0000000000000000  00038ae6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  000000b4  0000000000000000  0000000000000000  00038b3e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000016  0000000000000000  0000000000000000  00038bf2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  00000010  0000000000000000  0000000000000000  00038c08  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000037  0000000000000000  0000000000000000  00038c18  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000058  0000000000000000  0000000000000000  00038c4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  00000011  0000000000000000  0000000000000000  00038ca7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  00000016  0000000000000000  0000000000000000  00038cb8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  00000010  0000000000000000  0000000000000000  00038cce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000010  0000000000000000  0000000000000000  00038cde  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000022  0000000000000000  0000000000000000  00038cee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000122  0000000000000000  0000000000000000  00038d10  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  0000008e  0000000000000000  0000000000000000  00038e32  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  00000016  0000000000000000  0000000000000000  00038ec0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  00000058  0000000000000000  0000000000000000  00038ed6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  000000fa  0000000000000000  0000000000000000  00038f2e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000030  0000000000000000  0000000000000000  00039028  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  000000c1  0000000000000000  0000000000000000  00039058  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  0000004d  0000000000000000  0000000000000000  00039119  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000010  0000000000000000  0000000000000000  00039166  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000019  0000000000000000  0000000000000000  00039176  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000020  0000000000000000  0000000000000000  0003918f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  00000018  0000000000000000  0000000000000000  000391af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000023  0000000000000000  0000000000000000  000391c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000010  0000000000000000  0000000000000000  000391ea  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  00000016  0000000000000000  0000000000000000  000391fa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  00000076  0000000000000000  0000000000000000  00039210  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  00000016  0000000000000000  0000000000000000  00039286  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000025  0000000000000000  0000000000000000  0003929c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  000000de  0000000000000000  0000000000000000  000392c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  0000001c  0000000000000000  0000000000000000  0003939f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  00000058  0000000000000000  0000000000000000  000393bb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  00000088  0000000000000000  0000000000000000  00039413  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000076  0000000000000000  0000000000000000  0003949b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000010  0000000000000000  0000000000000000  00039511  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  00000041  0000000000000000  0000000000000000  00039521  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  000000ee  0000000000000000  0000000000000000  00039562  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  000000fc  0000000000000000  0000000000000000  00039650  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000010  0000000000000000  0000000000000000  0003974c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  000000e5  0000000000000000  0000000000000000  0003975c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000012  0000000000000000  0000000000000000  00039841  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  00000016  0000000000000000  0000000000000000  00039853  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  00000022  0000000000000000  0000000000000000  00039869  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000016  0000000000000000  0000000000000000  0003988b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000028  0000000000000000  0000000000000000  000398a1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  00000216  0000000000000000  0000000000000000  000398c9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000046  0000000000000000  0000000000000000  00039adf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  0000002e  0000000000000000  0000000000000000  00039b25  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  00000027  0000000000000000  0000000000000000  00039b53  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  0000001f  0000000000000000  0000000000000000  00039b7a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  00000016  0000000000000000  0000000000000000  00039b99  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  00000010  0000000000000000  0000000000000000  00039baf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  00000126  0000000000000000  0000000000000000  00039bbf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_line   00004655  0000000000000000  0000000000000000  00039ce5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_str    0003a0ed  0000000000000000  0000000000000000  0003e33a  2**0
                  CONTENTS, READONLY, DEBUGGING
811 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  00078428  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
812 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00078430  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
813 .comment      0000002e  0000000000000000  0000000000000000  00078438  2**0
                  CONTENTS, READONLY
814 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00078466  2**0
                  CONTENTS, READONLY
815 .eh_frame     00002758  0000000000000000  0000000000000000  00078468  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhj>:

QByteArray Parser::packVariable(quint8 index, quint8 type, quint32 value){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	53                   	push   %rbx
     321:	48 83 ec 38          	sub    $0x38,%rsp
     325:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     329:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
     32d:	89 c8                	mov    %ecx,%eax
     32f:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
     333:	88 55 cc             	mov    %dl,-0x34(%rbp)
     336:	88 45 c8             	mov    %al,-0x38(%rbp)
     339:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     340:	00 00 
     342:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     346:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     34c:	48 89 c7             	mov    %rax,%rdi
     34f:	e8 00 00 00 00       	callq  354 <_ZN6Parser12packVariableEhhj+0x38>
    //char counter = 0xFF;

    //result.append(counter);
    result.append(index);
     354:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
     358:	0f be d0             	movsbl %al,%edx
     35b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     35f:	89 d6                	mov    %edx,%esi
     361:	48 89 c7             	mov    %rax,%rdi
     364:	e8 00 00 00 00       	callq  369 <_ZN6Parser12packVariableEhhj+0x4d>
    result.append(type);
     369:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
     36d:	0f be d0             	movsbl %al,%edx
     370:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     374:	89 d6                	mov    %edx,%esi
     376:	48 89 c7             	mov    %rax,%rdi
     379:	e8 00 00 00 00       	callq  37e <_ZN6Parser12packVariableEhhj+0x62>
    result.append(value);
     37e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
     381:	0f be d0             	movsbl %al,%edx
     384:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     388:	89 d6                	mov    %edx,%esi
     38a:	48 89 c7             	mov    %rax,%rdi
     38d:	e8 00 00 00 00       	callq  392 <_ZN6Parser12packVariableEhhj+0x76>

    return result; // return result - ok
     392:	eb 1a                	jmp    3ae <_ZN6Parser12packVariableEhhj+0x92>
     394:	48 89 c3             	mov    %rax,%rbx
     397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     39b:	48 89 c7             	mov    %rax,%rdi
     39e:	e8 00 00 00 00       	callq  3a3 <_ZN6Parser12packVariableEhhj+0x87>
     3a3:	48 89 d8             	mov    %rbx,%rax
     3a6:	48 89 c7             	mov    %rax,%rdi
     3a9:	e8 00 00 00 00       	callq  3ae <_ZN6Parser12packVariableEhhj+0x92>
}
     3ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     3b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     3b6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     3bd:	00 00 
     3bf:	74 05                	je     3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c1:	e8 00 00 00 00       	callq  3c6 <_ZN6Parser12packVariableEhhj+0xaa>
     3c6:	48 83 c4 38          	add    $0x38,%rsp
     3ca:	5b                   	pop    %rbx
     3cb:	5d                   	pop    %rbp
     3cc:	c3                   	retq   
     3cd:	90                   	nop

00000000000003ce <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     3ce:	55                   	push   %rbp
     3cf:	48 89 e5             	mov    %rsp,%rbp
     3d2:	53                   	push   %rbx
     3d3:	48 81 ec a8 02 00 00 	sub    $0x2a8,%rsp
     3da:	48 89 bd 68 fd ff ff 	mov    %rdi,-0x298(%rbp)
     3e1:	48 89 b5 60 fd ff ff 	mov    %rsi,-0x2a0(%rbp)
     3e8:	48 89 95 58 fd ff ff 	mov    %rdx,-0x2a8(%rbp)
     3ef:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     3f6:	00 00 
     3f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     3fc:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     3fe:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
     405:	48 89 c7             	mov    %rax,%rdi
     408:	e8 00 00 00 00       	callq  40d <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     40d:	48 8d 85 7f fd ff ff 	lea    -0x281(%rbp),%rax
     414:	48 89 c7             	mov    %rax,%rdi
     417:	e8 00 00 00 00       	callq  41c <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     41c:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
     423:	48 89 c7             	mov    %rax,%rdi
     426:	e8 00 00 00 00       	callq  42b <_ZN6Parser16compileVariablesEP11QStringList+0x5d>

    // копирование из checkVariables

    int varCount      = 0;
     42b:	c7 85 8c fd ff ff 00 	movl   $0x0,-0x274(%rbp)
     432:	00 00 00 
    int index         = 0;
     435:	c7 85 80 fd ff ff 00 	movl   $0x0,-0x280(%rbp)
     43c:	00 00 00 

    VarTypes VT;
     43f:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     446:	48 89 c7             	mov    %rax,%rdi
     449:	e8 00 00 00 00       	callq  44e <_ZN6Parser16compileVariablesEP11QStringList+0x80>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     44e:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     455:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
     45c:	48 89 d6             	mov    %rdx,%rsi
     45f:	48 89 c7             	mov    %rax,%rdi
     462:	e8 00 00 00 00       	callq  467 <_ZN6Parser16compileVariablesEP11QStringList+0x99>
     467:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     46e:	48 8d 8d d0 fd ff ff 	lea    -0x230(%rbp),%rcx
     475:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 47c <_ZN6Parser16compileVariablesEP11QStringList+0xae>
     47c:	48 89 ce             	mov    %rcx,%rsi
     47f:	48 89 c7             	mov    %rax,%rdi
     482:	e8 00 00 00 00       	callq  487 <_ZN6Parser16compileVariablesEP11QStringList+0xb9>
     487:	48 8d b5 e0 fd ff ff 	lea    -0x220(%rbp),%rsi
     48e:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     495:	b9 00 00 00 00       	mov    $0x0,%ecx
     49a:	ba 01 00 00 00       	mov    $0x1,%edx
     49f:	48 89 c7             	mov    %rax,%rdi
     4a2:	e8 00 00 00 00       	callq  4a7 <_ZN6Parser16compileVariablesEP11QStringList+0xd9>
     4a7:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     4ae:	48 89 c7             	mov    %rax,%rdi
     4b1:	e8 00 00 00 00       	callq  4b6 <_ZN6Parser16compileVariablesEP11QStringList+0xe8>
     4b6:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     4bd:	48 89 c7             	mov    %rax,%rdi
     4c0:	e8 00 00 00 00       	callq  4c5 <_ZN6Parser16compileVariablesEP11QStringList+0xf7>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     4c5:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     4cc:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
     4d3:	48 89 d6             	mov    %rdx,%rsi
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x110>
     4de:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     4e5:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     4ec:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4f3 <_ZN6Parser16compileVariablesEP11QStringList+0x125>
     4f3:	48 89 ce             	mov    %rcx,%rsi
     4f6:	48 89 c7             	mov    %rax,%rdi
     4f9:	e8 00 00 00 00       	callq  4fe <_ZN6Parser16compileVariablesEP11QStringList+0x130>
     4fe:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     505:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     50c:	b9 00 00 00 00       	mov    $0x0,%ecx
     511:	ba 01 00 00 00       	mov    $0x1,%edx
     516:	48 89 c7             	mov    %rax,%rdi
     519:	e8 00 00 00 00       	callq  51e <_ZN6Parser16compileVariablesEP11QStringList+0x150>
     51e:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     525:	48 89 c7             	mov    %rax,%rdi
     528:	e8 00 00 00 00       	callq  52d <_ZN6Parser16compileVariablesEP11QStringList+0x15f>
     52d:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     534:	48 89 c7             	mov    %rax,%rdi
     537:	e8 00 00 00 00       	callq  53c <_ZN6Parser16compileVariablesEP11QStringList+0x16e>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     53c:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     543:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 54a <_ZN6Parser16compileVariablesEP11QStringList+0x17c>
     54a:	48 89 c7             	mov    %rax,%rdi
     54d:	e8 00 00 00 00       	callq  552 <_ZN6Parser16compileVariablesEP11QStringList+0x184>
     552:	48 8d b5 30 fe ff ff 	lea    -0x1d0(%rbp),%rsi
     559:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     560:	b9 00 00 00 00       	mov    $0x0,%ecx
     565:	ba 01 00 00 00       	mov    $0x1,%edx
     56a:	48 89 c7             	mov    %rax,%rdi
     56d:	e8 00 00 00 00       	callq  572 <_ZN6Parser16compileVariablesEP11QStringList+0x1a4>
     572:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     579:	48 89 c7             	mov    %rax,%rdi
     57c:	e8 00 00 00 00       	callq  581 <_ZN6Parser16compileVariablesEP11QStringList+0x1b3>
    QRegExp erxVarName("\\w+");                              // имя
     581:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     588:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 58f <_ZN6Parser16compileVariablesEP11QStringList+0x1c1>
     58f:	48 89 c7             	mov    %rax,%rdi
     592:	e8 00 00 00 00       	callq  597 <_ZN6Parser16compileVariablesEP11QStringList+0x1c9>
     597:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
     59e:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     5a5:	b9 00 00 00 00       	mov    $0x0,%ecx
     5aa:	ba 01 00 00 00       	mov    $0x1,%edx
     5af:	48 89 c7             	mov    %rax,%rdi
     5b2:	e8 00 00 00 00       	callq  5b7 <_ZN6Parser16compileVariablesEP11QStringList+0x1e9>
     5b7:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     5be:	48 89 c7             	mov    %rax,%rdi
     5c1:	e8 00 00 00 00       	callq  5c6 <_ZN6Parser16compileVariablesEP11QStringList+0x1f8>

    QStringList types;
     5c6:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     5cd:	48 89 c7             	mov    %rax,%rdi
     5d0:	e8 00 00 00 00       	callq  5d5 <_ZN6Parser16compileVariablesEP11QStringList+0x207>
    QStringList list;
     5d5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     5dc:	48 89 c7             	mov    %rax,%rdi
     5df:	e8 00 00 00 00       	callq  5e4 <_ZN6Parser16compileVariablesEP11QStringList+0x216>
    QStringList vars;
     5e4:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     5eb:	48 89 c7             	mov    %rax,%rdi
     5ee:	e8 00 00 00 00       	callq  5f3 <_ZN6Parser16compileVariablesEP11QStringList+0x225>

    int pos = 0;
     5f3:	c7 85 84 fd ff ff 00 	movl   $0x0,-0x27c(%rbp)
     5fa:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     5fd:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     604:	48 89 c7             	mov    %rax,%rdi
     607:	e8 00 00 00 00       	callq  60c <_ZN6Parser16compileVariablesEP11QStringList+0x23e>
    for(sit = str->begin(); sit != str->end(); ++sit){
     60c:	48 8b 95 58 fd ff ff 	mov    -0x2a8(%rbp),%rdx
     613:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     61a:	48 89 d6             	mov    %rdx,%rsi
     61d:	48 89 c7             	mov    %rax,%rdi
     620:	e8 00 00 00 00       	callq  625 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
     625:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
     62c:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
     633:	48 8b 95 58 fd ff ff 	mov    -0x2a8(%rbp),%rdx
     63a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     641:	48 89 d6             	mov    %rdx,%rsi
     644:	48 89 c7             	mov    %rax,%rdi
     647:	e8 00 00 00 00       	callq  64c <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
     64c:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     653:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     65a:	48 89 d6             	mov    %rdx,%rsi
     65d:	48 89 c7             	mov    %rax,%rdi
     660:	e8 00 00 00 00       	callq  665 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     665:	84 c0                	test   %al,%al
     667:	0f 84 a0 01 00 00    	je     80d <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     66d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     674:	48 89 c7             	mov    %rax,%rdi
     677:	e8 00 00 00 00       	callq  67c <_ZN6Parser16compileVariablesEP11QStringList+0x2ae>
     67c:	48 89 c6             	mov    %rax,%rsi
     67f:	8b 95 84 fd ff ff    	mov    -0x27c(%rbp),%edx
     685:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     68c:	b9 00 00 00 00       	mov    $0x0,%ecx
     691:	48 89 c7             	mov    %rax,%rdi
     694:	e8 00 00 00 00       	callq  699 <_ZN6Parser16compileVariablesEP11QStringList+0x2cb>
     699:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%rbp)
     69f:	83 bd 84 fd ff ff ff 	cmpl   $0xffffffff,-0x27c(%rbp)
     6a6:	0f 95 c0             	setne  %al
     6a9:	84 c0                	test   %al,%al
     6ab:	0f 84 48 01 00 00    	je     7f9 <_ZN6Parser16compileVariablesEP11QStringList+0x42b>
             types << erx.cap(1);
     6b1:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6b8:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     6bf:	ba 01 00 00 00       	mov    $0x1,%edx
     6c4:	48 89 ce             	mov    %rcx,%rsi
     6c7:	48 89 c7             	mov    %rax,%rdi
     6ca:	e8 00 00 00 00       	callq  6cf <_ZN6Parser16compileVariablesEP11QStringList+0x301>
     6cf:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
     6d6:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     6dd:	48 89 d6             	mov    %rdx,%rsi
     6e0:	48 89 c7             	mov    %rax,%rdi
     6e3:	e8 00 00 00 00       	callq  6e8 <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     6e8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6ef:	48 89 c7             	mov    %rax,%rdi
     6f2:	e8 00 00 00 00       	callq  6f7 <_ZN6Parser16compileVariablesEP11QStringList+0x329>
             list << erx.cap(2);
     6f7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     6fe:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     705:	ba 02 00 00 00       	mov    $0x2,%edx
     70a:	48 89 ce             	mov    %rcx,%rsi
     70d:	48 89 c7             	mov    %rax,%rdi
     710:	e8 00 00 00 00       	callq  715 <_ZN6Parser16compileVariablesEP11QStringList+0x347>
     715:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
     71c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     723:	48 89 d6             	mov    %rdx,%rsi
     726:	48 89 c7             	mov    %rax,%rdi
     729:	e8 00 00 00 00       	callq  72e <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     72e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     735:	48 89 c7             	mov    %rax,%rdi
     738:	e8 00 00 00 00       	callq  73d <_ZN6Parser16compileVariablesEP11QStringList+0x36f>
             pos += erx.matchedLength();
     73d:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     744:	48 89 c7             	mov    %rax,%rdi
     747:	e8 00 00 00 00       	callq  74c <_ZN6Parser16compileVariablesEP11QStringList+0x37e>
     74c:	01 85 84 fd ff ff    	add    %eax,-0x27c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     752:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     759:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 760 <_ZN6Parser16compileVariablesEP11QStringList+0x392>
     760:	48 89 c7             	mov    %rax,%rdi
     763:	e8 00 00 00 00       	callq  768 <_ZN6Parser16compileVariablesEP11QStringList+0x39a>
     768:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     76f:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     776:	ba 02 00 00 00       	mov    $0x2,%edx
     77b:	48 89 ce             	mov    %rcx,%rsi
     77e:	48 89 c7             	mov    %rax,%rdi
     781:	e8 00 00 00 00       	callq  786 <_ZN6Parser16compileVariablesEP11QStringList+0x3b8>
     786:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     78d:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     794:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
     79b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     7a1:	b9 00 00 00 00       	mov    $0x0,%ecx
     7a6:	48 89 c7             	mov    %rax,%rdi
     7a9:	e8 00 00 00 00       	callq  7ae <_ZN6Parser16compileVariablesEP11QStringList+0x3e0>
     7ae:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     7b5:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     7bc:	48 89 d6             	mov    %rdx,%rsi
     7bf:	48 89 c7             	mov    %rax,%rdi
     7c2:	e8 00 00 00 00       	callq  7c7 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     7c7:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     7ce:	48 89 c7             	mov    %rax,%rdi
     7d1:	e8 00 00 00 00       	callq  7d6 <_ZN6Parser16compileVariablesEP11QStringList+0x408>
     7d6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     7dd:	48 89 c7             	mov    %rax,%rdi
     7e0:	e8 00 00 00 00       	callq  7e5 <_ZN6Parser16compileVariablesEP11QStringList+0x417>
     7e5:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7ec:	48 89 c7             	mov    %rax,%rdi
     7ef:	e8 00 00 00 00       	callq  7f4 <_ZN6Parser16compileVariablesEP11QStringList+0x426>
    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     7f4:	e9 74 fe ff ff       	jmpq   66d <_ZN6Parser16compileVariablesEP11QStringList+0x29f>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
     7f9:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     800:	48 89 c7             	mov    %rax,%rdi
     803:	e8 00 00 00 00       	callq  808 <_ZN6Parser16compileVariablesEP11QStringList+0x43a>
     808:	e9 26 fe ff ff       	jmpq   633 <_ZN6Parser16compileVariablesEP11QStringList+0x265>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     80d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     814:	48 89 c7             	mov    %rax,%rdi
     817:	e8 00 00 00 00       	callq  81c <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
    QString name, type, value;
     81c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     823:	48 89 c7             	mov    %rax,%rdi
     826:	e8 00 00 00 00       	callq  82b <_ZN6Parser16compileVariablesEP11QStringList+0x45d>
     82b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     832:	48 89 c7             	mov    %rax,%rdi
     835:	e8 00 00 00 00       	callq  83a <_ZN6Parser16compileVariablesEP11QStringList+0x46c>
     83a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     841:	48 89 c7             	mov    %rax,%rdi
     844:	e8 00 00 00 00       	callq  849 <_ZN6Parser16compileVariablesEP11QStringList+0x47b>

    for(it=vars.begin(); it!=vars.end(); ++it){
     849:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     850:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
     857:	48 89 d6             	mov    %rdx,%rsi
     85a:	48 89 c7             	mov    %rax,%rdi
     85d:	e8 00 00 00 00       	callq  862 <_ZN6Parser16compileVariablesEP11QStringList+0x494>
     862:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     869:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
     870:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     877:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
     87e:	48 89 d6             	mov    %rdx,%rsi
     881:	48 89 c7             	mov    %rax,%rdi
     884:	e8 00 00 00 00       	callq  889 <_ZN6Parser16compileVariablesEP11QStringList+0x4bb>
     889:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
     890:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     897:	48 89 d6             	mov    %rdx,%rsi
     89a:	48 89 c7             	mov    %rax,%rdi
     89d:	e8 00 00 00 00       	callq  8a2 <_ZN6Parser16compileVariablesEP11QStringList+0x4d4>
     8a2:	84 c0                	test   %al,%al
     8a4:	0f 84 de 03 00 00    	je     c88 <_ZN6Parser16compileVariablesEP11QStringList+0x8ba>
        QString all = *it;
     8aa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8b1:	48 89 c7             	mov    %rax,%rdi
     8b4:	e8 00 00 00 00       	callq  8b9 <_ZN6Parser16compileVariablesEP11QStringList+0x4eb>
     8b9:	48 89 c2             	mov    %rax,%rdx
     8bc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     8c3:	48 89 d6             	mov    %rdx,%rsi
     8c6:	48 89 c7             	mov    %rax,%rdi
     8c9:	e8 00 00 00 00       	callq  8ce <_ZN6Parser16compileVariablesEP11QStringList+0x500>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     8ce:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8d5:	48 89 c7             	mov    %rax,%rdi
     8d8:	e8 00 00 00 00       	callq  8dd <_ZN6Parser16compileVariablesEP11QStringList+0x50f>
     8dd:	48 89 c6             	mov    %rax,%rsi
     8e0:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     8e7:	b9 00 00 00 00       	mov    $0x0,%ecx
     8ec:	ba 00 00 00 00       	mov    $0x0,%edx
     8f1:	48 89 c7             	mov    %rax,%rdi
     8f4:	e8 00 00 00 00       	callq  8f9 <_ZN6Parser16compileVariablesEP11QStringList+0x52b>
     8f9:	89 85 90 fd ff ff    	mov    %eax,-0x270(%rbp)


        int indexVarName = erxVarName.indexIn(*it);
     8ff:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     906:	48 89 c7             	mov    %rax,%rdi
     909:	e8 00 00 00 00       	callq  90e <_ZN6Parser16compileVariablesEP11QStringList+0x540>
     90e:	48 89 c6             	mov    %rax,%rsi
     911:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     918:	b9 00 00 00 00       	mov    $0x0,%ecx
     91d:	ba 00 00 00 00       	mov    $0x0,%edx
     922:	48 89 c7             	mov    %rax,%rdi
     925:	e8 00 00 00 00       	callq  92a <_ZN6Parser16compileVariablesEP11QStringList+0x55c>
     92a:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     930:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     937:	48 89 c7             	mov    %rax,%rdi
     93a:	e8 00 00 00 00       	callq  93f <_ZN6Parser16compileVariablesEP11QStringList+0x571>
     93f:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
        int countVarName = erxVarName.captureCount();
     945:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     94c:	48 89 c7             	mov    %rax,%rdi
     94f:	e8 00 00 00 00       	callq  954 <_ZN6Parser16compileVariablesEP11QStringList+0x586>
     954:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)

        int iType = 4;
     95a:	c7 85 88 fd ff ff 04 	movl   $0x4,-0x278(%rbp)
     961:	00 00 00 

        if(indexRgPort>=0)
     964:	83 bd 90 fd ff ff 00 	cmpl   $0x0,-0x270(%rbp)
     96b:	0f 88 0d 02 00 00    	js     b7e <_ZN6Parser16compileVariablesEP11QStringList+0x7b0>
        {
            name  = erx_rgPort.cap(1);
     971:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     978:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     97f:	ba 01 00 00 00       	mov    $0x1,%edx
     984:	48 89 ce             	mov    %rcx,%rsi
     987:	48 89 c7             	mov    %rax,%rdi
     98a:	e8 00 00 00 00       	callq  98f <_ZN6Parser16compileVariablesEP11QStringList+0x5c1>
     98f:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
     996:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     99d:	48 89 d6             	mov    %rdx,%rsi
     9a0:	48 89 c7             	mov    %rax,%rdi
     9a3:	e8 00 00 00 00       	callq  9a8 <_ZN6Parser16compileVariablesEP11QStringList+0x5da>
     9a8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     9af:	48 89 c7             	mov    %rax,%rdi
     9b2:	e8 00 00 00 00       	callq  9b7 <_ZN6Parser16compileVariablesEP11QStringList+0x5e9>
            type  = erx_rgPort.cap(2); // nothing, register, port
     9b7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     9bb:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     9c2:	ba 02 00 00 00       	mov    $0x2,%edx
     9c7:	48 89 ce             	mov    %rcx,%rsi
     9ca:	48 89 c7             	mov    %rax,%rdi
     9cd:	e8 00 00 00 00       	callq  9d2 <_ZN6Parser16compileVariablesEP11QStringList+0x604>
     9d2:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
     9d6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     9dd:	48 89 d6             	mov    %rdx,%rsi
     9e0:	48 89 c7             	mov    %rax,%rdi
     9e3:	e8 00 00 00 00       	callq  9e8 <_ZN6Parser16compileVariablesEP11QStringList+0x61a>
     9e8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     9ec:	48 89 c7             	mov    %rax,%rdi
     9ef:	e8 00 00 00 00       	callq  9f4 <_ZN6Parser16compileVariablesEP11QStringList+0x626>
            value = erx_rgPort.cap(3);
     9f4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     9f8:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     9ff:	ba 03 00 00 00       	mov    $0x3,%edx
     a04:	48 89 ce             	mov    %rcx,%rsi
     a07:	48 89 c7             	mov    %rax,%rdi
     a0a:	e8 00 00 00 00       	callq  a0f <_ZN6Parser16compileVariablesEP11QStringList+0x641>
     a0f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
     a13:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     a1a:	48 89 d6             	mov    %rdx,%rsi
     a1d:	48 89 c7             	mov    %rax,%rdi
     a20:	e8 00 00 00 00       	callq  a25 <_ZN6Parser16compileVariablesEP11QStringList+0x657>
     a25:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a29:	48 89 c7             	mov    %rax,%rdi
     a2c:	e8 00 00 00 00       	callq  a31 <_ZN6Parser16compileVariablesEP11QStringList+0x663>

            this->varMap.insert(name, value + " (" + type + ")");
     a31:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     a35:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
     a3c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a43 <_ZN6Parser16compileVariablesEP11QStringList+0x675>
     a43:	48 89 ce             	mov    %rcx,%rsi
     a46:	48 89 c7             	mov    %rax,%rdi
     a49:	e8 00 00 00 00       	callq  a4e <_ZN6Parser16compileVariablesEP11QStringList+0x680>
     a4e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a52:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     a59:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
     a5d:	48 89 ce             	mov    %rcx,%rsi
     a60:	48 89 c7             	mov    %rax,%rdi
     a63:	e8 00 00 00 00       	callq  a68 <_ZN6Parser16compileVariablesEP11QStringList+0x69a>
     a68:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a6c:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
     a70:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a77 <_ZN6Parser16compileVariablesEP11QStringList+0x6a9>
     a77:	48 89 ce             	mov    %rcx,%rsi
     a7a:	48 89 c7             	mov    %rax,%rdi
     a7d:	e8 00 00 00 00       	callq  a82 <_ZN6Parser16compileVariablesEP11QStringList+0x6b4>
     a82:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     a89:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     a90:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a94:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     a9b:	48 89 c6             	mov    %rax,%rsi
     a9e:	48 89 cf             	mov    %rcx,%rdi
     aa1:	e8 00 00 00 00       	callq  aa6 <_ZN6Parser16compileVariablesEP11QStringList+0x6d8>
     aa6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     aaa:	48 89 c7             	mov    %rax,%rdi
     aad:	e8 00 00 00 00       	callq  ab2 <_ZN6Parser16compileVariablesEP11QStringList+0x6e4>
     ab2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     ab6:	48 89 c7             	mov    %rax,%rdi
     ab9:	e8 00 00 00 00       	callq  abe <_ZN6Parser16compileVariablesEP11QStringList+0x6f0>
     abe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     ac2:	48 89 c7             	mov    %rax,%rdi
     ac5:	e8 00 00 00 00       	callq  aca <_ZN6Parser16compileVariablesEP11QStringList+0x6fc>

            if(type=="rg")      iType = 40;
     aca:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     ad1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ad8 <_ZN6Parser16compileVariablesEP11QStringList+0x70a>
     ad8:	48 89 c7             	mov    %rax,%rdi
     adb:	e8 00 00 00 00       	callq  ae0 <_ZN6Parser16compileVariablesEP11QStringList+0x712>
     ae0:	84 c0                	test   %al,%al
     ae2:	74 0a                	je     aee <_ZN6Parser16compileVariablesEP11QStringList+0x720>
     ae4:	c7 85 88 fd ff ff 28 	movl   $0x28,-0x278(%rbp)
     aeb:	00 00 00 
            if(type=="port")    iType = 80;
     aee:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     af5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # afc <_ZN6Parser16compileVariablesEP11QStringList+0x72e>
     afc:	48 89 c7             	mov    %rax,%rdi
     aff:	e8 00 00 00 00       	callq  b04 <_ZN6Parser16compileVariablesEP11QStringList+0x736>
     b04:	84 c0                	test   %al,%al
     b06:	74 0a                	je     b12 <_ZN6Parser16compileVariablesEP11QStringList+0x744>
     b08:	c7 85 88 fd ff ff 50 	movl   $0x50,-0x278(%rbp)
     b0f:	00 00 00 

            index++;
     b12:	83 85 80 fd ff ff 01 	addl   $0x1,-0x280(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
     b19:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
     b1f:	88 45 e0             	mov    %al,-0x20(%rbp)
     b22:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     b29:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     b30:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     b34:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     b3b:	48 89 c6             	mov    %rax,%rsi
     b3e:	48 89 cf             	mov    %rcx,%rdi
     b41:	e8 00 00 00 00       	callq  b46 <_ZN6Parser16compileVariablesEP11QStringList+0x778>
            this->varTypes.insert(index, iType);
     b46:	8b 85 88 fd ff ff    	mov    -0x278(%rbp),%eax
     b4c:	88 45 e0             	mov    %al,-0x20(%rbp)
     b4f:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
     b55:	88 45 d0             	mov    %al,-0x30(%rbp)
     b58:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     b5f:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     b66:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     b6a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b6e:	48 89 c6             	mov    %rax,%rsi
     b71:	48 89 cf             	mov    %rcx,%rdi
     b74:	e8 00 00 00 00       	callq  b79 <_ZN6Parser16compileVariablesEP11QStringList+0x7ab>
     b79:	e9 e7 00 00 00       	jmpq   c65 <_ZN6Parser16compileVariablesEP11QStringList+0x897>

        }else
            {
                index++;
     b7e:	83 85 80 fd ff ff 01 	addl   $0x1,-0x280(%rbp)
                name = erxVarName.cap(0);
     b85:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b89:	48 8d 8d 40 fe ff ff 	lea    -0x1c0(%rbp),%rcx
     b90:	ba 00 00 00 00       	mov    $0x0,%edx
     b95:	48 89 ce             	mov    %rcx,%rsi
     b98:	48 89 c7             	mov    %rax,%rdi
     b9b:	e8 00 00 00 00       	callq  ba0 <_ZN6Parser16compileVariablesEP11QStringList+0x7d2>
     ba0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     ba4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     bab:	48 89 d6             	mov    %rdx,%rsi
     bae:	48 89 c7             	mov    %rax,%rdi
     bb1:	e8 00 00 00 00       	callq  bb6 <_ZN6Parser16compileVariablesEP11QStringList+0x7e8>
     bb6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     bba:	48 89 c7             	mov    %rax,%rdi
     bbd:	e8 00 00 00 00       	callq  bc2 <_ZN6Parser16compileVariablesEP11QStringList+0x7f4>
                this->varMap.insert(name, "");
     bc2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bc6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bcd <_ZN6Parser16compileVariablesEP11QStringList+0x7ff>
     bcd:	48 89 c7             	mov    %rax,%rdi
     bd0:	e8 00 00 00 00       	callq  bd5 <_ZN6Parser16compileVariablesEP11QStringList+0x807>
     bd5:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     bdc:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
     be3:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     be7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     bee:	48 89 c6             	mov    %rax,%rsi
     bf1:	48 89 cf             	mov    %rcx,%rdi
     bf4:	e8 00 00 00 00       	callq  bf9 <_ZN6Parser16compileVariablesEP11QStringList+0x82b>
     bf9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bfd:	48 89 c7             	mov    %rax,%rdi
     c00:	e8 00 00 00 00       	callq  c05 <_ZN6Parser16compileVariablesEP11QStringList+0x837>

                this->varIndexes.insert(name, index);
     c05:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
     c0b:	88 45 e0             	mov    %al,-0x20(%rbp)
     c0e:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     c15:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
     c1c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     c20:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     c27:	48 89 c6             	mov    %rax,%rsi
     c2a:	48 89 cf             	mov    %rcx,%rdi
     c2d:	e8 00 00 00 00       	callq  c32 <_ZN6Parser16compileVariablesEP11QStringList+0x864>
                this->varTypes.insert(index, iType);
     c32:	8b 85 88 fd ff ff    	mov    -0x278(%rbp),%eax
     c38:	88 45 e0             	mov    %al,-0x20(%rbp)
     c3b:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
     c41:	88 45 d0             	mov    %al,-0x30(%rbp)
     c44:	48 8b 85 60 fd ff ff 	mov    -0x2a0(%rbp),%rax
     c4b:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
     c52:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     c56:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     c5a:	48 89 c6             	mov    %rax,%rsi
     c5d:	48 89 cf             	mov    %rcx,%rdi
     c60:	e8 00 00 00 00       	callq  c65 <_ZN6Parser16compileVariablesEP11QStringList+0x897>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     c65:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     c6c:	48 89 c7             	mov    %rax,%rdi
     c6f:	e8 00 00 00 00       	callq  c74 <_ZN6Parser16compileVariablesEP11QStringList+0x8a6>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
     c74:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     c7b:	48 89 c7             	mov    %rax,%rdi
     c7e:	e8 00 00 00 00       	callq  c83 <_ZN6Parser16compileVariablesEP11QStringList+0x8b5>
     c83:	e9 e8 fb ff ff       	jmpq   870 <_ZN6Parser16compileVariablesEP11QStringList+0x4a2>
            }

    }


    return result;
     c88:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     c89:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     c90:	48 89 c7             	mov    %rax,%rdi
     c93:	e8 00 00 00 00       	callq  c98 <_ZN6Parser16compileVariablesEP11QStringList+0x8ca>
     c98:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     c9f:	48 89 c7             	mov    %rax,%rdi
     ca2:	e8 00 00 00 00       	callq  ca7 <_ZN6Parser16compileVariablesEP11QStringList+0x8d9>
     ca7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     cae:	48 89 c7             	mov    %rax,%rdi
     cb1:	e8 00 00 00 00       	callq  cb6 <_ZN6Parser16compileVariablesEP11QStringList+0x8e8>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     cb6:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     cbd:	48 89 c7             	mov    %rax,%rdi
     cc0:	e8 00 00 00 00       	callq  cc5 <_ZN6Parser16compileVariablesEP11QStringList+0x8f7>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     cc5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     ccc:	48 89 c7             	mov    %rax,%rdi
     ccf:	e8 00 00 00 00       	callq  cd4 <_ZN6Parser16compileVariablesEP11QStringList+0x906>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     cd4:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     cdb:	48 89 c7             	mov    %rax,%rdi
     cde:	e8 00 00 00 00       	callq  ce3 <_ZN6Parser16compileVariablesEP11QStringList+0x915>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     ce3:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     cea:	48 89 c7             	mov    %rax,%rdi
     ced:	e8 00 00 00 00       	callq  cf2 <_ZN6Parser16compileVariablesEP11QStringList+0x924>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     cf2:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     cf9:	48 89 c7             	mov    %rax,%rdi
     cfc:	e8 00 00 00 00       	callq  d01 <_ZN6Parser16compileVariablesEP11QStringList+0x933>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     d01:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     d08:	48 89 c7             	mov    %rax,%rdi
     d0b:	e8 00 00 00 00       	callq  d10 <_ZN6Parser16compileVariablesEP11QStringList+0x942>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     d10:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     d17:	48 89 c7             	mov    %rax,%rdi
     d1a:	e8 00 00 00 00       	callq  d1f <_ZN6Parser16compileVariablesEP11QStringList+0x951>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     d1f:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     d26:	48 89 c7             	mov    %rax,%rdi
     d29:	e8 00 00 00 00       	callq  d2e <_ZN6Parser16compileVariablesEP11QStringList+0x960>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     d2e:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
     d35:	48 89 c7             	mov    %rax,%rdi
     d38:	e8 00 00 00 00       	callq  d3d <_ZN6Parser16compileVariablesEP11QStringList+0x96f>
            }

    }


    return result;
     d3d:	e9 21 03 00 00       	jmpq   1063 <_ZN6Parser16compileVariablesEP11QStringList+0xc95>
     d42:	48 89 c3             	mov    %rax,%rbx
     d45:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     d4c:	48 89 c7             	mov    %rax,%rdi
     d4f:	e8 00 00 00 00       	callq  d54 <_ZN6Parser16compileVariablesEP11QStringList+0x986>
     d54:	eb 17                	jmp    d6d <_ZN6Parser16compileVariablesEP11QStringList+0x99f>
     d56:	48 89 c3             	mov    %rax,%rbx
     d59:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     d60:	48 89 c7             	mov    %rax,%rdi
     d63:	e8 00 00 00 00       	callq  d68 <_ZN6Parser16compileVariablesEP11QStringList+0x99a>
     d68:	eb 03                	jmp    d6d <_ZN6Parser16compileVariablesEP11QStringList+0x99f>
     d6a:	48 89 c3             	mov    %rax,%rbx
     d6d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     d74:	48 89 c7             	mov    %rax,%rdi
     d77:	e8 00 00 00 00       	callq  d7c <_ZN6Parser16compileVariablesEP11QStringList+0x9ae>
     d7c:	e9 a0 02 00 00       	jmpq   1021 <_ZN6Parser16compileVariablesEP11QStringList+0xc53>
     d81:	48 89 c3             	mov    %rax,%rbx
     d84:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     d8b:	48 89 c7             	mov    %rax,%rdi
     d8e:	e8 00 00 00 00       	callq  d93 <_ZN6Parser16compileVariablesEP11QStringList+0x9c5>
     d93:	e9 89 02 00 00       	jmpq   1021 <_ZN6Parser16compileVariablesEP11QStringList+0xc53>
     d98:	48 89 c3             	mov    %rax,%rbx
     d9b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     da2:	48 89 c7             	mov    %rax,%rdi
     da5:	e8 00 00 00 00       	callq  daa <_ZN6Parser16compileVariablesEP11QStringList+0x9dc>
     daa:	eb 17                	jmp    dc3 <_ZN6Parser16compileVariablesEP11QStringList+0x9f5>
     dac:	48 89 c3             	mov    %rax,%rbx
     daf:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     db6:	48 89 c7             	mov    %rax,%rdi
     db9:	e8 00 00 00 00       	callq  dbe <_ZN6Parser16compileVariablesEP11QStringList+0x9f0>
     dbe:	eb 03                	jmp    dc3 <_ZN6Parser16compileVariablesEP11QStringList+0x9f5>
     dc0:	48 89 c3             	mov    %rax,%rbx
     dc3:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     dca:	48 89 c7             	mov    %rax,%rdi
     dcd:	e8 00 00 00 00       	callq  dd2 <_ZN6Parser16compileVariablesEP11QStringList+0xa04>
     dd2:	e9 36 02 00 00       	jmpq   100d <_ZN6Parser16compileVariablesEP11QStringList+0xc3f>
     dd7:	48 89 c3             	mov    %rax,%rbx
     dda:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     de1:	48 89 c7             	mov    %rax,%rdi
     de4:	e8 00 00 00 00       	callq  de9 <_ZN6Parser16compileVariablesEP11QStringList+0xa1b>
     de9:	e9 1f 02 00 00       	jmpq   100d <_ZN6Parser16compileVariablesEP11QStringList+0xc3f>
     dee:	48 89 c3             	mov    %rax,%rbx
     df1:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     df8:	48 89 c7             	mov    %rax,%rdi
     dfb:	e8 00 00 00 00       	callq  e00 <_ZN6Parser16compileVariablesEP11QStringList+0xa32>
     e00:	e9 f4 01 00 00       	jmpq   ff9 <_ZN6Parser16compileVariablesEP11QStringList+0xc2b>
     e05:	48 89 c3             	mov    %rax,%rbx
     e08:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     e0f:	48 89 c7             	mov    %rax,%rdi
     e12:	e8 00 00 00 00       	callq  e17 <_ZN6Parser16compileVariablesEP11QStringList+0xa49>
     e17:	e9 dd 01 00 00       	jmpq   ff9 <_ZN6Parser16compileVariablesEP11QStringList+0xc2b>
     e1c:	48 89 c3             	mov    %rax,%rbx
     e1f:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     e26:	48 89 c7             	mov    %rax,%rdi
     e29:	e8 00 00 00 00       	callq  e2e <_ZN6Parser16compileVariablesEP11QStringList+0xa60>
     e2e:	e9 b2 01 00 00       	jmpq   fe5 <_ZN6Parser16compileVariablesEP11QStringList+0xc17>
     e33:	48 89 c3             	mov    %rax,%rbx
     e36:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     e3d:	48 89 c7             	mov    %rax,%rdi
     e40:	e8 00 00 00 00       	callq  e45 <_ZN6Parser16compileVariablesEP11QStringList+0xa77>
     e45:	e9 9b 01 00 00       	jmpq   fe5 <_ZN6Parser16compileVariablesEP11QStringList+0xc17>
     e4a:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = str->begin(); sit != str->end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     e4d:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     e54:	48 89 c7             	mov    %rax,%rdi
     e57:	e8 00 00 00 00       	callq  e5c <_ZN6Parser16compileVariablesEP11QStringList+0xa8e>
     e5c:	e9 34 01 00 00       	jmpq   f95 <_ZN6Parser16compileVariablesEP11QStringList+0xbc7>
     e61:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     e64:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     e6b:	48 89 c7             	mov    %rax,%rdi
     e6e:	e8 00 00 00 00       	callq  e73 <_ZN6Parser16compileVariablesEP11QStringList+0xaa5>
     e73:	e9 1d 01 00 00       	jmpq   f95 <_ZN6Parser16compileVariablesEP11QStringList+0xbc7>
     e78:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     e7b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     e82:	48 89 c7             	mov    %rax,%rdi
     e85:	e8 00 00 00 00       	callq  e8a <_ZN6Parser16compileVariablesEP11QStringList+0xabc>
     e8a:	eb 03                	jmp    e8f <_ZN6Parser16compileVariablesEP11QStringList+0xac1>
     e8c:	48 89 c3             	mov    %rax,%rbx
     e8f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     e96:	48 89 c7             	mov    %rax,%rdi
     e99:	e8 00 00 00 00       	callq  e9e <_ZN6Parser16compileVariablesEP11QStringList+0xad0>
     e9e:	eb 03                	jmp    ea3 <_ZN6Parser16compileVariablesEP11QStringList+0xad5>
     ea0:	48 89 c3             	mov    %rax,%rbx
     ea3:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     eaa:	48 89 c7             	mov    %rax,%rdi
     ead:	e8 00 00 00 00       	callq  eb2 <_ZN6Parser16compileVariablesEP11QStringList+0xae4>
     eb2:	e9 de 00 00 00       	jmpq   f95 <_ZN6Parser16compileVariablesEP11QStringList+0xbc7>
     eb7:	48 89 c3             	mov    %rax,%rbx

        int iType = 4;

        if(indexRgPort>=0)
        {
            name  = erx_rgPort.cap(1);
     eba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     ec1:	48 89 c7             	mov    %rax,%rdi
     ec4:	e8 00 00 00 00       	callq  ec9 <_ZN6Parser16compileVariablesEP11QStringList+0xafb>
     ec9:	eb 7a                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     ecb:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
     ece:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     ed2:	48 89 c7             	mov    %rax,%rdi
     ed5:	e8 00 00 00 00       	callq  eda <_ZN6Parser16compileVariablesEP11QStringList+0xb0c>
     eda:	eb 69                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     edc:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
     edf:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     ee3:	48 89 c7             	mov    %rax,%rdi
     ee6:	e8 00 00 00 00       	callq  eeb <_ZN6Parser16compileVariablesEP11QStringList+0xb1d>
     eeb:	eb 58                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     eed:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
     ef0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     ef4:	48 89 c7             	mov    %rax,%rdi
     ef7:	e8 00 00 00 00       	callq  efc <_ZN6Parser16compileVariablesEP11QStringList+0xb2e>
     efc:	eb 03                	jmp    f01 <_ZN6Parser16compileVariablesEP11QStringList+0xb33>
     efe:	48 89 c3             	mov    %rax,%rbx
     f01:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     f05:	48 89 c7             	mov    %rax,%rdi
     f08:	e8 00 00 00 00       	callq  f0d <_ZN6Parser16compileVariablesEP11QStringList+0xb3f>
     f0d:	eb 03                	jmp    f12 <_ZN6Parser16compileVariablesEP11QStringList+0xb44>
     f0f:	48 89 c3             	mov    %rax,%rbx
     f12:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f16:	48 89 c7             	mov    %rax,%rdi
     f19:	e8 00 00 00 00       	callq  f1e <_ZN6Parser16compileVariablesEP11QStringList+0xb50>
     f1e:	eb 25                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     f20:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
     f23:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     f27:	48 89 c7             	mov    %rax,%rdi
     f2a:	e8 00 00 00 00       	callq  f2f <_ZN6Parser16compileVariablesEP11QStringList+0xb61>
     f2f:	eb 14                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     f31:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
     f34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f38:	48 89 c7             	mov    %rax,%rdi
     f3b:	e8 00 00 00 00       	callq  f40 <_ZN6Parser16compileVariablesEP11QStringList+0xb72>
     f40:	eb 03                	jmp    f45 <_ZN6Parser16compileVariablesEP11QStringList+0xb77>
     f42:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     f45:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     f4c:	48 89 c7             	mov    %rax,%rdi
     f4f:	e8 00 00 00 00       	callq  f54 <_ZN6Parser16compileVariablesEP11QStringList+0xb86>
     f54:	eb 03                	jmp    f59 <_ZN6Parser16compileVariablesEP11QStringList+0xb8b>
     f56:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     f59:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     f60:	48 89 c7             	mov    %rax,%rdi
     f63:	e8 00 00 00 00       	callq  f68 <_ZN6Parser16compileVariablesEP11QStringList+0xb9a>
     f68:	eb 03                	jmp    f6d <_ZN6Parser16compileVariablesEP11QStringList+0xb9f>
     f6a:	48 89 c3             	mov    %rax,%rbx
     f6d:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     f74:	48 89 c7             	mov    %rax,%rdi
     f77:	e8 00 00 00 00       	callq  f7c <_ZN6Parser16compileVariablesEP11QStringList+0xbae>
     f7c:	eb 03                	jmp    f81 <_ZN6Parser16compileVariablesEP11QStringList+0xbb3>
     f7e:	48 89 c3             	mov    %rax,%rbx
     f81:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     f88:	48 89 c7             	mov    %rax,%rdi
     f8b:	e8 00 00 00 00       	callq  f90 <_ZN6Parser16compileVariablesEP11QStringList+0xbc2>
     f90:	eb 03                	jmp    f95 <_ZN6Parser16compileVariablesEP11QStringList+0xbc7>
     f92:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     f95:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     f9c:	48 89 c7             	mov    %rax,%rdi
     f9f:	e8 00 00 00 00       	callq  fa4 <_ZN6Parser16compileVariablesEP11QStringList+0xbd6>
     fa4:	eb 03                	jmp    fa9 <_ZN6Parser16compileVariablesEP11QStringList+0xbdb>
     fa6:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     fa9:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     fb0:	48 89 c7             	mov    %rax,%rdi
     fb3:	e8 00 00 00 00       	callq  fb8 <_ZN6Parser16compileVariablesEP11QStringList+0xbea>
     fb8:	eb 03                	jmp    fbd <_ZN6Parser16compileVariablesEP11QStringList+0xbef>
     fba:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     fbd:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     fc4:	48 89 c7             	mov    %rax,%rdi
     fc7:	e8 00 00 00 00       	callq  fcc <_ZN6Parser16compileVariablesEP11QStringList+0xbfe>
     fcc:	eb 03                	jmp    fd1 <_ZN6Parser16compileVariablesEP11QStringList+0xc03>
     fce:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     fd1:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     fd8:	48 89 c7             	mov    %rax,%rdi
     fdb:	e8 00 00 00 00       	callq  fe0 <_ZN6Parser16compileVariablesEP11QStringList+0xc12>
     fe0:	eb 03                	jmp    fe5 <_ZN6Parser16compileVariablesEP11QStringList+0xc17>
     fe2:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     fe5:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     fec:	48 89 c7             	mov    %rax,%rdi
     fef:	e8 00 00 00 00       	callq  ff4 <_ZN6Parser16compileVariablesEP11QStringList+0xc26>
     ff4:	eb 03                	jmp    ff9 <_ZN6Parser16compileVariablesEP11QStringList+0xc2b>
     ff6:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     ff9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1000:	48 89 c7             	mov    %rax,%rdi
    1003:	e8 00 00 00 00       	callq  1008 <_ZN6Parser16compileVariablesEP11QStringList+0xc3a>
    1008:	eb 03                	jmp    100d <_ZN6Parser16compileVariablesEP11QStringList+0xc3f>
    100a:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
    100d:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
    1014:	48 89 c7             	mov    %rax,%rdi
    1017:	e8 00 00 00 00       	callq  101c <_ZN6Parser16compileVariablesEP11QStringList+0xc4e>
    101c:	eb 03                	jmp    1021 <_ZN6Parser16compileVariablesEP11QStringList+0xc53>
    101e:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
    1021:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
    1028:	48 89 c7             	mov    %rax,%rdi
    102b:	e8 00 00 00 00       	callq  1030 <_ZN6Parser16compileVariablesEP11QStringList+0xc62>
    1030:	eb 03                	jmp    1035 <_ZN6Parser16compileVariablesEP11QStringList+0xc67>
    1032:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    1035:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    103c:	48 89 c7             	mov    %rax,%rdi
    103f:	e8 00 00 00 00       	callq  1044 <_ZN6Parser16compileVariablesEP11QStringList+0xc76>
    1044:	eb 03                	jmp    1049 <_ZN6Parser16compileVariablesEP11QStringList+0xc7b>
    1046:	48 89 c3             	mov    %rax,%rbx
    1049:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
    1050:	48 89 c7             	mov    %rax,%rdi
    1053:	e8 00 00 00 00       	callq  1058 <_ZN6Parser16compileVariablesEP11QStringList+0xc8a>
    1058:	48 89 d8             	mov    %rbx,%rax
    105b:	48 89 c7             	mov    %rax,%rdi
    105e:	e8 00 00 00 00       	callq  1063 <_ZN6Parser16compileVariablesEP11QStringList+0xc95>

    }


    return result;
}
    1063:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
    106a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    106e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1075:	00 00 
    1077:	74 05                	je     107e <_ZN6Parser16compileVariablesEP11QStringList+0xcb0>
    1079:	e8 00 00 00 00       	callq  107e <_ZN6Parser16compileVariablesEP11QStringList+0xcb0>
    107e:	48 81 c4 a8 02 00 00 	add    $0x2a8,%rsp
    1085:	5b                   	pop    %rbx
    1086:	5d                   	pop    %rbp
    1087:	c3                   	retq   

0000000000001088 <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
    1088:	55                   	push   %rbp
    1089:	48 89 e5             	mov    %rsp,%rbp
    108c:	53                   	push   %rbx
    108d:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
    1094:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
    109b:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
    10a2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    10a9:	00 00 
    10ab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    10af:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
    10b1:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
    10b8:	00 00 00 
    int index   = 0;
    10bb:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
    10c2:	00 00 00 

    VarTypes VT;
    10c5:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    10cc:	48 89 c7             	mov    %rax,%rdi
    10cf:	e8 00 00 00 00       	callq  10d4 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    10d4:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    10db:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    10e2:	48 89 d6             	mov    %rdx,%rsi
    10e5:	48 89 c7             	mov    %rax,%rdi
    10e8:	e8 00 00 00 00       	callq  10ed <_ZN6Parser14checkVariablesEP7QString+0x65>
    10ed:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    10f4:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    10fb:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1102 <_ZN6Parser14checkVariablesEP7QString+0x7a>
    1102:	48 89 ce             	mov    %rcx,%rsi
    1105:	48 89 c7             	mov    %rax,%rdi
    1108:	e8 00 00 00 00       	callq  110d <_ZN6Parser14checkVariablesEP7QString+0x85>
    110d:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    1114:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    111b:	b9 00 00 00 00       	mov    $0x0,%ecx
    1120:	ba 01 00 00 00       	mov    $0x1,%edx
    1125:	48 89 c7             	mov    %rax,%rdi
    1128:	e8 00 00 00 00       	callq  112d <_ZN6Parser14checkVariablesEP7QString+0xa5>
    112d:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1134:	48 89 c7             	mov    %rax,%rdi
    1137:	e8 00 00 00 00       	callq  113c <_ZN6Parser14checkVariablesEP7QString+0xb4>
    113c:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1143:	48 89 c7             	mov    %rax,%rdi
    1146:	e8 00 00 00 00       	callq  114b <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    114b:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1152:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1159:	48 89 d6             	mov    %rdx,%rsi
    115c:	48 89 c7             	mov    %rax,%rdi
    115f:	e8 00 00 00 00       	callq  1164 <_ZN6Parser14checkVariablesEP7QString+0xdc>
    1164:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    116b:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    1172:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1179 <_ZN6Parser14checkVariablesEP7QString+0xf1>
    1179:	48 89 ce             	mov    %rcx,%rsi
    117c:	48 89 c7             	mov    %rax,%rdi
    117f:	e8 00 00 00 00       	callq  1184 <_ZN6Parser14checkVariablesEP7QString+0xfc>
    1184:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    118b:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1192:	b9 00 00 00 00       	mov    $0x0,%ecx
    1197:	ba 01 00 00 00       	mov    $0x1,%edx
    119c:	48 89 c7             	mov    %rax,%rdi
    119f:	e8 00 00 00 00       	callq  11a4 <_ZN6Parser14checkVariablesEP7QString+0x11c>
    11a4:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    11ab:	48 89 c7             	mov    %rax,%rdi
    11ae:	e8 00 00 00 00       	callq  11b3 <_ZN6Parser14checkVariablesEP7QString+0x12b>
    11b3:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    11ba:	48 89 c7             	mov    %rax,%rdi
    11bd:	e8 00 00 00 00       	callq  11c2 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    11c2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    11c9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11d0 <_ZN6Parser14checkVariablesEP7QString+0x148>
    11d0:	48 89 c7             	mov    %rax,%rdi
    11d3:	e8 00 00 00 00       	callq  11d8 <_ZN6Parser14checkVariablesEP7QString+0x150>
    11d8:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    11df:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    11e6:	b9 00 00 00 00       	mov    $0x0,%ecx
    11eb:	ba 01 00 00 00       	mov    $0x1,%edx
    11f0:	48 89 c7             	mov    %rax,%rdi
    11f3:	e8 00 00 00 00       	callq  11f8 <_ZN6Parser14checkVariablesEP7QString+0x170>
    11f8:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    11ff:	48 89 c7             	mov    %rax,%rdi
    1202:	e8 00 00 00 00       	callq  1207 <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    1207:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    120e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1215 <_ZN6Parser14checkVariablesEP7QString+0x18d>
    1215:	48 89 c7             	mov    %rax,%rdi
    1218:	e8 00 00 00 00       	callq  121d <_ZN6Parser14checkVariablesEP7QString+0x195>
    121d:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    1224:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    122b:	b9 00 00 00 00       	mov    $0x0,%ecx
    1230:	ba 01 00 00 00       	mov    $0x1,%edx
    1235:	48 89 c7             	mov    %rax,%rdi
    1238:	e8 00 00 00 00       	callq  123d <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    123d:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1244:	48 89 c7             	mov    %rax,%rdi
    1247:	e8 00 00 00 00       	callq  124c <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    124c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1253:	48 89 c7             	mov    %rax,%rdi
    1256:	e8 00 00 00 00       	callq  125b <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    125b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1262:	48 89 c7             	mov    %rax,%rdi
    1265:	e8 00 00 00 00       	callq  126a <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    126a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1271:	48 89 c7             	mov    %rax,%rdi
    1274:	e8 00 00 00 00       	callq  1279 <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    1279:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    1280:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    1283:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    1289:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    1290:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1297:	b9 00 00 00 00       	mov    $0x0,%ecx
    129c:	48 89 c7             	mov    %rax,%rdi
    129f:	e8 00 00 00 00       	callq  12a4 <_ZN6Parser14checkVariablesEP7QString+0x21c>
    12a4:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    12aa:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    12b1:	0f 95 c0             	setne  %al
    12b4:	84 c0                	test   %al,%al
    12b6:	0f 84 68 01 00 00    	je     1424 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    12bc:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    12c3:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    12ca:	ba 01 00 00 00       	mov    $0x1,%edx
    12cf:	48 89 ce             	mov    %rcx,%rsi
    12d2:	48 89 c7             	mov    %rax,%rdi
    12d5:	e8 00 00 00 00       	callq  12da <_ZN6Parser14checkVariablesEP7QString+0x252>
    12da:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    12e1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    12e8:	48 89 d6             	mov    %rdx,%rsi
    12eb:	48 89 c7             	mov    %rax,%rdi
    12ee:	e8 00 00 00 00       	callq  12f3 <_ZN6Parser14checkVariablesEP7QString+0x26b>
    12f3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    12fa:	48 89 c7             	mov    %rax,%rdi
    12fd:	e8 00 00 00 00       	callq  1302 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    1302:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1309:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1310:	ba 02 00 00 00       	mov    $0x2,%edx
    1315:	48 89 ce             	mov    %rcx,%rsi
    1318:	48 89 c7             	mov    %rax,%rdi
    131b:	e8 00 00 00 00       	callq  1320 <_ZN6Parser14checkVariablesEP7QString+0x298>
    1320:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    1327:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    132e:	48 89 d6             	mov    %rdx,%rsi
    1331:	48 89 c7             	mov    %rax,%rdi
    1334:	e8 00 00 00 00       	callq  1339 <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    1339:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1340:	48 89 c7             	mov    %rax,%rdi
    1343:	e8 00 00 00 00       	callq  1348 <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    1348:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    134f:	48 89 c7             	mov    %rax,%rdi
    1352:	e8 00 00 00 00       	callq  1357 <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    1357:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    135d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1364:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 136b <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    136b:	48 89 c7             	mov    %rax,%rdi
    136e:	e8 00 00 00 00       	callq  1373 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    1373:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    137a:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1381:	ba 02 00 00 00       	mov    $0x2,%edx
    1386:	48 89 ce             	mov    %rcx,%rsi
    1389:	48 89 c7             	mov    %rax,%rdi
    138c:	e8 00 00 00 00       	callq  1391 <_ZN6Parser14checkVariablesEP7QString+0x309>
    1391:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1398:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    139f:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    13a6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    13ac:	b9 00 00 00 00       	mov    $0x0,%ecx
    13b1:	48 89 c7             	mov    %rax,%rdi
    13b4:	e8 00 00 00 00       	callq  13b9 <_ZN6Parser14checkVariablesEP7QString+0x331>
    13b9:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    13c0:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    13c7:	48 89 d6             	mov    %rdx,%rsi
    13ca:	48 89 c7             	mov    %rax,%rdi
    13cd:	e8 00 00 00 00       	callq  13d2 <_ZN6Parser14checkVariablesEP7QString+0x34a>
    13d2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    13d9:	48 89 c7             	mov    %rax,%rdi
    13dc:	e8 00 00 00 00       	callq  13e1 <_ZN6Parser14checkVariablesEP7QString+0x359>
    13e1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    13e8:	48 89 c7             	mov    %rax,%rdi
    13eb:	e8 00 00 00 00       	callq  13f0 <_ZN6Parser14checkVariablesEP7QString+0x368>
    13f0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    13f7:	48 89 c7             	mov    %rax,%rdi
    13fa:	e8 00 00 00 00       	callq  13ff <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    13ff:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1406:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    140d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1414:	48 89 c6             	mov    %rax,%rsi
    1417:	48 89 d7             	mov    %rdx,%rdi
    141a:	e8 00 00 00 00       	callq  141f <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    141f:	e9 5f fe ff ff       	jmpq   1283 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    1424:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    142b:	48 05 98 00 00 00    	add    $0x98,%rax
    1431:	48 89 c7             	mov    %rax,%rdi
    1434:	e8 00 00 00 00       	callq  1439 <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    1439:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1440:	48 89 c7             	mov    %rax,%rdi
    1443:	e8 00 00 00 00       	callq  1448 <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    1448:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    144f:	48 89 c7             	mov    %rax,%rdi
    1452:	e8 00 00 00 00       	callq  1457 <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    1457:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    145e:	48 89 c7             	mov    %rax,%rdi
    1461:	e8 00 00 00 00       	callq  1466 <_ZN6Parser14checkVariablesEP7QString+0x3de>
    1466:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    146d:	48 89 c7             	mov    %rax,%rdi
    1470:	e8 00 00 00 00       	callq  1475 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1475:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    147c:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1483:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    148a:	48 89 d6             	mov    %rdx,%rsi
    148d:	48 89 c7             	mov    %rax,%rdi
    1490:	e8 00 00 00 00       	callq  1495 <_ZN6Parser14checkVariablesEP7QString+0x40d>
    1495:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    149c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    14a3:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    14aa:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    14b1:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    14b8:	48 89 d6             	mov    %rdx,%rsi
    14bb:	48 89 c7             	mov    %rax,%rdi
    14be:	e8 00 00 00 00       	callq  14c3 <_ZN6Parser14checkVariablesEP7QString+0x43b>
    14c3:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    14ca:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    14d1:	48 89 d6             	mov    %rdx,%rsi
    14d4:	48 89 c7             	mov    %rax,%rdi
    14d7:	e8 00 00 00 00       	callq  14dc <_ZN6Parser14checkVariablesEP7QString+0x454>
    14dc:	84 c0                	test   %al,%al
    14de:	0f 84 de 03 00 00    	je     18c2 <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
    14e4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    14eb:	48 89 c7             	mov    %rax,%rdi
    14ee:	e8 00 00 00 00       	callq  14f3 <_ZN6Parser14checkVariablesEP7QString+0x46b>
    14f3:	48 89 c2             	mov    %rax,%rdx
    14f6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    14fd:	48 89 d6             	mov    %rdx,%rsi
    1500:	48 89 c7             	mov    %rax,%rdi
    1503:	e8 00 00 00 00       	callq  1508 <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    1508:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    150f:	48 89 c7             	mov    %rax,%rdi
    1512:	e8 00 00 00 00       	callq  1517 <_ZN6Parser14checkVariablesEP7QString+0x48f>
    1517:	48 89 c6             	mov    %rax,%rsi
    151a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1521:	b9 00 00 00 00       	mov    $0x0,%ecx
    1526:	ba 00 00 00 00       	mov    $0x0,%edx
    152b:	48 89 c7             	mov    %rax,%rdi
    152e:	e8 00 00 00 00       	callq  1533 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    1533:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    1539:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1540:	48 89 c7             	mov    %rax,%rdi
    1543:	e8 00 00 00 00       	callq  1548 <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    1548:	48 89 c6             	mov    %rax,%rsi
    154b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1552:	b9 00 00 00 00       	mov    $0x0,%ecx
    1557:	ba 00 00 00 00       	mov    $0x0,%edx
    155c:	48 89 c7             	mov    %rax,%rdi
    155f:	e8 00 00 00 00       	callq  1564 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    1564:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    156a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1571:	48 89 c7             	mov    %rax,%rdi
    1574:	e8 00 00 00 00       	callq  1579 <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    1579:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    157f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1586:	48 89 c7             	mov    %rax,%rdi
    1589:	e8 00 00 00 00       	callq  158e <_ZN6Parser14checkVariablesEP7QString+0x506>
    158e:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    1594:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    159b:	00 00 00 

        if(ZZ>=0)
    159e:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    15a5:	0f 88 0d 02 00 00    	js     17b8 <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
    15ab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    15b2:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    15b9:	ba 01 00 00 00       	mov    $0x1,%edx
    15be:	48 89 ce             	mov    %rcx,%rsi
    15c1:	48 89 c7             	mov    %rax,%rdi
    15c4:	e8 00 00 00 00       	callq  15c9 <_ZN6Parser14checkVariablesEP7QString+0x541>
    15c9:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    15d0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15d7:	48 89 d6             	mov    %rdx,%rsi
    15da:	48 89 c7             	mov    %rax,%rdi
    15dd:	e8 00 00 00 00       	callq  15e2 <_ZN6Parser14checkVariablesEP7QString+0x55a>
    15e2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    15e9:	48 89 c7             	mov    %rax,%rdi
    15ec:	e8 00 00 00 00       	callq  15f1 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    15f1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    15f5:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    15fc:	ba 02 00 00 00       	mov    $0x2,%edx
    1601:	48 89 ce             	mov    %rcx,%rsi
    1604:	48 89 c7             	mov    %rax,%rdi
    1607:	e8 00 00 00 00       	callq  160c <_ZN6Parser14checkVariablesEP7QString+0x584>
    160c:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    1610:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1617:	48 89 d6             	mov    %rdx,%rsi
    161a:	48 89 c7             	mov    %rax,%rdi
    161d:	e8 00 00 00 00       	callq  1622 <_ZN6Parser14checkVariablesEP7QString+0x59a>
    1622:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1626:	48 89 c7             	mov    %rax,%rdi
    1629:	e8 00 00 00 00       	callq  162e <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    162e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1632:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1639:	ba 03 00 00 00       	mov    $0x3,%edx
    163e:	48 89 ce             	mov    %rcx,%rsi
    1641:	48 89 c7             	mov    %rax,%rdi
    1644:	e8 00 00 00 00       	callq  1649 <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    1649:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    164d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1654:	48 89 d6             	mov    %rdx,%rsi
    1657:	48 89 c7             	mov    %rax,%rdi
    165a:	e8 00 00 00 00       	callq  165f <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    165f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1663:	48 89 c7             	mov    %rax,%rdi
    1666:	e8 00 00 00 00       	callq  166b <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    166b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    166f:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    1676:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 167d <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    167d:	48 89 ce             	mov    %rcx,%rsi
    1680:	48 89 c7             	mov    %rax,%rdi
    1683:	e8 00 00 00 00       	callq  1688 <_ZN6Parser14checkVariablesEP7QString+0x600>
    1688:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    168c:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    1693:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    1697:	48 89 ce             	mov    %rcx,%rsi
    169a:	48 89 c7             	mov    %rax,%rdi
    169d:	e8 00 00 00 00       	callq  16a2 <_ZN6Parser14checkVariablesEP7QString+0x61a>
    16a2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    16a6:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    16aa:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 16b1 <_ZN6Parser14checkVariablesEP7QString+0x629>
    16b1:	48 89 ce             	mov    %rcx,%rsi
    16b4:	48 89 c7             	mov    %rax,%rdi
    16b7:	e8 00 00 00 00       	callq  16bc <_ZN6Parser14checkVariablesEP7QString+0x634>
    16bc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16c3:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    16ca:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    16ce:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    16d5:	48 89 c6             	mov    %rax,%rsi
    16d8:	48 89 cf             	mov    %rcx,%rdi
    16db:	e8 00 00 00 00       	callq  16e0 <_ZN6Parser14checkVariablesEP7QString+0x658>
    16e0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    16e4:	48 89 c7             	mov    %rax,%rdi
    16e7:	e8 00 00 00 00       	callq  16ec <_ZN6Parser14checkVariablesEP7QString+0x664>
    16ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    16f0:	48 89 c7             	mov    %rax,%rdi
    16f3:	e8 00 00 00 00       	callq  16f8 <_ZN6Parser14checkVariablesEP7QString+0x670>
    16f8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    16fc:	48 89 c7             	mov    %rax,%rdi
    16ff:	e8 00 00 00 00       	callq  1704 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    1704:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    170b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1712 <_ZN6Parser14checkVariablesEP7QString+0x68a>
    1712:	48 89 c7             	mov    %rax,%rdi
    1715:	e8 00 00 00 00       	callq  171a <_ZN6Parser14checkVariablesEP7QString+0x692>
    171a:	84 c0                	test   %al,%al
    171c:	74 0a                	je     1728 <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    171e:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    1725:	00 00 00 
            if(type=="port")    iType = 80;
    1728:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    172f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1736 <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    1736:	48 89 c7             	mov    %rax,%rdi
    1739:	e8 00 00 00 00       	callq  173e <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    173e:	84 c0                	test   %al,%al
    1740:	74 0a                	je     174c <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    1742:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    1749:	00 00 00 

            index++;
    174c:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    1753:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1759:	88 45 e0             	mov    %al,-0x20(%rbp)
    175c:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1763:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    176a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    176e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1775:	48 89 c6             	mov    %rax,%rsi
    1778:	48 89 cf             	mov    %rcx,%rdi
    177b:	e8 00 00 00 00       	callq  1780 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
    1780:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    1786:	88 45 e0             	mov    %al,-0x20(%rbp)
    1789:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    178f:	88 45 d0             	mov    %al,-0x30(%rbp)
    1792:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1799:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    17a0:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17a4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17a8:	48 89 c6             	mov    %rax,%rsi
    17ab:	48 89 cf             	mov    %rcx,%rdi
    17ae:	e8 00 00 00 00       	callq  17b3 <_ZN6Parser14checkVariablesEP7QString+0x72b>
    17b3:	e9 e7 00 00 00       	jmpq   189f <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
    17b8:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    17bf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17c3:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    17ca:	ba 00 00 00 00       	mov    $0x0,%edx
    17cf:	48 89 ce             	mov    %rcx,%rsi
    17d2:	48 89 c7             	mov    %rax,%rdi
    17d5:	e8 00 00 00 00       	callq  17da <_ZN6Parser14checkVariablesEP7QString+0x752>
    17da:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    17de:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    17e5:	48 89 d6             	mov    %rdx,%rsi
    17e8:	48 89 c7             	mov    %rax,%rdi
    17eb:	e8 00 00 00 00       	callq  17f0 <_ZN6Parser14checkVariablesEP7QString+0x768>
    17f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17f4:	48 89 c7             	mov    %rax,%rdi
    17f7:	e8 00 00 00 00       	callq  17fc <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
    17fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1800:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1807 <_ZN6Parser14checkVariablesEP7QString+0x77f>
    1807:	48 89 c7             	mov    %rax,%rdi
    180a:	e8 00 00 00 00       	callq  180f <_ZN6Parser14checkVariablesEP7QString+0x787>
    180f:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1816:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    181d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1821:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1828:	48 89 c6             	mov    %rax,%rsi
    182b:	48 89 cf             	mov    %rcx,%rdi
    182e:	e8 00 00 00 00       	callq  1833 <_ZN6Parser14checkVariablesEP7QString+0x7ab>
    1833:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1837:	48 89 c7             	mov    %rax,%rdi
    183a:	e8 00 00 00 00       	callq  183f <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
    183f:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1845:	88 45 e0             	mov    %al,-0x20(%rbp)
    1848:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    184f:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    1856:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    185a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1861:	48 89 c6             	mov    %rax,%rsi
    1864:	48 89 cf             	mov    %rcx,%rdi
    1867:	e8 00 00 00 00       	callq  186c <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
    186c:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    1872:	88 45 e0             	mov    %al,-0x20(%rbp)
    1875:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    187b:	88 45 d0             	mov    %al,-0x30(%rbp)
    187e:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1885:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    188c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1890:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1894:	48 89 c6             	mov    %rax,%rsi
    1897:	48 89 cf             	mov    %rcx,%rdi
    189a:	e8 00 00 00 00       	callq  189f <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    189f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    18a6:	48 89 c7             	mov    %rax,%rdi
    18a9:	e8 00 00 00 00       	callq  18ae <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    18ae:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    18b5:	48 89 c7             	mov    %rax,%rdi
    18b8:	e8 00 00 00 00       	callq  18bd <_ZN6Parser14checkVariablesEP7QString+0x835>
    18bd:	e9 e1 fb ff ff       	jmpq   14a3 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    18c2:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    18c8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    18cf:	48 89 c7             	mov    %rax,%rdi
    18d2:	e8 00 00 00 00       	callq  18d7 <_ZN6Parser14checkVariablesEP7QString+0x84f>
    18d7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    18de:	48 89 c7             	mov    %rax,%rdi
    18e1:	e8 00 00 00 00       	callq  18e6 <_ZN6Parser14checkVariablesEP7QString+0x85e>
    18e6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    18ed:	48 89 c7             	mov    %rax,%rdi
    18f0:	e8 00 00 00 00       	callq  18f5 <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    18f5:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    18fc:	48 89 c7             	mov    %rax,%rdi
    18ff:	e8 00 00 00 00       	callq  1904 <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1904:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    190b:	48 89 c7             	mov    %rax,%rdi
    190e:	e8 00 00 00 00       	callq  1913 <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1913:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    191a:	48 89 c7             	mov    %rax,%rdi
    191d:	e8 00 00 00 00       	callq  1922 <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1922:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1929:	48 89 c7             	mov    %rax,%rdi
    192c:	e8 00 00 00 00       	callq  1931 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1931:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1938:	48 89 c7             	mov    %rax,%rdi
    193b:	e8 00 00 00 00       	callq  1940 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1940:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1947:	48 89 c7             	mov    %rax,%rdi
    194a:	e8 00 00 00 00       	callq  194f <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    194f:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1956:	48 89 c7             	mov    %rax,%rdi
    1959:	e8 00 00 00 00       	callq  195e <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    195e:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1965:	48 89 c7             	mov    %rax,%rdi
    1968:	e8 00 00 00 00       	callq  196d <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    196d:	89 d8                	mov    %ebx,%eax
}
    196f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1973:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    197a:	00 00 
    197c:	0f 84 03 03 00 00    	je     1c85 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    1982:	e9 f9 02 00 00       	jmpq   1c80 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
    1987:	48 89 c3             	mov    %rax,%rbx
    198a:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1991:	48 89 c7             	mov    %rax,%rdi
    1994:	e8 00 00 00 00       	callq  1999 <_ZN6Parser14checkVariablesEP7QString+0x911>
    1999:	eb 17                	jmp    19b2 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    199b:	48 89 c3             	mov    %rax,%rbx
    199e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    19a5:	48 89 c7             	mov    %rax,%rdi
    19a8:	e8 00 00 00 00       	callq  19ad <_ZN6Parser14checkVariablesEP7QString+0x925>
    19ad:	eb 03                	jmp    19b2 <_ZN6Parser14checkVariablesEP7QString+0x92a>
    19af:	48 89 c3             	mov    %rax,%rbx
    19b2:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    19b9:	48 89 c7             	mov    %rax,%rdi
    19bc:	e8 00 00 00 00       	callq  19c1 <_ZN6Parser14checkVariablesEP7QString+0x939>
    19c1:	e9 a0 02 00 00       	jmpq   1c66 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    19c6:	48 89 c3             	mov    %rax,%rbx
    19c9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    19d0:	48 89 c7             	mov    %rax,%rdi
    19d3:	e8 00 00 00 00       	callq  19d8 <_ZN6Parser14checkVariablesEP7QString+0x950>
    19d8:	e9 89 02 00 00       	jmpq   1c66 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    19dd:	48 89 c3             	mov    %rax,%rbx
    19e0:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    19e7:	48 89 c7             	mov    %rax,%rdi
    19ea:	e8 00 00 00 00       	callq  19ef <_ZN6Parser14checkVariablesEP7QString+0x967>
    19ef:	eb 17                	jmp    1a08 <_ZN6Parser14checkVariablesEP7QString+0x980>
    19f1:	48 89 c3             	mov    %rax,%rbx
    19f4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    19fb:	48 89 c7             	mov    %rax,%rdi
    19fe:	e8 00 00 00 00       	callq  1a03 <_ZN6Parser14checkVariablesEP7QString+0x97b>
    1a03:	eb 03                	jmp    1a08 <_ZN6Parser14checkVariablesEP7QString+0x980>
    1a05:	48 89 c3             	mov    %rax,%rbx
    1a08:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1a0f:	48 89 c7             	mov    %rax,%rdi
    1a12:	e8 00 00 00 00       	callq  1a17 <_ZN6Parser14checkVariablesEP7QString+0x98f>
    1a17:	e9 36 02 00 00       	jmpq   1c52 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1a1c:	48 89 c3             	mov    %rax,%rbx
    1a1f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1a26:	48 89 c7             	mov    %rax,%rdi
    1a29:	e8 00 00 00 00       	callq  1a2e <_ZN6Parser14checkVariablesEP7QString+0x9a6>
    1a2e:	e9 1f 02 00 00       	jmpq   1c52 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1a33:	48 89 c3             	mov    %rax,%rbx
    1a36:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1a3d:	48 89 c7             	mov    %rax,%rdi
    1a40:	e8 00 00 00 00       	callq  1a45 <_ZN6Parser14checkVariablesEP7QString+0x9bd>
    1a45:	e9 f4 01 00 00       	jmpq   1c3e <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1a4a:	48 89 c3             	mov    %rax,%rbx
    1a4d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1a54:	48 89 c7             	mov    %rax,%rdi
    1a57:	e8 00 00 00 00       	callq  1a5c <_ZN6Parser14checkVariablesEP7QString+0x9d4>
    1a5c:	e9 dd 01 00 00       	jmpq   1c3e <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1a61:	48 89 c3             	mov    %rax,%rbx
    1a64:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1a6b:	48 89 c7             	mov    %rax,%rdi
    1a6e:	e8 00 00 00 00       	callq  1a73 <_ZN6Parser14checkVariablesEP7QString+0x9eb>
    1a73:	e9 b2 01 00 00       	jmpq   1c2a <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1a78:	48 89 c3             	mov    %rax,%rbx
    1a7b:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1a82:	48 89 c7             	mov    %rax,%rdi
    1a85:	e8 00 00 00 00       	callq  1a8a <_ZN6Parser14checkVariablesEP7QString+0xa02>
    1a8a:	e9 9b 01 00 00       	jmpq   1c2a <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1a8f:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    1a92:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1a99:	48 89 c7             	mov    %rax,%rdi
    1a9c:	e8 00 00 00 00       	callq  1aa1 <_ZN6Parser14checkVariablesEP7QString+0xa19>
    1aa1:	e9 34 01 00 00       	jmpq   1bda <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1aa6:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    1aa9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1ab0:	48 89 c7             	mov    %rax,%rdi
    1ab3:	e8 00 00 00 00       	callq  1ab8 <_ZN6Parser14checkVariablesEP7QString+0xa30>
    1ab8:	e9 1d 01 00 00       	jmpq   1bda <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1abd:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    1ac0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1ac7:	48 89 c7             	mov    %rax,%rdi
    1aca:	e8 00 00 00 00       	callq  1acf <_ZN6Parser14checkVariablesEP7QString+0xa47>
    1acf:	eb 03                	jmp    1ad4 <_ZN6Parser14checkVariablesEP7QString+0xa4c>
    1ad1:	48 89 c3             	mov    %rax,%rbx
    1ad4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1adb:	48 89 c7             	mov    %rax,%rdi
    1ade:	e8 00 00 00 00       	callq  1ae3 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1ae3:	eb 03                	jmp    1ae8 <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1ae5:	48 89 c3             	mov    %rax,%rbx
    1ae8:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1aef:	48 89 c7             	mov    %rax,%rdi
    1af2:	e8 00 00 00 00       	callq  1af7 <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1af7:	e9 de 00 00 00       	jmpq   1bda <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1afc:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1aff:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1b06:	48 89 c7             	mov    %rax,%rdi
    1b09:	e8 00 00 00 00       	callq  1b0e <_ZN6Parser14checkVariablesEP7QString+0xa86>
    1b0e:	eb 7a                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b10:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1b13:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1b17:	48 89 c7             	mov    %rax,%rdi
    1b1a:	e8 00 00 00 00       	callq  1b1f <_ZN6Parser14checkVariablesEP7QString+0xa97>
    1b1f:	eb 69                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b21:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1b24:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1b28:	48 89 c7             	mov    %rax,%rdi
    1b2b:	e8 00 00 00 00       	callq  1b30 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
    1b30:	eb 58                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b32:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1b35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1b39:	48 89 c7             	mov    %rax,%rdi
    1b3c:	e8 00 00 00 00       	callq  1b41 <_ZN6Parser14checkVariablesEP7QString+0xab9>
    1b41:	eb 03                	jmp    1b46 <_ZN6Parser14checkVariablesEP7QString+0xabe>
    1b43:	48 89 c3             	mov    %rax,%rbx
    1b46:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1b4a:	48 89 c7             	mov    %rax,%rdi
    1b4d:	e8 00 00 00 00       	callq  1b52 <_ZN6Parser14checkVariablesEP7QString+0xaca>
    1b52:	eb 03                	jmp    1b57 <_ZN6Parser14checkVariablesEP7QString+0xacf>
    1b54:	48 89 c3             	mov    %rax,%rbx
    1b57:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1b5b:	48 89 c7             	mov    %rax,%rdi
    1b5e:	e8 00 00 00 00       	callq  1b63 <_ZN6Parser14checkVariablesEP7QString+0xadb>
    1b63:	eb 25                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b65:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1b68:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b6c:	48 89 c7             	mov    %rax,%rdi
    1b6f:	e8 00 00 00 00       	callq  1b74 <_ZN6Parser14checkVariablesEP7QString+0xaec>
    1b74:	eb 14                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b76:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1b79:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1b7d:	48 89 c7             	mov    %rax,%rdi
    1b80:	e8 00 00 00 00       	callq  1b85 <_ZN6Parser14checkVariablesEP7QString+0xafd>
    1b85:	eb 03                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1b87:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1b8a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1b91:	48 89 c7             	mov    %rax,%rdi
    1b94:	e8 00 00 00 00       	callq  1b99 <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1b99:	eb 03                	jmp    1b9e <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1b9b:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1b9e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1ba5:	48 89 c7             	mov    %rax,%rdi
    1ba8:	e8 00 00 00 00       	callq  1bad <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1bad:	eb 03                	jmp    1bb2 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1baf:	48 89 c3             	mov    %rax,%rbx
    1bb2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1bb9:	48 89 c7             	mov    %rax,%rdi
    1bbc:	e8 00 00 00 00       	callq  1bc1 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1bc1:	eb 03                	jmp    1bc6 <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1bc3:	48 89 c3             	mov    %rax,%rbx
    1bc6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1bcd:	48 89 c7             	mov    %rax,%rdi
    1bd0:	e8 00 00 00 00       	callq  1bd5 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1bd5:	eb 03                	jmp    1bda <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1bd7:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1bda:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1be1:	48 89 c7             	mov    %rax,%rdi
    1be4:	e8 00 00 00 00       	callq  1be9 <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1be9:	eb 03                	jmp    1bee <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1beb:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1bee:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1bf5:	48 89 c7             	mov    %rax,%rdi
    1bf8:	e8 00 00 00 00       	callq  1bfd <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1bfd:	eb 03                	jmp    1c02 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1bff:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1c02:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1c09:	48 89 c7             	mov    %rax,%rdi
    1c0c:	e8 00 00 00 00       	callq  1c11 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1c11:	eb 03                	jmp    1c16 <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1c13:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1c16:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1c1d:	48 89 c7             	mov    %rax,%rdi
    1c20:	e8 00 00 00 00       	callq  1c25 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1c25:	eb 03                	jmp    1c2a <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1c27:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1c2a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1c31:	48 89 c7             	mov    %rax,%rdi
    1c34:	e8 00 00 00 00       	callq  1c39 <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1c39:	eb 03                	jmp    1c3e <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1c3b:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1c3e:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1c45:	48 89 c7             	mov    %rax,%rdi
    1c48:	e8 00 00 00 00       	callq  1c4d <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1c4d:	eb 03                	jmp    1c52 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1c4f:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1c52:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1c59:	48 89 c7             	mov    %rax,%rdi
    1c5c:	e8 00 00 00 00       	callq  1c61 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1c61:	eb 03                	jmp    1c66 <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1c63:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1c66:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1c6d:	48 89 c7             	mov    %rax,%rdi
    1c70:	e8 00 00 00 00       	callq  1c75 <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1c75:	48 89 d8             	mov    %rbx,%rax
    1c78:	48 89 c7             	mov    %rax,%rdi
    1c7b:	e8 00 00 00 00       	callq  1c80 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
    1c80:	e8 00 00 00 00       	callq  1c85 <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    1c85:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1c8c:	5b                   	pop    %rbx
    1c8d:	5d                   	pop    %rbp
    1c8e:	c3                   	retq   
    1c8f:	90                   	nop

0000000000001c90 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1c90:	55                   	push   %rbp
    1c91:	48 89 e5             	mov    %rsp,%rbp
    1c94:	53                   	push   %rbx
    1c95:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1c9c:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1ca3:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1caa:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1cb1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1cb8:	00 00 
    1cba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1cbe:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1cc0:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1cc7:	00 00 00 
    QString result;
    1cca:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cd1:	48 89 c7             	mov    %rax,%rdi
    1cd4:	e8 00 00 00 00       	callq  1cd9 <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1cd9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1cdd:	48 89 c7             	mov    %rax,%rdi
    1ce0:	e8 00 00 00 00       	callq  1ce5 <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1ce5:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1cec:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1cf0:	48 89 d6             	mov    %rdx,%rsi
    1cf3:	48 89 c7             	mov    %rax,%rdi
    1cf6:	e8 00 00 00 00       	callq  1cfb <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1cfb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1cff:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1d03:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1d0a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1d0e:	48 89 d6             	mov    %rdx,%rsi
    1d11:	48 89 c7             	mov    %rax,%rdi
    1d14:	e8 00 00 00 00       	callq  1d19 <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1d19:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1d1d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d21:	48 89 d6             	mov    %rdx,%rsi
    1d24:	48 89 c7             	mov    %rax,%rdi
    1d27:	e8 00 00 00 00       	callq  1d2c <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1d2c:	84 c0                	test   %al,%al
    1d2e:	0f 84 e0 00 00 00    	je     1e14 <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1d34:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d38:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1d3e:	ba 0a 00 00 00       	mov    $0xa,%edx
    1d43:	89 ce                	mov    %ecx,%esi
    1d45:	48 89 c7             	mov    %rax,%rdi
    1d48:	e8 00 00 00 00       	callq  1d4d <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1d4d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d51:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1d55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d5c <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1d5c:	48 89 c7             	mov    %rax,%rdi
    1d5f:	e8 00 00 00 00       	callq  1d64 <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1d64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d68:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1d6c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1d73 <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1d73:	48 89 ce             	mov    %rcx,%rsi
    1d76:	48 89 c7             	mov    %rax,%rdi
    1d79:	e8 00 00 00 00       	callq  1d7e <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1d7e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1d82:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d89:	48 89 d6             	mov    %rdx,%rsi
    1d8c:	48 89 c7             	mov    %rax,%rdi
    1d8f:	e8 00 00 00 00       	callq  1d94 <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1d94:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d98:	48 89 c7             	mov    %rax,%rdi
    1d9b:	e8 00 00 00 00       	callq  1da0 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1da0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1da4:	48 89 c7             	mov    %rax,%rdi
    1da7:	e8 00 00 00 00       	callq  1dac <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1dac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1db0:	48 89 c7             	mov    %rax,%rdi
    1db3:	e8 00 00 00 00       	callq  1db8 <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1db8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1dbc:	48 89 c7             	mov    %rax,%rdi
    1dbf:	e8 00 00 00 00       	callq  1dc4 <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1dc4:	48 89 c2             	mov    %rax,%rdx
    1dc7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1dcb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1dd2 <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1dd2:	48 89 c7             	mov    %rax,%rdi
    1dd5:	e8 00 00 00 00       	callq  1dda <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1dda:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1dde:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1de5:	48 89 d6             	mov    %rdx,%rsi
    1de8:	48 89 c7             	mov    %rax,%rdi
    1deb:	e8 00 00 00 00       	callq  1df0 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1df0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1df4:	48 89 c7             	mov    %rax,%rdi
    1df7:	e8 00 00 00 00       	callq  1dfc <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1dfc:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1e03:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e07:	48 89 c7             	mov    %rax,%rdi
    1e0a:	e8 00 00 00 00       	callq  1e0f <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1e0f:	e9 ef fe ff ff       	jmpq   1d03 <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1e14:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1e1b:	48 89 c7             	mov    %rax,%rdi
    1e1e:	e8 00 00 00 00       	callq  1e23 <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1e23:	90                   	nop
    1e24:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1e2b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1e2f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1e36:	00 00 
    1e38:	74 68                	je     1ea2 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1e3a:	eb 61                	jmp    1e9d <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1e3c:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1e3f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1e43:	48 89 c7             	mov    %rax,%rdi
    1e46:	e8 00 00 00 00       	callq  1e4b <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1e4b:	eb 03                	jmp    1e50 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1e4d:	48 89 c3             	mov    %rax,%rbx
    1e50:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1e54:	48 89 c7             	mov    %rax,%rdi
    1e57:	e8 00 00 00 00       	callq  1e5c <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1e5c:	eb 03                	jmp    1e61 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1e5e:	48 89 c3             	mov    %rax,%rbx
    1e61:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1e65:	48 89 c7             	mov    %rax,%rdi
    1e68:	e8 00 00 00 00       	callq  1e6d <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1e6d:	eb 14                	jmp    1e83 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1e6f:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1e72:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1e76:	48 89 c7             	mov    %rax,%rdi
    1e79:	e8 00 00 00 00       	callq  1e7e <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1e7e:	eb 03                	jmp    1e83 <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1e80:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1e83:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1e8a:	48 89 c7             	mov    %rax,%rdi
    1e8d:	e8 00 00 00 00       	callq  1e92 <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1e92:	48 89 d8             	mov    %rbx,%rax
    1e95:	48 89 c7             	mov    %rax,%rdi
    1e98:	e8 00 00 00 00       	callq  1e9d <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1e9d:	e8 00 00 00 00       	callq  1ea2 <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1ea2:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1ea9:	5b                   	pop    %rbx
    1eaa:	5d                   	pop    %rbp
    1eab:	c3                   	retq   

0000000000001eac <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1eac:	55                   	push   %rbp
    1ead:	48 89 e5             	mov    %rsp,%rbp
    1eb0:	48 83 ec 10          	sub    $0x10,%rsp
    1eb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1eb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1ebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ec0:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1ec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1ec8:	ba 01 00 00 00       	mov    $0x1,%edx
    1ecd:	48 89 c6             	mov    %rax,%rsi
    1ed0:	48 89 cf             	mov    %rcx,%rdi
    1ed3:	e8 00 00 00 00       	callq  1ed8 <_ZN6Parser14addIncludeFileE7QString+0x2c>
    1ed8:	83 f0 01             	xor    $0x1,%eax
    1edb:	84 c0                	test   %al,%al
    1edd:	74 17                	je     1ef6 <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ee3:	48 8d 50 58          	lea    0x58(%rax),%rdx
    1ee7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1eeb:	48 89 c6             	mov    %rax,%rsi
    1eee:	48 89 d7             	mov    %rdx,%rdi
    1ef1:	e8 00 00 00 00       	callq  1ef6 <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    1ef6:	90                   	nop
    1ef7:	c9                   	leaveq 
    1ef8:	c3                   	retq   
    1ef9:	90                   	nop

0000000000001efa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1efa:	55                   	push   %rbp
    1efb:	48 89 e5             	mov    %rsp,%rbp
    1efe:	41 55                	push   %r13
    1f00:	41 54                	push   %r12
    1f02:	53                   	push   %rbx
    1f03:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1f0a:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1f11:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1f18:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1f1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1f26:	00 00 
    1f28:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1f2c:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1f2e:	bb 00 00 00 00       	mov    $0x0,%ebx
    1f33:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1f3a:	48 89 c7             	mov    %rax,%rdi
    1f3d:	e8 00 00 00 00       	callq  1f42 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1f42:	83 f8 04             	cmp    $0x4,%eax
    1f45:	74 3a                	je     1f81 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1f47:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f4b:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1f52:	48 89 d6             	mov    %rdx,%rsi
    1f55:	48 89 c7             	mov    %rax,%rdi
    1f58:	e8 00 00 00 00       	callq  1f5d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1f5d:	bb 01 00 00 00       	mov    $0x1,%ebx
    1f62:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f66:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f6d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1f6d:	48 89 c7             	mov    %rax,%rdi
    1f70:	e8 00 00 00 00       	callq  1f75 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1f75:	84 c0                	test   %al,%al
    1f77:	74 08                	je     1f81 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1f79:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1f7f:	eb 06                	jmp    1f87 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1f81:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1f87:	84 db                	test   %bl,%bl
    1f89:	74 0d                	je     1f98 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1f8b:	90                   	nop
    1f8c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1f90:	48 89 c7             	mov    %rax,%rdi
    1f93:	e8 00 00 00 00       	callq  1f98 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1f98:	45 84 ed             	test   %r13b,%r13b
    1f9b:	74 0b                	je     1fa8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1f9d:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1fa3:	e9 87 02 00 00       	jmpq   222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1fa8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1faf:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1fb6:	48 89 d6             	mov    %rdx,%rsi
    1fb9:	48 89 c7             	mov    %rax,%rdi
    1fbc:	e8 00 00 00 00       	callq  1fc1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1fc1:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1fc8:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1fcb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1fd2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1fd9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1fd9:	48 89 c7             	mov    %rax,%rdi
    1fdc:	e8 00 00 00 00       	callq  1fe1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1fe1:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1fe8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1fef:	48 89 d6             	mov    %rdx,%rsi
    1ff2:	48 89 c7             	mov    %rax,%rdi
    1ff5:	e8 00 00 00 00       	callq  1ffa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1ffa:	89 c3                	mov    %eax,%ebx
    1ffc:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2003:	48 89 c7             	mov    %rax,%rdi
    2006:	e8 00 00 00 00       	callq  200b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    200b:	84 db                	test   %bl,%bl
    200d:	74 6c                	je     207b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    200f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2016:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 201d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    201d:	48 89 c7             	mov    %rax,%rdi
    2020:	e8 00 00 00 00       	callq  2025 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    2025:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2029:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    2030:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    2037:	48 89 ce             	mov    %rcx,%rsi
    203a:	48 89 c7             	mov    %rax,%rdi
    203d:	e8 00 00 00 00       	callq  2042 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    2042:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2046:	ba 0a 00 00 00       	mov    $0xa,%edx
    204b:	be 00 00 00 00       	mov    $0x0,%esi
    2050:	48 89 c7             	mov    %rax,%rdi
    2053:	e8 00 00 00 00       	callq  2058 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    2058:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    205e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2062:	48 89 c7             	mov    %rax,%rdi
    2065:	e8 00 00 00 00       	callq  206a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    206a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2071:	48 89 c7             	mov    %rax,%rdi
    2074:	e8 00 00 00 00       	callq  2079 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    2079:	eb 0b                	jmp    2086 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    207b:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    2081:	e9 9a 01 00 00       	jmpq   2220 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    2086:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    208d:	48 89 c7             	mov    %rax,%rdi
    2090:	e8 00 00 00 00       	callq  2095 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2095:	bb 00 00 00 00       	mov    $0x0,%ebx
    209a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    20a1:	48 89 c7             	mov    %rax,%rdi
    20a4:	e8 00 00 00 00       	callq  20a9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    20a9:	83 f8 05             	cmp    $0x5,%eax
    20ac:	75 35                	jne    20e3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    20ae:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    20b2:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20b9:	48 89 d6             	mov    %rdx,%rsi
    20bc:	48 89 c7             	mov    %rax,%rdi
    20bf:	e8 00 00 00 00       	callq  20c4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    20c4:	bb 01 00 00 00       	mov    $0x1,%ebx
    20c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    20cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20d4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    20d4:	48 89 c7             	mov    %rax,%rdi
    20d7:	e8 00 00 00 00       	callq  20dc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    20dc:	83 f0 01             	xor    $0x1,%eax
    20df:	84 c0                	test   %al,%al
    20e1:	74 08                	je     20eb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    20e3:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    20e9:	eb 06                	jmp    20f1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    20eb:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    20f1:	84 db                	test   %bl,%bl
    20f3:	74 0d                	je     2102 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    20f5:	90                   	nop
    20f6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    20fa:	48 89 c7             	mov    %rax,%rdi
    20fd:	e8 00 00 00 00       	callq  2102 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2102:	45 84 ed             	test   %r13b,%r13b
    2105:	0f 84 0f 01 00 00    	je     221a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    210b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2112:	48 89 c7             	mov    %rax,%rdi
    2115:	e8 00 00 00 00       	callq  211a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    211a:	83 f8 04             	cmp    $0x4,%eax
    211d:	0f 94 c0             	sete   %al
    2120:	84 c0                	test   %al,%al
    2122:	0f 84 de 00 00 00    	je     2206 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    2128:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    212c:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    2133:	48 89 d6             	mov    %rdx,%rsi
    2136:	48 89 c7             	mov    %rax,%rdi
    2139:	e8 00 00 00 00       	callq  213e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    213e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2142:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2149 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    2149:	48 89 c7             	mov    %rax,%rdi
    214c:	e8 00 00 00 00       	callq  2151 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    2151:	89 c3                	mov    %eax,%ebx
    2153:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2157:	48 89 c7             	mov    %rax,%rdi
    215a:	e8 00 00 00 00       	callq  215f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    215f:	84 db                	test   %bl,%bl
    2161:	0f 84 9f 00 00 00    	je     2206 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    2167:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    216e:	48 89 c7             	mov    %rax,%rdi
    2171:	e8 00 00 00 00       	callq  2176 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    2176:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    217a:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    2181:	48 89 d6             	mov    %rdx,%rsi
    2184:	48 89 c7             	mov    %rax,%rdi
    2187:	e8 00 00 00 00       	callq  218c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    218c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2190:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2194:	48 89 d6             	mov    %rdx,%rsi
    2197:	48 89 c7             	mov    %rax,%rdi
    219a:	e8 00 00 00 00       	callq  219f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    219f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    21a3:	48 89 c7             	mov    %rax,%rdi
    21a6:	e8 00 00 00 00       	callq  21ab <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    21ab:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    21af:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    21b6:	48 89 d6             	mov    %rdx,%rsi
    21b9:	48 89 c7             	mov    %rax,%rdi
    21bc:	e8 00 00 00 00       	callq  21c1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    21c1:	84 c0                	test   %al,%al
    21c3:	74 0d                	je     21d2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    21c5:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    21cb:	bb 00 00 00 00       	mov    $0x0,%ebx
    21d0:	eb 22                	jmp    21f4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    21d2:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    21d9:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    21dd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    21e4:	48 89 ce             	mov    %rcx,%rsi
    21e7:	48 89 c7             	mov    %rax,%rdi
    21ea:	e8 00 00 00 00       	callq  21ef <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    21ef:	bb 01 00 00 00       	mov    $0x1,%ebx
    21f4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21f8:	48 89 c7             	mov    %rax,%rdi
    21fb:	e8 00 00 00 00       	callq  2200 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    2200:	83 fb 01             	cmp    $0x1,%ebx
    2203:	75 1b                	jne    2220 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    2205:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    2206:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    220d:	48 89 c7             	mov    %rax,%rdi
    2210:	e8 00 00 00 00       	callq  2215 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2215:	e9 7b fe ff ff       	jmpq   2095 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    221a:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2220:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2227:	48 89 c7             	mov    %rax,%rdi
    222a:	e8 00 00 00 00       	callq  222f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    222f:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    2232:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    2236:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    223d:	00 00 
    223f:	0f 84 d1 00 00 00    	je     2316 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    2245:	e9 c7 00 00 00       	jmpq   2311 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    224a:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    224d:	84 db                	test   %bl,%bl
    224f:	74 0f                	je     2260 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    2251:	90                   	nop
    2252:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2256:	48 89 c7             	mov    %rax,%rdi
    2259:	e8 00 00 00 00       	callq  225e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    225e:	eb 01                	jmp    2261 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    2260:	90                   	nop
    2261:	4c 89 e0             	mov    %r12,%rax
    2264:	48 89 c7             	mov    %rax,%rdi
    2267:	e8 00 00 00 00       	callq  226c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    226c:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    226f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2276:	48 89 c7             	mov    %rax,%rdi
    2279:	e8 00 00 00 00       	callq  227e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    227e:	eb 77                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2280:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    2283:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2287:	48 89 c7             	mov    %rax,%rdi
    228a:	e8 00 00 00 00       	callq  228f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    228f:	eb 03                	jmp    2294 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    2291:	48 89 c3             	mov    %rax,%rbx
    2294:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    229b:	48 89 c7             	mov    %rax,%rdi
    229e:	e8 00 00 00 00       	callq  22a3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    22a3:	eb 52                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    22a5:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    22a8:	84 db                	test   %bl,%bl
    22aa:	74 0f                	je     22bb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    22ac:	90                   	nop
    22ad:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    22b1:	48 89 c7             	mov    %rax,%rdi
    22b4:	e8 00 00 00 00       	callq  22b9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    22b9:	eb 01                	jmp    22bc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    22bb:	90                   	nop
    22bc:	4c 89 e3             	mov    %r12,%rbx
    22bf:	eb 36                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    22c1:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    22c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22c8:	48 89 c7             	mov    %rax,%rdi
    22cb:	e8 00 00 00 00       	callq  22d0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    22d0:	eb 25                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    22d2:	48 89 c3             	mov    %rax,%rbx
    22d5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    22d9:	48 89 c7             	mov    %rax,%rdi
    22dc:	e8 00 00 00 00       	callq  22e1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    22e1:	eb 14                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    22e3:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    22e6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22ea:	48 89 c7             	mov    %rax,%rdi
    22ed:	e8 00 00 00 00       	callq  22f2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    22f2:	eb 03                	jmp    22f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    22f4:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    22f7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    22fe:	48 89 c7             	mov    %rax,%rdi
    2301:	e8 00 00 00 00       	callq  2306 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    2306:	48 89 d8             	mov    %rbx,%rax
    2309:	48 89 c7             	mov    %rax,%rdi
    230c:	e8 00 00 00 00       	callq  2311 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    2311:	e8 00 00 00 00       	callq  2316 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    2316:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    231d:	5b                   	pop    %rbx
    231e:	41 5c                	pop    %r12
    2320:	41 5d                	pop    %r13
    2322:	5d                   	pop    %rbp
    2323:	c3                   	retq   

0000000000002324 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    2324:	55                   	push   %rbp
    2325:	48 89 e5             	mov    %rsp,%rbp
    2328:	53                   	push   %rbx
    2329:	48 83 ec 68          	sub    $0x68,%rsp
    232d:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    2331:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    2335:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    2339:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2340:	00 00 
    2342:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2346:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    2348:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    234c:	48 89 c7             	mov    %rax,%rdi
    234f:	e8 00 00 00 00       	callq  2354 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    2354:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2358:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    235c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2360:	48 89 d6             	mov    %rdx,%rsi
    2363:	48 89 c7             	mov    %rax,%rdi
    2366:	e8 00 00 00 00       	callq  236b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    236b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    236f:	48 89 c7             	mov    %rax,%rdi
    2372:	e8 00 00 00 00       	callq  2377 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    2377:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    237b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    237f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2383:	48 89 d6             	mov    %rdx,%rsi
    2386:	48 89 c7             	mov    %rax,%rdi
    2389:	e8 00 00 00 00       	callq  238e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    238e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2392:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2396:	48 89 d6             	mov    %rdx,%rsi
    2399:	48 89 c7             	mov    %rax,%rdi
    239c:	e8 00 00 00 00       	callq  23a1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    23a1:	84 c0                	test   %al,%al
    23a3:	0f 84 d7 00 00 00    	je     2480 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    23a9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    23ad:	48 89 c7             	mov    %rax,%rdi
    23b0:	e8 00 00 00 00       	callq  23b5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    23b5:	8b 08                	mov    (%rax),%ecx
    23b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23bb:	ba 0a 00 00 00       	mov    $0xa,%edx
    23c0:	89 ce                	mov    %ecx,%esi
    23c2:	48 89 c7             	mov    %rax,%rdi
    23c5:	e8 00 00 00 00       	callq  23ca <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    23ca:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    23ce:	48 89 c7             	mov    %rax,%rdi
    23d1:	e8 00 00 00 00       	callq  23d6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    23d6:	48 89 c2             	mov    %rax,%rdx
    23d9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    23dd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 23e4 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    23e4:	48 89 c7             	mov    %rax,%rdi
    23e7:	e8 00 00 00 00       	callq  23ec <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    23ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    23f0:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    23f4:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 23fb <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    23fb:	48 89 ce             	mov    %rcx,%rsi
    23fe:	48 89 c7             	mov    %rax,%rdi
    2401:	e8 00 00 00 00       	callq  2406 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    2406:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    240a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    240e:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    2412:	48 89 ce             	mov    %rcx,%rsi
    2415:	48 89 c7             	mov    %rax,%rdi
    2418:	e8 00 00 00 00       	callq  241d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    241d:	90                   	nop
    241e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2422:	48 89 c7             	mov    %rax,%rdi
    2425:	e8 00 00 00 00       	callq  242a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    242a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    242e:	48 89 c7             	mov    %rax,%rdi
    2431:	e8 00 00 00 00       	callq  2436 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    2436:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    243a:	48 89 c7             	mov    %rax,%rdi
    243d:	e8 00 00 00 00       	callq  2442 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    2442:	eb 3d                	jmp    2481 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    2444:	48 89 c3             	mov    %rax,%rbx
    2447:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    244b:	48 89 c7             	mov    %rax,%rdi
    244e:	e8 00 00 00 00       	callq  2453 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    2453:	eb 03                	jmp    2458 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    2455:	48 89 c3             	mov    %rax,%rbx
    2458:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    245c:	48 89 c7             	mov    %rax,%rdi
    245f:	e8 00 00 00 00       	callq  2464 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    2464:	eb 03                	jmp    2469 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    2466:	48 89 c3             	mov    %rax,%rbx
    2469:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    246d:	48 89 c7             	mov    %rax,%rdi
    2470:	e8 00 00 00 00       	callq  2475 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    2475:	48 89 d8             	mov    %rbx,%rax
    2478:	48 89 c7             	mov    %rax,%rdi
    247b:	e8 00 00 00 00       	callq  2480 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    2480:	90                   	nop
    2481:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    2485:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2489:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2490:	00 00 
    2492:	74 05                	je     2499 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    2494:	e8 00 00 00 00       	callq  2499 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    2499:	48 83 c4 68          	add    $0x68,%rsp
    249d:	5b                   	pop    %rbx
    249e:	5d                   	pop    %rbp
    249f:	c3                   	retq   

00000000000024a0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    24a0:	55                   	push   %rbp
    24a1:	48 89 e5             	mov    %rsp,%rbp
    24a4:	53                   	push   %rbx
    24a5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    24ac:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    24b0:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    24b4:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    24bb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    24c2:	00 00 
    24c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    24c8:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    24ca:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    24ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    24d2:	48 89 d6             	mov    %rdx,%rsi
    24d5:	48 89 c7             	mov    %rax,%rdi
    24d8:	e8 00 00 00 00       	callq  24dd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    24dd:	be 10 00 00 00       	mov    $0x10,%esi
    24e2:	bf 01 00 00 00       	mov    $0x1,%edi
    24e7:	e8 00 00 00 00       	callq  24ec <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    24ec:	89 c2                	mov    %eax,%edx
    24ee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    24f2:	89 d6                	mov    %edx,%esi
    24f4:	48 89 c7             	mov    %rax,%rdi
    24f7:	e8 00 00 00 00       	callq  24fc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    24fc:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2500:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2504:	48 89 d6             	mov    %rdx,%rsi
    2507:	48 89 c7             	mov    %rax,%rdi
    250a:	e8 00 00 00 00       	callq  250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    250f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2513:	48 89 c7             	mov    %rax,%rdi
    2516:	e8 00 00 00 00       	callq  251b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    251b:	83 f0 01             	xor    $0x1,%eax
    251e:	84 c0                	test   %al,%al
    2520:	74 1a                	je     253c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2522:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2526:	48 89 c7             	mov    %rax,%rdi
    2529:	e8 00 00 00 00       	callq  252e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    252e:	83 f0 01             	xor    $0x1,%eax
    2531:	84 c0                	test   %al,%al
    2533:	74 07                	je     253c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2535:	b8 01 00 00 00       	mov    $0x1,%eax
    253a:	eb 05                	jmp    2541 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    253c:	b8 00 00 00 00       	mov    $0x0,%eax
    2541:	84 c0                	test   %al,%al
    2543:	0f 84 cb 00 00 00    	je     2614 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    2549:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    254d:	48 89 c7             	mov    %rax,%rdi
    2550:	e8 00 00 00 00       	callq  2555 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    2555:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    2558:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    255c:	0f 84 a6 00 00 00    	je     2608 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    2562:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    2566:	75 a7                	jne    250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    2568:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    256c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2570:	48 89 d6             	mov    %rdx,%rsi
    2573:	48 89 c7             	mov    %rax,%rdi
    2576:	e8 00 00 00 00       	callq  257b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    257b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    257f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2586 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    2586:	48 89 c7             	mov    %rax,%rdi
    2589:	e8 00 00 00 00       	callq  258e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    258e:	89 c3                	mov    %eax,%ebx
    2590:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2594:	48 89 c7             	mov    %rax,%rdi
    2597:	e8 00 00 00 00       	callq  259c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    259c:	84 db                	test   %bl,%bl
    259e:	75 6e                	jne    260e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    25a0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25a4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    25a8:	48 89 d6             	mov    %rdx,%rsi
    25ab:	48 89 c7             	mov    %rax,%rdi
    25ae:	e8 00 00 00 00       	callq  25b3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    25b3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 25be <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    25be:	48 89 c7             	mov    %rax,%rdi
    25c1:	e8 00 00 00 00       	callq  25c6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    25c6:	89 c3                	mov    %eax,%ebx
    25c8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25cc:	48 89 c7             	mov    %rax,%rdi
    25cf:	e8 00 00 00 00       	callq  25d4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    25d4:	84 db                	test   %bl,%bl
    25d6:	0f 84 33 ff ff ff    	je     250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    25dc:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    25e3:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    25e7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    25eb:	48 89 ce             	mov    %rcx,%rsi
    25ee:	48 89 c7             	mov    %rax,%rdi
    25f1:	e8 00 00 00 00       	callq  25f6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    25f6:	83 f0 01             	xor    $0x1,%eax
    25f9:	84 c0                	test   %al,%al
    25fb:	0f 84 0e ff ff ff    	je     250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2601:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    2606:	eb 11                	jmp    2619 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    2608:	90                   	nop
    2609:	e9 01 ff ff ff       	jmpq   250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    260e:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    260f:	e9 fb fe ff ff       	jmpq   250f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2614:	bb 01 00 00 00       	mov    $0x1,%ebx
    2619:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    261d:	48 89 c7             	mov    %rax,%rdi
    2620:	e8 00 00 00 00       	callq  2625 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    2625:	83 fb 01             	cmp    $0x1,%ebx
    2628:	74 07                	je     2631 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    262a:	bb 00 00 00 00       	mov    $0x0,%ebx
    262f:	eb 06                	jmp    2637 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2631:	90                   	nop
    2632:	bb 01 00 00 00       	mov    $0x1,%ebx
    2637:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    263b:	48 89 c7             	mov    %rax,%rdi
    263e:	e8 00 00 00 00       	callq  2643 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    2643:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    2646:	90                   	nop
                    return;
                }
            }
        }
    }
}
    2647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    264b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2652:	00 00 
    2654:	74 54                	je     26aa <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    2656:	eb 4d                	jmp    26a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    2658:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    265b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    265f:	48 89 c7             	mov    %rax,%rdi
    2662:	e8 00 00 00 00       	callq  2667 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    2667:	eb 14                	jmp    267d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    2669:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    266c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2670:	48 89 c7             	mov    %rax,%rdi
    2673:	e8 00 00 00 00       	callq  2678 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    2678:	eb 03                	jmp    267d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    267a:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    267d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2681:	48 89 c7             	mov    %rax,%rdi
    2684:	e8 00 00 00 00       	callq  2689 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    2689:	eb 03                	jmp    268e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    268b:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    268e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2692:	48 89 c7             	mov    %rax,%rdi
    2695:	e8 00 00 00 00       	callq  269a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    269a:	48 89 d8             	mov    %rbx,%rax
    269d:	48 89 c7             	mov    %rax,%rdi
    26a0:	e8 00 00 00 00       	callq  26a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    26a5:	e8 00 00 00 00       	callq  26aa <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    26aa:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    26b1:	5b                   	pop    %rbx
    26b2:	5d                   	pop    %rbp
    26b3:	c3                   	retq   

00000000000026b4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    26b4:	55                   	push   %rbp
    26b5:	48 89 e5             	mov    %rsp,%rbp
    26b8:	53                   	push   %rbx
    26b9:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    26c0:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    26c7:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    26ce:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    26d5:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    26db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    26e2:	00 00 
    26e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    26e8:	31 c0                	xor    %eax,%eax


    QString str = Block;
    26ea:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    26f1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    26f8:	48 89 d6             	mov    %rdx,%rsi
    26fb:	48 89 c7             	mov    %rax,%rdi
    26fe:	e8 00 00 00 00       	callq  2703 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    2703:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    270a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2711:	48 89 d6             	mov    %rdx,%rsi
    2714:	48 89 c7             	mov    %rax,%rdi
    2717:	e8 00 00 00 00       	callq  271c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    271c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2723:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 272a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    272a:	48 89 c7             	mov    %rax,%rdi
    272d:	e8 00 00 00 00       	callq  2732 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    2732:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    2739:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2740:	b9 00 00 00 00       	mov    $0x0,%ecx
    2745:	ba 01 00 00 00       	mov    $0x1,%edx
    274a:	48 89 c7             	mov    %rax,%rdi
    274d:	e8 00 00 00 00       	callq  2752 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    2752:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2759:	48 89 c7             	mov    %rax,%rdi
    275c:	e8 00 00 00 00       	callq  2761 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    2761:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2768:	be 01 00 00 00       	mov    $0x1,%esi
    276d:	48 89 c7             	mov    %rax,%rdi
    2770:	e8 00 00 00 00       	callq  2775 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    2775:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    277c:	48 89 c7             	mov    %rax,%rdi
    277f:	e8 00 00 00 00       	callq  2784 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    2784:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    278b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2792 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    2792:	48 89 c7             	mov    %rax,%rdi
    2795:	e8 00 00 00 00       	callq  279a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    279a:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    27a1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    27a8:	b9 00 00 00 00       	mov    $0x0,%ecx
    27ad:	ba 01 00 00 00       	mov    $0x1,%edx
    27b2:	48 89 c7             	mov    %rax,%rdi
    27b5:	e8 00 00 00 00       	callq  27ba <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    27ba:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    27c1:	48 89 c7             	mov    %rax,%rdi
    27c4:	e8 00 00 00 00       	callq  27c9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    27c9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    27d0:	48 89 c7             	mov    %rax,%rdi
    27d3:	e8 00 00 00 00       	callq  27d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    27d8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    27df:	48 89 c7             	mov    %rax,%rdi
    27e2:	e8 00 00 00 00       	callq  27e7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    27e7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    27ee:	48 89 c7             	mov    %rax,%rdi
    27f1:	e8 00 00 00 00       	callq  27f6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    27f6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    27fd:	48 89 c7             	mov    %rax,%rdi
    2800:	e8 00 00 00 00       	callq  2805 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    2805:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    280c:	00 00 00 
    int lineInner = 0;
    280f:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    2816:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    2819:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2820:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2827:	b9 00 00 00 00       	mov    $0x0,%ecx
    282c:	ba 00 00 00 00       	mov    $0x0,%edx
    2831:	48 89 c7             	mov    %rax,%rdi
    2834:	e8 00 00 00 00       	callq  2839 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    2839:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    283f:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    2846:	0f 88 35 03 00 00    	js     2b81 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    284c:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    2852:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2858:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    285b:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    2862:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2866:	48 89 d6             	mov    %rdx,%rsi
    2869:	48 89 c7             	mov    %rax,%rdi
    286c:	e8 00 00 00 00       	callq  2871 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    2871:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    2875:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    287c:	89 da                	mov    %ebx,%edx
    287e:	48 89 ce             	mov    %rcx,%rsi
    2881:	48 89 c7             	mov    %rax,%rdi
    2884:	e8 00 00 00 00       	callq  2889 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    2889:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    288f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2893:	48 89 c7             	mov    %rax,%rdi
    2896:	e8 00 00 00 00       	callq  289b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    289b:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    28a2:	75 0c                	jne    28b0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    28a4:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    28aa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    28b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    28b4:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    28bb:	ba 00 00 00 00       	mov    $0x0,%edx
    28c0:	48 89 ce             	mov    %rcx,%rsi
    28c3:	48 89 c7             	mov    %rax,%rdi
    28c6:	e8 00 00 00 00       	callq  28cb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    28cb:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    28cf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    28d6:	48 89 d6             	mov    %rdx,%rsi
    28d9:	48 89 c7             	mov    %rax,%rdi
    28dc:	e8 00 00 00 00       	callq  28e1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    28e1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    28e5:	48 89 c7             	mov    %rax,%rdi
    28e8:	e8 00 00 00 00       	callq  28ed <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    28ed:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    28f4:	48 89 c7             	mov    %rax,%rdi
    28f7:	e8 00 00 00 00       	callq  28fc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    28fc:	89 c3                	mov    %eax,%ebx
    28fe:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2905:	48 89 c7             	mov    %rax,%rdi
    2908:	e8 00 00 00 00       	callq  290d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    290d:	89 da                	mov    %ebx,%edx
    290f:	29 c2                	sub    %eax,%edx
    2911:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2915:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    291c:	48 89 ce             	mov    %rcx,%rsi
    291f:	48 89 c7             	mov    %rax,%rdi
    2922:	e8 00 00 00 00       	callq  2927 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    2927:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    292b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2932:	48 89 d6             	mov    %rdx,%rsi
    2935:	48 89 c7             	mov    %rax,%rdi
    2938:	e8 00 00 00 00       	callq  293d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    293d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2941:	48 89 c7             	mov    %rax,%rdi
    2944:	e8 00 00 00 00       	callq  2949 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    2949:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2950:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2957:	b9 00 00 00 00       	mov    $0x0,%ecx
    295c:	ba 00 00 00 00       	mov    $0x0,%edx
    2961:	48 89 c7             	mov    %rax,%rdi
    2964:	e8 00 00 00 00       	callq  2969 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    2969:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    296d:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2974:	ba 00 00 00 00       	mov    $0x0,%edx
    2979:	48 89 ce             	mov    %rcx,%rsi
    297c:	48 89 c7             	mov    %rax,%rdi
    297f:	e8 00 00 00 00       	callq  2984 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    2984:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2988:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    298f:	48 89 d6             	mov    %rdx,%rsi
    2992:	48 89 c7             	mov    %rax,%rdi
    2995:	e8 00 00 00 00       	callq  299a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    299a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    299e:	48 89 c7             	mov    %rax,%rdi
    29a1:	e8 00 00 00 00       	callq  29a6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    29a6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29aa:	be 7b 00 00 00       	mov    $0x7b,%esi
    29af:	48 89 c7             	mov    %rax,%rdi
    29b2:	e8 00 00 00 00       	callq  29b7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    29b7:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    29bd:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    29c1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    29c8:	b9 01 00 00 00       	mov    $0x1,%ecx
    29cd:	48 89 c7             	mov    %rax,%rdi
    29d0:	e8 00 00 00 00       	callq  29d5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    29d5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    29db:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    29e1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    29e8:	89 d6                	mov    %edx,%esi
    29ea:	48 89 c7             	mov    %rax,%rdi
    29ed:	e8 00 00 00 00       	callq  29f2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    29f2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    29f6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    29fa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29fe:	48 89 c7             	mov    %rax,%rdi
    2a01:	e8 00 00 00 00       	callq  2a06 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    2a06:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    2a0d:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    2a14:	00 00 00 
        int br=0;
    2a17:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    2a1e:	00 00 00 

        while(bl != br)
    2a21:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    2a27:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    2a2d:	0f 84 a2 00 00 00    	je     2ad5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    2a33:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    2a3a:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2a40:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a47:	89 d6                	mov    %edx,%esi
    2a49:	48 89 c7             	mov    %rax,%rdi
    2a4c:	e8 00 00 00 00       	callq  2a51 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    2a51:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2a55:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2a59:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a5d:	48 89 c7             	mov    %rax,%rdi
    2a60:	e8 00 00 00 00       	callq  2a65 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    2a65:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    2a6c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a70:	be 7b 00 00 00       	mov    $0x7b,%esi
    2a75:	48 89 c7             	mov    %rax,%rdi
    2a78:	e8 00 00 00 00       	callq  2a7d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    2a7d:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2a81:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    2a88:	89 d6                	mov    %edx,%esi
    2a8a:	89 c7                	mov    %eax,%edi
    2a8c:	e8 00 00 00 00       	callq  2a91 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    2a91:	84 c0                	test   %al,%al
    2a93:	74 07                	je     2a9c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    2a95:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    2a9c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2aa0:	be 7d 00 00 00       	mov    $0x7d,%esi
    2aa5:	48 89 c7             	mov    %rax,%rdi
    2aa8:	e8 00 00 00 00       	callq  2aad <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    2aad:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    2ab1:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    2ab8:	89 d6                	mov    %edx,%esi
    2aba:	89 c7                	mov    %eax,%edi
    2abc:	e8 00 00 00 00       	callq  2ac1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    2ac1:	84 c0                	test   %al,%al
    2ac3:	0f 84 58 ff ff ff    	je     2a21 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    2ac9:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    2ad0:	e9 4c ff ff ff       	jmpq   2a21 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2ad5:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2adb:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2ae1:	89 c1                	mov    %eax,%ecx
    2ae3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2ae7:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2aed:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2af4:	48 89 c7             	mov    %rax,%rdi
    2af7:	e8 00 00 00 00       	callq  2afc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2afc:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2b00:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2b07:	48 89 d6             	mov    %rdx,%rsi
    2b0a:	48 89 c7             	mov    %rax,%rdi
    2b0d:	e8 00 00 00 00       	callq  2b12 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2b12:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2b16:	48 89 c7             	mov    %rax,%rdi
    2b19:	e8 00 00 00 00       	callq  2b1e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2b1e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b25:	48 89 c7             	mov    %rax,%rdi
    2b28:	e8 00 00 00 00       	callq  2b2d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2b2d:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2b33:	89 c2                	mov    %eax,%edx
    2b35:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2b39:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2b40:	48 89 ce             	mov    %rcx,%rsi
    2b43:	48 89 c7             	mov    %rax,%rdi
    2b46:	e8 00 00 00 00       	callq  2b4b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2b4b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2b4f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b56:	48 89 d6             	mov    %rdx,%rsi
    2b59:	48 89 c7             	mov    %rax,%rdi
    2b5c:	e8 00 00 00 00       	callq  2b61 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2b61:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2b65:	48 89 c7             	mov    %rax,%rdi
    2b68:	e8 00 00 00 00       	callq  2b6d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2b6d:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2b73:	83 c0 01             	add    $0x1,%eax
    2b76:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2b7c:	e9 98 fc ff ff       	jmpq   2819 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b81:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2b82:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2b89:	48 89 c7             	mov    %rax,%rdi
    2b8c:	e8 00 00 00 00       	callq  2b91 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2b91:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2b98:	48 89 c7             	mov    %rax,%rdi
    2b9b:	e8 00 00 00 00       	callq  2ba0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2ba0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2ba7:	48 89 c7             	mov    %rax,%rdi
    2baa:	e8 00 00 00 00       	callq  2baf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2baf:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2bb6:	48 89 c7             	mov    %rax,%rdi
    2bb9:	e8 00 00 00 00       	callq  2bbe <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2bbe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2bc5:	48 89 c7             	mov    %rax,%rdi
    2bc8:	e8 00 00 00 00       	callq  2bcd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2bcd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2bd4:	48 89 c7             	mov    %rax,%rdi
    2bd7:	e8 00 00 00 00       	callq  2bdc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2bdc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2be3:	48 89 c7             	mov    %rax,%rdi
    2be6:	e8 00 00 00 00       	callq  2beb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2beb:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2bf2:	48 89 c7             	mov    %rax,%rdi
    2bf5:	e8 00 00 00 00       	callq  2bfa <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2bfa:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2bfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2bff:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2c06:	00 00 
    2c08:	0f 84 75 01 00 00    	je     2d83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2c0e:	e9 6b 01 00 00       	jmpq   2d7e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2c13:	48 89 c3             	mov    %rax,%rbx
    2c16:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2c1d:	48 89 c7             	mov    %rax,%rdi
    2c20:	e8 00 00 00 00       	callq  2c25 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2c25:	e9 26 01 00 00       	jmpq   2d50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c2a:	48 89 c3             	mov    %rax,%rbx
    2c2d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2c34:	48 89 c7             	mov    %rax,%rdi
    2c37:	e8 00 00 00 00       	callq  2c3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2c3c:	e9 0f 01 00 00       	jmpq   2d50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c41:	48 89 c3             	mov    %rax,%rbx
    2c44:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2c4b:	48 89 c7             	mov    %rax,%rdi
    2c4e:	e8 00 00 00 00       	callq  2c53 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2c53:	e9 e4 00 00 00       	jmpq   2d3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c58:	48 89 c3             	mov    %rax,%rbx
    2c5b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c62:	48 89 c7             	mov    %rax,%rdi
    2c65:	e8 00 00 00 00       	callq  2c6a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2c6a:	e9 cd 00 00 00       	jmpq   2d3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c6f:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2c72:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2c76:	48 89 c7             	mov    %rax,%rdi
    2c79:	e8 00 00 00 00       	callq  2c7e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2c7e:	eb 58                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c80:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2c83:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2c87:	48 89 c7             	mov    %rax,%rdi
    2c8a:	e8 00 00 00 00       	callq  2c8f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2c8f:	eb 47                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c91:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2c94:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2c98:	48 89 c7             	mov    %rax,%rdi
    2c9b:	e8 00 00 00 00       	callq  2ca0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2ca0:	eb 36                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2ca2:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2ca5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2ca9:	48 89 c7             	mov    %rax,%rdi
    2cac:	e8 00 00 00 00       	callq  2cb1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2cb1:	eb 25                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2cb3:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2cb6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2cba:	48 89 c7             	mov    %rax,%rdi
    2cbd:	e8 00 00 00 00       	callq  2cc2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2cc2:	eb 14                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2cc4:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2cc7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2ccb:	48 89 c7             	mov    %rax,%rdi
    2cce:	e8 00 00 00 00       	callq  2cd3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2cd3:	eb 03                	jmp    2cd8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2cd5:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2cd8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2cdf:	48 89 c7             	mov    %rax,%rdi
    2ce2:	e8 00 00 00 00       	callq  2ce7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2ce7:	eb 03                	jmp    2cec <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2ce9:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2cec:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2cf3:	48 89 c7             	mov    %rax,%rdi
    2cf6:	e8 00 00 00 00       	callq  2cfb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2cfb:	eb 03                	jmp    2d00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2cfd:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2d00:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2d07:	48 89 c7             	mov    %rax,%rdi
    2d0a:	e8 00 00 00 00       	callq  2d0f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2d0f:	eb 03                	jmp    2d14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2d11:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2d14:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2d1b:	48 89 c7             	mov    %rax,%rdi
    2d1e:	e8 00 00 00 00       	callq  2d23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2d23:	eb 03                	jmp    2d28 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2d25:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2d28:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2d2f:	48 89 c7             	mov    %rax,%rdi
    2d32:	e8 00 00 00 00       	callq  2d37 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2d37:	eb 03                	jmp    2d3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2d39:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2d3c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2d43:	48 89 c7             	mov    %rax,%rdi
    2d46:	e8 00 00 00 00       	callq  2d4b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2d4b:	eb 03                	jmp    2d50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2d4d:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2d50:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d57:	48 89 c7             	mov    %rax,%rdi
    2d5a:	e8 00 00 00 00       	callq  2d5f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2d5f:	eb 03                	jmp    2d64 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2d61:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2d64:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d6b:	48 89 c7             	mov    %rax,%rdi
    2d6e:	e8 00 00 00 00       	callq  2d73 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2d73:	48 89 d8             	mov    %rbx,%rax
    2d76:	48 89 c7             	mov    %rax,%rdi
    2d79:	e8 00 00 00 00       	callq  2d7e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2d7e:	e8 00 00 00 00       	callq  2d83 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2d83:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2d8a:	5b                   	pop    %rbx
    2d8b:	5d                   	pop    %rbp
    2d8c:	c3                   	retq   
    2d8d:	90                   	nop

0000000000002d8e <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2d8e:	55                   	push   %rbp
    2d8f:	48 89 e5             	mov    %rsp,%rbp
    2d92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2d96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2d9a:	90                   	nop
    2d9b:	5d                   	pop    %rbp
    2d9c:	c3                   	retq   
    2d9d:	90                   	nop

0000000000002d9e <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2d9e:	55                   	push   %rbp
    2d9f:	48 89 e5             	mov    %rsp,%rbp
    2da2:	53                   	push   %rbx
    2da3:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2daa:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2db1:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2db8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2dbf:	00 00 
    2dc1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2dc5:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2dc7:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2dce:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2dd5:	48 89 d6             	mov    %rdx,%rsi
    2dd8:	48 89 c7             	mov    %rax,%rdi
    2ddb:	e8 00 00 00 00       	callq  2de0 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2de0:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2de7:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2dee:	48 89 d6             	mov    %rdx,%rsi
    2df1:	48 89 c7             	mov    %rax,%rdi
    2df4:	e8 00 00 00 00       	callq  2df9 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2df9:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2e00:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e07 <_ZN6Parser11splitBlocksE7QString+0x69>
    2e07:	48 89 c7             	mov    %rax,%rdi
    2e0a:	e8 00 00 00 00       	callq  2e0f <_ZN6Parser11splitBlocksE7QString+0x71>
    2e0f:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2e16:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e1d:	ba 01 00 00 00       	mov    $0x1,%edx
    2e22:	48 89 ce             	mov    %rcx,%rsi
    2e25:	48 89 c7             	mov    %rax,%rdi
    2e28:	e8 00 00 00 00       	callq  2e2d <_ZN6Parser11splitBlocksE7QString+0x8f>
    2e2d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2e33:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2e3a:	48 89 c7             	mov    %rax,%rdi
    2e3d:	e8 00 00 00 00       	callq  2e42 <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2e42:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2e49:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e50 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2e50:	48 89 c7             	mov    %rax,%rdi
    2e53:	e8 00 00 00 00       	callq  2e58 <_ZN6Parser11splitBlocksE7QString+0xba>
    2e58:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2e5f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e66:	ba 01 00 00 00       	mov    $0x1,%edx
    2e6b:	48 89 ce             	mov    %rcx,%rsi
    2e6e:	48 89 c7             	mov    %rax,%rdi
    2e71:	e8 00 00 00 00       	callq  2e76 <_ZN6Parser11splitBlocksE7QString+0xd8>
    2e76:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2e7c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2e83:	48 89 c7             	mov    %rax,%rdi
    2e86:	e8 00 00 00 00       	callq  2e8b <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2e8b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2e92:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e99 <_ZN6Parser11splitBlocksE7QString+0xfb>
    2e99:	48 89 c7             	mov    %rax,%rdi
    2e9c:	e8 00 00 00 00       	callq  2ea1 <_ZN6Parser11splitBlocksE7QString+0x103>
    2ea1:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2ea8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2eaf:	ba 01 00 00 00       	mov    $0x1,%edx
    2eb4:	48 89 ce             	mov    %rcx,%rsi
    2eb7:	48 89 c7             	mov    %rax,%rdi
    2eba:	e8 00 00 00 00       	callq  2ebf <_ZN6Parser11splitBlocksE7QString+0x121>
    2ebf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2ec5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2ecc:	48 89 c7             	mov    %rax,%rdi
    2ecf:	e8 00 00 00 00       	callq  2ed4 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2ed4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2edb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ee2 <_ZN6Parser11splitBlocksE7QString+0x144>
    2ee2:	48 89 c7             	mov    %rax,%rdi
    2ee5:	e8 00 00 00 00       	callq  2eea <_ZN6Parser11splitBlocksE7QString+0x14c>
    2eea:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2ef1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2ef8:	ba 01 00 00 00       	mov    $0x1,%edx
    2efd:	48 89 ce             	mov    %rcx,%rsi
    2f00:	48 89 c7             	mov    %rax,%rdi
    2f03:	e8 00 00 00 00       	callq  2f08 <_ZN6Parser11splitBlocksE7QString+0x16a>
    2f08:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2f0e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2f15:	48 89 c7             	mov    %rax,%rdi
    2f18:	e8 00 00 00 00       	callq  2f1d <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2f1d:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2f23:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2f29:	74 43                	je     2f6e <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2f2b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2f32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f39 <_ZN6Parser11splitBlocksE7QString+0x19b>
    2f39:	48 89 c7             	mov    %rax,%rdi
    2f3c:	e8 00 00 00 00       	callq  2f41 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2f41:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2f48:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2f4f:	48 89 d6             	mov    %rdx,%rsi
    2f52:	48 89 c7             	mov    %rax,%rdi
    2f55:	e8 00 00 00 00       	callq  2f5a <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2f5a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2f61:	48 89 c7             	mov    %rax,%rdi
    2f64:	e8 00 00 00 00       	callq  2f69 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2f69:	e9 cf 03 00 00       	jmpq   333d <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2f6e:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2f74:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2f7a:	74 43                	je     2fbf <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2f7c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2f83:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f8a <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2f8a:	48 89 c7             	mov    %rax,%rdi
    2f8d:	e8 00 00 00 00       	callq  2f92 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2f92:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2f99:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2fa0:	48 89 d6             	mov    %rdx,%rsi
    2fa3:	48 89 c7             	mov    %rax,%rdi
    2fa6:	e8 00 00 00 00       	callq  2fab <_ZN6Parser11splitBlocksE7QString+0x20d>
    2fab:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2fb2:	48 89 c7             	mov    %rax,%rdi
    2fb5:	e8 00 00 00 00       	callq  2fba <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2fba:	e9 7e 03 00 00       	jmpq   333d <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2fbf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2fc6:	48 89 c7             	mov    %rax,%rdi
    2fc9:	e8 00 00 00 00       	callq  2fce <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2fce:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2fd5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2fdc <_ZN6Parser11splitBlocksE7QString+0x23e>
    2fdc:	48 89 c7             	mov    %rax,%rdi
    2fdf:	e8 00 00 00 00       	callq  2fe4 <_ZN6Parser11splitBlocksE7QString+0x246>
    2fe4:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2feb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2ff2:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ff7:	ba 01 00 00 00       	mov    $0x1,%edx
    2ffc:	48 89 c7             	mov    %rax,%rdi
    2fff:	e8 00 00 00 00       	callq  3004 <_ZN6Parser11splitBlocksE7QString+0x266>
    3004:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    300b:	48 89 c7             	mov    %rax,%rdi
    300e:	e8 00 00 00 00       	callq  3013 <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    3013:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    301a:	00 00 00 
    QString blockName;
    301d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3021:	48 89 c7             	mov    %rax,%rdi
    3024:	e8 00 00 00 00       	callq  3029 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    3029:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    3030:	48 89 c7             	mov    %rax,%rdi
    3033:	e8 00 00 00 00       	callq  3038 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    3038:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    303f:	00 00 00 
    int     line     = 0;
    3042:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    3049:	00 00 00 
    QString block;
    304c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3050:	48 89 c7             	mov    %rax,%rdi
    3053:	e8 00 00 00 00       	callq  3058 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    3058:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    305f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3066:	b9 00 00 00 00       	mov    $0x0,%ecx
    306b:	ba 00 00 00 00       	mov    $0x0,%edx
    3070:	48 89 c7             	mov    %rax,%rdi
    3073:	e8 00 00 00 00       	callq  3078 <_ZN6Parser11splitBlocksE7QString+0x2da>
    3078:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    307e:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    3085:	0f 88 7b 02 00 00    	js     3306 <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    308b:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    3091:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    3097:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    309a:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    30a1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    30a5:	48 89 d6             	mov    %rdx,%rsi
    30a8:	48 89 c7             	mov    %rax,%rdi
    30ab:	e8 00 00 00 00       	callq  30b0 <_ZN6Parser11splitBlocksE7QString+0x312>
    30b0:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    30b4:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    30bb:	89 da                	mov    %ebx,%edx
    30bd:	48 89 ce             	mov    %rcx,%rsi
    30c0:	48 89 c7             	mov    %rax,%rdi
    30c3:	e8 00 00 00 00       	callq  30c8 <_ZN6Parser11splitBlocksE7QString+0x32a>
    30c8:	83 c0 01             	add    $0x1,%eax
    30cb:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    30d1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    30d5:	48 89 c7             	mov    %rax,%rdi
    30d8:	e8 00 00 00 00       	callq  30dd <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    30dd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    30e1:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    30e8:	ba 01 00 00 00       	mov    $0x1,%edx
    30ed:	48 89 ce             	mov    %rcx,%rsi
    30f0:	48 89 c7             	mov    %rax,%rdi
    30f3:	e8 00 00 00 00       	callq  30f8 <_ZN6Parser11splitBlocksE7QString+0x35a>
    30f8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    30fc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3100:	48 89 d6             	mov    %rdx,%rsi
    3103:	48 89 c7             	mov    %rax,%rdi
    3106:	e8 00 00 00 00       	callq  310b <_ZN6Parser11splitBlocksE7QString+0x36d>
    310b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    310f:	48 89 c7             	mov    %rax,%rdi
    3112:	e8 00 00 00 00       	callq  3117 <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    3117:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    311b:	be 7b 00 00 00       	mov    $0x7b,%esi
    3120:	48 89 c7             	mov    %rax,%rdi
    3123:	e8 00 00 00 00       	callq  3128 <_ZN6Parser11splitBlocksE7QString+0x38a>
    3128:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    312e:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    3132:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3139:	b9 01 00 00 00       	mov    $0x1,%ecx
    313e:	48 89 c7             	mov    %rax,%rdi
    3141:	e8 00 00 00 00       	callq  3146 <_ZN6Parser11splitBlocksE7QString+0x3a8>
    3146:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    314c:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    3152:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3159:	89 d6                	mov    %edx,%esi
    315b:	48 89 c7             	mov    %rax,%rdi
    315e:	e8 00 00 00 00       	callq  3163 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    3163:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3167:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    316b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    316f:	48 89 c7             	mov    %rax,%rdi
    3172:	e8 00 00 00 00       	callq  3177 <_ZN6Parser11splitBlocksE7QString+0x3d9>
    3177:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    317e:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    3185:	00 00 00 
        int br=0;
    3188:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    318f:	00 00 00 

        while(bl != br)
    3192:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    3198:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    319e:	0f 84 a2 00 00 00    	je     3246 <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    31a4:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    31ab:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    31b1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31b8:	89 d6                	mov    %edx,%esi
    31ba:	48 89 c7             	mov    %rax,%rdi
    31bd:	e8 00 00 00 00       	callq  31c2 <_ZN6Parser11splitBlocksE7QString+0x424>
    31c2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    31c6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    31ca:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31ce:	48 89 c7             	mov    %rax,%rdi
    31d1:	e8 00 00 00 00       	callq  31d6 <_ZN6Parser11splitBlocksE7QString+0x438>
    31d6:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    31dd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31e1:	be 7b 00 00 00       	mov    $0x7b,%esi
    31e6:	48 89 c7             	mov    %rax,%rdi
    31e9:	e8 00 00 00 00       	callq  31ee <_ZN6Parser11splitBlocksE7QString+0x450>
    31ee:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    31f2:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    31f9:	89 d6                	mov    %edx,%esi
    31fb:	89 c7                	mov    %eax,%edi
    31fd:	e8 00 00 00 00       	callq  3202 <_ZN6Parser11splitBlocksE7QString+0x464>
    3202:	84 c0                	test   %al,%al
    3204:	74 07                	je     320d <_ZN6Parser11splitBlocksE7QString+0x46f>
    3206:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    320d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3211:	be 7d 00 00 00       	mov    $0x7d,%esi
    3216:	48 89 c7             	mov    %rax,%rdi
    3219:	e8 00 00 00 00       	callq  321e <_ZN6Parser11splitBlocksE7QString+0x480>
    321e:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3222:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3229:	89 d6                	mov    %edx,%esi
    322b:	89 c7                	mov    %eax,%edi
    322d:	e8 00 00 00 00       	callq  3232 <_ZN6Parser11splitBlocksE7QString+0x494>
    3232:	84 c0                	test   %al,%al
    3234:	0f 84 58 ff ff ff    	je     3192 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    323a:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    3241:	e9 4c ff ff ff       	jmpq   3192 <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3246:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    324c:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    3252:	89 c1                	mov    %eax,%ecx
    3254:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3258:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    325e:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    3265:	48 89 c7             	mov    %rax,%rdi
    3268:	e8 00 00 00 00       	callq  326d <_ZN6Parser11splitBlocksE7QString+0x4cf>
    326d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3271:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3275:	48 89 d6             	mov    %rdx,%rsi
    3278:	48 89 c7             	mov    %rax,%rdi
    327b:	e8 00 00 00 00       	callq  3280 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    3280:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3284:	48 89 c7             	mov    %rax,%rdi
    3287:	e8 00 00 00 00       	callq  328c <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    328c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3293:	48 89 c7             	mov    %rax,%rdi
    3296:	e8 00 00 00 00       	callq  329b <_ZN6Parser11splitBlocksE7QString+0x4fd>
    329b:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    32a1:	89 c2                	mov    %eax,%edx
    32a3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    32a7:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    32ae:	48 89 ce             	mov    %rcx,%rsi
    32b1:	48 89 c7             	mov    %rax,%rdi
    32b4:	e8 00 00 00 00       	callq  32b9 <_ZN6Parser11splitBlocksE7QString+0x51b>
    32b9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    32bd:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    32c4:	48 89 d6             	mov    %rdx,%rsi
    32c7:	48 89 c7             	mov    %rax,%rdi
    32ca:	e8 00 00 00 00       	callq  32cf <_ZN6Parser11splitBlocksE7QString+0x531>
    32cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    32d3:	48 89 c7             	mov    %rax,%rdi
    32d6:	e8 00 00 00 00       	callq  32db <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    32db:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    32e1:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    32e7:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    32ee:	48 8d 50 70          	lea    0x70(%rax),%rdx
    32f2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    32f6:	48 89 c6             	mov    %rax,%rsi
    32f9:	48 89 d7             	mov    %rdx,%rdi
    32fc:	e8 00 00 00 00       	callq  3301 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    3301:	e9 52 fd ff ff       	jmpq   3058 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    3306:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3307:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    330b:	48 89 c7             	mov    %rax,%rdi
    330e:	e8 00 00 00 00       	callq  3313 <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3313:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3317:	48 89 c7             	mov    %rax,%rdi
    331a:	e8 00 00 00 00       	callq  331f <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    331f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3326:	48 89 c7             	mov    %rax,%rdi
    3329:	e8 00 00 00 00       	callq  332e <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    332e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3335:	48 89 c7             	mov    %rax,%rdi
    3338:	e8 00 00 00 00       	callq  333d <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    333d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3344:	48 89 c7             	mov    %rax,%rdi
    3347:	e8 00 00 00 00       	callq  334c <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    334c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3353:	48 89 c7             	mov    %rax,%rdi
    3356:	e8 00 00 00 00       	callq  335b <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    335b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    335f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3366:	00 00 
    3368:	0f 84 7e 01 00 00    	je     34ec <_ZN6Parser11splitBlocksE7QString+0x74e>
    336e:	e9 74 01 00 00       	jmpq   34e7 <_ZN6Parser11splitBlocksE7QString+0x749>
    3373:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    3376:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    337d:	48 89 c7             	mov    %rax,%rdi
    3380:	e8 00 00 00 00       	callq  3385 <_ZN6Parser11splitBlocksE7QString+0x5e7>
    3385:	e9 2f 01 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    338a:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    338d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    3394:	48 89 c7             	mov    %rax,%rdi
    3397:	e8 00 00 00 00       	callq  339c <_ZN6Parser11splitBlocksE7QString+0x5fe>
    339c:	e9 18 01 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33a1:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    33a4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    33ab:	48 89 c7             	mov    %rax,%rdi
    33ae:	e8 00 00 00 00       	callq  33b3 <_ZN6Parser11splitBlocksE7QString+0x615>
    33b3:	e9 01 01 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33b8:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    33bb:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    33c2:	48 89 c7             	mov    %rax,%rdi
    33c5:	e8 00 00 00 00       	callq  33ca <_ZN6Parser11splitBlocksE7QString+0x62c>
    33ca:	e9 ea 00 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33cf:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    33d2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    33d9:	48 89 c7             	mov    %rax,%rdi
    33dc:	e8 00 00 00 00       	callq  33e1 <_ZN6Parser11splitBlocksE7QString+0x643>
    33e1:	e9 d3 00 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33e6:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    33e9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    33f0:	48 89 c7             	mov    %rax,%rdi
    33f3:	e8 00 00 00 00       	callq  33f8 <_ZN6Parser11splitBlocksE7QString+0x65a>
    33f8:	e9 bc 00 00 00       	jmpq   34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33fd:	48 89 c3             	mov    %rax,%rbx
    3400:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3407:	48 89 c7             	mov    %rax,%rdi
    340a:	e8 00 00 00 00       	callq  340f <_ZN6Parser11splitBlocksE7QString+0x671>
    340f:	e9 91 00 00 00       	jmpq   34a5 <_ZN6Parser11splitBlocksE7QString+0x707>
    3414:	48 89 c3             	mov    %rax,%rbx
    3417:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    341e:	48 89 c7             	mov    %rax,%rdi
    3421:	e8 00 00 00 00       	callq  3426 <_ZN6Parser11splitBlocksE7QString+0x688>
    3426:	eb 7d                	jmp    34a5 <_ZN6Parser11splitBlocksE7QString+0x707>
    3428:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    342b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    342f:	48 89 c7             	mov    %rax,%rdi
    3432:	e8 00 00 00 00       	callq  3437 <_ZN6Parser11splitBlocksE7QString+0x699>
    3437:	eb 36                	jmp    346f <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3439:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    343c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3440:	48 89 c7             	mov    %rax,%rdi
    3443:	e8 00 00 00 00       	callq  3448 <_ZN6Parser11splitBlocksE7QString+0x6aa>
    3448:	eb 25                	jmp    346f <_ZN6Parser11splitBlocksE7QString+0x6d1>
    344a:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    344d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3451:	48 89 c7             	mov    %rax,%rdi
    3454:	e8 00 00 00 00       	callq  3459 <_ZN6Parser11splitBlocksE7QString+0x6bb>
    3459:	eb 14                	jmp    346f <_ZN6Parser11splitBlocksE7QString+0x6d1>
    345b:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    345e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3462:	48 89 c7             	mov    %rax,%rdi
    3465:	e8 00 00 00 00       	callq  346a <_ZN6Parser11splitBlocksE7QString+0x6cc>
    346a:	eb 03                	jmp    346f <_ZN6Parser11splitBlocksE7QString+0x6d1>
    346c:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    346f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3473:	48 89 c7             	mov    %rax,%rdi
    3476:	e8 00 00 00 00       	callq  347b <_ZN6Parser11splitBlocksE7QString+0x6dd>
    347b:	eb 03                	jmp    3480 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    347d:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3480:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3484:	48 89 c7             	mov    %rax,%rdi
    3487:	e8 00 00 00 00       	callq  348c <_ZN6Parser11splitBlocksE7QString+0x6ee>
    348c:	eb 03                	jmp    3491 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    348e:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3491:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3498:	48 89 c7             	mov    %rax,%rdi
    349b:	e8 00 00 00 00       	callq  34a0 <_ZN6Parser11splitBlocksE7QString+0x702>
    34a0:	eb 03                	jmp    34a5 <_ZN6Parser11splitBlocksE7QString+0x707>
    34a2:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    34a5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    34ac:	48 89 c7             	mov    %rax,%rdi
    34af:	e8 00 00 00 00       	callq  34b4 <_ZN6Parser11splitBlocksE7QString+0x716>
    34b4:	eb 03                	jmp    34b9 <_ZN6Parser11splitBlocksE7QString+0x71b>
    34b6:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    34b9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    34c0:	48 89 c7             	mov    %rax,%rdi
    34c3:	e8 00 00 00 00       	callq  34c8 <_ZN6Parser11splitBlocksE7QString+0x72a>
    34c8:	eb 03                	jmp    34cd <_ZN6Parser11splitBlocksE7QString+0x72f>
    34ca:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    34cd:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    34d4:	48 89 c7             	mov    %rax,%rdi
    34d7:	e8 00 00 00 00       	callq  34dc <_ZN6Parser11splitBlocksE7QString+0x73e>
    34dc:	48 89 d8             	mov    %rbx,%rax
    34df:	48 89 c7             	mov    %rax,%rdi
    34e2:	e8 00 00 00 00       	callq  34e7 <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    34e7:	e8 00 00 00 00       	callq  34ec <_ZN6Parser11splitBlocksE7QString+0x74e>
    34ec:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    34f3:	5b                   	pop    %rbx
    34f4:	5d                   	pop    %rbp
    34f5:	c3                   	retq   

00000000000034f6 <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    34f6:	55                   	push   %rbp
    34f7:	48 89 e5             	mov    %rsp,%rbp
    34fa:	53                   	push   %rbx
    34fb:	48 83 ec 48          	sub    $0x48,%rsp
    34ff:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    3503:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    350a:	00 00 
    350c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3510:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    3512:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3516:	48 89 c7             	mov    %rax,%rdi
    3519:	e8 00 00 00 00       	callq  351e <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    351e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3522:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3529 <_ZN6Parser10globalSemsEv+0x33>
    3529:	48 89 c7             	mov    %rax,%rdi
    352c:	e8 00 00 00 00       	callq  3531 <_ZN6Parser10globalSemsEv+0x3b>
    3531:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3535:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    3539:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    353d:	48 89 ce             	mov    %rcx,%rsi
    3540:	48 89 c7             	mov    %rax,%rdi
    3543:	e8 00 00 00 00       	callq  3548 <_ZN6Parser10globalSemsEv+0x52>
    3548:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    354c:	48 89 c7             	mov    %rax,%rdi
    354f:	e8 00 00 00 00       	callq  3554 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    3554:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3558:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    355c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    3560:	48 89 ce             	mov    %rcx,%rsi
    3563:	48 89 c7             	mov    %rax,%rdi
    3566:	e8 00 00 00 00       	callq  356b <_ZN6Parser10globalSemsEv+0x75>
    356b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    356f:	48 89 c7             	mov    %rax,%rdi
    3572:	e8 00 00 00 00       	callq  3577 <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    3577:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    357b:	48 89 c7             	mov    %rax,%rdi
    357e:	e8 00 00 00 00       	callq  3583 <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    3583:	90                   	nop
    3584:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3588:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    358f:	00 00 
    3591:	74 32                	je     35c5 <_ZN6Parser10globalSemsEv+0xcf>
    3593:	eb 2b                	jmp    35c0 <_ZN6Parser10globalSemsEv+0xca>
    3595:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    3598:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    359c:	48 89 c7             	mov    %rax,%rdi
    359f:	e8 00 00 00 00       	callq  35a4 <_ZN6Parser10globalSemsEv+0xae>
    35a4:	eb 03                	jmp    35a9 <_ZN6Parser10globalSemsEv+0xb3>
    35a6:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    35a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    35ad:	48 89 c7             	mov    %rax,%rdi
    35b0:	e8 00 00 00 00       	callq  35b5 <_ZN6Parser10globalSemsEv+0xbf>
    35b5:	48 89 d8             	mov    %rbx,%rax
    35b8:	48 89 c7             	mov    %rax,%rdi
    35bb:	e8 00 00 00 00       	callq  35c0 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    35c0:	e8 00 00 00 00       	callq  35c5 <_ZN6Parser10globalSemsEv+0xcf>
    35c5:	48 83 c4 48          	add    $0x48,%rsp
    35c9:	5b                   	pop    %rbx
    35ca:	5d                   	pop    %rbp
    35cb:	c3                   	retq   

00000000000035cc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    35cc:	55                   	push   %rbp
    35cd:	48 89 e5             	mov    %rsp,%rbp
    35d0:	53                   	push   %rbx
    35d1:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    35d8:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    35df:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    35e6:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    35ec:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    35f3:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    35fa:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3601:	00 00 
    3603:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3607:	31 c0                	xor    %eax,%eax
        QByteArray result;
    3609:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3610:	48 89 c7             	mov    %rax,%rdi
    3613:	e8 00 00 00 00       	callq  3618 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    3618:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    361e:	0f be d0             	movsbl %al,%edx
    3621:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3628:	89 d6                	mov    %edx,%esi
    362a:	48 89 c7             	mov    %rax,%rdi
    362d:	e8 00 00 00 00       	callq  3632 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    3632:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3639:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3640 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    3640:	48 89 c7             	mov    %rax,%rdi
    3643:	e8 00 00 00 00       	callq  3648 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    3648:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    364f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3656 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    3656:	48 89 c7             	mov    %rax,%rdi
    3659:	e8 00 00 00 00       	callq  365e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    365e:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    3665:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    366c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3673:	b9 01 00 00 00       	mov    $0x1,%ecx
    3678:	48 89 c7             	mov    %rax,%rdi
    367b:	e8 00 00 00 00       	callq  3680 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    3680:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3687:	48 89 c7             	mov    %rax,%rdi
    368a:	e8 00 00 00 00       	callq  368f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    368f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3696:	48 89 c7             	mov    %rax,%rdi
    3699:	e8 00 00 00 00       	callq  369e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    369e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    36a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36ac <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    36ac:	48 89 c7             	mov    %rax,%rdi
    36af:	e8 00 00 00 00       	callq  36b4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    36b4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    36bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    36c2:	48 89 c7             	mov    %rax,%rdi
    36c5:	e8 00 00 00 00       	callq  36ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    36ca:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    36d1:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    36d8:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36df:	b9 01 00 00 00       	mov    $0x1,%ecx
    36e4:	48 89 c7             	mov    %rax,%rdi
    36e7:	e8 00 00 00 00       	callq  36ec <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    36ec:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    36f3:	48 89 c7             	mov    %rax,%rdi
    36f6:	e8 00 00 00 00       	callq  36fb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    36fb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3702:	48 89 c7             	mov    %rax,%rdi
    3705:	e8 00 00 00 00       	callq  370a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    370a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3711:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3718 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    3718:	48 89 c7             	mov    %rax,%rdi
    371b:	e8 00 00 00 00       	callq  3720 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    3720:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3727:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 372e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    372e:	48 89 c7             	mov    %rax,%rdi
    3731:	e8 00 00 00 00       	callq  3736 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    3736:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    373d:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    3744:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    374b:	b9 01 00 00 00       	mov    $0x1,%ecx
    3750:	48 89 c7             	mov    %rax,%rdi
    3753:	e8 00 00 00 00       	callq  3758 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    3758:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    375f:	48 89 c7             	mov    %rax,%rdi
    3762:	e8 00 00 00 00       	callq  3767 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    3767:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    376e:	48 89 c7             	mov    %rax,%rdi
    3771:	e8 00 00 00 00       	callq  3776 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3776:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    377a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3781 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    3781:	48 89 c7             	mov    %rax,%rdi
    3784:	e8 00 00 00 00       	callq  3789 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    3789:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    378d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3794 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    3794:	48 89 c7             	mov    %rax,%rdi
    3797:	e8 00 00 00 00       	callq  379c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    379c:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    37a0:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    37a4:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    37ab:	b9 00 00 00 00       	mov    $0x0,%ecx
    37b0:	48 89 c7             	mov    %rax,%rdi
    37b3:	e8 00 00 00 00       	callq  37b8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    37b8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    37bc:	48 89 c7             	mov    %rax,%rdi
    37bf:	e8 00 00 00 00       	callq  37c4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    37c4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    37c8:	48 89 c7             	mov    %rax,%rdi
    37cb:	e8 00 00 00 00       	callq  37d0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    37d0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    37d4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37db <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    37db:	48 89 c7             	mov    %rax,%rdi
    37de:	e8 00 00 00 00       	callq  37e3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    37e3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    37e7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 37ee <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    37ee:	48 89 c7             	mov    %rax,%rdi
    37f1:	e8 00 00 00 00       	callq  37f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    37f6:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    37fa:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    37fe:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3805:	b9 00 00 00 00       	mov    $0x0,%ecx
    380a:	48 89 c7             	mov    %rax,%rdi
    380d:	e8 00 00 00 00       	callq  3812 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    3812:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3816:	48 89 c7             	mov    %rax,%rdi
    3819:	e8 00 00 00 00       	callq  381e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    381e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3822:	48 89 c7             	mov    %rax,%rdi
    3825:	e8 00 00 00 00       	callq  382a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    382a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    382e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3835 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    3835:	48 89 c7             	mov    %rax,%rdi
    3838:	e8 00 00 00 00       	callq  383d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    383d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3841:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3845:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    384c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3852:	b9 00 00 00 00       	mov    $0x0,%ecx
    3857:	48 89 c7             	mov    %rax,%rdi
    385a:	e8 00 00 00 00       	callq  385f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    385f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3863:	48 89 c7             	mov    %rax,%rdi
    3866:	e8 00 00 00 00       	callq  386b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    386b:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    3872:	00 00 00 
    3875:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3879:	48 89 c7             	mov    %rax,%rdi
    387c:	e8 00 00 00 00       	callq  3881 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    3881:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    3887:	0f 9f c0             	setg   %al
    388a:	84 c0                	test   %al,%al
    388c:	74 6e                	je     38fc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    388e:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    3894:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3898:	89 d6                	mov    %edx,%esi
    389a:	48 89 c7             	mov    %rax,%rdi
    389d:	e8 00 00 00 00       	callq  38a2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    38a2:	48 89 c7             	mov    %rax,%rdi
    38a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    38a9:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    38af:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    38b6:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    38bd:	41 89 c8             	mov    %ecx,%r8d
    38c0:	48 89 d1             	mov    %rdx,%rcx
    38c3:	48 89 fa             	mov    %rdi,%rdx
    38c6:	48 89 c7             	mov    %rax,%rdi
    38c9:	e8 00 00 00 00       	callq  38ce <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    38ce:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    38d2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38d9:	48 89 d6             	mov    %rdx,%rsi
    38dc:	48 89 c7             	mov    %rax,%rdi
    38df:	e8 00 00 00 00       	callq  38e4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    38e4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    38e8:	48 89 c7             	mov    %rax,%rdi
    38eb:	e8 00 00 00 00       	callq  38f0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    38f0:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    38f7:	e9 79 ff ff ff       	jmpq   3875 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    38fc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3903:	48 89 c7             	mov    %rax,%rdi
    3906:	e8 00 00 00 00       	callq  390b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    390b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    3911:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    3918:	00 00 00 
    391b:	b8 1f 00 00 00       	mov    $0x1f,%eax
    3920:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    3926:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    392c:	7e 1d                	jle    394b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    392e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3935:	be 00 00 00 00       	mov    $0x0,%esi
    393a:	48 89 c7             	mov    %rax,%rdi
    393d:	e8 00 00 00 00       	callq  3942 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    3942:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    3949:	eb d0                	jmp    391b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    394b:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    3951:	0f be d0             	movsbl %al,%edx
    3954:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    395b:	89 d6                	mov    %edx,%esi
    395d:	48 89 c7             	mov    %rax,%rdi
    3960:	e8 00 00 00 00       	callq  3965 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    3965:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    396c:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    3973:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    397a:	48 89 c6             	mov    %rax,%rsi
    397d:	48 89 d7             	mov    %rdx,%rdi
    3980:	e8 00 00 00 00       	callq  3985 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    3985:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3989:	48 89 c7             	mov    %rax,%rdi
    398c:	e8 00 00 00 00       	callq  3991 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3991:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3998:	48 89 c7             	mov    %rax,%rdi
    399b:	e8 00 00 00 00       	callq  39a0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    39a0:	90                   	nop
    39a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39a5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    39ac:	00 00 
    39ae:	0f 84 30 01 00 00    	je     3ae4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    39b4:	e9 26 01 00 00       	jmpq   3adf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    39b9:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    39bc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    39c3:	48 89 c7             	mov    %rax,%rdi
    39c6:	e8 00 00 00 00       	callq  39cb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    39cb:	eb 03                	jmp    39d0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    39cd:	48 89 c3             	mov    %rax,%rbx
    39d0:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    39d7:	48 89 c7             	mov    %rax,%rdi
    39da:	e8 00 00 00 00       	callq  39df <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    39df:	e9 e1 00 00 00       	jmpq   3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39e4:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    39e7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    39ee:	48 89 c7             	mov    %rax,%rdi
    39f1:	e8 00 00 00 00       	callq  39f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    39f6:	eb 03                	jmp    39fb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    39f8:	48 89 c3             	mov    %rax,%rbx
    39fb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3a02:	48 89 c7             	mov    %rax,%rdi
    3a05:	e8 00 00 00 00       	callq  3a0a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    3a0a:	e9 b6 00 00 00       	jmpq   3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a0f:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    3a12:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3a19:	48 89 c7             	mov    %rax,%rdi
    3a1c:	e8 00 00 00 00       	callq  3a21 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    3a21:	eb 03                	jmp    3a26 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    3a23:	48 89 c3             	mov    %rax,%rbx
    3a26:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a2d:	48 89 c7             	mov    %rax,%rdi
    3a30:	e8 00 00 00 00       	callq  3a35 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    3a35:	e9 8b 00 00 00       	jmpq   3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a3a:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3a3d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3a41:	48 89 c7             	mov    %rax,%rdi
    3a44:	e8 00 00 00 00       	callq  3a49 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    3a49:	eb 03                	jmp    3a4e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    3a4b:	48 89 c3             	mov    %rax,%rbx
    3a4e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3a52:	48 89 c7             	mov    %rax,%rdi
    3a55:	e8 00 00 00 00       	callq  3a5a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    3a5a:	eb 69                	jmp    3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a5c:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3a5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3a63:	48 89 c7             	mov    %rax,%rdi
    3a66:	e8 00 00 00 00       	callq  3a6b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    3a6b:	eb 03                	jmp    3a70 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    3a6d:	48 89 c3             	mov    %rax,%rbx
    3a70:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3a74:	48 89 c7             	mov    %rax,%rdi
    3a77:	e8 00 00 00 00       	callq  3a7c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    3a7c:	eb 47                	jmp    3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a7e:	48 89 c3             	mov    %rax,%rbx
    3a81:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3a85:	48 89 c7             	mov    %rax,%rdi
    3a88:	e8 00 00 00 00       	callq  3a8d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    3a8d:	eb 36                	jmp    3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a8f:	48 89 c3             	mov    %rax,%rbx
    3a92:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3a96:	48 89 c7             	mov    %rax,%rdi
    3a99:	e8 00 00 00 00       	callq  3a9e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    3a9e:	eb 25                	jmp    3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3aa0:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    3aa3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3aa7:	48 89 c7             	mov    %rax,%rdi
    3aaa:	e8 00 00 00 00       	callq  3aaf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    3aaf:	eb 03                	jmp    3ab4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    3ab1:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    3ab4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ab8:	48 89 c7             	mov    %rax,%rdi
    3abb:	e8 00 00 00 00       	callq  3ac0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    3ac0:	eb 03                	jmp    3ac5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3ac2:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3ac5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3acc:	48 89 c7             	mov    %rax,%rdi
    3acf:	e8 00 00 00 00       	callq  3ad4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    3ad4:	48 89 d8             	mov    %rbx,%rax
    3ad7:	48 89 c7             	mov    %rax,%rdi
    3ada:	e8 00 00 00 00       	callq  3adf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3adf:	e8 00 00 00 00       	callq  3ae4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3ae4:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3aeb:	5b                   	pop    %rbx
    3aec:	5d                   	pop    %rbp
    3aed:	c3                   	retq   

0000000000003aee <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3aee:	55                   	push   %rbp
    3aef:	48 89 e5             	mov    %rsp,%rbp
    3af2:	53                   	push   %rbx
    3af3:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3afa:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3b01:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3b08:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3b0f:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3b16:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3b1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3b24:	00 00 
    3b26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3b2a:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3b2c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b30:	be 20 00 00 00       	mov    $0x20,%esi
    3b35:	48 89 c7             	mov    %rax,%rdi
    3b38:	e8 00 00 00 00       	callq  3b3d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3b3d:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b41:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b48:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b4d:	ba 00 00 00 00       	mov    $0x0,%edx
    3b52:	48 89 c7             	mov    %rax,%rdi
    3b55:	e8 00 00 00 00       	callq  3b5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3b5a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3b60:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3b67:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3b6d:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b74:	89 d1                	mov    %edx,%ecx
    3b76:	ba 00 00 00 00       	mov    $0x0,%edx
    3b7b:	48 89 c7             	mov    %rax,%rdi
    3b7e:	e8 00 00 00 00       	callq  3b83 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3b83:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3b8a:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3b8d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b91:	be 28 00 00 00       	mov    $0x28,%esi
    3b96:	48 89 c7             	mov    %rax,%rdi
    3b99:	e8 00 00 00 00       	callq  3b9e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3b9e:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3ba4:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3ba8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3baf:	b9 01 00 00 00       	mov    $0x1,%ecx
    3bb4:	48 89 c7             	mov    %rax,%rdi
    3bb7:	e8 00 00 00 00       	callq  3bbc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3bbc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3bc2:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3bc8:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3bce:	89 c1                	mov    %eax,%ecx
    3bd0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3bd4:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3bda:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3be1:	48 89 c7             	mov    %rax,%rdi
    3be4:	e8 00 00 00 00       	callq  3be9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3be9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3bed:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3bf1:	48 89 d6             	mov    %rdx,%rsi
    3bf4:	48 89 c7             	mov    %rax,%rdi
    3bf7:	e8 00 00 00 00       	callq  3bfc <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3bfc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3c00:	48 89 c7             	mov    %rax,%rdi
    3c03:	e8 00 00 00 00       	callq  3c08 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3c08:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3c0e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3c14:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c18:	be 29 00 00 00       	mov    $0x29,%esi
    3c1d:	48 89 c7             	mov    %rax,%rdi
    3c20:	e8 00 00 00 00       	callq  3c25 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3c25:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3c2b:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3c2f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3c36:	b9 01 00 00 00       	mov    $0x1,%ecx
    3c3b:	48 89 c7             	mov    %rax,%rdi
    3c3e:	e8 00 00 00 00       	callq  3c43 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3c43:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3c49:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3c4f:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3c55:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3c58:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3c5e:	8d 50 01             	lea    0x1(%rax),%edx
    3c61:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3c65:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3c6c:	48 89 c7             	mov    %rax,%rdi
    3c6f:	e8 00 00 00 00       	callq  3c74 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c74:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3c78:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3c7f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3c7f:	48 89 c7             	mov    %rax,%rdi
    3c82:	e8 00 00 00 00       	callq  3c87 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3c87:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c8b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3c8f:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3c93:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3c99:	b9 01 00 00 00       	mov    $0x1,%ecx
    3c9e:	48 89 c7             	mov    %rax,%rdi
    3ca1:	e8 00 00 00 00       	callq  3ca6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3ca6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3caa:	48 89 c7             	mov    %rax,%rdi
    3cad:	e8 00 00 00 00       	callq  3cb2 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3cb2:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3cb6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3cba:	48 89 d6             	mov    %rdx,%rsi
    3cbd:	48 89 c7             	mov    %rax,%rdi
    3cc0:	e8 00 00 00 00       	callq  3cc5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3cc5:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3cc9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3ccd:	48 89 d6             	mov    %rdx,%rsi
    3cd0:	48 89 c7             	mov    %rax,%rdi
    3cd3:	e8 00 00 00 00       	callq  3cd8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3cd8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3cdf:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3ce6:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3ced:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3cf1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3cf5:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3cfc:	45 89 c1             	mov    %r8d,%r9d
    3cff:	49 89 f8             	mov    %rdi,%r8
    3d02:	48 89 c7             	mov    %rax,%rdi
    3d05:	e8 00 00 00 00       	callq  3d0a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3d0a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3d0e:	48 89 c7             	mov    %rax,%rdi
    3d11:	e8 00 00 00 00       	callq  3d16 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3d16:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d1a:	48 89 c7             	mov    %rax,%rdi
    3d1d:	e8 00 00 00 00       	callq  3d22 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3d22:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d23:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d27:	48 89 c7             	mov    %rax,%rdi
    3d2a:	e8 00 00 00 00       	callq  3d2f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d2f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d33:	48 89 c7             	mov    %rax,%rdi
    3d36:	e8 00 00 00 00       	callq  3d3b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3d3b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d3f:	48 89 c7             	mov    %rax,%rdi
    3d42:	e8 00 00 00 00       	callq  3d47 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3d47:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d4e:	48 89 c7             	mov    %rax,%rdi
    3d51:	e8 00 00 00 00       	callq  3d56 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3d56:	90                   	nop
}
    3d57:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d5e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3d62:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3d69:	00 00 
    3d6b:	0f 84 ee 00 00 00    	je     3e5f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3d71:	e9 e4 00 00 00       	jmpq   3e5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3d76:	48 89 c3             	mov    %rax,%rbx
    3d79:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3d7d:	48 89 c7             	mov    %rax,%rdi
    3d80:	e8 00 00 00 00       	callq  3d85 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3d85:	e9 b6 00 00 00       	jmpq   3e40 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d8a:	48 89 c3             	mov    %rax,%rbx
    3d8d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d91:	48 89 c7             	mov    %rax,%rdi
    3d94:	e8 00 00 00 00       	callq  3d99 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3d99:	e9 a2 00 00 00       	jmpq   3e40 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d9e:	48 89 c3             	mov    %rax,%rbx
    3da1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3da5:	48 89 c7             	mov    %rax,%rdi
    3da8:	e8 00 00 00 00       	callq  3dad <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3dad:	eb 6f                	jmp    3e1e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3daf:	48 89 c3             	mov    %rax,%rbx
    3db2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3db6:	48 89 c7             	mov    %rax,%rdi
    3db9:	e8 00 00 00 00       	callq  3dbe <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3dbe:	eb 5e                	jmp    3e1e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3dc0:	48 89 c3             	mov    %rax,%rbx
    3dc3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3dc7:	48 89 c7             	mov    %rax,%rdi
    3dca:	e8 00 00 00 00       	callq  3dcf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3dcf:	eb 17                	jmp    3de8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3dd1:	48 89 c3             	mov    %rax,%rbx
    3dd4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3ddb:	48 89 c7             	mov    %rax,%rdi
    3dde:	e8 00 00 00 00       	callq  3de3 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3de3:	eb 03                	jmp    3de8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3de5:	48 89 c3             	mov    %rax,%rbx
    3de8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3dec:	48 89 c7             	mov    %rax,%rdi
    3def:	e8 00 00 00 00       	callq  3df4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3df4:	eb 17                	jmp    3e0d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3df6:	48 89 c3             	mov    %rax,%rbx
    3df9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3e00:	48 89 c7             	mov    %rax,%rdi
    3e03:	e8 00 00 00 00       	callq  3e08 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3e08:	eb 03                	jmp    3e0d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3e0a:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3e0d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3e11:	48 89 c7             	mov    %rax,%rdi
    3e14:	e8 00 00 00 00       	callq  3e19 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3e19:	eb 03                	jmp    3e1e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3e1b:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3e1e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3e22:	48 89 c7             	mov    %rax,%rdi
    3e25:	e8 00 00 00 00       	callq  3e2a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3e2a:	eb 03                	jmp    3e2f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3e2c:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3e2f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3e33:	48 89 c7             	mov    %rax,%rdi
    3e36:	e8 00 00 00 00       	callq  3e3b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3e3b:	eb 03                	jmp    3e40 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3e3d:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3e40:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3e47:	48 89 c7             	mov    %rax,%rdi
    3e4a:	e8 00 00 00 00       	callq  3e4f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3e4f:	48 89 d8             	mov    %rbx,%rax
    3e52:	48 89 c7             	mov    %rax,%rdi
    3e55:	e8 00 00 00 00       	callq  3e5a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3e5a:	e8 00 00 00 00       	callq  3e5f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3e5f:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3e66:	5b                   	pop    %rbx
    3e67:	5d                   	pop    %rbp
    3e68:	c3                   	retq   
    3e69:	90                   	nop

0000000000003e6a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3e6a:	55                   	push   %rbp
    3e6b:	48 89 e5             	mov    %rsp,%rbp
    3e6e:	53                   	push   %rbx
    3e6f:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3e76:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3e7d:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3e84:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3e8b:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3e92:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3e99:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3ea0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3ea7:	00 00 
    3ea9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3ead:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3eaf:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3eb6:	48 89 c7             	mov    %rax,%rdi
    3eb9:	e8 00 00 00 00       	callq  3ebe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3ebe:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3ec5:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3ecb:	ba 0a 00 00 00       	mov    $0xa,%edx
    3ed0:	89 ce                	mov    %ecx,%esi
    3ed2:	48 89 c7             	mov    %rax,%rdi
    3ed5:	e8 00 00 00 00       	callq  3eda <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3eda:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3ee1:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3ee8:	48 89 d6             	mov    %rdx,%rsi
    3eeb:	48 89 c7             	mov    %rax,%rdi
    3eee:	e8 00 00 00 00       	callq  3ef3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3ef3:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3efa:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3f01:	48 89 d6             	mov    %rdx,%rsi
    3f04:	48 89 c7             	mov    %rax,%rdi
    3f07:	e8 00 00 00 00       	callq  3f0c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3f0c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3f13:	48 89 c7             	mov    %rax,%rdi
    3f16:	e8 00 00 00 00       	callq  3f1b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3f1b:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f22:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f29:	48 89 d6             	mov    %rdx,%rsi
    3f2c:	48 89 c7             	mov    %rax,%rdi
    3f2f:	e8 00 00 00 00       	callq  3f34 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3f34:	83 f0 01             	xor    $0x1,%eax
    3f37:	84 c0                	test   %al,%al
    3f39:	0f 84 b5 00 00 00    	je     3ff4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3f3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3f46:	48 89 c7             	mov    %rax,%rdi
    3f49:	e8 00 00 00 00       	callq  3f4e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3f4e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3f54:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3f5b:	0f 8e c0 00 00 00    	jle    4021 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3f61:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f68:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f6f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3f76 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3f76:	48 89 c7             	mov    %rax,%rdi
    3f79:	e8 00 00 00 00       	callq  3f7e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3f7e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f82:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3f89:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f90 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3f90:	48 89 ce             	mov    %rcx,%rsi
    3f93:	48 89 c7             	mov    %rax,%rdi
    3f96:	e8 00 00 00 00       	callq  3f9b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3f9b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f9f:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3fa6:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3faa:	48 89 ce             	mov    %rcx,%rsi
    3fad:	48 89 c7             	mov    %rax,%rdi
    3fb0:	e8 00 00 00 00       	callq  3fb5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3fb5:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3fb9:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3fc0:	48 89 d6             	mov    %rdx,%rsi
    3fc3:	48 89 c7             	mov    %rax,%rdi
    3fc6:	e8 00 00 00 00       	callq  3fcb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3fcb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3fcf:	48 89 c7             	mov    %rax,%rdi
    3fd2:	e8 00 00 00 00       	callq  3fd7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3fd7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3fdb:	48 89 c7             	mov    %rax,%rdi
    3fde:	e8 00 00 00 00       	callq  3fe3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3fe3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fea:	48 89 c7             	mov    %rax,%rdi
    3fed:	e8 00 00 00 00       	callq  3ff2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3ff2:	eb 2d                	jmp    4021 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3ff4:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3ffb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4002:	48 89 d6             	mov    %rdx,%rsi
    4005:	48 89 c7             	mov    %rax,%rdi
    4008:	e8 00 00 00 00       	callq  400d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    400d:	0f be d0             	movsbl %al,%edx
    4010:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4017:	89 d6                	mov    %edx,%esi
    4019:	48 89 c7             	mov    %rax,%rdi
    401c:	e8 00 00 00 00       	callq  4021 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4021:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    4028:	00 00 00 
    402b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    4032:	48 89 c7             	mov    %rax,%rdi
    4035:	e8 00 00 00 00       	callq  403a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    403a:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    4040:	0f 9f c0             	setg   %al
    4043:	84 c0                	test   %al,%al
    4045:	0f 84 e2 02 00 00    	je     432d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    404b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    4052:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    4058:	89 d6                	mov    %edx,%esi
    405a:	48 89 c7             	mov    %rax,%rdi
    405d:	e8 00 00 00 00       	callq  4062 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    4062:	48 89 c2             	mov    %rax,%rdx
    4065:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    406c:	48 89 d6             	mov    %rdx,%rsi
    406f:	48 89 c7             	mov    %rax,%rdi
    4072:	e8 00 00 00 00       	callq  4077 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    4077:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    407e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4085 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    4085:	48 89 c7             	mov    %rax,%rdi
    4088:	e8 00 00 00 00       	callq  408d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    408d:	84 c0                	test   %al,%al
    408f:	74 19                	je     40aa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    4091:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4098:	be 19 00 00 00       	mov    $0x19,%esi
    409d:	48 89 c7             	mov    %rax,%rdi
    40a0:	e8 00 00 00 00       	callq  40a5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    40a5:	e9 68 02 00 00       	jmpq   4312 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    40aa:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    40b1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40bc <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    40bc:	48 89 c7             	mov    %rax,%rdi
    40bf:	e8 00 00 00 00       	callq  40c4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    40c4:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    40c8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    40cf:	b9 01 00 00 00       	mov    $0x1,%ecx
    40d4:	ba 00 00 00 00       	mov    $0x0,%edx
    40d9:	48 89 c7             	mov    %rax,%rdi
    40dc:	e8 00 00 00 00       	callq  40e1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    40e1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    40e7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40eb:	48 89 c7             	mov    %rax,%rdi
    40ee:	e8 00 00 00 00       	callq  40f3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    40f3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40f7:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    40fd:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4104:	48 89 ce             	mov    %rcx,%rsi
    4107:	48 89 c7             	mov    %rax,%rdi
    410a:	e8 00 00 00 00       	callq  410f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    410f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4113:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4117:	48 89 d6             	mov    %rdx,%rsi
    411a:	48 89 c7             	mov    %rax,%rdi
    411d:	e8 00 00 00 00       	callq  4122 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    4122:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4126:	48 89 c7             	mov    %rax,%rdi
    4129:	e8 00 00 00 00       	callq  412e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    412e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4135:	48 89 c7             	mov    %rax,%rdi
    4138:	e8 00 00 00 00       	callq  413d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    413d:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    4143:	8d 50 ff             	lea    -0x1(%rax),%edx
    4146:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    414a:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4151:	48 89 ce             	mov    %rcx,%rsi
    4154:	48 89 c7             	mov    %rax,%rdi
    4157:	e8 00 00 00 00       	callq  415c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    415c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4160:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    4164:	48 89 d6             	mov    %rdx,%rsi
    4167:	48 89 c7             	mov    %rax,%rdi
    416a:	e8 00 00 00 00       	callq  416f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    416f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4173:	48 89 c7             	mov    %rax,%rdi
    4176:	e8 00 00 00 00       	callq  417b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    417b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    417f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4186 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    4186:	48 89 c7             	mov    %rax,%rdi
    4189:	e8 00 00 00 00       	callq  418e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    418e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4192:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4199 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    4199:	48 89 c7             	mov    %rax,%rdi
    419c:	e8 00 00 00 00       	callq  41a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    41a1:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    41a5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41ac:	48 89 d6             	mov    %rdx,%rsi
    41af:	48 89 c7             	mov    %rax,%rdi
    41b2:	e8 00 00 00 00       	callq  41b7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    41b7:	83 f0 01             	xor    $0x1,%eax
    41ba:	84 c0                	test   %al,%al
    41bc:	74 38                	je     41f6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    41be:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    41c2:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    41c6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41cd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    41cd:	48 89 c7             	mov    %rax,%rdi
    41d0:	e8 00 00 00 00       	callq  41d5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    41d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    41d9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    41dd:	48 89 d6             	mov    %rdx,%rsi
    41e0:	48 89 c7             	mov    %rax,%rdi
    41e3:	e8 00 00 00 00       	callq  41e8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    41e8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    41ec:	48 89 c7             	mov    %rax,%rdi
    41ef:	e8 00 00 00 00       	callq  41f4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    41f4:	eb 74                	jmp    426a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    41f6:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    41fa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4201:	48 89 d6             	mov    %rdx,%rsi
    4204:	48 89 c7             	mov    %rax,%rdi
    4207:	e8 00 00 00 00       	callq  420c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    420c:	0f be d0             	movsbl %al,%edx
    420f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4216:	89 d6                	mov    %edx,%esi
    4218:	48 89 c7             	mov    %rax,%rdi
    421b:	e8 00 00 00 00       	callq  4220 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    4220:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4224:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    422b:	48 89 d6             	mov    %rdx,%rsi
    422e:	48 89 c7             	mov    %rax,%rdi
    4231:	e8 00 00 00 00       	callq  4236 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    4236:	89 c1                	mov    %eax,%ecx
    4238:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    423c:	ba 0a 00 00 00       	mov    $0xa,%edx
    4241:	89 ce                	mov    %ecx,%esi
    4243:	48 89 c7             	mov    %rax,%rdi
    4246:	e8 00 00 00 00       	callq  424b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    424b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    424f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4253:	48 89 d6             	mov    %rdx,%rsi
    4256:	48 89 c7             	mov    %rax,%rdi
    4259:	e8 00 00 00 00       	callq  425e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    425e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4262:	48 89 c7             	mov    %rax,%rdi
    4265:	e8 00 00 00 00       	callq  426a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    426a:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    426e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4275:	48 89 d6             	mov    %rdx,%rsi
    4278:	48 89 c7             	mov    %rax,%rdi
    427b:	e8 00 00 00 00       	callq  4280 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    4280:	83 f0 01             	xor    $0x1,%eax
    4283:	84 c0                	test   %al,%al
    4285:	74 31                	je     42b8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    4287:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    428e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4292:	ba 0a 00 00 00       	mov    $0xa,%edx
    4297:	48 89 ce             	mov    %rcx,%rsi
    429a:	48 89 c7             	mov    %rax,%rdi
    429d:	e8 00 00 00 00       	callq  42a2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    42a2:	0f be d0             	movsbl %al,%edx
    42a5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    42ac:	89 d6                	mov    %edx,%esi
    42ae:	48 89 c7             	mov    %rax,%rdi
    42b1:	e8 00 00 00 00       	callq  42b6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    42b6:	eb 2a                	jmp    42e2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    42b8:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    42bc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    42c3:	48 89 d6             	mov    %rdx,%rsi
    42c6:	48 89 c7             	mov    %rax,%rdi
    42c9:	e8 00 00 00 00       	callq  42ce <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    42ce:	0f be d0             	movsbl %al,%edx
    42d1:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    42d8:	89 d6                	mov    %edx,%esi
    42da:	48 89 c7             	mov    %rax,%rdi
    42dd:	e8 00 00 00 00       	callq  42e2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    42e2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42e6:	48 89 c7             	mov    %rax,%rdi
    42e9:	e8 00 00 00 00       	callq  42ee <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    42ee:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    42f2:	48 89 c7             	mov    %rax,%rdi
    42f5:	e8 00 00 00 00       	callq  42fa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    42fa:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    42fe:	48 89 c7             	mov    %rax,%rdi
    4301:	e8 00 00 00 00       	callq  4306 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4306:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    430a:	48 89 c7             	mov    %rax,%rdi
    430d:	e8 00 00 00 00       	callq  4312 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4312:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4319:	48 89 c7             	mov    %rax,%rdi
    431c:	e8 00 00 00 00       	callq  4321 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4321:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    4328:	e9 fe fc ff ff       	jmpq   402b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    432d:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    432e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4335:	48 89 c7             	mov    %rax,%rdi
    4338:	e8 00 00 00 00       	callq  433d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    433d:	e9 59 01 00 00       	jmpq   449b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    4342:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    4345:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    434c:	48 89 c7             	mov    %rax,%rdi
    434f:	e8 00 00 00 00       	callq  4354 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    4354:	e9 14 01 00 00       	jmpq   446d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4359:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    435c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4360:	48 89 c7             	mov    %rax,%rdi
    4363:	e8 00 00 00 00       	callq  4368 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    4368:	eb 03                	jmp    436d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    436a:	48 89 c3             	mov    %rax,%rbx
    436d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4371:	48 89 c7             	mov    %rax,%rdi
    4374:	e8 00 00 00 00       	callq  4379 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    4379:	eb 03                	jmp    437e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    437b:	48 89 c3             	mov    %rax,%rbx
    437e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4385:	48 89 c7             	mov    %rax,%rdi
    4388:	e8 00 00 00 00       	callq  438d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    438d:	e9 db 00 00 00       	jmpq   446d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4392:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    4395:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4399:	48 89 c7             	mov    %rax,%rdi
    439c:	e8 00 00 00 00       	callq  43a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    43a1:	e9 b3 00 00 00       	jmpq   4459 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    43a6:	48 89 c3             	mov    %rax,%rbx
    43a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    43ad:	48 89 c7             	mov    %rax,%rdi
    43b0:	e8 00 00 00 00       	callq  43b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    43b5:	e9 9f 00 00 00       	jmpq   4459 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    43ba:	48 89 c3             	mov    %rax,%rbx
    43bd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    43c1:	48 89 c7             	mov    %rax,%rdi
    43c4:	e8 00 00 00 00       	callq  43c9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    43c9:	e9 8b 00 00 00       	jmpq   4459 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    43ce:	48 89 c3             	mov    %rax,%rbx
    43d1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    43d5:	48 89 c7             	mov    %rax,%rdi
    43d8:	e8 00 00 00 00       	callq  43dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    43dd:	eb 69                	jmp    4448 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    43df:	48 89 c3             	mov    %rax,%rbx
    43e2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    43e6:	48 89 c7             	mov    %rax,%rdi
    43e9:	e8 00 00 00 00       	callq  43ee <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    43ee:	eb 58                	jmp    4448 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    43f0:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    43f3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    43f7:	48 89 c7             	mov    %rax,%rdi
    43fa:	e8 00 00 00 00       	callq  43ff <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    43ff:	eb 14                	jmp    4415 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4401:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    4404:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4408:	48 89 c7             	mov    %rax,%rdi
    440b:	e8 00 00 00 00       	callq  4410 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    4410:	eb 03                	jmp    4415 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4412:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4415:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4419:	48 89 c7             	mov    %rax,%rdi
    441c:	e8 00 00 00 00       	callq  4421 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    4421:	eb 03                	jmp    4426 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    4423:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4426:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    442a:	48 89 c7             	mov    %rax,%rdi
    442d:	e8 00 00 00 00       	callq  4432 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    4432:	eb 03                	jmp    4437 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    4434:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4437:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    443b:	48 89 c7             	mov    %rax,%rdi
    443e:	e8 00 00 00 00       	callq  4443 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    4443:	eb 03                	jmp    4448 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4445:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4448:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    444c:	48 89 c7             	mov    %rax,%rdi
    444f:	e8 00 00 00 00       	callq  4454 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    4454:	eb 03                	jmp    4459 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4456:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4459:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4460:	48 89 c7             	mov    %rax,%rdi
    4463:	e8 00 00 00 00       	callq  4468 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    4468:	eb 03                	jmp    446d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    446a:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    446d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4474:	48 89 c7             	mov    %rax,%rdi
    4477:	e8 00 00 00 00       	callq  447c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    447c:	eb 03                	jmp    4481 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    447e:	48 89 c3             	mov    %rax,%rbx
    4481:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4488:	48 89 c7             	mov    %rax,%rdi
    448b:	e8 00 00 00 00       	callq  4490 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    4490:	48 89 d8             	mov    %rbx,%rax
    4493:	48 89 c7             	mov    %rax,%rdi
    4496:	e8 00 00 00 00       	callq  449b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    449b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    44a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    44a6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    44ad:	00 00 
    44af:	74 05                	je     44b6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    44b1:	e8 00 00 00 00       	callq  44b6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    44b6:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    44bd:	5b                   	pop    %rbx
    44be:	5d                   	pop    %rbp
    44bf:	c3                   	retq   

00000000000044c0 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    44c0:	55                   	push   %rbp
    44c1:	48 89 e5             	mov    %rsp,%rbp
    44c4:	53                   	push   %rbx
    44c5:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    44cc:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    44d3:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    44da:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    44e1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    44e8:	00 00 
    44ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    44ee:	31 c0                	xor    %eax,%eax
    QByteArray result;
    44f0:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    44f7:	48 89 c7             	mov    %rax,%rdi
    44fa:	e8 00 00 00 00       	callq  44ff <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    44ff:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4506:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 450d <_ZN6Parser11compileAtomE7QString+0x4d>
    450d:	48 89 c7             	mov    %rax,%rdi
    4510:	e8 00 00 00 00       	callq  4515 <_ZN6Parser11compileAtomE7QString+0x55>
    4515:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    451c:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4523:	b9 00 00 00 00       	mov    $0x0,%ecx
    4528:	ba 01 00 00 00       	mov    $0x1,%edx
    452d:	48 89 c7             	mov    %rax,%rdi
    4530:	e8 00 00 00 00       	callq  4535 <_ZN6Parser11compileAtomE7QString+0x75>
    4535:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    453c:	48 89 c7             	mov    %rax,%rdi
    453f:	e8 00 00 00 00       	callq  4544 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    4544:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    454b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4552 <_ZN6Parser11compileAtomE7QString+0x92>
    4552:	48 89 c7             	mov    %rax,%rdi
    4555:	e8 00 00 00 00       	callq  455a <_ZN6Parser11compileAtomE7QString+0x9a>
    455a:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    4561:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4568:	b9 00 00 00 00       	mov    $0x0,%ecx
    456d:	ba 01 00 00 00       	mov    $0x1,%edx
    4572:	48 89 c7             	mov    %rax,%rdi
    4575:	e8 00 00 00 00       	callq  457a <_ZN6Parser11compileAtomE7QString+0xba>
    457a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4581:	48 89 c7             	mov    %rax,%rdi
    4584:	e8 00 00 00 00       	callq  4589 <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4589:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4590:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4597 <_ZN6Parser11compileAtomE7QString+0xd7>
    4597:	48 89 c7             	mov    %rax,%rdi
    459a:	e8 00 00 00 00       	callq  459f <_ZN6Parser11compileAtomE7QString+0xdf>
    459f:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    45a6:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    45ad:	b9 00 00 00 00       	mov    $0x0,%ecx
    45b2:	ba 01 00 00 00       	mov    $0x1,%edx
    45b7:	48 89 c7             	mov    %rax,%rdi
    45ba:	e8 00 00 00 00       	callq  45bf <_ZN6Parser11compileAtomE7QString+0xff>
    45bf:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    45c6:	48 89 c7             	mov    %rax,%rdi
    45c9:	e8 00 00 00 00       	callq  45ce <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    45ce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    45d2:	48 89 c7             	mov    %rax,%rdi
    45d5:	e8 00 00 00 00       	callq  45da <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    45da:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    45e1:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    45e5:	48 89 d6             	mov    %rdx,%rsi
    45e8:	48 89 c7             	mov    %rax,%rdi
    45eb:	e8 00 00 00 00       	callq  45f0 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    45f0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    45f7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    45fb:	48 89 d6             	mov    %rdx,%rsi
    45fe:	48 89 c7             	mov    %rax,%rdi
    4601:	e8 00 00 00 00       	callq  4606 <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4606:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    460d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4614 <_ZN6Parser11compileAtomE7QString+0x154>
    4614:	48 89 c7             	mov    %rax,%rdi
    4617:	e8 00 00 00 00       	callq  461c <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    461c:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    4623:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    462a:	b9 00 00 00 00       	mov    $0x0,%ecx
    462f:	ba 01 00 00 00       	mov    $0x1,%edx
    4634:	48 89 c7             	mov    %rax,%rdi
    4637:	e8 00 00 00 00       	callq  463c <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    463c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4643:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 464a <_ZN6Parser11compileAtomE7QString+0x18a>
    464a:	48 89 c7             	mov    %rax,%rdi
    464d:	e8 00 00 00 00       	callq  4652 <_ZN6Parser11compileAtomE7QString+0x192>
    4652:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    4659:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4660:	b9 00 00 00 00       	mov    $0x0,%ecx
    4665:	ba 01 00 00 00       	mov    $0x1,%edx
    466a:	48 89 c7             	mov    %rax,%rdi
    466d:	e8 00 00 00 00       	callq  4672 <_ZN6Parser11compileAtomE7QString+0x1b2>
    4672:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4679:	48 89 c7             	mov    %rax,%rdi
    467c:	e8 00 00 00 00       	callq  4681 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    4681:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4688:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 468f <_ZN6Parser11compileAtomE7QString+0x1cf>
    468f:	48 89 c7             	mov    %rax,%rdi
    4692:	e8 00 00 00 00       	callq  4697 <_ZN6Parser11compileAtomE7QString+0x1d7>
    4697:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    469e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    46a5:	b9 00 00 00 00       	mov    $0x0,%ecx
    46aa:	ba 01 00 00 00       	mov    $0x1,%edx
    46af:	48 89 c7             	mov    %rax,%rdi
    46b2:	e8 00 00 00 00       	callq  46b7 <_ZN6Parser11compileAtomE7QString+0x1f7>
    46b7:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    46be:	48 89 c7             	mov    %rax,%rdi
    46c1:	e8 00 00 00 00       	callq  46c6 <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    46c6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    46cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46d4 <_ZN6Parser11compileAtomE7QString+0x214>
    46d4:	48 89 c7             	mov    %rax,%rdi
    46d7:	e8 00 00 00 00       	callq  46dc <_ZN6Parser11compileAtomE7QString+0x21c>
    46dc:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    46e3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    46ea:	b9 00 00 00 00       	mov    $0x0,%ecx
    46ef:	ba 01 00 00 00       	mov    $0x1,%edx
    46f4:	48 89 c7             	mov    %rax,%rdi
    46f7:	e8 00 00 00 00       	callq  46fc <_ZN6Parser11compileAtomE7QString+0x23c>
    46fc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4703:	48 89 c7             	mov    %rax,%rdi
    4706:	e8 00 00 00 00       	callq  470b <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    470b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4712:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4719 <_ZN6Parser11compileAtomE7QString+0x259>
    4719:	48 89 c7             	mov    %rax,%rdi
    471c:	e8 00 00 00 00       	callq  4721 <_ZN6Parser11compileAtomE7QString+0x261>
    4721:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    4728:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    472f:	b9 00 00 00 00       	mov    $0x0,%ecx
    4734:	ba 01 00 00 00       	mov    $0x1,%edx
    4739:	48 89 c7             	mov    %rax,%rdi
    473c:	e8 00 00 00 00       	callq  4741 <_ZN6Parser11compileAtomE7QString+0x281>
    4741:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4748:	48 89 c7             	mov    %rax,%rdi
    474b:	e8 00 00 00 00       	callq  4750 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4750:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4754:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    475b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4762 <_ZN6Parser11compileAtomE7QString+0x2a2>
    4762:	48 89 c7             	mov    %rax,%rdi
    4765:	e8 00 00 00 00       	callq  476a <_ZN6Parser11compileAtomE7QString+0x2aa>
    476a:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    476e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4775:	b9 00 00 00 00       	mov    $0x0,%ecx
    477a:	ba 01 00 00 00       	mov    $0x1,%edx
    477f:	48 89 c7             	mov    %rax,%rdi
    4782:	e8 00 00 00 00       	callq  4787 <_ZN6Parser11compileAtomE7QString+0x2c7>
    4787:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    478b:	48 89 c7             	mov    %rax,%rdi
    478e:	e8 00 00 00 00       	callq  4793 <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    4793:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    479a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    479e:	b9 00 00 00 00       	mov    $0x0,%ecx
    47a3:	ba 01 00 00 00       	mov    $0x1,%edx
    47a8:	48 89 c7             	mov    %rax,%rdi
    47ab:	e8 00 00 00 00       	callq  47b0 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    47b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    47b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47bb <_ZN6Parser11compileAtomE7QString+0x2fb>
    47bb:	48 89 c7             	mov    %rax,%rdi
    47be:	e8 00 00 00 00       	callq  47c3 <_ZN6Parser11compileAtomE7QString+0x303>
    47c3:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    47c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    47cb:	b9 00 00 00 00       	mov    $0x0,%ecx
    47d0:	ba 01 00 00 00       	mov    $0x1,%edx
    47d5:	48 89 c7             	mov    %rax,%rdi
    47d8:	e8 00 00 00 00       	callq  47dd <_ZN6Parser11compileAtomE7QString+0x31d>
    47dd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    47e1:	48 89 c7             	mov    %rax,%rdi
    47e4:	e8 00 00 00 00       	callq  47e9 <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    47e9:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    47ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    47ee:	48 89 c7             	mov    %rax,%rdi
    47f1:	e8 00 00 00 00       	callq  47f6 <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    47f6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    47fa:	48 89 c7             	mov    %rax,%rdi
    47fd:	e8 00 00 00 00       	callq  4802 <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4802:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4809:	48 89 c7             	mov    %rax,%rdi
    480c:	e8 00 00 00 00       	callq  4811 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4811:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4818:	48 89 c7             	mov    %rax,%rdi
    481b:	e8 00 00 00 00       	callq  4820 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4820:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4827:	48 89 c7             	mov    %rax,%rdi
    482a:	e8 00 00 00 00       	callq  482f <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    482f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4836:	48 89 c7             	mov    %rax,%rdi
    4839:	e8 00 00 00 00       	callq  483e <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    483e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4845:	48 89 c7             	mov    %rax,%rdi
    4848:	e8 00 00 00 00       	callq  484d <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    484d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4854:	48 89 c7             	mov    %rax,%rdi
    4857:	e8 00 00 00 00       	callq  485c <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    485c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4863:	48 89 c7             	mov    %rax,%rdi
    4866:	e8 00 00 00 00       	callq  486b <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    486b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4872:	48 89 c7             	mov    %rax,%rdi
    4875:	e8 00 00 00 00       	callq  487a <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    487a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4881:	48 89 c7             	mov    %rax,%rdi
    4884:	e8 00 00 00 00       	callq  4889 <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4889:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    488d:	48 89 c7             	mov    %rax,%rdi
    4890:	e8 00 00 00 00       	callq  4895 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4895:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    489c:	48 89 c7             	mov    %rax,%rdi
    489f:	e8 00 00 00 00       	callq  48a4 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    48a4:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    48ab:	48 89 c7             	mov    %rax,%rdi
    48ae:	e8 00 00 00 00       	callq  48b3 <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    48b3:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    48ba:	48 89 c7             	mov    %rax,%rdi
    48bd:	e8 00 00 00 00       	callq  48c2 <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    48c2:	e9 b8 02 00 00       	jmpq   4b7f <_ZN6Parser11compileAtomE7QString+0x6bf>
    48c7:	48 89 c3             	mov    %rax,%rbx
    48ca:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    48d1:	48 89 c7             	mov    %rax,%rdi
    48d4:	e8 00 00 00 00       	callq  48d9 <_ZN6Parser11compileAtomE7QString+0x419>
    48d9:	e9 87 02 00 00       	jmpq   4b65 <_ZN6Parser11compileAtomE7QString+0x6a5>
    48de:	48 89 c3             	mov    %rax,%rbx
    48e1:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    48e8:	48 89 c7             	mov    %rax,%rdi
    48eb:	e8 00 00 00 00       	callq  48f0 <_ZN6Parser11compileAtomE7QString+0x430>
    48f0:	e9 70 02 00 00       	jmpq   4b65 <_ZN6Parser11compileAtomE7QString+0x6a5>
    48f5:	48 89 c3             	mov    %rax,%rbx
    48f8:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    48ff:	48 89 c7             	mov    %rax,%rdi
    4902:	e8 00 00 00 00       	callq  4907 <_ZN6Parser11compileAtomE7QString+0x447>
    4907:	e9 45 02 00 00       	jmpq   4b51 <_ZN6Parser11compileAtomE7QString+0x691>
    490c:	48 89 c3             	mov    %rax,%rbx
    490f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4916:	48 89 c7             	mov    %rax,%rdi
    4919:	e8 00 00 00 00       	callq  491e <_ZN6Parser11compileAtomE7QString+0x45e>
    491e:	e9 2e 02 00 00       	jmpq   4b51 <_ZN6Parser11compileAtomE7QString+0x691>
    4923:	48 89 c3             	mov    %rax,%rbx
    4926:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    492d:	48 89 c7             	mov    %rax,%rdi
    4930:	e8 00 00 00 00       	callq  4935 <_ZN6Parser11compileAtomE7QString+0x475>
    4935:	e9 03 02 00 00       	jmpq   4b3d <_ZN6Parser11compileAtomE7QString+0x67d>
    493a:	48 89 c3             	mov    %rax,%rbx
    493d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4944:	48 89 c7             	mov    %rax,%rdi
    4947:	e8 00 00 00 00       	callq  494c <_ZN6Parser11compileAtomE7QString+0x48c>
    494c:	e9 ec 01 00 00       	jmpq   4b3d <_ZN6Parser11compileAtomE7QString+0x67d>
    4951:	48 89 c3             	mov    %rax,%rbx
    4954:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    495b:	48 89 c7             	mov    %rax,%rdi
    495e:	e8 00 00 00 00       	callq  4963 <_ZN6Parser11compileAtomE7QString+0x4a3>
    4963:	e9 60 01 00 00       	jmpq   4ac8 <_ZN6Parser11compileAtomE7QString+0x608>
    4968:	48 89 c3             	mov    %rax,%rbx
    496b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4972:	48 89 c7             	mov    %rax,%rdi
    4975:	e8 00 00 00 00       	callq  497a <_ZN6Parser11compileAtomE7QString+0x4ba>
    497a:	e9 49 01 00 00       	jmpq   4ac8 <_ZN6Parser11compileAtomE7QString+0x608>
    497f:	48 89 c3             	mov    %rax,%rbx
    4982:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4989:	48 89 c7             	mov    %rax,%rdi
    498c:	e8 00 00 00 00       	callq  4991 <_ZN6Parser11compileAtomE7QString+0x4d1>
    4991:	e9 1e 01 00 00       	jmpq   4ab4 <_ZN6Parser11compileAtomE7QString+0x5f4>
    4996:	48 89 c3             	mov    %rax,%rbx
    4999:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    49a0:	48 89 c7             	mov    %rax,%rdi
    49a3:	e8 00 00 00 00       	callq  49a8 <_ZN6Parser11compileAtomE7QString+0x4e8>
    49a8:	e9 07 01 00 00       	jmpq   4ab4 <_ZN6Parser11compileAtomE7QString+0x5f4>
    49ad:	48 89 c3             	mov    %rax,%rbx
    49b0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    49b7:	48 89 c7             	mov    %rax,%rdi
    49ba:	e8 00 00 00 00       	callq  49bf <_ZN6Parser11compileAtomE7QString+0x4ff>
    49bf:	e9 dc 00 00 00       	jmpq   4aa0 <_ZN6Parser11compileAtomE7QString+0x5e0>
    49c4:	48 89 c3             	mov    %rax,%rbx
    49c7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    49ce:	48 89 c7             	mov    %rax,%rdi
    49d1:	e8 00 00 00 00       	callq  49d6 <_ZN6Parser11compileAtomE7QString+0x516>
    49d6:	e9 c5 00 00 00       	jmpq   4aa0 <_ZN6Parser11compileAtomE7QString+0x5e0>
    49db:	48 89 c3             	mov    %rax,%rbx
    49de:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    49e5:	48 89 c7             	mov    %rax,%rdi
    49e8:	e8 00 00 00 00       	callq  49ed <_ZN6Parser11compileAtomE7QString+0x52d>
    49ed:	e9 9a 00 00 00       	jmpq   4a8c <_ZN6Parser11compileAtomE7QString+0x5cc>
    49f2:	48 89 c3             	mov    %rax,%rbx
    49f5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49fc:	48 89 c7             	mov    %rax,%rdi
    49ff:	e8 00 00 00 00       	callq  4a04 <_ZN6Parser11compileAtomE7QString+0x544>
    4a04:	e9 83 00 00 00       	jmpq   4a8c <_ZN6Parser11compileAtomE7QString+0x5cc>
    4a09:	48 89 c3             	mov    %rax,%rbx
    4a0c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4a10:	48 89 c7             	mov    %rax,%rdi
    4a13:	e8 00 00 00 00       	callq  4a18 <_ZN6Parser11compileAtomE7QString+0x558>
    4a18:	eb 5e                	jmp    4a78 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4a1a:	48 89 c3             	mov    %rax,%rbx
    4a1d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4a24:	48 89 c7             	mov    %rax,%rdi
    4a27:	e8 00 00 00 00       	callq  4a2c <_ZN6Parser11compileAtomE7QString+0x56c>
    4a2c:	eb 4a                	jmp    4a78 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4a2e:	48 89 c3             	mov    %rax,%rbx
    4a31:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4a35:	48 89 c7             	mov    %rax,%rdi
    4a38:	e8 00 00 00 00       	callq  4a3d <_ZN6Parser11compileAtomE7QString+0x57d>
    4a3d:	eb 14                	jmp    4a53 <_ZN6Parser11compileAtomE7QString+0x593>
    4a3f:	48 89 c3             	mov    %rax,%rbx
    4a42:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4a46:	48 89 c7             	mov    %rax,%rdi
    4a49:	e8 00 00 00 00       	callq  4a4e <_ZN6Parser11compileAtomE7QString+0x58e>
    4a4e:	eb 03                	jmp    4a53 <_ZN6Parser11compileAtomE7QString+0x593>
    4a50:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    4a53:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4a57:	48 89 c7             	mov    %rax,%rdi
    4a5a:	e8 00 00 00 00       	callq  4a5f <_ZN6Parser11compileAtomE7QString+0x59f>
    4a5f:	eb 03                	jmp    4a64 <_ZN6Parser11compileAtomE7QString+0x5a4>
    4a61:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4a64:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4a6b:	48 89 c7             	mov    %rax,%rdi
    4a6e:	e8 00 00 00 00       	callq  4a73 <_ZN6Parser11compileAtomE7QString+0x5b3>
    4a73:	eb 03                	jmp    4a78 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4a75:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4a78:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4a7f:	48 89 c7             	mov    %rax,%rdi
    4a82:	e8 00 00 00 00       	callq  4a87 <_ZN6Parser11compileAtomE7QString+0x5c7>
    4a87:	eb 03                	jmp    4a8c <_ZN6Parser11compileAtomE7QString+0x5cc>
    4a89:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4a8c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4a93:	48 89 c7             	mov    %rax,%rdi
    4a96:	e8 00 00 00 00       	callq  4a9b <_ZN6Parser11compileAtomE7QString+0x5db>
    4a9b:	eb 03                	jmp    4aa0 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4a9d:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4aa0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4aa7:	48 89 c7             	mov    %rax,%rdi
    4aaa:	e8 00 00 00 00       	callq  4aaf <_ZN6Parser11compileAtomE7QString+0x5ef>
    4aaf:	eb 03                	jmp    4ab4 <_ZN6Parser11compileAtomE7QString+0x5f4>
    4ab1:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4ab4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4abb:	48 89 c7             	mov    %rax,%rdi
    4abe:	e8 00 00 00 00       	callq  4ac3 <_ZN6Parser11compileAtomE7QString+0x603>
    4ac3:	eb 03                	jmp    4ac8 <_ZN6Parser11compileAtomE7QString+0x608>
    4ac5:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4ac8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4acf:	48 89 c7             	mov    %rax,%rdi
    4ad2:	e8 00 00 00 00       	callq  4ad7 <_ZN6Parser11compileAtomE7QString+0x617>
    4ad7:	eb 03                	jmp    4adc <_ZN6Parser11compileAtomE7QString+0x61c>
    4ad9:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4adc:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ae3:	48 89 c7             	mov    %rax,%rdi
    4ae6:	e8 00 00 00 00       	callq  4aeb <_ZN6Parser11compileAtomE7QString+0x62b>
    4aeb:	eb 03                	jmp    4af0 <_ZN6Parser11compileAtomE7QString+0x630>
    4aed:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4af0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4af7:	48 89 c7             	mov    %rax,%rdi
    4afa:	e8 00 00 00 00       	callq  4aff <_ZN6Parser11compileAtomE7QString+0x63f>
    4aff:	eb 03                	jmp    4b04 <_ZN6Parser11compileAtomE7QString+0x644>
    4b01:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4b04:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4b0b:	48 89 c7             	mov    %rax,%rdi
    4b0e:	e8 00 00 00 00       	callq  4b13 <_ZN6Parser11compileAtomE7QString+0x653>
    4b13:	eb 03                	jmp    4b18 <_ZN6Parser11compileAtomE7QString+0x658>
    4b15:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4b18:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4b1c:	48 89 c7             	mov    %rax,%rdi
    4b1f:	e8 00 00 00 00       	callq  4b24 <_ZN6Parser11compileAtomE7QString+0x664>
    4b24:	eb 03                	jmp    4b29 <_ZN6Parser11compileAtomE7QString+0x669>
    4b26:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4b29:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4b30:	48 89 c7             	mov    %rax,%rdi
    4b33:	e8 00 00 00 00       	callq  4b38 <_ZN6Parser11compileAtomE7QString+0x678>
    4b38:	eb 03                	jmp    4b3d <_ZN6Parser11compileAtomE7QString+0x67d>
    4b3a:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4b3d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4b44:	48 89 c7             	mov    %rax,%rdi
    4b47:	e8 00 00 00 00       	callq  4b4c <_ZN6Parser11compileAtomE7QString+0x68c>
    4b4c:	eb 03                	jmp    4b51 <_ZN6Parser11compileAtomE7QString+0x691>
    4b4e:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4b51:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4b58:	48 89 c7             	mov    %rax,%rdi
    4b5b:	e8 00 00 00 00       	callq  4b60 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4b60:	eb 03                	jmp    4b65 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4b62:	48 89 c3             	mov    %rax,%rbx
    4b65:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4b6c:	48 89 c7             	mov    %rax,%rdi
    4b6f:	e8 00 00 00 00       	callq  4b74 <_ZN6Parser11compileAtomE7QString+0x6b4>
    4b74:	48 89 d8             	mov    %rbx,%rax
    4b77:	48 89 c7             	mov    %rax,%rdi
    4b7a:	e8 00 00 00 00       	callq  4b7f <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4b7f:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4b86:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4b8a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4b91:	00 00 
    4b93:	74 05                	je     4b9a <_ZN6Parser11compileAtomE7QString+0x6da>
    4b95:	e8 00 00 00 00       	callq  4b9a <_ZN6Parser11compileAtomE7QString+0x6da>
    4b9a:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4ba1:	5b                   	pop    %rbx
    4ba2:	5d                   	pop    %rbp
    4ba3:	c3                   	retq   

0000000000004ba4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4ba4:	55                   	push   %rbp
    4ba5:	48 89 e5             	mov    %rsp,%rbp
    4ba8:	53                   	push   %rbx
    4ba9:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4bb0:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4bb7:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4bbe:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4bc5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4bcc:	00 00 
    4bce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4bd2:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4bd4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4bd8:	48 89 c7             	mov    %rax,%rdi
    4bdb:	e8 00 00 00 00       	callq  4be0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4be0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4be7:	48 89 c7             	mov    %rax,%rdi
    4bea:	e8 00 00 00 00       	callq  4bef <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4bef:	85 c0                	test   %eax,%eax
    4bf1:	0f 9e c0             	setle  %al
    4bf4:	84 c0                	test   %al,%al
    4bf6:	74 0a                	je     4c02 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4bf8:	bb 00 00 00 00       	mov    $0x0,%ebx
    4bfd:	e9 27 01 00 00       	jmpq   4d29 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c02:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c06:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4c0d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4c0d:	48 89 c7             	mov    %rax,%rdi
    4c10:	e8 00 00 00 00       	callq  4c15 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4c15:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4c19:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c1d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4c22:	ba 00 00 00 00       	mov    $0x0,%edx
    4c27:	48 89 c7             	mov    %rax,%rdi
    4c2a:	e8 00 00 00 00       	callq  4c2f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4c2f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c33:	48 89 c7             	mov    %rax,%rdi
    4c36:	e8 00 00 00 00       	callq  4c3b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4c3b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c3f:	be 00 00 00 00       	mov    $0x0,%esi
    4c44:	48 89 c7             	mov    %rax,%rdi
    4c47:	e8 00 00 00 00       	callq  4c4c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4c4c:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c53:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4c56:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4c5d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c61:	b9 00 00 00 00       	mov    $0x0,%ecx
    4c66:	48 89 c7             	mov    %rax,%rdi
    4c69:	e8 00 00 00 00       	callq  4c6e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4c6e:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4c71:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4c75:	0f 95 c0             	setne  %al
    4c78:	84 c0                	test   %al,%al
    4c7a:	0f 84 98 00 00 00    	je     4d18 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4c80:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c84:	48 89 c7             	mov    %rax,%rdi
    4c87:	e8 00 00 00 00       	callq  4c8c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4c8c:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4c8f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c93:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4c97:	ba 00 00 00 00       	mov    $0x0,%edx
    4c9c:	48 89 ce             	mov    %rcx,%rsi
    4c9f:	48 89 c7             	mov    %rax,%rdi
    4ca2:	e8 00 00 00 00       	callq  4ca7 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4ca7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4cab:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4cb2:	48 89 d6             	mov    %rdx,%rsi
    4cb5:	48 89 c7             	mov    %rax,%rdi
    4cb8:	e8 00 00 00 00       	callq  4cbd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4cbd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4cc1:	48 89 c7             	mov    %rax,%rdi
    4cc4:	e8 00 00 00 00       	callq  4cc9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4cc9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4ccd:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4cd1:	ba 00 00 00 00       	mov    $0x0,%edx
    4cd6:	48 89 ce             	mov    %rcx,%rsi
    4cd9:	48 89 c7             	mov    %rax,%rdi
    4cdc:	e8 00 00 00 00       	callq  4ce1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4ce1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4ce5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4ce9:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4cf0:	48 89 ce             	mov    %rcx,%rsi
    4cf3:	48 89 c7             	mov    %rax,%rdi
    4cf6:	e8 00 00 00 00       	callq  4cfb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4cfb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4cff:	48 89 c7             	mov    %rax,%rdi
    4d02:	e8 00 00 00 00       	callq  4d07 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4d07:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4d0b:	48 89 c7             	mov    %rax,%rdi
    4d0e:	e8 00 00 00 00       	callq  4d13 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4d13:	e9 3b ff ff ff       	jmpq   4c53 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4d18:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4d1c:	48 89 c7             	mov    %rax,%rdi
    4d1f:	e8 00 00 00 00       	callq  4d24 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4d24:	bb 01 00 00 00       	mov    $0x1,%ebx
    4d29:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4d2d:	48 89 c7             	mov    %rax,%rdi
    4d30:	e8 00 00 00 00       	callq  4d35 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4d35:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4d38:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d3d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4d44:	00 00 
    4d46:	74 76                	je     4dbe <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4d48:	eb 6f                	jmp    4db9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4d4a:	48 89 c3             	mov    %rax,%rbx
    4d4d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4d51:	48 89 c7             	mov    %rax,%rdi
    4d54:	e8 00 00 00 00       	callq  4d59 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4d59:	eb 47                	jmp    4da2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4d5b:	48 89 c3             	mov    %rax,%rbx
    4d5e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4d62:	48 89 c7             	mov    %rax,%rdi
    4d65:	e8 00 00 00 00       	callq  4d6a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4d6a:	eb 36                	jmp    4da2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4d6c:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4d6f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4d73:	48 89 c7             	mov    %rax,%rdi
    4d76:	e8 00 00 00 00       	callq  4d7b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4d7b:	eb 14                	jmp    4d91 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4d7d:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4d80:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4d84:	48 89 c7             	mov    %rax,%rdi
    4d87:	e8 00 00 00 00       	callq  4d8c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4d8c:	eb 03                	jmp    4d91 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4d8e:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4d91:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4d95:	48 89 c7             	mov    %rax,%rdi
    4d98:	e8 00 00 00 00       	callq  4d9d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4d9d:	eb 03                	jmp    4da2 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4d9f:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4da2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4da6:	48 89 c7             	mov    %rax,%rdi
    4da9:	e8 00 00 00 00       	callq  4dae <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4dae:	48 89 d8             	mov    %rbx,%rax
    4db1:	48 89 c7             	mov    %rax,%rdi
    4db4:	e8 00 00 00 00       	callq  4db9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4db9:	e8 00 00 00 00       	callq  4dbe <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4dbe:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4dc5:	5b                   	pop    %rbx
    4dc6:	5d                   	pop    %rbp
    4dc7:	c3                   	retq   

0000000000004dc8 <_Z12compileBlockR11QStringList>:

QByteArray  compileBlock(QStringList &block){
    4dc8:	55                   	push   %rbp
    4dc9:	48 89 e5             	mov    %rsp,%rbp
    4dcc:	48 83 ec 20          	sub    $0x20,%rsp
    4dd0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4dd4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4dd8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4ddf:	00 00 
    4de1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4de5:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4de7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4deb:	48 89 c7             	mov    %rax,%rdi
    4dee:	e8 00 00 00 00       	callq  4df3 <_Z12compileBlockR11QStringList+0x2b>

    return result;
    4df3:	90                   	nop
}
    4df4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4df8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4dfc:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    4e03:	00 00 
    4e05:	74 05                	je     4e0c <_Z12compileBlockR11QStringList+0x44>
    4e07:	e8 00 00 00 00       	callq  4e0c <_Z12compileBlockR11QStringList+0x44>
    4e0c:	c9                   	leaveq 
    4e0d:	c3                   	retq   

0000000000004e0e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4e0e:	55                   	push   %rbp
    4e0f:	48 89 e5             	mov    %rsp,%rbp
    4e12:	53                   	push   %rbx
    4e13:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4e1a:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4e21:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4e28:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4e2f:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4e36:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4e3d:	00 00 
    4e3f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4e43:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4e45:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4e4c:	48 89 c7             	mov    %rax,%rdi
    4e4f:	e8 00 00 00 00       	callq  4e54 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4e54:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4e5b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4e62:	b9 00 00 00 00       	mov    $0x0,%ecx
    4e67:	ba 01 00 00 00       	mov    $0x1,%edx
    4e6c:	48 89 c7             	mov    %rax,%rdi
    4e6f:	e8 00 00 00 00       	callq  4e74 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4e74:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4e7b:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e82:	48 89 d6             	mov    %rdx,%rsi
    4e85:	48 89 c7             	mov    %rax,%rdi
    4e88:	e8 00 00 00 00       	callq  4e8d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4e8d:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4e94:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4e9b:	48 89 d6             	mov    %rdx,%rsi
    4e9e:	48 89 c7             	mov    %rax,%rdi
    4ea1:	e8 00 00 00 00       	callq  4ea6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4ea6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4ead:	48 89 c7             	mov    %rax,%rdi
    4eb0:	e8 00 00 00 00       	callq  4eb5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4eb5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4ebc:	48 89 c7             	mov    %rax,%rdi
    4ebf:	e8 00 00 00 00       	callq  4ec4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4ec4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4ecb:	48 89 c7             	mov    %rax,%rdi
    4ece:	e8 00 00 00 00       	callq  4ed3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4ed3:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4eda:	48 89 c7             	mov    %rax,%rdi
    4edd:	e8 00 00 00 00       	callq  4ee2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4ee2:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4ee9:	00 00 00 
    int     lineBase = 0;
    4eec:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4ef3:	00 00 00 
    int     line     = 0;
    4ef6:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4efd:	00 00 00 

    unsigned int BFL = str.count("{");
    4f00:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4f07:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f0e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4f0e:	48 89 c7             	mov    %rax,%rdi
    4f11:	e8 00 00 00 00       	callq  4f16 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4f16:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4f1d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f24:	ba 01 00 00 00       	mov    $0x1,%edx
    4f29:	48 89 ce             	mov    %rcx,%rsi
    4f2c:	48 89 c7             	mov    %rax,%rdi
    4f2f:	e8 00 00 00 00       	callq  4f34 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4f34:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4f3a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4f41:	48 89 c7             	mov    %rax,%rdi
    4f44:	e8 00 00 00 00       	callq  4f49 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4f49:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4f50:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f57 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4f57:	48 89 c7             	mov    %rax,%rdi
    4f5a:	e8 00 00 00 00       	callq  4f5f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4f5f:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4f66:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f6d:	ba 01 00 00 00       	mov    $0x1,%edx
    4f72:	48 89 ce             	mov    %rcx,%rsi
    4f75:	48 89 c7             	mov    %rax,%rdi
    4f78:	e8 00 00 00 00       	callq  4f7d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4f7d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4f83:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4f8a:	48 89 c7             	mov    %rax,%rdi
    4f8d:	e8 00 00 00 00       	callq  4f92 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4f92:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4f99:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fa0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4fa0:	48 89 c7             	mov    %rax,%rdi
    4fa3:	e8 00 00 00 00       	callq  4fa8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4fa8:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4faf:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4fb6:	ba 01 00 00 00       	mov    $0x1,%edx
    4fbb:	48 89 ce             	mov    %rcx,%rsi
    4fbe:	48 89 c7             	mov    %rax,%rdi
    4fc1:	e8 00 00 00 00       	callq  4fc6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4fc6:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4fcc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4fd3:	48 89 c7             	mov    %rax,%rdi
    4fd6:	e8 00 00 00 00       	callq  4fdb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4fdb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4fe2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fe9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4fe9:	48 89 c7             	mov    %rax,%rdi
    4fec:	e8 00 00 00 00       	callq  4ff1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4ff1:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4ff8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4fff:	ba 01 00 00 00       	mov    $0x1,%edx
    5004:	48 89 ce             	mov    %rcx,%rsi
    5007:	48 89 c7             	mov    %rax,%rdi
    500a:	e8 00 00 00 00       	callq  500f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    500f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    5015:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    501c:	48 89 c7             	mov    %rax,%rdi
    501f:	e8 00 00 00 00       	callq  5024 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    5024:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    502a:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    5030:	74 43                	je     5075 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    5032:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5039:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5040 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    5040:	48 89 c7             	mov    %rax,%rdi
    5043:	e8 00 00 00 00       	callq  5048 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    5048:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    504f:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    5056:	48 89 d6             	mov    %rdx,%rsi
    5059:	48 89 c7             	mov    %rax,%rdi
    505c:	e8 00 00 00 00       	callq  5061 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    5061:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5068:	48 89 c7             	mov    %rax,%rdi
    506b:	e8 00 00 00 00       	callq  5070 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    5070:	e9 6f 03 00 00       	jmpq   53e4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    5075:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    507b:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    5081:	74 43                	je     50c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    5083:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    508a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5091 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    5091:	48 89 c7             	mov    %rax,%rdi
    5094:	e8 00 00 00 00       	callq  5099 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    5099:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    50a0:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    50a7:	48 89 d6             	mov    %rdx,%rsi
    50aa:	48 89 c7             	mov    %rax,%rdi
    50ad:	e8 00 00 00 00       	callq  50b2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    50b2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    50b9:	48 89 c7             	mov    %rax,%rdi
    50bc:	e8 00 00 00 00       	callq  50c1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    50c1:	e9 1e 03 00 00       	jmpq   53e4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    50c6:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    50cd:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    50d4:	b9 00 00 00 00       	mov    $0x0,%ecx
    50d9:	ba 00 00 00 00       	mov    $0x0,%edx
    50de:	48 89 c7             	mov    %rax,%rdi
    50e1:	e8 00 00 00 00       	callq  50e6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    50e6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    50ec:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    50f3:	0f 88 ea 02 00 00    	js     53e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    50f9:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    50ff:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    5105:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    5108:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    510f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5113:	48 89 d6             	mov    %rdx,%rsi
    5116:	48 89 c7             	mov    %rax,%rdi
    5119:	e8 00 00 00 00       	callq  511e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    511e:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5122:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    5129:	89 da                	mov    %ebx,%edx
    512b:	48 89 ce             	mov    %rcx,%rsi
    512e:	48 89 c7             	mov    %rax,%rdi
    5131:	e8 00 00 00 00       	callq  5136 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    5136:	83 c0 01             	add    $0x1,%eax
    5139:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    513f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5143:	48 89 c7             	mov    %rax,%rdi
    5146:	e8 00 00 00 00       	callq  514b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    514b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    514f:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    5156:	ba 01 00 00 00       	mov    $0x1,%edx
    515b:	48 89 ce             	mov    %rcx,%rsi
    515e:	48 89 c7             	mov    %rax,%rdi
    5161:	e8 00 00 00 00       	callq  5166 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    5166:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    516a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5171:	48 89 d6             	mov    %rdx,%rsi
    5174:	48 89 c7             	mov    %rax,%rdi
    5177:	e8 00 00 00 00       	callq  517c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    517c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5180:	48 89 c7             	mov    %rax,%rdi
    5183:	e8 00 00 00 00       	callq  5188 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    5188:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    518c:	be 7b 00 00 00       	mov    $0x7b,%esi
    5191:	48 89 c7             	mov    %rax,%rdi
    5194:	e8 00 00 00 00       	callq  5199 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    5199:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    519f:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    51a3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    51aa:	b9 01 00 00 00       	mov    $0x1,%ecx
    51af:	48 89 c7             	mov    %rax,%rdi
    51b2:	e8 00 00 00 00       	callq  51b7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    51b7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    51bd:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    51c3:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    51ca:	89 d6                	mov    %edx,%esi
    51cc:	48 89 c7             	mov    %rax,%rdi
    51cf:	e8 00 00 00 00       	callq  51d4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    51d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    51d8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    51dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51e0:	48 89 c7             	mov    %rax,%rdi
    51e3:	e8 00 00 00 00       	callq  51e8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    51e8:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    51ef:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    51f6:	00 00 00 
        int br=0;
    51f9:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    5200:	00 00 00 

        while(bl != br)
    5203:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    5209:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    520f:	0f 84 a2 00 00 00    	je     52b7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    5215:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    521c:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5222:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5229:	89 d6                	mov    %edx,%esi
    522b:	48 89 c7             	mov    %rax,%rdi
    522e:	e8 00 00 00 00       	callq  5233 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    5233:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5237:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    523b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    523f:	48 89 c7             	mov    %rax,%rdi
    5242:	e8 00 00 00 00       	callq  5247 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    5247:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    524e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5252:	be 7b 00 00 00       	mov    $0x7b,%esi
    5257:	48 89 c7             	mov    %rax,%rdi
    525a:	e8 00 00 00 00       	callq  525f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    525f:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    5263:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    526a:	89 d6                	mov    %edx,%esi
    526c:	89 c7                	mov    %eax,%edi
    526e:	e8 00 00 00 00       	callq  5273 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    5273:	84 c0                	test   %al,%al
    5275:	74 07                	je     527e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    5277:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    527e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5282:	be 7d 00 00 00       	mov    $0x7d,%esi
    5287:	48 89 c7             	mov    %rax,%rdi
    528a:	e8 00 00 00 00       	callq  528f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    528f:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    5293:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    529a:	89 d6                	mov    %edx,%esi
    529c:	89 c7                	mov    %eax,%edi
    529e:	e8 00 00 00 00       	callq  52a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    52a3:	84 c0                	test   %al,%al
    52a5:	0f 84 58 ff ff ff    	je     5203 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    52ab:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    52b2:	e9 4c ff ff ff       	jmpq   5203 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    52b7:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    52bd:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    52c3:	89 c1                	mov    %eax,%ecx
    52c5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    52c9:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    52cf:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    52d6:	48 89 c7             	mov    %rax,%rdi
    52d9:	e8 00 00 00 00       	callq  52de <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    52de:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    52e2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    52e9:	48 89 d6             	mov    %rdx,%rsi
    52ec:	48 89 c7             	mov    %rax,%rdi
    52ef:	e8 00 00 00 00       	callq  52f4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    52f4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    52f8:	48 89 c7             	mov    %rax,%rdi
    52fb:	e8 00 00 00 00       	callq  5300 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    5300:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5304:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 530b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    530b:	48 89 c7             	mov    %rax,%rdi
    530e:	e8 00 00 00 00       	callq  5313 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    5313:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5317:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    531b:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5322:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5328:	b9 00 00 00 00       	mov    $0x0,%ecx
    532d:	48 89 c7             	mov    %rax,%rdi
    5330:	e8 00 00 00 00       	callq  5335 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    5335:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5339:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5340:	48 89 d6             	mov    %rdx,%rsi
    5343:	48 89 c7             	mov    %rax,%rdi
    5346:	e8 00 00 00 00       	callq  534b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    534b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    534f:	48 89 c7             	mov    %rax,%rdi
    5352:	e8 00 00 00 00       	callq  5357 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    5357:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    535b:	48 89 c7             	mov    %rax,%rdi
    535e:	e8 00 00 00 00       	callq  5363 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    5363:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    536a:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    5371:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5378:	48 89 ce             	mov    %rcx,%rsi
    537b:	48 89 c7             	mov    %rax,%rdi
    537e:	e8 00 00 00 00       	callq  5383 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    5383:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    538a:	48 89 c7             	mov    %rax,%rdi
    538d:	e8 00 00 00 00       	callq  5392 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    5392:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    5398:	89 c2                	mov    %eax,%edx
    539a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    539e:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    53a5:	48 89 ce             	mov    %rcx,%rsi
    53a8:	48 89 c7             	mov    %rax,%rdi
    53ab:	e8 00 00 00 00       	callq  53b0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    53b0:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    53b4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    53bb:	48 89 d6             	mov    %rdx,%rsi
    53be:	48 89 c7             	mov    %rax,%rdi
    53c1:	e8 00 00 00 00       	callq  53c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    53c6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    53ca:	48 89 c7             	mov    %rax,%rdi
    53cd:	e8 00 00 00 00       	callq  53d2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    53d2:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    53d8:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    53de:	e9 e3 fc ff ff       	jmpq   50c6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    53e3:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    53e4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    53eb:	48 89 c7             	mov    %rax,%rdi
    53ee:	e8 00 00 00 00       	callq  53f3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    53f3:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    53fa:	48 89 c7             	mov    %rax,%rdi
    53fd:	e8 00 00 00 00       	callq  5402 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    5402:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5409:	48 89 c7             	mov    %rax,%rdi
    540c:	e8 00 00 00 00       	callq  5411 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5411:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5418:	48 89 c7             	mov    %rax,%rdi
    541b:	e8 00 00 00 00       	callq  5420 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5420:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5427:	48 89 c7             	mov    %rax,%rdi
    542a:	e8 00 00 00 00       	callq  542f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    542f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5436:	48 89 c7             	mov    %rax,%rdi
    5439:	e8 00 00 00 00       	callq  543e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    543e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5445:	48 89 c7             	mov    %rax,%rdi
    5448:	e8 00 00 00 00       	callq  544d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    544d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5451:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5458:	00 00 
    545a:	0f 84 89 01 00 00    	je     55e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5460:	e9 7f 01 00 00       	jmpq   55e4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    5465:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    5468:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    546f:	48 89 c7             	mov    %rax,%rdi
    5472:	e8 00 00 00 00       	callq  5477 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    5477:	e9 d6 00 00 00       	jmpq   5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    547c:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    547f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5486:	48 89 c7             	mov    %rax,%rdi
    5489:	e8 00 00 00 00       	callq  548e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    548e:	e9 bf 00 00 00       	jmpq   5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5493:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    5496:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    549d:	48 89 c7             	mov    %rax,%rdi
    54a0:	e8 00 00 00 00       	callq  54a5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    54a5:	e9 a8 00 00 00       	jmpq   5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54aa:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    54ad:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    54b4:	48 89 c7             	mov    %rax,%rdi
    54b7:	e8 00 00 00 00       	callq  54bc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    54bc:	e9 91 00 00 00       	jmpq   5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54c1:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    54c4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    54cb:	48 89 c7             	mov    %rax,%rdi
    54ce:	e8 00 00 00 00       	callq  54d3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    54d3:	eb 7d                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54d5:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    54d8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    54df:	48 89 c7             	mov    %rax,%rdi
    54e2:	e8 00 00 00 00       	callq  54e7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    54e7:	eb 69                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54e9:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    54ec:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    54f0:	48 89 c7             	mov    %rax,%rdi
    54f3:	e8 00 00 00 00       	callq  54f8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    54f8:	eb 58                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    54fa:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    54fd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5501:	48 89 c7             	mov    %rax,%rdi
    5504:	e8 00 00 00 00       	callq  5509 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    5509:	eb 47                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    550b:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    550e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5512:	48 89 c7             	mov    %rax,%rdi
    5515:	e8 00 00 00 00       	callq  551a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    551a:	eb 36                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    551c:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    551f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5523:	48 89 c7             	mov    %rax,%rdi
    5526:	e8 00 00 00 00       	callq  552b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    552b:	eb 03                	jmp    5530 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    552d:	48 89 c3             	mov    %rax,%rbx
    5530:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5534:	48 89 c7             	mov    %rax,%rdi
    5537:	e8 00 00 00 00       	callq  553c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    553c:	eb 14                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    553e:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    5541:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5545:	48 89 c7             	mov    %rax,%rdi
    5548:	e8 00 00 00 00       	callq  554d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    554d:	eb 03                	jmp    5552 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    554f:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5552:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5559:	48 89 c7             	mov    %rax,%rdi
    555c:	e8 00 00 00 00       	callq  5561 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    5561:	eb 03                	jmp    5566 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    5563:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    5566:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    556d:	48 89 c7             	mov    %rax,%rdi
    5570:	e8 00 00 00 00       	callq  5575 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    5575:	eb 03                	jmp    557a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    5577:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    557a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5581:	48 89 c7             	mov    %rax,%rdi
    5584:	e8 00 00 00 00       	callq  5589 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    5589:	eb 03                	jmp    558e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    558b:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    558e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5595:	48 89 c7             	mov    %rax,%rdi
    5598:	e8 00 00 00 00       	callq  559d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    559d:	eb 03                	jmp    55a2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    559f:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    55a2:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    55a9:	48 89 c7             	mov    %rax,%rdi
    55ac:	e8 00 00 00 00       	callq  55b1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    55b1:	eb 03                	jmp    55b6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    55b3:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    55b6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    55bd:	48 89 c7             	mov    %rax,%rdi
    55c0:	e8 00 00 00 00       	callq  55c5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    55c5:	eb 03                	jmp    55ca <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    55c7:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    55ca:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    55d1:	48 89 c7             	mov    %rax,%rdi
    55d4:	e8 00 00 00 00       	callq  55d9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    55d9:	48 89 d8             	mov    %rbx,%rax
    55dc:	48 89 c7             	mov    %rax,%rdi
    55df:	e8 00 00 00 00       	callq  55e4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    55e4:	e8 00 00 00 00       	callq  55e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    55e9:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    55f0:	5b                   	pop    %rbx
    55f1:	5d                   	pop    %rbp
    55f2:	c3                   	retq   
    55f3:	90                   	nop

00000000000055f4 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    55f4:	55                   	push   %rbp
    55f5:	48 89 e5             	mov    %rsp,%rbp
    55f8:	53                   	push   %rbx
    55f9:	48 83 ec 38          	sub    $0x38,%rsp
    55fd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5601:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5605:	89 55 cc             	mov    %edx,-0x34(%rbp)
    5608:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    560f:	00 00 
    5611:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5615:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    5617:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    561b:	8b 55 cc             	mov    -0x34(%rbp),%edx
    561e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5622:	48 89 ce             	mov    %rcx,%rsi
    5625:	48 89 c7             	mov    %rax,%rdi
    5628:	e8 00 00 00 00       	callq  562d <_ZN6Parser8whatLineE7QStringi+0x39>
    562d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5631:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5635:	48 89 d6             	mov    %rdx,%rsi
    5638:	48 89 c7             	mov    %rax,%rdi
    563b:	e8 00 00 00 00       	callq  5640 <_ZN6Parser8whatLineE7QStringi+0x4c>
    5640:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5644:	48 89 c7             	mov    %rax,%rdi
    5647:	e8 00 00 00 00       	callq  564c <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    564c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5650:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5657 <_ZN6Parser8whatLineE7QStringi+0x63>
    5657:	48 89 c7             	mov    %rax,%rdi
    565a:	e8 00 00 00 00       	callq  565f <_ZN6Parser8whatLineE7QStringi+0x6b>
    565f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    5663:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5667:	ba 01 00 00 00       	mov    $0x1,%edx
    566c:	48 89 ce             	mov    %rcx,%rsi
    566f:	48 89 c7             	mov    %rax,%rdi
    5672:	e8 00 00 00 00       	callq  5677 <_ZN6Parser8whatLineE7QStringi+0x83>
    5677:	89 c3                	mov    %eax,%ebx
    5679:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    567d:	48 89 c7             	mov    %rax,%rdi
    5680:	e8 00 00 00 00       	callq  5685 <_ZN6Parser8whatLineE7QStringi+0x91>
    5685:	89 d8                	mov    %ebx,%eax
}
    5687:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    568b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    5692:	00 00 
    5694:	74 3b                	je     56d1 <_ZN6Parser8whatLineE7QStringi+0xdd>
    5696:	eb 34                	jmp    56cc <_ZN6Parser8whatLineE7QStringi+0xd8>
    5698:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    569b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    569f:	48 89 c7             	mov    %rax,%rdi
    56a2:	e8 00 00 00 00       	callq  56a7 <_ZN6Parser8whatLineE7QStringi+0xb3>
    56a7:	48 89 d8             	mov    %rbx,%rax
    56aa:	48 89 c7             	mov    %rax,%rdi
    56ad:	e8 00 00 00 00       	callq  56b2 <_ZN6Parser8whatLineE7QStringi+0xbe>
    56b2:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    56b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    56b9:	48 89 c7             	mov    %rax,%rdi
    56bc:	e8 00 00 00 00       	callq  56c1 <_ZN6Parser8whatLineE7QStringi+0xcd>
    56c1:	48 89 d8             	mov    %rbx,%rax
    56c4:	48 89 c7             	mov    %rax,%rdi
    56c7:	e8 00 00 00 00       	callq  56cc <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    56cc:	e8 00 00 00 00       	callq  56d1 <_ZN6Parser8whatLineE7QStringi+0xdd>
    56d1:	48 83 c4 38          	add    $0x38,%rsp
    56d5:	5b                   	pop    %rbx
    56d6:	5d                   	pop    %rbp
    56d7:	c3                   	retq   

00000000000056d8 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    56d8:	55                   	push   %rbp
    56d9:	48 89 e5             	mov    %rsp,%rbp
    56dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    56e0:	90                   	nop
    56e1:	5d                   	pop    %rbp
    56e2:	c3                   	retq   
    56e3:	90                   	nop

00000000000056e4 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    56e4:	55                   	push   %rbp
    56e5:	48 89 e5             	mov    %rsp,%rbp
    56e8:	53                   	push   %rbx
    56e9:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    56f0:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    56f7:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    56fe:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    5705:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    570c:	00 00 
    570e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5712:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    5714:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    571b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5722 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    5722:	48 89 c7             	mov    %rax,%rdi
    5725:	e8 00 00 00 00       	callq  572a <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    572a:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5731:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5738 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    5738:	48 89 c7             	mov    %rax,%rdi
    573b:	e8 00 00 00 00       	callq  5740 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    5740:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    5747:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    574e:	48 89 d6             	mov    %rdx,%rsi
    5751:	48 89 c7             	mov    %rax,%rdi
    5754:	e8 00 00 00 00       	callq  5759 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    5759:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    5760:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5767:	48 89 d6             	mov    %rdx,%rsi
    576a:	48 89 c7             	mov    %rax,%rdi
    576d:	e8 00 00 00 00       	callq  5772 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    5772:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5779:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5780 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    5780:	48 89 c7             	mov    %rax,%rdi
    5783:	e8 00 00 00 00       	callq  5788 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    5788:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    578f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5796 <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    5796:	48 89 c7             	mov    %rax,%rdi
    5799:	e8 00 00 00 00       	callq  579e <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    579e:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    57a5:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    57ac:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    57b3:	b9 01 00 00 00       	mov    $0x1,%ecx
    57b8:	48 89 c7             	mov    %rax,%rdi
    57bb:	e8 00 00 00 00       	callq  57c0 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    57c0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    57c7:	48 89 c7             	mov    %rax,%rdi
    57ca:	e8 00 00 00 00       	callq  57cf <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    57cf:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    57d6:	48 89 c7             	mov    %rax,%rdi
    57d9:	e8 00 00 00 00       	callq  57de <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    57de:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    57e5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 57ec <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    57ec:	48 89 c7             	mov    %rax,%rdi
    57ef:	e8 00 00 00 00       	callq  57f4 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    57f4:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    57fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5802 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    5802:	48 89 c7             	mov    %rax,%rdi
    5805:	e8 00 00 00 00       	callq  580a <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    580a:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    5811:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5818:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    581f:	b9 01 00 00 00       	mov    $0x1,%ecx
    5824:	48 89 c7             	mov    %rax,%rdi
    5827:	e8 00 00 00 00       	callq  582c <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    582c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5833:	48 89 c7             	mov    %rax,%rdi
    5836:	e8 00 00 00 00       	callq  583b <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    583b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5842:	48 89 c7             	mov    %rax,%rdi
    5845:	e8 00 00 00 00       	callq  584a <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    584a:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    5851:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5855:	48 89 d6             	mov    %rdx,%rsi
    5858:	48 89 c7             	mov    %rax,%rdi
    585b:	e8 00 00 00 00       	callq  5860 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    5860:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    5867:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    586b:	48 89 d6             	mov    %rdx,%rsi
    586e:	48 89 c7             	mov    %rax,%rdi
    5871:	e8 00 00 00 00       	callq  5876 <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    5876:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    587d:	be 02 00 00 00       	mov    $0x2,%esi
    5882:	48 89 c7             	mov    %rax,%rdi
    5885:	e8 00 00 00 00       	callq  588a <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    588a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    5891:	be 02 00 00 00       	mov    $0x2,%esi
    5896:	48 89 c7             	mov    %rax,%rdi
    5899:	e8 00 00 00 00       	callq  589e <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    589e:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    58a5:	48 89 c7             	mov    %rax,%rdi
    58a8:	e8 00 00 00 00       	callq  58ad <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    58ad:	84 c0                	test   %al,%al
    58af:	74 1a                	je     58cb <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    58b1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    58b5:	be 04 00 00 00       	mov    $0x4,%esi
    58ba:	48 89 c7             	mov    %rax,%rdi
    58bd:	e8 00 00 00 00       	callq  58c2 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    58c2:	8b 45 d0             	mov    -0x30(%rbp),%eax
    58c5:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    58cb:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    58d2:	48 89 c7             	mov    %rax,%rdi
    58d5:	e8 00 00 00 00       	callq  58da <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    58da:	84 c0                	test   %al,%al
    58dc:	74 1a                	je     58f8 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    58de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    58e2:	be 04 00 00 00       	mov    $0x4,%esi
    58e7:	48 89 c7             	mov    %rax,%rdi
    58ea:	e8 00 00 00 00       	callq  58ef <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    58ef:	8b 45 d0             	mov    -0x30(%rbp),%eax
    58f2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    58f8:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    58fe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5902:	89 d6                	mov    %edx,%esi
    5904:	48 89 c7             	mov    %rax,%rdi
    5907:	e8 00 00 00 00       	callq  590c <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    590c:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    5912:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5916:	89 d6                	mov    %edx,%esi
    5918:	48 89 c7             	mov    %rax,%rdi
    591b:	e8 00 00 00 00       	callq  5920 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    5920:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5924:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5928:	48 89 d6             	mov    %rdx,%rsi
    592b:	48 89 c7             	mov    %rax,%rdi
    592e:	e8 00 00 00 00       	callq  5933 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    5933:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5937:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    593b:	48 89 d6             	mov    %rdx,%rsi
    593e:	48 89 c7             	mov    %rax,%rdi
    5941:	e8 00 00 00 00       	callq  5946 <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    5946:	e8 00 00 00 00       	callq  594b <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    594b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    5952:	e8 00 00 00 00       	callq  5957 <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    5957:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    595d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5964:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    596b:	ba 00 00 00 00       	mov    $0x0,%edx
    5970:	48 89 ce             	mov    %rcx,%rsi
    5973:	48 89 c7             	mov    %rax,%rdi
    5976:	e8 00 00 00 00       	callq  597b <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    597b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5982:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    5989:	ba 00 00 00 00       	mov    $0x0,%edx
    598e:	48 89 ce             	mov    %rcx,%rsi
    5991:	48 89 c7             	mov    %rax,%rdi
    5994:	e8 00 00 00 00       	callq  5999 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    5999:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    59a0:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    59a7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59ae <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    59ae:	48 89 ce             	mov    %rcx,%rsi
    59b1:	48 89 c7             	mov    %rax,%rdi
    59b4:	e8 00 00 00 00       	callq  59b9 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    59b9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    59c0:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    59c7:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    59ce:	48 89 ce             	mov    %rcx,%rsi
    59d1:	48 89 c7             	mov    %rax,%rdi
    59d4:	e8 00 00 00 00       	callq  59d9 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    59d9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    59e0:	48 89 c7             	mov    %rax,%rdi
    59e3:	e8 00 00 00 00       	callq  59e8 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    59e8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    59ef:	48 89 c7             	mov    %rax,%rdi
    59f2:	e8 00 00 00 00       	callq  59f7 <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    59f7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    59fe:	48 89 c7             	mov    %rax,%rdi
    5a01:	e8 00 00 00 00       	callq  5a06 <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5a06:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5a0d:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5a14:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a1b <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    5a1b:	48 89 c7             	mov    %rax,%rdi
    5a1e:	e8 00 00 00 00       	callq  5a23 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    5a23:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5a2a:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    5a31:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5a38 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    5a38:	48 89 ce             	mov    %rcx,%rsi
    5a3b:	48 89 c7             	mov    %rax,%rdi
    5a3e:	e8 00 00 00 00       	callq  5a43 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    5a43:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5a4a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a4e:	48 89 d6             	mov    %rdx,%rsi
    5a51:	48 89 c7             	mov    %rax,%rdi
    5a54:	e8 00 00 00 00       	callq  5a59 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    5a59:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5a60:	48 89 c7             	mov    %rax,%rdi
    5a63:	e8 00 00 00 00       	callq  5a68 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    5a68:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5a6f:	48 89 c7             	mov    %rax,%rdi
    5a72:	e8 00 00 00 00       	callq  5a77 <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5a77:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5a7b:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5a82:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a89 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    5a89:	48 89 c7             	mov    %rax,%rdi
    5a8c:	e8 00 00 00 00       	callq  5a91 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    5a91:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5a95:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5a99:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5aa0 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    5aa0:	48 89 ce             	mov    %rcx,%rsi
    5aa3:	48 89 c7             	mov    %rax,%rdi
    5aa6:	e8 00 00 00 00       	callq  5aab <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    5aab:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5aaf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5ab3:	48 89 d6             	mov    %rdx,%rsi
    5ab6:	48 89 c7             	mov    %rax,%rdi
    5ab9:	e8 00 00 00 00       	callq  5abe <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    5abe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5ac2:	48 89 c7             	mov    %rax,%rdi
    5ac5:	e8 00 00 00 00       	callq  5aca <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    5aca:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5ace:	48 89 c7             	mov    %rax,%rdi
    5ad1:	e8 00 00 00 00       	callq  5ad6 <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    5ad6:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5add:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5ae1:	48 89 d6             	mov    %rdx,%rsi
    5ae4:	48 89 c7             	mov    %rax,%rdi
    5ae7:	e8 00 00 00 00       	callq  5aec <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5aec:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5af3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5af7:	48 89 d6             	mov    %rdx,%rsi
    5afa:	48 89 c7             	mov    %rax,%rdi
    5afd:	e8 00 00 00 00       	callq  5b02 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5b02:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5b06:	48 89 c7             	mov    %rax,%rdi
    5b09:	e8 00 00 00 00       	callq  5b0e <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5b0e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5b12:	48 89 c7             	mov    %rax,%rdi
    5b15:	e8 00 00 00 00       	callq  5b1a <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5b1a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b21:	48 89 c7             	mov    %rax,%rdi
    5b24:	e8 00 00 00 00       	callq  5b29 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5b29:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5b2d:	48 89 c7             	mov    %rax,%rdi
    5b30:	e8 00 00 00 00       	callq  5b35 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5b35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5b39:	48 89 c7             	mov    %rax,%rdi
    5b3c:	e8 00 00 00 00       	callq  5b41 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5b41:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5b45:	48 89 c7             	mov    %rax,%rdi
    5b48:	e8 00 00 00 00       	callq  5b4d <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5b4d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5b51:	48 89 c7             	mov    %rax,%rdi
    5b54:	e8 00 00 00 00       	callq  5b59 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5b59:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5b60:	48 89 c7             	mov    %rax,%rdi
    5b63:	e8 00 00 00 00       	callq  5b68 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5b68:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5b6f:	48 89 c7             	mov    %rax,%rdi
    5b72:	e8 00 00 00 00       	callq  5b77 <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5b77:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5b7e:	48 89 c7             	mov    %rax,%rdi
    5b81:	e8 00 00 00 00       	callq  5b86 <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5b86:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5b8d:	48 89 c7             	mov    %rax,%rdi
    5b90:	e8 00 00 00 00       	callq  5b95 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5b95:	90                   	nop
    5b96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b9a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ba1:	00 00 
    5ba3:	0f 84 d3 01 00 00    	je     5d7c <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ba9:	e9 c9 01 00 00       	jmpq   5d77 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5bae:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5bb1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5bb8:	48 89 c7             	mov    %rax,%rdi
    5bbb:	e8 00 00 00 00       	callq  5bc0 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5bc0:	eb 03                	jmp    5bc5 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5bc2:	48 89 c3             	mov    %rax,%rbx
    5bc5:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5bcc:	48 89 c7             	mov    %rax,%rdi
    5bcf:	e8 00 00 00 00       	callq  5bd4 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5bd4:	e9 48 01 00 00       	jmpq   5d21 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5bd9:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5bdc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5be3:	48 89 c7             	mov    %rax,%rdi
    5be6:	e8 00 00 00 00       	callq  5beb <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5beb:	eb 03                	jmp    5bf0 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5bed:	48 89 c3             	mov    %rax,%rbx
    5bf0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5bf7:	48 89 c7             	mov    %rax,%rdi
    5bfa:	e8 00 00 00 00       	callq  5bff <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5bff:	e9 1d 01 00 00       	jmpq   5d21 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c04:	48 89 c3             	mov    %rax,%rbx
    5c07:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5c0e:	48 89 c7             	mov    %rax,%rdi
    5c11:	e8 00 00 00 00       	callq  5c16 <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5c16:	eb 17                	jmp    5c2f <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5c18:	48 89 c3             	mov    %rax,%rbx
    5c1b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c22:	48 89 c7             	mov    %rax,%rdi
    5c25:	e8 00 00 00 00       	callq  5c2a <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5c2a:	eb 03                	jmp    5c2f <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5c2c:	48 89 c3             	mov    %rax,%rbx
    5c2f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5c36:	48 89 c7             	mov    %rax,%rdi
    5c39:	e8 00 00 00 00       	callq  5c3e <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5c3e:	eb 17                	jmp    5c57 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5c40:	48 89 c3             	mov    %rax,%rbx
    5c43:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c4a:	48 89 c7             	mov    %rax,%rdi
    5c4d:	e8 00 00 00 00       	callq  5c52 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5c52:	eb 03                	jmp    5c57 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5c54:	48 89 c3             	mov    %rax,%rbx
    5c57:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5c5e:	48 89 c7             	mov    %rax,%rdi
    5c61:	e8 00 00 00 00       	callq  5c66 <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5c66:	eb 75                	jmp    5cdd <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c68:	48 89 c3             	mov    %rax,%rbx
    5c6b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c72:	48 89 c7             	mov    %rax,%rdi
    5c75:	e8 00 00 00 00       	callq  5c7a <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5c7a:	eb 61                	jmp    5cdd <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c7c:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5c7f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5c86:	48 89 c7             	mov    %rax,%rdi
    5c89:	e8 00 00 00 00       	callq  5c8e <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5c8e:	eb 03                	jmp    5c93 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5c90:	48 89 c3             	mov    %rax,%rbx
    5c93:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5c9a:	48 89 c7             	mov    %rax,%rdi
    5c9d:	e8 00 00 00 00       	callq  5ca2 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5ca2:	eb 25                	jmp    5cc9 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5ca4:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5ca7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5cab:	48 89 c7             	mov    %rax,%rdi
    5cae:	e8 00 00 00 00       	callq  5cb3 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5cb3:	eb 03                	jmp    5cb8 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5cb5:	48 89 c3             	mov    %rax,%rbx
    5cb8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5cbc:	48 89 c7             	mov    %rax,%rdi
    5cbf:	e8 00 00 00 00       	callq  5cc4 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5cc4:	eb 03                	jmp    5cc9 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5cc6:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5cc9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5cd0:	48 89 c7             	mov    %rax,%rdi
    5cd3:	e8 00 00 00 00       	callq  5cd8 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5cd8:	eb 03                	jmp    5cdd <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5cda:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5cdd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5ce1:	48 89 c7             	mov    %rax,%rdi
    5ce4:	e8 00 00 00 00       	callq  5ce9 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5ce9:	eb 03                	jmp    5cee <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5ceb:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5cee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5cf2:	48 89 c7             	mov    %rax,%rdi
    5cf5:	e8 00 00 00 00       	callq  5cfa <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5cfa:	eb 03                	jmp    5cff <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5cfc:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5cff:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5d03:	48 89 c7             	mov    %rax,%rdi
    5d06:	e8 00 00 00 00       	callq  5d0b <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5d0b:	eb 03                	jmp    5d10 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5d0d:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5d10:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5d14:	48 89 c7             	mov    %rax,%rdi
    5d17:	e8 00 00 00 00       	callq  5d1c <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5d1c:	eb 03                	jmp    5d21 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5d1e:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5d21:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5d28:	48 89 c7             	mov    %rax,%rdi
    5d2b:	e8 00 00 00 00       	callq  5d30 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5d30:	eb 03                	jmp    5d35 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5d32:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5d35:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5d3c:	48 89 c7             	mov    %rax,%rdi
    5d3f:	e8 00 00 00 00       	callq  5d44 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5d44:	eb 03                	jmp    5d49 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5d46:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5d49:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5d50:	48 89 c7             	mov    %rax,%rdi
    5d53:	e8 00 00 00 00       	callq  5d58 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5d58:	eb 03                	jmp    5d5d <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5d5a:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5d5d:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5d64:	48 89 c7             	mov    %rax,%rdi
    5d67:	e8 00 00 00 00       	callq  5d6c <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5d6c:	48 89 d8             	mov    %rbx,%rax
    5d6f:	48 89 c7             	mov    %rax,%rdi
    5d72:	e8 00 00 00 00       	callq  5d77 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5d77:	e8 00 00 00 00       	callq  5d7c <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5d7c:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5d83:	5b                   	pop    %rbx
    5d84:	5d                   	pop    %rbp
    5d85:	c3                   	retq   

0000000000005d86 <_ZN6Parser4initEv>:

void Parser::init(){
    5d86:	55                   	push   %rbp
    5d87:	48 89 e5             	mov    %rsp,%rbp
    5d8a:	48 83 ec 10          	sub    $0x10,%rsp
    5d8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5d92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d96:	48 83 c0 30          	add    $0x30,%rax
    5d9a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5da1 <_ZN6Parser4initEv+0x1b>
    5da1:	48 89 c7             	mov    %rax,%rdi
    5da4:	e8 00 00 00 00       	callq  5da9 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5dad:	48 83 c0 38          	add    $0x38,%rax
    5db1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5db8 <_ZN6Parser4initEv+0x32>
    5db8:	48 89 c7             	mov    %rax,%rdi
    5dbb:	e8 00 00 00 00       	callq  5dc0 <_ZN6Parser4initEv+0x3a>
}
    5dc0:	90                   	nop
    5dc1:	c9                   	leaveq 
    5dc2:	c3                   	retq   
    5dc3:	90                   	nop

0000000000005dc4 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5dc4:	55                   	push   %rbp
    5dc5:	48 89 e5             	mov    %rsp,%rbp
    5dc8:	53                   	push   %rbx
    5dc9:	48 83 ec 38          	sub    $0x38,%rsp
    5dcd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5dd1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5dd8:	00 00 
    5dda:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5dde:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5de0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5de7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5deb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5df2 <_ZN6Parser8initSemsEv+0x2e>
    5df2:	48 89 c7             	mov    %rax,%rdi
    5df5:	e8 00 00 00 00       	callq  5dfa <_ZN6Parser8initSemsEv+0x36>
    5dfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dfe:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e05:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e0d:	48 89 c6             	mov    %rax,%rsi
    5e10:	48 89 cf             	mov    %rcx,%rdi
    5e13:	e8 00 00 00 00       	callq  5e18 <_ZN6Parser8initSemsEv+0x54>
    5e18:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e1c:	48 89 c7             	mov    %rax,%rdi
    5e1f:	e8 00 00 00 00       	callq  5e24 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5e24:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5e2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e2f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e36 <_ZN6Parser8initSemsEv+0x72>
    5e36:	48 89 c7             	mov    %rax,%rdi
    5e39:	e8 00 00 00 00       	callq  5e3e <_ZN6Parser8initSemsEv+0x7a>
    5e3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e42:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e49:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e51:	48 89 c6             	mov    %rax,%rsi
    5e54:	48 89 cf             	mov    %rcx,%rdi
    5e57:	e8 00 00 00 00       	callq  5e5c <_ZN6Parser8initSemsEv+0x98>
    5e5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e60:	48 89 c7             	mov    %rax,%rdi
    5e63:	e8 00 00 00 00       	callq  5e68 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5e68:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5e6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e73:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e7a <_ZN6Parser8initSemsEv+0xb6>
    5e7a:	48 89 c7             	mov    %rax,%rdi
    5e7d:	e8 00 00 00 00       	callq  5e82 <_ZN6Parser8initSemsEv+0xbe>
    5e82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e86:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e8d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e95:	48 89 c6             	mov    %rax,%rsi
    5e98:	48 89 cf             	mov    %rcx,%rdi
    5e9b:	e8 00 00 00 00       	callq  5ea0 <_ZN6Parser8initSemsEv+0xdc>
    5ea0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ea4:	48 89 c7             	mov    %rax,%rdi
    5ea7:	e8 00 00 00 00       	callq  5eac <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5eac:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5eb3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eb7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ebe <_ZN6Parser8initSemsEv+0xfa>
    5ebe:	48 89 c7             	mov    %rax,%rdi
    5ec1:	e8 00 00 00 00       	callq  5ec6 <_ZN6Parser8initSemsEv+0x102>
    5ec6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5eca:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ed1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ed5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ed9:	48 89 c6             	mov    %rax,%rsi
    5edc:	48 89 cf             	mov    %rcx,%rdi
    5edf:	e8 00 00 00 00       	callq  5ee4 <_ZN6Parser8initSemsEv+0x120>
    5ee4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ee8:	48 89 c7             	mov    %rax,%rdi
    5eeb:	e8 00 00 00 00       	callq  5ef0 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5ef0:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5ef7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5efb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f02 <_ZN6Parser8initSemsEv+0x13e>
    5f02:	48 89 c7             	mov    %rax,%rdi
    5f05:	e8 00 00 00 00       	callq  5f0a <_ZN6Parser8initSemsEv+0x146>
    5f0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f0e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f15:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f19:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f1d:	48 89 c6             	mov    %rax,%rsi
    5f20:	48 89 cf             	mov    %rcx,%rdi
    5f23:	e8 00 00 00 00       	callq  5f28 <_ZN6Parser8initSemsEv+0x164>
    5f28:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f2c:	48 89 c7             	mov    %rax,%rdi
    5f2f:	e8 00 00 00 00       	callq  5f34 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5f34:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5f3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f3f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f46 <_ZN6Parser8initSemsEv+0x182>
    5f46:	48 89 c7             	mov    %rax,%rdi
    5f49:	e8 00 00 00 00       	callq  5f4e <_ZN6Parser8initSemsEv+0x18a>
    5f4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f52:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f59:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f61:	48 89 c6             	mov    %rax,%rsi
    5f64:	48 89 cf             	mov    %rcx,%rdi
    5f67:	e8 00 00 00 00       	callq  5f6c <_ZN6Parser8initSemsEv+0x1a8>
    5f6c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f70:	48 89 c7             	mov    %rax,%rdi
    5f73:	e8 00 00 00 00       	callq  5f78 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5f78:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5f7f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f83:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f8a <_ZN6Parser8initSemsEv+0x1c6>
    5f8a:	48 89 c7             	mov    %rax,%rdi
    5f8d:	e8 00 00 00 00       	callq  5f92 <_ZN6Parser8initSemsEv+0x1ce>
    5f92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f96:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f9d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fa1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fa5:	48 89 c6             	mov    %rax,%rsi
    5fa8:	48 89 cf             	mov    %rcx,%rdi
    5fab:	e8 00 00 00 00       	callq  5fb0 <_ZN6Parser8initSemsEv+0x1ec>
    5fb0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fb4:	48 89 c7             	mov    %rax,%rdi
    5fb7:	e8 00 00 00 00       	callq  5fbc <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5fbc:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5fc3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fc7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fce <_ZN6Parser8initSemsEv+0x20a>
    5fce:	48 89 c7             	mov    %rax,%rdi
    5fd1:	e8 00 00 00 00       	callq  5fd6 <_ZN6Parser8initSemsEv+0x212>
    5fd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fda:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fe1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fe5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fe9:	48 89 c6             	mov    %rax,%rsi
    5fec:	48 89 cf             	mov    %rcx,%rdi
    5fef:	e8 00 00 00 00       	callq  5ff4 <_ZN6Parser8initSemsEv+0x230>
    5ff4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ff8:	48 89 c7             	mov    %rax,%rdi
    5ffb:	e8 00 00 00 00       	callq  6000 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    6000:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    6007:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    600b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6012 <_ZN6Parser8initSemsEv+0x24e>
    6012:	48 89 c7             	mov    %rax,%rdi
    6015:	e8 00 00 00 00       	callq  601a <_ZN6Parser8initSemsEv+0x256>
    601a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    601e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6025:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6029:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    602d:	48 89 c6             	mov    %rax,%rsi
    6030:	48 89 cf             	mov    %rcx,%rdi
    6033:	e8 00 00 00 00       	callq  6038 <_ZN6Parser8initSemsEv+0x274>
    6038:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    603c:	48 89 c7             	mov    %rax,%rdi
    603f:	e8 00 00 00 00       	callq  6044 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    6044:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    604b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    604f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6056 <_ZN6Parser8initSemsEv+0x292>
    6056:	48 89 c7             	mov    %rax,%rdi
    6059:	e8 00 00 00 00       	callq  605e <_ZN6Parser8initSemsEv+0x29a>
    605e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6062:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6069:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    606d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6071:	48 89 c6             	mov    %rax,%rsi
    6074:	48 89 cf             	mov    %rcx,%rdi
    6077:	e8 00 00 00 00       	callq  607c <_ZN6Parser8initSemsEv+0x2b8>
    607c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6080:	48 89 c7             	mov    %rax,%rdi
    6083:	e8 00 00 00 00       	callq  6088 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    6088:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    608f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6093:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 609a <_ZN6Parser8initSemsEv+0x2d6>
    609a:	48 89 c7             	mov    %rax,%rdi
    609d:	e8 00 00 00 00       	callq  60a2 <_ZN6Parser8initSemsEv+0x2de>
    60a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60a6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60ad:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60b1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60b5:	48 89 c6             	mov    %rax,%rsi
    60b8:	48 89 cf             	mov    %rcx,%rdi
    60bb:	e8 00 00 00 00       	callq  60c0 <_ZN6Parser8initSemsEv+0x2fc>
    60c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60c4:	48 89 c7             	mov    %rax,%rdi
    60c7:	e8 00 00 00 00       	callq  60cc <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    60cc:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    60d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60d7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60de <_ZN6Parser8initSemsEv+0x31a>
    60de:	48 89 c7             	mov    %rax,%rdi
    60e1:	e8 00 00 00 00       	callq  60e6 <_ZN6Parser8initSemsEv+0x322>
    60e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60ea:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60f1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60f9:	48 89 c6             	mov    %rax,%rsi
    60fc:	48 89 cf             	mov    %rcx,%rdi
    60ff:	e8 00 00 00 00       	callq  6104 <_ZN6Parser8initSemsEv+0x340>
    6104:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6108:	48 89 c7             	mov    %rax,%rdi
    610b:	e8 00 00 00 00       	callq  6110 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    6110:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    6117:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    611b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6122 <_ZN6Parser8initSemsEv+0x35e>
    6122:	48 89 c7             	mov    %rax,%rdi
    6125:	e8 00 00 00 00       	callq  612a <_ZN6Parser8initSemsEv+0x366>
    612a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    612e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6135:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6139:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    613d:	48 89 c6             	mov    %rax,%rsi
    6140:	48 89 cf             	mov    %rcx,%rdi
    6143:	e8 00 00 00 00       	callq  6148 <_ZN6Parser8initSemsEv+0x384>
    6148:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    614c:	48 89 c7             	mov    %rax,%rdi
    614f:	e8 00 00 00 00       	callq  6154 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    6154:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    615b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    615f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6166 <_ZN6Parser8initSemsEv+0x3a2>
    6166:	48 89 c7             	mov    %rax,%rdi
    6169:	e8 00 00 00 00       	callq  616e <_ZN6Parser8initSemsEv+0x3aa>
    616e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6172:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6179:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    617d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6181:	48 89 c6             	mov    %rax,%rsi
    6184:	48 89 cf             	mov    %rcx,%rdi
    6187:	e8 00 00 00 00       	callq  618c <_ZN6Parser8initSemsEv+0x3c8>
    618c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6190:	48 89 c7             	mov    %rax,%rdi
    6193:	e8 00 00 00 00       	callq  6198 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    6198:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    619f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61a3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61aa <_ZN6Parser8initSemsEv+0x3e6>
    61aa:	48 89 c7             	mov    %rax,%rdi
    61ad:	e8 00 00 00 00       	callq  61b2 <_ZN6Parser8initSemsEv+0x3ee>
    61b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61b6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61bd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61c5:	48 89 c6             	mov    %rax,%rsi
    61c8:	48 89 cf             	mov    %rcx,%rdi
    61cb:	e8 00 00 00 00       	callq  61d0 <_ZN6Parser8initSemsEv+0x40c>
    61d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61d4:	48 89 c7             	mov    %rax,%rdi
    61d7:	e8 00 00 00 00       	callq  61dc <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    61dc:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    61e3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61e7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61ee <_ZN6Parser8initSemsEv+0x42a>
    61ee:	48 89 c7             	mov    %rax,%rdi
    61f1:	e8 00 00 00 00       	callq  61f6 <_ZN6Parser8initSemsEv+0x432>
    61f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61fa:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6201:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6205:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6209:	48 89 c6             	mov    %rax,%rsi
    620c:	48 89 cf             	mov    %rcx,%rdi
    620f:	e8 00 00 00 00       	callq  6214 <_ZN6Parser8initSemsEv+0x450>
    6214:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6218:	48 89 c7             	mov    %rax,%rdi
    621b:	e8 00 00 00 00       	callq  6220 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6220:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    6227:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    622b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6232 <_ZN6Parser8initSemsEv+0x46e>
    6232:	48 89 c7             	mov    %rax,%rdi
    6235:	e8 00 00 00 00       	callq  623a <_ZN6Parser8initSemsEv+0x476>
    623a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    623e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6245:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6249:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    624d:	48 89 c6             	mov    %rax,%rsi
    6250:	48 89 cf             	mov    %rcx,%rdi
    6253:	e8 00 00 00 00       	callq  6258 <_ZN6Parser8initSemsEv+0x494>
    6258:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    625c:	48 89 c7             	mov    %rax,%rdi
    625f:	e8 00 00 00 00       	callq  6264 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    6264:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    626b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    626f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6276 <_ZN6Parser8initSemsEv+0x4b2>
    6276:	48 89 c7             	mov    %rax,%rdi
    6279:	e8 00 00 00 00       	callq  627e <_ZN6Parser8initSemsEv+0x4ba>
    627e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6282:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6289:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    628d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6291:	48 89 c6             	mov    %rax,%rsi
    6294:	48 89 cf             	mov    %rcx,%rdi
    6297:	e8 00 00 00 00       	callq  629c <_ZN6Parser8initSemsEv+0x4d8>
    629c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62a0:	48 89 c7             	mov    %rax,%rdi
    62a3:	e8 00 00 00 00       	callq  62a8 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    62a8:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    62af:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62b3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62ba <_ZN6Parser8initSemsEv+0x4f6>
    62ba:	48 89 c7             	mov    %rax,%rdi
    62bd:	e8 00 00 00 00       	callq  62c2 <_ZN6Parser8initSemsEv+0x4fe>
    62c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62c6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    62cd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62d1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62d5:	48 89 c6             	mov    %rax,%rsi
    62d8:	48 89 cf             	mov    %rcx,%rdi
    62db:	e8 00 00 00 00       	callq  62e0 <_ZN6Parser8initSemsEv+0x51c>
    62e0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62e4:	48 89 c7             	mov    %rax,%rdi
    62e7:	e8 00 00 00 00       	callq  62ec <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    62ec:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    62f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62f7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62fe <_ZN6Parser8initSemsEv+0x53a>
    62fe:	48 89 c7             	mov    %rax,%rdi
    6301:	e8 00 00 00 00       	callq  6306 <_ZN6Parser8initSemsEv+0x542>
    6306:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    630a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6311:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6315:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6319:	48 89 c6             	mov    %rax,%rsi
    631c:	48 89 cf             	mov    %rcx,%rdi
    631f:	e8 00 00 00 00       	callq  6324 <_ZN6Parser8initSemsEv+0x560>
    6324:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6328:	48 89 c7             	mov    %rax,%rdi
    632b:	e8 00 00 00 00       	callq  6330 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    6330:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    6337:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    633b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6342 <_ZN6Parser8initSemsEv+0x57e>
    6342:	48 89 c7             	mov    %rax,%rdi
    6345:	e8 00 00 00 00       	callq  634a <_ZN6Parser8initSemsEv+0x586>
    634a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    634e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6355:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6359:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    635d:	48 89 c6             	mov    %rax,%rsi
    6360:	48 89 cf             	mov    %rcx,%rdi
    6363:	e8 00 00 00 00       	callq  6368 <_ZN6Parser8initSemsEv+0x5a4>
    6368:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    636c:	48 89 c7             	mov    %rax,%rdi
    636f:	e8 00 00 00 00       	callq  6374 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    6374:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    637b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    637f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6386 <_ZN6Parser8initSemsEv+0x5c2>
    6386:	48 89 c7             	mov    %rax,%rdi
    6389:	e8 00 00 00 00       	callq  638e <_ZN6Parser8initSemsEv+0x5ca>
    638e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6392:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6399:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    639d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63a1:	48 89 c6             	mov    %rax,%rsi
    63a4:	48 89 cf             	mov    %rcx,%rdi
    63a7:	e8 00 00 00 00       	callq  63ac <_ZN6Parser8initSemsEv+0x5e8>
    63ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63b0:	48 89 c7             	mov    %rax,%rdi
    63b3:	e8 00 00 00 00       	callq  63b8 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    63b8:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    63bf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63ca <_ZN6Parser8initSemsEv+0x606>
    63ca:	48 89 c7             	mov    %rax,%rdi
    63cd:	e8 00 00 00 00       	callq  63d2 <_ZN6Parser8initSemsEv+0x60e>
    63d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63d6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    63dd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63e5:	48 89 c6             	mov    %rax,%rsi
    63e8:	48 89 cf             	mov    %rcx,%rdi
    63eb:	e8 00 00 00 00       	callq  63f0 <_ZN6Parser8initSemsEv+0x62c>
    63f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63f4:	48 89 c7             	mov    %rax,%rdi
    63f7:	e8 00 00 00 00       	callq  63fc <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    63fc:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    6403:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6407:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 640e <_ZN6Parser8initSemsEv+0x64a>
    640e:	48 89 c7             	mov    %rax,%rdi
    6411:	e8 00 00 00 00       	callq  6416 <_ZN6Parser8initSemsEv+0x652>
    6416:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    641a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6421:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6425:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6429:	48 89 c6             	mov    %rax,%rsi
    642c:	48 89 cf             	mov    %rcx,%rdi
    642f:	e8 00 00 00 00       	callq  6434 <_ZN6Parser8initSemsEv+0x670>
    6434:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6438:	48 89 c7             	mov    %rax,%rdi
    643b:	e8 00 00 00 00       	callq  6440 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    6440:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    6447:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    644b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6452 <_ZN6Parser8initSemsEv+0x68e>
    6452:	48 89 c7             	mov    %rax,%rdi
    6455:	e8 00 00 00 00       	callq  645a <_ZN6Parser8initSemsEv+0x696>
    645a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    645e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6465:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6469:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    646d:	48 89 c6             	mov    %rax,%rsi
    6470:	48 89 cf             	mov    %rcx,%rdi
    6473:	e8 00 00 00 00       	callq  6478 <_ZN6Parser8initSemsEv+0x6b4>
    6478:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    647c:	48 89 c7             	mov    %rax,%rdi
    647f:	e8 00 00 00 00       	callq  6484 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    6484:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    648b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    648f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6496 <_ZN6Parser8initSemsEv+0x6d2>
    6496:	48 89 c7             	mov    %rax,%rdi
    6499:	e8 00 00 00 00       	callq  649e <_ZN6Parser8initSemsEv+0x6da>
    649e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64a2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64a9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64ad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64b1:	48 89 c6             	mov    %rax,%rsi
    64b4:	48 89 cf             	mov    %rcx,%rdi
    64b7:	e8 00 00 00 00       	callq  64bc <_ZN6Parser8initSemsEv+0x6f8>
    64bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64c0:	48 89 c7             	mov    %rax,%rdi
    64c3:	e8 00 00 00 00       	callq  64c8 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    64c8:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    64cf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64da <_ZN6Parser8initSemsEv+0x716>
    64da:	48 89 c7             	mov    %rax,%rdi
    64dd:	e8 00 00 00 00       	callq  64e2 <_ZN6Parser8initSemsEv+0x71e>
    64e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64e6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64ed:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64f5:	48 89 c6             	mov    %rax,%rsi
    64f8:	48 89 cf             	mov    %rcx,%rdi
    64fb:	e8 00 00 00 00       	callq  6500 <_ZN6Parser8initSemsEv+0x73c>
    6500:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6504:	48 89 c7             	mov    %rax,%rdi
    6507:	e8 00 00 00 00       	callq  650c <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    650c:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    6513:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6517:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 651e <_ZN6Parser8initSemsEv+0x75a>
    651e:	48 89 c7             	mov    %rax,%rdi
    6521:	e8 00 00 00 00       	callq  6526 <_ZN6Parser8initSemsEv+0x762>
    6526:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    652a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6531:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6535:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6539:	48 89 c6             	mov    %rax,%rsi
    653c:	48 89 cf             	mov    %rcx,%rdi
    653f:	e8 00 00 00 00       	callq  6544 <_ZN6Parser8initSemsEv+0x780>
    6544:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6548:	48 89 c7             	mov    %rax,%rdi
    654b:	e8 00 00 00 00       	callq  6550 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    6550:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    6557:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    655b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6562 <_ZN6Parser8initSemsEv+0x79e>
    6562:	48 89 c7             	mov    %rax,%rdi
    6565:	e8 00 00 00 00       	callq  656a <_ZN6Parser8initSemsEv+0x7a6>
    656a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    656e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6575:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6579:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    657d:	48 89 c6             	mov    %rax,%rsi
    6580:	48 89 cf             	mov    %rcx,%rdi
    6583:	e8 00 00 00 00       	callq  6588 <_ZN6Parser8initSemsEv+0x7c4>
    6588:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    658c:	48 89 c7             	mov    %rax,%rdi
    658f:	e8 00 00 00 00       	callq  6594 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    6594:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    659b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    659f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 65a6 <_ZN6Parser8initSemsEv+0x7e2>
    65a6:	48 89 c7             	mov    %rax,%rdi
    65a9:	e8 00 00 00 00       	callq  65ae <_ZN6Parser8initSemsEv+0x7ea>
    65ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    65b2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    65b9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    65bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65c1:	48 89 c6             	mov    %rax,%rsi
    65c4:	48 89 cf             	mov    %rcx,%rdi
    65c7:	e8 00 00 00 00       	callq  65cc <_ZN6Parser8initSemsEv+0x808>
    65cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65d0:	48 89 c7             	mov    %rax,%rdi
    65d3:	e8 00 00 00 00       	callq  65d8 <_ZN6Parser8initSemsEv+0x814>

}
    65d8:	90                   	nop
    65d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    65dd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    65e4:	00 00 
    65e6:	0f 84 16 03 00 00    	je     6902 <_ZN6Parser8initSemsEv+0xb3e>
    65ec:	e9 0c 03 00 00       	jmpq   68fd <_ZN6Parser8initSemsEv+0xb39>
    65f1:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    65f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65f8:	48 89 c7             	mov    %rax,%rdi
    65fb:	e8 00 00 00 00       	callq  6600 <_ZN6Parser8initSemsEv+0x83c>
    6600:	48 89 d8             	mov    %rbx,%rax
    6603:	48 89 c7             	mov    %rax,%rdi
    6606:	e8 00 00 00 00       	callq  660b <_ZN6Parser8initSemsEv+0x847>
    660b:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    660e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6612:	48 89 c7             	mov    %rax,%rdi
    6615:	e8 00 00 00 00       	callq  661a <_ZN6Parser8initSemsEv+0x856>
    661a:	48 89 d8             	mov    %rbx,%rax
    661d:	48 89 c7             	mov    %rax,%rdi
    6620:	e8 00 00 00 00       	callq  6625 <_ZN6Parser8initSemsEv+0x861>
    6625:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    6628:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    662c:	48 89 c7             	mov    %rax,%rdi
    662f:	e8 00 00 00 00       	callq  6634 <_ZN6Parser8initSemsEv+0x870>
    6634:	48 89 d8             	mov    %rbx,%rax
    6637:	48 89 c7             	mov    %rax,%rdi
    663a:	e8 00 00 00 00       	callq  663f <_ZN6Parser8initSemsEv+0x87b>
    663f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    6642:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6646:	48 89 c7             	mov    %rax,%rdi
    6649:	e8 00 00 00 00       	callq  664e <_ZN6Parser8initSemsEv+0x88a>
    664e:	48 89 d8             	mov    %rbx,%rax
    6651:	48 89 c7             	mov    %rax,%rdi
    6654:	e8 00 00 00 00       	callq  6659 <_ZN6Parser8initSemsEv+0x895>
    6659:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    665c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6660:	48 89 c7             	mov    %rax,%rdi
    6663:	e8 00 00 00 00       	callq  6668 <_ZN6Parser8initSemsEv+0x8a4>
    6668:	48 89 d8             	mov    %rbx,%rax
    666b:	48 89 c7             	mov    %rax,%rdi
    666e:	e8 00 00 00 00       	callq  6673 <_ZN6Parser8initSemsEv+0x8af>
    6673:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    6676:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    667a:	48 89 c7             	mov    %rax,%rdi
    667d:	e8 00 00 00 00       	callq  6682 <_ZN6Parser8initSemsEv+0x8be>
    6682:	48 89 d8             	mov    %rbx,%rax
    6685:	48 89 c7             	mov    %rax,%rdi
    6688:	e8 00 00 00 00       	callq  668d <_ZN6Parser8initSemsEv+0x8c9>
    668d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    6690:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6694:	48 89 c7             	mov    %rax,%rdi
    6697:	e8 00 00 00 00       	callq  669c <_ZN6Parser8initSemsEv+0x8d8>
    669c:	48 89 d8             	mov    %rbx,%rax
    669f:	48 89 c7             	mov    %rax,%rdi
    66a2:	e8 00 00 00 00       	callq  66a7 <_ZN6Parser8initSemsEv+0x8e3>
    66a7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    66aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66ae:	48 89 c7             	mov    %rax,%rdi
    66b1:	e8 00 00 00 00       	callq  66b6 <_ZN6Parser8initSemsEv+0x8f2>
    66b6:	48 89 d8             	mov    %rbx,%rax
    66b9:	48 89 c7             	mov    %rax,%rdi
    66bc:	e8 00 00 00 00       	callq  66c1 <_ZN6Parser8initSemsEv+0x8fd>
    66c1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    66c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66c8:	48 89 c7             	mov    %rax,%rdi
    66cb:	e8 00 00 00 00       	callq  66d0 <_ZN6Parser8initSemsEv+0x90c>
    66d0:	48 89 d8             	mov    %rbx,%rax
    66d3:	48 89 c7             	mov    %rax,%rdi
    66d6:	e8 00 00 00 00       	callq  66db <_ZN6Parser8initSemsEv+0x917>
    66db:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    66de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66e2:	48 89 c7             	mov    %rax,%rdi
    66e5:	e8 00 00 00 00       	callq  66ea <_ZN6Parser8initSemsEv+0x926>
    66ea:	48 89 d8             	mov    %rbx,%rax
    66ed:	48 89 c7             	mov    %rax,%rdi
    66f0:	e8 00 00 00 00       	callq  66f5 <_ZN6Parser8initSemsEv+0x931>
    66f5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    66f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66fc:	48 89 c7             	mov    %rax,%rdi
    66ff:	e8 00 00 00 00       	callq  6704 <_ZN6Parser8initSemsEv+0x940>
    6704:	48 89 d8             	mov    %rbx,%rax
    6707:	48 89 c7             	mov    %rax,%rdi
    670a:	e8 00 00 00 00       	callq  670f <_ZN6Parser8initSemsEv+0x94b>
    670f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    6712:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6716:	48 89 c7             	mov    %rax,%rdi
    6719:	e8 00 00 00 00       	callq  671e <_ZN6Parser8initSemsEv+0x95a>
    671e:	48 89 d8             	mov    %rbx,%rax
    6721:	48 89 c7             	mov    %rax,%rdi
    6724:	e8 00 00 00 00       	callq  6729 <_ZN6Parser8initSemsEv+0x965>
    6729:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    672c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6730:	48 89 c7             	mov    %rax,%rdi
    6733:	e8 00 00 00 00       	callq  6738 <_ZN6Parser8initSemsEv+0x974>
    6738:	48 89 d8             	mov    %rbx,%rax
    673b:	48 89 c7             	mov    %rax,%rdi
    673e:	e8 00 00 00 00       	callq  6743 <_ZN6Parser8initSemsEv+0x97f>
    6743:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    6746:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    674a:	48 89 c7             	mov    %rax,%rdi
    674d:	e8 00 00 00 00       	callq  6752 <_ZN6Parser8initSemsEv+0x98e>
    6752:	48 89 d8             	mov    %rbx,%rax
    6755:	48 89 c7             	mov    %rax,%rdi
    6758:	e8 00 00 00 00       	callq  675d <_ZN6Parser8initSemsEv+0x999>
    675d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    6760:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6764:	48 89 c7             	mov    %rax,%rdi
    6767:	e8 00 00 00 00       	callq  676c <_ZN6Parser8initSemsEv+0x9a8>
    676c:	48 89 d8             	mov    %rbx,%rax
    676f:	48 89 c7             	mov    %rax,%rdi
    6772:	e8 00 00 00 00       	callq  6777 <_ZN6Parser8initSemsEv+0x9b3>
    6777:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    677a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    677e:	48 89 c7             	mov    %rax,%rdi
    6781:	e8 00 00 00 00       	callq  6786 <_ZN6Parser8initSemsEv+0x9c2>
    6786:	48 89 d8             	mov    %rbx,%rax
    6789:	48 89 c7             	mov    %rax,%rdi
    678c:	e8 00 00 00 00       	callq  6791 <_ZN6Parser8initSemsEv+0x9cd>
    6791:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6794:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6798:	48 89 c7             	mov    %rax,%rdi
    679b:	e8 00 00 00 00       	callq  67a0 <_ZN6Parser8initSemsEv+0x9dc>
    67a0:	48 89 d8             	mov    %rbx,%rax
    67a3:	48 89 c7             	mov    %rax,%rdi
    67a6:	e8 00 00 00 00       	callq  67ab <_ZN6Parser8initSemsEv+0x9e7>
    67ab:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    67ae:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67b2:	48 89 c7             	mov    %rax,%rdi
    67b5:	e8 00 00 00 00       	callq  67ba <_ZN6Parser8initSemsEv+0x9f6>
    67ba:	48 89 d8             	mov    %rbx,%rax
    67bd:	48 89 c7             	mov    %rax,%rdi
    67c0:	e8 00 00 00 00       	callq  67c5 <_ZN6Parser8initSemsEv+0xa01>
    67c5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    67c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67cc:	48 89 c7             	mov    %rax,%rdi
    67cf:	e8 00 00 00 00       	callq  67d4 <_ZN6Parser8initSemsEv+0xa10>
    67d4:	48 89 d8             	mov    %rbx,%rax
    67d7:	48 89 c7             	mov    %rax,%rdi
    67da:	e8 00 00 00 00       	callq  67df <_ZN6Parser8initSemsEv+0xa1b>
    67df:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    67e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67e6:	48 89 c7             	mov    %rax,%rdi
    67e9:	e8 00 00 00 00       	callq  67ee <_ZN6Parser8initSemsEv+0xa2a>
    67ee:	48 89 d8             	mov    %rbx,%rax
    67f1:	48 89 c7             	mov    %rax,%rdi
    67f4:	e8 00 00 00 00       	callq  67f9 <_ZN6Parser8initSemsEv+0xa35>
    67f9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    67fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6800:	48 89 c7             	mov    %rax,%rdi
    6803:	e8 00 00 00 00       	callq  6808 <_ZN6Parser8initSemsEv+0xa44>
    6808:	48 89 d8             	mov    %rbx,%rax
    680b:	48 89 c7             	mov    %rax,%rdi
    680e:	e8 00 00 00 00       	callq  6813 <_ZN6Parser8initSemsEv+0xa4f>
    6813:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    6816:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    681a:	48 89 c7             	mov    %rax,%rdi
    681d:	e8 00 00 00 00       	callq  6822 <_ZN6Parser8initSemsEv+0xa5e>
    6822:	48 89 d8             	mov    %rbx,%rax
    6825:	48 89 c7             	mov    %rax,%rdi
    6828:	e8 00 00 00 00       	callq  682d <_ZN6Parser8initSemsEv+0xa69>
    682d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    6830:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6834:	48 89 c7             	mov    %rax,%rdi
    6837:	e8 00 00 00 00       	callq  683c <_ZN6Parser8initSemsEv+0xa78>
    683c:	48 89 d8             	mov    %rbx,%rax
    683f:	48 89 c7             	mov    %rax,%rdi
    6842:	e8 00 00 00 00       	callq  6847 <_ZN6Parser8initSemsEv+0xa83>
    6847:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    684a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    684e:	48 89 c7             	mov    %rax,%rdi
    6851:	e8 00 00 00 00       	callq  6856 <_ZN6Parser8initSemsEv+0xa92>
    6856:	48 89 d8             	mov    %rbx,%rax
    6859:	48 89 c7             	mov    %rax,%rdi
    685c:	e8 00 00 00 00       	callq  6861 <_ZN6Parser8initSemsEv+0xa9d>
    6861:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    6864:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6868:	48 89 c7             	mov    %rax,%rdi
    686b:	e8 00 00 00 00       	callq  6870 <_ZN6Parser8initSemsEv+0xaac>
    6870:	48 89 d8             	mov    %rbx,%rax
    6873:	48 89 c7             	mov    %rax,%rdi
    6876:	e8 00 00 00 00       	callq  687b <_ZN6Parser8initSemsEv+0xab7>
    687b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    687e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6882:	48 89 c7             	mov    %rax,%rdi
    6885:	e8 00 00 00 00       	callq  688a <_ZN6Parser8initSemsEv+0xac6>
    688a:	48 89 d8             	mov    %rbx,%rax
    688d:	48 89 c7             	mov    %rax,%rdi
    6890:	e8 00 00 00 00       	callq  6895 <_ZN6Parser8initSemsEv+0xad1>
    6895:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    6898:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    689c:	48 89 c7             	mov    %rax,%rdi
    689f:	e8 00 00 00 00       	callq  68a4 <_ZN6Parser8initSemsEv+0xae0>
    68a4:	48 89 d8             	mov    %rbx,%rax
    68a7:	48 89 c7             	mov    %rax,%rdi
    68aa:	e8 00 00 00 00       	callq  68af <_ZN6Parser8initSemsEv+0xaeb>
    68af:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    68b2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68b6:	48 89 c7             	mov    %rax,%rdi
    68b9:	e8 00 00 00 00       	callq  68be <_ZN6Parser8initSemsEv+0xafa>
    68be:	48 89 d8             	mov    %rbx,%rax
    68c1:	48 89 c7             	mov    %rax,%rdi
    68c4:	e8 00 00 00 00       	callq  68c9 <_ZN6Parser8initSemsEv+0xb05>
    68c9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    68cc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68d0:	48 89 c7             	mov    %rax,%rdi
    68d3:	e8 00 00 00 00       	callq  68d8 <_ZN6Parser8initSemsEv+0xb14>
    68d8:	48 89 d8             	mov    %rbx,%rax
    68db:	48 89 c7             	mov    %rax,%rdi
    68de:	e8 00 00 00 00       	callq  68e3 <_ZN6Parser8initSemsEv+0xb1f>
    68e3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    68e6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68ea:	48 89 c7             	mov    %rax,%rdi
    68ed:	e8 00 00 00 00       	callq  68f2 <_ZN6Parser8initSemsEv+0xb2e>
    68f2:	48 89 d8             	mov    %rbx,%rax
    68f5:	48 89 c7             	mov    %rax,%rdi
    68f8:	e8 00 00 00 00       	callq  68fd <_ZN6Parser8initSemsEv+0xb39>

}
    68fd:	e8 00 00 00 00       	callq  6902 <_ZN6Parser8initSemsEv+0xb3e>
    6902:	48 83 c4 38          	add    $0x38,%rsp
    6906:	5b                   	pop    %rbx
    6907:	5d                   	pop    %rbp
    6908:	c3                   	retq   
    6909:	90                   	nop

000000000000690a <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    690a:	55                   	push   %rbp
    690b:	48 89 e5             	mov    %rsp,%rbp
    690e:	53                   	push   %rbx
    690f:	48 83 ec 48          	sub    $0x48,%rsp
    6913:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6917:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    691e:	00 00 
    6920:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6924:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    6926:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    692a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6931 <_ZN6Parser10testCase01Ev+0x27>
    6931:	48 89 c7             	mov    %rax,%rdi
    6934:	e8 00 00 00 00       	callq  6939 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    6939:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    693d:	48 89 c7             	mov    %rax,%rdi
    6940:	e8 00 00 00 00       	callq  6945 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    6945:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6949:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    694d:	48 89 d6             	mov    %rdx,%rsi
    6950:	48 89 c7             	mov    %rax,%rdi
    6953:	e8 00 00 00 00       	callq  6958 <_ZN6Parser10testCase01Ev+0x4e>
    6958:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    695c:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    6960:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6964:	48 89 ce             	mov    %rcx,%rsi
    6967:	48 89 c7             	mov    %rax,%rdi
    696a:	e8 00 00 00 00       	callq  696f <_ZN6Parser10testCase01Ev+0x65>
    696f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6973:	48 89 c7             	mov    %rax,%rdi
    6976:	e8 00 00 00 00       	callq  697b <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    697b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    697f:	48 89 c7             	mov    %rax,%rdi
    6982:	e8 00 00 00 00       	callq  6987 <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    6987:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    698b:	48 89 c7             	mov    %rax,%rdi
    698e:	e8 00 00 00 00       	callq  6993 <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6993:	90                   	nop
    6994:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6998:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    699f:	00 00 
    69a1:	74 43                	je     69e6 <_ZN6Parser10testCase01Ev+0xdc>
    69a3:	eb 3c                	jmp    69e1 <_ZN6Parser10testCase01Ev+0xd7>
    69a5:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    69a8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    69ac:	48 89 c7             	mov    %rax,%rdi
    69af:	e8 00 00 00 00       	callq  69b4 <_ZN6Parser10testCase01Ev+0xaa>
    69b4:	eb 03                	jmp    69b9 <_ZN6Parser10testCase01Ev+0xaf>
    69b6:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    69b9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    69bd:	48 89 c7             	mov    %rax,%rdi
    69c0:	e8 00 00 00 00       	callq  69c5 <_ZN6Parser10testCase01Ev+0xbb>
    69c5:	eb 03                	jmp    69ca <_ZN6Parser10testCase01Ev+0xc0>
    69c7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    69ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    69ce:	48 89 c7             	mov    %rax,%rdi
    69d1:	e8 00 00 00 00       	callq  69d6 <_ZN6Parser10testCase01Ev+0xcc>
    69d6:	48 89 d8             	mov    %rbx,%rax
    69d9:	48 89 c7             	mov    %rax,%rdi
    69dc:	e8 00 00 00 00       	callq  69e1 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    69e1:	e8 00 00 00 00       	callq  69e6 <_ZN6Parser10testCase01Ev+0xdc>
    69e6:	48 83 c4 48          	add    $0x48,%rsp
    69ea:	5b                   	pop    %rbx
    69eb:	5d                   	pop    %rbp
    69ec:	c3                   	retq   
    69ed:	90                   	nop

00000000000069ee <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    69ee:	55                   	push   %rbp
    69ef:	48 89 e5             	mov    %rsp,%rbp
    69f2:	53                   	push   %rbx
    69f3:	48 83 ec 48          	sub    $0x48,%rsp
    69f7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    69fb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6a02:	00 00 
    6a04:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6a08:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    6a0a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a0e:	48 83 c0 50          	add    $0x50,%rax
    6a12:	48 89 c7             	mov    %rax,%rdi
    6a15:	e8 00 00 00 00       	callq  6a1a <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    6a1a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a1e:	48 05 90 00 00 00    	add    $0x90,%rax
    6a24:	48 89 c7             	mov    %rax,%rdi
    6a27:	e8 00 00 00 00       	callq  6a2c <_ZN6Parser8HWStoHexEv+0x3e>
    6a2c:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    6a2f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    6a36:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    6a3d:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a40:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    6a43:	0f 8d 2f 01 00 00    	jge    6b78 <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    6a49:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a4d:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6a54:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a57:	89 c6                	mov    %eax,%esi
    6a59:	48 89 d7             	mov    %rdx,%rdi
    6a5c:	e8 00 00 00 00       	callq  6a61 <_ZN6Parser8HWStoHexEv+0x73>
    6a61:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    6a64:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    6a68:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a6c:	ba 10 00 00 00       	mov    $0x10,%edx
    6a71:	89 ce                	mov    %ecx,%esi
    6a73:	48 89 c7             	mov    %rax,%rdi
    6a76:	e8 00 00 00 00       	callq  6a7b <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    6a7b:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a7e:	83 e0 03             	and    $0x3,%eax
    6a81:	85 c0                	test   %eax,%eax
    6a83:	75 17                	jne    6a9c <_ZN6Parser8HWStoHexEv+0xae>
    6a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a89:	48 83 c0 50          	add    $0x50,%rax
    6a8d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a94 <_ZN6Parser8HWStoHexEv+0xa6>
    6a94:	48 89 c7             	mov    %rax,%rdi
    6a97:	e8 00 00 00 00       	callq  6a9c <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    6a9c:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a9f:	83 e0 07             	and    $0x7,%eax
    6aa2:	85 c0                	test   %eax,%eax
    6aa4:	75 17                	jne    6abd <_ZN6Parser8HWStoHexEv+0xcf>
    6aa6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6aaa:	48 83 c0 50          	add    $0x50,%rax
    6aae:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ab5 <_ZN6Parser8HWStoHexEv+0xc7>
    6ab5:	48 89 c7             	mov    %rax,%rdi
    6ab8:	e8 00 00 00 00       	callq  6abd <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    6abd:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6ac0:	83 e0 0f             	and    $0xf,%eax
    6ac3:	85 c0                	test   %eax,%eax
    6ac5:	75 17                	jne    6ade <_ZN6Parser8HWStoHexEv+0xf0>
    6ac7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6acb:	48 83 c0 50          	add    $0x50,%rax
    6acf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ad6 <_ZN6Parser8HWStoHexEv+0xe8>
    6ad6:	48 89 c7             	mov    %rax,%rdi
    6ad9:	e8 00 00 00 00       	callq  6ade <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6ade:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6ae2:	77 17                	ja     6afb <_ZN6Parser8HWStoHexEv+0x10d>
    6ae4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6ae8:	48 83 c0 50          	add    $0x50,%rax
    6aec:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6af3 <_ZN6Parser8HWStoHexEv+0x105>
    6af3:	48 89 c7             	mov    %rax,%rdi
    6af6:	e8 00 00 00 00       	callq  6afb <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6afb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6aff:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6b03:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6b0a <_ZN6Parser8HWStoHexEv+0x11c>
    6b0a:	48 89 ce             	mov    %rcx,%rsi
    6b0d:	48 89 c7             	mov    %rax,%rdi
    6b10:	e8 00 00 00 00       	callq  6b15 <_ZN6Parser8HWStoHexEv+0x127>
    6b15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6b19:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6b1d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6b21:	48 89 c6             	mov    %rax,%rsi
    6b24:	48 89 d7             	mov    %rdx,%rdi
    6b27:	e8 00 00 00 00       	callq  6b2c <_ZN6Parser8HWStoHexEv+0x13e>
    6b2c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6b30:	48 89 c7             	mov    %rax,%rdi
    6b33:	e8 00 00 00 00       	callq  6b38 <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6b38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6b3c:	48 89 c7             	mov    %rax,%rdi
    6b3f:	e8 00 00 00 00       	callq  6b44 <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6b44:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6b48:	e9 f0 fe ff ff       	jmpq   6a3d <_ZN6Parser8HWStoHexEv+0x4f>
    6b4d:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6b50:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6b54:	48 89 c7             	mov    %rax,%rdi
    6b57:	e8 00 00 00 00       	callq  6b5c <_ZN6Parser8HWStoHexEv+0x16e>
    6b5c:	eb 03                	jmp    6b61 <_ZN6Parser8HWStoHexEv+0x173>
    6b5e:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6b61:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6b65:	48 89 c7             	mov    %rax,%rdi
    6b68:	e8 00 00 00 00       	callq  6b6d <_ZN6Parser8HWStoHexEv+0x17f>
    6b6d:	48 89 d8             	mov    %rbx,%rax
    6b70:	48 89 c7             	mov    %rax,%rdi
    6b73:	e8 00 00 00 00       	callq  6b78 <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6b78:	90                   	nop
    6b79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6b7d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6b84:	00 00 
    6b86:	74 05                	je     6b8d <_ZN6Parser8HWStoHexEv+0x19f>
    6b88:	e8 00 00 00 00       	callq  6b8d <_ZN6Parser8HWStoHexEv+0x19f>
    6b8d:	48 83 c4 48          	add    $0x48,%rsp
    6b91:	5b                   	pop    %rbx
    6b92:	5d                   	pop    %rbp
    6b93:	c3                   	retq   

0000000000006b94 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6b94:	55                   	push   %rbp
    6b95:	48 89 e5             	mov    %rsp,%rbp
    6b98:	53                   	push   %rbx
    6b99:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6ba0:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6ba7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6bae:	00 00 
    6bb0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6bb4:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6bb6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bbd:	48 89 c7             	mov    %rax,%rdi
    6bc0:	e8 00 00 00 00       	callq  6bc5 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6bc5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6bcc:	48 89 c7             	mov    %rax,%rdi
    6bcf:	e8 00 00 00 00       	callq  6bd4 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6bd4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6bdb:	48 89 c7             	mov    %rax,%rdi
    6bde:	e8 00 00 00 00       	callq  6be3 <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6be3:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6bea:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6bf1:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6bf8:	00 00 

    QStringList hwsModules;
    6bfa:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6c01:	48 89 c7             	mov    %rax,%rdi
    6c04:	e8 00 00 00 00       	callq  6c09 <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6c09:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c10:	48 05 88 00 00 00    	add    $0x88,%rax
    6c16:	48 89 c7             	mov    %rax,%rdi
    6c19:	e8 00 00 00 00       	callq  6c1e <_ZN6Parser10compileHWSEv+0x8a>
    6c1e:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6c25:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c2c:	48 05 88 00 00 00    	add    $0x88,%rax
    6c32:	48 89 c7             	mov    %rax,%rdi
    6c35:	e8 00 00 00 00       	callq  6c3a <_ZN6Parser10compileHWSEv+0xa6>
    6c3a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6c41:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6c48:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6c4f:	48 89 d6             	mov    %rdx,%rsi
    6c52:	48 89 c7             	mov    %rax,%rdi
    6c55:	e8 00 00 00 00       	callq  6c5a <_ZN6Parser10compileHWSEv+0xc6>
    6c5a:	84 c0                	test   %al,%al
    6c5c:	0f 84 e6 07 00 00    	je     7448 <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    6c62:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6c69:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c70:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6c77:	89 c6                	mov    %eax,%esi
    6c79:	48 89 d7             	mov    %rdx,%rdi
    6c7c:	e8 00 00 00 00       	callq  6c81 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6c81:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6c88:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c8f:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6c96:	89 c6                	mov    %eax,%esi
    6c98:	48 89 d7             	mov    %rdx,%rdi
    6c9b:	e8 00 00 00 00       	callq  6ca0 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6ca0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6ca7:	48 89 c7             	mov    %rax,%rdi
    6caa:	e8 00 00 00 00       	callq  6caf <_ZN6Parser10compileHWSEv+0x11b>
    6caf:	48 89 c2             	mov    %rax,%rdx
    6cb2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6cb9:	48 89 d6             	mov    %rdx,%rsi
    6cbc:	48 89 c7             	mov    %rax,%rdi
    6cbf:	e8 00 00 00 00       	callq  6cc4 <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6cc4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6ccb:	48 89 c7             	mov    %rax,%rdi
    6cce:	e8 00 00 00 00       	callq  6cd3 <_ZN6Parser10compileHWSEv+0x13f>
    6cd3:	48 89 c2             	mov    %rax,%rdx
    6cd6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6cdd:	48 89 d6             	mov    %rdx,%rsi
    6ce0:	48 89 c7             	mov    %rax,%rdi
    6ce3:	e8 00 00 00 00       	callq  6ce8 <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6ce8:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6cef:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6cf1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cf8:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6cfc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6d03:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6d0a:	48 89 ce             	mov    %rcx,%rsi
    6d0d:	48 89 c7             	mov    %rax,%rdi
    6d10:	e8 00 00 00 00       	callq  6d15 <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6d15:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6d1c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6d23:	ba 10 00 00 00       	mov    $0x10,%edx
    6d28:	48 89 ce             	mov    %rcx,%rsi
    6d2b:	48 89 c7             	mov    %rax,%rdi
    6d2e:	e8 00 00 00 00       	callq  6d33 <_ZN6Parser10compileHWSEv+0x19f>
    6d33:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6d3a:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6d41:	0f be c0             	movsbl %al,%eax
    6d44:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6d4b:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6d52:	89 c6                	mov    %eax,%esi
    6d54:	48 89 d7             	mov    %rdx,%rdi
    6d57:	e8 00 00 00 00       	callq  6d5c <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6d5c:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6d63:	66 c1 e8 08          	shr    $0x8,%ax
    6d67:	0f be c0             	movsbl %al,%eax
    6d6a:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6d71:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6d78:	89 c6                	mov    %eax,%esi
    6d7a:	48 89 d7             	mov    %rdx,%rdi
    6d7d:	e8 00 00 00 00       	callq  6d82 <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6d82:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d89:	48 05 90 00 00 00    	add    $0x90,%rax
    6d8f:	48 89 c7             	mov    %rax,%rdi
    6d92:	e8 00 00 00 00       	callq  6d97 <_ZN6Parser10compileHWSEv+0x203>
    6d97:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6d9d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6da4:	48 05 90 00 00 00    	add    $0x90,%rax
    6daa:	48 89 c7             	mov    %rax,%rdi
    6dad:	e8 00 00 00 00       	callq  6db2 <_ZN6Parser10compileHWSEv+0x21e>
    6db2:	83 c0 02             	add    $0x2,%eax
    6db5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6dbb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6dc2:	48 05 90 00 00 00    	add    $0x90,%rax
    6dc8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6dcf <_ZN6Parser10compileHWSEv+0x23b>
    6dcf:	48 89 c7             	mov    %rax,%rdi
    6dd2:	e8 00 00 00 00       	callq  6dd7 <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6dd7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6dde:	48 89 c7             	mov    %rax,%rdi
    6de1:	e8 00 00 00 00       	callq  6de6 <_ZN6Parser10compileHWSEv+0x252>
    6de6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6dec:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6df0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6df7 <_ZN6Parser10compileHWSEv+0x263>
    6df7:	48 89 c7             	mov    %rax,%rdi
    6dfa:	e8 00 00 00 00       	callq  6dff <_ZN6Parser10compileHWSEv+0x26b>
    6dff:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6e03:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e0a:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e0f:	ba 01 00 00 00       	mov    $0x1,%edx
    6e14:	48 89 c7             	mov    %rax,%rdi
    6e17:	e8 00 00 00 00       	callq  6e1c <_ZN6Parser10compileHWSEv+0x288>
    6e1c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e20:	48 89 c7             	mov    %rax,%rdi
    6e23:	e8 00 00 00 00       	callq  6e28 <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6e28:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e2c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6e33 <_ZN6Parser10compileHWSEv+0x29f>
    6e33:	48 89 c7             	mov    %rax,%rdi
    6e36:	e8 00 00 00 00       	callq  6e3b <_ZN6Parser10compileHWSEv+0x2a7>
    6e3b:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6e3f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e46:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e4b:	ba 01 00 00 00       	mov    $0x1,%edx
    6e50:	48 89 c7             	mov    %rax,%rdi
    6e53:	e8 00 00 00 00       	callq  6e58 <_ZN6Parser10compileHWSEv+0x2c4>
    6e58:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e5c:	48 89 c7             	mov    %rax,%rdi
    6e5f:	e8 00 00 00 00       	callq  6e64 <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6e64:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6e6b:	48 89 c7             	mov    %rax,%rdi
    6e6e:	e8 00 00 00 00       	callq  6e73 <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6e73:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6e7a:	00 00 00 
    6e7d:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6e83:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6e89:	0f 8d 65 04 00 00    	jge    72f4 <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6e8f:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6e95:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6e9c:	89 d6                	mov    %edx,%esi
    6e9e:	48 89 c7             	mov    %rax,%rdi
    6ea1:	e8 00 00 00 00       	callq  6ea6 <_ZN6Parser10compileHWSEv+0x312>
    6ea6:	48 89 c2             	mov    %rax,%rdx
    6ea9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6eb0:	48 89 d6             	mov    %rdx,%rsi
    6eb3:	48 89 c7             	mov    %rax,%rdi
    6eb6:	e8 00 00 00 00       	callq  6ebb <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6ebb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ec2:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6ec6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6ecd:	48 89 c6             	mov    %rax,%rsi
    6ed0:	48 89 d7             	mov    %rdx,%rdi
    6ed3:	e8 00 00 00 00       	callq  6ed8 <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    6ed8:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6edf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6ee6:	b9 00 00 00 00       	mov    $0x0,%ecx
    6eeb:	ba 00 00 00 00       	mov    $0x0,%edx
    6ef0:	48 89 c7             	mov    %rax,%rdi
    6ef3:	e8 00 00 00 00       	callq  6ef8 <_ZN6Parser10compileHWSEv+0x364>
    6ef8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6efe:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6f05:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6f0c:	b9 00 00 00 00       	mov    $0x0,%ecx
    6f11:	ba 00 00 00 00       	mov    $0x0,%edx
    6f16:	48 89 c7             	mov    %rax,%rdi
    6f19:	e8 00 00 00 00       	callq  6f1e <_ZN6Parser10compileHWSEv+0x38a>
    6f1e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6f24:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6f28:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6f2f:	48 89 d6             	mov    %rdx,%rsi
    6f32:	48 89 c7             	mov    %rax,%rdi
    6f35:	e8 00 00 00 00       	callq  6f3a <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    6f3a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6f3e:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6f45:	48 89 d6             	mov    %rdx,%rsi
    6f48:	48 89 c7             	mov    %rax,%rdi
    6f4b:	e8 00 00 00 00       	callq  6f50 <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    6f50:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6f57:	0f 8e 3e 01 00 00    	jle    709b <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6f5d:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6f64:	83 c0 01             	add    $0x1,%eax
    6f67:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6f6e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f72:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6f79 <_ZN6Parser10compileHWSEv+0x3e5>
    6f79:	48 89 c7             	mov    %rax,%rdi
    6f7c:	e8 00 00 00 00       	callq  6f81 <_ZN6Parser10compileHWSEv+0x3ed>
    6f81:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f88:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6f8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f90:	48 89 c6             	mov    %rax,%rsi
    6f93:	48 89 d7             	mov    %rdx,%rdi
    6f96:	e8 00 00 00 00       	callq  6f9b <_ZN6Parser10compileHWSEv+0x407>
    6f9b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6f9f:	48 89 c7             	mov    %rax,%rdi
    6fa2:	e8 00 00 00 00       	callq  6fa7 <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    6fa7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6fab:	be 01 00 00 00       	mov    $0x1,%esi
    6fb0:	48 89 c7             	mov    %rax,%rdi
    6fb3:	e8 00 00 00 00       	callq  6fb8 <_ZN6Parser10compileHWSEv+0x424>
    6fb8:	48 89 c2             	mov    %rax,%rdx
    6fbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbf:	48 89 d6             	mov    %rdx,%rsi
    6fc2:	48 89 c7             	mov    %rax,%rdi
    6fc5:	e8 00 00 00 00       	callq  6fca <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6fca:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6fd1:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6fd5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6fd9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6fdd:	48 89 ce             	mov    %rcx,%rsi
    6fe0:	48 89 c7             	mov    %rax,%rdi
    6fe3:	e8 00 00 00 00       	callq  6fe8 <_ZN6Parser10compileHWSEv+0x454>
    6fe8:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6fec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6ff0:	ba 10 00 00 00       	mov    $0x10,%edx
    6ff5:	48 89 ce             	mov    %rcx,%rsi
    6ff8:	48 89 c7             	mov    %rax,%rdi
    6ffb:	e8 00 00 00 00       	callq  7000 <_ZN6Parser10compileHWSEv+0x46c>
    7000:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    7007:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    700b:	48 89 c7             	mov    %rax,%rdi
    700e:	e8 00 00 00 00       	callq  7013 <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    7013:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    701a:	48 05 90 00 00 00    	add    $0x90,%rax
    7020:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7025:	48 89 c7             	mov    %rax,%rdi
    7028:	e8 00 00 00 00       	callq  702d <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    702d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7034:	48 05 90 00 00 00    	add    $0x90,%rax
    703a:	be ff ff ff ff       	mov    $0xffffffff,%esi
    703f:	48 89 c7             	mov    %rax,%rdi
    7042:	e8 00 00 00 00       	callq  7047 <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    7047:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    704e:	0f be c0             	movsbl %al,%eax
    7051:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7058:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    705f:	89 c6                	mov    %eax,%esi
    7061:	48 89 d7             	mov    %rdx,%rdi
    7064:	e8 00 00 00 00       	callq  7069 <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    7069:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    7070:	66 c1 e8 08          	shr    $0x8,%ax
    7074:	0f be c0             	movsbl %al,%eax
    7077:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    707e:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7085:	89 c6                	mov    %eax,%esi
    7087:	48 89 d7             	mov    %rdx,%rdi
    708a:	e8 00 00 00 00       	callq  708f <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    708f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7093:	48 89 c7             	mov    %rax,%rdi
    7096:	e8 00 00 00 00       	callq  709b <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    709b:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    70a2:	0f 8e 28 02 00 00    	jle    72d0 <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    70a8:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    70af:	83 c0 01             	add    $0x1,%eax
    70b2:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    70b9:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    70c0:	83 c0 01             	add    $0x1,%eax
    70c3:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    70ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70ce:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 70d5 <_ZN6Parser10compileHWSEv+0x541>
    70d5:	48 89 c7             	mov    %rax,%rdi
    70d8:	e8 00 00 00 00       	callq  70dd <_ZN6Parser10compileHWSEv+0x549>
    70dd:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    70e4:	48 8d 50 68          	lea    0x68(%rax),%rdx
    70e8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70ec:	48 89 c6             	mov    %rax,%rsi
    70ef:	48 89 d7             	mov    %rdx,%rdi
    70f2:	e8 00 00 00 00       	callq  70f7 <_ZN6Parser10compileHWSEv+0x563>
    70f7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70fb:	48 89 c7             	mov    %rax,%rdi
    70fe:	e8 00 00 00 00       	callq  7103 <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    7103:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7107:	be 01 00 00 00       	mov    $0x1,%esi
    710c:	48 89 c7             	mov    %rax,%rdi
    710f:	e8 00 00 00 00       	callq  7114 <_ZN6Parser10compileHWSEv+0x580>
    7114:	48 89 c2             	mov    %rax,%rdx
    7117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    711b:	48 89 d6             	mov    %rdx,%rsi
    711e:	48 89 c7             	mov    %rax,%rdi
    7121:	e8 00 00 00 00       	callq  7126 <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    7126:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    712a:	be 02 00 00 00       	mov    $0x2,%esi
    712f:	48 89 c7             	mov    %rax,%rdi
    7132:	e8 00 00 00 00       	callq  7137 <_ZN6Parser10compileHWSEv+0x5a3>
    7137:	48 89 c2             	mov    %rax,%rdx
    713a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    713e:	48 89 d6             	mov    %rdx,%rsi
    7141:	48 89 c7             	mov    %rax,%rdi
    7144:	e8 00 00 00 00       	callq  7149 <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    7149:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    7150:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7157:	48 8d 48 28          	lea    0x28(%rax),%rcx
    715b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    715f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7163:	48 89 ce             	mov    %rcx,%rsi
    7166:	48 89 c7             	mov    %rax,%rdi
    7169:	e8 00 00 00 00       	callq  716e <_ZN6Parser10compileHWSEv+0x5da>
    716e:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    7172:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7176:	ba 10 00 00 00       	mov    $0x10,%edx
    717b:	48 89 ce             	mov    %rcx,%rsi
    717e:	48 89 c7             	mov    %rax,%rdi
    7181:	e8 00 00 00 00       	callq  7186 <_ZN6Parser10compileHWSEv+0x5f2>
    7186:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    718c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7190:	48 89 c7             	mov    %rax,%rdi
    7193:	e8 00 00 00 00       	callq  7198 <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    7198:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    719c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    71a0:	ba 0a 00 00 00       	mov    $0xa,%edx
    71a5:	48 89 ce             	mov    %rcx,%rsi
    71a8:	48 89 c7             	mov    %rax,%rdi
    71ab:	e8 00 00 00 00       	callq  71b0 <_ZN6Parser10compileHWSEv+0x61c>
    71b0:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    71b7:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    71bb:	84 c0                	test   %al,%al
    71bd:	74 6d                	je     722c <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    71bf:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    71c3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    71ca:	ba 00 00 00 00       	mov    $0x0,%edx
    71cf:	48 89 ce             	mov    %rcx,%rsi
    71d2:	48 89 c7             	mov    %rax,%rdi
    71d5:	e8 00 00 00 00       	callq  71da <_ZN6Parser10compileHWSEv+0x646>
    71da:	83 f0 01             	xor    $0x1,%eax
    71dd:	84 c0                	test   %al,%al
    71df:	74 2a                	je     720b <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    71e1:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    71e5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    71ec:	48 89 d6             	mov    %rdx,%rsi
    71ef:	48 89 c7             	mov    %rax,%rdi
    71f2:	e8 00 00 00 00       	callq  71f7 <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    71f7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    71fe:	48 89 c7             	mov    %rax,%rdi
    7201:	e8 00 00 00 00       	callq  7206 <_ZN6Parser10compileHWSEv+0x672>
    7206:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    720b:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    720f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7216:	ba 00 00 00 00       	mov    $0x0,%edx
    721b:	48 89 ce             	mov    %rcx,%rsi
    721e:	48 89 c7             	mov    %rax,%rdi
    7221:	e8 00 00 00 00       	callq  7226 <_ZN6Parser10compileHWSEv+0x692>
    7226:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    722c:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    7233:	0f be c0             	movsbl %al,%eax
    7236:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    723d:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7244:	89 c6                	mov    %eax,%esi
    7246:	48 89 d7             	mov    %rdx,%rdi
    7249:	e8 00 00 00 00       	callq  724e <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    724e:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    7255:	0f be c0             	movsbl %al,%eax
    7258:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    725f:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7266:	89 c6                	mov    %eax,%esi
    7268:	48 89 d7             	mov    %rdx,%rdi
    726b:	e8 00 00 00 00       	callq  7270 <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    7270:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    7277:	0f be c0             	movsbl %al,%eax
    727a:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7281:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7288:	89 c6                	mov    %eax,%esi
    728a:	48 89 d7             	mov    %rdx,%rdi
    728d:	e8 00 00 00 00       	callq  7292 <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    7292:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    7299:	66 c1 e8 08          	shr    $0x8,%ax
    729d:	0f be c0             	movsbl %al,%eax
    72a0:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    72a7:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    72ae:	89 c6                	mov    %eax,%esi
    72b0:	48 89 d7             	mov    %rdx,%rdi
    72b3:	e8 00 00 00 00       	callq  72b8 <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    72b8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    72bc:	48 89 c7             	mov    %rax,%rdi
    72bf:	e8 00 00 00 00       	callq  72c4 <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    72c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    72c8:	48 89 c7             	mov    %rax,%rdi
    72cb:	e8 00 00 00 00       	callq  72d0 <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    72d0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    72d4:	48 89 c7             	mov    %rax,%rdi
    72d7:	e8 00 00 00 00       	callq  72dc <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    72dc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    72e0:	48 89 c7             	mov    %rax,%rdi
    72e3:	e8 00 00 00 00       	callq  72e8 <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    72e8:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    72ef:	e9 89 fb ff ff       	jmpq   6e7d <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    72f4:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72fb:	0f be d8             	movsbl %al,%ebx
    72fe:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7305:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    730c:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7312:	89 c6                	mov    %eax,%esi
    7314:	48 89 d7             	mov    %rdx,%rdi
    7317:	e8 00 00 00 00       	callq  731c <_ZN6Parser10compileHWSEv+0x788>
    731c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7320:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7324:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7328:	89 de                	mov    %ebx,%esi
    732a:	48 89 c7             	mov    %rax,%rdi
    732d:	e8 00 00 00 00       	callq  7332 <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    7332:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7339:	66 c1 e8 08          	shr    $0x8,%ax
    733d:	0f be d8             	movsbl %al,%ebx
    7340:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7346:	8d 50 01             	lea    0x1(%rax),%edx
    7349:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7350:	48 05 90 00 00 00    	add    $0x90,%rax
    7356:	89 d6                	mov    %edx,%esi
    7358:	48 89 c7             	mov    %rax,%rdi
    735b:	e8 00 00 00 00       	callq  7360 <_ZN6Parser10compileHWSEv+0x7cc>
    7360:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7364:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7368:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    736c:	89 de                	mov    %ebx,%esi
    736e:	48 89 c7             	mov    %rax,%rdi
    7371:	e8 00 00 00 00       	callq  7376 <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    7376:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    737d:	0f be d8             	movsbl %al,%ebx
    7380:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7387:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    738e:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    7394:	89 c6                	mov    %eax,%esi
    7396:	48 89 d7             	mov    %rdx,%rdi
    7399:	e8 00 00 00 00       	callq  739e <_ZN6Parser10compileHWSEv+0x80a>
    739e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73a2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73a6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73aa:	89 de                	mov    %ebx,%esi
    73ac:	48 89 c7             	mov    %rax,%rdi
    73af:	e8 00 00 00 00       	callq  73b4 <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    73b4:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    73bb:	66 c1 e8 08          	shr    $0x8,%ax
    73bf:	0f be d8             	movsbl %al,%ebx
    73c2:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    73c8:	8d 50 01             	lea    0x1(%rax),%edx
    73cb:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73d2:	48 05 90 00 00 00    	add    $0x90,%rax
    73d8:	89 d6                	mov    %edx,%esi
    73da:	48 89 c7             	mov    %rax,%rdi
    73dd:	e8 00 00 00 00       	callq  73e2 <_ZN6Parser10compileHWSEv+0x84e>
    73e2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73e6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73ee:	89 de                	mov    %ebx,%esi
    73f0:	48 89 c7             	mov    %rax,%rdi
    73f3:	e8 00 00 00 00       	callq  73f8 <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    73f8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    73ff:	48 89 c7             	mov    %rax,%rdi
    7402:	e8 00 00 00 00       	callq  7407 <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7407:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    740e:	48 89 c7             	mov    %rax,%rdi
    7411:	e8 00 00 00 00       	callq  7416 <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7416:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    741d:	48 89 c7             	mov    %rax,%rdi
    7420:	e8 00 00 00 00       	callq  7425 <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7425:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    742c:	48 89 c7             	mov    %rax,%rdi
    742f:	e8 00 00 00 00       	callq  7434 <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    7434:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    743b:	48 89 c7             	mov    %rax,%rdi
    743e:	e8 00 00 00 00       	callq  7443 <_ZN6Parser10compileHWSEv+0x8af>
    7443:	e9 dd f7 ff ff       	jmpq   6c25 <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7448:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    744f:	0f be d8             	movsbl %al,%ebx
    7452:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7459:	48 05 90 00 00 00    	add    $0x90,%rax
    745f:	be 04 00 00 00       	mov    $0x4,%esi
    7464:	48 89 c7             	mov    %rax,%rdi
    7467:	e8 00 00 00 00       	callq  746c <_ZN6Parser10compileHWSEv+0x8d8>
    746c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7470:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7474:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7478:	89 de                	mov    %ebx,%esi
    747a:	48 89 c7             	mov    %rax,%rdi
    747d:	e8 00 00 00 00       	callq  7482 <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    7482:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    7489:	66 c1 e8 08          	shr    $0x8,%ax
    748d:	0f be d8             	movsbl %al,%ebx
    7490:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7497:	48 05 90 00 00 00    	add    $0x90,%rax
    749d:	be 05 00 00 00       	mov    $0x5,%esi
    74a2:	48 89 c7             	mov    %rax,%rdi
    74a5:	e8 00 00 00 00       	callq  74aa <_ZN6Parser10compileHWSEv+0x916>
    74aa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    74ae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    74b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74b6:	89 de                	mov    %ebx,%esi
    74b8:	48 89 c7             	mov    %rax,%rdi
    74bb:	e8 00 00 00 00       	callq  74c0 <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    74c0:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    74c7:	48 89 c7             	mov    %rax,%rdi
    74ca:	e8 00 00 00 00       	callq  74cf <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    74cf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    74d6:	48 89 c7             	mov    %rax,%rdi
    74d9:	e8 00 00 00 00       	callq  74de <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    74de:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    74e5:	48 89 c7             	mov    %rax,%rdi
    74e8:	e8 00 00 00 00       	callq  74ed <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    74ed:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    74f4:	48 89 c7             	mov    %rax,%rdi
    74f7:	e8 00 00 00 00       	callq  74fc <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    74fc:	90                   	nop
    74fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7501:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7508:	00 00 
    750a:	0f 84 8e 01 00 00    	je     769e <_ZN6Parser10compileHWSEv+0xb0a>
    7510:	e9 84 01 00 00       	jmpq   7699 <_ZN6Parser10compileHWSEv+0xb05>
    7515:	48 89 c3             	mov    %rax,%rbx
    7518:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    751c:	48 89 c7             	mov    %rax,%rdi
    751f:	e8 00 00 00 00       	callq  7524 <_ZN6Parser10compileHWSEv+0x990>
    7524:	e9 1a 01 00 00       	jmpq   7643 <_ZN6Parser10compileHWSEv+0xaaf>
    7529:	48 89 c3             	mov    %rax,%rbx
    752c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7533:	48 89 c7             	mov    %rax,%rdi
    7536:	e8 00 00 00 00       	callq  753b <_ZN6Parser10compileHWSEv+0x9a7>
    753b:	e9 03 01 00 00       	jmpq   7643 <_ZN6Parser10compileHWSEv+0xaaf>
    7540:	48 89 c3             	mov    %rax,%rbx
    7543:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7547:	48 89 c7             	mov    %rax,%rdi
    754a:	e8 00 00 00 00       	callq  754f <_ZN6Parser10compileHWSEv+0x9bb>
    754f:	e9 db 00 00 00       	jmpq   762f <_ZN6Parser10compileHWSEv+0xa9b>
    7554:	48 89 c3             	mov    %rax,%rbx
    7557:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    755e:	48 89 c7             	mov    %rax,%rdi
    7561:	e8 00 00 00 00       	callq  7566 <_ZN6Parser10compileHWSEv+0x9d2>
    7566:	e9 c4 00 00 00       	jmpq   762f <_ZN6Parser10compileHWSEv+0xa9b>
    756b:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    756e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7572:	48 89 c7             	mov    %rax,%rdi
    7575:	e8 00 00 00 00       	callq  757a <_ZN6Parser10compileHWSEv+0x9e6>
    757a:	eb 69                	jmp    75e5 <_ZN6Parser10compileHWSEv+0xa51>
    757c:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    757f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7583:	48 89 c7             	mov    %rax,%rdi
    7586:	e8 00 00 00 00       	callq  758b <_ZN6Parser10compileHWSEv+0x9f7>
    758b:	eb 03                	jmp    7590 <_ZN6Parser10compileHWSEv+0x9fc>
    758d:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    7590:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7594:	48 89 c7             	mov    %rax,%rdi
    7597:	e8 00 00 00 00       	callq  759c <_ZN6Parser10compileHWSEv+0xa08>
    759c:	eb 47                	jmp    75e5 <_ZN6Parser10compileHWSEv+0xa51>
    759e:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    75a1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    75a5:	48 89 c7             	mov    %rax,%rdi
    75a8:	e8 00 00 00 00       	callq  75ad <_ZN6Parser10compileHWSEv+0xa19>
    75ad:	eb 36                	jmp    75e5 <_ZN6Parser10compileHWSEv+0xa51>
    75af:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    75b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    75b6:	48 89 c7             	mov    %rax,%rdi
    75b9:	e8 00 00 00 00       	callq  75be <_ZN6Parser10compileHWSEv+0xa2a>
    75be:	eb 03                	jmp    75c3 <_ZN6Parser10compileHWSEv+0xa2f>
    75c0:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    75c3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    75c7:	48 89 c7             	mov    %rax,%rdi
    75ca:	e8 00 00 00 00       	callq  75cf <_ZN6Parser10compileHWSEv+0xa3b>
    75cf:	eb 03                	jmp    75d4 <_ZN6Parser10compileHWSEv+0xa40>
    75d1:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    75d4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    75d8:	48 89 c7             	mov    %rax,%rdi
    75db:	e8 00 00 00 00       	callq  75e0 <_ZN6Parser10compileHWSEv+0xa4c>
    75e0:	eb 03                	jmp    75e5 <_ZN6Parser10compileHWSEv+0xa51>
    75e2:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    75e5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    75e9:	48 89 c7             	mov    %rax,%rdi
    75ec:	e8 00 00 00 00       	callq  75f1 <_ZN6Parser10compileHWSEv+0xa5d>
    75f1:	eb 03                	jmp    75f6 <_ZN6Parser10compileHWSEv+0xa62>
    75f3:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    75f6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    75fa:	48 89 c7             	mov    %rax,%rdi
    75fd:	e8 00 00 00 00       	callq  7602 <_ZN6Parser10compileHWSEv+0xa6e>
    7602:	eb 03                	jmp    7607 <_ZN6Parser10compileHWSEv+0xa73>
    7604:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7607:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    760e:	48 89 c7             	mov    %rax,%rdi
    7611:	e8 00 00 00 00       	callq  7616 <_ZN6Parser10compileHWSEv+0xa82>
    7616:	eb 03                	jmp    761b <_ZN6Parser10compileHWSEv+0xa87>
    7618:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    761b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7622:	48 89 c7             	mov    %rax,%rdi
    7625:	e8 00 00 00 00       	callq  762a <_ZN6Parser10compileHWSEv+0xa96>
    762a:	eb 03                	jmp    762f <_ZN6Parser10compileHWSEv+0xa9b>
    762c:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    762f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7636:	48 89 c7             	mov    %rax,%rdi
    7639:	e8 00 00 00 00       	callq  763e <_ZN6Parser10compileHWSEv+0xaaa>
    763e:	eb 03                	jmp    7643 <_ZN6Parser10compileHWSEv+0xaaf>
    7640:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7643:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    764a:	48 89 c7             	mov    %rax,%rdi
    764d:	e8 00 00 00 00       	callq  7652 <_ZN6Parser10compileHWSEv+0xabe>
    7652:	eb 03                	jmp    7657 <_ZN6Parser10compileHWSEv+0xac3>
    7654:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    7657:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    765e:	48 89 c7             	mov    %rax,%rdi
    7661:	e8 00 00 00 00       	callq  7666 <_ZN6Parser10compileHWSEv+0xad2>
    7666:	eb 03                	jmp    766b <_ZN6Parser10compileHWSEv+0xad7>
    7668:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    766b:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 00 00 00 00       	callq  767a <_ZN6Parser10compileHWSEv+0xae6>
    767a:	eb 03                	jmp    767f <_ZN6Parser10compileHWSEv+0xaeb>
    767c:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    767f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    7686:	48 89 c7             	mov    %rax,%rdi
    7689:	e8 00 00 00 00       	callq  768e <_ZN6Parser10compileHWSEv+0xafa>
    768e:	48 89 d8             	mov    %rbx,%rax
    7691:	48 89 c7             	mov    %rax,%rdi
    7694:	e8 00 00 00 00       	callq  7699 <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7699:	e8 00 00 00 00       	callq  769e <_ZN6Parser10compileHWSEv+0xb0a>
    769e:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    76a5:	5b                   	pop    %rbx
    76a6:	5d                   	pop    %rbp
    76a7:	c3                   	retq   

00000000000076a8 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    76a8:	55                   	push   %rbp
    76a9:	48 89 e5             	mov    %rsp,%rbp
    76ac:	53                   	push   %rbx
    76ad:	48 83 ec 58          	sub    $0x58,%rsp
    76b1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    76b5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    76bc:	00 00 
    76be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    76c2:	31 c0                	xor    %eax,%eax

    int i = 0;
    76c4:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    76cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    76cf:	48 83 c0 78          	add    $0x78,%rax
    76d3:	48 89 c7             	mov    %rax,%rdi
    76d6:	e8 00 00 00 00       	callq  76db <_ZN6Parser9selectHWSEv+0x33>
    76db:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    76de:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76e2:	48 89 c7             	mov    %rax,%rdi
    76e5:	e8 00 00 00 00       	callq  76ea <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    76ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76ee:	48 89 c7             	mov    %rax,%rdi
    76f1:	e8 00 00 00 00       	callq  76f6 <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    76f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    76fa:	48 83 c0 78          	add    $0x78,%rax
    76fe:	48 89 c7             	mov    %rax,%rdi
    7701:	e8 00 00 00 00       	callq  7706 <_ZN6Parser9selectHWSEv+0x5e>
    7706:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    770a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    770e:	48 83 c0 78          	add    $0x78,%rax
    7712:	48 89 c7             	mov    %rax,%rdi
    7715:	e8 00 00 00 00       	callq  771a <_ZN6Parser9selectHWSEv+0x72>
    771a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    771e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7722:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7726:	48 89 d6             	mov    %rdx,%rsi
    7729:	48 89 c7             	mov    %rax,%rdi
    772c:	e8 00 00 00 00       	callq  7731 <_ZN6Parser9selectHWSEv+0x89>
    7731:	84 c0                	test   %al,%al
    7733:	74 50                	je     7785 <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    7735:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7739:	48 89 c7             	mov    %rax,%rdi
    773c:	e8 00 00 00 00       	callq  7741 <_ZN6Parser9selectHWSEv+0x99>
    7741:	be 00 00 00 00       	mov    $0x0,%esi
    7746:	48 89 c7             	mov    %rax,%rdi
    7749:	e8 00 00 00 00       	callq  774e <_ZN6Parser9selectHWSEv+0xa6>
    774e:	48 89 c2             	mov    %rax,%rdx
    7751:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7755:	48 89 d6             	mov    %rdx,%rsi
    7758:	48 89 c7             	mov    %rax,%rdi
    775b:	e8 00 00 00 00       	callq  7760 <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    7760:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7764:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7768:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    776c:	48 89 c6             	mov    %rax,%rsi
    776f:	48 89 d7             	mov    %rdx,%rdi
    7772:	e8 00 00 00 00       	callq  7777 <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    7777:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    777b:	48 89 c7             	mov    %rax,%rdi
    777e:	e8 00 00 00 00       	callq  7783 <_ZN6Parser9selectHWSEv+0xdb>
    7783:	eb 85                	jmp    770a <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    7785:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    778c:	8b 45 b8             	mov    -0x48(%rbp),%eax
    778f:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    7792:	7d 06                	jge    779a <_ZN6Parser9selectHWSEv+0xf2>
    7794:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    7798:	eb f2                	jmp    778c <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    779a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    779e:	48 89 c7             	mov    %rax,%rdi
    77a1:	e8 00 00 00 00       	callq  77a6 <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    77a6:	90                   	nop
    77a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    77ab:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    77b2:	00 00 
    77b4:	74 21                	je     77d7 <_ZN6Parser9selectHWSEv+0x12f>
    77b6:	eb 1a                	jmp    77d2 <_ZN6Parser9selectHWSEv+0x12a>
    77b8:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    77bb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77bf:	48 89 c7             	mov    %rax,%rdi
    77c2:	e8 00 00 00 00       	callq  77c7 <_ZN6Parser9selectHWSEv+0x11f>
    77c7:	48 89 d8             	mov    %rbx,%rax
    77ca:	48 89 c7             	mov    %rax,%rdi
    77cd:	e8 00 00 00 00       	callq  77d2 <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    77d2:	e8 00 00 00 00       	callq  77d7 <_ZN6Parser9selectHWSEv+0x12f>
    77d7:	48 83 c4 58          	add    $0x58,%rsp
    77db:	5b                   	pop    %rbx
    77dc:	5d                   	pop    %rbp
    77dd:	c3                   	retq   

00000000000077de <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    77de:	55                   	push   %rbp
    77df:	48 89 e5             	mov    %rsp,%rbp
    77e2:	53                   	push   %rbx
    77e3:	48 83 ec 68          	sub    $0x68,%rsp
    77e7:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    77eb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    77f2:	00 00 
    77f4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    77f8:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    77fa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77fe:	48 89 c7             	mov    %rax,%rdi
    7801:	e8 00 00 00 00       	callq  7806 <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7806:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    780a:	48 8d 50 58          	lea    0x58(%rax),%rdx
    780e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7812:	48 89 d6             	mov    %rdx,%rsi
    7815:	48 89 c7             	mov    %rax,%rdi
    7818:	e8 00 00 00 00       	callq  781d <_ZN6Parser12loadIncludesEv+0x3f>
    781d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7821:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7825:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7829:	48 8d 50 58          	lea    0x58(%rax),%rdx
    782d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7831:	48 89 d6             	mov    %rdx,%rsi
    7834:	48 89 c7             	mov    %rax,%rdi
    7837:	e8 00 00 00 00       	callq  783c <_ZN6Parser12loadIncludesEv+0x5e>
    783c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7840:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7844:	48 89 d6             	mov    %rdx,%rsi
    7847:	48 89 c7             	mov    %rax,%rdi
    784a:	e8 00 00 00 00       	callq  784f <_ZN6Parser12loadIncludesEv+0x71>
    784f:	84 c0                	test   %al,%al
    7851:	0f 84 dc 00 00 00    	je     7933 <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    7857:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    785b:	48 89 c7             	mov    %rax,%rdi
    785e:	e8 00 00 00 00       	callq  7863 <_ZN6Parser12loadIncludesEv+0x85>
    7863:	48 89 c2             	mov    %rax,%rdx
    7866:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    786a:	48 89 d6             	mov    %rdx,%rsi
    786d:	48 89 c7             	mov    %rax,%rdi
    7870:	e8 00 00 00 00       	callq  7875 <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    7875:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7879:	be 01 00 00 00       	mov    $0x1,%esi
    787e:	48 89 c7             	mov    %rax,%rdi
    7881:	e8 00 00 00 00       	callq  7886 <_ZN6Parser12loadIncludesEv+0xa8>
    7886:	8b 55 d0             	mov    -0x30(%rbp),%edx
    7889:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    788d:	89 d6                	mov    %edx,%esi
    788f:	48 89 c7             	mov    %rax,%rdi
    7892:	e8 00 00 00 00       	callq  7897 <_ZN6Parser12loadIncludesEv+0xb9>
    7897:	84 c0                	test   %al,%al
    7899:	74 7b                	je     7916 <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    789b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    789f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    78a3:	48 89 d6             	mov    %rdx,%rsi
    78a6:	48 89 c7             	mov    %rax,%rdi
    78a9:	e8 00 00 00 00       	callq  78ae <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    78ae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    78b2:	48 89 c7             	mov    %rax,%rdi
    78b5:	e8 00 00 00 00       	callq  78ba <_ZN6Parser12loadIncludesEv+0xdc>
    78ba:	83 f0 01             	xor    $0x1,%eax
    78bd:	84 c0                	test   %al,%al
    78bf:	74 3d                	je     78fe <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    78c1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78c5:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    78c9:	ba 00 00 00 00       	mov    $0x0,%edx
    78ce:	48 89 ce             	mov    %rcx,%rsi
    78d1:	48 89 c7             	mov    %rax,%rdi
    78d4:	e8 00 00 00 00       	callq  78d9 <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    78d9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78dd:	48 8d 50 60          	lea    0x60(%rax),%rdx
    78e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78e5:	48 89 c6             	mov    %rax,%rsi
    78e8:	48 89 d7             	mov    %rdx,%rdi
    78eb:	e8 00 00 00 00       	callq  78f0 <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    78f0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78f4:	48 89 c7             	mov    %rax,%rdi
    78f7:	e8 00 00 00 00       	callq  78fc <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    78fc:	eb b0                	jmp    78ae <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    78fe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7902:	48 89 c7             	mov    %rax,%rdi
    7905:	e8 00 00 00 00       	callq  790a <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    790a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    790e:	48 89 c7             	mov    %rax,%rdi
    7911:	e8 00 00 00 00       	callq  7916 <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7916:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    791a:	48 89 c7             	mov    %rax,%rdi
    791d:	e8 00 00 00 00       	callq  7922 <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7922:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7926:	48 89 c7             	mov    %rax,%rdi
    7929:	e8 00 00 00 00       	callq  792e <_ZN6Parser12loadIncludesEv+0x150>
    792e:	e9 f2 fe ff ff       	jmpq   7825 <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    7933:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7937:	48 89 c7             	mov    %rax,%rdi
    793a:	e8 00 00 00 00       	callq  793f <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    793f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7943:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7947:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    794b:	48 89 d6             	mov    %rdx,%rsi
    794e:	48 89 c7             	mov    %rax,%rdi
    7951:	e8 00 00 00 00       	callq  7956 <_ZN6Parser12loadIncludesEv+0x178>
    7956:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    795a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    795e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7962:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7966:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    796a:	48 89 d6             	mov    %rdx,%rsi
    796d:	48 89 c7             	mov    %rax,%rdi
    7970:	e8 00 00 00 00       	callq  7975 <_ZN6Parser12loadIncludesEv+0x197>
    7975:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7979:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    797d:	48 89 d6             	mov    %rdx,%rsi
    7980:	48 89 c7             	mov    %rax,%rdi
    7983:	e8 00 00 00 00       	callq  7988 <_ZN6Parser12loadIncludesEv+0x1aa>
    7988:	84 c0                	test   %al,%al
    798a:	74 2c                	je     79b8 <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    798c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7990:	48 89 c7             	mov    %rax,%rdi
    7993:	e8 00 00 00 00       	callq  7998 <_ZN6Parser12loadIncludesEv+0x1ba>
    7998:	48 89 c2             	mov    %rax,%rdx
    799b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    799f:	48 89 d6             	mov    %rdx,%rsi
    79a2:	48 89 c7             	mov    %rax,%rdi
    79a5:	e8 00 00 00 00       	callq  79aa <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    79aa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    79ae:	48 89 c7             	mov    %rax,%rdi
    79b1:	e8 00 00 00 00       	callq  79b6 <_ZN6Parser12loadIncludesEv+0x1d8>
    79b6:	eb a6                	jmp    795e <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    79b8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    79bc:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    79c0:	48 89 d6             	mov    %rdx,%rsi
    79c3:	48 89 c7             	mov    %rax,%rdi
    79c6:	e8 00 00 00 00       	callq  79cb <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    79cb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    79cf:	48 89 c7             	mov    %rax,%rdi
    79d2:	e8 00 00 00 00       	callq  79d7 <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    79d7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    79db:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    79e2:	00 00 
    79e4:	74 5d                	je     7a43 <_ZN6Parser12loadIncludesEv+0x265>
    79e6:	eb 56                	jmp    7a3e <_ZN6Parser12loadIncludesEv+0x260>
    79e8:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    79eb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    79ef:	48 89 c7             	mov    %rax,%rdi
    79f2:	e8 00 00 00 00       	callq  79f7 <_ZN6Parser12loadIncludesEv+0x219>
    79f7:	eb 03                	jmp    79fc <_ZN6Parser12loadIncludesEv+0x21e>
    79f9:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    79fc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a00:	48 89 c7             	mov    %rax,%rdi
    7a03:	e8 00 00 00 00       	callq  7a08 <_ZN6Parser12loadIncludesEv+0x22a>
    7a08:	eb 03                	jmp    7a0d <_ZN6Parser12loadIncludesEv+0x22f>
    7a0a:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7a0d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a11:	48 89 c7             	mov    %rax,%rdi
    7a14:	e8 00 00 00 00       	callq  7a19 <_ZN6Parser12loadIncludesEv+0x23b>
    7a19:	48 89 d8             	mov    %rbx,%rax
    7a1c:	48 89 c7             	mov    %rax,%rdi
    7a1f:	e8 00 00 00 00       	callq  7a24 <_ZN6Parser12loadIncludesEv+0x246>
    7a24:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    7a27:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7a2b:	48 89 c7             	mov    %rax,%rdi
    7a2e:	e8 00 00 00 00       	callq  7a33 <_ZN6Parser12loadIncludesEv+0x255>
    7a33:	48 89 d8             	mov    %rbx,%rax
    7a36:	48 89 c7             	mov    %rax,%rdi
    7a39:	e8 00 00 00 00       	callq  7a3e <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    7a3e:	e8 00 00 00 00       	callq  7a43 <_ZN6Parser12loadIncludesEv+0x265>
    7a43:	48 83 c4 68          	add    $0x68,%rsp
    7a47:	5b                   	pop    %rbx
    7a48:	5d                   	pop    %rbp
    7a49:	c3                   	retq   

0000000000007a4a <_ZN6Parser13compileModuleE7QString>:

QByteArray Parser::compileModule(QString key){
    7a4a:	55                   	push   %rbp
    7a4b:	48 89 e5             	mov    %rsp,%rbp
    7a4e:	53                   	push   %rbx
    7a4f:	48 83 ec 48          	sub    $0x48,%rsp
    7a53:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7a57:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7a5b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    7a5f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7a66:	00 00 
    7a68:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7a6c:	31 c0                	xor    %eax,%eax
    QStringList M = this->sorted.take(key);
    7a6e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7a72:	48 8d 48 78          	lea    0x78(%rax),%rcx
    7a76:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a7a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7a7e:	48 89 ce             	mov    %rcx,%rsi
    7a81:	48 89 c7             	mov    %rax,%rdi
    7a84:	e8 00 00 00 00       	callq  7a89 <_ZN6Parser13compileModuleE7QString+0x3f>
    QByteArray result;
    7a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a8d:	48 89 c7             	mov    %rax,%rdi
    7a90:	e8 00 00 00 00       	callq  7a95 <_ZN6Parser13compileModuleE7QString+0x4b>

    QByteArray VARS = compileVariables(&M);
    7a95:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a99:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    7a9d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7aa1:	48 89 ce             	mov    %rcx,%rsi
    7aa4:	48 89 c7             	mov    %rax,%rdi
    7aa7:	e8 00 00 00 00       	callq  7aac <_ZN6Parser13compileModuleE7QString+0x62>
    result.append(VARS);
    7aac:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7ab0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ab4:	48 89 d6             	mov    %rdx,%rsi
    7ab7:	48 89 c7             	mov    %rax,%rdi
    7aba:	e8 00 00 00 00       	callq  7abf <_ZN6Parser13compileModuleE7QString+0x75>

    result.append("0");
    7abf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ac3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7aca <_ZN6Parser13compileModuleE7QString+0x80>
    7aca:	48 89 c7             	mov    %rax,%rdi
    7acd:	e8 00 00 00 00       	callq  7ad2 <_ZN6Parser13compileModuleE7QString+0x88>
    return result;
    7ad2:	90                   	nop

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7ad3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7ad7:	48 89 c7             	mov    %rax,%rdi
    7ada:	e8 00 00 00 00       	callq  7adf <_ZN6Parser13compileModuleE7QString+0x95>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7adf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7ae3:	48 89 c7             	mov    %rax,%rdi
    7ae6:	e8 00 00 00 00       	callq  7aeb <_ZN6Parser13compileModuleE7QString+0xa1>

    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
    7aeb:	90                   	nop
}
    7aec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7af0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7af4:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7afb:	00 00 
    7afd:	74 3e                	je     7b3d <_ZN6Parser13compileModuleE7QString+0xf3>
    7aff:	eb 37                	jmp    7b38 <_ZN6Parser13compileModuleE7QString+0xee>
    7b01:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7b04:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7b08:	48 89 c7             	mov    %rax,%rdi
    7b0b:	e8 00 00 00 00       	callq  7b10 <_ZN6Parser13compileModuleE7QString+0xc6>
    7b10:	eb 03                	jmp    7b15 <_ZN6Parser13compileModuleE7QString+0xcb>
    7b12:	48 89 c3             	mov    %rax,%rbx
    7b15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b19:	48 89 c7             	mov    %rax,%rdi
    7b1c:	e8 00 00 00 00       	callq  7b21 <_ZN6Parser13compileModuleE7QString+0xd7>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7b21:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7b25:	48 89 c7             	mov    %rax,%rdi
    7b28:	e8 00 00 00 00       	callq  7b2d <_ZN6Parser13compileModuleE7QString+0xe3>
    7b2d:	48 89 d8             	mov    %rbx,%rax
    7b30:	48 89 c7             	mov    %rax,%rdi
    7b33:	e8 00 00 00 00       	callq  7b38 <_ZN6Parser13compileModuleE7QString+0xee>
    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
}
    7b38:	e8 00 00 00 00       	callq  7b3d <_ZN6Parser13compileModuleE7QString+0xf3>
    7b3d:	48 83 c4 48          	add    $0x48,%rsp
    7b41:	5b                   	pop    %rbx
    7b42:	5d                   	pop    %rbp
    7b43:	c3                   	retq   

0000000000007b44 <_ZN6Parser7compileEv>:

int Parser::compile(){
    7b44:	55                   	push   %rbp
    7b45:	48 89 e5             	mov    %rsp,%rbp
    7b48:	53                   	push   %rbx
    7b49:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    7b50:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    7b57:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7b5e:	00 00 
    7b60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7b64:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7b66:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7b6a:	48 89 c7             	mov    %rax,%rdi
    7b6d:	e8 00 00 00 00       	callq  7b72 <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    7b72:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b79:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7b7d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b84:	48 89 c7             	mov    %rax,%rdi
    7b87:	e8 00 00 00 00       	callq  7b8c <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7b8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b93:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7b97:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7b9e:	48 89 d6             	mov    %rdx,%rsi
    7ba1:	48 89 c7             	mov    %rax,%rdi
    7ba4:	e8 00 00 00 00       	callq  7ba9 <_ZN6Parser7compileEv+0x65>
    7ba9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7bb0:	48 8d 78 78          	lea    0x78(%rax),%rdi
    7bb4:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7bbb:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    7bc2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7bc9:	48 89 d1             	mov    %rdx,%rcx
    7bcc:	48 89 fa             	mov    %rdi,%rdx
    7bcf:	48 89 c7             	mov    %rax,%rdi
    7bd2:	e8 00 00 00 00       	callq  7bd7 <_ZN6Parser7compileEv+0x93>
    7bd7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7bde:	48 89 c7             	mov    %rax,%rdi
    7be1:	e8 00 00 00 00       	callq  7be6 <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7be6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7bed:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7bf1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7bf8:	48 89 d6             	mov    %rdx,%rsi
    7bfb:	48 89 c7             	mov    %rax,%rdi
    7bfe:	e8 00 00 00 00       	callq  7c03 <_ZN6Parser7compileEv+0xbf>
    7c03:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c0a:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    7c11:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7c18:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    7c1f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c26:	48 89 d1             	mov    %rdx,%rcx
    7c29:	48 89 fa             	mov    %rdi,%rdx
    7c2c:	48 89 c7             	mov    %rax,%rdi
    7c2f:	e8 00 00 00 00       	callq  7c34 <_ZN6Parser7compileEv+0xf0>
    7c34:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7c3b:	48 89 c7             	mov    %rax,%rdi
    7c3e:	e8 00 00 00 00       	callq  7c43 <_ZN6Parser7compileEv+0xff>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7c43:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7c4a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c51 <_ZN6Parser7compileEv+0x10d>
    7c51:	48 89 c7             	mov    %rax,%rdi
    7c54:	e8 00 00 00 00       	callq  7c59 <_ZN6Parser7compileEv+0x115>
    7c59:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7c60:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c67:	48 89 d6             	mov    %rdx,%rsi
    7c6a:	48 89 c7             	mov    %rax,%rdi
    7c6d:	e8 00 00 00 00       	callq  7c72 <_ZN6Parser7compileEv+0x12e>
    7c72:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7c79:	48 89 c7             	mov    %rax,%rdi
    7c7c:	e8 00 00 00 00       	callq  7c81 <_ZN6Parser7compileEv+0x13d>
    this->addIncludeFile("project1.h");
    7c81:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7c88:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c8f <_ZN6Parser7compileEv+0x14b>
    7c8f:	48 89 c7             	mov    %rax,%rdi
    7c92:	e8 00 00 00 00       	callq  7c97 <_ZN6Parser7compileEv+0x153>
    7c97:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7c9e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7ca5:	48 89 d6             	mov    %rdx,%rsi
    7ca8:	48 89 c7             	mov    %rax,%rdi
    7cab:	e8 00 00 00 00       	callq  7cb0 <_ZN6Parser7compileEv+0x16c>
    7cb0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7cb7:	48 89 c7             	mov    %rax,%rdi
    7cba:	e8 00 00 00 00       	callq  7cbf <_ZN6Parser7compileEv+0x17b>
    this->addIncludeFile("kpa_config.h");
    7cbf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7cc3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7cca <_ZN6Parser7compileEv+0x186>
    7cca:	48 89 c7             	mov    %rax,%rdi
    7ccd:	e8 00 00 00 00       	callq  7cd2 <_ZN6Parser7compileEv+0x18e>
    7cd2:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7cd6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7cdd:	48 89 d6             	mov    %rdx,%rsi
    7ce0:	48 89 c7             	mov    %rax,%rdi
    7ce3:	e8 00 00 00 00       	callq  7ce8 <_ZN6Parser7compileEv+0x1a4>
    7ce8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7cec:	48 89 c7             	mov    %rax,%rdi
    7cef:	e8 00 00 00 00       	callq  7cf4 <_ZN6Parser7compileEv+0x1b0>
    this->addIncludeFile("names.h");
    7cf4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7cf8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7cff <_ZN6Parser7compileEv+0x1bb>
    7cff:	48 89 c7             	mov    %rax,%rdi
    7d02:	e8 00 00 00 00       	callq  7d07 <_ZN6Parser7compileEv+0x1c3>
    7d07:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7d0b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7d12:	48 89 d6             	mov    %rdx,%rsi
    7d15:	48 89 c7             	mov    %rax,%rdi
    7d18:	e8 00 00 00 00       	callq  7d1d <_ZN6Parser7compileEv+0x1d9>
    7d1d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7d21:	48 89 c7             	mov    %rax,%rdi
    7d24:	e8 00 00 00 00       	callq  7d29 <_ZN6Parser7compileEv+0x1e5>
    int lIf = this->loadIncludes();
    7d29:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7d30:	48 89 c7             	mov    %rax,%rdi
    7d33:	e8 00 00 00 00       	callq  7d38 <_ZN6Parser7compileEv+0x1f4>
    7d38:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7d3e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7d42:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7d49:	48 89 d6             	mov    %rdx,%rsi
    7d4c:	48 89 c7             	mov    %rax,%rdi
    7d4f:	e8 00 00 00 00       	callq  7d54 <_ZN6Parser7compileEv+0x210>
    7d54:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7d5a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7d5e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7d65:	48 89 d6             	mov    %rdx,%rsi
    7d68:	48 89 c7             	mov    %rax,%rdi
    7d6b:	e8 00 00 00 00       	callq  7d70 <_ZN6Parser7compileEv+0x22c>
    7d70:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)


    compileHWS();
    7d76:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7d7d:	48 89 c7             	mov    %rax,%rdi
    7d80:	e8 00 00 00 00       	callq  7d85 <_ZN6Parser7compileEv+0x241>

    QByteArray firstGrape = compileModule("KPA_IP3");
    7d85:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7d89:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d90 <_ZN6Parser7compileEv+0x24c>
    7d90:	48 89 c7             	mov    %rax,%rdi
    7d93:	e8 00 00 00 00       	callq  7d98 <_ZN6Parser7compileEv+0x254>
    7d98:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7d9c:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7da0:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
    7da7:	48 89 ce             	mov    %rcx,%rsi
    7daa:	48 89 c7             	mov    %rax,%rdi
    7dad:	e8 00 00 00 00       	callq  7db2 <_ZN6Parser7compileEv+0x26e>
    7db2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7db6:	48 89 c7             	mov    %rax,%rdi
    7db9:	e8 00 00 00 00       	callq  7dbe <_ZN6Parser7compileEv+0x27a>
    7dbe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7dc2:	48 89 c7             	mov    %rax,%rdi
    7dc5:	e8 00 00 00 00       	callq  7dca <_ZN6Parser7compileEv+0x286>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7dca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7dce:	48 89 c7             	mov    %rax,%rdi
    7dd1:	e8 00 00 00 00       	callq  7dd6 <_ZN6Parser7compileEv+0x292>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7dd6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7dda:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7de1:	00 00 
    7de3:	0f 84 bb 00 00 00    	je     7ea4 <_ZN6Parser7compileEv+0x360>
    7de9:	e9 b1 00 00 00       	jmpq   7e9f <_ZN6Parser7compileEv+0x35b>
    7dee:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7df1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7df8:	48 89 c7             	mov    %rax,%rdi
    7dfb:	e8 00 00 00 00       	callq  7e00 <_ZN6Parser7compileEv+0x2bc>
    7e00:	e9 83 00 00 00       	jmpq   7e88 <_ZN6Parser7compileEv+0x344>
    7e05:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7e08:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7e0f:	48 89 c7             	mov    %rax,%rdi
    7e12:	e8 00 00 00 00       	callq  7e17 <_ZN6Parser7compileEv+0x2d3>
    7e17:	eb 6f                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e19:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7e1c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7e23:	48 89 c7             	mov    %rax,%rdi
    7e26:	e8 00 00 00 00       	callq  7e2b <_ZN6Parser7compileEv+0x2e7>
    7e2b:	eb 5b                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e2d:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7e30:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7e37:	48 89 c7             	mov    %rax,%rdi
    7e3a:	e8 00 00 00 00       	callq  7e3f <_ZN6Parser7compileEv+0x2fb>
    7e3f:	eb 47                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e41:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7e44:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7e48:	48 89 c7             	mov    %rax,%rdi
    7e4b:	e8 00 00 00 00       	callq  7e50 <_ZN6Parser7compileEv+0x30c>
    7e50:	eb 36                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e52:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7e55:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7e59:	48 89 c7             	mov    %rax,%rdi
    7e5c:	e8 00 00 00 00       	callq  7e61 <_ZN6Parser7compileEv+0x31d>
    7e61:	eb 25                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e63:	48 89 c3             	mov    %rax,%rbx
    7e66:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7e6a:	48 89 c7             	mov    %rax,%rdi
    7e6d:	e8 00 00 00 00       	callq  7e72 <_ZN6Parser7compileEv+0x32e>
    7e72:	eb 14                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e74:	48 89 c3             	mov    %rax,%rbx
    7e77:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7e7b:	48 89 c7             	mov    %rax,%rdi
    7e7e:	e8 00 00 00 00       	callq  7e83 <_ZN6Parser7compileEv+0x33f>
    7e83:	eb 03                	jmp    7e88 <_ZN6Parser7compileEv+0x344>
    7e85:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7e88:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7e8c:	48 89 c7             	mov    %rax,%rdi
    7e8f:	e8 00 00 00 00       	callq  7e94 <_ZN6Parser7compileEv+0x350>
    7e94:	48 89 d8             	mov    %rbx,%rax
    7e97:	48 89 c7             	mov    %rax,%rdi
    7e9a:	e8 00 00 00 00       	callq  7e9f <_ZN6Parser7compileEv+0x35b>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7e9f:	e8 00 00 00 00       	callq  7ea4 <_ZN6Parser7compileEv+0x360>
    7ea4:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    7eab:	5b                   	pop    %rbx
    7eac:	5d                   	pop    %rbp
    7ead:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE4takeERKS0_:

0000000000000000 <_ZN5QHashI7QString11QStringListE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:

// #include "../sid/sid.h"

# include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   
