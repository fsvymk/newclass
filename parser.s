
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000140  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        0000000c  0000000000000000  0000000000000000  0000014c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        0000000c  0000000000000000  0000000000000000  00000178  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        0000000c  0000000000000000  0000000000000000  000001d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        0000000c  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000cac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .group        00000008  0000000000000000  0000000000000000  00000cc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
398 .group        00000008  0000000000000000  0000000000000000  00000ccc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
399 .group        00000008  0000000000000000  0000000000000000  00000cd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
400 .group        00000008  0000000000000000  0000000000000000  00000cdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
401 .group        00000008  0000000000000000  0000000000000000  00000ce4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
402 .group        00000008  0000000000000000  0000000000000000  00000cec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
403 .group        00000008  0000000000000000  0000000000000000  00000cf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
404 .group        00000008  0000000000000000  0000000000000000  00000cfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
405 .group        00000008  0000000000000000  0000000000000000  00000d04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
406 .group        00000008  0000000000000000  0000000000000000  00000d0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
407 .group        00000008  0000000000000000  0000000000000000  00000d14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
408 .group        00000008  0000000000000000  0000000000000000  00000d1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
409 .group        00000008  0000000000000000  0000000000000000  00000d24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
410 .group        00000008  0000000000000000  0000000000000000  00000d2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
411 .group        00000008  0000000000000000  0000000000000000  00000d34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
412 .text         00007dda  0000000000000000  0000000000000000  00000d3c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
413 .data         00000000  0000000000000000  0000000000000000  00008b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
414 .bss          00000000  0000000000000000  0000000000000000  00008b16  2**0
                  ALLOC
415 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008b16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
417 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008b37  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
418 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
419 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00008b56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
420 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00008b66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
421 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00008b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
422 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00008b94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
423 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00008bb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
424 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008bf2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
425 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00008c36  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
426 .rodata       00000624  0000000000000000  0000000000000000  00008c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
427 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00009294  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
428 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  000092f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
429 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  0000935f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
430 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  0000936c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
431 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  00009380  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
432 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  0000939e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
433 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  000093d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
434 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  000093e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  00009446  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
436 .text._ZN10QByteArrayC2ERKS_ 00000030  0000000000000000  0000000000000000  000094b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
437 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  000094e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000950e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
439 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  0000958e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
440 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009604  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
441 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000962a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
442 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  00009650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
443 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  00009664  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
444 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  000096ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
445 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  000096d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  000096fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00009768  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  000097b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
449 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00009844  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
450 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  0000985a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
451 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  000098ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
452 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009904  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
453 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  0000992a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
454 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  0000993e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  0000995c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
456 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  0000997a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
457 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00009a0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
458 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009a20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00009a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009aa0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009b2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009b4a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009b7e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009bf4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
465 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009c47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00009ccc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
467 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00009cdc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  00009d96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
469 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  00009db1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  00009e3b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
471 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  00009e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
472 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  00009e58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  00009e6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
474 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  00009eb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  00009ece  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
476 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  00009f08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  00009f5c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  00009f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  00009f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  00009fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
481 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  00009ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  0000a01c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
483 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  0000a044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  0000a050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
485 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  0000a05c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  0000a078  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a09e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a0ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
489 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a0e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a10e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
491 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a11c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a13e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
493 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a16a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
494 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a17e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
495 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a1be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
496 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a1e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  0000a22e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  0000a2ec  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
499 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
500 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a35f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
501 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a3b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
502 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a426  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
503 .text._ZN11QDataStreamlsEh 00000028  0000000000000000  0000000000000000  0000a446  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
504 .gcc_except_table 00001218  0000000000000000  0000000000000000  0000a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
505 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000b688  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
506 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000b6a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
507 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000b6ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000b6ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000b7a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
510 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000b7c0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000b7da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
512 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000b7f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000b80e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
514 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b830  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b83b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
516 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000b860  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
517 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000b87a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
518 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000b894  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000b89f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000b8c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000b8ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000b8f8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000b922  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000b98a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000baa6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000bb84  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
527 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000bc24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000bd50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
529 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000bd68  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000bdca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000be06  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000bf12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
533 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000bf1e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000bf48  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000bfb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
536 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000bfc6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
537 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000c006  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
539 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000c068  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c088  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZN4QMapI7QStringhE4takeERKS0_ 0000006b  0000000000000000  0000000000000000  0000c0a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN4QMapIhhE4takeERKh 0000006b  0000000000000000  0000000000000000  0000c112  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._ZN5QListI10QByteArrayE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000c17e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
544 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000c29a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
545 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c414  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000c586  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c6f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
548 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000c70e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000c742  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
550 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
551 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000c798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
552 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c7b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000c7d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000c804  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000c974  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
556 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000c9d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
557 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000c9f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000ca56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
559 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000ca78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000ca8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
561 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000caa4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
562 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000cabe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
563 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000caf2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000cb0c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000cb7e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000cbd2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
567 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000cbec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000cc2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000cd38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
570 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000cd4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
571 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000cdb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000ce08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
573 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000ce2a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
574 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000ce56  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
575 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000ce78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000ce9a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000cf24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000cf8a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
579 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000d098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZN5QHashI7QString11QStringListE4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000d0ac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
581 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d201  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d248  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
584 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000d2a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
585 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000d47c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
586 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000d4e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
587 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000d504  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000d5ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000d5f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
590 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000d60e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
591 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000d634  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
592 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000d693  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
593 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000d6b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
594 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000d6ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000d824  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
596 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000d8e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
597 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d900  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
598 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000d95e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
599 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000d98c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000d9a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000d9b4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
602 .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000d9e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
603 .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE 00000036  0000000000000000  0000000000000000  0000da62  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
604 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000da98  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZNK8QMapDataIhhE8findNodeERKh 00000080  0000000000000000  0000000000000000  0000dac6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE 00000026  0000000000000000  0000000000000000  0000db46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN5QListI10QByteArrayE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000db6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000dd42  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
609 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000ddaa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
610 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000ddca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
611 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000ddf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
612 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000de0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
613 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000de1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
614 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000de2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
615 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000de40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
616 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000de5a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000df8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
618 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000dfa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
619 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000dfb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
620 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000dfc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
621 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000dfd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
622 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000dff0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000e0e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
624 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000e0f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
625 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000e104  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
626 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
627 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
628 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000e14a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
629 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000e164  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e1f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
631 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000e210  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000e22e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e26a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000e2ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000e318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
636 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000e32a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
637 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e33c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
638 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e34e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
639 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000e360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
640 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000e37a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
641 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000e468  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
642 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000e4a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
643 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000e504  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000e54a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
645 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000e574  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
646 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000e5a6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
647 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000e6e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
648 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000e7a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
649 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000e7bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
650 .text._ZNK5QHashI7QString11QStringListE7isEmptyEv 00000019  0000000000000000  0000000000000000  0000e7ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
651 .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E 00000035  0000000000000000  0000000000000000  0000e7e4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
652 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000e81a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
653 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000e84e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
654 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000e874  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
655 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000e8ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
656 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000e8d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000e94c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
658 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000e994  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
659 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000e9e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000ea6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000eaa0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
662 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000eac8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
663 .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000eb70  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
664 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ebe8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
665 .text._ZN8QMapNodeIhhE10lowerBoundERKh 00000077  0000000000000000  0000000000000000  0000ec90  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
666 .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000ed08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
667 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000edd2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
668 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000ee7a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000ee94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
670 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000ef0c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
671 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000efb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
672 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000f016  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
673 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000f036  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
674 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000f05a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
675 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000f0d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
676 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000f11e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
677 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000f170  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
678 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  0000f1f6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
679 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000f24a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
680 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  0000f26d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
681 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000f2a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
682 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000f32c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
683 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000f380  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
684 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000f3a4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
685 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0000f3ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
686 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0000f49e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
687 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  0000f4aa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
688 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0000f5be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
689 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0000f61f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
690 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  0000f62a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
691 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  0000f73e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
692 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0000f79f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
693 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  0000f7aa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
694 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0000f8be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
695 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0000f91f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
696 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  0000f92a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
697 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000fa3d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
698 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  0000fa4c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
699 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000fad8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
700 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000fb01  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
701 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000fb10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
702 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  0000fb72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
703 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  0000fb7e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
704 .debug_info   000240ba  0000000000000000  0000000000000000  0000fbef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
705 .debug_abbrev 00000cb1  0000000000000000  0000000000000000  00033ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
706 .debug_aranges 000011b0  0000000000000000  0000000000000000  0003495a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
707 .debug_ranges 00001730  0000000000000000  0000000000000000  00035b0a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
708 .debug_macro  00000d27  0000000000000000  0000000000000000  0003723a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
709 .debug_macro  0000061c  0000000000000000  0000000000000000  00037f61  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
710 .debug_macro  00000022  0000000000000000  0000000000000000  0003857d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
711 .debug_macro  00000136  0000000000000000  0000000000000000  0003859f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
712 .debug_macro  00000010  0000000000000000  0000000000000000  000386d5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
713 .debug_macro  00000275  0000000000000000  0000000000000000  000386e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
714 .debug_macro  0000016f  0000000000000000  0000000000000000  0003895a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
715 .debug_macro  00000016  0000000000000000  0000000000000000  00038ac9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
716 .debug_macro  00000035  0000000000000000  0000000000000000  00038adf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
717 .debug_macro  00000058  0000000000000000  0000000000000000  00038b14  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
718 .debug_macro  000005b4  0000000000000000  0000000000000000  00038b6c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
719 .debug_macro  0000016d  0000000000000000  0000000000000000  00039120  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
720 .debug_macro  00000016  0000000000000000  0000000000000000  0003928d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
721 .debug_macro  0000009a  0000000000000000  0000000000000000  000392a3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
722 .debug_macro  00000016  0000000000000000  0000000000000000  0003933d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
723 .debug_macro  00000018  0000000000000000  0000000000000000  00039353  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
724 .debug_macro  00000032  0000000000000000  0000000000000000  0003936b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
725 .debug_macro  000000c0  0000000000000000  0000000000000000  0003939d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
726 .debug_macro  00000028  0000000000000000  0000000000000000  0003945d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
727 .debug_macro  00000012  0000000000000000  0000000000000000  00039485  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
728 .debug_macro  000000cf  0000000000000000  0000000000000000  00039497  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
729 .debug_macro  0000001c  0000000000000000  0000000000000000  00039566  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
730 .debug_macro  00000018  0000000000000000  0000000000000000  00039582  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
731 .debug_macro  0000006e  0000000000000000  0000000000000000  0003959a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
732 .debug_macro  00000082  0000000000000000  0000000000000000  00039608  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
733 .debug_macro  00000012  0000000000000000  0000000000000000  0003968a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
734 .debug_macro  00000012  0000000000000000  0000000000000000  0003969c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
735 .debug_macro  00000016  0000000000000000  0000000000000000  000396ae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
736 .debug_macro  00000035  0000000000000000  0000000000000000  000396c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
737 .debug_macro  00000052  0000000000000000  0000000000000000  000396f9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
738 .debug_macro  0000004c  0000000000000000  0000000000000000  0003974b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
739 .debug_macro  0000001c  0000000000000000  0000000000000000  00039797  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
740 .debug_macro  00000028  0000000000000000  0000000000000000  000397b3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
741 .debug_macro  0000005e  0000000000000000  0000000000000000  000397db  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
742 .debug_macro  000000e2  0000000000000000  0000000000000000  00039839  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
743 .debug_macro  00000010  0000000000000000  0000000000000000  0003991b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
744 .debug_macro  0000004c  0000000000000000  0000000000000000  0003992b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
745 .debug_macro  00000022  0000000000000000  0000000000000000  00039977  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
746 .debug_macro  00000068  0000000000000000  0000000000000000  00039999  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
747 .debug_macro  0000007f  0000000000000000  0000000000000000  00039a01  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
748 .debug_macro  0000003a  0000000000000000  0000000000000000  00039a80  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_macro  00000019  0000000000000000  0000000000000000  00039aba  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
750 .debug_macro  00000020  0000000000000000  0000000000000000  00039ad3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_macro  00000022  0000000000000000  0000000000000000  00039af3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  00000010  0000000000000000  0000000000000000  00039b15  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  00000016  0000000000000000  0000000000000000  00039b25  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000028  0000000000000000  0000000000000000  00039b3b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000010  0000000000000000  0000000000000000  00039b63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000046  0000000000000000  0000000000000000  00039b73  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  0000001c  0000000000000000  0000000000000000  00039bb9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  00000020  0000000000000000  0000000000000000  00039bd5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  0000005a  0000000000000000  0000000000000000  00039bf5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000010  0000000000000000  0000000000000000  00039c4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000010  0000000000000000  0000000000000000  00039c5f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  000000e4  0000000000000000  0000000000000000  00039c6f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  0000025a  0000000000000000  0000000000000000  00039d53  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  0000002d  0000000000000000  0000000000000000  00039fad  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  00000016  0000000000000000  0000000000000000  00039fda  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000050  0000000000000000  0000000000000000  00039ff0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000019  0000000000000000  0000000000000000  0003a040  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  00000011  0000000000000000  0000000000000000  0003a059  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  0000014b  0000000000000000  0000000000000000  0003a06a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  0000001e  0000000000000000  0000000000000000  0003a1b5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  0000001c  0000000000000000  0000000000000000  0003a1d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  00000024  0000000000000000  0000000000000000  0003a1ef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  00000016  0000000000000000  0000000000000000  0003a213  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  00000018  0000000000000000  0000000000000000  0003a229  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  00000019  0000000000000000  0000000000000000  0003a241  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000058  0000000000000000  0000000000000000  0003a25a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000016  0000000000000000  0000000000000000  0003a2b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  0000001c  0000000000000000  0000000000000000  0003a2c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000016  0000000000000000  0000000000000000  0003a2e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000022  0000000000000000  0000000000000000  0003a2fa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  00000043  0000000000000000  0000000000000000  0003a31c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  0000003c  0000000000000000  0000000000000000  0003a35f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  00000173  0000000000000000  0000000000000000  0003a39b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000012  0000000000000000  0000000000000000  0003a50e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  00000010  0000000000000000  0000000000000000  0003a520  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  00000058  0000000000000000  0000000000000000  0003a530  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  000000b4  0000000000000000  0000000000000000  0003a588  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  00000016  0000000000000000  0000000000000000  0003a63c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000010  0000000000000000  0000000000000000  0003a652  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000037  0000000000000000  0000000000000000  0003a662  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  00000058  0000000000000000  0000000000000000  0003a699  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  00000011  0000000000000000  0000000000000000  0003a6f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  00000016  0000000000000000  0000000000000000  0003a702  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000010  0000000000000000  0000000000000000  0003a718  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  00000010  0000000000000000  0000000000000000  0003a728  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000022  0000000000000000  0000000000000000  0003a738  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  00000122  0000000000000000  0000000000000000  0003a75a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  0000008e  0000000000000000  0000000000000000  0003a87c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000016  0000000000000000  0000000000000000  0003a90a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000058  0000000000000000  0000000000000000  0003a920  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  000000fa  0000000000000000  0000000000000000  0003a978  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000030  0000000000000000  0000000000000000  0003aa72  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  000000c1  0000000000000000  0000000000000000  0003aaa2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  0000004d  0000000000000000  0000000000000000  0003ab63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  00000010  0000000000000000  0000000000000000  0003abb0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  00000019  0000000000000000  0000000000000000  0003abc0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  00000020  0000000000000000  0000000000000000  0003abd9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  00000018  0000000000000000  0000000000000000  0003abf9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_macro  00000023  0000000000000000  0000000000000000  0003ac11  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_macro  00000010  0000000000000000  0000000000000000  0003ac34  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
811 .debug_macro  00000016  0000000000000000  0000000000000000  0003ac44  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
812 .debug_macro  00000076  0000000000000000  0000000000000000  0003ac5a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
813 .debug_macro  00000016  0000000000000000  0000000000000000  0003acd0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
814 .debug_macro  00000025  0000000000000000  0000000000000000  0003ace6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
815 .debug_macro  000000de  0000000000000000  0000000000000000  0003ad0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
816 .debug_macro  0000001c  0000000000000000  0000000000000000  0003ade9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
817 .debug_macro  00000058  0000000000000000  0000000000000000  0003ae05  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
818 .debug_macro  00000088  0000000000000000  0000000000000000  0003ae5d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
819 .debug_macro  00000076  0000000000000000  0000000000000000  0003aee5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
820 .debug_macro  00000010  0000000000000000  0000000000000000  0003af5b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
821 .debug_macro  00000041  0000000000000000  0000000000000000  0003af6b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
822 .debug_macro  000000ee  0000000000000000  0000000000000000  0003afac  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
823 .debug_macro  000000fc  0000000000000000  0000000000000000  0003b09a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
824 .debug_macro  00000010  0000000000000000  0000000000000000  0003b196  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
825 .debug_macro  000000e5  0000000000000000  0000000000000000  0003b1a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
826 .debug_macro  00000012  0000000000000000  0000000000000000  0003b28b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
827 .debug_macro  00000016  0000000000000000  0000000000000000  0003b29d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
828 .debug_macro  00000022  0000000000000000  0000000000000000  0003b2b3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
829 .debug_macro  00000016  0000000000000000  0000000000000000  0003b2d5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
830 .debug_macro  00000028  0000000000000000  0000000000000000  0003b2eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
831 .debug_macro  00000216  0000000000000000  0000000000000000  0003b313  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
832 .debug_macro  00000046  0000000000000000  0000000000000000  0003b529  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
833 .debug_macro  0000002e  0000000000000000  0000000000000000  0003b56f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
834 .debug_macro  00000027  0000000000000000  0000000000000000  0003b59d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
835 .debug_macro  0000001f  0000000000000000  0000000000000000  0003b5c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
836 .debug_macro  00000016  0000000000000000  0000000000000000  0003b5e3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
837 .debug_macro  00000010  0000000000000000  0000000000000000  0003b5f9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
838 .debug_macro  00000126  0000000000000000  0000000000000000  0003b609  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
839 .debug_line   00004866  0000000000000000  0000000000000000  0003b72f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
840 .debug_str    0003ad48  0000000000000000  0000000000000000  0003ff95  2**0
                  CONTENTS, READONLY, DEBUGGING
841 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  0007ace0  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
842 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  0007ace8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
843 .comment      0000002e  0000000000000000  0000000000000000  0007acf0  2**0
                  CONTENTS, READONLY
844 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0007ad1e  2**0
                  CONTENTS, READONLY
845 .eh_frame     00002968  0000000000000000  0000000000000000  0007ad20  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhP13varParameters>:

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	41 57                	push   %r15
     322:	41 56                	push   %r14
     324:	41 55                	push   %r13
     326:	41 54                	push   %r12
     328:	53                   	push   %rbx
     329:	48 83 ec 68          	sub    $0x68,%rsp
     32d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     331:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     335:	89 c8                	mov    %ecx,%eax
     337:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
     33e:	88 95 7c ff ff ff    	mov    %dl,-0x84(%rbp)
     344:	88 85 78 ff ff ff    	mov    %al,-0x88(%rbp)
     34a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     351:	00 00 
     353:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
     357:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     359:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     35d:	48 89 c7             	mov    %rax,%rdi
     360:	e8 00 00 00 00       	callq  365 <_ZN6Parser12packVariableEhhP13varParameters+0x49>
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     365:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     369:	be 02 00 00 00       	mov    $0x2,%esi
     36e:	48 89 c7             	mov    %rax,%rdi
     371:	e8 00 00 00 00       	callq  376 <_ZN6Parser12packVariableEhhP13varParameters+0x5a>
     376:	8b 55 90             	mov    -0x70(%rbp),%edx
     379:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
     37d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     381:	48 89 ce             	mov    %rcx,%rsi
     384:	48 89 c7             	mov    %rax,%rdi
     387:	e8 00 00 00 00       	callq  38c <_ZN6Parser12packVariableEhhP13varParameters+0x70>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
     38c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     393:	48 83 c0 06          	add    $0x6,%rax
     397:	48 85 c0             	test   %rax,%rax
     39a:	0f 95 c0             	setne  %al
     39d:	0f b6 d8             	movzbl %al,%ebx
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
     3a0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3a7:	48 83 c0 04          	add    $0x4,%rax
     3ab:	48 85 c0             	test   %rax,%rax
     3ae:	0f 95 c0             	setne  %al
     3b1:	44 0f b6 e0          	movzbl %al,%r12d
QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
     3b5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3bc:	48 83 c0 02          	add    $0x2,%rax
     3c0:	48 85 c0             	test   %rax,%rax
     3c3:	0f 95 c0             	setne  %al
     3c6:	44 0f b6 e8          	movzbl %al,%r13d

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
     3ca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3d1:	48 85 c0             	test   %rax,%rax
     3d4:	0f 95 c0             	setne  %al
     3d7:	44 0f b6 f0          	movzbl %al,%r14d
     3db:	44 0f b6 bd 78 ff ff 	movzbl -0x88(%rbp),%r15d
     3e2:	ff 
     3e3:	0f b6 95 7c ff ff ff 	movzbl -0x84(%rbp),%edx
     3ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3ee:	89 d6                	mov    %edx,%esi
     3f0:	48 89 c7             	mov    %rax,%rdi
     3f3:	e8 00 00 00 00       	callq  3f8 <_ZN6Parser12packVariableEhhP13varParameters+0xdc>
     3f8:	44 89 fe             	mov    %r15d,%esi
     3fb:	48 89 c7             	mov    %rax,%rdi
     3fe:	e8 00 00 00 00       	callq  403 <_ZN6Parser12packVariableEhhP13varParameters+0xe7>
     403:	44 89 f6             	mov    %r14d,%esi
     406:	48 89 c7             	mov    %rax,%rdi
     409:	e8 00 00 00 00       	callq  40e <_ZN6Parser12packVariableEhhP13varParameters+0xf2>
                              << &VP->eventSET
     40e:	44 89 ee             	mov    %r13d,%esi
     411:	48 89 c7             	mov    %rax,%rdi
     414:	e8 00 00 00 00       	callq  419 <_ZN6Parser12packVariableEhhP13varParameters+0xfd>
                              << &VP->eventZERO
     419:	44 89 e6             	mov    %r12d,%esi
     41c:	48 89 c7             	mov    %rax,%rdi
     41f:	e8 00 00 00 00       	callq  424 <_ZN6Parser12packVariableEhhP13varParameters+0x108>
                              << &VP->eventCHANGE;
     424:	89 de                	mov    %ebx,%esi
     426:	48 89 c7             	mov    %rax,%rdi
     429:	e8 00 00 00 00       	callq  42e <_ZN6Parser12packVariableEhhP13varParameters+0x112>
    return result;
     42e:	90                   	nop
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     42f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     433:	48 89 c7             	mov    %rax,%rdi
     436:	e8 00 00 00 00       	callq  43b <_ZN6Parser12packVariableEhhP13varParameters+0x11f>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
    return result;
     43b:	eb 2b                	jmp    468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     43d:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     440:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     444:	48 89 c7             	mov    %rax,%rdi
     447:	e8 00 00 00 00       	callq  44c <_ZN6Parser12packVariableEhhP13varParameters+0x130>
     44c:	eb 03                	jmp    451 <_ZN6Parser12packVariableEhhP13varParameters+0x135>
     44e:	48 89 c3             	mov    %rax,%rbx
     451:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     455:	48 89 c7             	mov    %rax,%rdi
     458:	e8 00 00 00 00       	callq  45d <_ZN6Parser12packVariableEhhP13varParameters+0x141>
     45d:	48 89 d8             	mov    %rbx,%rax
     460:	48 89 c7             	mov    %rax,%rdi
     463:	e8 00 00 00 00       	callq  468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     * It is able to compile        - ok
     * Data stream                  - ok
     * var Parameters as argument   - ok
     * return result                - ok
     */
}
     468:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     46c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
     470:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     477:	00 00 
     479:	74 05                	je     480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     47b:	e8 00 00 00 00       	callq  480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     480:	48 83 c4 68          	add    $0x68,%rsp
     484:	5b                   	pop    %rbx
     485:	41 5c                	pop    %r12
     487:	41 5d                	pop    %r13
     489:	41 5e                	pop    %r14
     48b:	41 5f                	pop    %r15
     48d:	5d                   	pop    %rbp
     48e:	c3                   	retq   
     48f:	90                   	nop

0000000000000490 <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     490:	55                   	push   %rbp
     491:	48 89 e5             	mov    %rsp,%rbp
     494:	53                   	push   %rbx
     495:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
     49c:	48 89 bd 98 fd ff ff 	mov    %rdi,-0x268(%rbp)
     4a3:	48 89 b5 90 fd ff ff 	mov    %rsi,-0x270(%rbp)
     4aa:	48 89 95 88 fd ff ff 	mov    %rdx,-0x278(%rbp)
     4b1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     4b8:	00 00 
     4ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     4be:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     4c0:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     4cf:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     4de:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     4e5:	48 89 c7             	mov    %rax,%rdi
     4e8:	e8 00 00 00 00       	callq  4ed <_ZN6Parser16compileVariablesEP11QStringList+0x5d>
    QStringList       code = *str;
     4ed:	48 8b 95 88 fd ff ff 	mov    -0x278(%rbp),%rdx
     4f4:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     4fb:	48 89 d6             	mov    %rdx,%rsi
     4fe:	48 89 c7             	mov    %rax,%rdi
     501:	e8 00 00 00 00       	callq  506 <_ZN6Parser16compileVariablesEP11QStringList+0x76>

    // копирование из checkVariables

    int varCount      = 0;
     506:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%rbp)
     50d:	00 00 00 
    int index         = 0;
     510:	c7 85 ac fd ff ff 00 	movl   $0x0,-0x254(%rbp)
     517:	00 00 00 

    VarTypes VT;
     51a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     521:	48 89 c7             	mov    %rax,%rdi
     524:	e8 00 00 00 00       	callq  529 <_ZN6Parser16compileVariablesEP11QStringList+0x99>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     529:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     530:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     537:	48 89 d6             	mov    %rdx,%rsi
     53a:	48 89 c7             	mov    %rax,%rdi
     53d:	e8 00 00 00 00       	callq  542 <_ZN6Parser16compileVariablesEP11QStringList+0xb2>
     542:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     549:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
     550:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 557 <_ZN6Parser16compileVariablesEP11QStringList+0xc7>
     557:	48 89 ce             	mov    %rcx,%rsi
     55a:	48 89 c7             	mov    %rax,%rdi
     55d:	e8 00 00 00 00       	callq  562 <_ZN6Parser16compileVariablesEP11QStringList+0xd2>
     562:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
     569:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     570:	b9 00 00 00 00       	mov    $0x0,%ecx
     575:	ba 01 00 00 00       	mov    $0x1,%edx
     57a:	48 89 c7             	mov    %rax,%rdi
     57d:	e8 00 00 00 00       	callq  582 <_ZN6Parser16compileVariablesEP11QStringList+0xf2>
     582:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     589:	48 89 c7             	mov    %rax,%rdi
     58c:	e8 00 00 00 00       	callq  591 <_ZN6Parser16compileVariablesEP11QStringList+0x101>
     591:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     598:	48 89 c7             	mov    %rax,%rdi
     59b:	e8 00 00 00 00       	callq  5a0 <_ZN6Parser16compileVariablesEP11QStringList+0x110>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     5a0:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     5a7:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
     5ae:	48 89 d6             	mov    %rdx,%rsi
     5b1:	48 89 c7             	mov    %rax,%rdi
     5b4:	e8 00 00 00 00       	callq  5b9 <_ZN6Parser16compileVariablesEP11QStringList+0x129>
     5b9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     5c0:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
     5c7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5ce <_ZN6Parser16compileVariablesEP11QStringList+0x13e>
     5ce:	48 89 ce             	mov    %rcx,%rsi
     5d1:	48 89 c7             	mov    %rax,%rdi
     5d4:	e8 00 00 00 00       	callq  5d9 <_ZN6Parser16compileVariablesEP11QStringList+0x149>
     5d9:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
     5e0:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     5e7:	b9 00 00 00 00       	mov    $0x0,%ecx
     5ec:	ba 01 00 00 00       	mov    $0x1,%edx
     5f1:	48 89 c7             	mov    %rax,%rdi
     5f4:	e8 00 00 00 00       	callq  5f9 <_ZN6Parser16compileVariablesEP11QStringList+0x169>
     5f9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     600:	48 89 c7             	mov    %rax,%rdi
     603:	e8 00 00 00 00       	callq  608 <_ZN6Parser16compileVariablesEP11QStringList+0x178>
     608:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     60f:	48 89 c7             	mov    %rax,%rdi
     612:	e8 00 00 00 00       	callq  617 <_ZN6Parser16compileVariablesEP11QStringList+0x187>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     617:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     61e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 625 <_ZN6Parser16compileVariablesEP11QStringList+0x195>
     625:	48 89 c7             	mov    %rax,%rdi
     628:	e8 00 00 00 00       	callq  62d <_ZN6Parser16compileVariablesEP11QStringList+0x19d>
     62d:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
     634:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     63b:	b9 00 00 00 00       	mov    $0x0,%ecx
     640:	ba 01 00 00 00       	mov    $0x1,%edx
     645:	48 89 c7             	mov    %rax,%rdi
     648:	e8 00 00 00 00       	callq  64d <_ZN6Parser16compileVariablesEP11QStringList+0x1bd>
     64d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     654:	48 89 c7             	mov    %rax,%rdi
     657:	e8 00 00 00 00       	callq  65c <_ZN6Parser16compileVariablesEP11QStringList+0x1cc>
    QRegExp erxVarName("\\w+");                              // имя
     65c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     663:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 66a <_ZN6Parser16compileVariablesEP11QStringList+0x1da>
     66a:	48 89 c7             	mov    %rax,%rdi
     66d:	e8 00 00 00 00       	callq  672 <_ZN6Parser16compileVariablesEP11QStringList+0x1e2>
     672:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
     679:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     680:	b9 00 00 00 00       	mov    $0x0,%ecx
     685:	ba 01 00 00 00       	mov    $0x1,%edx
     68a:	48 89 c7             	mov    %rax,%rdi
     68d:	e8 00 00 00 00       	callq  692 <_ZN6Parser16compileVariablesEP11QStringList+0x202>
     692:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     699:	48 89 c7             	mov    %rax,%rdi
     69c:	e8 00 00 00 00       	callq  6a1 <_ZN6Parser16compileVariablesEP11QStringList+0x211>

    QStringList types;
     6a1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     6a8:	48 89 c7             	mov    %rax,%rdi
     6ab:	e8 00 00 00 00       	callq  6b0 <_ZN6Parser16compileVariablesEP11QStringList+0x220>
    QStringList list;
     6b0:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     6b7:	48 89 c7             	mov    %rax,%rdi
     6ba:	e8 00 00 00 00       	callq  6bf <_ZN6Parser16compileVariablesEP11QStringList+0x22f>
    QStringList vars;
     6bf:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     6c6:	48 89 c7             	mov    %rax,%rdi
     6c9:	e8 00 00 00 00       	callq  6ce <_ZN6Parser16compileVariablesEP11QStringList+0x23e>

    int pos = 0;
     6ce:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%rbp)
     6d5:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     6d8:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6df:	48 89 c7             	mov    %rax,%rdi
     6e2:	e8 00 00 00 00       	callq  6e7 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
    for(sit = code.begin(); sit != code.end(); ++sit){
     6e7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     6ee:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     6f5:	48 89 d6             	mov    %rdx,%rsi
     6f8:	48 89 c7             	mov    %rax,%rdi
     6fb:	e8 00 00 00 00       	callq  700 <_ZN6Parser16compileVariablesEP11QStringList+0x270>
     700:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
     707:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
     70e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     715:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     71c:	48 89 d6             	mov    %rdx,%rsi
     71f:	48 89 c7             	mov    %rax,%rdi
     722:	e8 00 00 00 00       	callq  727 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     727:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     72e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     735:	48 89 d6             	mov    %rdx,%rsi
     738:	48 89 c7             	mov    %rax,%rdi
     73b:	e8 00 00 00 00       	callq  740 <_ZN6Parser16compileVariablesEP11QStringList+0x2b0>
     740:	84 c0                	test   %al,%al
     742:	0f 84 a0 01 00 00    	je     8e8 <_ZN6Parser16compileVariablesEP11QStringList+0x458>
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     748:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     74f:	48 89 c7             	mov    %rax,%rdi
     752:	e8 00 00 00 00       	callq  757 <_ZN6Parser16compileVariablesEP11QStringList+0x2c7>
     757:	48 89 c6             	mov    %rax,%rsi
     75a:	8b 95 a4 fd ff ff    	mov    -0x25c(%rbp),%edx
     760:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     767:	b9 00 00 00 00       	mov    $0x0,%ecx
     76c:	48 89 c7             	mov    %rax,%rdi
     76f:	e8 00 00 00 00       	callq  774 <_ZN6Parser16compileVariablesEP11QStringList+0x2e4>
     774:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%rbp)
     77a:	83 bd a4 fd ff ff ff 	cmpl   $0xffffffff,-0x25c(%rbp)
     781:	0f 95 c0             	setne  %al
     784:	84 c0                	test   %al,%al
     786:	0f 84 48 01 00 00    	je     8d4 <_ZN6Parser16compileVariablesEP11QStringList+0x444>
             types << erx.cap(1);
     78c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     793:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     79a:	ba 01 00 00 00       	mov    $0x1,%edx
     79f:	48 89 ce             	mov    %rcx,%rsi
     7a2:	48 89 c7             	mov    %rax,%rdi
     7a5:	e8 00 00 00 00       	callq  7aa <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     7aa:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     7b1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     7b8:	48 89 d6             	mov    %rdx,%rsi
     7bb:	48 89 c7             	mov    %rax,%rdi
     7be:	e8 00 00 00 00       	callq  7c3 <_ZN6Parser16compileVariablesEP11QStringList+0x333>
     7c3:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7ca:	48 89 c7             	mov    %rax,%rdi
     7cd:	e8 00 00 00 00       	callq  7d2 <_ZN6Parser16compileVariablesEP11QStringList+0x342>
             list << erx.cap(2);
     7d2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     7d9:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     7e0:	ba 02 00 00 00       	mov    $0x2,%edx
     7e5:	48 89 ce             	mov    %rcx,%rsi
     7e8:	48 89 c7             	mov    %rax,%rdi
     7eb:	e8 00 00 00 00       	callq  7f0 <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     7f0:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
     7f7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     7fe:	48 89 d6             	mov    %rdx,%rsi
     801:	48 89 c7             	mov    %rax,%rdi
     804:	e8 00 00 00 00       	callq  809 <_ZN6Parser16compileVariablesEP11QStringList+0x379>
     809:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     810:	48 89 c7             	mov    %rax,%rdi
     813:	e8 00 00 00 00       	callq  818 <_ZN6Parser16compileVariablesEP11QStringList+0x388>
             pos += erx.matchedLength();
     818:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     81f:	48 89 c7             	mov    %rax,%rdi
     822:	e8 00 00 00 00       	callq  827 <_ZN6Parser16compileVariablesEP11QStringList+0x397>
     827:	01 85 a4 fd ff ff    	add    %eax,-0x25c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     82d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     834:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 83b <_ZN6Parser16compileVariablesEP11QStringList+0x3ab>
     83b:	48 89 c7             	mov    %rax,%rdi
     83e:	e8 00 00 00 00       	callq  843 <_ZN6Parser16compileVariablesEP11QStringList+0x3b3>
     843:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     84a:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     851:	ba 02 00 00 00       	mov    $0x2,%edx
     856:	48 89 ce             	mov    %rcx,%rsi
     859:	48 89 c7             	mov    %rax,%rdi
     85c:	e8 00 00 00 00       	callq  861 <_ZN6Parser16compileVariablesEP11QStringList+0x3d1>
     861:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     868:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
     86f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
     876:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     87c:	b9 00 00 00 00       	mov    $0x0,%ecx
     881:	48 89 c7             	mov    %rax,%rdi
     884:	e8 00 00 00 00       	callq  889 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     889:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
     890:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     897:	48 89 d6             	mov    %rdx,%rsi
     89a:	48 89 c7             	mov    %rax,%rdi
     89d:	e8 00 00 00 00       	callq  8a2 <_ZN6Parser16compileVariablesEP11QStringList+0x412>
     8a2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     8a9:	48 89 c7             	mov    %rax,%rdi
     8ac:	e8 00 00 00 00       	callq  8b1 <_ZN6Parser16compileVariablesEP11QStringList+0x421>
     8b1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8b8:	48 89 c7             	mov    %rax,%rdi
     8bb:	e8 00 00 00 00       	callq  8c0 <_ZN6Parser16compileVariablesEP11QStringList+0x430>
     8c0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     8c7:	48 89 c7             	mov    %rax,%rdi
     8ca:	e8 00 00 00 00       	callq  8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
     8cf:	e9 74 fe ff ff       	jmpq   748 <_ZN6Parser16compileVariablesEP11QStringList+0x2b8>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
     8d4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     8db:	48 89 c7             	mov    %rax,%rdi
     8de:	e8 00 00 00 00       	callq  8e3 <_ZN6Parser16compileVariablesEP11QStringList+0x453>
     8e3:	e9 26 fe ff ff       	jmpq   70e <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     8e8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     8ef:	48 89 c7             	mov    %rax,%rdi
     8f2:	e8 00 00 00 00       	callq  8f7 <_ZN6Parser16compileVariablesEP11QStringList+0x467>
    QString name, type, value;
     8f7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     8fe:	48 89 c7             	mov    %rax,%rdi
     901:	e8 00 00 00 00       	callq  906 <_ZN6Parser16compileVariablesEP11QStringList+0x476>
     906:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     90d:	48 89 c7             	mov    %rax,%rdi
     910:	e8 00 00 00 00       	callq  915 <_ZN6Parser16compileVariablesEP11QStringList+0x485>
     915:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     91c:	48 89 c7             	mov    %rax,%rdi
     91f:	e8 00 00 00 00       	callq  924 <_ZN6Parser16compileVariablesEP11QStringList+0x494>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;
     924:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     928:	48 89 c7             	mov    %rax,%rdi
     92b:	e8 00 00 00 00       	callq  930 <_ZN6Parser16compileVariablesEP11QStringList+0x4a0>

    for(it=vars.begin(); it!=vars.end(); ++it){
     930:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     934:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     93b:	48 89 d6             	mov    %rdx,%rsi
     93e:	48 89 c7             	mov    %rax,%rdi
     941:	e8 00 00 00 00       	callq  946 <_ZN6Parser16compileVariablesEP11QStringList+0x4b6>
     946:	48 8b 45 90          	mov    -0x70(%rbp),%rax
     94a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
     951:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     955:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
     95c:	48 89 d6             	mov    %rdx,%rsi
     95f:	48 89 c7             	mov    %rax,%rdi
     962:	e8 00 00 00 00       	callq  967 <_ZN6Parser16compileVariablesEP11QStringList+0x4d7>
     967:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     96b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     972:	48 89 d6             	mov    %rdx,%rsi
     975:	48 89 c7             	mov    %rax,%rdi
     978:	e8 00 00 00 00       	callq  97d <_ZN6Parser16compileVariablesEP11QStringList+0x4ed>
     97d:	84 c0                	test   %al,%al
     97f:	0f 84 f3 01 00 00    	je     b78 <_ZN6Parser16compileVariablesEP11QStringList+0x6e8>
        QString all = *it;
     985:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     98c:	48 89 c7             	mov    %rax,%rdi
     98f:	e8 00 00 00 00       	callq  994 <_ZN6Parser16compileVariablesEP11QStringList+0x504>
     994:	48 89 c2             	mov    %rax,%rdx
     997:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     99b:	48 89 d6             	mov    %rdx,%rsi
     99e:	48 89 c7             	mov    %rax,%rdi
     9a1:	e8 00 00 00 00       	callq  9a6 <_ZN6Parser16compileVariablesEP11QStringList+0x516>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     9a6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9ad:	48 89 c7             	mov    %rax,%rdi
     9b0:	e8 00 00 00 00       	callq  9b5 <_ZN6Parser16compileVariablesEP11QStringList+0x525>
     9b5:	48 89 c6             	mov    %rax,%rsi
     9b8:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     9bf:	b9 00 00 00 00       	mov    $0x0,%ecx
     9c4:	ba 00 00 00 00       	mov    $0x0,%edx
     9c9:	48 89 c7             	mov    %rax,%rdi
     9cc:	e8 00 00 00 00       	callq  9d1 <_ZN6Parser16compileVariablesEP11QStringList+0x541>
     9d1:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%rbp)

        int indexVarName = erxVarName.indexIn(*it);
     9d7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     9de:	48 89 c7             	mov    %rax,%rdi
     9e1:	e8 00 00 00 00       	callq  9e6 <_ZN6Parser16compileVariablesEP11QStringList+0x556>
     9e6:	48 89 c6             	mov    %rax,%rsi
     9e9:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     9f0:	b9 00 00 00 00       	mov    $0x0,%ecx
     9f5:	ba 00 00 00 00       	mov    $0x0,%edx
     9fa:	48 89 c7             	mov    %rax,%rdi
     9fd:	e8 00 00 00 00       	callq  a02 <_ZN6Parser16compileVariablesEP11QStringList+0x572>
     a02:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     a08:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     a0f:	48 89 c7             	mov    %rax,%rdi
     a12:	e8 00 00 00 00       	callq  a17 <_ZN6Parser16compileVariablesEP11QStringList+0x587>
     a17:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%rbp)
        int countVarName = erxVarName.captureCount();
     a1d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     a24:	48 89 c7             	mov    %rax,%rdi
     a27:	e8 00 00 00 00       	callq  a2c <_ZN6Parser16compileVariablesEP11QStringList+0x59c>
     a2c:	89 85 bc fd ff ff    	mov    %eax,-0x244(%rbp)

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     a32:	83 bd b0 fd ff ff 00 	cmpl   $0x0,-0x250(%rbp)
     a39:	78 3f                	js     a7a <_ZN6Parser16compileVariablesEP11QStringList+0x5ea>
     a3b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a3f:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
     a46:	ba 01 00 00 00       	mov    $0x1,%edx
     a4b:	48 89 ce             	mov    %rcx,%rsi
     a4e:	48 89 c7             	mov    %rax,%rdi
     a51:	e8 00 00 00 00       	callq  a56 <_ZN6Parser16compileVariablesEP11QStringList+0x5c6>
     a56:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     a5a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     a61:	48 89 d6             	mov    %rdx,%rsi
     a64:	48 89 c7             	mov    %rax,%rdi
     a67:	e8 00 00 00 00       	callq  a6c <_ZN6Parser16compileVariablesEP11QStringList+0x5dc>
     a6c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     a70:	48 89 c7             	mov    %rax,%rdi
     a73:	e8 00 00 00 00       	callq  a78 <_ZN6Parser16compileVariablesEP11QStringList+0x5e8>
     a78:	eb 3d                	jmp    ab7 <_ZN6Parser16compileVariablesEP11QStringList+0x627>
        }else{name = erxVarName.cap(0);}
     a7a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     a7e:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
     a85:	ba 00 00 00 00       	mov    $0x0,%edx
     a8a:	48 89 ce             	mov    %rcx,%rsi
     a8d:	48 89 c7             	mov    %rax,%rdi
     a90:	e8 00 00 00 00       	callq  a95 <_ZN6Parser16compileVariablesEP11QStringList+0x605>
     a95:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     a99:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     aa0:	48 89 d6             	mov    %rdx,%rsi
     aa3:	48 89 c7             	mov    %rax,%rdi
     aa6:	e8 00 00 00 00       	callq  aab <_ZN6Parser16compileVariablesEP11QStringList+0x61b>
     aab:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     aaf:	48 89 c7             	mov    %rax,%rdi
     ab2:	e8 00 00 00 00       	callq  ab7 <_ZN6Parser16compileVariablesEP11QStringList+0x627>

        index        = this->varIndexes.take(name);
     ab7:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     abe:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
     ac5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     acc:	48 89 c6             	mov    %rax,%rsi
     acf:	48 89 d7             	mov    %rdx,%rdi
     ad2:	e8 00 00 00 00       	callq  ad7 <_ZN6Parser16compileVariablesEP11QStringList+0x647>
     ad7:	0f b6 c0             	movzbl %al,%eax
     ada:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)
        assignment   = this->varTypes.take(index);
     ae0:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     ae6:	88 45 d0             	mov    %al,-0x30(%rbp)
     ae9:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
     af0:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx
     af7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     afb:	48 89 c6             	mov    %rax,%rsi
     afe:	48 89 d7             	mov    %rdx,%rdi
     b01:	e8 00 00 00 00       	callq  b06 <_ZN6Parser16compileVariablesEP11QStringList+0x676>
     b06:	88 85 a1 fd ff ff    	mov    %al,-0x25f(%rbp)
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     b0c:	0f b6 8d a1 fd ff ff 	movzbl -0x25f(%rbp),%ecx
     b13:	8b 85 ac fd ff ff    	mov    -0x254(%rbp),%eax
     b19:	0f b6 d0             	movzbl %al,%edx
     b1c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b20:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
     b24:	48 8b b5 90 fd ff ff 	mov    -0x270(%rbp),%rsi
     b2b:	49 89 f8             	mov    %rdi,%r8
     b2e:	48 89 c7             	mov    %rax,%rdi
     b31:	e8 00 00 00 00       	callq  b36 <_ZN6Parser16compileVariablesEP11QStringList+0x6a6>
     b36:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     b3a:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     b41:	48 89 d6             	mov    %rdx,%rsi
     b44:	48 89 c7             	mov    %rax,%rdi
     b47:	e8 00 00 00 00       	callq  b4c <_ZN6Parser16compileVariablesEP11QStringList+0x6bc>
     b4c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     b50:	48 89 c7             	mov    %rax,%rdi
     b53:	e8 00 00 00 00       	callq  b58 <_ZN6Parser16compileVariablesEP11QStringList+0x6c8>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     b58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b5c:	48 89 c7             	mov    %rax,%rdi
     b5f:	e8 00 00 00 00       	callq  b64 <_ZN6Parser16compileVariablesEP11QStringList+0x6d4>
    QString name, type, value;
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
     b64:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     b6b:	48 89 c7             	mov    %rax,%rdi
     b6e:	e8 00 00 00 00       	callq  b73 <_ZN6Parser16compileVariablesEP11QStringList+0x6e3>
     b73:	e9 d9 fd ff ff       	jmpq   951 <_ZN6Parser16compileVariablesEP11QStringList+0x4c1>
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
     b78:	66 c7 85 a2 fd ff ff 	movw   $0xff,-0x25e(%rbp)
     b7f:	ff 00 
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     b81:	0f b7 85 a2 fd ff ff 	movzwl -0x25e(%rbp),%eax
     b88:	0f b6 d0             	movzbl %al,%edx
     b8b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b8f:	48 8d 8d c0 fd ff ff 	lea    -0x240(%rbp),%rcx
     b96:	48 8d b5 a0 fd ff ff 	lea    -0x260(%rbp),%rsi
     b9d:	49 89 c9             	mov    %rcx,%r9
     ba0:	41 89 d0             	mov    %edx,%r8d
     ba3:	b9 11 00 00 00       	mov    $0x11,%ecx
     ba8:	ba ff 00 00 00       	mov    $0xff,%edx
     bad:	48 89 c7             	mov    %rax,%rdi
     bb0:	e8 00 00 00 00       	callq  bb5 <_ZN6Parser16compileVariablesEP11QStringList+0x725>
     bb5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     bb9:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     bc0:	48 89 d6             	mov    %rdx,%rsi
     bc3:	48 89 c7             	mov    %rax,%rdi
     bc6:	e8 00 00 00 00       	callq  bcb <_ZN6Parser16compileVariablesEP11QStringList+0x73b>
     bcb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bcf:	48 89 c7             	mov    %rax,%rdi
     bd2:	e8 00 00 00 00       	callq  bd7 <_ZN6Parser16compileVariablesEP11QStringList+0x747>

    return result;
     bd7:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     bd8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     bdf:	48 89 c7             	mov    %rax,%rdi
     be2:	e8 00 00 00 00       	callq  be7 <_ZN6Parser16compileVariablesEP11QStringList+0x757>
     be7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     bee:	48 89 c7             	mov    %rax,%rdi
     bf1:	e8 00 00 00 00       	callq  bf6 <_ZN6Parser16compileVariablesEP11QStringList+0x766>
     bf6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     bfd:	48 89 c7             	mov    %rax,%rdi
     c00:	e8 00 00 00 00       	callq  c05 <_ZN6Parser16compileVariablesEP11QStringList+0x775>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     c05:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     c0c:	48 89 c7             	mov    %rax,%rdi
     c0f:	e8 00 00 00 00       	callq  c14 <_ZN6Parser16compileVariablesEP11QStringList+0x784>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c14:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     c1b:	48 89 c7             	mov    %rax,%rdi
     c1e:	e8 00 00 00 00       	callq  c23 <_ZN6Parser16compileVariablesEP11QStringList+0x793>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c23:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     c2a:	48 89 c7             	mov    %rax,%rdi
     c2d:	e8 00 00 00 00       	callq  c32 <_ZN6Parser16compileVariablesEP11QStringList+0x7a2>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     c32:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     c39:	48 89 c7             	mov    %rax,%rdi
     c3c:	e8 00 00 00 00       	callq  c41 <_ZN6Parser16compileVariablesEP11QStringList+0x7b1>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     c41:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     c48:	48 89 c7             	mov    %rax,%rdi
     c4b:	e8 00 00 00 00       	callq  c50 <_ZN6Parser16compileVariablesEP11QStringList+0x7c0>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     c50:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     c57:	48 89 c7             	mov    %rax,%rdi
     c5a:	e8 00 00 00 00       	callq  c5f <_ZN6Parser16compileVariablesEP11QStringList+0x7cf>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     c5f:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     c66:	48 89 c7             	mov    %rax,%rdi
     c69:	e8 00 00 00 00       	callq  c6e <_ZN6Parser16compileVariablesEP11QStringList+0x7de>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     c6e:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     c75:	48 89 c7             	mov    %rax,%rdi
     c78:	e8 00 00 00 00       	callq  c7d <_ZN6Parser16compileVariablesEP11QStringList+0x7ed>

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     c7d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     c84:	48 89 c7             	mov    %rax,%rdi
     c87:	e8 00 00 00 00       	callq  c8c <_ZN6Parser16compileVariablesEP11QStringList+0x7fc>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     c8c:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     c93:	48 89 c7             	mov    %rax,%rdi
     c96:	e8 00 00 00 00       	callq  c9b <_ZN6Parser16compileVariablesEP11QStringList+0x80b>
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
     c9b:	e9 eb 02 00 00       	jmpq   f8b <_ZN6Parser16compileVariablesEP11QStringList+0xafb>
     ca0:	48 89 c3             	mov    %rax,%rbx
     ca3:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     caa:	48 89 c7             	mov    %rax,%rdi
     cad:	e8 00 00 00 00       	callq  cb2 <_ZN6Parser16compileVariablesEP11QStringList+0x822>
     cb2:	eb 17                	jmp    ccb <_ZN6Parser16compileVariablesEP11QStringList+0x83b>
     cb4:	48 89 c3             	mov    %rax,%rbx
     cb7:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     cbe:	48 89 c7             	mov    %rax,%rdi
     cc1:	e8 00 00 00 00       	callq  cc6 <_ZN6Parser16compileVariablesEP11QStringList+0x836>
     cc6:	eb 03                	jmp    ccb <_ZN6Parser16compileVariablesEP11QStringList+0x83b>
     cc8:	48 89 c3             	mov    %rax,%rbx
     ccb:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     cd2:	48 89 c7             	mov    %rax,%rdi
     cd5:	e8 00 00 00 00       	callq  cda <_ZN6Parser16compileVariablesEP11QStringList+0x84a>
     cda:	e9 56 02 00 00       	jmpq   f35 <_ZN6Parser16compileVariablesEP11QStringList+0xaa5>
     cdf:	48 89 c3             	mov    %rax,%rbx
     ce2:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     ce9:	48 89 c7             	mov    %rax,%rdi
     cec:	e8 00 00 00 00       	callq  cf1 <_ZN6Parser16compileVariablesEP11QStringList+0x861>
     cf1:	e9 3f 02 00 00       	jmpq   f35 <_ZN6Parser16compileVariablesEP11QStringList+0xaa5>
     cf6:	48 89 c3             	mov    %rax,%rbx
     cf9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     d00:	48 89 c7             	mov    %rax,%rdi
     d03:	e8 00 00 00 00       	callq  d08 <_ZN6Parser16compileVariablesEP11QStringList+0x878>
     d08:	eb 17                	jmp    d21 <_ZN6Parser16compileVariablesEP11QStringList+0x891>
     d0a:	48 89 c3             	mov    %rax,%rbx
     d0d:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d14:	48 89 c7             	mov    %rax,%rdi
     d17:	e8 00 00 00 00       	callq  d1c <_ZN6Parser16compileVariablesEP11QStringList+0x88c>
     d1c:	eb 03                	jmp    d21 <_ZN6Parser16compileVariablesEP11QStringList+0x891>
     d1e:	48 89 c3             	mov    %rax,%rbx
     d21:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     d28:	48 89 c7             	mov    %rax,%rdi
     d2b:	e8 00 00 00 00       	callq  d30 <_ZN6Parser16compileVariablesEP11QStringList+0x8a0>
     d30:	e9 ec 01 00 00       	jmpq   f21 <_ZN6Parser16compileVariablesEP11QStringList+0xa91>
     d35:	48 89 c3             	mov    %rax,%rbx
     d38:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d3f:	48 89 c7             	mov    %rax,%rdi
     d42:	e8 00 00 00 00       	callq  d47 <_ZN6Parser16compileVariablesEP11QStringList+0x8b7>
     d47:	e9 d5 01 00 00       	jmpq   f21 <_ZN6Parser16compileVariablesEP11QStringList+0xa91>
     d4c:	48 89 c3             	mov    %rax,%rbx
     d4f:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     d56:	48 89 c7             	mov    %rax,%rdi
     d59:	e8 00 00 00 00       	callq  d5e <_ZN6Parser16compileVariablesEP11QStringList+0x8ce>
     d5e:	e9 aa 01 00 00       	jmpq   f0d <_ZN6Parser16compileVariablesEP11QStringList+0xa7d>
     d63:	48 89 c3             	mov    %rax,%rbx
     d66:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     d6d:	48 89 c7             	mov    %rax,%rdi
     d70:	e8 00 00 00 00       	callq  d75 <_ZN6Parser16compileVariablesEP11QStringList+0x8e5>
     d75:	e9 93 01 00 00       	jmpq   f0d <_ZN6Parser16compileVariablesEP11QStringList+0xa7d>
     d7a:	48 89 c3             	mov    %rax,%rbx
     d7d:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     d84:	48 89 c7             	mov    %rax,%rdi
     d87:	e8 00 00 00 00       	callq  d8c <_ZN6Parser16compileVariablesEP11QStringList+0x8fc>
     d8c:	e9 68 01 00 00       	jmpq   ef9 <_ZN6Parser16compileVariablesEP11QStringList+0xa69>
     d91:	48 89 c3             	mov    %rax,%rbx
     d94:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     d9b:	48 89 c7             	mov    %rax,%rdi
     d9e:	e8 00 00 00 00       	callq  da3 <_ZN6Parser16compileVariablesEP11QStringList+0x913>
     da3:	e9 51 01 00 00       	jmpq   ef9 <_ZN6Parser16compileVariablesEP11QStringList+0xa69>
     da8:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
        while ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     dab:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     db2:	48 89 c7             	mov    %rax,%rdi
     db5:	e8 00 00 00 00       	callq  dba <_ZN6Parser16compileVariablesEP11QStringList+0x92a>
     dba:	e9 ea 00 00 00       	jmpq   ea9 <_ZN6Parser16compileVariablesEP11QStringList+0xa19>
     dbf:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     dc2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     dc9:	48 89 c7             	mov    %rax,%rdi
     dcc:	e8 00 00 00 00       	callq  dd1 <_ZN6Parser16compileVariablesEP11QStringList+0x941>
     dd1:	e9 d3 00 00 00       	jmpq   ea9 <_ZN6Parser16compileVariablesEP11QStringList+0xa19>
     dd6:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     dd9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     de0:	48 89 c7             	mov    %rax,%rdi
     de3:	e8 00 00 00 00       	callq  de8 <_ZN6Parser16compileVariablesEP11QStringList+0x958>
     de8:	eb 03                	jmp    ded <_ZN6Parser16compileVariablesEP11QStringList+0x95d>
     dea:	48 89 c3             	mov    %rax,%rbx
     ded:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     df4:	48 89 c7             	mov    %rax,%rdi
     df7:	e8 00 00 00 00       	callq  dfc <_ZN6Parser16compileVariablesEP11QStringList+0x96c>
     dfc:	eb 03                	jmp    e01 <_ZN6Parser16compileVariablesEP11QStringList+0x971>
     dfe:	48 89 c3             	mov    %rax,%rbx
     e01:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     e08:	48 89 c7             	mov    %rax,%rdi
     e0b:	e8 00 00 00 00       	callq  e10 <_ZN6Parser16compileVariablesEP11QStringList+0x980>
     e10:	e9 94 00 00 00       	jmpq   ea9 <_ZN6Parser16compileVariablesEP11QStringList+0xa19>
     e15:	48 89 c3             	mov    %rax,%rbx

        int indexVarName = erxVarName.indexIn(*it);
        int countRgPort  = erx_rgPort.captureCount();
        int countVarName = erxVarName.captureCount();

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     e18:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     e1c:	48 89 c7             	mov    %rax,%rdi
     e1f:	e8 00 00 00 00       	callq  e24 <_ZN6Parser16compileVariablesEP11QStringList+0x994>
     e24:	eb 25                	jmp    e4b <_ZN6Parser16compileVariablesEP11QStringList+0x9bb>
     e26:	48 89 c3             	mov    %rax,%rbx
        }else{name = erxVarName.cap(0);}
     e29:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e2d:	48 89 c7             	mov    %rax,%rdi
     e30:	e8 00 00 00 00       	callq  e35 <_ZN6Parser16compileVariablesEP11QStringList+0x9a5>
     e35:	eb 14                	jmp    e4b <_ZN6Parser16compileVariablesEP11QStringList+0x9bb>
     e37:	48 89 c3             	mov    %rax,%rbx

        index        = this->varIndexes.take(name);
        assignment   = this->varTypes.take(index);
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     e3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     e3e:	48 89 c7             	mov    %rax,%rdi
     e41:	e8 00 00 00 00       	callq  e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e46:	eb 03                	jmp    e4b <_ZN6Parser16compileVariablesEP11QStringList+0x9bb>
     e48:	48 89 c3             	mov    %rax,%rbx
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     e4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e4f:	48 89 c7             	mov    %rax,%rdi
     e52:	e8 00 00 00 00       	callq  e57 <_ZN6Parser16compileVariablesEP11QStringList+0x9c7>
     e57:	eb 14                	jmp    e6d <_ZN6Parser16compileVariablesEP11QStringList+0x9dd>
     e59:	48 89 c3             	mov    %rax,%rbx

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     e5c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e60:	48 89 c7             	mov    %rax,%rdi
     e63:	e8 00 00 00 00       	callq  e68 <_ZN6Parser16compileVariablesEP11QStringList+0x9d8>
     e68:	eb 03                	jmp    e6d <_ZN6Parser16compileVariablesEP11QStringList+0x9dd>
     e6a:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     e6d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     e74:	48 89 c7             	mov    %rax,%rdi
     e77:	e8 00 00 00 00       	callq  e7c <_ZN6Parser16compileVariablesEP11QStringList+0x9ec>
     e7c:	eb 03                	jmp    e81 <_ZN6Parser16compileVariablesEP11QStringList+0x9f1>
     e7e:	48 89 c3             	mov    %rax,%rbx
     e81:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     e88:	48 89 c7             	mov    %rax,%rdi
     e8b:	e8 00 00 00 00       	callq  e90 <_ZN6Parser16compileVariablesEP11QStringList+0xa00>
     e90:	eb 03                	jmp    e95 <_ZN6Parser16compileVariablesEP11QStringList+0xa05>
     e92:	48 89 c3             	mov    %rax,%rbx
     e95:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     e9c:	48 89 c7             	mov    %rax,%rdi
     e9f:	e8 00 00 00 00       	callq  ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     ea4:	eb 03                	jmp    ea9 <_ZN6Parser16compileVariablesEP11QStringList+0xa19>
     ea6:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     ea9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     eb0:	48 89 c7             	mov    %rax,%rdi
     eb3:	e8 00 00 00 00       	callq  eb8 <_ZN6Parser16compileVariablesEP11QStringList+0xa28>
     eb8:	eb 03                	jmp    ebd <_ZN6Parser16compileVariablesEP11QStringList+0xa2d>
     eba:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     ebd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     ec4:	48 89 c7             	mov    %rax,%rdi
     ec7:	e8 00 00 00 00       	callq  ecc <_ZN6Parser16compileVariablesEP11QStringList+0xa3c>
     ecc:	eb 03                	jmp    ed1 <_ZN6Parser16compileVariablesEP11QStringList+0xa41>
     ece:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     ed1:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     ed8:	48 89 c7             	mov    %rax,%rdi
     edb:	e8 00 00 00 00       	callq  ee0 <_ZN6Parser16compileVariablesEP11QStringList+0xa50>
     ee0:	eb 03                	jmp    ee5 <_ZN6Parser16compileVariablesEP11QStringList+0xa55>
     ee2:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     ee5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     eec:	48 89 c7             	mov    %rax,%rdi
     eef:	e8 00 00 00 00       	callq  ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     ef4:	eb 03                	jmp    ef9 <_ZN6Parser16compileVariablesEP11QStringList+0xa69>
     ef6:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     ef9:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     f00:	48 89 c7             	mov    %rax,%rdi
     f03:	e8 00 00 00 00       	callq  f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     f08:	eb 03                	jmp    f0d <_ZN6Parser16compileVariablesEP11QStringList+0xa7d>
     f0a:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     f0d:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     f14:	48 89 c7             	mov    %rax,%rdi
     f17:	e8 00 00 00 00       	callq  f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     f1c:	eb 03                	jmp    f21 <_ZN6Parser16compileVariablesEP11QStringList+0xa91>
     f1e:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     f21:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     f28:	48 89 c7             	mov    %rax,%rdi
     f2b:	e8 00 00 00 00       	callq  f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     f30:	eb 03                	jmp    f35 <_ZN6Parser16compileVariablesEP11QStringList+0xaa5>
     f32:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     f35:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     f3c:	48 89 c7             	mov    %rax,%rdi
     f3f:	e8 00 00 00 00       	callq  f44 <_ZN6Parser16compileVariablesEP11QStringList+0xab4>
     f44:	eb 03                	jmp    f49 <_ZN6Parser16compileVariablesEP11QStringList+0xab9>
     f46:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     f49:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     f50:	48 89 c7             	mov    %rax,%rdi
     f53:	e8 00 00 00 00       	callq  f58 <_ZN6Parser16compileVariablesEP11QStringList+0xac8>
     f58:	eb 03                	jmp    f5d <_ZN6Parser16compileVariablesEP11QStringList+0xacd>
     f5a:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     f5d:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     f64:	48 89 c7             	mov    %rax,%rdi
     f67:	e8 00 00 00 00       	callq  f6c <_ZN6Parser16compileVariablesEP11QStringList+0xadc>
     f6c:	eb 03                	jmp    f71 <_ZN6Parser16compileVariablesEP11QStringList+0xae1>
     f6e:	48 89 c3             	mov    %rax,%rbx
     f71:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f78:	48 89 c7             	mov    %rax,%rdi
     f7b:	e8 00 00 00 00       	callq  f80 <_ZN6Parser16compileVariablesEP11QStringList+0xaf0>
     f80:	48 89 d8             	mov    %rbx,%rax
     f83:	48 89 c7             	mov    %rax,%rdi
     f86:	e8 00 00 00 00       	callq  f8b <_ZN6Parser16compileVariablesEP11QStringList+0xafb>

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
}
     f8b:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
     f92:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     f96:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     f9d:	00 00 
     f9f:	74 05                	je     fa6 <_ZN6Parser16compileVariablesEP11QStringList+0xb16>
     fa1:	e8 00 00 00 00       	callq  fa6 <_ZN6Parser16compileVariablesEP11QStringList+0xb16>
     fa6:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
     fad:	5b                   	pop    %rbx
     fae:	5d                   	pop    %rbp
     faf:	c3                   	retq   

0000000000000fb0 <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     fb0:	55                   	push   %rbp
     fb1:	48 89 e5             	mov    %rsp,%rbp
     fb4:	53                   	push   %rbx
     fb5:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     fbc:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     fc3:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     fca:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fd1:	00 00 
     fd3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     fd7:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     fd9:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     fe0:	00 00 00 
    int index   = 0;
     fe3:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     fea:	00 00 00 

    VarTypes VT;
     fed:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     ff4:	48 89 c7             	mov    %rax,%rdi
     ff7:	e8 00 00 00 00       	callq  ffc <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     ffc:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1003:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    100a:	48 89 d6             	mov    %rdx,%rsi
    100d:	48 89 c7             	mov    %rax,%rdi
    1010:	e8 00 00 00 00       	callq  1015 <_ZN6Parser14checkVariablesEP7QString+0x65>
    1015:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    101c:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    1023:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 102a <_ZN6Parser14checkVariablesEP7QString+0x7a>
    102a:	48 89 ce             	mov    %rcx,%rsi
    102d:	48 89 c7             	mov    %rax,%rdi
    1030:	e8 00 00 00 00       	callq  1035 <_ZN6Parser14checkVariablesEP7QString+0x85>
    1035:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    103c:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1043:	b9 00 00 00 00       	mov    $0x0,%ecx
    1048:	ba 01 00 00 00       	mov    $0x1,%edx
    104d:	48 89 c7             	mov    %rax,%rdi
    1050:	e8 00 00 00 00       	callq  1055 <_ZN6Parser14checkVariablesEP7QString+0xa5>
    1055:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    105c:	48 89 c7             	mov    %rax,%rdi
    105f:	e8 00 00 00 00       	callq  1064 <_ZN6Parser14checkVariablesEP7QString+0xb4>
    1064:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    106b:	48 89 c7             	mov    %rax,%rdi
    106e:	e8 00 00 00 00       	callq  1073 <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1073:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    107a:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1081:	48 89 d6             	mov    %rdx,%rsi
    1084:	48 89 c7             	mov    %rax,%rdi
    1087:	e8 00 00 00 00       	callq  108c <_ZN6Parser14checkVariablesEP7QString+0xdc>
    108c:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    1093:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    109a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 10a1 <_ZN6Parser14checkVariablesEP7QString+0xf1>
    10a1:	48 89 ce             	mov    %rcx,%rsi
    10a4:	48 89 c7             	mov    %rax,%rdi
    10a7:	e8 00 00 00 00       	callq  10ac <_ZN6Parser14checkVariablesEP7QString+0xfc>
    10ac:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    10b3:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    10ba:	b9 00 00 00 00       	mov    $0x0,%ecx
    10bf:	ba 01 00 00 00       	mov    $0x1,%edx
    10c4:	48 89 c7             	mov    %rax,%rdi
    10c7:	e8 00 00 00 00       	callq  10cc <_ZN6Parser14checkVariablesEP7QString+0x11c>
    10cc:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    10d3:	48 89 c7             	mov    %rax,%rdi
    10d6:	e8 00 00 00 00       	callq  10db <_ZN6Parser14checkVariablesEP7QString+0x12b>
    10db:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    10e2:	48 89 c7             	mov    %rax,%rdi
    10e5:	e8 00 00 00 00       	callq  10ea <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    10ea:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    10f1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10f8 <_ZN6Parser14checkVariablesEP7QString+0x148>
    10f8:	48 89 c7             	mov    %rax,%rdi
    10fb:	e8 00 00 00 00       	callq  1100 <_ZN6Parser14checkVariablesEP7QString+0x150>
    1100:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    1107:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    110e:	b9 00 00 00 00       	mov    $0x0,%ecx
    1113:	ba 01 00 00 00       	mov    $0x1,%edx
    1118:	48 89 c7             	mov    %rax,%rdi
    111b:	e8 00 00 00 00       	callq  1120 <_ZN6Parser14checkVariablesEP7QString+0x170>
    1120:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1127:	48 89 c7             	mov    %rax,%rdi
    112a:	e8 00 00 00 00       	callq  112f <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    112f:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1136:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 113d <_ZN6Parser14checkVariablesEP7QString+0x18d>
    113d:	48 89 c7             	mov    %rax,%rdi
    1140:	e8 00 00 00 00       	callq  1145 <_ZN6Parser14checkVariablesEP7QString+0x195>
    1145:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    114c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1153:	b9 00 00 00 00       	mov    $0x0,%ecx
    1158:	ba 01 00 00 00       	mov    $0x1,%edx
    115d:	48 89 c7             	mov    %rax,%rdi
    1160:	e8 00 00 00 00       	callq  1165 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    1165:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    116c:	48 89 c7             	mov    %rax,%rdi
    116f:	e8 00 00 00 00       	callq  1174 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    1174:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    117b:	48 89 c7             	mov    %rax,%rdi
    117e:	e8 00 00 00 00       	callq  1183 <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    1183:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    118a:	48 89 c7             	mov    %rax,%rdi
    118d:	e8 00 00 00 00       	callq  1192 <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    1192:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1199:	48 89 c7             	mov    %rax,%rdi
    119c:	e8 00 00 00 00       	callq  11a1 <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    11a1:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    11a8:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    11ab:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    11b1:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    11b8:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    11bf:	b9 00 00 00 00       	mov    $0x0,%ecx
    11c4:	48 89 c7             	mov    %rax,%rdi
    11c7:	e8 00 00 00 00       	callq  11cc <_ZN6Parser14checkVariablesEP7QString+0x21c>
    11cc:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    11d2:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    11d9:	0f 95 c0             	setne  %al
    11dc:	84 c0                	test   %al,%al
    11de:	0f 84 68 01 00 00    	je     134c <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    11e4:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    11eb:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    11f2:	ba 01 00 00 00       	mov    $0x1,%edx
    11f7:	48 89 ce             	mov    %rcx,%rsi
    11fa:	48 89 c7             	mov    %rax,%rdi
    11fd:	e8 00 00 00 00       	callq  1202 <_ZN6Parser14checkVariablesEP7QString+0x252>
    1202:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    1209:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1210:	48 89 d6             	mov    %rdx,%rsi
    1213:	48 89 c7             	mov    %rax,%rdi
    1216:	e8 00 00 00 00       	callq  121b <_ZN6Parser14checkVariablesEP7QString+0x26b>
    121b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    1222:	48 89 c7             	mov    %rax,%rdi
    1225:	e8 00 00 00 00       	callq  122a <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    122a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1231:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1238:	ba 02 00 00 00       	mov    $0x2,%edx
    123d:	48 89 ce             	mov    %rcx,%rsi
    1240:	48 89 c7             	mov    %rax,%rdi
    1243:	e8 00 00 00 00       	callq  1248 <_ZN6Parser14checkVariablesEP7QString+0x298>
    1248:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    124f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1256:	48 89 d6             	mov    %rdx,%rsi
    1259:	48 89 c7             	mov    %rax,%rdi
    125c:	e8 00 00 00 00       	callq  1261 <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    1261:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1268:	48 89 c7             	mov    %rax,%rdi
    126b:	e8 00 00 00 00       	callq  1270 <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    1270:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1277:	48 89 c7             	mov    %rax,%rdi
    127a:	e8 00 00 00 00       	callq  127f <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    127f:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    1285:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    128c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1293 <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    1293:	48 89 c7             	mov    %rax,%rdi
    1296:	e8 00 00 00 00       	callq  129b <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    129b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    12a2:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    12a9:	ba 02 00 00 00       	mov    $0x2,%edx
    12ae:	48 89 ce             	mov    %rcx,%rsi
    12b1:	48 89 c7             	mov    %rax,%rdi
    12b4:	e8 00 00 00 00       	callq  12b9 <_ZN6Parser14checkVariablesEP7QString+0x309>
    12b9:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12c0:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    12c7:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    12ce:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    12d4:	b9 00 00 00 00       	mov    $0x0,%ecx
    12d9:	48 89 c7             	mov    %rax,%rdi
    12dc:	e8 00 00 00 00       	callq  12e1 <_ZN6Parser14checkVariablesEP7QString+0x331>
    12e1:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    12e8:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    12ef:	48 89 d6             	mov    %rdx,%rsi
    12f2:	48 89 c7             	mov    %rax,%rdi
    12f5:	e8 00 00 00 00       	callq  12fa <_ZN6Parser14checkVariablesEP7QString+0x34a>
    12fa:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1301:	48 89 c7             	mov    %rax,%rdi
    1304:	e8 00 00 00 00       	callq  1309 <_ZN6Parser14checkVariablesEP7QString+0x359>
    1309:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1310:	48 89 c7             	mov    %rax,%rdi
    1313:	e8 00 00 00 00       	callq  1318 <_ZN6Parser14checkVariablesEP7QString+0x368>
    1318:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    131f:	48 89 c7             	mov    %rax,%rdi
    1322:	e8 00 00 00 00       	callq  1327 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    1327:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    132e:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    1335:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    133c:	48 89 c6             	mov    %rax,%rsi
    133f:	48 89 d7             	mov    %rdx,%rdi
    1342:	e8 00 00 00 00       	callq  1347 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    1347:	e9 5f fe ff ff       	jmpq   11ab <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    134c:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1353:	48 05 98 00 00 00    	add    $0x98,%rax
    1359:	48 89 c7             	mov    %rax,%rdi
    135c:	e8 00 00 00 00       	callq  1361 <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    1361:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1368:	48 89 c7             	mov    %rax,%rdi
    136b:	e8 00 00 00 00       	callq  1370 <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    1370:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1377:	48 89 c7             	mov    %rax,%rdi
    137a:	e8 00 00 00 00       	callq  137f <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    137f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1386:	48 89 c7             	mov    %rax,%rdi
    1389:	e8 00 00 00 00       	callq  138e <_ZN6Parser14checkVariablesEP7QString+0x3de>
    138e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1395:	48 89 c7             	mov    %rax,%rdi
    1398:	e8 00 00 00 00       	callq  139d <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    139d:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13a4:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    13ab:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13b2:	48 89 d6             	mov    %rdx,%rsi
    13b5:	48 89 c7             	mov    %rax,%rdi
    13b8:	e8 00 00 00 00       	callq  13bd <_ZN6Parser14checkVariablesEP7QString+0x40d>
    13bd:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    13c4:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    13cb:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13d2:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    13d9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    13e0:	48 89 d6             	mov    %rdx,%rsi
    13e3:	48 89 c7             	mov    %rax,%rdi
    13e6:	e8 00 00 00 00       	callq  13eb <_ZN6Parser14checkVariablesEP7QString+0x43b>
    13eb:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    13f2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    13f9:	48 89 d6             	mov    %rdx,%rsi
    13fc:	48 89 c7             	mov    %rax,%rdi
    13ff:	e8 00 00 00 00       	callq  1404 <_ZN6Parser14checkVariablesEP7QString+0x454>
    1404:	84 c0                	test   %al,%al
    1406:	0f 84 de 03 00 00    	je     17ea <_ZN6Parser14checkVariablesEP7QString+0x83a>
        QString all = *it;
    140c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1413:	48 89 c7             	mov    %rax,%rdi
    1416:	e8 00 00 00 00       	callq  141b <_ZN6Parser14checkVariablesEP7QString+0x46b>
    141b:	48 89 c2             	mov    %rax,%rdx
    141e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1425:	48 89 d6             	mov    %rdx,%rsi
    1428:	48 89 c7             	mov    %rax,%rdi
    142b:	e8 00 00 00 00       	callq  1430 <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    1430:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1437:	48 89 c7             	mov    %rax,%rdi
    143a:	e8 00 00 00 00       	callq  143f <_ZN6Parser14checkVariablesEP7QString+0x48f>
    143f:	48 89 c6             	mov    %rax,%rsi
    1442:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1449:	b9 00 00 00 00       	mov    $0x0,%ecx
    144e:	ba 00 00 00 00       	mov    $0x0,%edx
    1453:	48 89 c7             	mov    %rax,%rdi
    1456:	e8 00 00 00 00       	callq  145b <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    145b:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    1461:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1468:	48 89 c7             	mov    %rax,%rdi
    146b:	e8 00 00 00 00       	callq  1470 <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    1470:	48 89 c6             	mov    %rax,%rsi
    1473:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    147a:	b9 00 00 00 00       	mov    $0x0,%ecx
    147f:	ba 00 00 00 00       	mov    $0x0,%edx
    1484:	48 89 c7             	mov    %rax,%rdi
    1487:	e8 00 00 00 00       	callq  148c <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    148c:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    1492:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1499:	48 89 c7             	mov    %rax,%rdi
    149c:	e8 00 00 00 00       	callq  14a1 <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    14a1:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    14a7:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14ae:	48 89 c7             	mov    %rax,%rdi
    14b1:	e8 00 00 00 00       	callq  14b6 <_ZN6Parser14checkVariablesEP7QString+0x506>
    14b6:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    14bc:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    14c3:	00 00 00 

        if(ZZ>=0)
    14c6:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    14cd:	0f 88 0d 02 00 00    	js     16e0 <_ZN6Parser14checkVariablesEP7QString+0x730>
        {
            name  = erx_rgPort.cap(1);
    14d3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    14da:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    14e1:	ba 01 00 00 00       	mov    $0x1,%edx
    14e6:	48 89 ce             	mov    %rcx,%rsi
    14e9:	48 89 c7             	mov    %rax,%rdi
    14ec:	e8 00 00 00 00       	callq  14f1 <_ZN6Parser14checkVariablesEP7QString+0x541>
    14f1:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    14f8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14ff:	48 89 d6             	mov    %rdx,%rsi
    1502:	48 89 c7             	mov    %rax,%rdi
    1505:	e8 00 00 00 00       	callq  150a <_ZN6Parser14checkVariablesEP7QString+0x55a>
    150a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1511:	48 89 c7             	mov    %rax,%rdi
    1514:	e8 00 00 00 00       	callq  1519 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    1519:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    151d:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1524:	ba 02 00 00 00       	mov    $0x2,%edx
    1529:	48 89 ce             	mov    %rcx,%rsi
    152c:	48 89 c7             	mov    %rax,%rdi
    152f:	e8 00 00 00 00       	callq  1534 <_ZN6Parser14checkVariablesEP7QString+0x584>
    1534:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    1538:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    153f:	48 89 d6             	mov    %rdx,%rsi
    1542:	48 89 c7             	mov    %rax,%rdi
    1545:	e8 00 00 00 00       	callq  154a <_ZN6Parser14checkVariablesEP7QString+0x59a>
    154a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    154e:	48 89 c7             	mov    %rax,%rdi
    1551:	e8 00 00 00 00       	callq  1556 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    1556:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    155a:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1561:	ba 03 00 00 00       	mov    $0x3,%edx
    1566:	48 89 ce             	mov    %rcx,%rsi
    1569:	48 89 c7             	mov    %rax,%rdi
    156c:	e8 00 00 00 00       	callq  1571 <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    1571:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1575:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    157c:	48 89 d6             	mov    %rdx,%rsi
    157f:	48 89 c7             	mov    %rax,%rdi
    1582:	e8 00 00 00 00       	callq  1587 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    1587:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    158b:	48 89 c7             	mov    %rax,%rdi
    158e:	e8 00 00 00 00       	callq  1593 <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    1593:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1597:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    159e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15a5 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    15a5:	48 89 ce             	mov    %rcx,%rsi
    15a8:	48 89 c7             	mov    %rax,%rdi
    15ab:	e8 00 00 00 00       	callq  15b0 <_ZN6Parser14checkVariablesEP7QString+0x600>
    15b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    15b4:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    15bb:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    15bf:	48 89 ce             	mov    %rcx,%rsi
    15c2:	48 89 c7             	mov    %rax,%rdi
    15c5:	e8 00 00 00 00       	callq  15ca <_ZN6Parser14checkVariablesEP7QString+0x61a>
    15ca:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    15ce:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    15d2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15d9 <_ZN6Parser14checkVariablesEP7QString+0x629>
    15d9:	48 89 ce             	mov    %rcx,%rsi
    15dc:	48 89 c7             	mov    %rax,%rdi
    15df:	e8 00 00 00 00       	callq  15e4 <_ZN6Parser14checkVariablesEP7QString+0x634>
    15e4:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    15eb:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    15f2:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    15f6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15fd:	48 89 c6             	mov    %rax,%rsi
    1600:	48 89 cf             	mov    %rcx,%rdi
    1603:	e8 00 00 00 00       	callq  1608 <_ZN6Parser14checkVariablesEP7QString+0x658>
    1608:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    160c:	48 89 c7             	mov    %rax,%rdi
    160f:	e8 00 00 00 00       	callq  1614 <_ZN6Parser14checkVariablesEP7QString+0x664>
    1614:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1618:	48 89 c7             	mov    %rax,%rdi
    161b:	e8 00 00 00 00       	callq  1620 <_ZN6Parser14checkVariablesEP7QString+0x670>
    1620:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1624:	48 89 c7             	mov    %rax,%rdi
    1627:	e8 00 00 00 00       	callq  162c <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    162c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1633:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 163a <_ZN6Parser14checkVariablesEP7QString+0x68a>
    163a:	48 89 c7             	mov    %rax,%rdi
    163d:	e8 00 00 00 00       	callq  1642 <_ZN6Parser14checkVariablesEP7QString+0x692>
    1642:	84 c0                	test   %al,%al
    1644:	74 0a                	je     1650 <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    1646:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    164d:	00 00 00 
            if(type=="port")    iType = 80;
    1650:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1657:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 165e <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    165e:	48 89 c7             	mov    %rax,%rdi
    1661:	e8 00 00 00 00       	callq  1666 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    1666:	84 c0                	test   %al,%al
    1668:	74 0a                	je     1674 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    166a:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    1671:	00 00 00 

            index++;
    1674:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    167b:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1681:	88 45 e0             	mov    %al,-0x20(%rbp)
    1684:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    168b:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    1692:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1696:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    169d:	48 89 c6             	mov    %rax,%rsi
    16a0:	48 89 cf             	mov    %rcx,%rdi
    16a3:	e8 00 00 00 00       	callq  16a8 <_ZN6Parser14checkVariablesEP7QString+0x6f8>
            this->varTypes.insert(index, iType);
    16a8:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    16ae:	88 45 e0             	mov    %al,-0x20(%rbp)
    16b1:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    16b7:	88 45 d0             	mov    %al,-0x30(%rbp)
    16ba:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16c1:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    16c8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16cc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16d0:	48 89 c6             	mov    %rax,%rsi
    16d3:	48 89 cf             	mov    %rcx,%rdi
    16d6:	e8 00 00 00 00       	callq  16db <_ZN6Parser14checkVariablesEP7QString+0x72b>
    16db:	e9 e7 00 00 00       	jmpq   17c7 <_ZN6Parser14checkVariablesEP7QString+0x817>

        }else
            {
                index++;
    16e0:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    16e7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16eb:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    16f2:	ba 00 00 00 00       	mov    $0x0,%edx
    16f7:	48 89 ce             	mov    %rcx,%rsi
    16fa:	48 89 c7             	mov    %rax,%rdi
    16fd:	e8 00 00 00 00       	callq  1702 <_ZN6Parser14checkVariablesEP7QString+0x752>
    1702:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1706:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    170d:	48 89 d6             	mov    %rdx,%rsi
    1710:	48 89 c7             	mov    %rax,%rdi
    1713:	e8 00 00 00 00       	callq  1718 <_ZN6Parser14checkVariablesEP7QString+0x768>
    1718:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    171c:	48 89 c7             	mov    %rax,%rdi
    171f:	e8 00 00 00 00       	callq  1724 <_ZN6Parser14checkVariablesEP7QString+0x774>
                this->varMap.insert(name, "");
    1724:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1728:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 172f <_ZN6Parser14checkVariablesEP7QString+0x77f>
    172f:	48 89 c7             	mov    %rax,%rdi
    1732:	e8 00 00 00 00       	callq  1737 <_ZN6Parser14checkVariablesEP7QString+0x787>
    1737:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    173e:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
    1745:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1749:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1750:	48 89 c6             	mov    %rax,%rsi
    1753:	48 89 cf             	mov    %rcx,%rdi
    1756:	e8 00 00 00 00       	callq  175b <_ZN6Parser14checkVariablesEP7QString+0x7ab>
    175b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    175f:	48 89 c7             	mov    %rax,%rdi
    1762:	e8 00 00 00 00       	callq  1767 <_ZN6Parser14checkVariablesEP7QString+0x7b7>

                this->varIndexes.insert(name, index);
    1767:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    176d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1770:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1777:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
    177e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1782:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1789:	48 89 c6             	mov    %rax,%rsi
    178c:	48 89 cf             	mov    %rcx,%rdi
    178f:	e8 00 00 00 00       	callq  1794 <_ZN6Parser14checkVariablesEP7QString+0x7e4>
                this->varTypes.insert(index, iType);
    1794:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    179a:	88 45 e0             	mov    %al,-0x20(%rbp)
    179d:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    17a3:	88 45 d0             	mov    %al,-0x30(%rbp)
    17a6:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17ad:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx
    17b4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17b8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17bc:	48 89 c6             	mov    %rax,%rsi
    17bf:	48 89 cf             	mov    %rcx,%rdi
    17c2:	e8 00 00 00 00       	callq  17c7 <_ZN6Parser14checkVariablesEP7QString+0x817>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    17c7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    17ce:	48 89 c7             	mov    %rax,%rdi
    17d1:	e8 00 00 00 00       	callq  17d6 <_ZN6Parser14checkVariablesEP7QString+0x826>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    17d6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    17dd:	48 89 c7             	mov    %rax,%rdi
    17e0:	e8 00 00 00 00       	callq  17e5 <_ZN6Parser14checkVariablesEP7QString+0x835>
    17e5:	e9 e1 fb ff ff       	jmpq   13cb <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    17ea:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    17f0:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    17f7:	48 89 c7             	mov    %rax,%rdi
    17fa:	e8 00 00 00 00       	callq  17ff <_ZN6Parser14checkVariablesEP7QString+0x84f>
    17ff:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1806:	48 89 c7             	mov    %rax,%rdi
    1809:	e8 00 00 00 00       	callq  180e <_ZN6Parser14checkVariablesEP7QString+0x85e>
    180e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1815:	48 89 c7             	mov    %rax,%rdi
    1818:	e8 00 00 00 00       	callq  181d <_ZN6Parser14checkVariablesEP7QString+0x86d>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    181d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1824:	48 89 c7             	mov    %rax,%rdi
    1827:	e8 00 00 00 00       	callq  182c <_ZN6Parser14checkVariablesEP7QString+0x87c>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    182c:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1833:	48 89 c7             	mov    %rax,%rdi
    1836:	e8 00 00 00 00       	callq  183b <_ZN6Parser14checkVariablesEP7QString+0x88b>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    183b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1842:	48 89 c7             	mov    %rax,%rdi
    1845:	e8 00 00 00 00       	callq  184a <_ZN6Parser14checkVariablesEP7QString+0x89a>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    184a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1851:	48 89 c7             	mov    %rax,%rdi
    1854:	e8 00 00 00 00       	callq  1859 <_ZN6Parser14checkVariablesEP7QString+0x8a9>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1859:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1860:	48 89 c7             	mov    %rax,%rdi
    1863:	e8 00 00 00 00       	callq  1868 <_ZN6Parser14checkVariablesEP7QString+0x8b8>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1868:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    186f:	48 89 c7             	mov    %rax,%rdi
    1872:	e8 00 00 00 00       	callq  1877 <_ZN6Parser14checkVariablesEP7QString+0x8c7>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1877:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    187e:	48 89 c7             	mov    %rax,%rdi
    1881:	e8 00 00 00 00       	callq  1886 <_ZN6Parser14checkVariablesEP7QString+0x8d6>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1886:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    188d:	48 89 c7             	mov    %rax,%rdi
    1890:	e8 00 00 00 00       	callq  1895 <_ZN6Parser14checkVariablesEP7QString+0x8e5>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
    1895:	89 d8                	mov    %ebx,%eax
}
    1897:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    189b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    18a2:	00 00 
    18a4:	0f 84 03 03 00 00    	je     1bad <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    18aa:	e9 f9 02 00 00       	jmpq   1ba8 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
    18af:	48 89 c3             	mov    %rax,%rbx
    18b2:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    18b9:	48 89 c7             	mov    %rax,%rdi
    18bc:	e8 00 00 00 00       	callq  18c1 <_ZN6Parser14checkVariablesEP7QString+0x911>
    18c1:	eb 17                	jmp    18da <_ZN6Parser14checkVariablesEP7QString+0x92a>
    18c3:	48 89 c3             	mov    %rax,%rbx
    18c6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18cd:	48 89 c7             	mov    %rax,%rdi
    18d0:	e8 00 00 00 00       	callq  18d5 <_ZN6Parser14checkVariablesEP7QString+0x925>
    18d5:	eb 03                	jmp    18da <_ZN6Parser14checkVariablesEP7QString+0x92a>
    18d7:	48 89 c3             	mov    %rax,%rbx
    18da:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    18e1:	48 89 c7             	mov    %rax,%rdi
    18e4:	e8 00 00 00 00       	callq  18e9 <_ZN6Parser14checkVariablesEP7QString+0x939>
    18e9:	e9 a0 02 00 00       	jmpq   1b8e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    18ee:	48 89 c3             	mov    %rax,%rbx
    18f1:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18f8:	48 89 c7             	mov    %rax,%rdi
    18fb:	e8 00 00 00 00       	callq  1900 <_ZN6Parser14checkVariablesEP7QString+0x950>
    1900:	e9 89 02 00 00       	jmpq   1b8e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1905:	48 89 c3             	mov    %rax,%rbx
    1908:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    190f:	48 89 c7             	mov    %rax,%rdi
    1912:	e8 00 00 00 00       	callq  1917 <_ZN6Parser14checkVariablesEP7QString+0x967>
    1917:	eb 17                	jmp    1930 <_ZN6Parser14checkVariablesEP7QString+0x980>
    1919:	48 89 c3             	mov    %rax,%rbx
    191c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1923:	48 89 c7             	mov    %rax,%rdi
    1926:	e8 00 00 00 00       	callq  192b <_ZN6Parser14checkVariablesEP7QString+0x97b>
    192b:	eb 03                	jmp    1930 <_ZN6Parser14checkVariablesEP7QString+0x980>
    192d:	48 89 c3             	mov    %rax,%rbx
    1930:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1937:	48 89 c7             	mov    %rax,%rdi
    193a:	e8 00 00 00 00       	callq  193f <_ZN6Parser14checkVariablesEP7QString+0x98f>
    193f:	e9 36 02 00 00       	jmpq   1b7a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1944:	48 89 c3             	mov    %rax,%rbx
    1947:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    194e:	48 89 c7             	mov    %rax,%rdi
    1951:	e8 00 00 00 00       	callq  1956 <_ZN6Parser14checkVariablesEP7QString+0x9a6>
    1956:	e9 1f 02 00 00       	jmpq   1b7a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    195b:	48 89 c3             	mov    %rax,%rbx
    195e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1965:	48 89 c7             	mov    %rax,%rdi
    1968:	e8 00 00 00 00       	callq  196d <_ZN6Parser14checkVariablesEP7QString+0x9bd>
    196d:	e9 f4 01 00 00       	jmpq   1b66 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1972:	48 89 c3             	mov    %rax,%rbx
    1975:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    197c:	48 89 c7             	mov    %rax,%rdi
    197f:	e8 00 00 00 00       	callq  1984 <_ZN6Parser14checkVariablesEP7QString+0x9d4>
    1984:	e9 dd 01 00 00       	jmpq   1b66 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1989:	48 89 c3             	mov    %rax,%rbx
    198c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1993:	48 89 c7             	mov    %rax,%rdi
    1996:	e8 00 00 00 00       	callq  199b <_ZN6Parser14checkVariablesEP7QString+0x9eb>
    199b:	e9 b2 01 00 00       	jmpq   1b52 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    19a0:	48 89 c3             	mov    %rax,%rbx
    19a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    19aa:	48 89 c7             	mov    %rax,%rdi
    19ad:	e8 00 00 00 00       	callq  19b2 <_ZN6Parser14checkVariablesEP7QString+0xa02>
    19b2:	e9 9b 01 00 00       	jmpq   1b52 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    19b7:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    19ba:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    19c1:	48 89 c7             	mov    %rax,%rdi
    19c4:	e8 00 00 00 00       	callq  19c9 <_ZN6Parser14checkVariablesEP7QString+0xa19>
    19c9:	e9 34 01 00 00       	jmpq   1b02 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    19ce:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    19d1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19d8:	48 89 c7             	mov    %rax,%rdi
    19db:	e8 00 00 00 00       	callq  19e0 <_ZN6Parser14checkVariablesEP7QString+0xa30>
    19e0:	e9 1d 01 00 00       	jmpq   1b02 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    19e5:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    19e8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19ef:	48 89 c7             	mov    %rax,%rdi
    19f2:	e8 00 00 00 00       	callq  19f7 <_ZN6Parser14checkVariablesEP7QString+0xa47>
    19f7:	eb 03                	jmp    19fc <_ZN6Parser14checkVariablesEP7QString+0xa4c>
    19f9:	48 89 c3             	mov    %rax,%rbx
    19fc:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1a03:	48 89 c7             	mov    %rax,%rdi
    1a06:	e8 00 00 00 00       	callq  1a0b <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1a0b:	eb 03                	jmp    1a10 <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1a0d:	48 89 c3             	mov    %rax,%rbx
    1a10:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1a17:	48 89 c7             	mov    %rax,%rdi
    1a1a:	e8 00 00 00 00       	callq  1a1f <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1a1f:	e9 de 00 00 00       	jmpq   1b02 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1a24:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1a27:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a2e:	48 89 c7             	mov    %rax,%rdi
    1a31:	e8 00 00 00 00       	callq  1a36 <_ZN6Parser14checkVariablesEP7QString+0xa86>
    1a36:	eb 7a                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a38:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1a3b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a3f:	48 89 c7             	mov    %rax,%rdi
    1a42:	e8 00 00 00 00       	callq  1a47 <_ZN6Parser14checkVariablesEP7QString+0xa97>
    1a47:	eb 69                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a49:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1a4c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a50:	48 89 c7             	mov    %rax,%rdi
    1a53:	e8 00 00 00 00       	callq  1a58 <_ZN6Parser14checkVariablesEP7QString+0xaa8>
    1a58:	eb 58                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a5a:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1a5d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a61:	48 89 c7             	mov    %rax,%rdi
    1a64:	e8 00 00 00 00       	callq  1a69 <_ZN6Parser14checkVariablesEP7QString+0xab9>
    1a69:	eb 03                	jmp    1a6e <_ZN6Parser14checkVariablesEP7QString+0xabe>
    1a6b:	48 89 c3             	mov    %rax,%rbx
    1a6e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a72:	48 89 c7             	mov    %rax,%rdi
    1a75:	e8 00 00 00 00       	callq  1a7a <_ZN6Parser14checkVariablesEP7QString+0xaca>
    1a7a:	eb 03                	jmp    1a7f <_ZN6Parser14checkVariablesEP7QString+0xacf>
    1a7c:	48 89 c3             	mov    %rax,%rbx
    1a7f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1a83:	48 89 c7             	mov    %rax,%rdi
    1a86:	e8 00 00 00 00       	callq  1a8b <_ZN6Parser14checkVariablesEP7QString+0xadb>
    1a8b:	eb 25                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a8d:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1a90:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a94:	48 89 c7             	mov    %rax,%rdi
    1a97:	e8 00 00 00 00       	callq  1a9c <_ZN6Parser14checkVariablesEP7QString+0xaec>
    1a9c:	eb 14                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1a9e:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1aa1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1aa5:	48 89 c7             	mov    %rax,%rdi
    1aa8:	e8 00 00 00 00       	callq  1aad <_ZN6Parser14checkVariablesEP7QString+0xafd>
    1aad:	eb 03                	jmp    1ab2 <_ZN6Parser14checkVariablesEP7QString+0xb02>
    1aaf:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1ab2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1ab9:	48 89 c7             	mov    %rax,%rdi
    1abc:	e8 00 00 00 00       	callq  1ac1 <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1ac1:	eb 03                	jmp    1ac6 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1ac3:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1ac6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1acd:	48 89 c7             	mov    %rax,%rdi
    1ad0:	e8 00 00 00 00       	callq  1ad5 <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1ad5:	eb 03                	jmp    1ada <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1ad7:	48 89 c3             	mov    %rax,%rbx
    1ada:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1ae1:	48 89 c7             	mov    %rax,%rdi
    1ae4:	e8 00 00 00 00       	callq  1ae9 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1ae9:	eb 03                	jmp    1aee <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1aeb:	48 89 c3             	mov    %rax,%rbx
    1aee:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1af5:	48 89 c7             	mov    %rax,%rdi
    1af8:	e8 00 00 00 00       	callq  1afd <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1afd:	eb 03                	jmp    1b02 <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1aff:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1b02:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1b09:	48 89 c7             	mov    %rax,%rdi
    1b0c:	e8 00 00 00 00       	callq  1b11 <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1b11:	eb 03                	jmp    1b16 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1b13:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1b16:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1b1d:	48 89 c7             	mov    %rax,%rdi
    1b20:	e8 00 00 00 00       	callq  1b25 <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1b25:	eb 03                	jmp    1b2a <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1b27:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1b2a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1b31:	48 89 c7             	mov    %rax,%rdi
    1b34:	e8 00 00 00 00       	callq  1b39 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1b39:	eb 03                	jmp    1b3e <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1b3b:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1b3e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1b45:	48 89 c7             	mov    %rax,%rdi
    1b48:	e8 00 00 00 00       	callq  1b4d <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1b4d:	eb 03                	jmp    1b52 <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1b4f:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1b52:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1b59:	48 89 c7             	mov    %rax,%rdi
    1b5c:	e8 00 00 00 00       	callq  1b61 <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1b61:	eb 03                	jmp    1b66 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1b63:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1b66:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1b6d:	48 89 c7             	mov    %rax,%rdi
    1b70:	e8 00 00 00 00       	callq  1b75 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1b75:	eb 03                	jmp    1b7a <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1b77:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1b7a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1b81:	48 89 c7             	mov    %rax,%rdi
    1b84:	e8 00 00 00 00       	callq  1b89 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1b89:	eb 03                	jmp    1b8e <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1b8b:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1b8e:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1b95:	48 89 c7             	mov    %rax,%rdi
    1b98:	e8 00 00 00 00       	callq  1b9d <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1b9d:	48 89 d8             	mov    %rbx,%rax
    1ba0:	48 89 c7             	mov    %rax,%rdi
    1ba3:	e8 00 00 00 00       	callq  1ba8 <_ZN6Parser14checkVariablesEP7QString+0xbf8>
                this->varTypes.insert(index, iType);
            }

    }
    return varCount;
}
    1ba8:	e8 00 00 00 00       	callq  1bad <_ZN6Parser14checkVariablesEP7QString+0xbfd>
    1bad:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1bb4:	5b                   	pop    %rbx
    1bb5:	5d                   	pop    %rbp
    1bb6:	c3                   	retq   
    1bb7:	90                   	nop

0000000000001bb8 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1bb8:	55                   	push   %rbp
    1bb9:	48 89 e5             	mov    %rsp,%rbp
    1bbc:	53                   	push   %rbx
    1bbd:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1bc4:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1bcb:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1bd2:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1bd9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1be0:	00 00 
    1be2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1be6:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1be8:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1bef:	00 00 00 
    QString result;
    1bf2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1bf9:	48 89 c7             	mov    %rax,%rdi
    1bfc:	e8 00 00 00 00       	callq  1c01 <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1c01:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c05:	48 89 c7             	mov    %rax,%rdi
    1c08:	e8 00 00 00 00       	callq  1c0d <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1c0d:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c14:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c18:	48 89 d6             	mov    %rdx,%rsi
    1c1b:	48 89 c7             	mov    %rax,%rdi
    1c1e:	e8 00 00 00 00       	callq  1c23 <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1c23:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1c27:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1c2b:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c32:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1c36:	48 89 d6             	mov    %rdx,%rsi
    1c39:	48 89 c7             	mov    %rax,%rdi
    1c3c:	e8 00 00 00 00       	callq  1c41 <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1c41:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1c45:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c49:	48 89 d6             	mov    %rdx,%rsi
    1c4c:	48 89 c7             	mov    %rax,%rdi
    1c4f:	e8 00 00 00 00       	callq  1c54 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1c54:	84 c0                	test   %al,%al
    1c56:	0f 84 e0 00 00 00    	je     1d3c <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1c5c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c60:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1c66:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c6b:	89 ce                	mov    %ecx,%esi
    1c6d:	48 89 c7             	mov    %rax,%rdi
    1c70:	e8 00 00 00 00       	callq  1c75 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1c75:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c79:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1c7d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c84 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1c84:	48 89 c7             	mov    %rax,%rdi
    1c87:	e8 00 00 00 00       	callq  1c8c <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1c8c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c90:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1c94:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1c9b <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1c9b:	48 89 ce             	mov    %rcx,%rsi
    1c9e:	48 89 c7             	mov    %rax,%rdi
    1ca1:	e8 00 00 00 00       	callq  1ca6 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1ca6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1caa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cb1:	48 89 d6             	mov    %rdx,%rsi
    1cb4:	48 89 c7             	mov    %rax,%rdi
    1cb7:	e8 00 00 00 00       	callq  1cbc <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1cbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cc0:	48 89 c7             	mov    %rax,%rdi
    1cc3:	e8 00 00 00 00       	callq  1cc8 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1cc8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1ccc:	48 89 c7             	mov    %rax,%rdi
    1ccf:	e8 00 00 00 00       	callq  1cd4 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1cd4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1cd8:	48 89 c7             	mov    %rax,%rdi
    1cdb:	e8 00 00 00 00       	callq  1ce0 <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1ce0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ce4:	48 89 c7             	mov    %rax,%rdi
    1ce7:	e8 00 00 00 00       	callq  1cec <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1cec:	48 89 c2             	mov    %rax,%rdx
    1cef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1cf3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1cfa <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1cfa:	48 89 c7             	mov    %rax,%rdi
    1cfd:	e8 00 00 00 00       	callq  1d02 <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1d02:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1d06:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d0d:	48 89 d6             	mov    %rdx,%rsi
    1d10:	48 89 c7             	mov    %rax,%rdi
    1d13:	e8 00 00 00 00       	callq  1d18 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1d18:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d1c:	48 89 c7             	mov    %rax,%rdi
    1d1f:	e8 00 00 00 00       	callq  1d24 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1d24:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1d2b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d2f:	48 89 c7             	mov    %rax,%rdi
    1d32:	e8 00 00 00 00       	callq  1d37 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1d37:	e9 ef fe ff ff       	jmpq   1c2b <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1d3c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d43:	48 89 c7             	mov    %rax,%rdi
    1d46:	e8 00 00 00 00       	callq  1d4b <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1d4b:	90                   	nop
    1d4c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1d53:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1d57:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1d5e:	00 00 
    1d60:	74 68                	je     1dca <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1d62:	eb 61                	jmp    1dc5 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1d64:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1d67:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d6b:	48 89 c7             	mov    %rax,%rdi
    1d6e:	e8 00 00 00 00       	callq  1d73 <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1d73:	eb 03                	jmp    1d78 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1d75:	48 89 c3             	mov    %rax,%rbx
    1d78:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d7c:	48 89 c7             	mov    %rax,%rdi
    1d7f:	e8 00 00 00 00       	callq  1d84 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1d84:	eb 03                	jmp    1d89 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1d86:	48 89 c3             	mov    %rax,%rbx
    1d89:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d8d:	48 89 c7             	mov    %rax,%rdi
    1d90:	e8 00 00 00 00       	callq  1d95 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1d95:	eb 14                	jmp    1dab <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1d97:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1d9a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d9e:	48 89 c7             	mov    %rax,%rdi
    1da1:	e8 00 00 00 00       	callq  1da6 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1da6:	eb 03                	jmp    1dab <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1da8:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1dab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1db2:	48 89 c7             	mov    %rax,%rdi
    1db5:	e8 00 00 00 00       	callq  1dba <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1dba:	48 89 d8             	mov    %rbx,%rax
    1dbd:	48 89 c7             	mov    %rax,%rdi
    1dc0:	e8 00 00 00 00       	callq  1dc5 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1dc5:	e8 00 00 00 00       	callq  1dca <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1dca:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1dd1:	5b                   	pop    %rbx
    1dd2:	5d                   	pop    %rbp
    1dd3:	c3                   	retq   

0000000000001dd4 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1dd4:	55                   	push   %rbp
    1dd5:	48 89 e5             	mov    %rsp,%rbp
    1dd8:	48 83 ec 10          	sub    $0x10,%rsp
    1ddc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1de0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1de4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1de8:	48 8d 48 58          	lea    0x58(%rax),%rcx
    1dec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1df0:	ba 01 00 00 00       	mov    $0x1,%edx
    1df5:	48 89 c6             	mov    %rax,%rsi
    1df8:	48 89 cf             	mov    %rcx,%rdi
    1dfb:	e8 00 00 00 00       	callq  1e00 <_ZN6Parser14addIncludeFileE7QString+0x2c>
    1e00:	83 f0 01             	xor    $0x1,%eax
    1e03:	84 c0                	test   %al,%al
    1e05:	74 17                	je     1e1e <_ZN6Parser14addIncludeFileE7QString+0x4a>
    this->includeFiles.append(filename);
    1e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e0b:	48 8d 50 58          	lea    0x58(%rax),%rdx
    1e0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e13:	48 89 c6             	mov    %rax,%rsi
    1e16:	48 89 d7             	mov    %rdx,%rdi
    1e19:	e8 00 00 00 00       	callq  1e1e <_ZN6Parser14addIncludeFileE7QString+0x4a>
}
    1e1e:	90                   	nop
    1e1f:	c9                   	leaveq 
    1e20:	c3                   	retq   
    1e21:	90                   	nop

0000000000001e22 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1e22:	55                   	push   %rbp
    1e23:	48 89 e5             	mov    %rsp,%rbp
    1e26:	41 55                	push   %r13
    1e28:	41 54                	push   %r12
    1e2a:	53                   	push   %rbx
    1e2b:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1e32:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1e39:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1e40:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1e47:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e4e:	00 00 
    1e50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1e54:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1e56:	bb 00 00 00 00       	mov    $0x0,%ebx
    1e5b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1e62:	48 89 c7             	mov    %rax,%rdi
    1e65:	e8 00 00 00 00       	callq  1e6a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1e6a:	83 f8 04             	cmp    $0x4,%eax
    1e6d:	74 3a                	je     1ea9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1e6f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e73:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e7a:	48 89 d6             	mov    %rdx,%rsi
    1e7d:	48 89 c7             	mov    %rax,%rdi
    1e80:	e8 00 00 00 00       	callq  1e85 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1e85:	bb 01 00 00 00       	mov    $0x1,%ebx
    1e8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e8e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1e95 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1e95:	48 89 c7             	mov    %rax,%rdi
    1e98:	e8 00 00 00 00       	callq  1e9d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1e9d:	84 c0                	test   %al,%al
    1e9f:	74 08                	je     1ea9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1ea1:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1ea7:	eb 06                	jmp    1eaf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1ea9:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1eaf:	84 db                	test   %bl,%bl
    1eb1:	74 0d                	je     1ec0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1eb3:	90                   	nop
    1eb4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1eb8:	48 89 c7             	mov    %rax,%rdi
    1ebb:	e8 00 00 00 00       	callq  1ec0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ec0:	45 84 ed             	test   %r13b,%r13b
    1ec3:	74 0b                	je     1ed0 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1ec5:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1ecb:	e9 87 02 00 00       	jmpq   2157 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1ed0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1ed7:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1ede:	48 89 d6             	mov    %rdx,%rsi
    1ee1:	48 89 c7             	mov    %rax,%rdi
    1ee4:	e8 00 00 00 00       	callq  1ee9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1ee9:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1ef0:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1ef3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1efa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f01 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1f01:	48 89 c7             	mov    %rax,%rdi
    1f04:	e8 00 00 00 00       	callq  1f09 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1f09:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1f10:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f17:	48 89 d6             	mov    %rdx,%rsi
    1f1a:	48 89 c7             	mov    %rax,%rdi
    1f1d:	e8 00 00 00 00       	callq  1f22 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1f22:	89 c3                	mov    %eax,%ebx
    1f24:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f2b:	48 89 c7             	mov    %rax,%rdi
    1f2e:	e8 00 00 00 00       	callq  1f33 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1f33:	84 db                	test   %bl,%bl
    1f35:	74 6c                	je     1fa3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1f37:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f45 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1f45:	48 89 c7             	mov    %rax,%rdi
    1f48:	e8 00 00 00 00       	callq  1f4d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1f4d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f51:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1f58:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1f5f:	48 89 ce             	mov    %rcx,%rsi
    1f62:	48 89 c7             	mov    %rax,%rdi
    1f65:	e8 00 00 00 00       	callq  1f6a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1f6a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f6e:	ba 0a 00 00 00       	mov    $0xa,%edx
    1f73:	be 00 00 00 00       	mov    $0x0,%esi
    1f78:	48 89 c7             	mov    %rax,%rdi
    1f7b:	e8 00 00 00 00       	callq  1f80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1f80:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1f86:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f8a:	48 89 c7             	mov    %rax,%rdi
    1f8d:	e8 00 00 00 00       	callq  1f92 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1f92:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f99:	48 89 c7             	mov    %rax,%rdi
    1f9c:	e8 00 00 00 00       	callq  1fa1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1fa1:	eb 0b                	jmp    1fae <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1fa3:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1fa9:	e9 9a 01 00 00       	jmpq   2148 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1fae:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fb5:	48 89 c7             	mov    %rax,%rdi
    1fb8:	e8 00 00 00 00       	callq  1fbd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1fbd:	bb 00 00 00 00       	mov    $0x0,%ebx
    1fc2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fc9:	48 89 c7             	mov    %rax,%rdi
    1fcc:	e8 00 00 00 00       	callq  1fd1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    1fd1:	83 f8 05             	cmp    $0x5,%eax
    1fd4:	75 35                	jne    200b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1fd6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1fda:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1fe1:	48 89 d6             	mov    %rdx,%rsi
    1fe4:	48 89 c7             	mov    %rax,%rdi
    1fe7:	e8 00 00 00 00       	callq  1fec <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    1fec:	bb 01 00 00 00       	mov    $0x1,%ebx
    1ff1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1ff5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ffc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    1ffc:	48 89 c7             	mov    %rax,%rdi
    1fff:	e8 00 00 00 00       	callq  2004 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    2004:	83 f0 01             	xor    $0x1,%eax
    2007:	84 c0                	test   %al,%al
    2009:	74 08                	je     2013 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    200b:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    2011:	eb 06                	jmp    2019 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    2013:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    2019:	84 db                	test   %bl,%bl
    201b:	74 0d                	je     202a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    201d:	90                   	nop
    201e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2022:	48 89 c7             	mov    %rax,%rdi
    2025:	e8 00 00 00 00       	callq  202a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    202a:	45 84 ed             	test   %r13b,%r13b
    202d:	0f 84 0f 01 00 00    	je     2142 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    2033:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    203a:	48 89 c7             	mov    %rax,%rdi
    203d:	e8 00 00 00 00       	callq  2042 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    2042:	83 f8 04             	cmp    $0x4,%eax
    2045:	0f 94 c0             	sete   %al
    2048:	84 c0                	test   %al,%al
    204a:	0f 84 de 00 00 00    	je     212e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    2050:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2054:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    205b:	48 89 d6             	mov    %rdx,%rsi
    205e:	48 89 c7             	mov    %rax,%rdi
    2061:	e8 00 00 00 00       	callq  2066 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    2066:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    206a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2071 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    2071:	48 89 c7             	mov    %rax,%rdi
    2074:	e8 00 00 00 00       	callq  2079 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    2079:	89 c3                	mov    %eax,%ebx
    207b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    207f:	48 89 c7             	mov    %rax,%rdi
    2082:	e8 00 00 00 00       	callq  2087 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    2087:	84 db                	test   %bl,%bl
    2089:	0f 84 9f 00 00 00    	je     212e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    208f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2096:	48 89 c7             	mov    %rax,%rdi
    2099:	e8 00 00 00 00       	callq  209e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    209e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20a2:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20a9:	48 89 d6             	mov    %rdx,%rsi
    20ac:	48 89 c7             	mov    %rax,%rdi
    20af:	e8 00 00 00 00       	callq  20b4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    20b4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20b8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    20bc:	48 89 d6             	mov    %rdx,%rsi
    20bf:	48 89 c7             	mov    %rax,%rdi
    20c2:	e8 00 00 00 00       	callq  20c7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    20c7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20cb:	48 89 c7             	mov    %rax,%rdi
    20ce:	e8 00 00 00 00       	callq  20d3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    20d3:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    20d7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    20de:	48 89 d6             	mov    %rdx,%rsi
    20e1:	48 89 c7             	mov    %rax,%rdi
    20e4:	e8 00 00 00 00       	callq  20e9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    20e9:	84 c0                	test   %al,%al
    20eb:	74 0d                	je     20fa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    20ed:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    20f3:	bb 00 00 00 00       	mov    $0x0,%ebx
    20f8:	eb 22                	jmp    211c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    20fa:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    2101:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    2105:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    210c:	48 89 ce             	mov    %rcx,%rsi
    210f:	48 89 c7             	mov    %rax,%rdi
    2112:	e8 00 00 00 00       	callq  2117 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    2117:	bb 01 00 00 00       	mov    $0x1,%ebx
    211c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2120:	48 89 c7             	mov    %rax,%rdi
    2123:	e8 00 00 00 00       	callq  2128 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    2128:	83 fb 01             	cmp    $0x1,%ebx
    212b:	75 1b                	jne    2148 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    212d:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    212e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2135:	48 89 c7             	mov    %rax,%rdi
    2138:	e8 00 00 00 00       	callq  213d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    213d:	e9 7b fe ff ff       	jmpq   1fbd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    2142:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2148:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    214f:	48 89 c7             	mov    %rax,%rdi
    2152:	e8 00 00 00 00       	callq  2157 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    2157:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    215a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    215e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2165:	00 00 
    2167:	0f 84 d1 00 00 00    	je     223e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    216d:	e9 c7 00 00 00       	jmpq   2239 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    2172:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    2175:	84 db                	test   %bl,%bl
    2177:	74 0f                	je     2188 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    2179:	90                   	nop
    217a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    217e:	48 89 c7             	mov    %rax,%rdi
    2181:	e8 00 00 00 00       	callq  2186 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    2186:	eb 01                	jmp    2189 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    2188:	90                   	nop
    2189:	4c 89 e0             	mov    %r12,%rax
    218c:	48 89 c7             	mov    %rax,%rdi
    218f:	e8 00 00 00 00       	callq  2194 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    2194:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    2197:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    219e:	48 89 c7             	mov    %rax,%rdi
    21a1:	e8 00 00 00 00       	callq  21a6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    21a6:	eb 77                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21a8:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    21ab:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21af:	48 89 c7             	mov    %rax,%rdi
    21b2:	e8 00 00 00 00       	callq  21b7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    21b7:	eb 03                	jmp    21bc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    21b9:	48 89 c3             	mov    %rax,%rbx
    21bc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    21c3:	48 89 c7             	mov    %rax,%rdi
    21c6:	e8 00 00 00 00       	callq  21cb <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    21cb:	eb 52                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21cd:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    21d0:	84 db                	test   %bl,%bl
    21d2:	74 0f                	je     21e3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    21d4:	90                   	nop
    21d5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21d9:	48 89 c7             	mov    %rax,%rdi
    21dc:	e8 00 00 00 00       	callq  21e1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    21e1:	eb 01                	jmp    21e4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    21e3:	90                   	nop
    21e4:	4c 89 e3             	mov    %r12,%rbx
    21e7:	eb 36                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21e9:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    21ec:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    21f0:	48 89 c7             	mov    %rax,%rdi
    21f3:	e8 00 00 00 00       	callq  21f8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    21f8:	eb 25                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21fa:	48 89 c3             	mov    %rax,%rbx
    21fd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2201:	48 89 c7             	mov    %rax,%rdi
    2204:	e8 00 00 00 00       	callq  2209 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    2209:	eb 14                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    220b:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    220e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2212:	48 89 c7             	mov    %rax,%rdi
    2215:	e8 00 00 00 00       	callq  221a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    221a:	eb 03                	jmp    221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    221c:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    221f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2226:	48 89 c7             	mov    %rax,%rdi
    2229:	e8 00 00 00 00       	callq  222e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    222e:	48 89 d8             	mov    %rbx,%rax
    2231:	48 89 c7             	mov    %rax,%rdi
    2234:	e8 00 00 00 00       	callq  2239 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    2239:	e8 00 00 00 00       	callq  223e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    223e:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    2245:	5b                   	pop    %rbx
    2246:	41 5c                	pop    %r12
    2248:	41 5d                	pop    %r13
    224a:	5d                   	pop    %rbp
    224b:	c3                   	retq   

000000000000224c <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    224c:	55                   	push   %rbp
    224d:	48 89 e5             	mov    %rsp,%rbp
    2250:	53                   	push   %rbx
    2251:	48 83 ec 68          	sub    $0x68,%rsp
    2255:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    2259:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    225d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    2261:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2268:	00 00 
    226a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    226e:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    2270:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2274:	48 89 c7             	mov    %rax,%rdi
    2277:	e8 00 00 00 00       	callq  227c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    227c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2280:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2284:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2288:	48 89 d6             	mov    %rdx,%rsi
    228b:	48 89 c7             	mov    %rax,%rdi
    228e:	e8 00 00 00 00       	callq  2293 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    2293:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2297:	48 89 c7             	mov    %rax,%rdi
    229a:	e8 00 00 00 00       	callq  229f <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    229f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    22a3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    22a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22ab:	48 89 d6             	mov    %rdx,%rsi
    22ae:	48 89 c7             	mov    %rax,%rdi
    22b1:	e8 00 00 00 00       	callq  22b6 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    22b6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22be:	48 89 d6             	mov    %rdx,%rsi
    22c1:	48 89 c7             	mov    %rax,%rdi
    22c4:	e8 00 00 00 00       	callq  22c9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    22c9:	84 c0                	test   %al,%al
    22cb:	0f 84 d7 00 00 00    	je     23a8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    22d1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22d5:	48 89 c7             	mov    %rax,%rdi
    22d8:	e8 00 00 00 00       	callq  22dd <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    22dd:	8b 08                	mov    (%rax),%ecx
    22df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22e3:	ba 0a 00 00 00       	mov    $0xa,%edx
    22e8:	89 ce                	mov    %ecx,%esi
    22ea:	48 89 c7             	mov    %rax,%rdi
    22ed:	e8 00 00 00 00       	callq  22f2 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    22f2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22f6:	48 89 c7             	mov    %rax,%rdi
    22f9:	e8 00 00 00 00       	callq  22fe <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    22fe:	48 89 c2             	mov    %rax,%rdx
    2301:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2305:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 230c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    230c:	48 89 c7             	mov    %rax,%rdi
    230f:	e8 00 00 00 00       	callq  2314 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    2314:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2318:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    231c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2323 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    2323:	48 89 ce             	mov    %rcx,%rsi
    2326:	48 89 c7             	mov    %rax,%rdi
    2329:	e8 00 00 00 00       	callq  232e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    232e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    2332:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2336:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    233a:	48 89 ce             	mov    %rcx,%rsi
    233d:	48 89 c7             	mov    %rax,%rdi
    2340:	e8 00 00 00 00       	callq  2345 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    2345:	90                   	nop
    2346:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    234a:	48 89 c7             	mov    %rax,%rdi
    234d:	e8 00 00 00 00       	callq  2352 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    2352:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2356:	48 89 c7             	mov    %rax,%rdi
    2359:	e8 00 00 00 00       	callq  235e <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    235e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2362:	48 89 c7             	mov    %rax,%rdi
    2365:	e8 00 00 00 00       	callq  236a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    236a:	eb 3d                	jmp    23a9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    236c:	48 89 c3             	mov    %rax,%rbx
    236f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2373:	48 89 c7             	mov    %rax,%rdi
    2376:	e8 00 00 00 00       	callq  237b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    237b:	eb 03                	jmp    2380 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    237d:	48 89 c3             	mov    %rax,%rbx
    2380:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2384:	48 89 c7             	mov    %rax,%rdi
    2387:	e8 00 00 00 00       	callq  238c <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    238c:	eb 03                	jmp    2391 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    238e:	48 89 c3             	mov    %rax,%rbx
    2391:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2395:	48 89 c7             	mov    %rax,%rdi
    2398:	e8 00 00 00 00       	callq  239d <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    239d:	48 89 d8             	mov    %rbx,%rax
    23a0:	48 89 c7             	mov    %rax,%rdi
    23a3:	e8 00 00 00 00       	callq  23a8 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    23a8:	90                   	nop
    23a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    23ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    23b1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    23b8:	00 00 
    23ba:	74 05                	je     23c1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23bc:	e8 00 00 00 00       	callq  23c1 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23c1:	48 83 c4 68          	add    $0x68,%rsp
    23c5:	5b                   	pop    %rbx
    23c6:	5d                   	pop    %rbp
    23c7:	c3                   	retq   

00000000000023c8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    23c8:	55                   	push   %rbp
    23c9:	48 89 e5             	mov    %rsp,%rbp
    23cc:	53                   	push   %rbx
    23cd:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    23d4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    23d8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    23dc:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    23e3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    23ea:	00 00 
    23ec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    23f0:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    23f2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    23f6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    23fa:	48 89 d6             	mov    %rdx,%rsi
    23fd:	48 89 c7             	mov    %rax,%rdi
    2400:	e8 00 00 00 00       	callq  2405 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    2405:	be 10 00 00 00       	mov    $0x10,%esi
    240a:	bf 01 00 00 00       	mov    $0x1,%edi
    240f:	e8 00 00 00 00       	callq  2414 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    2414:	89 c2                	mov    %eax,%edx
    2416:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    241a:	89 d6                	mov    %edx,%esi
    241c:	48 89 c7             	mov    %rax,%rdi
    241f:	e8 00 00 00 00       	callq  2424 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    2424:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2428:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    242c:	48 89 d6             	mov    %rdx,%rsi
    242f:	48 89 c7             	mov    %rax,%rdi
    2432:	e8 00 00 00 00       	callq  2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    2437:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    243b:	48 89 c7             	mov    %rax,%rdi
    243e:	e8 00 00 00 00       	callq  2443 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    2443:	83 f0 01             	xor    $0x1,%eax
    2446:	84 c0                	test   %al,%al
    2448:	74 1a                	je     2464 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    244a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    244e:	48 89 c7             	mov    %rax,%rdi
    2451:	e8 00 00 00 00       	callq  2456 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    2456:	83 f0 01             	xor    $0x1,%eax
    2459:	84 c0                	test   %al,%al
    245b:	74 07                	je     2464 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    245d:	b8 01 00 00 00       	mov    $0x1,%eax
    2462:	eb 05                	jmp    2469 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    2464:	b8 00 00 00 00       	mov    $0x0,%eax
    2469:	84 c0                	test   %al,%al
    246b:	0f 84 cb 00 00 00    	je     253c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    2471:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2475:	48 89 c7             	mov    %rax,%rdi
    2478:	e8 00 00 00 00       	callq  247d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    247d:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    2480:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    2484:	0f 84 a6 00 00 00    	je     2530 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    248a:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    248e:	75 a7                	jne    2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    2490:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2494:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2498:	48 89 d6             	mov    %rdx,%rsi
    249b:	48 89 c7             	mov    %rax,%rdi
    249e:	e8 00 00 00 00       	callq  24a3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    24a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24ae <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    24ae:	48 89 c7             	mov    %rax,%rdi
    24b1:	e8 00 00 00 00       	callq  24b6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    24b6:	89 c3                	mov    %eax,%ebx
    24b8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24bc:	48 89 c7             	mov    %rax,%rdi
    24bf:	e8 00 00 00 00       	callq  24c4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    24c4:	84 db                	test   %bl,%bl
    24c6:	75 6e                	jne    2536 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    24c8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24cc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24d0:	48 89 d6             	mov    %rdx,%rsi
    24d3:	48 89 c7             	mov    %rax,%rdi
    24d6:	e8 00 00 00 00       	callq  24db <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    24db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24e6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    24e6:	48 89 c7             	mov    %rax,%rdi
    24e9:	e8 00 00 00 00       	callq  24ee <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    24ee:	89 c3                	mov    %eax,%ebx
    24f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24f4:	48 89 c7             	mov    %rax,%rdi
    24f7:	e8 00 00 00 00       	callq  24fc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    24fc:	84 db                	test   %bl,%bl
    24fe:	0f 84 33 ff ff ff    	je     2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    2504:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    250b:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    250f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2513:	48 89 ce             	mov    %rcx,%rsi
    2516:	48 89 c7             	mov    %rax,%rdi
    2519:	e8 00 00 00 00       	callq  251e <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    251e:	83 f0 01             	xor    $0x1,%eax
    2521:	84 c0                	test   %al,%al
    2523:	0f 84 0e ff ff ff    	je     2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2529:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    252e:	eb 11                	jmp    2541 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    2530:	90                   	nop
    2531:	e9 01 ff ff ff       	jmpq   2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    2536:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    2537:	e9 fb fe ff ff       	jmpq   2437 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    253c:	bb 01 00 00 00       	mov    $0x1,%ebx
    2541:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2545:	48 89 c7             	mov    %rax,%rdi
    2548:	e8 00 00 00 00       	callq  254d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    254d:	83 fb 01             	cmp    $0x1,%ebx
    2550:	74 07                	je     2559 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    2552:	bb 00 00 00 00       	mov    $0x0,%ebx
    2557:	eb 06                	jmp    255f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    2559:	90                   	nop
    255a:	bb 01 00 00 00       	mov    $0x1,%ebx
    255f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2563:	48 89 c7             	mov    %rax,%rdi
    2566:	e8 00 00 00 00       	callq  256b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    256b:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    256e:	90                   	nop
                    return;
                }
            }
        }
    }
}
    256f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2573:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    257a:	00 00 
    257c:	74 54                	je     25d2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    257e:	eb 4d                	jmp    25cd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    2580:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    2583:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2587:	48 89 c7             	mov    %rax,%rdi
    258a:	e8 00 00 00 00       	callq  258f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    258f:	eb 14                	jmp    25a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    2591:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    2594:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2598:	48 89 c7             	mov    %rax,%rdi
    259b:	e8 00 00 00 00       	callq  25a0 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    25a0:	eb 03                	jmp    25a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25a2:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25a5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25a9:	48 89 c7             	mov    %rax,%rdi
    25ac:	e8 00 00 00 00       	callq  25b1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    25b1:	eb 03                	jmp    25b6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    25b3:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    25b6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25ba:	48 89 c7             	mov    %rax,%rdi
    25bd:	e8 00 00 00 00       	callq  25c2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    25c2:	48 89 d8             	mov    %rbx,%rax
    25c5:	48 89 c7             	mov    %rax,%rdi
    25c8:	e8 00 00 00 00       	callq  25cd <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    25cd:	e8 00 00 00 00       	callq  25d2 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    25d2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    25d9:	5b                   	pop    %rbx
    25da:	5d                   	pop    %rbp
    25db:	c3                   	retq   

00000000000025dc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    25dc:	55                   	push   %rbp
    25dd:	48 89 e5             	mov    %rsp,%rbp
    25e0:	53                   	push   %rbx
    25e1:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    25e8:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    25ef:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    25f6:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    25fd:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    2603:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    260a:	00 00 
    260c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2610:	31 c0                	xor    %eax,%eax


    QString str = Block;
    2612:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    2619:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2620:	48 89 d6             	mov    %rdx,%rsi
    2623:	48 89 c7             	mov    %rax,%rdi
    2626:	e8 00 00 00 00       	callq  262b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    262b:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2632:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2639:	48 89 d6             	mov    %rdx,%rsi
    263c:	48 89 c7             	mov    %rax,%rdi
    263f:	e8 00 00 00 00       	callq  2644 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    2644:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    264b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2652 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    2652:	48 89 c7             	mov    %rax,%rdi
    2655:	e8 00 00 00 00       	callq  265a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    265a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    2661:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2668:	b9 00 00 00 00       	mov    $0x0,%ecx
    266d:	ba 01 00 00 00       	mov    $0x1,%edx
    2672:	48 89 c7             	mov    %rax,%rdi
    2675:	e8 00 00 00 00       	callq  267a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    267a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2681:	48 89 c7             	mov    %rax,%rdi
    2684:	e8 00 00 00 00       	callq  2689 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    2689:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2690:	be 01 00 00 00       	mov    $0x1,%esi
    2695:	48 89 c7             	mov    %rax,%rdi
    2698:	e8 00 00 00 00       	callq  269d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    269d:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    26a4:	48 89 c7             	mov    %rax,%rdi
    26a7:	e8 00 00 00 00       	callq  26ac <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    26ac:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26b3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 26ba <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    26ba:	48 89 c7             	mov    %rax,%rdi
    26bd:	e8 00 00 00 00       	callq  26c2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    26c2:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    26c9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    26d0:	b9 00 00 00 00       	mov    $0x0,%ecx
    26d5:	ba 01 00 00 00       	mov    $0x1,%edx
    26da:	48 89 c7             	mov    %rax,%rdi
    26dd:	e8 00 00 00 00       	callq  26e2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    26e2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26e9:	48 89 c7             	mov    %rax,%rdi
    26ec:	e8 00 00 00 00       	callq  26f1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    26f1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    26f8:	48 89 c7             	mov    %rax,%rdi
    26fb:	e8 00 00 00 00       	callq  2700 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    2700:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2707:	48 89 c7             	mov    %rax,%rdi
    270a:	e8 00 00 00 00       	callq  270f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    270f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2716:	48 89 c7             	mov    %rax,%rdi
    2719:	e8 00 00 00 00       	callq  271e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    271e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2725:	48 89 c7             	mov    %rax,%rdi
    2728:	e8 00 00 00 00       	callq  272d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    272d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2734:	00 00 00 
    int lineInner = 0;
    2737:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    273e:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    2741:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2748:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    274f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2754:	ba 00 00 00 00       	mov    $0x0,%edx
    2759:	48 89 c7             	mov    %rax,%rdi
    275c:	e8 00 00 00 00       	callq  2761 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    2761:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    2767:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    276e:	0f 88 35 03 00 00    	js     2aa9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    2774:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    277a:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2780:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2783:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    278a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    278e:	48 89 d6             	mov    %rdx,%rsi
    2791:	48 89 c7             	mov    %rax,%rdi
    2794:	e8 00 00 00 00       	callq  2799 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    2799:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    279d:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    27a4:	89 da                	mov    %ebx,%edx
    27a6:	48 89 ce             	mov    %rcx,%rsi
    27a9:	48 89 c7             	mov    %rax,%rdi
    27ac:	e8 00 00 00 00       	callq  27b1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    27b1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    27b7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27bb:	48 89 c7             	mov    %rax,%rdi
    27be:	e8 00 00 00 00       	callq  27c3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    27c3:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    27ca:	75 0c                	jne    27d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    27cc:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    27d2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    27d8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    27dc:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    27e3:	ba 00 00 00 00       	mov    $0x0,%edx
    27e8:	48 89 ce             	mov    %rcx,%rsi
    27eb:	48 89 c7             	mov    %rax,%rdi
    27ee:	e8 00 00 00 00       	callq  27f3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    27f3:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    27f7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    27fe:	48 89 d6             	mov    %rdx,%rsi
    2801:	48 89 c7             	mov    %rax,%rdi
    2804:	e8 00 00 00 00       	callq  2809 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    2809:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    280d:	48 89 c7             	mov    %rax,%rdi
    2810:	e8 00 00 00 00       	callq  2815 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    2815:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    281c:	48 89 c7             	mov    %rax,%rdi
    281f:	e8 00 00 00 00       	callq  2824 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    2824:	89 c3                	mov    %eax,%ebx
    2826:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    282d:	48 89 c7             	mov    %rax,%rdi
    2830:	e8 00 00 00 00       	callq  2835 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    2835:	89 da                	mov    %ebx,%edx
    2837:	29 c2                	sub    %eax,%edx
    2839:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    283d:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2844:	48 89 ce             	mov    %rcx,%rsi
    2847:	48 89 c7             	mov    %rax,%rdi
    284a:	e8 00 00 00 00       	callq  284f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    284f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2853:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    285a:	48 89 d6             	mov    %rdx,%rsi
    285d:	48 89 c7             	mov    %rax,%rdi
    2860:	e8 00 00 00 00       	callq  2865 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    2865:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2869:	48 89 c7             	mov    %rax,%rdi
    286c:	e8 00 00 00 00       	callq  2871 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    2871:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    2878:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    287f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2884:	ba 00 00 00 00       	mov    $0x0,%edx
    2889:	48 89 c7             	mov    %rax,%rdi
    288c:	e8 00 00 00 00       	callq  2891 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    2891:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2895:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    289c:	ba 00 00 00 00       	mov    $0x0,%edx
    28a1:	48 89 ce             	mov    %rcx,%rsi
    28a4:	48 89 c7             	mov    %rax,%rdi
    28a7:	e8 00 00 00 00       	callq  28ac <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    28ac:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    28b0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    28b7:	48 89 d6             	mov    %rdx,%rsi
    28ba:	48 89 c7             	mov    %rax,%rdi
    28bd:	e8 00 00 00 00       	callq  28c2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    28c2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28c6:	48 89 c7             	mov    %rax,%rdi
    28c9:	e8 00 00 00 00       	callq  28ce <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    28ce:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    28d2:	be 7b 00 00 00       	mov    $0x7b,%esi
    28d7:	48 89 c7             	mov    %rax,%rdi
    28da:	e8 00 00 00 00       	callq  28df <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    28df:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    28e5:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    28e9:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    28f0:	b9 01 00 00 00       	mov    $0x1,%ecx
    28f5:	48 89 c7             	mov    %rax,%rdi
    28f8:	e8 00 00 00 00       	callq  28fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    28fd:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    2903:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2909:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2910:	89 d6                	mov    %edx,%esi
    2912:	48 89 c7             	mov    %rax,%rdi
    2915:	e8 00 00 00 00       	callq  291a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    291a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    291e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2922:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2926:	48 89 c7             	mov    %rax,%rdi
    2929:	e8 00 00 00 00       	callq  292e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    292e:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    2935:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    293c:	00 00 00 
        int br=0;
    293f:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    2946:	00 00 00 

        while(bl != br)
    2949:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    294f:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    2955:	0f 84 a2 00 00 00    	je     29fd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    295b:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    2962:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    2968:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    296f:	89 d6                	mov    %edx,%esi
    2971:	48 89 c7             	mov    %rax,%rdi
    2974:	e8 00 00 00 00       	callq  2979 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    2979:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    297d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2981:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2985:	48 89 c7             	mov    %rax,%rdi
    2988:	e8 00 00 00 00       	callq  298d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    298d:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    2994:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2998:	be 7b 00 00 00       	mov    $0x7b,%esi
    299d:	48 89 c7             	mov    %rax,%rdi
    29a0:	e8 00 00 00 00       	callq  29a5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    29a5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29a9:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29b0:	89 d6                	mov    %edx,%esi
    29b2:	89 c7                	mov    %eax,%edi
    29b4:	e8 00 00 00 00       	callq  29b9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    29b9:	84 c0                	test   %al,%al
    29bb:	74 07                	je     29c4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    29bd:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    29c4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29c8:	be 7d 00 00 00       	mov    $0x7d,%esi
    29cd:	48 89 c7             	mov    %rax,%rdi
    29d0:	e8 00 00 00 00       	callq  29d5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    29d5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29d9:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29e0:	89 d6                	mov    %edx,%esi
    29e2:	89 c7                	mov    %eax,%edi
    29e4:	e8 00 00 00 00       	callq  29e9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    29e9:	84 c0                	test   %al,%al
    29eb:	0f 84 58 ff ff ff    	je     2949 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    29f1:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    29f8:	e9 4c ff ff ff       	jmpq   2949 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    29fd:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a03:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2a09:	89 c1                	mov    %eax,%ecx
    2a0b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a0f:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2a15:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2a1c:	48 89 c7             	mov    %rax,%rdi
    2a1f:	e8 00 00 00 00       	callq  2a24 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2a24:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a28:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2a2f:	48 89 d6             	mov    %rdx,%rsi
    2a32:	48 89 c7             	mov    %rax,%rdi
    2a35:	e8 00 00 00 00       	callq  2a3a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2a3a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a3e:	48 89 c7             	mov    %rax,%rdi
    2a41:	e8 00 00 00 00       	callq  2a46 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2a46:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a4d:	48 89 c7             	mov    %rax,%rdi
    2a50:	e8 00 00 00 00       	callq  2a55 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2a55:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2a5b:	89 c2                	mov    %eax,%edx
    2a5d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a61:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2a68:	48 89 ce             	mov    %rcx,%rsi
    2a6b:	48 89 c7             	mov    %rax,%rdi
    2a6e:	e8 00 00 00 00       	callq  2a73 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2a73:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a77:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a7e:	48 89 d6             	mov    %rdx,%rsi
    2a81:	48 89 c7             	mov    %rax,%rdi
    2a84:	e8 00 00 00 00       	callq  2a89 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2a89:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a8d:	48 89 c7             	mov    %rax,%rdi
    2a90:	e8 00 00 00 00       	callq  2a95 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2a95:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a9b:	83 c0 01             	add    $0x1,%eax
    2a9e:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2aa4:	e9 98 fc ff ff       	jmpq   2741 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2aa9:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2aaa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ab1:	48 89 c7             	mov    %rax,%rdi
    2ab4:	e8 00 00 00 00       	callq  2ab9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2ab9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2ac0:	48 89 c7             	mov    %rax,%rdi
    2ac3:	e8 00 00 00 00       	callq  2ac8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2ac8:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2acf:	48 89 c7             	mov    %rax,%rdi
    2ad2:	e8 00 00 00 00       	callq  2ad7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2ad7:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ade:	48 89 c7             	mov    %rax,%rdi
    2ae1:	e8 00 00 00 00       	callq  2ae6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2ae6:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2aed:	48 89 c7             	mov    %rax,%rdi
    2af0:	e8 00 00 00 00       	callq  2af5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2af5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2afc:	48 89 c7             	mov    %rax,%rdi
    2aff:	e8 00 00 00 00       	callq  2b04 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2b04:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b0b:	48 89 c7             	mov    %rax,%rdi
    2b0e:	e8 00 00 00 00       	callq  2b13 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2b13:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b1a:	48 89 c7             	mov    %rax,%rdi
    2b1d:	e8 00 00 00 00       	callq  2b22 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b22:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2b23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b27:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2b2e:	00 00 
    2b30:	0f 84 75 01 00 00    	je     2cab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2b36:	e9 6b 01 00 00       	jmpq   2ca6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2b3b:	48 89 c3             	mov    %rax,%rbx
    2b3e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b45:	48 89 c7             	mov    %rax,%rdi
    2b48:	e8 00 00 00 00       	callq  2b4d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2b4d:	e9 26 01 00 00       	jmpq   2c78 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b52:	48 89 c3             	mov    %rax,%rbx
    2b55:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b5c:	48 89 c7             	mov    %rax,%rdi
    2b5f:	e8 00 00 00 00       	callq  2b64 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2b64:	e9 0f 01 00 00       	jmpq   2c78 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b69:	48 89 c3             	mov    %rax,%rbx
    2b6c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2b73:	48 89 c7             	mov    %rax,%rdi
    2b76:	e8 00 00 00 00       	callq  2b7b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2b7b:	e9 e4 00 00 00       	jmpq   2c64 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b80:	48 89 c3             	mov    %rax,%rbx
    2b83:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2b8a:	48 89 c7             	mov    %rax,%rdi
    2b8d:	e8 00 00 00 00       	callq  2b92 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2b92:	e9 cd 00 00 00       	jmpq   2c64 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b97:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2b9a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2b9e:	48 89 c7             	mov    %rax,%rdi
    2ba1:	e8 00 00 00 00       	callq  2ba6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2ba6:	eb 58                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2ba8:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2bab:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2baf:	48 89 c7             	mov    %rax,%rdi
    2bb2:	e8 00 00 00 00       	callq  2bb7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2bb7:	eb 47                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bb9:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2bbc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2bc0:	48 89 c7             	mov    %rax,%rdi
    2bc3:	e8 00 00 00 00       	callq  2bc8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2bc8:	eb 36                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bca:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2bcd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2bd1:	48 89 c7             	mov    %rax,%rdi
    2bd4:	e8 00 00 00 00       	callq  2bd9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2bd9:	eb 25                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bdb:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2bde:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2be2:	48 89 c7             	mov    %rax,%rdi
    2be5:	e8 00 00 00 00       	callq  2bea <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2bea:	eb 14                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bec:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2bef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2bf3:	48 89 c7             	mov    %rax,%rdi
    2bf6:	e8 00 00 00 00       	callq  2bfb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2bfb:	eb 03                	jmp    2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bfd:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2c00:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c07:	48 89 c7             	mov    %rax,%rdi
    2c0a:	e8 00 00 00 00       	callq  2c0f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2c0f:	eb 03                	jmp    2c14 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2c11:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2c14:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2c1b:	48 89 c7             	mov    %rax,%rdi
    2c1e:	e8 00 00 00 00       	callq  2c23 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2c23:	eb 03                	jmp    2c28 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2c25:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2c28:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c2f:	48 89 c7             	mov    %rax,%rdi
    2c32:	e8 00 00 00 00       	callq  2c37 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2c37:	eb 03                	jmp    2c3c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2c39:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2c3c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c43:	48 89 c7             	mov    %rax,%rdi
    2c46:	e8 00 00 00 00       	callq  2c4b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2c4b:	eb 03                	jmp    2c50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2c4d:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2c50:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c57:	48 89 c7             	mov    %rax,%rdi
    2c5a:	e8 00 00 00 00       	callq  2c5f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2c5f:	eb 03                	jmp    2c64 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c61:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2c64:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2c6b:	48 89 c7             	mov    %rax,%rdi
    2c6e:	e8 00 00 00 00       	callq  2c73 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2c73:	eb 03                	jmp    2c78 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c75:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2c78:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2c7f:	48 89 c7             	mov    %rax,%rdi
    2c82:	e8 00 00 00 00       	callq  2c87 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2c87:	eb 03                	jmp    2c8c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2c89:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2c8c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2c93:	48 89 c7             	mov    %rax,%rdi
    2c96:	e8 00 00 00 00       	callq  2c9b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2c9b:	48 89 d8             	mov    %rbx,%rax
    2c9e:	48 89 c7             	mov    %rax,%rdi
    2ca1:	e8 00 00 00 00       	callq  2ca6 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2ca6:	e8 00 00 00 00       	callq  2cab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2cab:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2cb2:	5b                   	pop    %rbx
    2cb3:	5d                   	pop    %rbp
    2cb4:	c3                   	retq   
    2cb5:	90                   	nop

0000000000002cb6 <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2cb6:	55                   	push   %rbp
    2cb7:	48 89 e5             	mov    %rsp,%rbp
    2cba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2cbe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2cc2:	90                   	nop
    2cc3:	5d                   	pop    %rbp
    2cc4:	c3                   	retq   
    2cc5:	90                   	nop

0000000000002cc6 <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2cc6:	55                   	push   %rbp
    2cc7:	48 89 e5             	mov    %rsp,%rbp
    2cca:	53                   	push   %rbx
    2ccb:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2cd2:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2cd9:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2ce0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2ce7:	00 00 
    2ce9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2ced:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2cef:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2cf6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2cfd:	48 89 d6             	mov    %rdx,%rsi
    2d00:	48 89 c7             	mov    %rax,%rdi
    2d03:	e8 00 00 00 00       	callq  2d08 <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2d08:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2d0f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d16:	48 89 d6             	mov    %rdx,%rsi
    2d19:	48 89 c7             	mov    %rax,%rdi
    2d1c:	e8 00 00 00 00       	callq  2d21 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2d21:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d28:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d2f <_ZN6Parser11splitBlocksE7QString+0x69>
    2d2f:	48 89 c7             	mov    %rax,%rdi
    2d32:	e8 00 00 00 00       	callq  2d37 <_ZN6Parser11splitBlocksE7QString+0x71>
    2d37:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2d3e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d45:	ba 01 00 00 00       	mov    $0x1,%edx
    2d4a:	48 89 ce             	mov    %rcx,%rsi
    2d4d:	48 89 c7             	mov    %rax,%rdi
    2d50:	e8 00 00 00 00       	callq  2d55 <_ZN6Parser11splitBlocksE7QString+0x8f>
    2d55:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2d5b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d62:	48 89 c7             	mov    %rax,%rdi
    2d65:	e8 00 00 00 00       	callq  2d6a <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2d6a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2d71:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d78 <_ZN6Parser11splitBlocksE7QString+0xb2>
    2d78:	48 89 c7             	mov    %rax,%rdi
    2d7b:	e8 00 00 00 00       	callq  2d80 <_ZN6Parser11splitBlocksE7QString+0xba>
    2d80:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2d87:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d8e:	ba 01 00 00 00       	mov    $0x1,%edx
    2d93:	48 89 ce             	mov    %rcx,%rsi
    2d96:	48 89 c7             	mov    %rax,%rdi
    2d99:	e8 00 00 00 00       	callq  2d9e <_ZN6Parser11splitBlocksE7QString+0xd8>
    2d9e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2da4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2dab:	48 89 c7             	mov    %rax,%rdi
    2dae:	e8 00 00 00 00       	callq  2db3 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2db3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2dba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dc1 <_ZN6Parser11splitBlocksE7QString+0xfb>
    2dc1:	48 89 c7             	mov    %rax,%rdi
    2dc4:	e8 00 00 00 00       	callq  2dc9 <_ZN6Parser11splitBlocksE7QString+0x103>
    2dc9:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2dd0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2dd7:	ba 01 00 00 00       	mov    $0x1,%edx
    2ddc:	48 89 ce             	mov    %rcx,%rsi
    2ddf:	48 89 c7             	mov    %rax,%rdi
    2de2:	e8 00 00 00 00       	callq  2de7 <_ZN6Parser11splitBlocksE7QString+0x121>
    2de7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2ded:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2df4:	48 89 c7             	mov    %rax,%rdi
    2df7:	e8 00 00 00 00       	callq  2dfc <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2dfc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e03:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e0a <_ZN6Parser11splitBlocksE7QString+0x144>
    2e0a:	48 89 c7             	mov    %rax,%rdi
    2e0d:	e8 00 00 00 00       	callq  2e12 <_ZN6Parser11splitBlocksE7QString+0x14c>
    2e12:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2e19:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e20:	ba 01 00 00 00       	mov    $0x1,%edx
    2e25:	48 89 ce             	mov    %rcx,%rsi
    2e28:	48 89 c7             	mov    %rax,%rdi
    2e2b:	e8 00 00 00 00       	callq  2e30 <_ZN6Parser11splitBlocksE7QString+0x16a>
    2e30:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2e36:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e3d:	48 89 c7             	mov    %rax,%rdi
    2e40:	e8 00 00 00 00       	callq  2e45 <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2e45:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2e4b:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2e51:	74 43                	je     2e96 <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2e53:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e5a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e61 <_ZN6Parser11splitBlocksE7QString+0x19b>
    2e61:	48 89 c7             	mov    %rax,%rdi
    2e64:	e8 00 00 00 00       	callq  2e69 <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2e69:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2e70:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2e77:	48 89 d6             	mov    %rdx,%rsi
    2e7a:	48 89 c7             	mov    %rax,%rdi
    2e7d:	e8 00 00 00 00       	callq  2e82 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2e82:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e89:	48 89 c7             	mov    %rax,%rdi
    2e8c:	e8 00 00 00 00       	callq  2e91 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2e91:	e9 cf 03 00 00       	jmpq   3265 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    if(BCL!=BCR){
    2e96:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2e9c:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2ea2:	74 43                	je     2ee7 <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2ea4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2eab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2eb2 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2eb2:	48 89 c7             	mov    %rax,%rdi
    2eb5:	e8 00 00 00 00       	callq  2eba <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2eba:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2ec1:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ec8:	48 89 d6             	mov    %rdx,%rsi
    2ecb:	48 89 c7             	mov    %rax,%rdi
    2ece:	e8 00 00 00 00       	callq  2ed3 <_ZN6Parser11splitBlocksE7QString+0x20d>
    2ed3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2eda:	48 89 c7             	mov    %rax,%rdi
    2edd:	e8 00 00 00 00       	callq  2ee2 <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2ee2:	e9 7e 03 00 00       	jmpq   3265 <_ZN6Parser11splitBlocksE7QString+0x59f>
    }

    QByteArray BlockResult;
    2ee7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2eee:	48 89 c7             	mov    %rax,%rdi
    2ef1:	e8 00 00 00 00       	callq  2ef6 <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2ef6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2efd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f04 <_ZN6Parser11splitBlocksE7QString+0x23e>
    2f04:	48 89 c7             	mov    %rax,%rdi
    2f07:	e8 00 00 00 00       	callq  2f0c <_ZN6Parser11splitBlocksE7QString+0x246>
    2f0c:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2f13:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f1a:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f1f:	ba 01 00 00 00       	mov    $0x1,%edx
    2f24:	48 89 c7             	mov    %rax,%rdi
    2f27:	e8 00 00 00 00       	callq  2f2c <_ZN6Parser11splitBlocksE7QString+0x266>
    2f2c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f33:	48 89 c7             	mov    %rax,%rdi
    2f36:	e8 00 00 00 00       	callq  2f3b <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2f3b:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2f42:	00 00 00 
    QString blockName;
    2f45:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2f49:	48 89 c7             	mov    %rax,%rdi
    2f4c:	e8 00 00 00 00       	callq  2f51 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2f51:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2f58:	48 89 c7             	mov    %rax,%rdi
    2f5b:	e8 00 00 00 00       	callq  2f60 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2f60:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2f67:	00 00 00 
    int     line     = 0;
    2f6a:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2f71:	00 00 00 
    QString block;
    2f74:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2f78:	48 89 c7             	mov    %rax,%rdi
    2f7b:	e8 00 00 00 00       	callq  2f80 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2f80:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2f87:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f8e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f93:	ba 00 00 00 00       	mov    $0x0,%edx
    2f98:	48 89 c7             	mov    %rax,%rdi
    2f9b:	e8 00 00 00 00       	callq  2fa0 <_ZN6Parser11splitBlocksE7QString+0x2da>
    2fa0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2fa6:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2fad:	0f 88 7b 02 00 00    	js     322e <_ZN6Parser11splitBlocksE7QString+0x568>

        line = whatLine(str_copy, lineBase + i) + 1;
    2fb3:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2fb9:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    2fbf:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2fc2:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2fc9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2fcd:	48 89 d6             	mov    %rdx,%rsi
    2fd0:	48 89 c7             	mov    %rax,%rdi
    2fd3:	e8 00 00 00 00       	callq  2fd8 <_ZN6Parser11splitBlocksE7QString+0x312>
    2fd8:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2fdc:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2fe3:	89 da                	mov    %ebx,%edx
    2fe5:	48 89 ce             	mov    %rcx,%rsi
    2fe8:	48 89 c7             	mov    %rax,%rdi
    2feb:	e8 00 00 00 00       	callq  2ff0 <_ZN6Parser11splitBlocksE7QString+0x32a>
    2ff0:	83 c0 01             	add    $0x1,%eax
    2ff3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    2ff9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2ffd:	48 89 c7             	mov    %rax,%rdi
    3000:	e8 00 00 00 00       	callq  3005 <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    3005:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3009:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    3010:	ba 01 00 00 00       	mov    $0x1,%edx
    3015:	48 89 ce             	mov    %rcx,%rsi
    3018:	48 89 c7             	mov    %rax,%rdi
    301b:	e8 00 00 00 00       	callq  3020 <_ZN6Parser11splitBlocksE7QString+0x35a>
    3020:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3024:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3028:	48 89 d6             	mov    %rdx,%rsi
    302b:	48 89 c7             	mov    %rax,%rdi
    302e:	e8 00 00 00 00       	callq  3033 <_ZN6Parser11splitBlocksE7QString+0x36d>
    3033:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3037:	48 89 c7             	mov    %rax,%rdi
    303a:	e8 00 00 00 00       	callq  303f <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    303f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3043:	be 7b 00 00 00       	mov    $0x7b,%esi
    3048:	48 89 c7             	mov    %rax,%rdi
    304b:	e8 00 00 00 00       	callq  3050 <_ZN6Parser11splitBlocksE7QString+0x38a>
    3050:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3056:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    305a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3061:	b9 01 00 00 00       	mov    $0x1,%ecx
    3066:	48 89 c7             	mov    %rax,%rdi
    3069:	e8 00 00 00 00       	callq  306e <_ZN6Parser11splitBlocksE7QString+0x3a8>
    306e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    3074:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    307a:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3081:	89 d6                	mov    %edx,%esi
    3083:	48 89 c7             	mov    %rax,%rdi
    3086:	e8 00 00 00 00       	callq  308b <_ZN6Parser11splitBlocksE7QString+0x3c5>
    308b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    308f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3093:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3097:	48 89 c7             	mov    %rax,%rdi
    309a:	e8 00 00 00 00       	callq  309f <_ZN6Parser11splitBlocksE7QString+0x3d9>
    309f:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    30a6:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    30ad:	00 00 00 
        int br=0;
    30b0:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    30b7:	00 00 00 

        while(bl != br)
    30ba:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    30c0:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    30c6:	0f 84 a2 00 00 00    	je     316e <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    30cc:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    30d3:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    30d9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30e0:	89 d6                	mov    %edx,%esi
    30e2:	48 89 c7             	mov    %rax,%rdi
    30e5:	e8 00 00 00 00       	callq  30ea <_ZN6Parser11splitBlocksE7QString+0x424>
    30ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    30ee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    30f2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    30f6:	48 89 c7             	mov    %rax,%rdi
    30f9:	e8 00 00 00 00       	callq  30fe <_ZN6Parser11splitBlocksE7QString+0x438>
    30fe:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    3105:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3109:	be 7b 00 00 00       	mov    $0x7b,%esi
    310e:	48 89 c7             	mov    %rax,%rdi
    3111:	e8 00 00 00 00       	callq  3116 <_ZN6Parser11splitBlocksE7QString+0x450>
    3116:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    311a:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3121:	89 d6                	mov    %edx,%esi
    3123:	89 c7                	mov    %eax,%edi
    3125:	e8 00 00 00 00       	callq  312a <_ZN6Parser11splitBlocksE7QString+0x464>
    312a:	84 c0                	test   %al,%al
    312c:	74 07                	je     3135 <_ZN6Parser11splitBlocksE7QString+0x46f>
    312e:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    3135:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3139:	be 7d 00 00 00       	mov    $0x7d,%esi
    313e:	48 89 c7             	mov    %rax,%rdi
    3141:	e8 00 00 00 00       	callq  3146 <_ZN6Parser11splitBlocksE7QString+0x480>
    3146:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    314a:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3151:	89 d6                	mov    %edx,%esi
    3153:	89 c7                	mov    %eax,%edi
    3155:	e8 00 00 00 00       	callq  315a <_ZN6Parser11splitBlocksE7QString+0x494>
    315a:	84 c0                	test   %al,%al
    315c:	0f 84 58 ff ff ff    	je     30ba <_ZN6Parser11splitBlocksE7QString+0x3f4>
    3162:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    3169:	e9 4c ff ff ff       	jmpq   30ba <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    316e:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3174:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    317a:	89 c1                	mov    %eax,%ecx
    317c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3180:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    3186:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    318d:	48 89 c7             	mov    %rax,%rdi
    3190:	e8 00 00 00 00       	callq  3195 <_ZN6Parser11splitBlocksE7QString+0x4cf>
    3195:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3199:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    319d:	48 89 d6             	mov    %rdx,%rsi
    31a0:	48 89 c7             	mov    %rax,%rdi
    31a3:	e8 00 00 00 00       	callq  31a8 <_ZN6Parser11splitBlocksE7QString+0x4e2>
    31a8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31ac:	48 89 c7             	mov    %rax,%rdi
    31af:	e8 00 00 00 00       	callq  31b4 <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    31b4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31bb:	48 89 c7             	mov    %rax,%rdi
    31be:	e8 00 00 00 00       	callq  31c3 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    31c3:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    31c9:	89 c2                	mov    %eax,%edx
    31cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31cf:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    31d6:	48 89 ce             	mov    %rcx,%rsi
    31d9:	48 89 c7             	mov    %rax,%rdi
    31dc:	e8 00 00 00 00       	callq  31e1 <_ZN6Parser11splitBlocksE7QString+0x51b>
    31e1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    31e5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31ec:	48 89 d6             	mov    %rdx,%rsi
    31ef:	48 89 c7             	mov    %rax,%rdi
    31f2:	e8 00 00 00 00       	callq  31f7 <_ZN6Parser11splitBlocksE7QString+0x531>
    31f7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31fb:	48 89 c7             	mov    %rax,%rdi
    31fe:	e8 00 00 00 00       	callq  3203 <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    3203:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    3209:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    320f:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    3216:	48 8d 50 70          	lea    0x70(%rax),%rdx
    321a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    321e:	48 89 c6             	mov    %rax,%rsi
    3221:	48 89 d7             	mov    %rdx,%rdi
    3224:	e8 00 00 00 00       	callq  3229 <_ZN6Parser11splitBlocksE7QString+0x563>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    3229:	e9 52 fd ff ff       	jmpq   2f80 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    322e:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    322f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3233:	48 89 c7             	mov    %rax,%rdi
    3236:	e8 00 00 00 00       	callq  323b <_ZN6Parser11splitBlocksE7QString+0x575>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    323b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    323f:	48 89 c7             	mov    %rax,%rdi
    3242:	e8 00 00 00 00       	callq  3247 <_ZN6Parser11splitBlocksE7QString+0x581>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3247:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    324e:	48 89 c7             	mov    %rax,%rdi
    3251:	e8 00 00 00 00       	callq  3256 <_ZN6Parser11splitBlocksE7QString+0x590>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    3256:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    325d:	48 89 c7             	mov    %rax,%rdi
    3260:	e8 00 00 00 00       	callq  3265 <_ZN6Parser11splitBlocksE7QString+0x59f>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    3265:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    326c:	48 89 c7             	mov    %rax,%rdi
    326f:	e8 00 00 00 00       	callq  3274 <_ZN6Parser11splitBlocksE7QString+0x5ae>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    3274:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    327b:	48 89 c7             	mov    %rax,%rdi
    327e:	e8 00 00 00 00       	callq  3283 <_ZN6Parser11splitBlocksE7QString+0x5bd>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    3283:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3287:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    328e:	00 00 
    3290:	0f 84 7e 01 00 00    	je     3414 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3296:	e9 74 01 00 00       	jmpq   340f <_ZN6Parser11splitBlocksE7QString+0x749>
    329b:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    329e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    32a5:	48 89 c7             	mov    %rax,%rdi
    32a8:	e8 00 00 00 00       	callq  32ad <_ZN6Parser11splitBlocksE7QString+0x5e7>
    32ad:	e9 2f 01 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    32b2:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    32b5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    32bc:	48 89 c7             	mov    %rax,%rdi
    32bf:	e8 00 00 00 00       	callq  32c4 <_ZN6Parser11splitBlocksE7QString+0x5fe>
    32c4:	e9 18 01 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    32c9:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    32cc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    32d3:	48 89 c7             	mov    %rax,%rdi
    32d6:	e8 00 00 00 00       	callq  32db <_ZN6Parser11splitBlocksE7QString+0x615>
    32db:	e9 01 01 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    32e0:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    32e3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    32ea:	48 89 c7             	mov    %rax,%rdi
    32ed:	e8 00 00 00 00       	callq  32f2 <_ZN6Parser11splitBlocksE7QString+0x62c>
    32f2:	e9 ea 00 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    32f7:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    32fa:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3301:	48 89 c7             	mov    %rax,%rdi
    3304:	e8 00 00 00 00       	callq  3309 <_ZN6Parser11splitBlocksE7QString+0x643>
    3309:	e9 d3 00 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    330e:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    3311:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3318:	48 89 c7             	mov    %rax,%rdi
    331b:	e8 00 00 00 00       	callq  3320 <_ZN6Parser11splitBlocksE7QString+0x65a>
    3320:	e9 bc 00 00 00       	jmpq   33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    3325:	48 89 c3             	mov    %rax,%rbx
    3328:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    332f:	48 89 c7             	mov    %rax,%rdi
    3332:	e8 00 00 00 00       	callq  3337 <_ZN6Parser11splitBlocksE7QString+0x671>
    3337:	e9 91 00 00 00       	jmpq   33cd <_ZN6Parser11splitBlocksE7QString+0x707>
    333c:	48 89 c3             	mov    %rax,%rbx
    333f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3346:	48 89 c7             	mov    %rax,%rdi
    3349:	e8 00 00 00 00       	callq  334e <_ZN6Parser11splitBlocksE7QString+0x688>
    334e:	eb 7d                	jmp    33cd <_ZN6Parser11splitBlocksE7QString+0x707>
    3350:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    3353:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3357:	48 89 c7             	mov    %rax,%rdi
    335a:	e8 00 00 00 00       	callq  335f <_ZN6Parser11splitBlocksE7QString+0x699>
    335f:	eb 36                	jmp    3397 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3361:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    3364:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3368:	48 89 c7             	mov    %rax,%rdi
    336b:	e8 00 00 00 00       	callq  3370 <_ZN6Parser11splitBlocksE7QString+0x6aa>
    3370:	eb 25                	jmp    3397 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3372:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3375:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3379:	48 89 c7             	mov    %rax,%rdi
    337c:	e8 00 00 00 00       	callq  3381 <_ZN6Parser11splitBlocksE7QString+0x6bb>
    3381:	eb 14                	jmp    3397 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3383:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    3386:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    338a:	48 89 c7             	mov    %rax,%rdi
    338d:	e8 00 00 00 00       	callq  3392 <_ZN6Parser11splitBlocksE7QString+0x6cc>
    3392:	eb 03                	jmp    3397 <_ZN6Parser11splitBlocksE7QString+0x6d1>
    3394:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3397:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    339b:	48 89 c7             	mov    %rax,%rdi
    339e:	e8 00 00 00 00       	callq  33a3 <_ZN6Parser11splitBlocksE7QString+0x6dd>
    33a3:	eb 03                	jmp    33a8 <_ZN6Parser11splitBlocksE7QString+0x6e2>
    33a5:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    33a8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33ac:	48 89 c7             	mov    %rax,%rdi
    33af:	e8 00 00 00 00       	callq  33b4 <_ZN6Parser11splitBlocksE7QString+0x6ee>
    33b4:	eb 03                	jmp    33b9 <_ZN6Parser11splitBlocksE7QString+0x6f3>
    33b6:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    33b9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33c0:	48 89 c7             	mov    %rax,%rdi
    33c3:	e8 00 00 00 00       	callq  33c8 <_ZN6Parser11splitBlocksE7QString+0x702>
    33c8:	eb 03                	jmp    33cd <_ZN6Parser11splitBlocksE7QString+0x707>
    33ca:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    33cd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    33d4:	48 89 c7             	mov    %rax,%rdi
    33d7:	e8 00 00 00 00       	callq  33dc <_ZN6Parser11splitBlocksE7QString+0x716>
    33dc:	eb 03                	jmp    33e1 <_ZN6Parser11splitBlocksE7QString+0x71b>
    33de:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    33e1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    33e8:	48 89 c7             	mov    %rax,%rdi
    33eb:	e8 00 00 00 00       	callq  33f0 <_ZN6Parser11splitBlocksE7QString+0x72a>
    33f0:	eb 03                	jmp    33f5 <_ZN6Parser11splitBlocksE7QString+0x72f>
    33f2:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    33f5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    33fc:	48 89 c7             	mov    %rax,%rdi
    33ff:	e8 00 00 00 00       	callq  3404 <_ZN6Parser11splitBlocksE7QString+0x73e>
    3404:	48 89 d8             	mov    %rbx,%rax
    3407:	48 89 c7             	mov    %rax,%rdi
    340a:	e8 00 00 00 00       	callq  340f <_ZN6Parser11splitBlocksE7QString+0x749>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    340f:	e8 00 00 00 00       	callq  3414 <_ZN6Parser11splitBlocksE7QString+0x74e>
    3414:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    341b:	5b                   	pop    %rbx
    341c:	5d                   	pop    %rbp
    341d:	c3                   	retq   

000000000000341e <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    341e:	55                   	push   %rbp
    341f:	48 89 e5             	mov    %rsp,%rbp
    3422:	53                   	push   %rbx
    3423:	48 83 ec 48          	sub    $0x48,%rsp
    3427:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    342b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3432:	00 00 
    3434:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3438:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    343a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    343e:	48 89 c7             	mov    %rax,%rdi
    3441:	e8 00 00 00 00       	callq  3446 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    3446:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    344a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3451 <_ZN6Parser10globalSemsEv+0x33>
    3451:	48 89 c7             	mov    %rax,%rdi
    3454:	e8 00 00 00 00       	callq  3459 <_ZN6Parser10globalSemsEv+0x3b>
    3459:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    345d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    3461:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3465:	48 89 ce             	mov    %rcx,%rsi
    3468:	48 89 c7             	mov    %rax,%rdi
    346b:	e8 00 00 00 00       	callq  3470 <_ZN6Parser10globalSemsEv+0x52>
    3470:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3474:	48 89 c7             	mov    %rax,%rdi
    3477:	e8 00 00 00 00       	callq  347c <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    347c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3480:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3484:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    3488:	48 89 ce             	mov    %rcx,%rsi
    348b:	48 89 c7             	mov    %rax,%rdi
    348e:	e8 00 00 00 00       	callq  3493 <_ZN6Parser10globalSemsEv+0x75>
    3493:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3497:	48 89 c7             	mov    %rax,%rdi
    349a:	e8 00 00 00 00       	callq  349f <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    349f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34a3:	48 89 c7             	mov    %rax,%rdi
    34a6:	e8 00 00 00 00       	callq  34ab <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34ab:	90                   	nop
    34ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34b0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    34b7:	00 00 
    34b9:	74 32                	je     34ed <_ZN6Parser10globalSemsEv+0xcf>
    34bb:	eb 2b                	jmp    34e8 <_ZN6Parser10globalSemsEv+0xca>
    34bd:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    34c0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    34c4:	48 89 c7             	mov    %rax,%rdi
    34c7:	e8 00 00 00 00       	callq  34cc <_ZN6Parser10globalSemsEv+0xae>
    34cc:	eb 03                	jmp    34d1 <_ZN6Parser10globalSemsEv+0xb3>
    34ce:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34d1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34d5:	48 89 c7             	mov    %rax,%rdi
    34d8:	e8 00 00 00 00       	callq  34dd <_ZN6Parser10globalSemsEv+0xbf>
    34dd:	48 89 d8             	mov    %rbx,%rax
    34e0:	48 89 c7             	mov    %rax,%rdi
    34e3:	e8 00 00 00 00       	callq  34e8 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34e8:	e8 00 00 00 00       	callq  34ed <_ZN6Parser10globalSemsEv+0xcf>
    34ed:	48 83 c4 48          	add    $0x48,%rsp
    34f1:	5b                   	pop    %rbx
    34f2:	5d                   	pop    %rbp
    34f3:	c3                   	retq   

00000000000034f4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    34f4:	55                   	push   %rbp
    34f5:	48 89 e5             	mov    %rsp,%rbp
    34f8:	53                   	push   %rbx
    34f9:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    3500:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    3507:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    350e:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    3514:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    351b:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    3522:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3529:	00 00 
    352b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    352f:	31 c0                	xor    %eax,%eax
        QByteArray result;
    3531:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3538:	48 89 c7             	mov    %rax,%rdi
    353b:	e8 00 00 00 00       	callq  3540 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    3540:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    3546:	0f be d0             	movsbl %al,%edx
    3549:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3550:	89 d6                	mov    %edx,%esi
    3552:	48 89 c7             	mov    %rax,%rdi
    3555:	e8 00 00 00 00       	callq  355a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    355a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3561:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3568 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    3568:	48 89 c7             	mov    %rax,%rdi
    356b:	e8 00 00 00 00       	callq  3570 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    3570:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3577:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 357e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    357e:	48 89 c7             	mov    %rax,%rdi
    3581:	e8 00 00 00 00       	callq  3586 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    3586:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    358d:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    3594:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    359b:	b9 01 00 00 00       	mov    $0x1,%ecx
    35a0:	48 89 c7             	mov    %rax,%rdi
    35a3:	e8 00 00 00 00       	callq  35a8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    35a8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35af:	48 89 c7             	mov    %rax,%rdi
    35b2:	e8 00 00 00 00       	callq  35b7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    35b7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    35be:	48 89 c7             	mov    %rax,%rdi
    35c1:	e8 00 00 00 00       	callq  35c6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    35c6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    35cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35d4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    35d4:	48 89 c7             	mov    %rax,%rdi
    35d7:	e8 00 00 00 00       	callq  35dc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    35dc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    35e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35ea <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    35ea:	48 89 c7             	mov    %rax,%rdi
    35ed:	e8 00 00 00 00       	callq  35f2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    35f2:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    35f9:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    3600:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3607:	b9 01 00 00 00       	mov    $0x1,%ecx
    360c:	48 89 c7             	mov    %rax,%rdi
    360f:	e8 00 00 00 00       	callq  3614 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    3614:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    361b:	48 89 c7             	mov    %rax,%rdi
    361e:	e8 00 00 00 00       	callq  3623 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    3623:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    362a:	48 89 c7             	mov    %rax,%rdi
    362d:	e8 00 00 00 00       	callq  3632 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    3632:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3639:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3640 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    3640:	48 89 c7             	mov    %rax,%rdi
    3643:	e8 00 00 00 00       	callq  3648 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    3648:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    364f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3656 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    3656:	48 89 c7             	mov    %rax,%rdi
    3659:	e8 00 00 00 00       	callq  365e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    365e:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    3665:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    366c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3673:	b9 01 00 00 00       	mov    $0x1,%ecx
    3678:	48 89 c7             	mov    %rax,%rdi
    367b:	e8 00 00 00 00       	callq  3680 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    3680:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3687:	48 89 c7             	mov    %rax,%rdi
    368a:	e8 00 00 00 00       	callq  368f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    368f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3696:	48 89 c7             	mov    %rax,%rdi
    3699:	e8 00 00 00 00       	callq  369e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    369e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36a2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    36a9:	48 89 c7             	mov    %rax,%rdi
    36ac:	e8 00 00 00 00       	callq  36b1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    36b1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36bc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    36bc:	48 89 c7             	mov    %rax,%rdi
    36bf:	e8 00 00 00 00       	callq  36c4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    36c4:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    36c8:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    36cc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36d3:	b9 00 00 00 00       	mov    $0x0,%ecx
    36d8:	48 89 c7             	mov    %rax,%rdi
    36db:	e8 00 00 00 00       	callq  36e0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    36e0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36e4:	48 89 c7             	mov    %rax,%rdi
    36e7:	e8 00 00 00 00       	callq  36ec <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    36ec:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36f0:	48 89 c7             	mov    %rax,%rdi
    36f3:	e8 00 00 00 00       	callq  36f8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    36f8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    36fc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3703 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    3703:	48 89 c7             	mov    %rax,%rdi
    3706:	e8 00 00 00 00       	callq  370b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    370b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    370f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3716 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    3716:	48 89 c7             	mov    %rax,%rdi
    3719:	e8 00 00 00 00       	callq  371e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    371e:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3722:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3726:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    372d:	b9 00 00 00 00       	mov    $0x0,%ecx
    3732:	48 89 c7             	mov    %rax,%rdi
    3735:	e8 00 00 00 00       	callq  373a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    373a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    373e:	48 89 c7             	mov    %rax,%rdi
    3741:	e8 00 00 00 00       	callq  3746 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    3746:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    374a:	48 89 c7             	mov    %rax,%rdi
    374d:	e8 00 00 00 00       	callq  3752 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    3752:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3756:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 375d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    375d:	48 89 c7             	mov    %rax,%rdi
    3760:	e8 00 00 00 00       	callq  3765 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    3765:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3769:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    376d:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    3774:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    377a:	b9 00 00 00 00       	mov    $0x0,%ecx
    377f:	48 89 c7             	mov    %rax,%rdi
    3782:	e8 00 00 00 00       	callq  3787 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    3787:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    378b:	48 89 c7             	mov    %rax,%rdi
    378e:	e8 00 00 00 00       	callq  3793 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    3793:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    379a:	00 00 00 
    379d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37a1:	48 89 c7             	mov    %rax,%rdi
    37a4:	e8 00 00 00 00       	callq  37a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    37a9:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    37af:	0f 9f c0             	setg   %al
    37b2:	84 c0                	test   %al,%al
    37b4:	74 6e                	je     3824 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    37b6:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    37bc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37c0:	89 d6                	mov    %edx,%esi
    37c2:	48 89 c7             	mov    %rax,%rdi
    37c5:	e8 00 00 00 00       	callq  37ca <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    37ca:	48 89 c7             	mov    %rax,%rdi
    37cd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    37d1:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    37d7:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    37de:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    37e5:	41 89 c8             	mov    %ecx,%r8d
    37e8:	48 89 d1             	mov    %rdx,%rcx
    37eb:	48 89 fa             	mov    %rdi,%rdx
    37ee:	48 89 c7             	mov    %rax,%rdi
    37f1:	e8 00 00 00 00       	callq  37f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    37f6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    37fa:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3801:	48 89 d6             	mov    %rdx,%rsi
    3804:	48 89 c7             	mov    %rax,%rdi
    3807:	e8 00 00 00 00       	callq  380c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    380c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3810:	48 89 c7             	mov    %rax,%rdi
    3813:	e8 00 00 00 00       	callq  3818 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    3818:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    381f:	e9 79 ff ff ff       	jmpq   379d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    3824:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    382b:	48 89 c7             	mov    %rax,%rdi
    382e:	e8 00 00 00 00       	callq  3833 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    3833:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    3839:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    3840:	00 00 00 
    3843:	b8 1f 00 00 00       	mov    $0x1f,%eax
    3848:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    384e:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    3854:	7e 1d                	jle    3873 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    3856:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    385d:	be 00 00 00 00       	mov    $0x0,%esi
    3862:	48 89 c7             	mov    %rax,%rdi
    3865:	e8 00 00 00 00       	callq  386a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    386a:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    3871:	eb d0                	jmp    3843 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    3873:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    3879:	0f be d0             	movsbl %al,%edx
    387c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3883:	89 d6                	mov    %edx,%esi
    3885:	48 89 c7             	mov    %rax,%rdi
    3888:	e8 00 00 00 00       	callq  388d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    388d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    3894:	48 8d 90 d8 00 00 00 	lea    0xd8(%rax),%rdx
    389b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38a2:	48 89 c6             	mov    %rax,%rsi
    38a5:	48 89 d7             	mov    %rdx,%rdi
    38a8:	e8 00 00 00 00       	callq  38ad <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    38ad:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    38b1:	48 89 c7             	mov    %rax,%rdi
    38b4:	e8 00 00 00 00       	callq  38b9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    38b9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38c0:	48 89 c7             	mov    %rax,%rdi
    38c3:	e8 00 00 00 00       	callq  38c8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    38c8:	90                   	nop
    38c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38cd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    38d4:	00 00 
    38d6:	0f 84 30 01 00 00    	je     3a0c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    38dc:	e9 26 01 00 00       	jmpq   3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    38e1:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    38e4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    38eb:	48 89 c7             	mov    %rax,%rdi
    38ee:	e8 00 00 00 00       	callq  38f3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    38f3:	eb 03                	jmp    38f8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    38f5:	48 89 c3             	mov    %rax,%rbx
    38f8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    38ff:	48 89 c7             	mov    %rax,%rdi
    3902:	e8 00 00 00 00       	callq  3907 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    3907:	e9 e1 00 00 00       	jmpq   39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    390c:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    390f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3916:	48 89 c7             	mov    %rax,%rdi
    3919:	e8 00 00 00 00       	callq  391e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    391e:	eb 03                	jmp    3923 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    3920:	48 89 c3             	mov    %rax,%rbx
    3923:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    392a:	48 89 c7             	mov    %rax,%rdi
    392d:	e8 00 00 00 00       	callq  3932 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    3932:	e9 b6 00 00 00       	jmpq   39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3937:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    393a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3941:	48 89 c7             	mov    %rax,%rdi
    3944:	e8 00 00 00 00       	callq  3949 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    3949:	eb 03                	jmp    394e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    394b:	48 89 c3             	mov    %rax,%rbx
    394e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3955:	48 89 c7             	mov    %rax,%rdi
    3958:	e8 00 00 00 00       	callq  395d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    395d:	e9 8b 00 00 00       	jmpq   39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3962:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    3965:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3969:	48 89 c7             	mov    %rax,%rdi
    396c:	e8 00 00 00 00       	callq  3971 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    3971:	eb 03                	jmp    3976 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    3973:	48 89 c3             	mov    %rax,%rbx
    3976:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    397a:	48 89 c7             	mov    %rax,%rdi
    397d:	e8 00 00 00 00       	callq  3982 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    3982:	eb 69                	jmp    39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3984:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3987:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    398b:	48 89 c7             	mov    %rax,%rdi
    398e:	e8 00 00 00 00       	callq  3993 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    3993:	eb 03                	jmp    3998 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    3995:	48 89 c3             	mov    %rax,%rbx
    3998:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    399c:	48 89 c7             	mov    %rax,%rdi
    399f:	e8 00 00 00 00       	callq  39a4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    39a4:	eb 47                	jmp    39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39a6:	48 89 c3             	mov    %rax,%rbx
    39a9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39ad:	48 89 c7             	mov    %rax,%rdi
    39b0:	e8 00 00 00 00       	callq  39b5 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    39b5:	eb 36                	jmp    39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39b7:	48 89 c3             	mov    %rax,%rbx
    39ba:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39be:	48 89 c7             	mov    %rax,%rdi
    39c1:	e8 00 00 00 00       	callq  39c6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    39c6:	eb 25                	jmp    39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39c8:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    39cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    39cf:	48 89 c7             	mov    %rax,%rdi
    39d2:	e8 00 00 00 00       	callq  39d7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    39d7:	eb 03                	jmp    39dc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    39d9:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    39dc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39e0:	48 89 c7             	mov    %rax,%rdi
    39e3:	e8 00 00 00 00       	callq  39e8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    39e8:	eb 03                	jmp    39ed <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39ea:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    39ed:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    39f4:	48 89 c7             	mov    %rax,%rdi
    39f7:	e8 00 00 00 00       	callq  39fc <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    39fc:	48 89 d8             	mov    %rbx,%rax
    39ff:	48 89 c7             	mov    %rax,%rdi
    3a02:	e8 00 00 00 00       	callq  3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3a07:	e8 00 00 00 00       	callq  3a0c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3a0c:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3a13:	5b                   	pop    %rbx
    3a14:	5d                   	pop    %rbp
    3a15:	c3                   	retq   

0000000000003a16 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3a16:	55                   	push   %rbp
    3a17:	48 89 e5             	mov    %rsp,%rbp
    3a1a:	53                   	push   %rbx
    3a1b:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3a22:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3a29:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3a30:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3a37:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3a3e:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3a45:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a4c:	00 00 
    3a4e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a52:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3a54:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3a58:	be 20 00 00 00       	mov    $0x20,%esi
    3a5d:	48 89 c7             	mov    %rax,%rdi
    3a60:	e8 00 00 00 00       	callq  3a65 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3a65:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3a69:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3a70:	b9 01 00 00 00       	mov    $0x1,%ecx
    3a75:	ba 00 00 00 00       	mov    $0x0,%edx
    3a7a:	48 89 c7             	mov    %rax,%rdi
    3a7d:	e8 00 00 00 00       	callq  3a82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3a82:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3a88:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3a8f:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3a95:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3a9c:	89 d1                	mov    %edx,%ecx
    3a9e:	ba 00 00 00 00       	mov    $0x0,%edx
    3aa3:	48 89 c7             	mov    %rax,%rdi
    3aa6:	e8 00 00 00 00       	callq  3aab <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3aab:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3ab2:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3ab5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ab9:	be 28 00 00 00       	mov    $0x28,%esi
    3abe:	48 89 c7             	mov    %rax,%rdi
    3ac1:	e8 00 00 00 00       	callq  3ac6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3ac6:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3acc:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3ad0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3ad7:	b9 01 00 00 00       	mov    $0x1,%ecx
    3adc:	48 89 c7             	mov    %rax,%rdi
    3adf:	e8 00 00 00 00       	callq  3ae4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3ae4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3aea:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3af0:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3af6:	89 c1                	mov    %eax,%ecx
    3af8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3afc:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b02:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b09:	48 89 c7             	mov    %rax,%rdi
    3b0c:	e8 00 00 00 00       	callq  3b11 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3b11:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b15:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b19:	48 89 d6             	mov    %rdx,%rsi
    3b1c:	48 89 c7             	mov    %rax,%rdi
    3b1f:	e8 00 00 00 00       	callq  3b24 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3b24:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b28:	48 89 c7             	mov    %rax,%rdi
    3b2b:	e8 00 00 00 00       	callq  3b30 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3b30:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b36:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3b3c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b40:	be 29 00 00 00       	mov    $0x29,%esi
    3b45:	48 89 c7             	mov    %rax,%rdi
    3b48:	e8 00 00 00 00       	callq  3b4d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3b4d:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b53:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b57:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b5e:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b63:	48 89 c7             	mov    %rax,%rdi
    3b66:	e8 00 00 00 00       	callq  3b6b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3b6b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3b71:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b77:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b7d:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3b80:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3b86:	8d 50 01             	lea    0x1(%rax),%edx
    3b89:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3b8d:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b94:	48 89 c7             	mov    %rax,%rdi
    3b97:	e8 00 00 00 00       	callq  3b9c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3b9c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ba0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ba7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3ba7:	48 89 c7             	mov    %rax,%rdi
    3baa:	e8 00 00 00 00       	callq  3baf <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3baf:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3bb3:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3bb7:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3bbb:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3bc1:	b9 01 00 00 00       	mov    $0x1,%ecx
    3bc6:	48 89 c7             	mov    %rax,%rdi
    3bc9:	e8 00 00 00 00       	callq  3bce <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3bce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bd2:	48 89 c7             	mov    %rax,%rdi
    3bd5:	e8 00 00 00 00       	callq  3bda <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3bda:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3bde:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3be2:	48 89 d6             	mov    %rdx,%rsi
    3be5:	48 89 c7             	mov    %rax,%rdi
    3be8:	e8 00 00 00 00       	callq  3bed <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3bed:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3bf1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3bf5:	48 89 d6             	mov    %rdx,%rsi
    3bf8:	48 89 c7             	mov    %rax,%rdi
    3bfb:	e8 00 00 00 00       	callq  3c00 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3c00:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c07:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3c0e:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3c15:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3c19:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c1d:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3c24:	45 89 c1             	mov    %r8d,%r9d
    3c27:	49 89 f8             	mov    %rdi,%r8
    3c2a:	48 89 c7             	mov    %rax,%rdi
    3c2d:	e8 00 00 00 00       	callq  3c32 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3c32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c36:	48 89 c7             	mov    %rax,%rdi
    3c39:	e8 00 00 00 00       	callq  3c3e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3c3e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c42:	48 89 c7             	mov    %rax,%rdi
    3c45:	e8 00 00 00 00       	callq  3c4a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3c4a:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c4b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c4f:	48 89 c7             	mov    %rax,%rdi
    3c52:	e8 00 00 00 00       	callq  3c57 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3c57:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3c5b:	48 89 c7             	mov    %rax,%rdi
    3c5e:	e8 00 00 00 00       	callq  3c63 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3c63:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3c67:	48 89 c7             	mov    %rax,%rdi
    3c6a:	e8 00 00 00 00       	callq  3c6f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3c6f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3c76:	48 89 c7             	mov    %rax,%rdi
    3c79:	e8 00 00 00 00       	callq  3c7e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3c7e:	90                   	nop
}
    3c7f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c86:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3c8a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3c91:	00 00 
    3c93:	0f 84 ee 00 00 00    	je     3d87 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3c99:	e9 e4 00 00 00       	jmpq   3d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3c9e:	48 89 c3             	mov    %rax,%rbx
    3ca1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ca5:	48 89 c7             	mov    %rax,%rdi
    3ca8:	e8 00 00 00 00       	callq  3cad <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3cad:	e9 b6 00 00 00       	jmpq   3d68 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cb2:	48 89 c3             	mov    %rax,%rbx
    3cb5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3cb9:	48 89 c7             	mov    %rax,%rdi
    3cbc:	e8 00 00 00 00       	callq  3cc1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3cc1:	e9 a2 00 00 00       	jmpq   3d68 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3cc6:	48 89 c3             	mov    %rax,%rbx
    3cc9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ccd:	48 89 c7             	mov    %rax,%rdi
    3cd0:	e8 00 00 00 00       	callq  3cd5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3cd5:	eb 6f                	jmp    3d46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3cd7:	48 89 c3             	mov    %rax,%rbx
    3cda:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3cde:	48 89 c7             	mov    %rax,%rdi
    3ce1:	e8 00 00 00 00       	callq  3ce6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3ce6:	eb 5e                	jmp    3d46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3ce8:	48 89 c3             	mov    %rax,%rbx
    3ceb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3cef:	48 89 c7             	mov    %rax,%rdi
    3cf2:	e8 00 00 00 00       	callq  3cf7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3cf7:	eb 17                	jmp    3d10 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3cf9:	48 89 c3             	mov    %rax,%rbx
    3cfc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d03:	48 89 c7             	mov    %rax,%rdi
    3d06:	e8 00 00 00 00       	callq  3d0b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3d0b:	eb 03                	jmp    3d10 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d0d:	48 89 c3             	mov    %rax,%rbx
    3d10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d14:	48 89 c7             	mov    %rax,%rdi
    3d17:	e8 00 00 00 00       	callq  3d1c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3d1c:	eb 17                	jmp    3d35 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d1e:	48 89 c3             	mov    %rax,%rbx
    3d21:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d28:	48 89 c7             	mov    %rax,%rdi
    3d2b:	e8 00 00 00 00       	callq  3d30 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3d30:	eb 03                	jmp    3d35 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d32:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d35:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d39:	48 89 c7             	mov    %rax,%rdi
    3d3c:	e8 00 00 00 00       	callq  3d41 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3d41:	eb 03                	jmp    3d46 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d43:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d46:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d4a:	48 89 c7             	mov    %rax,%rdi
    3d4d:	e8 00 00 00 00       	callq  3d52 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3d52:	eb 03                	jmp    3d57 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3d54:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3d57:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d5b:	48 89 c7             	mov    %rax,%rdi
    3d5e:	e8 00 00 00 00       	callq  3d63 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3d63:	eb 03                	jmp    3d68 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d65:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3d68:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d6f:	48 89 c7             	mov    %rax,%rdi
    3d72:	e8 00 00 00 00       	callq  3d77 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3d77:	48 89 d8             	mov    %rbx,%rax
    3d7a:	48 89 c7             	mov    %rax,%rdi
    3d7d:	e8 00 00 00 00       	callq  3d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3d82:	e8 00 00 00 00       	callq  3d87 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3d87:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3d8e:	5b                   	pop    %rbx
    3d8f:	5d                   	pop    %rbp
    3d90:	c3                   	retq   
    3d91:	90                   	nop

0000000000003d92 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3d92:	55                   	push   %rbp
    3d93:	48 89 e5             	mov    %rsp,%rbp
    3d96:	53                   	push   %rbx
    3d97:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3d9e:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3da5:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3dac:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3db3:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3dba:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3dc1:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3dc8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3dcf:	00 00 
    3dd1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3dd5:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3dd7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3dde:	48 89 c7             	mov    %rax,%rdi
    3de1:	e8 00 00 00 00       	callq  3de6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3de6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3ded:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3df3:	ba 0a 00 00 00       	mov    $0xa,%edx
    3df8:	89 ce                	mov    %ecx,%esi
    3dfa:	48 89 c7             	mov    %rax,%rdi
    3dfd:	e8 00 00 00 00       	callq  3e02 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3e02:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e09:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e10:	48 89 d6             	mov    %rdx,%rsi
    3e13:	48 89 c7             	mov    %rax,%rdi
    3e16:	e8 00 00 00 00       	callq  3e1b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3e1b:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3e22:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e29:	48 89 d6             	mov    %rdx,%rsi
    3e2c:	48 89 c7             	mov    %rax,%rdi
    3e2f:	e8 00 00 00 00       	callq  3e34 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3e34:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e3b:	48 89 c7             	mov    %rax,%rdi
    3e3e:	e8 00 00 00 00       	callq  3e43 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3e43:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e4a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e51:	48 89 d6             	mov    %rdx,%rsi
    3e54:	48 89 c7             	mov    %rax,%rdi
    3e57:	e8 00 00 00 00       	callq  3e5c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3e5c:	83 f0 01             	xor    $0x1,%eax
    3e5f:	84 c0                	test   %al,%al
    3e61:	0f 84 b5 00 00 00    	je     3f1c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3e67:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e6e:	48 89 c7             	mov    %rax,%rdi
    3e71:	e8 00 00 00 00       	callq  3e76 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3e76:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3e7c:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3e83:	0f 8e c0 00 00 00    	jle    3f49 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3e89:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3e90:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e97:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e9e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3e9e:	48 89 c7             	mov    %rax,%rdi
    3ea1:	e8 00 00 00 00       	callq  3ea6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3ea6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3eaa:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3eb1:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3eb8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3eb8:	48 89 ce             	mov    %rcx,%rsi
    3ebb:	48 89 c7             	mov    %rax,%rdi
    3ebe:	e8 00 00 00 00       	callq  3ec3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3ec3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ec7:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3ece:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3ed2:	48 89 ce             	mov    %rcx,%rsi
    3ed5:	48 89 c7             	mov    %rax,%rdi
    3ed8:	e8 00 00 00 00       	callq  3edd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3edd:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3ee1:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3ee8:	48 89 d6             	mov    %rdx,%rsi
    3eeb:	48 89 c7             	mov    %rax,%rdi
    3eee:	e8 00 00 00 00       	callq  3ef3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3ef3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ef7:	48 89 c7             	mov    %rax,%rdi
    3efa:	e8 00 00 00 00       	callq  3eff <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3eff:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f03:	48 89 c7             	mov    %rax,%rdi
    3f06:	e8 00 00 00 00       	callq  3f0b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3f0b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f12:	48 89 c7             	mov    %rax,%rdi
    3f15:	e8 00 00 00 00       	callq  3f1a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3f1a:	eb 2d                	jmp    3f49 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3f1c:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f23:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f2a:	48 89 d6             	mov    %rdx,%rsi
    3f2d:	48 89 c7             	mov    %rax,%rdi
    3f30:	e8 00 00 00 00       	callq  3f35 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3f35:	0f be d0             	movsbl %al,%edx
    3f38:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f3f:	89 d6                	mov    %edx,%esi
    3f41:	48 89 c7             	mov    %rax,%rdi
    3f44:	e8 00 00 00 00       	callq  3f49 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3f49:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3f50:	00 00 00 
    3f53:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f5a:	48 89 c7             	mov    %rax,%rdi
    3f5d:	e8 00 00 00 00       	callq  3f62 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3f62:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3f68:	0f 9f c0             	setg   %al
    3f6b:	84 c0                	test   %al,%al
    3f6d:	0f 84 e2 02 00 00    	je     4255 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3f73:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f7a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3f80:	89 d6                	mov    %edx,%esi
    3f82:	48 89 c7             	mov    %rax,%rdi
    3f85:	e8 00 00 00 00       	callq  3f8a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3f8a:	48 89 c2             	mov    %rax,%rdx
    3f8d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f94:	48 89 d6             	mov    %rdx,%rsi
    3f97:	48 89 c7             	mov    %rax,%rdi
    3f9a:	e8 00 00 00 00       	callq  3f9f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3f9f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fa6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fad <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3fad:	48 89 c7             	mov    %rax,%rdi
    3fb0:	e8 00 00 00 00       	callq  3fb5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3fb5:	84 c0                	test   %al,%al
    3fb7:	74 19                	je     3fd2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3fb9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3fc0:	be 19 00 00 00       	mov    $0x19,%esi
    3fc5:	48 89 c7             	mov    %rax,%rdi
    3fc8:	e8 00 00 00 00       	callq  3fcd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3fcd:	e9 68 02 00 00       	jmpq   423a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    3fd2:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3fd9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3fdd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fe4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3fe4:	48 89 c7             	mov    %rax,%rdi
    3fe7:	e8 00 00 00 00       	callq  3fec <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    3fec:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    3ff0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3ff7:	b9 01 00 00 00       	mov    $0x1,%ecx
    3ffc:	ba 00 00 00 00       	mov    $0x0,%edx
    4001:	48 89 c7             	mov    %rax,%rdi
    4004:	e8 00 00 00 00       	callq  4009 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    4009:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    400f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4013:	48 89 c7             	mov    %rax,%rdi
    4016:	e8 00 00 00 00       	callq  401b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    401b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    401f:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    4025:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    402c:	48 89 ce             	mov    %rcx,%rsi
    402f:	48 89 c7             	mov    %rax,%rdi
    4032:	e8 00 00 00 00       	callq  4037 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    4037:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    403b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    403f:	48 89 d6             	mov    %rdx,%rsi
    4042:	48 89 c7             	mov    %rax,%rdi
    4045:	e8 00 00 00 00       	callq  404a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    404a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    404e:	48 89 c7             	mov    %rax,%rdi
    4051:	e8 00 00 00 00       	callq  4056 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4056:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    405d:	48 89 c7             	mov    %rax,%rdi
    4060:	e8 00 00 00 00       	callq  4065 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    4065:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    406b:	8d 50 ff             	lea    -0x1(%rax),%edx
    406e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4072:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4079:	48 89 ce             	mov    %rcx,%rsi
    407c:	48 89 c7             	mov    %rax,%rdi
    407f:	e8 00 00 00 00       	callq  4084 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    4084:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4088:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    408c:	48 89 d6             	mov    %rdx,%rsi
    408f:	48 89 c7             	mov    %rax,%rdi
    4092:	e8 00 00 00 00       	callq  4097 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    4097:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    409b:	48 89 c7             	mov    %rax,%rdi
    409e:	e8 00 00 00 00       	callq  40a3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    40a3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40ae <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    40ae:	48 89 c7             	mov    %rax,%rdi
    40b1:	e8 00 00 00 00       	callq  40b6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    40b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40ba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40c1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    40c1:	48 89 c7             	mov    %rax,%rdi
    40c4:	e8 00 00 00 00       	callq  40c9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    40c9:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40cd:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    40d4:	48 89 d6             	mov    %rdx,%rsi
    40d7:	48 89 c7             	mov    %rax,%rdi
    40da:	e8 00 00 00 00       	callq  40df <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    40df:	83 f0 01             	xor    $0x1,%eax
    40e2:	84 c0                	test   %al,%al
    40e4:	74 38                	je     411e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    40e6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    40ea:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40ee:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40f5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    40f5:	48 89 c7             	mov    %rax,%rdi
    40f8:	e8 00 00 00 00       	callq  40fd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    40fd:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4101:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4105:	48 89 d6             	mov    %rdx,%rsi
    4108:	48 89 c7             	mov    %rax,%rdi
    410b:	e8 00 00 00 00       	callq  4110 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    4110:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4114:	48 89 c7             	mov    %rax,%rdi
    4117:	e8 00 00 00 00       	callq  411c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    411c:	eb 74                	jmp    4192 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    411e:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4122:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4129:	48 89 d6             	mov    %rdx,%rsi
    412c:	48 89 c7             	mov    %rax,%rdi
    412f:	e8 00 00 00 00       	callq  4134 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    4134:	0f be d0             	movsbl %al,%edx
    4137:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    413e:	89 d6                	mov    %edx,%esi
    4140:	48 89 c7             	mov    %rax,%rdi
    4143:	e8 00 00 00 00       	callq  4148 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    4148:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    414c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4153:	48 89 d6             	mov    %rdx,%rsi
    4156:	48 89 c7             	mov    %rax,%rdi
    4159:	e8 00 00 00 00       	callq  415e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    415e:	89 c1                	mov    %eax,%ecx
    4160:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4164:	ba 0a 00 00 00       	mov    $0xa,%edx
    4169:	89 ce                	mov    %ecx,%esi
    416b:	48 89 c7             	mov    %rax,%rdi
    416e:	e8 00 00 00 00       	callq  4173 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    4173:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4177:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    417b:	48 89 d6             	mov    %rdx,%rsi
    417e:	48 89 c7             	mov    %rax,%rdi
    4181:	e8 00 00 00 00       	callq  4186 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    4186:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    418a:	48 89 c7             	mov    %rax,%rdi
    418d:	e8 00 00 00 00       	callq  4192 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    4192:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    4196:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    419d:	48 89 d6             	mov    %rdx,%rsi
    41a0:	48 89 c7             	mov    %rax,%rdi
    41a3:	e8 00 00 00 00       	callq  41a8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    41a8:	83 f0 01             	xor    $0x1,%eax
    41ab:	84 c0                	test   %al,%al
    41ad:	74 31                	je     41e0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    41af:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    41b6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    41ba:	ba 0a 00 00 00       	mov    $0xa,%edx
    41bf:	48 89 ce             	mov    %rcx,%rsi
    41c2:	48 89 c7             	mov    %rax,%rdi
    41c5:	e8 00 00 00 00       	callq  41ca <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    41ca:	0f be d0             	movsbl %al,%edx
    41cd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    41d4:	89 d6                	mov    %edx,%esi
    41d6:	48 89 c7             	mov    %rax,%rdi
    41d9:	e8 00 00 00 00       	callq  41de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    41de:	eb 2a                	jmp    420a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    41e0:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41e4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41eb:	48 89 d6             	mov    %rdx,%rsi
    41ee:	48 89 c7             	mov    %rax,%rdi
    41f1:	e8 00 00 00 00       	callq  41f6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    41f6:	0f be d0             	movsbl %al,%edx
    41f9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4200:	89 d6                	mov    %edx,%esi
    4202:	48 89 c7             	mov    %rax,%rdi
    4205:	e8 00 00 00 00       	callq  420a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    420a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    420e:	48 89 c7             	mov    %rax,%rdi
    4211:	e8 00 00 00 00       	callq  4216 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4216:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    421a:	48 89 c7             	mov    %rax,%rdi
    421d:	e8 00 00 00 00       	callq  4222 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4222:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4226:	48 89 c7             	mov    %rax,%rdi
    4229:	e8 00 00 00 00       	callq  422e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    422e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4232:	48 89 c7             	mov    %rax,%rdi
    4235:	e8 00 00 00 00       	callq  423a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    423a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4241:	48 89 c7             	mov    %rax,%rdi
    4244:	e8 00 00 00 00       	callq  4249 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4249:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    4250:	e9 fe fc ff ff       	jmpq   3f53 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4255:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4256:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    425d:	48 89 c7             	mov    %rax,%rdi
    4260:	e8 00 00 00 00       	callq  4265 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    4265:	e9 59 01 00 00       	jmpq   43c3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    426a:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    426d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4274:	48 89 c7             	mov    %rax,%rdi
    4277:	e8 00 00 00 00       	callq  427c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    427c:	e9 14 01 00 00       	jmpq   4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4281:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    4284:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4288:	48 89 c7             	mov    %rax,%rdi
    428b:	e8 00 00 00 00       	callq  4290 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    4290:	eb 03                	jmp    4295 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    4292:	48 89 c3             	mov    %rax,%rbx
    4295:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4299:	48 89 c7             	mov    %rax,%rdi
    429c:	e8 00 00 00 00       	callq  42a1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    42a1:	eb 03                	jmp    42a6 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    42a3:	48 89 c3             	mov    %rax,%rbx
    42a6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42ad:	48 89 c7             	mov    %rax,%rdi
    42b0:	e8 00 00 00 00       	callq  42b5 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    42b5:	e9 db 00 00 00       	jmpq   4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    42ba:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    42bd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    42c1:	48 89 c7             	mov    %rax,%rdi
    42c4:	e8 00 00 00 00       	callq  42c9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    42c9:	e9 b3 00 00 00       	jmpq   4381 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42ce:	48 89 c3             	mov    %rax,%rbx
    42d1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42d5:	48 89 c7             	mov    %rax,%rdi
    42d8:	e8 00 00 00 00       	callq  42dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    42dd:	e9 9f 00 00 00       	jmpq   4381 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42e2:	48 89 c3             	mov    %rax,%rbx
    42e5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42e9:	48 89 c7             	mov    %rax,%rdi
    42ec:	e8 00 00 00 00       	callq  42f1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    42f1:	e9 8b 00 00 00       	jmpq   4381 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42f6:	48 89 c3             	mov    %rax,%rbx
    42f9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    42fd:	48 89 c7             	mov    %rax,%rdi
    4300:	e8 00 00 00 00       	callq  4305 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    4305:	eb 69                	jmp    4370 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4307:	48 89 c3             	mov    %rax,%rbx
    430a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    430e:	48 89 c7             	mov    %rax,%rdi
    4311:	e8 00 00 00 00       	callq  4316 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    4316:	eb 58                	jmp    4370 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4318:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    431b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    431f:	48 89 c7             	mov    %rax,%rdi
    4322:	e8 00 00 00 00       	callq  4327 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    4327:	eb 14                	jmp    433d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4329:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    432c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4330:	48 89 c7             	mov    %rax,%rdi
    4333:	e8 00 00 00 00       	callq  4338 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    4338:	eb 03                	jmp    433d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    433a:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    433d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4341:	48 89 c7             	mov    %rax,%rdi
    4344:	e8 00 00 00 00       	callq  4349 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    4349:	eb 03                	jmp    434e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    434b:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    434e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4352:	48 89 c7             	mov    %rax,%rdi
    4355:	e8 00 00 00 00       	callq  435a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    435a:	eb 03                	jmp    435f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    435c:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    435f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4363:	48 89 c7             	mov    %rax,%rdi
    4366:	e8 00 00 00 00       	callq  436b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    436b:	eb 03                	jmp    4370 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    436d:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4370:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4374:	48 89 c7             	mov    %rax,%rdi
    4377:	e8 00 00 00 00       	callq  437c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    437c:	eb 03                	jmp    4381 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    437e:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4381:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4388:	48 89 c7             	mov    %rax,%rdi
    438b:	e8 00 00 00 00       	callq  4390 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    4390:	eb 03                	jmp    4395 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    4392:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4395:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    439c:	48 89 c7             	mov    %rax,%rdi
    439f:	e8 00 00 00 00       	callq  43a4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    43a4:	eb 03                	jmp    43a9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    43a6:	48 89 c3             	mov    %rax,%rbx
    43a9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43b0:	48 89 c7             	mov    %rax,%rdi
    43b3:	e8 00 00 00 00       	callq  43b8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    43b8:	48 89 d8             	mov    %rbx,%rax
    43bb:	48 89 c7             	mov    %rax,%rdi
    43be:	e8 00 00 00 00       	callq  43c3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    43c3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43ca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    43ce:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    43d5:	00 00 
    43d7:	74 05                	je     43de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43d9:	e8 00 00 00 00       	callq  43de <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43de:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    43e5:	5b                   	pop    %rbx
    43e6:	5d                   	pop    %rbp
    43e7:	c3                   	retq   

00000000000043e8 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    43e8:	55                   	push   %rbp
    43e9:	48 89 e5             	mov    %rsp,%rbp
    43ec:	53                   	push   %rbx
    43ed:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    43f4:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    43fb:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    4402:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    4409:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4410:	00 00 
    4412:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4416:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4418:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    441f:	48 89 c7             	mov    %rax,%rdi
    4422:	e8 00 00 00 00       	callq  4427 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4427:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    442e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4435 <_ZN6Parser11compileAtomE7QString+0x4d>
    4435:	48 89 c7             	mov    %rax,%rdi
    4438:	e8 00 00 00 00       	callq  443d <_ZN6Parser11compileAtomE7QString+0x55>
    443d:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    4444:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    444b:	b9 00 00 00 00       	mov    $0x0,%ecx
    4450:	ba 01 00 00 00       	mov    $0x1,%edx
    4455:	48 89 c7             	mov    %rax,%rdi
    4458:	e8 00 00 00 00       	callq  445d <_ZN6Parser11compileAtomE7QString+0x75>
    445d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4464:	48 89 c7             	mov    %rax,%rdi
    4467:	e8 00 00 00 00       	callq  446c <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    446c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4473:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 447a <_ZN6Parser11compileAtomE7QString+0x92>
    447a:	48 89 c7             	mov    %rax,%rdi
    447d:	e8 00 00 00 00       	callq  4482 <_ZN6Parser11compileAtomE7QString+0x9a>
    4482:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    4489:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4490:	b9 00 00 00 00       	mov    $0x0,%ecx
    4495:	ba 01 00 00 00       	mov    $0x1,%edx
    449a:	48 89 c7             	mov    %rax,%rdi
    449d:	e8 00 00 00 00       	callq  44a2 <_ZN6Parser11compileAtomE7QString+0xba>
    44a2:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44a9:	48 89 c7             	mov    %rax,%rdi
    44ac:	e8 00 00 00 00       	callq  44b1 <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    44b1:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44b8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 44bf <_ZN6Parser11compileAtomE7QString+0xd7>
    44bf:	48 89 c7             	mov    %rax,%rdi
    44c2:	e8 00 00 00 00       	callq  44c7 <_ZN6Parser11compileAtomE7QString+0xdf>
    44c7:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    44ce:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    44d5:	b9 00 00 00 00       	mov    $0x0,%ecx
    44da:	ba 01 00 00 00       	mov    $0x1,%edx
    44df:	48 89 c7             	mov    %rax,%rdi
    44e2:	e8 00 00 00 00       	callq  44e7 <_ZN6Parser11compileAtomE7QString+0xff>
    44e7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44ee:	48 89 c7             	mov    %rax,%rdi
    44f1:	e8 00 00 00 00       	callq  44f6 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    44f6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    44fa:	48 89 c7             	mov    %rax,%rdi
    44fd:	e8 00 00 00 00       	callq  4502 <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    4502:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4509:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    450d:	48 89 d6             	mov    %rdx,%rsi
    4510:	48 89 c7             	mov    %rax,%rdi
    4513:	e8 00 00 00 00       	callq  4518 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    4518:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    451f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4523:	48 89 d6             	mov    %rdx,%rsi
    4526:	48 89 c7             	mov    %rax,%rdi
    4529:	e8 00 00 00 00       	callq  452e <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    452e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4535:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 453c <_ZN6Parser11compileAtomE7QString+0x154>
    453c:	48 89 c7             	mov    %rax,%rdi
    453f:	e8 00 00 00 00       	callq  4544 <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    4544:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    454b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4552:	b9 00 00 00 00       	mov    $0x0,%ecx
    4557:	ba 01 00 00 00       	mov    $0x1,%edx
    455c:	48 89 c7             	mov    %rax,%rdi
    455f:	e8 00 00 00 00       	callq  4564 <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4564:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    456b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4572 <_ZN6Parser11compileAtomE7QString+0x18a>
    4572:	48 89 c7             	mov    %rax,%rdi
    4575:	e8 00 00 00 00       	callq  457a <_ZN6Parser11compileAtomE7QString+0x192>
    457a:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    4581:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4588:	b9 00 00 00 00       	mov    $0x0,%ecx
    458d:	ba 01 00 00 00       	mov    $0x1,%edx
    4592:	48 89 c7             	mov    %rax,%rdi
    4595:	e8 00 00 00 00       	callq  459a <_ZN6Parser11compileAtomE7QString+0x1b2>
    459a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    45a1:	48 89 c7             	mov    %rax,%rdi
    45a4:	e8 00 00 00 00       	callq  45a9 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    45a9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45b0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45b7 <_ZN6Parser11compileAtomE7QString+0x1cf>
    45b7:	48 89 c7             	mov    %rax,%rdi
    45ba:	e8 00 00 00 00       	callq  45bf <_ZN6Parser11compileAtomE7QString+0x1d7>
    45bf:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    45c6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    45cd:	b9 00 00 00 00       	mov    $0x0,%ecx
    45d2:	ba 01 00 00 00       	mov    $0x1,%edx
    45d7:	48 89 c7             	mov    %rax,%rdi
    45da:	e8 00 00 00 00       	callq  45df <_ZN6Parser11compileAtomE7QString+0x1f7>
    45df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45e6:	48 89 c7             	mov    %rax,%rdi
    45e9:	e8 00 00 00 00       	callq  45ee <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    45ee:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    45f5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45fc <_ZN6Parser11compileAtomE7QString+0x214>
    45fc:	48 89 c7             	mov    %rax,%rdi
    45ff:	e8 00 00 00 00       	callq  4604 <_ZN6Parser11compileAtomE7QString+0x21c>
    4604:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    460b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4612:	b9 00 00 00 00       	mov    $0x0,%ecx
    4617:	ba 01 00 00 00       	mov    $0x1,%edx
    461c:	48 89 c7             	mov    %rax,%rdi
    461f:	e8 00 00 00 00       	callq  4624 <_ZN6Parser11compileAtomE7QString+0x23c>
    4624:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    462b:	48 89 c7             	mov    %rax,%rdi
    462e:	e8 00 00 00 00       	callq  4633 <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    4633:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    463a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4641 <_ZN6Parser11compileAtomE7QString+0x259>
    4641:	48 89 c7             	mov    %rax,%rdi
    4644:	e8 00 00 00 00       	callq  4649 <_ZN6Parser11compileAtomE7QString+0x261>
    4649:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    4650:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4657:	b9 00 00 00 00       	mov    $0x0,%ecx
    465c:	ba 01 00 00 00       	mov    $0x1,%edx
    4661:	48 89 c7             	mov    %rax,%rdi
    4664:	e8 00 00 00 00       	callq  4669 <_ZN6Parser11compileAtomE7QString+0x281>
    4669:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4670:	48 89 c7             	mov    %rax,%rdi
    4673:	e8 00 00 00 00       	callq  4678 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4678:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    467c:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4683:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 468a <_ZN6Parser11compileAtomE7QString+0x2a2>
    468a:	48 89 c7             	mov    %rax,%rdi
    468d:	e8 00 00 00 00       	callq  4692 <_ZN6Parser11compileAtomE7QString+0x2aa>
    4692:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    4696:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    469d:	b9 00 00 00 00       	mov    $0x0,%ecx
    46a2:	ba 01 00 00 00       	mov    $0x1,%edx
    46a7:	48 89 c7             	mov    %rax,%rdi
    46aa:	e8 00 00 00 00       	callq  46af <_ZN6Parser11compileAtomE7QString+0x2c7>
    46af:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46b3:	48 89 c7             	mov    %rax,%rdi
    46b6:	e8 00 00 00 00       	callq  46bb <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    46bb:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    46c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    46c6:	b9 00 00 00 00       	mov    $0x0,%ecx
    46cb:	ba 01 00 00 00       	mov    $0x1,%edx
    46d0:	48 89 c7             	mov    %rax,%rdi
    46d3:	e8 00 00 00 00       	callq  46d8 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    46d8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    46dc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46e3 <_ZN6Parser11compileAtomE7QString+0x2fb>
    46e3:	48 89 c7             	mov    %rax,%rdi
    46e6:	e8 00 00 00 00       	callq  46eb <_ZN6Parser11compileAtomE7QString+0x303>
    46eb:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    46ef:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    46f3:	b9 00 00 00 00       	mov    $0x0,%ecx
    46f8:	ba 01 00 00 00       	mov    $0x1,%edx
    46fd:	48 89 c7             	mov    %rax,%rdi
    4700:	e8 00 00 00 00       	callq  4705 <_ZN6Parser11compileAtomE7QString+0x31d>
    4705:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4709:	48 89 c7             	mov    %rax,%rdi
    470c:	e8 00 00 00 00       	callq  4711 <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    4711:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    4712:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4716:	48 89 c7             	mov    %rax,%rdi
    4719:	e8 00 00 00 00       	callq  471e <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    471e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4722:	48 89 c7             	mov    %rax,%rdi
    4725:	e8 00 00 00 00       	callq  472a <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    472a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4731:	48 89 c7             	mov    %rax,%rdi
    4734:	e8 00 00 00 00       	callq  4739 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4739:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4740:	48 89 c7             	mov    %rax,%rdi
    4743:	e8 00 00 00 00       	callq  4748 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4748:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    474f:	48 89 c7             	mov    %rax,%rdi
    4752:	e8 00 00 00 00       	callq  4757 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4757:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    475e:	48 89 c7             	mov    %rax,%rdi
    4761:	e8 00 00 00 00       	callq  4766 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4766:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    476d:	48 89 c7             	mov    %rax,%rdi
    4770:	e8 00 00 00 00       	callq  4775 <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4775:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    477c:	48 89 c7             	mov    %rax,%rdi
    477f:	e8 00 00 00 00       	callq  4784 <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4784:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    478b:	48 89 c7             	mov    %rax,%rdi
    478e:	e8 00 00 00 00       	callq  4793 <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4793:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    479a:	48 89 c7             	mov    %rax,%rdi
    479d:	e8 00 00 00 00       	callq  47a2 <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    47a2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47a9:	48 89 c7             	mov    %rax,%rdi
    47ac:	e8 00 00 00 00       	callq  47b1 <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47b1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47b5:	48 89 c7             	mov    %rax,%rdi
    47b8:	e8 00 00 00 00       	callq  47bd <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    47bd:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    47c4:	48 89 c7             	mov    %rax,%rdi
    47c7:	e8 00 00 00 00       	callq  47cc <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    47cc:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    47d3:	48 89 c7             	mov    %rax,%rdi
    47d6:	e8 00 00 00 00       	callq  47db <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    47db:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    47e2:	48 89 c7             	mov    %rax,%rdi
    47e5:	e8 00 00 00 00       	callq  47ea <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    47ea:	e9 b8 02 00 00       	jmpq   4aa7 <_ZN6Parser11compileAtomE7QString+0x6bf>
    47ef:	48 89 c3             	mov    %rax,%rbx
    47f2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    47f9:	48 89 c7             	mov    %rax,%rdi
    47fc:	e8 00 00 00 00       	callq  4801 <_ZN6Parser11compileAtomE7QString+0x419>
    4801:	e9 87 02 00 00       	jmpq   4a8d <_ZN6Parser11compileAtomE7QString+0x6a5>
    4806:	48 89 c3             	mov    %rax,%rbx
    4809:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4810:	48 89 c7             	mov    %rax,%rdi
    4813:	e8 00 00 00 00       	callq  4818 <_ZN6Parser11compileAtomE7QString+0x430>
    4818:	e9 70 02 00 00       	jmpq   4a8d <_ZN6Parser11compileAtomE7QString+0x6a5>
    481d:	48 89 c3             	mov    %rax,%rbx
    4820:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4827:	48 89 c7             	mov    %rax,%rdi
    482a:	e8 00 00 00 00       	callq  482f <_ZN6Parser11compileAtomE7QString+0x447>
    482f:	e9 45 02 00 00       	jmpq   4a79 <_ZN6Parser11compileAtomE7QString+0x691>
    4834:	48 89 c3             	mov    %rax,%rbx
    4837:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    483e:	48 89 c7             	mov    %rax,%rdi
    4841:	e8 00 00 00 00       	callq  4846 <_ZN6Parser11compileAtomE7QString+0x45e>
    4846:	e9 2e 02 00 00       	jmpq   4a79 <_ZN6Parser11compileAtomE7QString+0x691>
    484b:	48 89 c3             	mov    %rax,%rbx
    484e:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4855:	48 89 c7             	mov    %rax,%rdi
    4858:	e8 00 00 00 00       	callq  485d <_ZN6Parser11compileAtomE7QString+0x475>
    485d:	e9 03 02 00 00       	jmpq   4a65 <_ZN6Parser11compileAtomE7QString+0x67d>
    4862:	48 89 c3             	mov    %rax,%rbx
    4865:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    486c:	48 89 c7             	mov    %rax,%rdi
    486f:	e8 00 00 00 00       	callq  4874 <_ZN6Parser11compileAtomE7QString+0x48c>
    4874:	e9 ec 01 00 00       	jmpq   4a65 <_ZN6Parser11compileAtomE7QString+0x67d>
    4879:	48 89 c3             	mov    %rax,%rbx
    487c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4883:	48 89 c7             	mov    %rax,%rdi
    4886:	e8 00 00 00 00       	callq  488b <_ZN6Parser11compileAtomE7QString+0x4a3>
    488b:	e9 60 01 00 00       	jmpq   49f0 <_ZN6Parser11compileAtomE7QString+0x608>
    4890:	48 89 c3             	mov    %rax,%rbx
    4893:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    489a:	48 89 c7             	mov    %rax,%rdi
    489d:	e8 00 00 00 00       	callq  48a2 <_ZN6Parser11compileAtomE7QString+0x4ba>
    48a2:	e9 49 01 00 00       	jmpq   49f0 <_ZN6Parser11compileAtomE7QString+0x608>
    48a7:	48 89 c3             	mov    %rax,%rbx
    48aa:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    48b1:	48 89 c7             	mov    %rax,%rdi
    48b4:	e8 00 00 00 00       	callq  48b9 <_ZN6Parser11compileAtomE7QString+0x4d1>
    48b9:	e9 1e 01 00 00       	jmpq   49dc <_ZN6Parser11compileAtomE7QString+0x5f4>
    48be:	48 89 c3             	mov    %rax,%rbx
    48c1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    48c8:	48 89 c7             	mov    %rax,%rdi
    48cb:	e8 00 00 00 00       	callq  48d0 <_ZN6Parser11compileAtomE7QString+0x4e8>
    48d0:	e9 07 01 00 00       	jmpq   49dc <_ZN6Parser11compileAtomE7QString+0x5f4>
    48d5:	48 89 c3             	mov    %rax,%rbx
    48d8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    48df:	48 89 c7             	mov    %rax,%rdi
    48e2:	e8 00 00 00 00       	callq  48e7 <_ZN6Parser11compileAtomE7QString+0x4ff>
    48e7:	e9 dc 00 00 00       	jmpq   49c8 <_ZN6Parser11compileAtomE7QString+0x5e0>
    48ec:	48 89 c3             	mov    %rax,%rbx
    48ef:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    48f6:	48 89 c7             	mov    %rax,%rdi
    48f9:	e8 00 00 00 00       	callq  48fe <_ZN6Parser11compileAtomE7QString+0x516>
    48fe:	e9 c5 00 00 00       	jmpq   49c8 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4903:	48 89 c3             	mov    %rax,%rbx
    4906:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    490d:	48 89 c7             	mov    %rax,%rdi
    4910:	e8 00 00 00 00       	callq  4915 <_ZN6Parser11compileAtomE7QString+0x52d>
    4915:	e9 9a 00 00 00       	jmpq   49b4 <_ZN6Parser11compileAtomE7QString+0x5cc>
    491a:	48 89 c3             	mov    %rax,%rbx
    491d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4924:	48 89 c7             	mov    %rax,%rdi
    4927:	e8 00 00 00 00       	callq  492c <_ZN6Parser11compileAtomE7QString+0x544>
    492c:	e9 83 00 00 00       	jmpq   49b4 <_ZN6Parser11compileAtomE7QString+0x5cc>
    4931:	48 89 c3             	mov    %rax,%rbx
    4934:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4938:	48 89 c7             	mov    %rax,%rdi
    493b:	e8 00 00 00 00       	callq  4940 <_ZN6Parser11compileAtomE7QString+0x558>
    4940:	eb 5e                	jmp    49a0 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4942:	48 89 c3             	mov    %rax,%rbx
    4945:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    494c:	48 89 c7             	mov    %rax,%rdi
    494f:	e8 00 00 00 00       	callq  4954 <_ZN6Parser11compileAtomE7QString+0x56c>
    4954:	eb 4a                	jmp    49a0 <_ZN6Parser11compileAtomE7QString+0x5b8>
    4956:	48 89 c3             	mov    %rax,%rbx
    4959:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    495d:	48 89 c7             	mov    %rax,%rdi
    4960:	e8 00 00 00 00       	callq  4965 <_ZN6Parser11compileAtomE7QString+0x57d>
    4965:	eb 14                	jmp    497b <_ZN6Parser11compileAtomE7QString+0x593>
    4967:	48 89 c3             	mov    %rax,%rbx
    496a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    496e:	48 89 c7             	mov    %rax,%rdi
    4971:	e8 00 00 00 00       	callq  4976 <_ZN6Parser11compileAtomE7QString+0x58e>
    4976:	eb 03                	jmp    497b <_ZN6Parser11compileAtomE7QString+0x593>
    4978:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    497b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    497f:	48 89 c7             	mov    %rax,%rdi
    4982:	e8 00 00 00 00       	callq  4987 <_ZN6Parser11compileAtomE7QString+0x59f>
    4987:	eb 03                	jmp    498c <_ZN6Parser11compileAtomE7QString+0x5a4>
    4989:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    498c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4993:	48 89 c7             	mov    %rax,%rdi
    4996:	e8 00 00 00 00       	callq  499b <_ZN6Parser11compileAtomE7QString+0x5b3>
    499b:	eb 03                	jmp    49a0 <_ZN6Parser11compileAtomE7QString+0x5b8>
    499d:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    49a0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49a7:	48 89 c7             	mov    %rax,%rdi
    49aa:	e8 00 00 00 00       	callq  49af <_ZN6Parser11compileAtomE7QString+0x5c7>
    49af:	eb 03                	jmp    49b4 <_ZN6Parser11compileAtomE7QString+0x5cc>
    49b1:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    49b4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    49bb:	48 89 c7             	mov    %rax,%rdi
    49be:	e8 00 00 00 00       	callq  49c3 <_ZN6Parser11compileAtomE7QString+0x5db>
    49c3:	eb 03                	jmp    49c8 <_ZN6Parser11compileAtomE7QString+0x5e0>
    49c5:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    49c8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    49cf:	48 89 c7             	mov    %rax,%rdi
    49d2:	e8 00 00 00 00       	callq  49d7 <_ZN6Parser11compileAtomE7QString+0x5ef>
    49d7:	eb 03                	jmp    49dc <_ZN6Parser11compileAtomE7QString+0x5f4>
    49d9:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    49dc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    49e3:	48 89 c7             	mov    %rax,%rdi
    49e6:	e8 00 00 00 00       	callq  49eb <_ZN6Parser11compileAtomE7QString+0x603>
    49eb:	eb 03                	jmp    49f0 <_ZN6Parser11compileAtomE7QString+0x608>
    49ed:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    49f0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    49f7:	48 89 c7             	mov    %rax,%rdi
    49fa:	e8 00 00 00 00       	callq  49ff <_ZN6Parser11compileAtomE7QString+0x617>
    49ff:	eb 03                	jmp    4a04 <_ZN6Parser11compileAtomE7QString+0x61c>
    4a01:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4a04:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a0b:	48 89 c7             	mov    %rax,%rdi
    4a0e:	e8 00 00 00 00       	callq  4a13 <_ZN6Parser11compileAtomE7QString+0x62b>
    4a13:	eb 03                	jmp    4a18 <_ZN6Parser11compileAtomE7QString+0x630>
    4a15:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4a18:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4a1f:	48 89 c7             	mov    %rax,%rdi
    4a22:	e8 00 00 00 00       	callq  4a27 <_ZN6Parser11compileAtomE7QString+0x63f>
    4a27:	eb 03                	jmp    4a2c <_ZN6Parser11compileAtomE7QString+0x644>
    4a29:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4a2c:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a33:	48 89 c7             	mov    %rax,%rdi
    4a36:	e8 00 00 00 00       	callq  4a3b <_ZN6Parser11compileAtomE7QString+0x653>
    4a3b:	eb 03                	jmp    4a40 <_ZN6Parser11compileAtomE7QString+0x658>
    4a3d:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4a40:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a44:	48 89 c7             	mov    %rax,%rdi
    4a47:	e8 00 00 00 00       	callq  4a4c <_ZN6Parser11compileAtomE7QString+0x664>
    4a4c:	eb 03                	jmp    4a51 <_ZN6Parser11compileAtomE7QString+0x669>
    4a4e:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4a51:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4a58:	48 89 c7             	mov    %rax,%rdi
    4a5b:	e8 00 00 00 00       	callq  4a60 <_ZN6Parser11compileAtomE7QString+0x678>
    4a60:	eb 03                	jmp    4a65 <_ZN6Parser11compileAtomE7QString+0x67d>
    4a62:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4a65:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4a6c:	48 89 c7             	mov    %rax,%rdi
    4a6f:	e8 00 00 00 00       	callq  4a74 <_ZN6Parser11compileAtomE7QString+0x68c>
    4a74:	eb 03                	jmp    4a79 <_ZN6Parser11compileAtomE7QString+0x691>
    4a76:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4a79:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4a80:	48 89 c7             	mov    %rax,%rdi
    4a83:	e8 00 00 00 00       	callq  4a88 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4a88:	eb 03                	jmp    4a8d <_ZN6Parser11compileAtomE7QString+0x6a5>
    4a8a:	48 89 c3             	mov    %rax,%rbx
    4a8d:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4a94:	48 89 c7             	mov    %rax,%rdi
    4a97:	e8 00 00 00 00       	callq  4a9c <_ZN6Parser11compileAtomE7QString+0x6b4>
    4a9c:	48 89 d8             	mov    %rbx,%rax
    4a9f:	48 89 c7             	mov    %rax,%rdi
    4aa2:	e8 00 00 00 00       	callq  4aa7 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4aa7:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4aae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4ab2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4ab9:	00 00 
    4abb:	74 05                	je     4ac2 <_ZN6Parser11compileAtomE7QString+0x6da>
    4abd:	e8 00 00 00 00       	callq  4ac2 <_ZN6Parser11compileAtomE7QString+0x6da>
    4ac2:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4ac9:	5b                   	pop    %rbx
    4aca:	5d                   	pop    %rbp
    4acb:	c3                   	retq   

0000000000004acc <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4acc:	55                   	push   %rbp
    4acd:	48 89 e5             	mov    %rsp,%rbp
    4ad0:	53                   	push   %rbx
    4ad1:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4ad8:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4adf:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4ae6:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4aed:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4af4:	00 00 
    4af6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4afa:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4afc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4b00:	48 89 c7             	mov    %rax,%rdi
    4b03:	e8 00 00 00 00       	callq  4b08 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4b08:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4b0f:	48 89 c7             	mov    %rax,%rdi
    4b12:	e8 00 00 00 00       	callq  4b17 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4b17:	85 c0                	test   %eax,%eax
    4b19:	0f 9e c0             	setle  %al
    4b1c:	84 c0                	test   %al,%al
    4b1e:	74 0a                	je     4b2a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4b20:	bb 00 00 00 00       	mov    $0x0,%ebx
    4b25:	e9 27 01 00 00       	jmpq   4c51 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4b2a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b2e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b35 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4b35:	48 89 c7             	mov    %rax,%rdi
    4b38:	e8 00 00 00 00       	callq  4b3d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4b3d:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4b41:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b45:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b4a:	ba 00 00 00 00       	mov    $0x0,%edx
    4b4f:	48 89 c7             	mov    %rax,%rdi
    4b52:	e8 00 00 00 00       	callq  4b57 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4b57:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b5b:	48 89 c7             	mov    %rax,%rdi
    4b5e:	e8 00 00 00 00       	callq  4b63 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4b63:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b67:	be 00 00 00 00       	mov    $0x0,%esi
    4b6c:	48 89 c7             	mov    %rax,%rdi
    4b6f:	e8 00 00 00 00       	callq  4b74 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4b74:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4b7b:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4b7e:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4b85:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b89:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b8e:	48 89 c7             	mov    %rax,%rdi
    4b91:	e8 00 00 00 00       	callq  4b96 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4b96:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4b99:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4b9d:	0f 95 c0             	setne  %al
    4ba0:	84 c0                	test   %al,%al
    4ba2:	0f 84 98 00 00 00    	je     4c40 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4ba8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bac:	48 89 c7             	mov    %rax,%rdi
    4baf:	e8 00 00 00 00       	callq  4bb4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4bb4:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4bb7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bbb:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bbf:	ba 00 00 00 00       	mov    $0x0,%edx
    4bc4:	48 89 ce             	mov    %rcx,%rsi
    4bc7:	48 89 c7             	mov    %rax,%rdi
    4bca:	e8 00 00 00 00       	callq  4bcf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4bcf:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4bd3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4bda:	48 89 d6             	mov    %rdx,%rsi
    4bdd:	48 89 c7             	mov    %rax,%rdi
    4be0:	e8 00 00 00 00       	callq  4be5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4be5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4be9:	48 89 c7             	mov    %rax,%rdi
    4bec:	e8 00 00 00 00       	callq  4bf1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4bf1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4bf5:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bf9:	ba 00 00 00 00       	mov    $0x0,%edx
    4bfe:	48 89 ce             	mov    %rcx,%rsi
    4c01:	48 89 c7             	mov    %rax,%rdi
    4c04:	e8 00 00 00 00       	callq  4c09 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4c09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c0d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4c11:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c18:	48 89 ce             	mov    %rcx,%rsi
    4c1b:	48 89 c7             	mov    %rax,%rdi
    4c1e:	e8 00 00 00 00       	callq  4c23 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4c23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c27:	48 89 c7             	mov    %rax,%rdi
    4c2a:	e8 00 00 00 00       	callq  4c2f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4c2f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c33:	48 89 c7             	mov    %rax,%rdi
    4c36:	e8 00 00 00 00       	callq  4c3b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c3b:	e9 3b ff ff ff       	jmpq   4b7b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c40:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c44:	48 89 c7             	mov    %rax,%rdi
    4c47:	e8 00 00 00 00       	callq  4c4c <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4c4c:	bb 01 00 00 00       	mov    $0x1,%ebx
    4c51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4c55:	48 89 c7             	mov    %rax,%rdi
    4c58:	e8 00 00 00 00       	callq  4c5d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4c5d:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4c60:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4c61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c65:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4c6c:	00 00 
    4c6e:	74 76                	je     4ce6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4c70:	eb 6f                	jmp    4ce1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4c72:	48 89 c3             	mov    %rax,%rbx
    4c75:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c79:	48 89 c7             	mov    %rax,%rdi
    4c7c:	e8 00 00 00 00       	callq  4c81 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4c81:	eb 47                	jmp    4cca <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c83:	48 89 c3             	mov    %rax,%rbx
    4c86:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c8a:	48 89 c7             	mov    %rax,%rdi
    4c8d:	e8 00 00 00 00       	callq  4c92 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4c92:	eb 36                	jmp    4cca <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c94:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4c97:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c9b:	48 89 c7             	mov    %rax,%rdi
    4c9e:	e8 00 00 00 00       	callq  4ca3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4ca3:	eb 14                	jmp    4cb9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4ca5:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4ca8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4cac:	48 89 c7             	mov    %rax,%rdi
    4caf:	e8 00 00 00 00       	callq  4cb4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4cb4:	eb 03                	jmp    4cb9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cb6:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4cb9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4cbd:	48 89 c7             	mov    %rax,%rdi
    4cc0:	e8 00 00 00 00       	callq  4cc5 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4cc5:	eb 03                	jmp    4cca <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4cc7:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4cca:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4cce:	48 89 c7             	mov    %rax,%rdi
    4cd1:	e8 00 00 00 00       	callq  4cd6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4cd6:	48 89 d8             	mov    %rbx,%rax
    4cd9:	48 89 c7             	mov    %rax,%rdi
    4cdc:	e8 00 00 00 00       	callq  4ce1 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4ce1:	e8 00 00 00 00       	callq  4ce6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4ce6:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4ced:	5b                   	pop    %rbx
    4cee:	5d                   	pop    %rbp
    4cef:	c3                   	retq   

0000000000004cf0 <_ZN6Parser12compileBlockER11QStringList>:

QByteArray Parser::compileBlock(QStringList &block){
    4cf0:	55                   	push   %rbp
    4cf1:	48 89 e5             	mov    %rsp,%rbp
    4cf4:	48 83 ec 30          	sub    $0x30,%rsp
    4cf8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4cfc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4d00:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4d04:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d0b:	00 00 
    4d0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d11:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d17:	48 89 c7             	mov    %rax,%rdi
    4d1a:	e8 00 00 00 00       	callq  4d1f <_ZN6Parser12compileBlockER11QStringList+0x2f>

    return result;
    4d1f:	90                   	nop
}
    4d20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d24:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4d28:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d2f:	00 00 
    4d31:	74 05                	je     4d38 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d33:	e8 00 00 00 00       	callq  4d38 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d38:	c9                   	leaveq 
    4d39:	c3                   	retq   

0000000000004d3a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4d3a:	55                   	push   %rbp
    4d3b:	48 89 e5             	mov    %rsp,%rbp
    4d3e:	53                   	push   %rbx
    4d3f:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4d46:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4d4d:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4d54:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4d5b:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4d62:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d69:	00 00 
    4d6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4d6f:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4d71:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4d78:	48 89 c7             	mov    %rax,%rdi
    4d7b:	e8 00 00 00 00       	callq  4d80 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4d80:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4d87:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4d8e:	b9 00 00 00 00       	mov    $0x0,%ecx
    4d93:	ba 01 00 00 00       	mov    $0x1,%edx
    4d98:	48 89 c7             	mov    %rax,%rdi
    4d9b:	e8 00 00 00 00       	callq  4da0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4da0:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4da7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4dae:	48 89 d6             	mov    %rdx,%rsi
    4db1:	48 89 c7             	mov    %rax,%rdi
    4db4:	e8 00 00 00 00       	callq  4db9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4db9:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4dc0:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4dc7:	48 89 d6             	mov    %rdx,%rsi
    4dca:	48 89 c7             	mov    %rax,%rdi
    4dcd:	e8 00 00 00 00       	callq  4dd2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4dd2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4dd9:	48 89 c7             	mov    %rax,%rdi
    4ddc:	e8 00 00 00 00       	callq  4de1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4de1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4de8:	48 89 c7             	mov    %rax,%rdi
    4deb:	e8 00 00 00 00       	callq  4df0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4df0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4df7:	48 89 c7             	mov    %rax,%rdi
    4dfa:	e8 00 00 00 00       	callq  4dff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4dff:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4e06:	48 89 c7             	mov    %rax,%rdi
    4e09:	e8 00 00 00 00       	callq  4e0e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4e0e:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4e15:	00 00 00 
    int     lineBase = 0;
    4e18:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4e1f:	00 00 00 
    int     line     = 0;
    4e22:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4e29:	00 00 00 

    unsigned int BFL = str.count("{");
    4e2c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e33:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e3a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4e3a:	48 89 c7             	mov    %rax,%rdi
    4e3d:	e8 00 00 00 00       	callq  4e42 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4e42:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4e49:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e50:	ba 01 00 00 00       	mov    $0x1,%edx
    4e55:	48 89 ce             	mov    %rcx,%rsi
    4e58:	48 89 c7             	mov    %rax,%rdi
    4e5b:	e8 00 00 00 00       	callq  4e60 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4e60:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4e66:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e6d:	48 89 c7             	mov    %rax,%rdi
    4e70:	e8 00 00 00 00       	callq  4e75 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4e75:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4e7c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e83 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4e83:	48 89 c7             	mov    %rax,%rdi
    4e86:	e8 00 00 00 00       	callq  4e8b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4e8b:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4e92:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e99:	ba 01 00 00 00       	mov    $0x1,%edx
    4e9e:	48 89 ce             	mov    %rcx,%rsi
    4ea1:	48 89 c7             	mov    %rax,%rdi
    4ea4:	e8 00 00 00 00       	callq  4ea9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4ea9:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4eaf:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4eb6:	48 89 c7             	mov    %rax,%rdi
    4eb9:	e8 00 00 00 00       	callq  4ebe <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4ebe:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4ec5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ecc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4ecc:	48 89 c7             	mov    %rax,%rdi
    4ecf:	e8 00 00 00 00       	callq  4ed4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4ed4:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4edb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4ee2:	ba 01 00 00 00       	mov    $0x1,%edx
    4ee7:	48 89 ce             	mov    %rcx,%rsi
    4eea:	48 89 c7             	mov    %rax,%rdi
    4eed:	e8 00 00 00 00       	callq  4ef2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4ef2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4ef8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4eff:	48 89 c7             	mov    %rax,%rdi
    4f02:	e8 00 00 00 00       	callq  4f07 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4f07:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f15 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4f15:	48 89 c7             	mov    %rax,%rdi
    4f18:	e8 00 00 00 00       	callq  4f1d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4f1d:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4f24:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f2b:	ba 01 00 00 00       	mov    $0x1,%edx
    4f30:	48 89 ce             	mov    %rcx,%rsi
    4f33:	48 89 c7             	mov    %rax,%rdi
    4f36:	e8 00 00 00 00       	callq  4f3b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4f3b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4f41:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f48:	48 89 c7             	mov    %rax,%rdi
    4f4b:	e8 00 00 00 00       	callq  4f50 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4f50:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4f56:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4f5c:	74 43                	je     4fa1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4f5e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f65:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f6c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4f6c:	48 89 c7             	mov    %rax,%rdi
    4f6f:	e8 00 00 00 00       	callq  4f74 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4f74:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4f7b:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4f82:	48 89 d6             	mov    %rdx,%rsi
    4f85:	48 89 c7             	mov    %rax,%rdi
    4f88:	e8 00 00 00 00       	callq  4f8d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4f8d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f94:	48 89 c7             	mov    %rax,%rdi
    4f97:	e8 00 00 00 00       	callq  4f9c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4f9c:	e9 6f 03 00 00       	jmpq   5310 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4fa1:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4fa7:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4fad:	74 43                	je     4ff2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4faf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fb6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fbd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4fbd:	48 89 c7             	mov    %rax,%rdi
    4fc0:	e8 00 00 00 00       	callq  4fc5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    4fc5:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4fcc:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4fd3:	48 89 d6             	mov    %rdx,%rsi
    4fd6:	48 89 c7             	mov    %rax,%rdi
    4fd9:	e8 00 00 00 00       	callq  4fde <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4fde:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fe5:	48 89 c7             	mov    %rax,%rdi
    4fe8:	e8 00 00 00 00       	callq  4fed <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    4fed:	e9 1e 03 00 00       	jmpq   5310 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    4ff2:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    4ff9:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5000:	b9 00 00 00 00       	mov    $0x0,%ecx
    5005:	ba 00 00 00 00       	mov    $0x0,%edx
    500a:	48 89 c7             	mov    %rax,%rdi
    500d:	e8 00 00 00 00       	callq  5012 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    5012:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    5018:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    501f:	0f 88 ea 02 00 00    	js     530f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    5025:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    502b:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    5031:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    5034:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    503b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    503f:	48 89 d6             	mov    %rdx,%rsi
    5042:	48 89 c7             	mov    %rax,%rdi
    5045:	e8 00 00 00 00       	callq  504a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    504a:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    504e:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    5055:	89 da                	mov    %ebx,%edx
    5057:	48 89 ce             	mov    %rcx,%rsi
    505a:	48 89 c7             	mov    %rax,%rdi
    505d:	e8 00 00 00 00       	callq  5062 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    5062:	83 c0 01             	add    $0x1,%eax
    5065:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    506b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    506f:	48 89 c7             	mov    %rax,%rdi
    5072:	e8 00 00 00 00       	callq  5077 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    5077:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    507b:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    5082:	ba 01 00 00 00       	mov    $0x1,%edx
    5087:	48 89 ce             	mov    %rcx,%rsi
    508a:	48 89 c7             	mov    %rax,%rdi
    508d:	e8 00 00 00 00       	callq  5092 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    5092:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5096:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    509d:	48 89 d6             	mov    %rdx,%rsi
    50a0:	48 89 c7             	mov    %rax,%rdi
    50a3:	e8 00 00 00 00       	callq  50a8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    50a8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50ac:	48 89 c7             	mov    %rax,%rdi
    50af:	e8 00 00 00 00       	callq  50b4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    50b4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    50b8:	be 7b 00 00 00       	mov    $0x7b,%esi
    50bd:	48 89 c7             	mov    %rax,%rdi
    50c0:	e8 00 00 00 00       	callq  50c5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    50c5:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    50cb:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    50cf:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50d6:	b9 01 00 00 00       	mov    $0x1,%ecx
    50db:	48 89 c7             	mov    %rax,%rdi
    50de:	e8 00 00 00 00       	callq  50e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    50e3:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    50e9:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    50ef:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50f6:	89 d6                	mov    %edx,%esi
    50f8:	48 89 c7             	mov    %rax,%rdi
    50fb:	e8 00 00 00 00       	callq  5100 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    5100:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5104:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    510c:	48 89 c7             	mov    %rax,%rdi
    510f:	e8 00 00 00 00       	callq  5114 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    5114:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    511b:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    5122:	00 00 00 
        int br=0;
    5125:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    512c:	00 00 00 

        while(bl != br)
    512f:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    5135:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    513b:	0f 84 a2 00 00 00    	je     51e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    5141:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    5148:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    514e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5155:	89 d6                	mov    %edx,%esi
    5157:	48 89 c7             	mov    %rax,%rdi
    515a:	e8 00 00 00 00       	callq  515f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    515f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5163:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5167:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    516b:	48 89 c7             	mov    %rax,%rdi
    516e:	e8 00 00 00 00       	callq  5173 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    5173:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    517a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    517e:	be 7b 00 00 00       	mov    $0x7b,%esi
    5183:	48 89 c7             	mov    %rax,%rdi
    5186:	e8 00 00 00 00       	callq  518b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    518b:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    518f:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    5196:	89 d6                	mov    %edx,%esi
    5198:	89 c7                	mov    %eax,%edi
    519a:	e8 00 00 00 00       	callq  519f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    519f:	84 c0                	test   %al,%al
    51a1:	74 07                	je     51aa <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    51a3:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    51aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51ae:	be 7d 00 00 00       	mov    $0x7d,%esi
    51b3:	48 89 c7             	mov    %rax,%rdi
    51b6:	e8 00 00 00 00       	callq  51bb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    51bb:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51bf:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51c6:	89 d6                	mov    %edx,%esi
    51c8:	89 c7                	mov    %eax,%edi
    51ca:	e8 00 00 00 00       	callq  51cf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    51cf:	84 c0                	test   %al,%al
    51d1:	0f 84 58 ff ff ff    	je     512f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    51d7:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    51de:	e9 4c ff ff ff       	jmpq   512f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    51e3:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    51e9:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    51ef:	89 c1                	mov    %eax,%ecx
    51f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    51f5:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    51fb:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5202:	48 89 c7             	mov    %rax,%rdi
    5205:	e8 00 00 00 00       	callq  520a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    520a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    520e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5215:	48 89 d6             	mov    %rdx,%rsi
    5218:	48 89 c7             	mov    %rax,%rdi
    521b:	e8 00 00 00 00       	callq  5220 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    5220:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5224:	48 89 c7             	mov    %rax,%rdi
    5227:	e8 00 00 00 00       	callq  522c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    522c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5230:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5237 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    5237:	48 89 c7             	mov    %rax,%rdi
    523a:	e8 00 00 00 00       	callq  523f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    523f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5243:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5247:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    524e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5254:	b9 00 00 00 00       	mov    $0x0,%ecx
    5259:	48 89 c7             	mov    %rax,%rdi
    525c:	e8 00 00 00 00       	callq  5261 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    5261:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    5265:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    526c:	48 89 d6             	mov    %rdx,%rsi
    526f:	48 89 c7             	mov    %rax,%rdi
    5272:	e8 00 00 00 00       	callq  5277 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    5277:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    527b:	48 89 c7             	mov    %rax,%rdi
    527e:	e8 00 00 00 00       	callq  5283 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    5283:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5287:	48 89 c7             	mov    %rax,%rdi
    528a:	e8 00 00 00 00       	callq  528f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    528f:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5296:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    529d:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    52a4:	48 89 ce             	mov    %rcx,%rsi
    52a7:	48 89 c7             	mov    %rax,%rdi
    52aa:	e8 00 00 00 00       	callq  52af <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    52af:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52b6:	48 89 c7             	mov    %rax,%rdi
    52b9:	e8 00 00 00 00       	callq  52be <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    52be:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    52c4:	89 c2                	mov    %eax,%edx
    52c6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52ca:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    52d1:	48 89 ce             	mov    %rcx,%rsi
    52d4:	48 89 c7             	mov    %rax,%rdi
    52d7:	e8 00 00 00 00       	callq  52dc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    52dc:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    52e0:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52e7:	48 89 d6             	mov    %rdx,%rsi
    52ea:	48 89 c7             	mov    %rax,%rdi
    52ed:	e8 00 00 00 00       	callq  52f2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    52f2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52f6:	48 89 c7             	mov    %rax,%rdi
    52f9:	e8 00 00 00 00       	callq  52fe <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    52fe:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    5304:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    530a:	e9 e3 fc ff ff       	jmpq   4ff2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    530f:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5310:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5317:	48 89 c7             	mov    %rax,%rdi
    531a:	e8 00 00 00 00       	callq  531f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    531f:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5326:	48 89 c7             	mov    %rax,%rdi
    5329:	e8 00 00 00 00       	callq  532e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    532e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5335:	48 89 c7             	mov    %rax,%rdi
    5338:	e8 00 00 00 00       	callq  533d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    533d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5344:	48 89 c7             	mov    %rax,%rdi
    5347:	e8 00 00 00 00       	callq  534c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    534c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5353:	48 89 c7             	mov    %rax,%rdi
    5356:	e8 00 00 00 00       	callq  535b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    535b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5362:	48 89 c7             	mov    %rax,%rdi
    5365:	e8 00 00 00 00       	callq  536a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    536a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5371:	48 89 c7             	mov    %rax,%rdi
    5374:	e8 00 00 00 00       	callq  5379 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5379:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    537d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5384:	00 00 
    5386:	0f 84 89 01 00 00    	je     5515 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    538c:	e9 7f 01 00 00       	jmpq   5510 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    5391:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    5394:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    539b:	48 89 c7             	mov    %rax,%rdi
    539e:	e8 00 00 00 00       	callq  53a3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    53a3:	e9 d6 00 00 00       	jmpq   547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53a8:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    53ab:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    53b2:	48 89 c7             	mov    %rax,%rdi
    53b5:	e8 00 00 00 00       	callq  53ba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    53ba:	e9 bf 00 00 00       	jmpq   547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53bf:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    53c2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    53c9:	48 89 c7             	mov    %rax,%rdi
    53cc:	e8 00 00 00 00       	callq  53d1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    53d1:	e9 a8 00 00 00       	jmpq   547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53d6:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    53d9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    53e0:	48 89 c7             	mov    %rax,%rdi
    53e3:	e8 00 00 00 00       	callq  53e8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    53e8:	e9 91 00 00 00       	jmpq   547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53ed:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    53f0:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    53f7:	48 89 c7             	mov    %rax,%rdi
    53fa:	e8 00 00 00 00       	callq  53ff <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    53ff:	eb 7d                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5401:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    5404:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    540b:	48 89 c7             	mov    %rax,%rdi
    540e:	e8 00 00 00 00       	callq  5413 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    5413:	eb 69                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5415:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    5418:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    541c:	48 89 c7             	mov    %rax,%rdi
    541f:	e8 00 00 00 00       	callq  5424 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    5424:	eb 58                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5426:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    5429:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    542d:	48 89 c7             	mov    %rax,%rdi
    5430:	e8 00 00 00 00       	callq  5435 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    5435:	eb 47                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5437:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    543a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    543e:	48 89 c7             	mov    %rax,%rdi
    5441:	e8 00 00 00 00       	callq  5446 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    5446:	eb 36                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5448:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    544b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    544f:	48 89 c7             	mov    %rax,%rdi
    5452:	e8 00 00 00 00       	callq  5457 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    5457:	eb 03                	jmp    545c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    5459:	48 89 c3             	mov    %rax,%rbx
    545c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5460:	48 89 c7             	mov    %rax,%rdi
    5463:	e8 00 00 00 00       	callq  5468 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    5468:	eb 14                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    546a:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    546d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5471:	48 89 c7             	mov    %rax,%rdi
    5474:	e8 00 00 00 00       	callq  5479 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    5479:	eb 03                	jmp    547e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    547b:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    547e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5485:	48 89 c7             	mov    %rax,%rdi
    5488:	e8 00 00 00 00       	callq  548d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    548d:	eb 03                	jmp    5492 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    548f:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    5492:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5499:	48 89 c7             	mov    %rax,%rdi
    549c:	e8 00 00 00 00       	callq  54a1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    54a1:	eb 03                	jmp    54a6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    54a3:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    54a6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54ad:	48 89 c7             	mov    %rax,%rdi
    54b0:	e8 00 00 00 00       	callq  54b5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    54b5:	eb 03                	jmp    54ba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    54b7:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    54ba:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    54c1:	48 89 c7             	mov    %rax,%rdi
    54c4:	e8 00 00 00 00       	callq  54c9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    54c9:	eb 03                	jmp    54ce <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    54cb:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    54ce:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    54d5:	48 89 c7             	mov    %rax,%rdi
    54d8:	e8 00 00 00 00       	callq  54dd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    54dd:	eb 03                	jmp    54e2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    54df:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    54e2:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    54e9:	48 89 c7             	mov    %rax,%rdi
    54ec:	e8 00 00 00 00       	callq  54f1 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    54f1:	eb 03                	jmp    54f6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    54f3:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    54f6:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    54fd:	48 89 c7             	mov    %rax,%rdi
    5500:	e8 00 00 00 00       	callq  5505 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    5505:	48 89 d8             	mov    %rbx,%rax
    5508:	48 89 c7             	mov    %rax,%rdi
    550b:	e8 00 00 00 00       	callq  5510 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5510:	e8 00 00 00 00       	callq  5515 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    5515:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    551c:	5b                   	pop    %rbx
    551d:	5d                   	pop    %rbp
    551e:	c3                   	retq   
    551f:	90                   	nop

0000000000005520 <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    5520:	55                   	push   %rbp
    5521:	48 89 e5             	mov    %rsp,%rbp
    5524:	53                   	push   %rbx
    5525:	48 83 ec 38          	sub    $0x38,%rsp
    5529:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    552d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5531:	89 55 cc             	mov    %edx,-0x34(%rbp)
    5534:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    553b:	00 00 
    553d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5541:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    5543:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5547:	8b 55 cc             	mov    -0x34(%rbp),%edx
    554a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    554e:	48 89 ce             	mov    %rcx,%rsi
    5551:	48 89 c7             	mov    %rax,%rdi
    5554:	e8 00 00 00 00       	callq  5559 <_ZN6Parser8whatLineE7QStringi+0x39>
    5559:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    555d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5561:	48 89 d6             	mov    %rdx,%rsi
    5564:	48 89 c7             	mov    %rax,%rdi
    5567:	e8 00 00 00 00       	callq  556c <_ZN6Parser8whatLineE7QStringi+0x4c>
    556c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5570:	48 89 c7             	mov    %rax,%rdi
    5573:	e8 00 00 00 00       	callq  5578 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    5578:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    557c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5583 <_ZN6Parser8whatLineE7QStringi+0x63>
    5583:	48 89 c7             	mov    %rax,%rdi
    5586:	e8 00 00 00 00       	callq  558b <_ZN6Parser8whatLineE7QStringi+0x6b>
    558b:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    558f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5593:	ba 01 00 00 00       	mov    $0x1,%edx
    5598:	48 89 ce             	mov    %rcx,%rsi
    559b:	48 89 c7             	mov    %rax,%rdi
    559e:	e8 00 00 00 00       	callq  55a3 <_ZN6Parser8whatLineE7QStringi+0x83>
    55a3:	89 c3                	mov    %eax,%ebx
    55a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55a9:	48 89 c7             	mov    %rax,%rdi
    55ac:	e8 00 00 00 00       	callq  55b1 <_ZN6Parser8whatLineE7QStringi+0x91>
    55b1:	89 d8                	mov    %ebx,%eax
}
    55b3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    55b7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    55be:	00 00 
    55c0:	74 3b                	je     55fd <_ZN6Parser8whatLineE7QStringi+0xdd>
    55c2:	eb 34                	jmp    55f8 <_ZN6Parser8whatLineE7QStringi+0xd8>
    55c4:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    55c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55cb:	48 89 c7             	mov    %rax,%rdi
    55ce:	e8 00 00 00 00       	callq  55d3 <_ZN6Parser8whatLineE7QStringi+0xb3>
    55d3:	48 89 d8             	mov    %rbx,%rax
    55d6:	48 89 c7             	mov    %rax,%rdi
    55d9:	e8 00 00 00 00       	callq  55de <_ZN6Parser8whatLineE7QStringi+0xbe>
    55de:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    55e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55e5:	48 89 c7             	mov    %rax,%rdi
    55e8:	e8 00 00 00 00       	callq  55ed <_ZN6Parser8whatLineE7QStringi+0xcd>
    55ed:	48 89 d8             	mov    %rbx,%rax
    55f0:	48 89 c7             	mov    %rax,%rdi
    55f3:	e8 00 00 00 00       	callq  55f8 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    55f8:	e8 00 00 00 00       	callq  55fd <_ZN6Parser8whatLineE7QStringi+0xdd>
    55fd:	48 83 c4 38          	add    $0x38,%rsp
    5601:	5b                   	pop    %rbx
    5602:	5d                   	pop    %rbp
    5603:	c3                   	retq   

0000000000005604 <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    5604:	55                   	push   %rbp
    5605:	48 89 e5             	mov    %rsp,%rbp
    5608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    560c:	90                   	nop
    560d:	5d                   	pop    %rbp
    560e:	c3                   	retq   
    560f:	90                   	nop

0000000000005610 <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    5610:	55                   	push   %rbp
    5611:	48 89 e5             	mov    %rsp,%rbp
    5614:	53                   	push   %rbx
    5615:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    561c:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    5623:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    562a:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    5631:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5638:	00 00 
    563a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    563e:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    5640:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5647:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 564e <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    564e:	48 89 c7             	mov    %rax,%rdi
    5651:	e8 00 00 00 00       	callq  5656 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    5656:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    565d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5664 <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    5664:	48 89 c7             	mov    %rax,%rdi
    5667:	e8 00 00 00 00       	callq  566c <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    566c:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    5673:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    567a:	48 89 d6             	mov    %rdx,%rsi
    567d:	48 89 c7             	mov    %rax,%rdi
    5680:	e8 00 00 00 00       	callq  5685 <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    5685:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    568c:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5693:	48 89 d6             	mov    %rdx,%rsi
    5696:	48 89 c7             	mov    %rax,%rdi
    5699:	e8 00 00 00 00       	callq  569e <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    569e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56ac <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    56ac:	48 89 c7             	mov    %rax,%rdi
    56af:	e8 00 00 00 00       	callq  56b4 <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    56b4:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56c2 <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    56c2:	48 89 c7             	mov    %rax,%rdi
    56c5:	e8 00 00 00 00       	callq  56ca <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    56ca:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    56d1:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    56d8:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    56df:	b9 01 00 00 00       	mov    $0x1,%ecx
    56e4:	48 89 c7             	mov    %rax,%rdi
    56e7:	e8 00 00 00 00       	callq  56ec <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    56ec:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56f3:	48 89 c7             	mov    %rax,%rdi
    56f6:	e8 00 00 00 00       	callq  56fb <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    56fb:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5702:	48 89 c7             	mov    %rax,%rdi
    5705:	e8 00 00 00 00       	callq  570a <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    570a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5711:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5718 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    5718:	48 89 c7             	mov    %rax,%rdi
    571b:	e8 00 00 00 00       	callq  5720 <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    5720:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5727:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 572e <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    572e:	48 89 c7             	mov    %rax,%rdi
    5731:	e8 00 00 00 00       	callq  5736 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    5736:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    573d:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5744:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    574b:	b9 01 00 00 00       	mov    $0x1,%ecx
    5750:	48 89 c7             	mov    %rax,%rdi
    5753:	e8 00 00 00 00       	callq  5758 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    5758:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    575f:	48 89 c7             	mov    %rax,%rdi
    5762:	e8 00 00 00 00       	callq  5767 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    5767:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    576e:	48 89 c7             	mov    %rax,%rdi
    5771:	e8 00 00 00 00       	callq  5776 <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    5776:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    577d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5781:	48 89 d6             	mov    %rdx,%rsi
    5784:	48 89 c7             	mov    %rax,%rdi
    5787:	e8 00 00 00 00       	callq  578c <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    578c:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    5793:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5797:	48 89 d6             	mov    %rdx,%rsi
    579a:	48 89 c7             	mov    %rax,%rdi
    579d:	e8 00 00 00 00       	callq  57a2 <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    57a2:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    57a9:	be 02 00 00 00       	mov    $0x2,%esi
    57ae:	48 89 c7             	mov    %rax,%rdi
    57b1:	e8 00 00 00 00       	callq  57b6 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    57b6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    57bd:	be 02 00 00 00       	mov    $0x2,%esi
    57c2:	48 89 c7             	mov    %rax,%rdi
    57c5:	e8 00 00 00 00       	callq  57ca <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    57ca:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    57d1:	48 89 c7             	mov    %rax,%rdi
    57d4:	e8 00 00 00 00       	callq  57d9 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    57d9:	84 c0                	test   %al,%al
    57db:	74 1a                	je     57f7 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    57dd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    57e1:	be 04 00 00 00       	mov    $0x4,%esi
    57e6:	48 89 c7             	mov    %rax,%rdi
    57e9:	e8 00 00 00 00       	callq  57ee <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    57ee:	8b 45 d0             	mov    -0x30(%rbp),%eax
    57f1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    57f7:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    57fe:	48 89 c7             	mov    %rax,%rdi
    5801:	e8 00 00 00 00       	callq  5806 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    5806:	84 c0                	test   %al,%al
    5808:	74 1a                	je     5824 <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    580a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    580e:	be 04 00 00 00       	mov    $0x4,%esi
    5813:	48 89 c7             	mov    %rax,%rdi
    5816:	e8 00 00 00 00       	callq  581b <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    581b:	8b 45 d0             	mov    -0x30(%rbp),%eax
    581e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    5824:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    582a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    582e:	89 d6                	mov    %edx,%esi
    5830:	48 89 c7             	mov    %rax,%rdi
    5833:	e8 00 00 00 00       	callq  5838 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    5838:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    583e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5842:	89 d6                	mov    %edx,%esi
    5844:	48 89 c7             	mov    %rax,%rdi
    5847:	e8 00 00 00 00       	callq  584c <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    584c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5850:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5854:	48 89 d6             	mov    %rdx,%rsi
    5857:	48 89 c7             	mov    %rax,%rdi
    585a:	e8 00 00 00 00       	callq  585f <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    585f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5863:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5867:	48 89 d6             	mov    %rdx,%rsi
    586a:	48 89 c7             	mov    %rax,%rdi
    586d:	e8 00 00 00 00       	callq  5872 <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    5872:	e8 00 00 00 00       	callq  5877 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    5877:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    587e:	e8 00 00 00 00       	callq  5883 <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    5883:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    5889:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5890:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    5897:	ba 00 00 00 00       	mov    $0x0,%edx
    589c:	48 89 ce             	mov    %rcx,%rsi
    589f:	48 89 c7             	mov    %rax,%rdi
    58a2:	e8 00 00 00 00       	callq  58a7 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    58a7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    58ae:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    58b5:	ba 00 00 00 00       	mov    $0x0,%edx
    58ba:	48 89 ce             	mov    %rcx,%rsi
    58bd:	48 89 c7             	mov    %rax,%rdi
    58c0:	e8 00 00 00 00       	callq  58c5 <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    58c5:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    58cc:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    58d3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 58da <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    58da:	48 89 ce             	mov    %rcx,%rsi
    58dd:	48 89 c7             	mov    %rax,%rdi
    58e0:	e8 00 00 00 00       	callq  58e5 <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    58e5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    58ec:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    58f3:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    58fa:	48 89 ce             	mov    %rcx,%rsi
    58fd:	48 89 c7             	mov    %rax,%rdi
    5900:	e8 00 00 00 00       	callq  5905 <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    5905:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    590c:	48 89 c7             	mov    %rax,%rdi
    590f:	e8 00 00 00 00       	callq  5914 <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    5914:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    591b:	48 89 c7             	mov    %rax,%rdi
    591e:	e8 00 00 00 00       	callq  5923 <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    5923:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    592a:	48 89 c7             	mov    %rax,%rdi
    592d:	e8 00 00 00 00       	callq  5932 <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5932:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5939:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    5940:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5947 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    5947:	48 89 c7             	mov    %rax,%rdi
    594a:	e8 00 00 00 00       	callq  594f <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    594f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5956:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    595d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5964 <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    5964:	48 89 ce             	mov    %rcx,%rsi
    5967:	48 89 c7             	mov    %rax,%rdi
    596a:	e8 00 00 00 00       	callq  596f <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    596f:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5976:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    597a:	48 89 d6             	mov    %rdx,%rsi
    597d:	48 89 c7             	mov    %rax,%rdi
    5980:	e8 00 00 00 00       	callq  5985 <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    5985:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    598c:	48 89 c7             	mov    %rax,%rdi
    598f:	e8 00 00 00 00       	callq  5994 <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    5994:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    599b:	48 89 c7             	mov    %rax,%rdi
    599e:	e8 00 00 00 00       	callq  59a3 <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    59a3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59a7:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    59ae:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59b5 <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 00 00 00 00       	callq  59bd <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    59bd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59c1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    59c5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59cc <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    59cc:	48 89 ce             	mov    %rcx,%rsi
    59cf:	48 89 c7             	mov    %rax,%rdi
    59d2:	e8 00 00 00 00       	callq  59d7 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    59d7:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    59db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59df:	48 89 d6             	mov    %rdx,%rsi
    59e2:	48 89 c7             	mov    %rax,%rdi
    59e5:	e8 00 00 00 00       	callq  59ea <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    59ea:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59ee:	48 89 c7             	mov    %rax,%rdi
    59f1:	e8 00 00 00 00       	callq  59f6 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    59f6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59fa:	48 89 c7             	mov    %rax,%rdi
    59fd:	e8 00 00 00 00       	callq  5a02 <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    5a02:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5a09:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a0d:	48 89 d6             	mov    %rdx,%rsi
    5a10:	48 89 c7             	mov    %rax,%rdi
    5a13:	e8 00 00 00 00       	callq  5a18 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5a18:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5a1f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a23:	48 89 d6             	mov    %rdx,%rsi
    5a26:	48 89 c7             	mov    %rax,%rdi
    5a29:	e8 00 00 00 00       	callq  5a2e <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5a2e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a32:	48 89 c7             	mov    %rax,%rdi
    5a35:	e8 00 00 00 00       	callq  5a3a <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5a3a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a3e:	48 89 c7             	mov    %rax,%rdi
    5a41:	e8 00 00 00 00       	callq  5a46 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5a46:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5a4d:	48 89 c7             	mov    %rax,%rdi
    5a50:	e8 00 00 00 00       	callq  5a55 <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5a55:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a59:	48 89 c7             	mov    %rax,%rdi
    5a5c:	e8 00 00 00 00       	callq  5a61 <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5a61:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a65:	48 89 c7             	mov    %rax,%rdi
    5a68:	e8 00 00 00 00       	callq  5a6d <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5a6d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a71:	48 89 c7             	mov    %rax,%rdi
    5a74:	e8 00 00 00 00       	callq  5a79 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5a79:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a7d:	48 89 c7             	mov    %rax,%rdi
    5a80:	e8 00 00 00 00       	callq  5a85 <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5a85:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5a8c:	48 89 c7             	mov    %rax,%rdi
    5a8f:	e8 00 00 00 00       	callq  5a94 <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5a94:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5a9b:	48 89 c7             	mov    %rax,%rdi
    5a9e:	e8 00 00 00 00       	callq  5aa3 <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5aa3:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5aaa:	48 89 c7             	mov    %rax,%rdi
    5aad:	e8 00 00 00 00       	callq  5ab2 <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5ab2:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5ab9:	48 89 c7             	mov    %rax,%rdi
    5abc:	e8 00 00 00 00       	callq  5ac1 <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5ac1:	90                   	nop
    5ac2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ac6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5acd:	00 00 
    5acf:	0f 84 d3 01 00 00    	je     5ca8 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ad5:	e9 c9 01 00 00       	jmpq   5ca3 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5ada:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5add:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5ae4:	48 89 c7             	mov    %rax,%rdi
    5ae7:	e8 00 00 00 00       	callq  5aec <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5aec:	eb 03                	jmp    5af1 <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5aee:	48 89 c3             	mov    %rax,%rbx
    5af1:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5af8:	48 89 c7             	mov    %rax,%rdi
    5afb:	e8 00 00 00 00       	callq  5b00 <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5b00:	e9 48 01 00 00       	jmpq   5c4d <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b05:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5b08:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5b0f:	48 89 c7             	mov    %rax,%rdi
    5b12:	e8 00 00 00 00       	callq  5b17 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5b17:	eb 03                	jmp    5b1c <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5b19:	48 89 c3             	mov    %rax,%rbx
    5b1c:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5b23:	48 89 c7             	mov    %rax,%rdi
    5b26:	e8 00 00 00 00       	callq  5b2b <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5b2b:	e9 1d 01 00 00       	jmpq   5c4d <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b30:	48 89 c3             	mov    %rax,%rbx
    5b33:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b3a:	48 89 c7             	mov    %rax,%rdi
    5b3d:	e8 00 00 00 00       	callq  5b42 <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5b42:	eb 17                	jmp    5b5b <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b44:	48 89 c3             	mov    %rax,%rbx
    5b47:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b4e:	48 89 c7             	mov    %rax,%rdi
    5b51:	e8 00 00 00 00       	callq  5b56 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5b56:	eb 03                	jmp    5b5b <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b58:	48 89 c3             	mov    %rax,%rbx
    5b5b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5b62:	48 89 c7             	mov    %rax,%rdi
    5b65:	e8 00 00 00 00       	callq  5b6a <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5b6a:	eb 17                	jmp    5b83 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b6c:	48 89 c3             	mov    %rax,%rbx
    5b6f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b76:	48 89 c7             	mov    %rax,%rdi
    5b79:	e8 00 00 00 00       	callq  5b7e <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5b7e:	eb 03                	jmp    5b83 <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b80:	48 89 c3             	mov    %rax,%rbx
    5b83:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5b8a:	48 89 c7             	mov    %rax,%rdi
    5b8d:	e8 00 00 00 00       	callq  5b92 <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5b92:	eb 75                	jmp    5c09 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5b94:	48 89 c3             	mov    %rax,%rbx
    5b97:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b9e:	48 89 c7             	mov    %rax,%rdi
    5ba1:	e8 00 00 00 00       	callq  5ba6 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5ba6:	eb 61                	jmp    5c09 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5ba8:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5bab:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5bb2:	48 89 c7             	mov    %rax,%rdi
    5bb5:	e8 00 00 00 00       	callq  5bba <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5bba:	eb 03                	jmp    5bbf <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5bbc:	48 89 c3             	mov    %rax,%rbx
    5bbf:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5bc6:	48 89 c7             	mov    %rax,%rdi
    5bc9:	e8 00 00 00 00       	callq  5bce <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5bce:	eb 25                	jmp    5bf5 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5bd0:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5bd3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5bd7:	48 89 c7             	mov    %rax,%rdi
    5bda:	e8 00 00 00 00       	callq  5bdf <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5bdf:	eb 03                	jmp    5be4 <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5be1:	48 89 c3             	mov    %rax,%rbx
    5be4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5be8:	48 89 c7             	mov    %rax,%rdi
    5beb:	e8 00 00 00 00       	callq  5bf0 <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5bf0:	eb 03                	jmp    5bf5 <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5bf2:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5bf5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5bfc:	48 89 c7             	mov    %rax,%rdi
    5bff:	e8 00 00 00 00       	callq  5c04 <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5c04:	eb 03                	jmp    5c09 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c06:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5c09:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c0d:	48 89 c7             	mov    %rax,%rdi
    5c10:	e8 00 00 00 00       	callq  5c15 <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5c15:	eb 03                	jmp    5c1a <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5c17:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5c1a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c1e:	48 89 c7             	mov    %rax,%rdi
    5c21:	e8 00 00 00 00       	callq  5c26 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5c26:	eb 03                	jmp    5c2b <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5c28:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5c2b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5c2f:	48 89 c7             	mov    %rax,%rdi
    5c32:	e8 00 00 00 00       	callq  5c37 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5c37:	eb 03                	jmp    5c3c <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5c39:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5c3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5c40:	48 89 c7             	mov    %rax,%rdi
    5c43:	e8 00 00 00 00       	callq  5c48 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5c48:	eb 03                	jmp    5c4d <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c4a:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5c4d:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5c54:	48 89 c7             	mov    %rax,%rdi
    5c57:	e8 00 00 00 00       	callq  5c5c <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5c5c:	eb 03                	jmp    5c61 <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5c5e:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5c61:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5c68:	48 89 c7             	mov    %rax,%rdi
    5c6b:	e8 00 00 00 00       	callq  5c70 <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5c70:	eb 03                	jmp    5c75 <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5c72:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5c75:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5c7c:	48 89 c7             	mov    %rax,%rdi
    5c7f:	e8 00 00 00 00       	callq  5c84 <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5c84:	eb 03                	jmp    5c89 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5c86:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5c89:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5c90:	48 89 c7             	mov    %rax,%rdi
    5c93:	e8 00 00 00 00       	callq  5c98 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5c98:	48 89 d8             	mov    %rbx,%rax
    5c9b:	48 89 c7             	mov    %rax,%rdi
    5c9e:	e8 00 00 00 00       	callq  5ca3 <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5ca3:	e8 00 00 00 00       	callq  5ca8 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5ca8:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5caf:	5b                   	pop    %rbx
    5cb0:	5d                   	pop    %rbp
    5cb1:	c3                   	retq   

0000000000005cb2 <_ZN6Parser4initEv>:

void Parser::init(){
    5cb2:	55                   	push   %rbp
    5cb3:	48 89 e5             	mov    %rsp,%rbp
    5cb6:	48 83 ec 10          	sub    $0x10,%rsp
    5cba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cc2:	48 83 c0 30          	add    $0x30,%rax
    5cc6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ccd <_ZN6Parser4initEv+0x1b>
    5ccd:	48 89 c7             	mov    %rax,%rdi
    5cd0:	e8 00 00 00 00       	callq  5cd5 <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cd9:	48 83 c0 38          	add    $0x38,%rax
    5cdd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ce4 <_ZN6Parser4initEv+0x32>
    5ce4:	48 89 c7             	mov    %rax,%rdi
    5ce7:	e8 00 00 00 00       	callq  5cec <_ZN6Parser4initEv+0x3a>
}
    5cec:	90                   	nop
    5ced:	c9                   	leaveq 
    5cee:	c3                   	retq   
    5cef:	90                   	nop

0000000000005cf0 <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5cf0:	55                   	push   %rbp
    5cf1:	48 89 e5             	mov    %rsp,%rbp
    5cf4:	53                   	push   %rbx
    5cf5:	48 83 ec 38          	sub    $0x38,%rsp
    5cf9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5cfd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d04:	00 00 
    5d06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5d0a:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5d0c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d13:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d17:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d1e <_ZN6Parser8initSemsEv+0x2e>
    5d1e:	48 89 c7             	mov    %rax,%rdi
    5d21:	e8 00 00 00 00       	callq  5d26 <_ZN6Parser8initSemsEv+0x36>
    5d26:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d2a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d31:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d35:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d39:	48 89 c6             	mov    %rax,%rsi
    5d3c:	48 89 cf             	mov    %rcx,%rdi
    5d3f:	e8 00 00 00 00       	callq  5d44 <_ZN6Parser8initSemsEv+0x54>
    5d44:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d48:	48 89 c7             	mov    %rax,%rdi
    5d4b:	e8 00 00 00 00       	callq  5d50 <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5d50:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d57:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d5b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d62 <_ZN6Parser8initSemsEv+0x72>
    5d62:	48 89 c7             	mov    %rax,%rdi
    5d65:	e8 00 00 00 00       	callq  5d6a <_ZN6Parser8initSemsEv+0x7a>
    5d6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d6e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5d75:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d79:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d7d:	48 89 c6             	mov    %rax,%rsi
    5d80:	48 89 cf             	mov    %rcx,%rdi
    5d83:	e8 00 00 00 00       	callq  5d88 <_ZN6Parser8initSemsEv+0x98>
    5d88:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d8c:	48 89 c7             	mov    %rax,%rdi
    5d8f:	e8 00 00 00 00       	callq  5d94 <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5d94:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5d9b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d9f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5da6 <_ZN6Parser8initSemsEv+0xb6>
    5da6:	48 89 c7             	mov    %rax,%rdi
    5da9:	e8 00 00 00 00       	callq  5dae <_ZN6Parser8initSemsEv+0xbe>
    5dae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5db2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5db9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dbd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dc1:	48 89 c6             	mov    %rax,%rsi
    5dc4:	48 89 cf             	mov    %rcx,%rdi
    5dc7:	e8 00 00 00 00       	callq  5dcc <_ZN6Parser8initSemsEv+0xdc>
    5dcc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dd0:	48 89 c7             	mov    %rax,%rdi
    5dd3:	e8 00 00 00 00       	callq  5dd8 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5dd8:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5ddf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5de3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dea <_ZN6Parser8initSemsEv+0xfa>
    5dea:	48 89 c7             	mov    %rax,%rdi
    5ded:	e8 00 00 00 00       	callq  5df2 <_ZN6Parser8initSemsEv+0x102>
    5df2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5df6:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5dfd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e01:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e05:	48 89 c6             	mov    %rax,%rsi
    5e08:	48 89 cf             	mov    %rcx,%rdi
    5e0b:	e8 00 00 00 00       	callq  5e10 <_ZN6Parser8initSemsEv+0x120>
    5e10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e14:	48 89 c7             	mov    %rax,%rdi
    5e17:	e8 00 00 00 00       	callq  5e1c <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5e1c:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5e23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e27:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e2e <_ZN6Parser8initSemsEv+0x13e>
    5e2e:	48 89 c7             	mov    %rax,%rdi
    5e31:	e8 00 00 00 00       	callq  5e36 <_ZN6Parser8initSemsEv+0x146>
    5e36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e3a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e41:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e45:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e49:	48 89 c6             	mov    %rax,%rsi
    5e4c:	48 89 cf             	mov    %rcx,%rdi
    5e4f:	e8 00 00 00 00       	callq  5e54 <_ZN6Parser8initSemsEv+0x164>
    5e54:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e58:	48 89 c7             	mov    %rax,%rdi
    5e5b:	e8 00 00 00 00       	callq  5e60 <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5e60:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5e67:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e6b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e72 <_ZN6Parser8initSemsEv+0x182>
    5e72:	48 89 c7             	mov    %rax,%rdi
    5e75:	e8 00 00 00 00       	callq  5e7a <_ZN6Parser8initSemsEv+0x18a>
    5e7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e7e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5e85:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e89:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e8d:	48 89 c6             	mov    %rax,%rsi
    5e90:	48 89 cf             	mov    %rcx,%rdi
    5e93:	e8 00 00 00 00       	callq  5e98 <_ZN6Parser8initSemsEv+0x1a8>
    5e98:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e9c:	48 89 c7             	mov    %rax,%rdi
    5e9f:	e8 00 00 00 00       	callq  5ea4 <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5ea4:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5eab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eaf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5eb6 <_ZN6Parser8initSemsEv+0x1c6>
    5eb6:	48 89 c7             	mov    %rax,%rdi
    5eb9:	e8 00 00 00 00       	callq  5ebe <_ZN6Parser8initSemsEv+0x1ce>
    5ebe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5ec2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5ec9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ecd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ed1:	48 89 c6             	mov    %rax,%rsi
    5ed4:	48 89 cf             	mov    %rcx,%rdi
    5ed7:	e8 00 00 00 00       	callq  5edc <_ZN6Parser8initSemsEv+0x1ec>
    5edc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ee0:	48 89 c7             	mov    %rax,%rdi
    5ee3:	e8 00 00 00 00       	callq  5ee8 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5ee8:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5eef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ef3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5efa <_ZN6Parser8initSemsEv+0x20a>
    5efa:	48 89 c7             	mov    %rax,%rdi
    5efd:	e8 00 00 00 00       	callq  5f02 <_ZN6Parser8initSemsEv+0x212>
    5f02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f06:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f0d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f11:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f15:	48 89 c6             	mov    %rax,%rsi
    5f18:	48 89 cf             	mov    %rcx,%rdi
    5f1b:	e8 00 00 00 00       	callq  5f20 <_ZN6Parser8initSemsEv+0x230>
    5f20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f24:	48 89 c7             	mov    %rax,%rdi
    5f27:	e8 00 00 00 00       	callq  5f2c <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5f2c:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5f33:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f3e <_ZN6Parser8initSemsEv+0x24e>
    5f3e:	48 89 c7             	mov    %rax,%rdi
    5f41:	e8 00 00 00 00       	callq  5f46 <_ZN6Parser8initSemsEv+0x256>
    5f46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f4a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f51:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f55:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f59:	48 89 c6             	mov    %rax,%rsi
    5f5c:	48 89 cf             	mov    %rcx,%rdi
    5f5f:	e8 00 00 00 00       	callq  5f64 <_ZN6Parser8initSemsEv+0x274>
    5f64:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f68:	48 89 c7             	mov    %rax,%rdi
    5f6b:	e8 00 00 00 00       	callq  5f70 <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5f70:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5f77:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f7b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f82 <_ZN6Parser8initSemsEv+0x292>
    5f82:	48 89 c7             	mov    %rax,%rdi
    5f85:	e8 00 00 00 00       	callq  5f8a <_ZN6Parser8initSemsEv+0x29a>
    5f8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f8e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5f95:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f99:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f9d:	48 89 c6             	mov    %rax,%rsi
    5fa0:	48 89 cf             	mov    %rcx,%rdi
    5fa3:	e8 00 00 00 00       	callq  5fa8 <_ZN6Parser8initSemsEv+0x2b8>
    5fa8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fac:	48 89 c7             	mov    %rax,%rdi
    5faf:	e8 00 00 00 00       	callq  5fb4 <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5fb4:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5fbb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fbf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fc6 <_ZN6Parser8initSemsEv+0x2d6>
    5fc6:	48 89 c7             	mov    %rax,%rdi
    5fc9:	e8 00 00 00 00       	callq  5fce <_ZN6Parser8initSemsEv+0x2de>
    5fce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fd2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    5fd9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fdd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fe1:	48 89 c6             	mov    %rax,%rsi
    5fe4:	48 89 cf             	mov    %rcx,%rdi
    5fe7:	e8 00 00 00 00       	callq  5fec <_ZN6Parser8initSemsEv+0x2fc>
    5fec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ff0:	48 89 c7             	mov    %rax,%rdi
    5ff3:	e8 00 00 00 00       	callq  5ff8 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    5ff8:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    5fff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6003:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 600a <_ZN6Parser8initSemsEv+0x31a>
    600a:	48 89 c7             	mov    %rax,%rdi
    600d:	e8 00 00 00 00       	callq  6012 <_ZN6Parser8initSemsEv+0x322>
    6012:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6016:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    601d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6021:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6025:	48 89 c6             	mov    %rax,%rsi
    6028:	48 89 cf             	mov    %rcx,%rdi
    602b:	e8 00 00 00 00       	callq  6030 <_ZN6Parser8initSemsEv+0x340>
    6030:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6034:	48 89 c7             	mov    %rax,%rdi
    6037:	e8 00 00 00 00       	callq  603c <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    603c:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    6043:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6047:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 604e <_ZN6Parser8initSemsEv+0x35e>
    604e:	48 89 c7             	mov    %rax,%rdi
    6051:	e8 00 00 00 00       	callq  6056 <_ZN6Parser8initSemsEv+0x366>
    6056:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    605a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6061:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6065:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6069:	48 89 c6             	mov    %rax,%rsi
    606c:	48 89 cf             	mov    %rcx,%rdi
    606f:	e8 00 00 00 00       	callq  6074 <_ZN6Parser8initSemsEv+0x384>
    6074:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6078:	48 89 c7             	mov    %rax,%rdi
    607b:	e8 00 00 00 00       	callq  6080 <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    6080:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    6087:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    608b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6092 <_ZN6Parser8initSemsEv+0x3a2>
    6092:	48 89 c7             	mov    %rax,%rdi
    6095:	e8 00 00 00 00       	callq  609a <_ZN6Parser8initSemsEv+0x3aa>
    609a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    609e:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60a5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60ad:	48 89 c6             	mov    %rax,%rsi
    60b0:	48 89 cf             	mov    %rcx,%rdi
    60b3:	e8 00 00 00 00       	callq  60b8 <_ZN6Parser8initSemsEv+0x3c8>
    60b8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60bc:	48 89 c7             	mov    %rax,%rdi
    60bf:	e8 00 00 00 00       	callq  60c4 <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    60c4:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    60cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60d6 <_ZN6Parser8initSemsEv+0x3e6>
    60d6:	48 89 c7             	mov    %rax,%rdi
    60d9:	e8 00 00 00 00       	callq  60de <_ZN6Parser8initSemsEv+0x3ee>
    60de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60e2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    60e9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60f1:	48 89 c6             	mov    %rax,%rsi
    60f4:	48 89 cf             	mov    %rcx,%rdi
    60f7:	e8 00 00 00 00       	callq  60fc <_ZN6Parser8initSemsEv+0x40c>
    60fc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6100:	48 89 c7             	mov    %rax,%rdi
    6103:	e8 00 00 00 00       	callq  6108 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    6108:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    610f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6113:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 611a <_ZN6Parser8initSemsEv+0x42a>
    611a:	48 89 c7             	mov    %rax,%rdi
    611d:	e8 00 00 00 00       	callq  6122 <_ZN6Parser8initSemsEv+0x432>
    6122:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6126:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    612d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6131:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6135:	48 89 c6             	mov    %rax,%rsi
    6138:	48 89 cf             	mov    %rcx,%rdi
    613b:	e8 00 00 00 00       	callq  6140 <_ZN6Parser8initSemsEv+0x450>
    6140:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6144:	48 89 c7             	mov    %rax,%rdi
    6147:	e8 00 00 00 00       	callq  614c <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    614c:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    6153:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6157:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 615e <_ZN6Parser8initSemsEv+0x46e>
    615e:	48 89 c7             	mov    %rax,%rdi
    6161:	e8 00 00 00 00       	callq  6166 <_ZN6Parser8initSemsEv+0x476>
    6166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    616a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6171:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6175:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6179:	48 89 c6             	mov    %rax,%rsi
    617c:	48 89 cf             	mov    %rcx,%rdi
    617f:	e8 00 00 00 00       	callq  6184 <_ZN6Parser8initSemsEv+0x494>
    6184:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6188:	48 89 c7             	mov    %rax,%rdi
    618b:	e8 00 00 00 00       	callq  6190 <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    6190:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    6197:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    619b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61a2 <_ZN6Parser8initSemsEv+0x4b2>
    61a2:	48 89 c7             	mov    %rax,%rdi
    61a5:	e8 00 00 00 00       	callq  61aa <_ZN6Parser8initSemsEv+0x4ba>
    61aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61ae:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61b5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61bd:	48 89 c6             	mov    %rax,%rsi
    61c0:	48 89 cf             	mov    %rcx,%rdi
    61c3:	e8 00 00 00 00       	callq  61c8 <_ZN6Parser8initSemsEv+0x4d8>
    61c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61cc:	48 89 c7             	mov    %rax,%rdi
    61cf:	e8 00 00 00 00       	callq  61d4 <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    61d4:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    61db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61e6 <_ZN6Parser8initSemsEv+0x4f6>
    61e6:	48 89 c7             	mov    %rax,%rdi
    61e9:	e8 00 00 00 00       	callq  61ee <_ZN6Parser8initSemsEv+0x4fe>
    61ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61f2:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    61f9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6201:	48 89 c6             	mov    %rax,%rsi
    6204:	48 89 cf             	mov    %rcx,%rdi
    6207:	e8 00 00 00 00       	callq  620c <_ZN6Parser8initSemsEv+0x51c>
    620c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6210:	48 89 c7             	mov    %rax,%rdi
    6213:	e8 00 00 00 00       	callq  6218 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    6218:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    621f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6223:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 622a <_ZN6Parser8initSemsEv+0x53a>
    622a:	48 89 c7             	mov    %rax,%rdi
    622d:	e8 00 00 00 00       	callq  6232 <_ZN6Parser8initSemsEv+0x542>
    6232:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6236:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    623d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6241:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6245:	48 89 c6             	mov    %rax,%rsi
    6248:	48 89 cf             	mov    %rcx,%rdi
    624b:	e8 00 00 00 00       	callq  6250 <_ZN6Parser8initSemsEv+0x560>
    6250:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6254:	48 89 c7             	mov    %rax,%rdi
    6257:	e8 00 00 00 00       	callq  625c <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    625c:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    6263:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6267:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 626e <_ZN6Parser8initSemsEv+0x57e>
    626e:	48 89 c7             	mov    %rax,%rdi
    6271:	e8 00 00 00 00       	callq  6276 <_ZN6Parser8initSemsEv+0x586>
    6276:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    627a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6281:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6285:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6289:	48 89 c6             	mov    %rax,%rsi
    628c:	48 89 cf             	mov    %rcx,%rdi
    628f:	e8 00 00 00 00       	callq  6294 <_ZN6Parser8initSemsEv+0x5a4>
    6294:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6298:	48 89 c7             	mov    %rax,%rdi
    629b:	e8 00 00 00 00       	callq  62a0 <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    62a0:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    62a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62ab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62b2 <_ZN6Parser8initSemsEv+0x5c2>
    62b2:	48 89 c7             	mov    %rax,%rdi
    62b5:	e8 00 00 00 00       	callq  62ba <_ZN6Parser8initSemsEv+0x5ca>
    62ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62be:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    62c5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62c9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62cd:	48 89 c6             	mov    %rax,%rsi
    62d0:	48 89 cf             	mov    %rcx,%rdi
    62d3:	e8 00 00 00 00       	callq  62d8 <_ZN6Parser8initSemsEv+0x5e8>
    62d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62dc:	48 89 c7             	mov    %rax,%rdi
    62df:	e8 00 00 00 00       	callq  62e4 <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    62e4:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    62eb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62f6 <_ZN6Parser8initSemsEv+0x606>
    62f6:	48 89 c7             	mov    %rax,%rdi
    62f9:	e8 00 00 00 00       	callq  62fe <_ZN6Parser8initSemsEv+0x60e>
    62fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6302:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6309:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    630d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6311:	48 89 c6             	mov    %rax,%rsi
    6314:	48 89 cf             	mov    %rcx,%rdi
    6317:	e8 00 00 00 00       	callq  631c <_ZN6Parser8initSemsEv+0x62c>
    631c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6320:	48 89 c7             	mov    %rax,%rdi
    6323:	e8 00 00 00 00       	callq  6328 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    6328:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    632f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6333:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 633a <_ZN6Parser8initSemsEv+0x64a>
    633a:	48 89 c7             	mov    %rax,%rdi
    633d:	e8 00 00 00 00       	callq  6342 <_ZN6Parser8initSemsEv+0x652>
    6342:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6346:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    634d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6351:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6355:	48 89 c6             	mov    %rax,%rsi
    6358:	48 89 cf             	mov    %rcx,%rdi
    635b:	e8 00 00 00 00       	callq  6360 <_ZN6Parser8initSemsEv+0x670>
    6360:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6364:	48 89 c7             	mov    %rax,%rdi
    6367:	e8 00 00 00 00       	callq  636c <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    636c:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    6373:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6377:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 637e <_ZN6Parser8initSemsEv+0x68e>
    637e:	48 89 c7             	mov    %rax,%rdi
    6381:	e8 00 00 00 00       	callq  6386 <_ZN6Parser8initSemsEv+0x696>
    6386:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    638a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6391:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6395:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6399:	48 89 c6             	mov    %rax,%rsi
    639c:	48 89 cf             	mov    %rcx,%rdi
    639f:	e8 00 00 00 00       	callq  63a4 <_ZN6Parser8initSemsEv+0x6b4>
    63a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63a8:	48 89 c7             	mov    %rax,%rdi
    63ab:	e8 00 00 00 00       	callq  63b0 <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    63b0:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    63b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63c2 <_ZN6Parser8initSemsEv+0x6d2>
    63c2:	48 89 c7             	mov    %rax,%rdi
    63c5:	e8 00 00 00 00       	callq  63ca <_ZN6Parser8initSemsEv+0x6da>
    63ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63ce:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    63d5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63d9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63dd:	48 89 c6             	mov    %rax,%rsi
    63e0:	48 89 cf             	mov    %rcx,%rdi
    63e3:	e8 00 00 00 00       	callq  63e8 <_ZN6Parser8initSemsEv+0x6f8>
    63e8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ec:	48 89 c7             	mov    %rax,%rdi
    63ef:	e8 00 00 00 00       	callq  63f4 <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    63f4:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    63fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63ff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6406 <_ZN6Parser8initSemsEv+0x716>
    6406:	48 89 c7             	mov    %rax,%rdi
    6409:	e8 00 00 00 00       	callq  640e <_ZN6Parser8initSemsEv+0x71e>
    640e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6412:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    6419:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    641d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6421:	48 89 c6             	mov    %rax,%rsi
    6424:	48 89 cf             	mov    %rcx,%rdi
    6427:	e8 00 00 00 00       	callq  642c <_ZN6Parser8initSemsEv+0x73c>
    642c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6430:	48 89 c7             	mov    %rax,%rdi
    6433:	e8 00 00 00 00       	callq  6438 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    6438:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    643f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6443:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 644a <_ZN6Parser8initSemsEv+0x75a>
    644a:	48 89 c7             	mov    %rax,%rdi
    644d:	e8 00 00 00 00       	callq  6452 <_ZN6Parser8initSemsEv+0x762>
    6452:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6456:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    645d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6461:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6465:	48 89 c6             	mov    %rax,%rsi
    6468:	48 89 cf             	mov    %rcx,%rdi
    646b:	e8 00 00 00 00       	callq  6470 <_ZN6Parser8initSemsEv+0x780>
    6470:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6474:	48 89 c7             	mov    %rax,%rdi
    6477:	e8 00 00 00 00       	callq  647c <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    647c:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    6483:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6487:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 648e <_ZN6Parser8initSemsEv+0x79e>
    648e:	48 89 c7             	mov    %rax,%rdi
    6491:	e8 00 00 00 00       	callq  6496 <_ZN6Parser8initSemsEv+0x7a6>
    6496:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    649a:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64a1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64a9:	48 89 c6             	mov    %rax,%rsi
    64ac:	48 89 cf             	mov    %rcx,%rdi
    64af:	e8 00 00 00 00       	callq  64b4 <_ZN6Parser8initSemsEv+0x7c4>
    64b4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64b8:	48 89 c7             	mov    %rax,%rdi
    64bb:	e8 00 00 00 00       	callq  64c0 <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    64c0:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    64c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64cb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64d2 <_ZN6Parser8initSemsEv+0x7e2>
    64d2:	48 89 c7             	mov    %rax,%rdi
    64d5:	e8 00 00 00 00       	callq  64da <_ZN6Parser8initSemsEv+0x7ea>
    64da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64de:	48 8d 88 c8 00 00 00 	lea    0xc8(%rax),%rcx
    64e5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64e9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64ed:	48 89 c6             	mov    %rax,%rsi
    64f0:	48 89 cf             	mov    %rcx,%rdi
    64f3:	e8 00 00 00 00       	callq  64f8 <_ZN6Parser8initSemsEv+0x808>
    64f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64fc:	48 89 c7             	mov    %rax,%rdi
    64ff:	e8 00 00 00 00       	callq  6504 <_ZN6Parser8initSemsEv+0x814>

}
    6504:	90                   	nop
    6505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6509:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6510:	00 00 
    6512:	0f 84 16 03 00 00    	je     682e <_ZN6Parser8initSemsEv+0xb3e>
    6518:	e9 0c 03 00 00       	jmpq   6829 <_ZN6Parser8initSemsEv+0xb39>
    651d:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    6520:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6524:	48 89 c7             	mov    %rax,%rdi
    6527:	e8 00 00 00 00       	callq  652c <_ZN6Parser8initSemsEv+0x83c>
    652c:	48 89 d8             	mov    %rbx,%rax
    652f:	48 89 c7             	mov    %rax,%rdi
    6532:	e8 00 00 00 00       	callq  6537 <_ZN6Parser8initSemsEv+0x847>
    6537:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    653a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    653e:	48 89 c7             	mov    %rax,%rdi
    6541:	e8 00 00 00 00       	callq  6546 <_ZN6Parser8initSemsEv+0x856>
    6546:	48 89 d8             	mov    %rbx,%rax
    6549:	48 89 c7             	mov    %rax,%rdi
    654c:	e8 00 00 00 00       	callq  6551 <_ZN6Parser8initSemsEv+0x861>
    6551:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    6554:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6558:	48 89 c7             	mov    %rax,%rdi
    655b:	e8 00 00 00 00       	callq  6560 <_ZN6Parser8initSemsEv+0x870>
    6560:	48 89 d8             	mov    %rbx,%rax
    6563:	48 89 c7             	mov    %rax,%rdi
    6566:	e8 00 00 00 00       	callq  656b <_ZN6Parser8initSemsEv+0x87b>
    656b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    656e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6572:	48 89 c7             	mov    %rax,%rdi
    6575:	e8 00 00 00 00       	callq  657a <_ZN6Parser8initSemsEv+0x88a>
    657a:	48 89 d8             	mov    %rbx,%rax
    657d:	48 89 c7             	mov    %rax,%rdi
    6580:	e8 00 00 00 00       	callq  6585 <_ZN6Parser8initSemsEv+0x895>
    6585:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    6588:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    658c:	48 89 c7             	mov    %rax,%rdi
    658f:	e8 00 00 00 00       	callq  6594 <_ZN6Parser8initSemsEv+0x8a4>
    6594:	48 89 d8             	mov    %rbx,%rax
    6597:	48 89 c7             	mov    %rax,%rdi
    659a:	e8 00 00 00 00       	callq  659f <_ZN6Parser8initSemsEv+0x8af>
    659f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    65a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a6:	48 89 c7             	mov    %rax,%rdi
    65a9:	e8 00 00 00 00       	callq  65ae <_ZN6Parser8initSemsEv+0x8be>
    65ae:	48 89 d8             	mov    %rbx,%rax
    65b1:	48 89 c7             	mov    %rax,%rdi
    65b4:	e8 00 00 00 00       	callq  65b9 <_ZN6Parser8initSemsEv+0x8c9>
    65b9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    65bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65c0:	48 89 c7             	mov    %rax,%rdi
    65c3:	e8 00 00 00 00       	callq  65c8 <_ZN6Parser8initSemsEv+0x8d8>
    65c8:	48 89 d8             	mov    %rbx,%rax
    65cb:	48 89 c7             	mov    %rax,%rdi
    65ce:	e8 00 00 00 00       	callq  65d3 <_ZN6Parser8initSemsEv+0x8e3>
    65d3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    65d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65da:	48 89 c7             	mov    %rax,%rdi
    65dd:	e8 00 00 00 00       	callq  65e2 <_ZN6Parser8initSemsEv+0x8f2>
    65e2:	48 89 d8             	mov    %rbx,%rax
    65e5:	48 89 c7             	mov    %rax,%rdi
    65e8:	e8 00 00 00 00       	callq  65ed <_ZN6Parser8initSemsEv+0x8fd>
    65ed:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    65f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65f4:	48 89 c7             	mov    %rax,%rdi
    65f7:	e8 00 00 00 00       	callq  65fc <_ZN6Parser8initSemsEv+0x90c>
    65fc:	48 89 d8             	mov    %rbx,%rax
    65ff:	48 89 c7             	mov    %rax,%rdi
    6602:	e8 00 00 00 00       	callq  6607 <_ZN6Parser8initSemsEv+0x917>
    6607:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    660a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    660e:	48 89 c7             	mov    %rax,%rdi
    6611:	e8 00 00 00 00       	callq  6616 <_ZN6Parser8initSemsEv+0x926>
    6616:	48 89 d8             	mov    %rbx,%rax
    6619:	48 89 c7             	mov    %rax,%rdi
    661c:	e8 00 00 00 00       	callq  6621 <_ZN6Parser8initSemsEv+0x931>
    6621:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    6624:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6628:	48 89 c7             	mov    %rax,%rdi
    662b:	e8 00 00 00 00       	callq  6630 <_ZN6Parser8initSemsEv+0x940>
    6630:	48 89 d8             	mov    %rbx,%rax
    6633:	48 89 c7             	mov    %rax,%rdi
    6636:	e8 00 00 00 00       	callq  663b <_ZN6Parser8initSemsEv+0x94b>
    663b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    663e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6642:	48 89 c7             	mov    %rax,%rdi
    6645:	e8 00 00 00 00       	callq  664a <_ZN6Parser8initSemsEv+0x95a>
    664a:	48 89 d8             	mov    %rbx,%rax
    664d:	48 89 c7             	mov    %rax,%rdi
    6650:	e8 00 00 00 00       	callq  6655 <_ZN6Parser8initSemsEv+0x965>
    6655:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    6658:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    665c:	48 89 c7             	mov    %rax,%rdi
    665f:	e8 00 00 00 00       	callq  6664 <_ZN6Parser8initSemsEv+0x974>
    6664:	48 89 d8             	mov    %rbx,%rax
    6667:	48 89 c7             	mov    %rax,%rdi
    666a:	e8 00 00 00 00       	callq  666f <_ZN6Parser8initSemsEv+0x97f>
    666f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    6672:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6676:	48 89 c7             	mov    %rax,%rdi
    6679:	e8 00 00 00 00       	callq  667e <_ZN6Parser8initSemsEv+0x98e>
    667e:	48 89 d8             	mov    %rbx,%rax
    6681:	48 89 c7             	mov    %rax,%rdi
    6684:	e8 00 00 00 00       	callq  6689 <_ZN6Parser8initSemsEv+0x999>
    6689:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    668c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6690:	48 89 c7             	mov    %rax,%rdi
    6693:	e8 00 00 00 00       	callq  6698 <_ZN6Parser8initSemsEv+0x9a8>
    6698:	48 89 d8             	mov    %rbx,%rax
    669b:	48 89 c7             	mov    %rax,%rdi
    669e:	e8 00 00 00 00       	callq  66a3 <_ZN6Parser8initSemsEv+0x9b3>
    66a3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    66a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66aa:	48 89 c7             	mov    %rax,%rdi
    66ad:	e8 00 00 00 00       	callq  66b2 <_ZN6Parser8initSemsEv+0x9c2>
    66b2:	48 89 d8             	mov    %rbx,%rax
    66b5:	48 89 c7             	mov    %rax,%rdi
    66b8:	e8 00 00 00 00       	callq  66bd <_ZN6Parser8initSemsEv+0x9cd>
    66bd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    66c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66c4:	48 89 c7             	mov    %rax,%rdi
    66c7:	e8 00 00 00 00       	callq  66cc <_ZN6Parser8initSemsEv+0x9dc>
    66cc:	48 89 d8             	mov    %rbx,%rax
    66cf:	48 89 c7             	mov    %rax,%rdi
    66d2:	e8 00 00 00 00       	callq  66d7 <_ZN6Parser8initSemsEv+0x9e7>
    66d7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    66da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66de:	48 89 c7             	mov    %rax,%rdi
    66e1:	e8 00 00 00 00       	callq  66e6 <_ZN6Parser8initSemsEv+0x9f6>
    66e6:	48 89 d8             	mov    %rbx,%rax
    66e9:	48 89 c7             	mov    %rax,%rdi
    66ec:	e8 00 00 00 00       	callq  66f1 <_ZN6Parser8initSemsEv+0xa01>
    66f1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    66f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66f8:	48 89 c7             	mov    %rax,%rdi
    66fb:	e8 00 00 00 00       	callq  6700 <_ZN6Parser8initSemsEv+0xa10>
    6700:	48 89 d8             	mov    %rbx,%rax
    6703:	48 89 c7             	mov    %rax,%rdi
    6706:	e8 00 00 00 00       	callq  670b <_ZN6Parser8initSemsEv+0xa1b>
    670b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    670e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6712:	48 89 c7             	mov    %rax,%rdi
    6715:	e8 00 00 00 00       	callq  671a <_ZN6Parser8initSemsEv+0xa2a>
    671a:	48 89 d8             	mov    %rbx,%rax
    671d:	48 89 c7             	mov    %rax,%rdi
    6720:	e8 00 00 00 00       	callq  6725 <_ZN6Parser8initSemsEv+0xa35>
    6725:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    6728:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    672c:	48 89 c7             	mov    %rax,%rdi
    672f:	e8 00 00 00 00       	callq  6734 <_ZN6Parser8initSemsEv+0xa44>
    6734:	48 89 d8             	mov    %rbx,%rax
    6737:	48 89 c7             	mov    %rax,%rdi
    673a:	e8 00 00 00 00       	callq  673f <_ZN6Parser8initSemsEv+0xa4f>
    673f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    6742:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6746:	48 89 c7             	mov    %rax,%rdi
    6749:	e8 00 00 00 00       	callq  674e <_ZN6Parser8initSemsEv+0xa5e>
    674e:	48 89 d8             	mov    %rbx,%rax
    6751:	48 89 c7             	mov    %rax,%rdi
    6754:	e8 00 00 00 00       	callq  6759 <_ZN6Parser8initSemsEv+0xa69>
    6759:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    675c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6760:	48 89 c7             	mov    %rax,%rdi
    6763:	e8 00 00 00 00       	callq  6768 <_ZN6Parser8initSemsEv+0xa78>
    6768:	48 89 d8             	mov    %rbx,%rax
    676b:	48 89 c7             	mov    %rax,%rdi
    676e:	e8 00 00 00 00       	callq  6773 <_ZN6Parser8initSemsEv+0xa83>
    6773:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    6776:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    677a:	48 89 c7             	mov    %rax,%rdi
    677d:	e8 00 00 00 00       	callq  6782 <_ZN6Parser8initSemsEv+0xa92>
    6782:	48 89 d8             	mov    %rbx,%rax
    6785:	48 89 c7             	mov    %rax,%rdi
    6788:	e8 00 00 00 00       	callq  678d <_ZN6Parser8initSemsEv+0xa9d>
    678d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    6790:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6794:	48 89 c7             	mov    %rax,%rdi
    6797:	e8 00 00 00 00       	callq  679c <_ZN6Parser8initSemsEv+0xaac>
    679c:	48 89 d8             	mov    %rbx,%rax
    679f:	48 89 c7             	mov    %rax,%rdi
    67a2:	e8 00 00 00 00       	callq  67a7 <_ZN6Parser8initSemsEv+0xab7>
    67a7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    67aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67ae:	48 89 c7             	mov    %rax,%rdi
    67b1:	e8 00 00 00 00       	callq  67b6 <_ZN6Parser8initSemsEv+0xac6>
    67b6:	48 89 d8             	mov    %rbx,%rax
    67b9:	48 89 c7             	mov    %rax,%rdi
    67bc:	e8 00 00 00 00       	callq  67c1 <_ZN6Parser8initSemsEv+0xad1>
    67c1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    67c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67c8:	48 89 c7             	mov    %rax,%rdi
    67cb:	e8 00 00 00 00       	callq  67d0 <_ZN6Parser8initSemsEv+0xae0>
    67d0:	48 89 d8             	mov    %rbx,%rax
    67d3:	48 89 c7             	mov    %rax,%rdi
    67d6:	e8 00 00 00 00       	callq  67db <_ZN6Parser8initSemsEv+0xaeb>
    67db:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    67de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67e2:	48 89 c7             	mov    %rax,%rdi
    67e5:	e8 00 00 00 00       	callq  67ea <_ZN6Parser8initSemsEv+0xafa>
    67ea:	48 89 d8             	mov    %rbx,%rax
    67ed:	48 89 c7             	mov    %rax,%rdi
    67f0:	e8 00 00 00 00       	callq  67f5 <_ZN6Parser8initSemsEv+0xb05>
    67f5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    67f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67fc:	48 89 c7             	mov    %rax,%rdi
    67ff:	e8 00 00 00 00       	callq  6804 <_ZN6Parser8initSemsEv+0xb14>
    6804:	48 89 d8             	mov    %rbx,%rax
    6807:	48 89 c7             	mov    %rax,%rdi
    680a:	e8 00 00 00 00       	callq  680f <_ZN6Parser8initSemsEv+0xb1f>
    680f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    6812:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6816:	48 89 c7             	mov    %rax,%rdi
    6819:	e8 00 00 00 00       	callq  681e <_ZN6Parser8initSemsEv+0xb2e>
    681e:	48 89 d8             	mov    %rbx,%rax
    6821:	48 89 c7             	mov    %rax,%rdi
    6824:	e8 00 00 00 00       	callq  6829 <_ZN6Parser8initSemsEv+0xb39>

}
    6829:	e8 00 00 00 00       	callq  682e <_ZN6Parser8initSemsEv+0xb3e>
    682e:	48 83 c4 38          	add    $0x38,%rsp
    6832:	5b                   	pop    %rbx
    6833:	5d                   	pop    %rbp
    6834:	c3                   	retq   
    6835:	90                   	nop

0000000000006836 <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    6836:	55                   	push   %rbp
    6837:	48 89 e5             	mov    %rsp,%rbp
    683a:	53                   	push   %rbx
    683b:	48 83 ec 48          	sub    $0x48,%rsp
    683f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6843:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    684a:	00 00 
    684c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6850:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    6852:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6856:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 685d <_ZN6Parser10testCase01Ev+0x27>
    685d:	48 89 c7             	mov    %rax,%rdi
    6860:	e8 00 00 00 00       	callq  6865 <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    6865:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6869:	48 89 c7             	mov    %rax,%rdi
    686c:	e8 00 00 00 00       	callq  6871 <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    6871:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    6875:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6879:	48 89 d6             	mov    %rdx,%rsi
    687c:	48 89 c7             	mov    %rax,%rdi
    687f:	e8 00 00 00 00       	callq  6884 <_ZN6Parser10testCase01Ev+0x4e>
    6884:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6888:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    688c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6890:	48 89 ce             	mov    %rcx,%rsi
    6893:	48 89 c7             	mov    %rax,%rdi
    6896:	e8 00 00 00 00       	callq  689b <_ZN6Parser10testCase01Ev+0x65>
    689b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    689f:	48 89 c7             	mov    %rax,%rdi
    68a2:	e8 00 00 00 00       	callq  68a7 <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68a7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68ab:	48 89 c7             	mov    %rax,%rdi
    68ae:	e8 00 00 00 00       	callq  68b3 <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68b7:	48 89 c7             	mov    %rax,%rdi
    68ba:	e8 00 00 00 00       	callq  68bf <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    68bf:	90                   	nop
    68c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    68c4:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    68cb:	00 00 
    68cd:	74 43                	je     6912 <_ZN6Parser10testCase01Ev+0xdc>
    68cf:	eb 3c                	jmp    690d <_ZN6Parser10testCase01Ev+0xd7>
    68d1:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    68d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68d8:	48 89 c7             	mov    %rax,%rdi
    68db:	e8 00 00 00 00       	callq  68e0 <_ZN6Parser10testCase01Ev+0xaa>
    68e0:	eb 03                	jmp    68e5 <_ZN6Parser10testCase01Ev+0xaf>
    68e2:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68e5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68e9:	48 89 c7             	mov    %rax,%rdi
    68ec:	e8 00 00 00 00       	callq  68f1 <_ZN6Parser10testCase01Ev+0xbb>
    68f1:	eb 03                	jmp    68f6 <_ZN6Parser10testCase01Ev+0xc0>
    68f3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68f6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68fa:	48 89 c7             	mov    %rax,%rdi
    68fd:	e8 00 00 00 00       	callq  6902 <_ZN6Parser10testCase01Ev+0xcc>
    6902:	48 89 d8             	mov    %rbx,%rax
    6905:	48 89 c7             	mov    %rax,%rdi
    6908:	e8 00 00 00 00       	callq  690d <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    690d:	e8 00 00 00 00       	callq  6912 <_ZN6Parser10testCase01Ev+0xdc>
    6912:	48 83 c4 48          	add    $0x48,%rsp
    6916:	5b                   	pop    %rbx
    6917:	5d                   	pop    %rbp
    6918:	c3                   	retq   
    6919:	90                   	nop

000000000000691a <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    691a:	55                   	push   %rbp
    691b:	48 89 e5             	mov    %rsp,%rbp
    691e:	53                   	push   %rbx
    691f:	48 83 ec 48          	sub    $0x48,%rsp
    6923:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6927:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    692e:	00 00 
    6930:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6934:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    6936:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    693a:	48 83 c0 50          	add    $0x50,%rax
    693e:	48 89 c7             	mov    %rax,%rdi
    6941:	e8 00 00 00 00       	callq  6946 <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    6946:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    694a:	48 05 90 00 00 00    	add    $0x90,%rax
    6950:	48 89 c7             	mov    %rax,%rdi
    6953:	e8 00 00 00 00       	callq  6958 <_ZN6Parser8HWStoHexEv+0x3e>
    6958:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    695b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    6962:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    6969:	8b 45 c8             	mov    -0x38(%rbp),%eax
    696c:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    696f:	0f 8d 2f 01 00 00    	jge    6aa4 <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    6975:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6979:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    6980:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6983:	89 c6                	mov    %eax,%esi
    6985:	48 89 d7             	mov    %rdx,%rdi
    6988:	e8 00 00 00 00       	callq  698d <_ZN6Parser8HWStoHexEv+0x73>
    698d:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    6990:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    6994:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6998:	ba 10 00 00 00       	mov    $0x10,%edx
    699d:	89 ce                	mov    %ecx,%esi
    699f:	48 89 c7             	mov    %rax,%rdi
    69a2:	e8 00 00 00 00       	callq  69a7 <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    69a7:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69aa:	83 e0 03             	and    $0x3,%eax
    69ad:	85 c0                	test   %eax,%eax
    69af:	75 17                	jne    69c8 <_ZN6Parser8HWStoHexEv+0xae>
    69b1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69b5:	48 83 c0 50          	add    $0x50,%rax
    69b9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69c0 <_ZN6Parser8HWStoHexEv+0xa6>
    69c0:	48 89 c7             	mov    %rax,%rdi
    69c3:	e8 00 00 00 00       	callq  69c8 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    69c8:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69cb:	83 e0 07             	and    $0x7,%eax
    69ce:	85 c0                	test   %eax,%eax
    69d0:	75 17                	jne    69e9 <_ZN6Parser8HWStoHexEv+0xcf>
    69d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69d6:	48 83 c0 50          	add    $0x50,%rax
    69da:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69e1 <_ZN6Parser8HWStoHexEv+0xc7>
    69e1:	48 89 c7             	mov    %rax,%rdi
    69e4:	e8 00 00 00 00       	callq  69e9 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    69e9:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69ec:	83 e0 0f             	and    $0xf,%eax
    69ef:	85 c0                	test   %eax,%eax
    69f1:	75 17                	jne    6a0a <_ZN6Parser8HWStoHexEv+0xf0>
    69f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69f7:	48 83 c0 50          	add    $0x50,%rax
    69fb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a02 <_ZN6Parser8HWStoHexEv+0xe8>
    6a02:	48 89 c7             	mov    %rax,%rdi
    6a05:	e8 00 00 00 00       	callq  6a0a <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6a0a:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6a0e:	77 17                	ja     6a27 <_ZN6Parser8HWStoHexEv+0x10d>
    6a10:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a14:	48 83 c0 50          	add    $0x50,%rax
    6a18:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a1f <_ZN6Parser8HWStoHexEv+0x105>
    6a1f:	48 89 c7             	mov    %rax,%rdi
    6a22:	e8 00 00 00 00       	callq  6a27 <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6a27:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a2b:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6a2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a36 <_ZN6Parser8HWStoHexEv+0x11c>
    6a36:	48 89 ce             	mov    %rcx,%rsi
    6a39:	48 89 c7             	mov    %rax,%rdi
    6a3c:	e8 00 00 00 00       	callq  6a41 <_ZN6Parser8HWStoHexEv+0x127>
    6a41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a45:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6a49:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a4d:	48 89 c6             	mov    %rax,%rsi
    6a50:	48 89 d7             	mov    %rdx,%rdi
    6a53:	e8 00 00 00 00       	callq  6a58 <_ZN6Parser8HWStoHexEv+0x13e>
    6a58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a5c:	48 89 c7             	mov    %rax,%rdi
    6a5f:	e8 00 00 00 00       	callq  6a64 <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a64:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a68:	48 89 c7             	mov    %rax,%rdi
    6a6b:	e8 00 00 00 00       	callq  6a70 <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6a70:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6a74:	e9 f0 fe ff ff       	jmpq   6969 <_ZN6Parser8HWStoHexEv+0x4f>
    6a79:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6a7c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a80:	48 89 c7             	mov    %rax,%rdi
    6a83:	e8 00 00 00 00       	callq  6a88 <_ZN6Parser8HWStoHexEv+0x16e>
    6a88:	eb 03                	jmp    6a8d <_ZN6Parser8HWStoHexEv+0x173>
    6a8a:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a8d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a91:	48 89 c7             	mov    %rax,%rdi
    6a94:	e8 00 00 00 00       	callq  6a99 <_ZN6Parser8HWStoHexEv+0x17f>
    6a99:	48 89 d8             	mov    %rbx,%rax
    6a9c:	48 89 c7             	mov    %rax,%rdi
    6a9f:	e8 00 00 00 00       	callq  6aa4 <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6aa4:	90                   	nop
    6aa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6aa9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6ab0:	00 00 
    6ab2:	74 05                	je     6ab9 <_ZN6Parser8HWStoHexEv+0x19f>
    6ab4:	e8 00 00 00 00       	callq  6ab9 <_ZN6Parser8HWStoHexEv+0x19f>
    6ab9:	48 83 c4 48          	add    $0x48,%rsp
    6abd:	5b                   	pop    %rbx
    6abe:	5d                   	pop    %rbp
    6abf:	c3                   	retq   

0000000000006ac0 <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6ac0:	55                   	push   %rbp
    6ac1:	48 89 e5             	mov    %rsp,%rbp
    6ac4:	53                   	push   %rbx
    6ac5:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6acc:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6ad3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6ada:	00 00 
    6adc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6ae0:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6ae2:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6ae9:	48 89 c7             	mov    %rax,%rdi
    6aec:	e8 00 00 00 00       	callq  6af1 <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6af1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6af8:	48 89 c7             	mov    %rax,%rdi
    6afb:	e8 00 00 00 00       	callq  6b00 <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6b00:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6b07:	48 89 c7             	mov    %rax,%rdi
    6b0a:	e8 00 00 00 00       	callq  6b0f <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6b0f:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6b16:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6b1d:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6b24:	00 00 

    QStringList hwsModules;
    6b26:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6b2d:	48 89 c7             	mov    %rax,%rdi
    6b30:	e8 00 00 00 00       	callq  6b35 <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6b35:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b3c:	48 05 88 00 00 00    	add    $0x88,%rax
    6b42:	48 89 c7             	mov    %rax,%rdi
    6b45:	e8 00 00 00 00       	callq  6b4a <_ZN6Parser10compileHWSEv+0x8a>
    6b4a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6b51:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b58:	48 05 88 00 00 00    	add    $0x88,%rax
    6b5e:	48 89 c7             	mov    %rax,%rdi
    6b61:	e8 00 00 00 00       	callq  6b66 <_ZN6Parser10compileHWSEv+0xa6>
    6b66:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6b6d:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6b74:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b7b:	48 89 d6             	mov    %rdx,%rsi
    6b7e:	48 89 c7             	mov    %rax,%rdi
    6b81:	e8 00 00 00 00       	callq  6b86 <_ZN6Parser10compileHWSEv+0xc6>
    6b86:	84 c0                	test   %al,%al
    6b88:	0f 84 e6 07 00 00    	je     7374 <_ZN6Parser10compileHWSEv+0x8b4>

        this->hwSequenceCompiled.append(blockCounter);
    6b8e:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6b95:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6b9c:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6ba3:	89 c6                	mov    %eax,%esi
    6ba5:	48 89 d7             	mov    %rdx,%rdi
    6ba8:	e8 00 00 00 00       	callq  6bad <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6bad:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6bb4:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bbb:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6bc2:	89 c6                	mov    %eax,%esi
    6bc4:	48 89 d7             	mov    %rdx,%rdi
    6bc7:	e8 00 00 00 00       	callq  6bcc <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6bcc:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bd3:	48 89 c7             	mov    %rax,%rdi
    6bd6:	e8 00 00 00 00       	callq  6bdb <_ZN6Parser10compileHWSEv+0x11b>
    6bdb:	48 89 c2             	mov    %rax,%rdx
    6bde:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6be5:	48 89 d6             	mov    %rdx,%rsi
    6be8:	48 89 c7             	mov    %rax,%rdi
    6beb:	e8 00 00 00 00       	callq  6bf0 <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6bf0:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bf7:	48 89 c7             	mov    %rax,%rdi
    6bfa:	e8 00 00 00 00       	callq  6bff <_ZN6Parser10compileHWSEv+0x13f>
    6bff:	48 89 c2             	mov    %rax,%rdx
    6c02:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6c09:	48 89 d6             	mov    %rdx,%rsi
    6c0c:	48 89 c7             	mov    %rax,%rdi
    6c0f:	e8 00 00 00 00       	callq  6c14 <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6c14:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6c1b:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6c1d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c24:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6c28:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c2f:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6c36:	48 89 ce             	mov    %rcx,%rsi
    6c39:	48 89 c7             	mov    %rax,%rdi
    6c3c:	e8 00 00 00 00       	callq  6c41 <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6c41:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6c48:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c4f:	ba 10 00 00 00       	mov    $0x10,%edx
    6c54:	48 89 ce             	mov    %rcx,%rsi
    6c57:	48 89 c7             	mov    %rax,%rdi
    6c5a:	e8 00 00 00 00       	callq  6c5f <_ZN6Parser10compileHWSEv+0x19f>
    6c5f:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6c66:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c6d:	0f be c0             	movsbl %al,%eax
    6c70:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c77:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6c7e:	89 c6                	mov    %eax,%esi
    6c80:	48 89 d7             	mov    %rdx,%rdi
    6c83:	e8 00 00 00 00       	callq  6c88 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6c88:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c8f:	66 c1 e8 08          	shr    $0x8,%ax
    6c93:	0f be c0             	movsbl %al,%eax
    6c96:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c9d:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6ca4:	89 c6                	mov    %eax,%esi
    6ca6:	48 89 d7             	mov    %rdx,%rdi
    6ca9:	e8 00 00 00 00       	callq  6cae <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6cae:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cb5:	48 05 90 00 00 00    	add    $0x90,%rax
    6cbb:	48 89 c7             	mov    %rax,%rdi
    6cbe:	e8 00 00 00 00       	callq  6cc3 <_ZN6Parser10compileHWSEv+0x203>
    6cc3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6cc9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cd0:	48 05 90 00 00 00    	add    $0x90,%rax
    6cd6:	48 89 c7             	mov    %rax,%rdi
    6cd9:	e8 00 00 00 00       	callq  6cde <_ZN6Parser10compileHWSEv+0x21e>
    6cde:	83 c0 02             	add    $0x2,%eax
    6ce1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6ce7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cee:	48 05 90 00 00 00    	add    $0x90,%rax
    6cf4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6cfb <_ZN6Parser10compileHWSEv+0x23b>
    6cfb:	48 89 c7             	mov    %rax,%rdi
    6cfe:	e8 00 00 00 00       	callq  6d03 <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6d03:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6d0a:	48 89 c7             	mov    %rax,%rdi
    6d0d:	e8 00 00 00 00       	callq  6d12 <_ZN6Parser10compileHWSEv+0x252>
    6d12:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6d18:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d1c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d23 <_ZN6Parser10compileHWSEv+0x263>
    6d23:	48 89 c7             	mov    %rax,%rdi
    6d26:	e8 00 00 00 00       	callq  6d2b <_ZN6Parser10compileHWSEv+0x26b>
    6d2b:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6d2f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6d36:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d3b:	ba 01 00 00 00       	mov    $0x1,%edx
    6d40:	48 89 c7             	mov    %rax,%rdi
    6d43:	e8 00 00 00 00       	callq  6d48 <_ZN6Parser10compileHWSEv+0x288>
    6d48:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d4c:	48 89 c7             	mov    %rax,%rdi
    6d4f:	e8 00 00 00 00       	callq  6d54 <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6d54:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d5f <_ZN6Parser10compileHWSEv+0x29f>
    6d5f:	48 89 c7             	mov    %rax,%rdi
    6d62:	e8 00 00 00 00       	callq  6d67 <_ZN6Parser10compileHWSEv+0x2a7>
    6d67:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6d6b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d72:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d77:	ba 01 00 00 00       	mov    $0x1,%edx
    6d7c:	48 89 c7             	mov    %rax,%rdi
    6d7f:	e8 00 00 00 00       	callq  6d84 <_ZN6Parser10compileHWSEv+0x2c4>
    6d84:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d88:	48 89 c7             	mov    %rax,%rdi
    6d8b:	e8 00 00 00 00       	callq  6d90 <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6d90:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6d97:	48 89 c7             	mov    %rax,%rdi
    6d9a:	e8 00 00 00 00       	callq  6d9f <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6d9f:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6da6:	00 00 00 
    6da9:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6daf:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6db5:	0f 8d 65 04 00 00    	jge    7220 <_ZN6Parser10compileHWSEv+0x760>
            line = content.at(i);
    6dbb:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6dc1:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6dc8:	89 d6                	mov    %edx,%esi
    6dca:	48 89 c7             	mov    %rax,%rdi
    6dcd:	e8 00 00 00 00       	callq  6dd2 <_ZN6Parser10compileHWSEv+0x312>
    6dd2:	48 89 c2             	mov    %rax,%rdx
    6dd5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6ddc:	48 89 d6             	mov    %rdx,%rsi
    6ddf:	48 89 c7             	mov    %rax,%rdi
    6de2:	e8 00 00 00 00       	callq  6de7 <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6de7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6dee:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6df2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6df9:	48 89 c6             	mov    %rax,%rsi
    6dfc:	48 89 d7             	mov    %rdx,%rdi
    6dff:	e8 00 00 00 00       	callq  6e04 <_ZN6Parser10compileHWSEv+0x344>
            int a = QRAnchor.indexIn(line);
    6e04:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e0b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e12:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e17:	ba 00 00 00 00       	mov    $0x0,%edx
    6e1c:	48 89 c7             	mov    %rax,%rdi
    6e1f:	e8 00 00 00 00       	callq  6e24 <_ZN6Parser10compileHWSEv+0x364>
    6e24:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6e2a:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e31:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e38:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e3d:	ba 00 00 00 00       	mov    $0x0,%edx
    6e42:	48 89 c7             	mov    %rax,%rdi
    6e45:	e8 00 00 00 00       	callq  6e4a <_ZN6Parser10compileHWSEv+0x38a>
    6e4a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6e50:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e54:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6e5b:	48 89 d6             	mov    %rdx,%rsi
    6e5e:	48 89 c7             	mov    %rax,%rdi
    6e61:	e8 00 00 00 00       	callq  6e66 <_ZN6Parser10compileHWSEv+0x3a6>
            QStringList definitions  = QRDefinition.capturedTexts();
    6e66:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e6a:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6e71:	48 89 d6             	mov    %rdx,%rsi
    6e74:	48 89 c7             	mov    %rax,%rdi
    6e77:	e8 00 00 00 00       	callq  6e7c <_ZN6Parser10compileHWSEv+0x3bc>

            if(a>0){
    6e7c:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6e83:	0f 8e 3e 01 00 00    	jle    6fc7 <_ZN6Parser10compileHWSEv+0x507>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6e89:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6e90:	83 c0 01             	add    $0x1,%eax
    6e93:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6e9a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6e9e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ea5 <_ZN6Parser10compileHWSEv+0x3e5>
    6ea5:	48 89 c7             	mov    %rax,%rdi
    6ea8:	e8 00 00 00 00       	callq  6ead <_ZN6Parser10compileHWSEv+0x3ed>
    6ead:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6eb4:	48 8d 50 68          	lea    0x68(%rax),%rdx
    6eb8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ebc:	48 89 c6             	mov    %rax,%rsi
    6ebf:	48 89 d7             	mov    %rdx,%rdi
    6ec2:	e8 00 00 00 00       	callq  6ec7 <_ZN6Parser10compileHWSEv+0x407>
    6ec7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ecb:	48 89 c7             	mov    %rax,%rdi
    6ece:	e8 00 00 00 00       	callq  6ed3 <_ZN6Parser10compileHWSEv+0x413>
                QString anchor = anchors.at(1);
    6ed3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6ed7:	be 01 00 00 00       	mov    $0x1,%esi
    6edc:	48 89 c7             	mov    %rax,%rdi
    6edf:	e8 00 00 00 00       	callq  6ee4 <_ZN6Parser10compileHWSEv+0x424>
    6ee4:	48 89 c2             	mov    %rax,%rdx
    6ee7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6eeb:	48 89 d6             	mov    %rdx,%rsi
    6eee:	48 89 c7             	mov    %rax,%rdi
    6ef1:	e8 00 00 00 00       	callq  6ef6 <_ZN6Parser10compileHWSEv+0x436>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6ef6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6efd:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6f01:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f05:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6f09:	48 89 ce             	mov    %rcx,%rsi
    6f0c:	48 89 c7             	mov    %rax,%rdi
    6f0f:	e8 00 00 00 00       	callq  6f14 <_ZN6Parser10compileHWSEv+0x454>
    6f14:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6f18:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f1c:	ba 10 00 00 00       	mov    $0x10,%edx
    6f21:	48 89 ce             	mov    %rcx,%rsi
    6f24:	48 89 c7             	mov    %rax,%rdi
    6f27:	e8 00 00 00 00       	callq  6f2c <_ZN6Parser10compileHWSEv+0x46c>
    6f2c:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6f33:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f37:	48 89 c7             	mov    %rax,%rdi
    6f3a:	e8 00 00 00 00       	callq  6f3f <_ZN6Parser10compileHWSEv+0x47f>
                this->hwSequenceCompiled.append(255);
    6f3f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f46:	48 05 90 00 00 00    	add    $0x90,%rax
    6f4c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f51:	48 89 c7             	mov    %rax,%rdi
    6f54:	e8 00 00 00 00       	callq  6f59 <_ZN6Parser10compileHWSEv+0x499>
                this->hwSequenceCompiled.append(255);
    6f59:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f60:	48 05 90 00 00 00    	add    $0x90,%rax
    6f66:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f6b:	48 89 c7             	mov    %rax,%rdi
    6f6e:	e8 00 00 00 00       	callq  6f73 <_ZN6Parser10compileHWSEv+0x4b3>
                this->hwSequenceCompiled.append(anchorID%256);
    6f73:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f7a:	0f be c0             	movsbl %al,%eax
    6f7d:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6f84:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6f8b:	89 c6                	mov    %eax,%esi
    6f8d:	48 89 d7             	mov    %rdx,%rdi
    6f90:	e8 00 00 00 00       	callq  6f95 <_ZN6Parser10compileHWSEv+0x4d5>
                this->hwSequenceCompiled.append(anchorID/256);
    6f95:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f9c:	66 c1 e8 08          	shr    $0x8,%ax
    6fa0:	0f be c0             	movsbl %al,%eax
    6fa3:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6faa:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    6fb1:	89 c6                	mov    %eax,%esi
    6fb3:	48 89 d7             	mov    %rdx,%rdi
    6fb6:	e8 00 00 00 00       	callq  6fbb <_ZN6Parser10compileHWSEv+0x4fb>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6fbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbf:	48 89 c7             	mov    %rax,%rdi
    6fc2:	e8 00 00 00 00       	callq  6fc7 <_ZN6Parser10compileHWSEv+0x507>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    6fc7:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6fce:	0f 8e 28 02 00 00    	jle    71fc <_ZN6Parser10compileHWSEv+0x73c>
                CRC16++;
    6fd4:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6fdb:	83 c0 01             	add    $0x1,%eax
    6fde:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    6fe5:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6fec:	83 c0 01             	add    $0x1,%eax
    6fef:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    6ff6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6ffa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7001 <_ZN6Parser10compileHWSEv+0x541>
    7001:	48 89 c7             	mov    %rax,%rdi
    7004:	e8 00 00 00 00       	callq  7009 <_ZN6Parser10compileHWSEv+0x549>
    7009:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7010:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7014:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7018:	48 89 c6             	mov    %rax,%rsi
    701b:	48 89 d7             	mov    %rdx,%rdi
    701e:	e8 00 00 00 00       	callq  7023 <_ZN6Parser10compileHWSEv+0x563>
    7023:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7027:	48 89 c7             	mov    %rax,%rdi
    702a:	e8 00 00 00 00       	callq  702f <_ZN6Parser10compileHWSEv+0x56f>
                QString strModuleID         = definitions.at(1);
    702f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7033:	be 01 00 00 00       	mov    $0x1,%esi
    7038:	48 89 c7             	mov    %rax,%rdi
    703b:	e8 00 00 00 00       	callq  7040 <_ZN6Parser10compileHWSEv+0x580>
    7040:	48 89 c2             	mov    %rax,%rdx
    7043:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7047:	48 89 d6             	mov    %rdx,%rsi
    704a:	48 89 c7             	mov    %rax,%rdi
    704d:	e8 00 00 00 00       	callq  7052 <_ZN6Parser10compileHWSEv+0x592>
                QString strModulePosition   = definitions.at(2);
    7052:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7056:	be 02 00 00 00       	mov    $0x2,%esi
    705b:	48 89 c7             	mov    %rax,%rdi
    705e:	e8 00 00 00 00       	callq  7063 <_ZN6Parser10compileHWSEv+0x5a3>
    7063:	48 89 c2             	mov    %rax,%rdx
    7066:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    706a:	48 89 d6             	mov    %rdx,%rsi
    706d:	48 89 c7             	mov    %rax,%rdi
    7070:	e8 00 00 00 00       	callq  7075 <_ZN6Parser10compileHWSEv+0x5b5>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    7075:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    707c:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7083:	48 8d 48 28          	lea    0x28(%rax),%rcx
    7087:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    708b:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    708f:	48 89 ce             	mov    %rcx,%rsi
    7092:	48 89 c7             	mov    %rax,%rdi
    7095:	e8 00 00 00 00       	callq  709a <_ZN6Parser10compileHWSEv+0x5da>
    709a:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    709e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70a2:	ba 10 00 00 00       	mov    $0x10,%edx
    70a7:	48 89 ce             	mov    %rcx,%rsi
    70aa:	48 89 c7             	mov    %rax,%rdi
    70ad:	e8 00 00 00 00       	callq  70b2 <_ZN6Parser10compileHWSEv+0x5f2>
    70b2:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    70b8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70bc:	48 89 c7             	mov    %rax,%rdi
    70bf:	e8 00 00 00 00       	callq  70c4 <_ZN6Parser10compileHWSEv+0x604>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    70c4:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70c8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70cc:	ba 0a 00 00 00       	mov    $0xa,%edx
    70d1:	48 89 ce             	mov    %rcx,%rsi
    70d4:	48 89 c7             	mov    %rax,%rdi
    70d7:	e8 00 00 00 00       	callq  70dc <_ZN6Parser10compileHWSEv+0x61c>
    70dc:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    70e3:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    70e7:	84 c0                	test   %al,%al
    70e9:	74 6d                	je     7158 <_ZN6Parser10compileHWSEv+0x698>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    70eb:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    70ef:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    70f6:	ba 00 00 00 00       	mov    $0x0,%edx
    70fb:	48 89 ce             	mov    %rcx,%rsi
    70fe:	48 89 c7             	mov    %rax,%rdi
    7101:	e8 00 00 00 00       	callq  7106 <_ZN6Parser10compileHWSEv+0x646>
    7106:	83 f0 01             	xor    $0x1,%eax
    7109:	84 c0                	test   %al,%al
    710b:	74 2a                	je     7137 <_ZN6Parser10compileHWSEv+0x677>
                        hwsModules.append(strModuleID);
    710d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7111:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7118:	48 89 d6             	mov    %rdx,%rsi
    711b:	48 89 c7             	mov    %rax,%rdi
    711e:	e8 00 00 00 00       	callq  7123 <_ZN6Parser10compileHWSEv+0x663>
                        if(hwsModules.size()>254){
    7123:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    712a:	48 89 c7             	mov    %rax,%rdi
    712d:	e8 00 00 00 00       	callq  7132 <_ZN6Parser10compileHWSEv+0x672>
    7132:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    7137:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    713b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7142:	ba 00 00 00 00       	mov    $0x0,%edx
    7147:	48 89 ce             	mov    %rcx,%rsi
    714a:	48 89 c7             	mov    %rax,%rdi
    714d:	e8 00 00 00 00       	callq  7152 <_ZN6Parser10compileHWSEv+0x692>
    7152:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    7158:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    715f:	0f be c0             	movsbl %al,%eax
    7162:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    7169:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7170:	89 c6                	mov    %eax,%esi
    7172:	48 89 d7             	mov    %rdx,%rdi
    7175:	e8 00 00 00 00       	callq  717a <_ZN6Parser10compileHWSEv+0x6ba>
                this->hwSequenceCompiled.append(moduleID);
    717a:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    7181:	0f be c0             	movsbl %al,%eax
    7184:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    718b:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    7192:	89 c6                	mov    %eax,%esi
    7194:	48 89 d7             	mov    %rdx,%rdi
    7197:	e8 00 00 00 00       	callq  719c <_ZN6Parser10compileHWSEv+0x6dc>
                this->hwSequenceCompiled.append(modulePosition%256);
    719c:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71a3:	0f be c0             	movsbl %al,%eax
    71a6:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71ad:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71b4:	89 c6                	mov    %eax,%esi
    71b6:	48 89 d7             	mov    %rdx,%rdi
    71b9:	e8 00 00 00 00       	callq  71be <_ZN6Parser10compileHWSEv+0x6fe>
                this->hwSequenceCompiled.append(modulePosition/256);
    71be:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71c5:	66 c1 e8 08          	shr    $0x8,%ax
    71c9:	0f be c0             	movsbl %al,%eax
    71cc:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71d3:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
    71da:	89 c6                	mov    %eax,%esi
    71dc:	48 89 d7             	mov    %rdx,%rdi
    71df:	e8 00 00 00 00       	callq  71e4 <_ZN6Parser10compileHWSEv+0x724>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    71e4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    71e8:	48 89 c7             	mov    %rax,%rdi
    71eb:	e8 00 00 00 00       	callq  71f0 <_ZN6Parser10compileHWSEv+0x730>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    71f0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    71f4:	48 89 c7             	mov    %rax,%rdi
    71f7:	e8 00 00 00 00       	callq  71fc <_ZN6Parser10compileHWSEv+0x73c>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    71fc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7200:	48 89 c7             	mov    %rax,%rdi
    7203:	e8 00 00 00 00       	callq  7208 <_ZN6Parser10compileHWSEv+0x748>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7208:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    720c:	48 89 c7             	mov    %rax,%rdi
    720f:	e8 00 00 00 00       	callq  7214 <_ZN6Parser10compileHWSEv+0x754>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    7214:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    721b:	e9 89 fb ff ff       	jmpq   6da9 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    7220:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7227:	0f be d8             	movsbl %al,%ebx
    722a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7231:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7238:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    723e:	89 c6                	mov    %eax,%esi
    7240:	48 89 d7             	mov    %rdx,%rdi
    7243:	e8 00 00 00 00       	callq  7248 <_ZN6Parser10compileHWSEv+0x788>
    7248:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    724c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7250:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7254:	89 de                	mov    %ebx,%esi
    7256:	48 89 c7             	mov    %rax,%rdi
    7259:	e8 00 00 00 00       	callq  725e <_ZN6Parser10compileHWSEv+0x79e>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    725e:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7265:	66 c1 e8 08          	shr    $0x8,%ax
    7269:	0f be d8             	movsbl %al,%ebx
    726c:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7272:	8d 50 01             	lea    0x1(%rax),%edx
    7275:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    727c:	48 05 90 00 00 00    	add    $0x90,%rax
    7282:	89 d6                	mov    %edx,%esi
    7284:	48 89 c7             	mov    %rax,%rdi
    7287:	e8 00 00 00 00       	callq  728c <_ZN6Parser10compileHWSEv+0x7cc>
    728c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7290:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7294:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7298:	89 de                	mov    %ebx,%esi
    729a:	48 89 c7             	mov    %rax,%rdi
    729d:	e8 00 00 00 00       	callq  72a2 <_ZN6Parser10compileHWSEv+0x7e2>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    72a2:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72a9:	0f be d8             	movsbl %al,%ebx
    72ac:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72b3:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    72ba:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72c0:	89 c6                	mov    %eax,%esi
    72c2:	48 89 d7             	mov    %rdx,%rdi
    72c5:	e8 00 00 00 00       	callq  72ca <_ZN6Parser10compileHWSEv+0x80a>
    72ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72ce:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72d2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72d6:	89 de                	mov    %ebx,%esi
    72d8:	48 89 c7             	mov    %rax,%rdi
    72db:	e8 00 00 00 00       	callq  72e0 <_ZN6Parser10compileHWSEv+0x820>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    72e0:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72e7:	66 c1 e8 08          	shr    $0x8,%ax
    72eb:	0f be d8             	movsbl %al,%ebx
    72ee:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72f4:	8d 50 01             	lea    0x1(%rax),%edx
    72f7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72fe:	48 05 90 00 00 00    	add    $0x90,%rax
    7304:	89 d6                	mov    %edx,%esi
    7306:	48 89 c7             	mov    %rax,%rdi
    7309:	e8 00 00 00 00       	callq  730e <_ZN6Parser10compileHWSEv+0x84e>
    730e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7312:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7316:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    731a:	89 de                	mov    %ebx,%esi
    731c:	48 89 c7             	mov    %rax,%rdi
    731f:	e8 00 00 00 00       	callq  7324 <_ZN6Parser10compileHWSEv+0x864>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7324:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    732b:	48 89 c7             	mov    %rax,%rdi
    732e:	e8 00 00 00 00       	callq  7333 <_ZN6Parser10compileHWSEv+0x873>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7333:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    733a:	48 89 c7             	mov    %rax,%rdi
    733d:	e8 00 00 00 00       	callq  7342 <_ZN6Parser10compileHWSEv+0x882>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7342:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7349:	48 89 c7             	mov    %rax,%rdi
    734c:	e8 00 00 00 00       	callq  7351 <_ZN6Parser10compileHWSEv+0x891>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7351:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7358:	48 89 c7             	mov    %rax,%rdi
    735b:	e8 00 00 00 00       	callq  7360 <_ZN6Parser10compileHWSEv+0x8a0>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    7360:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    7367:	48 89 c7             	mov    %rax,%rdi
    736a:	e8 00 00 00 00       	callq  736f <_ZN6Parser10compileHWSEv+0x8af>
    736f:	e9 dd f7 ff ff       	jmpq   6b51 <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7374:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    737b:	0f be d8             	movsbl %al,%ebx
    737e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7385:	48 05 90 00 00 00    	add    $0x90,%rax
    738b:	be 04 00 00 00       	mov    $0x4,%esi
    7390:	48 89 c7             	mov    %rax,%rdi
    7393:	e8 00 00 00 00       	callq  7398 <_ZN6Parser10compileHWSEv+0x8d8>
    7398:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    739c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73a0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73a4:	89 de                	mov    %ebx,%esi
    73a6:	48 89 c7             	mov    %rax,%rdi
    73a9:	e8 00 00 00 00       	callq  73ae <_ZN6Parser10compileHWSEv+0x8ee>
    this->hwSequenceCompiled[5] = CRC16/256;
    73ae:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73b5:	66 c1 e8 08          	shr    $0x8,%ax
    73b9:	0f be d8             	movsbl %al,%ebx
    73bc:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73c3:	48 05 90 00 00 00    	add    $0x90,%rax
    73c9:	be 05 00 00 00       	mov    $0x5,%esi
    73ce:	48 89 c7             	mov    %rax,%rdi
    73d1:	e8 00 00 00 00       	callq  73d6 <_ZN6Parser10compileHWSEv+0x916>
    73d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73da:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73e2:	89 de                	mov    %ebx,%esi
    73e4:	48 89 c7             	mov    %rax,%rdi
    73e7:	e8 00 00 00 00       	callq  73ec <_ZN6Parser10compileHWSEv+0x92c>

    HWStoHex();
    73ec:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73f3:	48 89 c7             	mov    %rax,%rdi
    73f6:	e8 00 00 00 00       	callq  73fb <_ZN6Parser10compileHWSEv+0x93b>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    73fb:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7402:	48 89 c7             	mov    %rax,%rdi
    7405:	e8 00 00 00 00       	callq  740a <_ZN6Parser10compileHWSEv+0x94a>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    740a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    7411:	48 89 c7             	mov    %rax,%rdi
    7414:	e8 00 00 00 00       	callq  7419 <_ZN6Parser10compileHWSEv+0x959>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    7419:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    7420:	48 89 c7             	mov    %rax,%rdi
    7423:	e8 00 00 00 00       	callq  7428 <_ZN6Parser10compileHWSEv+0x968>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    7428:	90                   	nop
    7429:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    742d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7434:	00 00 
    7436:	0f 84 8e 01 00 00    	je     75ca <_ZN6Parser10compileHWSEv+0xb0a>
    743c:	e9 84 01 00 00       	jmpq   75c5 <_ZN6Parser10compileHWSEv+0xb05>
    7441:	48 89 c3             	mov    %rax,%rbx
    7444:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7448:	48 89 c7             	mov    %rax,%rdi
    744b:	e8 00 00 00 00       	callq  7450 <_ZN6Parser10compileHWSEv+0x990>
    7450:	e9 1a 01 00 00       	jmpq   756f <_ZN6Parser10compileHWSEv+0xaaf>
    7455:	48 89 c3             	mov    %rax,%rbx
    7458:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    745f:	48 89 c7             	mov    %rax,%rdi
    7462:	e8 00 00 00 00       	callq  7467 <_ZN6Parser10compileHWSEv+0x9a7>
    7467:	e9 03 01 00 00       	jmpq   756f <_ZN6Parser10compileHWSEv+0xaaf>
    746c:	48 89 c3             	mov    %rax,%rbx
    746f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7473:	48 89 c7             	mov    %rax,%rdi
    7476:	e8 00 00 00 00       	callq  747b <_ZN6Parser10compileHWSEv+0x9bb>
    747b:	e9 db 00 00 00       	jmpq   755b <_ZN6Parser10compileHWSEv+0xa9b>
    7480:	48 89 c3             	mov    %rax,%rbx
    7483:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    748a:	48 89 c7             	mov    %rax,%rdi
    748d:	e8 00 00 00 00       	callq  7492 <_ZN6Parser10compileHWSEv+0x9d2>
    7492:	e9 c4 00 00 00       	jmpq   755b <_ZN6Parser10compileHWSEv+0xa9b>
    7497:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    749a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    749e:	48 89 c7             	mov    %rax,%rdi
    74a1:	e8 00 00 00 00       	callq  74a6 <_ZN6Parser10compileHWSEv+0x9e6>
    74a6:	eb 69                	jmp    7511 <_ZN6Parser10compileHWSEv+0xa51>
    74a8:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    74ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    74af:	48 89 c7             	mov    %rax,%rdi
    74b2:	e8 00 00 00 00       	callq  74b7 <_ZN6Parser10compileHWSEv+0x9f7>
    74b7:	eb 03                	jmp    74bc <_ZN6Parser10compileHWSEv+0x9fc>
    74b9:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    74bc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74c0:	48 89 c7             	mov    %rax,%rdi
    74c3:	e8 00 00 00 00       	callq  74c8 <_ZN6Parser10compileHWSEv+0xa08>
    74c8:	eb 47                	jmp    7511 <_ZN6Parser10compileHWSEv+0xa51>
    74ca:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    74cd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74d1:	48 89 c7             	mov    %rax,%rdi
    74d4:	e8 00 00 00 00       	callq  74d9 <_ZN6Parser10compileHWSEv+0xa19>
    74d9:	eb 36                	jmp    7511 <_ZN6Parser10compileHWSEv+0xa51>
    74db:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    74de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74e2:	48 89 c7             	mov    %rax,%rdi
    74e5:	e8 00 00 00 00       	callq  74ea <_ZN6Parser10compileHWSEv+0xa2a>
    74ea:	eb 03                	jmp    74ef <_ZN6Parser10compileHWSEv+0xa2f>
    74ec:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    74ef:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74f3:	48 89 c7             	mov    %rax,%rdi
    74f6:	e8 00 00 00 00       	callq  74fb <_ZN6Parser10compileHWSEv+0xa3b>
    74fb:	eb 03                	jmp    7500 <_ZN6Parser10compileHWSEv+0xa40>
    74fd:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    7500:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7504:	48 89 c7             	mov    %rax,%rdi
    7507:	e8 00 00 00 00       	callq  750c <_ZN6Parser10compileHWSEv+0xa4c>
    750c:	eb 03                	jmp    7511 <_ZN6Parser10compileHWSEv+0xa51>
    750e:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    7511:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7515:	48 89 c7             	mov    %rax,%rdi
    7518:	e8 00 00 00 00       	callq  751d <_ZN6Parser10compileHWSEv+0xa5d>
    751d:	eb 03                	jmp    7522 <_ZN6Parser10compileHWSEv+0xa62>
    751f:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7522:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7526:	48 89 c7             	mov    %rax,%rdi
    7529:	e8 00 00 00 00       	callq  752e <_ZN6Parser10compileHWSEv+0xa6e>
    752e:	eb 03                	jmp    7533 <_ZN6Parser10compileHWSEv+0xa73>
    7530:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7533:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    753a:	48 89 c7             	mov    %rax,%rdi
    753d:	e8 00 00 00 00       	callq  7542 <_ZN6Parser10compileHWSEv+0xa82>
    7542:	eb 03                	jmp    7547 <_ZN6Parser10compileHWSEv+0xa87>
    7544:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7547:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    754e:	48 89 c7             	mov    %rax,%rdi
    7551:	e8 00 00 00 00       	callq  7556 <_ZN6Parser10compileHWSEv+0xa96>
    7556:	eb 03                	jmp    755b <_ZN6Parser10compileHWSEv+0xa9b>
    7558:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    755b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7562:	48 89 c7             	mov    %rax,%rdi
    7565:	e8 00 00 00 00       	callq  756a <_ZN6Parser10compileHWSEv+0xaaa>
    756a:	eb 03                	jmp    756f <_ZN6Parser10compileHWSEv+0xaaf>
    756c:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    756f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7576:	48 89 c7             	mov    %rax,%rdi
    7579:	e8 00 00 00 00       	callq  757e <_ZN6Parser10compileHWSEv+0xabe>
    757e:	eb 03                	jmp    7583 <_ZN6Parser10compileHWSEv+0xac3>
    7580:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    7583:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    758a:	48 89 c7             	mov    %rax,%rdi
    758d:	e8 00 00 00 00       	callq  7592 <_ZN6Parser10compileHWSEv+0xad2>
    7592:	eb 03                	jmp    7597 <_ZN6Parser10compileHWSEv+0xad7>
    7594:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    7597:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    759e:	48 89 c7             	mov    %rax,%rdi
    75a1:	e8 00 00 00 00       	callq  75a6 <_ZN6Parser10compileHWSEv+0xae6>
    75a6:	eb 03                	jmp    75ab <_ZN6Parser10compileHWSEv+0xaeb>
    75a8:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    75ab:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    75b2:	48 89 c7             	mov    %rax,%rdi
    75b5:	e8 00 00 00 00       	callq  75ba <_ZN6Parser10compileHWSEv+0xafa>
    75ba:	48 89 d8             	mov    %rbx,%rax
    75bd:	48 89 c7             	mov    %rax,%rdi
    75c0:	e8 00 00 00 00       	callq  75c5 <_ZN6Parser10compileHWSEv+0xb05>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    75c5:	e8 00 00 00 00       	callq  75ca <_ZN6Parser10compileHWSEv+0xb0a>
    75ca:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    75d1:	5b                   	pop    %rbx
    75d2:	5d                   	pop    %rbp
    75d3:	c3                   	retq   

00000000000075d4 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    75d4:	55                   	push   %rbp
    75d5:	48 89 e5             	mov    %rsp,%rbp
    75d8:	53                   	push   %rbx
    75d9:	48 83 ec 58          	sub    $0x58,%rsp
    75dd:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    75e1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    75e8:	00 00 
    75ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    75ee:	31 c0                	xor    %eax,%eax

    int i = 0;
    75f0:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    75f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    75fb:	48 83 c0 78          	add    $0x78,%rax
    75ff:	48 89 c7             	mov    %rax,%rdi
    7602:	e8 00 00 00 00       	callq  7607 <_ZN6Parser9selectHWSEv+0x33>
    7607:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    760a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    760e:	48 89 c7             	mov    %rax,%rdi
    7611:	e8 00 00 00 00       	callq  7616 <_ZN6Parser9selectHWSEv+0x42>
    QString firstLine;
    7616:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    761a:	48 89 c7             	mov    %rax,%rdi
    761d:	e8 00 00 00 00       	callq  7622 <_ZN6Parser9selectHWSEv+0x4e>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    7622:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7626:	48 83 c0 78          	add    $0x78,%rax
    762a:	48 89 c7             	mov    %rax,%rdi
    762d:	e8 00 00 00 00       	callq  7632 <_ZN6Parser9selectHWSEv+0x5e>
    7632:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7636:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    763a:	48 83 c0 78          	add    $0x78,%rax
    763e:	48 89 c7             	mov    %rax,%rdi
    7641:	e8 00 00 00 00       	callq  7646 <_ZN6Parser9selectHWSEv+0x72>
    7646:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    764a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    764e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7652:	48 89 d6             	mov    %rdx,%rsi
    7655:	48 89 c7             	mov    %rax,%rdi
    7658:	e8 00 00 00 00       	callq  765d <_ZN6Parser9selectHWSEv+0x89>
    765d:	84 c0                	test   %al,%al
    765f:	74 50                	je     76b1 <_ZN6Parser9selectHWSEv+0xdd>
        firstLine = it.value().at(0);
    7661:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7665:	48 89 c7             	mov    %rax,%rdi
    7668:	e8 00 00 00 00       	callq  766d <_ZN6Parser9selectHWSEv+0x99>
    766d:	be 00 00 00 00       	mov    $0x0,%esi
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 00 00 00 00       	callq  767a <_ZN6Parser9selectHWSEv+0xa6>
    767a:	48 89 c2             	mov    %rax,%rdx
    767d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7681:	48 89 d6             	mov    %rdx,%rsi
    7684:	48 89 c7             	mov    %rax,%rdi
    7687:	e8 00 00 00 00       	callq  768c <_ZN6Parser9selectHWSEv+0xb8>
        this->strings.append(firstLine);
    768c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7690:	48 8d 50 68          	lea    0x68(%rax),%rdx
    7694:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7698:	48 89 c6             	mov    %rax,%rsi
    769b:	48 89 d7             	mov    %rdx,%rdi
    769e:	e8 00 00 00 00       	callq  76a3 <_ZN6Parser9selectHWSEv+0xcf>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    76a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76a7:	48 89 c7             	mov    %rax,%rdi
    76aa:	e8 00 00 00 00       	callq  76af <_ZN6Parser9selectHWSEv+0xdb>
    76af:	eb 85                	jmp    7636 <_ZN6Parser9selectHWSEv+0x62>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    76b1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    76b8:	8b 45 b8             	mov    -0x48(%rbp),%eax
    76bb:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    76be:	7d 06                	jge    76c6 <_ZN6Parser9selectHWSEv+0xf2>
    76c0:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    76c4:	eb f2                	jmp    76b8 <_ZN6Parser9selectHWSEv+0xe4>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76c6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76ca:	48 89 c7             	mov    %rax,%rdi
    76cd:	e8 00 00 00 00       	callq  76d2 <_ZN6Parser9selectHWSEv+0xfe>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76d2:	90                   	nop
    76d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    76d7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    76de:	00 00 
    76e0:	74 21                	je     7703 <_ZN6Parser9selectHWSEv+0x12f>
    76e2:	eb 1a                	jmp    76fe <_ZN6Parser9selectHWSEv+0x12a>
    76e4:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76e7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76eb:	48 89 c7             	mov    %rax,%rdi
    76ee:	e8 00 00 00 00       	callq  76f3 <_ZN6Parser9selectHWSEv+0x11f>
    76f3:	48 89 d8             	mov    %rbx,%rax
    76f6:	48 89 c7             	mov    %rax,%rdi
    76f9:	e8 00 00 00 00       	callq  76fe <_ZN6Parser9selectHWSEv+0x12a>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76fe:	e8 00 00 00 00       	callq  7703 <_ZN6Parser9selectHWSEv+0x12f>
    7703:	48 83 c4 58          	add    $0x58,%rsp
    7707:	5b                   	pop    %rbx
    7708:	5d                   	pop    %rbp
    7709:	c3                   	retq   

000000000000770a <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    770a:	55                   	push   %rbp
    770b:	48 89 e5             	mov    %rsp,%rbp
    770e:	53                   	push   %rbx
    770f:	48 83 ec 68          	sub    $0x68,%rsp
    7713:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    7717:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    771e:	00 00 
    7720:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7724:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    7726:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    772a:	48 89 c7             	mov    %rax,%rdi
    772d:	e8 00 00 00 00       	callq  7732 <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7732:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7736:	48 8d 50 58          	lea    0x58(%rax),%rdx
    773a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    773e:	48 89 d6             	mov    %rdx,%rsi
    7741:	48 89 c7             	mov    %rax,%rdi
    7744:	e8 00 00 00 00       	callq  7749 <_ZN6Parser12loadIncludesEv+0x3f>
    7749:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    774d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7751:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7755:	48 8d 50 58          	lea    0x58(%rax),%rdx
    7759:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    775d:	48 89 d6             	mov    %rdx,%rsi
    7760:	48 89 c7             	mov    %rax,%rdi
    7763:	e8 00 00 00 00       	callq  7768 <_ZN6Parser12loadIncludesEv+0x5e>
    7768:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    776c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7770:	48 89 d6             	mov    %rdx,%rsi
    7773:	48 89 c7             	mov    %rax,%rdi
    7776:	e8 00 00 00 00       	callq  777b <_ZN6Parser12loadIncludesEv+0x71>
    777b:	84 c0                	test   %al,%al
    777d:	0f 84 dc 00 00 00    	je     785f <_ZN6Parser12loadIncludesEv+0x155>
        QFile hFile(*it);
    7783:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7787:	48 89 c7             	mov    %rax,%rdi
    778a:	e8 00 00 00 00       	callq  778f <_ZN6Parser12loadIncludesEv+0x85>
    778f:	48 89 c2             	mov    %rax,%rdx
    7792:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7796:	48 89 d6             	mov    %rdx,%rsi
    7799:	48 89 c7             	mov    %rax,%rdi
    779c:	e8 00 00 00 00       	callq  77a1 <_ZN6Parser12loadIncludesEv+0x97>
        if (hFile.open(QIODevice::ReadOnly))
    77a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77a5:	be 01 00 00 00       	mov    $0x1,%esi
    77aa:	48 89 c7             	mov    %rax,%rdi
    77ad:	e8 00 00 00 00       	callq  77b2 <_ZN6Parser12loadIncludesEv+0xa8>
    77b2:	8b 55 d0             	mov    -0x30(%rbp),%edx
    77b5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77b9:	89 d6                	mov    %edx,%esi
    77bb:	48 89 c7             	mov    %rax,%rdi
    77be:	e8 00 00 00 00       	callq  77c3 <_ZN6Parser12loadIncludesEv+0xb9>
    77c3:	84 c0                	test   %al,%al
    77c5:	74 7b                	je     7842 <_ZN6Parser12loadIncludesEv+0x138>
        {
           QTextStream in(&hFile);
    77c7:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    77cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77cf:	48 89 d6             	mov    %rdx,%rsi
    77d2:	48 89 c7             	mov    %rax,%rdi
    77d5:	e8 00 00 00 00       	callq  77da <_ZN6Parser12loadIncludesEv+0xd0>
           while (!in.atEnd())
    77da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77de:	48 89 c7             	mov    %rax,%rdi
    77e1:	e8 00 00 00 00       	callq  77e6 <_ZN6Parser12loadIncludesEv+0xdc>
    77e6:	83 f0 01             	xor    $0x1,%eax
    77e9:	84 c0                	test   %al,%al
    77eb:	74 3d                	je     782a <_ZN6Parser12loadIncludesEv+0x120>
           {
              QString line = in.readLine();
    77ed:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    77f1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    77f5:	ba 00 00 00 00       	mov    $0x0,%edx
    77fa:	48 89 ce             	mov    %rcx,%rsi
    77fd:	48 89 c7             	mov    %rax,%rdi
    7800:	e8 00 00 00 00       	callq  7805 <_ZN6Parser12loadIncludesEv+0xfb>
              this->includes.append(line);
    7805:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7809:	48 8d 50 60          	lea    0x60(%rax),%rdx
    780d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7811:	48 89 c6             	mov    %rax,%rsi
    7814:	48 89 d7             	mov    %rdx,%rdi
    7817:	e8 00 00 00 00       	callq  781c <_ZN6Parser12loadIncludesEv+0x112>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    781c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7820:	48 89 c7             	mov    %rax,%rdi
    7823:	e8 00 00 00 00       	callq  7828 <_ZN6Parser12loadIncludesEv+0x11e>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    7828:	eb b0                	jmp    77da <_ZN6Parser12loadIncludesEv+0xd0>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    782a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    782e:	48 89 c7             	mov    %rax,%rdi
    7831:	e8 00 00 00 00       	callq  7836 <_ZN6Parser12loadIncludesEv+0x12c>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7836:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    783a:	48 89 c7             	mov    %rax,%rdi
    783d:	e8 00 00 00 00       	callq  7842 <_ZN6Parser12loadIncludesEv+0x138>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7842:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7846:	48 89 c7             	mov    %rax,%rdi
    7849:	e8 00 00 00 00       	callq  784e <_ZN6Parser12loadIncludesEv+0x144>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    784e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7852:	48 89 c7             	mov    %rax,%rdi
    7855:	e8 00 00 00 00       	callq  785a <_ZN6Parser12loadIncludesEv+0x150>
    785a:	e9 f2 fe ff ff       	jmpq   7751 <_ZN6Parser12loadIncludesEv+0x47>
    }

    // Append includes before first line of main script;


    QString included;
    785f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7863:	48 89 c7             	mov    %rax,%rdi
    7866:	e8 00 00 00 00       	callq  786b <_ZN6Parser12loadIncludesEv+0x161>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    786b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    786f:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7873:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7877:	48 89 d6             	mov    %rdx,%rsi
    787a:	48 89 c7             	mov    %rax,%rdi
    787d:	e8 00 00 00 00       	callq  7882 <_ZN6Parser12loadIncludesEv+0x178>
    7882:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7886:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    788a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    788e:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7892:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7896:	48 89 d6             	mov    %rdx,%rsi
    7899:	48 89 c7             	mov    %rax,%rdi
    789c:	e8 00 00 00 00       	callq  78a1 <_ZN6Parser12loadIncludesEv+0x197>
    78a1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    78a5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78a9:	48 89 d6             	mov    %rdx,%rsi
    78ac:	48 89 c7             	mov    %rax,%rdi
    78af:	e8 00 00 00 00       	callq  78b4 <_ZN6Parser12loadIncludesEv+0x1aa>
    78b4:	84 c0                	test   %al,%al
    78b6:	74 2c                	je     78e4 <_ZN6Parser12loadIncludesEv+0x1da>
        included.append(*it);
    78b8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78bc:	48 89 c7             	mov    %rax,%rdi
    78bf:	e8 00 00 00 00       	callq  78c4 <_ZN6Parser12loadIncludesEv+0x1ba>
    78c4:	48 89 c2             	mov    %rax,%rdx
    78c7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78cb:	48 89 d6             	mov    %rdx,%rsi
    78ce:	48 89 c7             	mov    %rax,%rdi
    78d1:	e8 00 00 00 00       	callq  78d6 <_ZN6Parser12loadIncludesEv+0x1cc>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    78d6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78da:	48 89 c7             	mov    %rax,%rdi
    78dd:	e8 00 00 00 00       	callq  78e2 <_ZN6Parser12loadIncludesEv+0x1d8>
    78e2:	eb a6                	jmp    788a <_ZN6Parser12loadIncludesEv+0x180>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    78e4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78e8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    78ec:	48 89 d6             	mov    %rdx,%rsi
    78ef:	48 89 c7             	mov    %rax,%rdi
    78f2:	e8 00 00 00 00       	callq  78f7 <_ZN6Parser12loadIncludesEv+0x1ed>
    }

    // Append includes before first line of main script;


    QString included;
    78f7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    78fb:	48 89 c7             	mov    %rax,%rdi
    78fe:	e8 00 00 00 00       	callq  7903 <_ZN6Parser12loadIncludesEv+0x1f9>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    7903:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7907:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    790e:	00 00 
    7910:	74 5d                	je     796f <_ZN6Parser12loadIncludesEv+0x265>
    7912:	eb 56                	jmp    796a <_ZN6Parser12loadIncludesEv+0x260>
    7914:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7917:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    791b:	48 89 c7             	mov    %rax,%rdi
    791e:	e8 00 00 00 00       	callq  7923 <_ZN6Parser12loadIncludesEv+0x219>
    7923:	eb 03                	jmp    7928 <_ZN6Parser12loadIncludesEv+0x21e>
    7925:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7928:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    792c:	48 89 c7             	mov    %rax,%rdi
    792f:	e8 00 00 00 00       	callq  7934 <_ZN6Parser12loadIncludesEv+0x22a>
    7934:	eb 03                	jmp    7939 <_ZN6Parser12loadIncludesEv+0x22f>
    7936:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7939:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    793d:	48 89 c7             	mov    %rax,%rdi
    7940:	e8 00 00 00 00       	callq  7945 <_ZN6Parser12loadIncludesEv+0x23b>
    7945:	48 89 d8             	mov    %rbx,%rax
    7948:	48 89 c7             	mov    %rax,%rdi
    794b:	e8 00 00 00 00       	callq  7950 <_ZN6Parser12loadIncludesEv+0x246>
    7950:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    7953:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7957:	48 89 c7             	mov    %rax,%rdi
    795a:	e8 00 00 00 00       	callq  795f <_ZN6Parser12loadIncludesEv+0x255>
    795f:	48 89 d8             	mov    %rbx,%rax
    7962:	48 89 c7             	mov    %rax,%rdi
    7965:	e8 00 00 00 00       	callq  796a <_ZN6Parser12loadIncludesEv+0x260>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    796a:	e8 00 00 00 00       	callq  796f <_ZN6Parser12loadIncludesEv+0x265>
    796f:	48 83 c4 68          	add    $0x68,%rsp
    7973:	5b                   	pop    %rbx
    7974:	5d                   	pop    %rbp
    7975:	c3                   	retq   

0000000000007976 <_ZN6Parser13compileModuleE7QString>:

QByteArray Parser::compileModule(QString key){
    7976:	55                   	push   %rbp
    7977:	48 89 e5             	mov    %rsp,%rbp
    797a:	53                   	push   %rbx
    797b:	48 83 ec 48          	sub    $0x48,%rsp
    797f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7983:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7987:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    798b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7992:	00 00 
    7994:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7998:	31 c0                	xor    %eax,%eax
    QStringList M = this->sorted.take(key);
    799a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    799e:	48 8d 48 78          	lea    0x78(%rax),%rcx
    79a2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    79a6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    79aa:	48 89 ce             	mov    %rcx,%rsi
    79ad:	48 89 c7             	mov    %rax,%rdi
    79b0:	e8 00 00 00 00       	callq  79b5 <_ZN6Parser13compileModuleE7QString+0x3f>
    QByteArray result;
    79b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79b9:	48 89 c7             	mov    %rax,%rdi
    79bc:	e8 00 00 00 00       	callq  79c1 <_ZN6Parser13compileModuleE7QString+0x4b>

    QByteArray VARS = compileVariables(&M);
    79c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    79c5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    79c9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    79cd:	48 89 ce             	mov    %rcx,%rsi
    79d0:	48 89 c7             	mov    %rax,%rdi
    79d3:	e8 00 00 00 00       	callq  79d8 <_ZN6Parser13compileModuleE7QString+0x62>
    result.append(VARS);
    79d8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    79dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79e0:	48 89 d6             	mov    %rdx,%rsi
    79e3:	48 89 c7             	mov    %rax,%rdi
    79e6:	e8 00 00 00 00       	callq  79eb <_ZN6Parser13compileModuleE7QString+0x75>

    result.append("0");
    79eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79ef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 79f6 <_ZN6Parser13compileModuleE7QString+0x80>
    79f6:	48 89 c7             	mov    %rax,%rdi
    79f9:	e8 00 00 00 00       	callq  79fe <_ZN6Parser13compileModuleE7QString+0x88>
    return result;
    79fe:	90                   	nop

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    79ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a03:	48 89 c7             	mov    %rax,%rdi
    7a06:	e8 00 00 00 00       	callq  7a0b <_ZN6Parser13compileModuleE7QString+0x95>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a0b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a0f:	48 89 c7             	mov    %rax,%rdi
    7a12:	e8 00 00 00 00       	callq  7a17 <_ZN6Parser13compileModuleE7QString+0xa1>

    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
    7a17:	90                   	nop
}
    7a18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a1c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7a20:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7a27:	00 00 
    7a29:	74 3e                	je     7a69 <_ZN6Parser13compileModuleE7QString+0xf3>
    7a2b:	eb 37                	jmp    7a64 <_ZN6Parser13compileModuleE7QString+0xee>
    7a2d:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    QByteArray result;

    QByteArray VARS = compileVariables(&M);
    7a30:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a34:	48 89 c7             	mov    %rax,%rdi
    7a37:	e8 00 00 00 00       	callq  7a3c <_ZN6Parser13compileModuleE7QString+0xc6>
    7a3c:	eb 03                	jmp    7a41 <_ZN6Parser13compileModuleE7QString+0xcb>
    7a3e:	48 89 c3             	mov    %rax,%rbx
    7a41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a45:	48 89 c7             	mov    %rax,%rdi
    7a48:	e8 00 00 00 00       	callq  7a4d <_ZN6Parser13compileModuleE7QString+0xd7>
    }
    this->script.prepend(included); // nice.
}

QByteArray Parser::compileModule(QString key){
    QStringList M = this->sorted.take(key);
    7a4d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a51:	48 89 c7             	mov    %rax,%rdi
    7a54:	e8 00 00 00 00       	callq  7a59 <_ZN6Parser13compileModuleE7QString+0xe3>
    7a59:	48 89 d8             	mov    %rbx,%rax
    7a5c:	48 89 c7             	mov    %rax,%rdi
    7a5f:	e8 00 00 00 00       	callq  7a64 <_ZN6Parser13compileModuleE7QString+0xee>
    QByteArray VARS = compileVariables(&M);
    result.append(VARS);

    result.append("0");
    return result;
}
    7a64:	e8 00 00 00 00       	callq  7a69 <_ZN6Parser13compileModuleE7QString+0xf3>
    7a69:	48 83 c4 48          	add    $0x48,%rsp
    7a6d:	5b                   	pop    %rbx
    7a6e:	5d                   	pop    %rbp
    7a6f:	c3                   	retq   

0000000000007a70 <_ZN6Parser7compileEv>:

int Parser::compile(){
    7a70:	55                   	push   %rbp
    7a71:	48 89 e5             	mov    %rsp,%rbp
    7a74:	53                   	push   %rbx
    7a75:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    7a7c:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    7a83:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7a8a:	00 00 
    7a8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7a90:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7a92:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7a96:	48 89 c7             	mov    %rax,%rdi
    7a99:	e8 00 00 00 00       	callq  7a9e <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    7a9e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7aa5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7aa9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7ab0:	48 89 c7             	mov    %rax,%rdi
    7ab3:	e8 00 00 00 00       	callq  7ab8 <_ZN6Parser7compileEv+0x48>
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7ab8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7abf:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7ac3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7aca:	48 89 d6             	mov    %rdx,%rsi
    7acd:	48 89 c7             	mov    %rax,%rdi
    7ad0:	e8 00 00 00 00       	callq  7ad5 <_ZN6Parser7compileEv+0x65>
    7ad5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7adc:	48 8d 78 78          	lea    0x78(%rax),%rdi
    7ae0:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7ae7:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    7aee:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7af5:	48 89 d1             	mov    %rdx,%rcx
    7af8:	48 89 fa             	mov    %rdi,%rdx
    7afb:	48 89 c7             	mov    %rax,%rdi
    7afe:	e8 00 00 00 00       	callq  7b03 <_ZN6Parser7compileEv+0x93>
    7b03:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7b0a:	48 89 c7             	mov    %rax,%rdi
    7b0d:	e8 00 00 00 00       	callq  7b12 <_ZN6Parser7compileEv+0xa2>

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7b12:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b19:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7b1d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7b24:	48 89 d6             	mov    %rdx,%rsi
    7b27:	48 89 c7             	mov    %rax,%rdi
    7b2a:	e8 00 00 00 00       	callq  7b2f <_ZN6Parser7compileEv+0xbf>
    7b2f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b36:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    7b3d:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
    7b44:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    7b4b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b52:	48 89 d1             	mov    %rdx,%rcx
    7b55:	48 89 fa             	mov    %rdi,%rdx
    7b58:	48 89 c7             	mov    %rax,%rdi
    7b5b:	e8 00 00 00 00       	callq  7b60 <_ZN6Parser7compileEv+0xf0>
    7b60:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7b67:	48 89 c7             	mov    %rax,%rdi
    7b6a:	e8 00 00 00 00       	callq  7b6f <_ZN6Parser7compileEv+0xff>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7b6f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7b76:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7b7d <_ZN6Parser7compileEv+0x10d>
    7b7d:	48 89 c7             	mov    %rax,%rdi
    7b80:	e8 00 00 00 00       	callq  7b85 <_ZN6Parser7compileEv+0x115>
    7b85:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7b8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7b93:	48 89 d6             	mov    %rdx,%rsi
    7b96:	48 89 c7             	mov    %rax,%rdi
    7b99:	e8 00 00 00 00       	callq  7b9e <_ZN6Parser7compileEv+0x12e>
    7b9e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7ba5:	48 89 c7             	mov    %rax,%rdi
    7ba8:	e8 00 00 00 00       	callq  7bad <_ZN6Parser7compileEv+0x13d>
    this->addIncludeFile("project1.h");
    7bad:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7bb4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7bbb <_ZN6Parser7compileEv+0x14b>
    7bbb:	48 89 c7             	mov    %rax,%rdi
    7bbe:	e8 00 00 00 00       	callq  7bc3 <_ZN6Parser7compileEv+0x153>
    7bc3:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7bca:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7bd1:	48 89 d6             	mov    %rdx,%rsi
    7bd4:	48 89 c7             	mov    %rax,%rdi
    7bd7:	e8 00 00 00 00       	callq  7bdc <_ZN6Parser7compileEv+0x16c>
    7bdc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7be3:	48 89 c7             	mov    %rax,%rdi
    7be6:	e8 00 00 00 00       	callq  7beb <_ZN6Parser7compileEv+0x17b>
    this->addIncludeFile("kpa_config.h");
    7beb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7bef:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7bf6 <_ZN6Parser7compileEv+0x186>
    7bf6:	48 89 c7             	mov    %rax,%rdi
    7bf9:	e8 00 00 00 00       	callq  7bfe <_ZN6Parser7compileEv+0x18e>
    7bfe:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7c02:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c09:	48 89 d6             	mov    %rdx,%rsi
    7c0c:	48 89 c7             	mov    %rax,%rdi
    7c0f:	e8 00 00 00 00       	callq  7c14 <_ZN6Parser7compileEv+0x1a4>
    7c14:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7c18:	48 89 c7             	mov    %rax,%rdi
    7c1b:	e8 00 00 00 00       	callq  7c20 <_ZN6Parser7compileEv+0x1b0>
    this->addIncludeFile("names.h");
    7c20:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c24:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7c2b <_ZN6Parser7compileEv+0x1bb>
    7c2b:	48 89 c7             	mov    %rax,%rdi
    7c2e:	e8 00 00 00 00       	callq  7c33 <_ZN6Parser7compileEv+0x1c3>
    7c33:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7c37:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c3e:	48 89 d6             	mov    %rdx,%rsi
    7c41:	48 89 c7             	mov    %rax,%rdi
    7c44:	e8 00 00 00 00       	callq  7c49 <_ZN6Parser7compileEv+0x1d9>
    7c49:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c4d:	48 89 c7             	mov    %rax,%rdi
    7c50:	e8 00 00 00 00       	callq  7c55 <_ZN6Parser7compileEv+0x1e5>
    int lIf = this->loadIncludes();
    7c55:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c5c:	48 89 c7             	mov    %rax,%rdi
    7c5f:	e8 00 00 00 00       	callq  7c64 <_ZN6Parser7compileEv+0x1f4>
    7c64:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7c6a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7c6e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c75:	48 89 d6             	mov    %rdx,%rsi
    7c78:	48 89 c7             	mov    %rax,%rdi
    7c7b:	e8 00 00 00 00       	callq  7c80 <_ZN6Parser7compileEv+0x210>
    7c80:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7c86:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7c8a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7c91:	48 89 d6             	mov    %rdx,%rsi
    7c94:	48 89 c7             	mov    %rax,%rdi
    7c97:	e8 00 00 00 00       	callq  7c9c <_ZN6Parser7compileEv+0x22c>
    7c9c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)


    compileHWS();
    7ca2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7ca9:	48 89 c7             	mov    %rax,%rdi
    7cac:	e8 00 00 00 00       	callq  7cb1 <_ZN6Parser7compileEv+0x241>

    QByteArray firstGrape = compileModule("KPA_IP3");
    7cb1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7cb5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7cbc <_ZN6Parser7compileEv+0x24c>
    7cbc:	48 89 c7             	mov    %rax,%rdi
    7cbf:	e8 00 00 00 00       	callq  7cc4 <_ZN6Parser7compileEv+0x254>
    7cc4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7cc8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7ccc:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
    7cd3:	48 89 ce             	mov    %rcx,%rsi
    7cd6:	48 89 c7             	mov    %rax,%rdi
    7cd9:	e8 00 00 00 00       	callq  7cde <_ZN6Parser7compileEv+0x26e>
    7cde:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7ce2:	48 89 c7             	mov    %rax,%rdi
    7ce5:	e8 00 00 00 00       	callq  7cea <_ZN6Parser7compileEv+0x27a>
    7cea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7cee:	48 89 c7             	mov    %rax,%rdi
    7cf1:	e8 00 00 00 00       	callq  7cf6 <_ZN6Parser7compileEv+0x286>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7cf6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7cfa:	48 89 c7             	mov    %rax,%rdi
    7cfd:	e8 00 00 00 00       	callq  7d02 <_ZN6Parser7compileEv+0x292>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7d02:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d06:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7d0d:	00 00 
    7d0f:	0f 84 bb 00 00 00    	je     7dd0 <_ZN6Parser7compileEv+0x360>
    7d15:	e9 b1 00 00 00       	jmpq   7dcb <_ZN6Parser7compileEv+0x35b>
    7d1a:	48 89 c3             	mov    %rax,%rbx
    QString *script = &this->script;

    this->init();
    //this->splitBlocks(*script); // temporary off

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7d1d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7d24:	48 89 c7             	mov    %rax,%rdi
    7d27:	e8 00 00 00 00       	callq  7d2c <_ZN6Parser7compileEv+0x2bc>
    7d2c:	e9 83 00 00 00       	jmpq   7db4 <_ZN6Parser7compileEv+0x344>
    7d31:	48 89 c3             	mov    %rax,%rbx

    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7d34:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7d3b:	48 89 c7             	mov    %rax,%rdi
    7d3e:	e8 00 00 00 00       	callq  7d43 <_ZN6Parser7compileEv+0x2d3>
    7d43:	eb 6f                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7d45:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7d48:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7d4f:	48 89 c7             	mov    %rax,%rdi
    7d52:	e8 00 00 00 00       	callq  7d57 <_ZN6Parser7compileEv+0x2e7>
    7d57:	eb 5b                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7d59:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7d5c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7d63:	48 89 c7             	mov    %rax,%rdi
    7d66:	e8 00 00 00 00       	callq  7d6b <_ZN6Parser7compileEv+0x2fb>
    7d6b:	eb 47                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7d6d:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7d70:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7d74:	48 89 c7             	mov    %rax,%rdi
    7d77:	e8 00 00 00 00       	callq  7d7c <_ZN6Parser7compileEv+0x30c>
    7d7c:	eb 36                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7d7e:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7d81:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7d85:	48 89 c7             	mov    %rax,%rdi
    7d88:	e8 00 00 00 00       	callq  7d8d <_ZN6Parser7compileEv+0x31d>
    7d8d:	eb 25                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7d8f:	48 89 c3             	mov    %rax,%rbx
    7d92:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7d96:	48 89 c7             	mov    %rax,%rdi
    7d99:	e8 00 00 00 00       	callq  7d9e <_ZN6Parser7compileEv+0x32e>
    7d9e:	eb 14                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7da0:	48 89 c3             	mov    %rax,%rbx
    7da3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7da7:	48 89 c7             	mov    %rax,%rdi
    7daa:	e8 00 00 00 00       	callq  7daf <_ZN6Parser7compileEv+0x33f>
    7daf:	eb 03                	jmp    7db4 <_ZN6Parser7compileEv+0x344>
    7db1:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7db4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7db8:	48 89 c7             	mov    %rax,%rdi
    7dbb:	e8 00 00 00 00       	callq  7dc0 <_ZN6Parser7compileEv+0x350>
    7dc0:	48 89 d8             	mov    %rbx,%rax
    7dc3:	48 89 c7             	mov    %rax,%rdi
    7dc6:	e8 00 00 00 00       	callq  7dcb <_ZN6Parser7compileEv+0x35b>


    compileHWS();

    QByteArray firstGrape = compileModule("KPA_IP3");
}
    7dcb:	e8 00 00 00 00       	callq  7dd0 <_ZN6Parser7compileEv+0x360>
    7dd0:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    7dd7:	5b                   	pop    %rbx
    7dd8:	5d                   	pop    %rbp
    7dd9:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2ERKS_:

0000000000000000 <_ZN10QByteArrayC1ERKS_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 00             	mov    (%rax),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN10QByteArrayC1ERKS_+0x2d>
    QString script = *str;
  2d:	90                   	nop
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QDataStreamlsEh:

0000000000000000 <_ZN11QDataStreamlsEh>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  15:	0f be d0             	movsbl %al,%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	89 d6                	mov    %edx,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN11QDataStreamlsEh+0x26>
  26:	c9                   	leaveq 
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE4takeERKS0_:

0000000000000000 <_ZN4QMapI7QStringhE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapI7QStringhE4takeERKS0_+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapI7QStringhE4takeERKS0_+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapI7QStringhE4takeERKS0_+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 20          	movzbl 0x20(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapI7QStringhE4takeERKS0_+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapI7QStringhE4takeERKS0_+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE4takeERKh:

0000000000000000 <_ZN4QMapIhhE4takeERKh>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapIhhE4takeERKh+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapIhhE4takeERKh+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapIhhE4takeERKh+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 19          	movzbl 0x19(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapIhhE4takeERKh+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapIhhE4takeERKh+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE6appendERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE6appendERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI10QByteArrayE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI10QByteArrayE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI10QByteArrayE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI10QByteArrayE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI10QByteArrayE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI10QByteArrayE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI10QByteArrayE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI10QByteArrayE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI10QByteArrayE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE4takeERKS0_:

0000000000000000 <_ZN5QHashI7QString11QStringListE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QString11QStringListE4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QString11QStringListE4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE:

0000000000000000 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 83 c0 18          	add    $0x18,%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x20>
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  28:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x33>
  33:	90                   	nop
  34:	c9                   	leaveq 
  35:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE8findNodeERKh:

0000000000000000 <_ZNK8QMapDataIhhE8findNodeERKh>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataIhhE8findNodeERKh+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataIhhE8findNodeERKh+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataIhhE8findNodeERKh+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataIhhE8findNodeERKh+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataIhhE8findNodeERKh+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE:

0000000000000000 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE18detach_helper_growEii:

0000000000000000 <_ZN5QListI10QByteArrayE18detach_helper_growEii>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QString11QStringListE10deleteNodeEP9QHashNodeIS0_S1_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE10lowerBoundERKh:

0000000000000000 <_ZN8QMapNodeIhhE10lowerBoundERKh>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeIhhE10lowerBoundERKh+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeIhhE10lowerBoundERKh+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeIhhE10lowerBoundERKh+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:
#include "mainwindow.h"
#include "a.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   
